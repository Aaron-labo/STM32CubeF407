
F407_PCA9685.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d38  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003ec0  08003ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ed8  08003ed8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ed8  08003ed8  00013ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ee0  08003ee0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ee4  08003ee4  00013ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08003ef4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08003ef4  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd74  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d34  00000000  00000000  0002bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002dae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002e4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000216d0  00000000  00000000  0002edb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c539  00000000  00000000  00050488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5307  00000000  00000000  0005c9c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00121cc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000292c  00000000  00000000  00121d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ea8 	.word	0x08003ea8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003ea8 	.word	0x08003ea8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b96e 	b.w	8000e48 <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9d08      	ldr	r5, [sp, #32]
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	468c      	mov	ip, r1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f040 8083 	bne.w	8000c9a <__udivmoddi4+0x116>
 8000b94:	428a      	cmp	r2, r1
 8000b96:	4617      	mov	r7, r2
 8000b98:	d947      	bls.n	8000c2a <__udivmoddi4+0xa6>
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	b142      	cbz	r2, 8000bb2 <__udivmoddi4+0x2e>
 8000ba0:	f1c2 0020 	rsb	r0, r2, #32
 8000ba4:	fa24 f000 	lsr.w	r0, r4, r0
 8000ba8:	4091      	lsls	r1, r2
 8000baa:	4097      	lsls	r7, r2
 8000bac:	ea40 0c01 	orr.w	ip, r0, r1
 8000bb0:	4094      	lsls	r4, r2
 8000bb2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bb6:	0c23      	lsrs	r3, r4, #16
 8000bb8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bbc:	fa1f fe87 	uxth.w	lr, r7
 8000bc0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d909      	bls.n	8000be4 <__udivmoddi4+0x60>
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 8119 	bcs.w	8000e0c <__udivmoddi4+0x288>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 8116 	bls.w	8000e0c <__udivmoddi4+0x288>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	443b      	add	r3, r7
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x8c>
 8000bfc:	193c      	adds	r4, r7, r4
 8000bfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c02:	f080 8105 	bcs.w	8000e10 <__udivmoddi4+0x28c>
 8000c06:	45a6      	cmp	lr, r4
 8000c08:	f240 8102 	bls.w	8000e10 <__udivmoddi4+0x28c>
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	443c      	add	r4, r7
 8000c10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c14:	eba4 040e 	sub.w	r4, r4, lr
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa0>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	b902      	cbnz	r2, 8000c2e <__udivmoddi4+0xaa>
 8000c2c:	deff      	udf	#255	; 0xff
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	2a00      	cmp	r2, #0
 8000c34:	d150      	bne.n	8000cd8 <__udivmoddi4+0x154>
 8000c36:	1bcb      	subs	r3, r1, r7
 8000c38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c3c:	fa1f f887 	uxth.w	r8, r7
 8000c40:	2601      	movs	r6, #1
 8000c42:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c46:	0c21      	lsrs	r1, r4, #16
 8000c48:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c50:	fb08 f30c 	mul.w	r3, r8, ip
 8000c54:	428b      	cmp	r3, r1
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0xe4>
 8000c58:	1879      	adds	r1, r7, r1
 8000c5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0xe2>
 8000c60:	428b      	cmp	r3, r1
 8000c62:	f200 80e9 	bhi.w	8000e38 <__udivmoddi4+0x2b4>
 8000c66:	4684      	mov	ip, r0
 8000c68:	1ac9      	subs	r1, r1, r3
 8000c6a:	b2a3      	uxth	r3, r4
 8000c6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c74:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c78:	fb08 f800 	mul.w	r8, r8, r0
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x10c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x10a>
 8000c88:	45a0      	cmp	r8, r4
 8000c8a:	f200 80d9 	bhi.w	8000e40 <__udivmoddi4+0x2bc>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	eba4 0408 	sub.w	r4, r4, r8
 8000c94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c98:	e7bf      	b.n	8000c1a <__udivmoddi4+0x96>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x12e>
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	f000 80b1 	beq.w	8000e06 <__udivmoddi4+0x282>
 8000ca4:	2600      	movs	r6, #0
 8000ca6:	e9c5 0100 	strd	r0, r1, [r5]
 8000caa:	4630      	mov	r0, r6
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	fab3 f683 	clz	r6, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d14a      	bne.n	8000d50 <__udivmoddi4+0x1cc>
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0x140>
 8000cbe:	4282      	cmp	r2, r0
 8000cc0:	f200 80b8 	bhi.w	8000e34 <__udivmoddi4+0x2b0>
 8000cc4:	1a84      	subs	r4, r0, r2
 8000cc6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	468c      	mov	ip, r1
 8000cce:	2d00      	cmp	r5, #0
 8000cd0:	d0a8      	beq.n	8000c24 <__udivmoddi4+0xa0>
 8000cd2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0xa0>
 8000cd8:	f1c2 0320 	rsb	r3, r2, #32
 8000cdc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ce0:	4097      	lsls	r7, r2
 8000ce2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ce6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cea:	40d9      	lsrs	r1, r3
 8000cec:	4330      	orrs	r0, r6
 8000cee:	0c03      	lsrs	r3, r0, #16
 8000cf0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cf4:	fa1f f887 	uxth.w	r8, r7
 8000cf8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d00:	fb06 f108 	mul.w	r1, r6, r8
 8000d04:	4299      	cmp	r1, r3
 8000d06:	fa04 f402 	lsl.w	r4, r4, r2
 8000d0a:	d909      	bls.n	8000d20 <__udivmoddi4+0x19c>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d12:	f080 808d 	bcs.w	8000e30 <__udivmoddi4+0x2ac>
 8000d16:	4299      	cmp	r1, r3
 8000d18:	f240 808a 	bls.w	8000e30 <__udivmoddi4+0x2ac>
 8000d1c:	3e02      	subs	r6, #2
 8000d1e:	443b      	add	r3, r7
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b281      	uxth	r1, r0
 8000d24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d30:	fb00 f308 	mul.w	r3, r0, r8
 8000d34:	428b      	cmp	r3, r1
 8000d36:	d907      	bls.n	8000d48 <__udivmoddi4+0x1c4>
 8000d38:	1879      	adds	r1, r7, r1
 8000d3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d3e:	d273      	bcs.n	8000e28 <__udivmoddi4+0x2a4>
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d971      	bls.n	8000e28 <__udivmoddi4+0x2a4>
 8000d44:	3802      	subs	r0, #2
 8000d46:	4439      	add	r1, r7
 8000d48:	1acb      	subs	r3, r1, r3
 8000d4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d4e:	e778      	b.n	8000c42 <__udivmoddi4+0xbe>
 8000d50:	f1c6 0c20 	rsb	ip, r6, #32
 8000d54:	fa03 f406 	lsl.w	r4, r3, r6
 8000d58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d5c:	431c      	orrs	r4, r3
 8000d5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d62:	fa01 f306 	lsl.w	r3, r1, r6
 8000d66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	0c3b      	lsrs	r3, r7, #16
 8000d72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d76:	fa1f f884 	uxth.w	r8, r4
 8000d7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d82:	fb09 fa08 	mul.w	sl, r9, r8
 8000d86:	458a      	cmp	sl, r1
 8000d88:	fa02 f206 	lsl.w	r2, r2, r6
 8000d8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x220>
 8000d92:	1861      	adds	r1, r4, r1
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	d248      	bcs.n	8000e2c <__udivmoddi4+0x2a8>
 8000d9a:	458a      	cmp	sl, r1
 8000d9c:	d946      	bls.n	8000e2c <__udivmoddi4+0x2a8>
 8000d9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000da2:	4421      	add	r1, r4
 8000da4:	eba1 010a 	sub.w	r1, r1, sl
 8000da8:	b2bf      	uxth	r7, r7
 8000daa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000db6:	fb00 f808 	mul.w	r8, r0, r8
 8000dba:	45b8      	cmp	r8, r7
 8000dbc:	d907      	bls.n	8000dce <__udivmoddi4+0x24a>
 8000dbe:	19e7      	adds	r7, r4, r7
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d22e      	bcs.n	8000e24 <__udivmoddi4+0x2a0>
 8000dc6:	45b8      	cmp	r8, r7
 8000dc8:	d92c      	bls.n	8000e24 <__udivmoddi4+0x2a0>
 8000dca:	3802      	subs	r0, #2
 8000dcc:	4427      	add	r7, r4
 8000dce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd2:	eba7 0708 	sub.w	r7, r7, r8
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	454f      	cmp	r7, r9
 8000ddc:	46c6      	mov	lr, r8
 8000dde:	4649      	mov	r1, r9
 8000de0:	d31a      	bcc.n	8000e18 <__udivmoddi4+0x294>
 8000de2:	d017      	beq.n	8000e14 <__udivmoddi4+0x290>
 8000de4:	b15d      	cbz	r5, 8000dfe <__udivmoddi4+0x27a>
 8000de6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dea:	eb67 0701 	sbc.w	r7, r7, r1
 8000dee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000df2:	40f2      	lsrs	r2, r6
 8000df4:	ea4c 0202 	orr.w	r2, ip, r2
 8000df8:	40f7      	lsrs	r7, r6
 8000dfa:	e9c5 2700 	strd	r2, r7, [r5]
 8000dfe:	2600      	movs	r6, #0
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	462e      	mov	r6, r5
 8000e08:	4628      	mov	r0, r5
 8000e0a:	e70b      	b.n	8000c24 <__udivmoddi4+0xa0>
 8000e0c:	4606      	mov	r6, r0
 8000e0e:	e6e9      	b.n	8000be4 <__udivmoddi4+0x60>
 8000e10:	4618      	mov	r0, r3
 8000e12:	e6fd      	b.n	8000c10 <__udivmoddi4+0x8c>
 8000e14:	4543      	cmp	r3, r8
 8000e16:	d2e5      	bcs.n	8000de4 <__udivmoddi4+0x260>
 8000e18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e20:	3801      	subs	r0, #1
 8000e22:	e7df      	b.n	8000de4 <__udivmoddi4+0x260>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e7d2      	b.n	8000dce <__udivmoddi4+0x24a>
 8000e28:	4660      	mov	r0, ip
 8000e2a:	e78d      	b.n	8000d48 <__udivmoddi4+0x1c4>
 8000e2c:	4681      	mov	r9, r0
 8000e2e:	e7b9      	b.n	8000da4 <__udivmoddi4+0x220>
 8000e30:	4666      	mov	r6, ip
 8000e32:	e775      	b.n	8000d20 <__udivmoddi4+0x19c>
 8000e34:	4630      	mov	r0, r6
 8000e36:	e74a      	b.n	8000cce <__udivmoddi4+0x14a>
 8000e38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e3c:	4439      	add	r1, r7
 8000e3e:	e713      	b.n	8000c68 <__udivmoddi4+0xe4>
 8000e40:	3802      	subs	r0, #2
 8000e42:	443c      	add	r4, r7
 8000e44:	e724      	b.n	8000c90 <__udivmoddi4+0x10c>
 8000e46:	bf00      	nop

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <PCA9685_SetBit>:
#include "math.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af04      	add	r7, sp, #16
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
 8000e56:	460b      	mov	r3, r1
 8000e58:	71bb      	strb	r3, [r7, #6]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 8000e5e:	797b      	ldrb	r3, [r7, #5]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <PCA9685_SetBit+0x1c>
 8000e64:	2301      	movs	r3, #1
 8000e66:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8000e68:	4b24      	ldr	r3, [pc, #144]	; (8000efc <PCA9685_SetBit+0xb0>)
 8000e6a:	6818      	ldr	r0, [r3, #0]
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	230a      	movs	r3, #10
 8000e72:	9302      	str	r3, [sp, #8]
 8000e74:	2301      	movs	r3, #1
 8000e76:	9301      	str	r3, [sp, #4]
 8000e78:	f107 030f 	add.w	r3, r7, #15
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	f001 fad5 	bl	8002430 <HAL_I2C_Mem_Read>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e031      	b.n	8000ef4 <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	2201      	movs	r2, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	b25a      	sxtb	r2, r3
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 8000eb0:	797b      	ldrb	r3, [r7, #5]
 8000eb2:	f003 0201 	and.w	r2, r3, #1
 8000eb6:	79bb      	ldrb	r3, [r7, #6]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	b25a      	sxtb	r2, r3
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	b25b      	sxtb	r3, r3
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <PCA9685_SetBit+0xb0>)
 8000ecc:	6818      	ldr	r0, [r3, #0]
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	230a      	movs	r3, #10
 8000ed4:	9302      	str	r3, [sp, #8]
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	f107 030f 	add.w	r3, r7, #15
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	f001 f9aa 	bl	800223c <HAL_I2C_Mem_Write>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000028 	.word	0x20000028

08000f00 <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 8000f06:	2306      	movs	r3, #6
 8000f08:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <PCA9685_SoftwareReset+0x30>)
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	1dfa      	adds	r2, r7, #7
 8000f10:	230a      	movs	r3, #10
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2301      	movs	r3, #1
 8000f16:	2100      	movs	r1, #0
 8000f18:	f001 f892 	bl	8002040 <HAL_I2C_Master_Transmit>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000028 	.word	0x20000028

08000f34 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	461a      	mov	r2, r3
 8000f42:	2104      	movs	r1, #4
 8000f44:	2000      	movs	r0, #0
 8000f46:	f7ff ff81 	bl	8000e4c <PCA9685_SetBit>
 8000f4a:	4603      	mov	r3, r0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	461a      	mov	r2, r3
 8000f62:	2107      	movs	r1, #7
 8000f64:	2000      	movs	r0, #0
 8000f66:	f7ff ff71 	bl	8000e4c <PCA9685_SetBit>
 8000f6a:	4603      	mov	r3, r0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	461a      	mov	r2, r3
 8000f82:	2105      	movs	r1, #5
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff ff61 	bl	8000e4c <PCA9685_SetBit>
 8000f8a:	4603      	mov	r3, r0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	0000      	movs	r0, r0
	...

08000f98 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af04      	add	r7, sp, #16
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d902      	bls.n	8000fb2 <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8000fac:	2303      	movs	r3, #3
 8000fae:	72fb      	strb	r3, [r7, #11]
 8000fb0:	e046      	b.n	8001040 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	2b18      	cmp	r3, #24
 8000fb6:	d802      	bhi.n	8000fbe <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8000fb8:	23ff      	movs	r3, #255	; 0xff
 8000fba:	72fb      	strb	r3, [r7, #11]
 8000fbc:	e040      	b.n	8001040 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	ee07 3a90 	vmov	s15, r3
 8000fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc8:	ee17 0a90 	vmov	r0, s15
 8000fcc:	f7ff fa60 	bl	8000490 <__aeabi_f2d>
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <PCA9685_SetPwmFrequency+0xe8>)
 8000fd6:	f7ff fab3 	bl	8000540 <__aeabi_dmul>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	a126      	add	r1, pc, #152	; (adr r1, 8001078 <PCA9685_SetPwmFrequency+0xe0>)
 8000fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fe4:	f7ff fbd6 	bl	8000794 <__aeabi_ddiv>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	4b23      	ldr	r3, [pc, #140]	; (8001084 <PCA9685_SetPwmFrequency+0xec>)
 8000ff6:	f7ff f8eb 	bl	80001d0 <__aeabi_dsub>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	f7ff fd57 	bl	8000ab4 <__aeabi_d2f>
 8001006:	4603      	mov	r3, r0
 8001008:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f7ff fa40 	bl	8000490 <__aeabi_f2d>
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <PCA9685_SetPwmFrequency+0xf0>)
 8001016:	f7ff f8dd 	bl	80001d4 <__adddf3>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	ec43 2b17 	vmov	d7, r2, r3
 8001022:	eeb0 0a47 	vmov.f32	s0, s14
 8001026:	eef0 0a67 	vmov.f32	s1, s15
 800102a:	f002 febd 	bl	8003da8 <floor>
 800102e:	ec53 2b10 	vmov	r2, r3, d0
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fd1d 	bl	8000a74 <__aeabi_d2uiz>
 800103a:	4603      	mov	r3, r0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f7ff ff77 	bl	8000f34 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <PCA9685_SetPwmFrequency+0xf4>)
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	230a      	movs	r3, #10
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	2301      	movs	r3, #1
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	f107 030b 	add.w	r3, r7, #11
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	22fe      	movs	r2, #254	; 0xfe
 800105c:	2180      	movs	r1, #128	; 0x80
 800105e:	f001 f8ed 	bl	800223c <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff ff66 	bl	8000f34 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff ff73 	bl	8000f54 <PCA9685_RestartMode>
	return PCA9685_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	00000000 	.word	0x00000000
 800107c:	4177d784 	.word	0x4177d784
 8001080:	40b00000 	.word	0x40b00000
 8001084:	3ff00000 	.word	0x3ff00000
 8001088:	3fe00000 	.word	0x3fe00000
 800108c:	20000028 	.word	0x20000028

08001090 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af04      	add	r7, sp, #16
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	460b      	mov	r3, r1
 800109c:	80bb      	strh	r3, [r7, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	3306      	adds	r3, #6
 80010aa:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 80010ac:	88bb      	ldrh	r3, [r7, #4]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 80010bc:	887b      	ldrh	r3, [r7, #2]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <PCA9685_SetPwm+0x70>)
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	230a      	movs	r3, #10
 80010d6:	9302      	str	r3, [sp, #8]
 80010d8:	2304      	movs	r3, #4
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2301      	movs	r3, #1
 80010e4:	2180      	movs	r1, #128	; 0x80
 80010e6:	f001 f8a9 	bl	800223c <HAL_I2C_Mem_Write>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000028 	.word	0x20000028

08001104 <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
 800110e:	460b      	mov	r3, r1
 8001110:	80bb      	strh	r3, [r7, #4]
 8001112:	4613      	mov	r3, r2
 8001114:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 8001116:	88bb      	ldrh	r3, [r7, #4]
 8001118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800111c:	d302      	bcc.n	8001124 <PCA9685_SetPin+0x20>
 800111e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001122:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 8001124:	79bb      	ldrb	r3, [r7, #6]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d025      	beq.n	8001176 <PCA9685_SetPin+0x72>
    if (Value == 0) {
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d108      	bne.n	8001142 <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ffa9 	bl	8001090 <PCA9685_SetPwm>
 800113e:	4603      	mov	r3, r0
 8001140:	e03a      	b.n	80011b8 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 8001142:	88bb      	ldrh	r3, [r7, #4]
 8001144:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001148:	4293      	cmp	r3, r2
 800114a:	d108      	bne.n	800115e <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff9b 	bl	8001090 <PCA9685_SetPwm>
 800115a:	4603      	mov	r3, r0
 800115c:	e02c      	b.n	80011b8 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 800115e:	88bb      	ldrh	r3, [r7, #4]
 8001160:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001164:	330f      	adds	r3, #15
 8001166:	b29a      	uxth	r2, r3
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff8f 	bl	8001090 <PCA9685_SetPwm>
 8001172:	4603      	mov	r3, r0
 8001174:	e020      	b.n	80011b8 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	f640 72ff 	movw	r2, #4095	; 0xfff
 800117c:	4293      	cmp	r3, r2
 800117e:	d108      	bne.n	8001192 <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff81 	bl	8001090 <PCA9685_SetPwm>
 800118e:	4603      	mov	r3, r0
 8001190:	e012      	b.n	80011b8 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 8001192:	88bb      	ldrh	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d108      	bne.n	80011aa <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff75 	bl	8001090 <PCA9685_SetPwm>
 80011a6:	4603      	mov	r3, r0
 80011a8:	e006      	b.n	80011b8 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 80011aa:	88ba      	ldrh	r2, [r7, #4]
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff6d 	bl	8001090 <PCA9685_SetPwm>
 80011b6:	4603      	mov	r3, r0
    }
  }
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	ed87 0a00 	vstr	s0, [r7]
 80011cc:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 80011ce:	edd7 7a00 	vldr	s15, [r7]
 80011d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	d502      	bpl.n	80011e2 <PCA9685_SetServoAngle+0x22>
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 80011e2:	edd7 7a00 	vldr	s15, [r7]
 80011e6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001268 <PCA9685_SetServoAngle+0xa8>
 80011ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	dd01      	ble.n	80011f8 <PCA9685_SetServoAngle+0x38>
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <PCA9685_SetServoAngle+0xac>)
 80011f6:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 80011f8:	6838      	ldr	r0, [r7, #0]
 80011fa:	f7ff f949 	bl	8000490 <__aeabi_f2d>
 80011fe:	a318      	add	r3, pc, #96	; (adr r3, 8001260 <PCA9685_SetServoAngle+0xa0>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff f99c 	bl	8000540 <__aeabi_dmul>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <PCA9685_SetServoAngle+0xb0>)
 8001216:	f7ff fabd 	bl	8000794 <__aeabi_ddiv>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <PCA9685_SetServoAngle+0xb4>)
 8001228:	f7fe ffd4 	bl	80001d4 <__adddf3>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f7ff fc3e 	bl	8000ab4 <__aeabi_d2f>
 8001238:	4603      	mov	r3, r0
 800123a:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 800123c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001244:	ee17 3a90 	vmov	r3, s15
 8001248:	b299      	uxth	r1, r3
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2200      	movs	r2, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff58 	bl	8001104 <PCA9685_SetPin>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	00000000 	.word	0x00000000
 8001264:	40786000 	.word	0x40786000
 8001268:	43340000 	.word	0x43340000
 800126c:	43340000 	.word	0x43340000
 8001270:	40668000 	.word	0x40668000
 8001274:	405b8000 	.word	0x405b8000

08001278 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <PCA9685_Init+0x28>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 8001286:	f7ff fe3b 	bl	8000f00 <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 800128a:	2030      	movs	r0, #48	; 0x30
 800128c:	f7ff fe84 	bl	8000f98 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8001290:	2001      	movs	r0, #1
 8001292:	f7ff fe6f 	bl	8000f74 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000028 	.word	0x20000028

080012a4 <app_main_init>:

#define SERVO_COUNT	2
uint8_t ActiveServo;
uint8_t Angle = 0;

void app_main_init(void) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	PCA9685_Init(&hi2c2);
 80012a8:	4809      	ldr	r0, [pc, #36]	; (80012d0 <app_main_init+0x2c>)
 80012aa:	f7ff ffe5 	bl	8001278 <PCA9685_Init>
	PCA9685_SetServoAngle(0, 0);
 80012ae:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80012d4 <app_main_init+0x30>
 80012b2:	2000      	movs	r0, #0
 80012b4:	f7ff ff84 	bl	80011c0 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, 0);
 80012b8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80012d4 <app_main_init+0x30>
 80012bc:	2001      	movs	r0, #1
 80012be:	f7ff ff7f 	bl	80011c0 <PCA9685_SetServoAngle>
//	PCA9685_SetServoAngle(2, 0);
//	PCA9685_SetServoAngle(3, 0);
//	PCA9685_SetServoAngle(4, 0);

	HAL_Delay(2000);
 80012c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012c6:	f000 fad1 	bl	800186c <HAL_Delay>
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000002c 	.word	0x2000002c
 80012d4:	00000000 	.word	0x00000000

080012d8 <app_main>:

void app_main(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
//	}
//	HAL_Delay(500);
//	ActiveServo++;
//	if (ActiveServo >= SERVO_COUNT)
//		ActiveServo = 0;
	for (uint8_t Angle = 0;; Angle += 10) {
 80012de:	2300      	movs	r3, #0
 80012e0:	71fb      	strb	r3, [r7, #7]
		PCA9685_SetServoAngle(0, Angle);
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ec:	eeb0 0a67 	vmov.f32	s0, s15
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff ff65 	bl	80011c0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(1, Angle);
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001300:	eeb0 0a67 	vmov.f32	s0, s15
 8001304:	2001      	movs	r0, #1
 8001306:	f7ff ff5b 	bl	80011c0 <PCA9685_SetServoAngle>
		Angle += 10;
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	330a      	adds	r3, #10
 800130e:	71fb      	strb	r3, [r7, #7]
		if(Angle >= 180)
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	2bb3      	cmp	r3, #179	; 0xb3
 8001314:	d901      	bls.n	800131a <app_main+0x42>
		{
			Angle = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	71fb      	strb	r3, [r7, #7]
		}
		HAL_Delay(500);
 800131a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800131e:	f000 faa5 	bl	800186c <HAL_Delay>
	for (uint8_t Angle = 0;; Angle += 10) {
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	330a      	adds	r3, #10
 8001326:	71fb      	strb	r3, [r7, #7]
		PCA9685_SetServoAngle(0, Angle);
 8001328:	e7db      	b.n	80012e2 <app_main+0xa>
	...

0800132c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_GPIO_Init+0x68>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a16      	ldr	r2, [pc, #88]	; (8001394 <MX_GPIO_Init+0x68>)
 800133c:	f043 0320 	orr.w	r3, r3, #32
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_GPIO_Init+0x68>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0320 	and.w	r3, r3, #32
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <MX_GPIO_Init+0x68>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <MX_GPIO_Init+0x68>)
 8001358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <MX_GPIO_Init+0x68>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_GPIO_Init+0x68>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <MX_GPIO_Init+0x68>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_GPIO_Init+0x68>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800

08001398 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_I2C2_Init+0x50>)
 800139e:	4a13      	ldr	r2, [pc, #76]	; (80013ec <MX_I2C2_Init+0x54>)
 80013a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_I2C2_Init+0x50>)
 80013a4:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <MX_I2C2_Init+0x58>)
 80013a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_I2C2_Init+0x50>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_I2C2_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_I2C2_Init+0x50>)
 80013b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <MX_I2C2_Init+0x50>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_I2C2_Init+0x50>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <MX_I2C2_Init+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_I2C2_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <MX_I2C2_Init+0x50>)
 80013d6:	f000 fcef 	bl	8001db8 <HAL_I2C_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013e0:	f000 f8cc 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2000002c 	.word	0x2000002c
 80013ec:	40005800 	.word	0x40005800
 80013f0:	00061a80 	.word	0x00061a80

080013f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a19      	ldr	r2, [pc, #100]	; (8001478 <HAL_I2C_MspInit+0x84>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d12b      	bne.n	800146e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_I2C_MspInit+0x88>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a17      	ldr	r2, [pc, #92]	; (800147c <HAL_I2C_MspInit+0x88>)
 8001420:	f043 0320 	orr.w	r3, r3, #32
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_I2C_MspInit+0x88>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001432:	2303      	movs	r3, #3
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001436:	2312      	movs	r3, #18
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800143a:	2301      	movs	r3, #1
 800143c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001442:	2304      	movs	r3, #4
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	480c      	ldr	r0, [pc, #48]	; (8001480 <HAL_I2C_MspInit+0x8c>)
 800144e:	f000 fb17 	bl	8001a80 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_I2C_MspInit+0x88>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <HAL_I2C_MspInit+0x88>)
 800145c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_I2C_MspInit+0x88>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800146e:	bf00      	nop
 8001470:	3728      	adds	r7, #40	; 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40005800 	.word	0x40005800
 800147c:	40023800 	.word	0x40023800
 8001480:	40021400 	.word	0x40021400

08001484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001488:	f000 f97e 	bl	8001788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148c:	f000 f80c 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001490:	f7ff ff4c 	bl	800132c <MX_GPIO_Init>
  MX_I2C2_Init();
 8001494:	f7ff ff80 	bl	8001398 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001498:	f000 f8da 	bl	8001650 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 800149c:	f7ff ff02 	bl	80012a4 <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_main();
 80014a0:	f7ff ff1a 	bl	80012d8 <app_main>
  {
 80014a4:	e7fc      	b.n	80014a0 <main+0x1c>
	...

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b094      	sub	sp, #80	; 0x50
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	2230      	movs	r2, #48	; 0x30
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 fc6c 	bl	8003d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	4b28      	ldr	r3, [pc, #160]	; (8001574 <SystemClock_Config+0xcc>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	4a27      	ldr	r2, [pc, #156]	; (8001574 <SystemClock_Config+0xcc>)
 80014d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
 80014dc:	4b25      	ldr	r3, [pc, #148]	; (8001574 <SystemClock_Config+0xcc>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <SystemClock_Config+0xd0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a21      	ldr	r2, [pc, #132]	; (8001578 <SystemClock_Config+0xd0>)
 80014f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <SystemClock_Config+0xd0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001504:	2301      	movs	r3, #1
 8001506:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001508:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150e:	2302      	movs	r3, #2
 8001510:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001512:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001516:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001518:	2304      	movs	r3, #4
 800151a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800151c:	23a8      	movs	r3, #168	; 0xa8
 800151e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001520:	2302      	movs	r3, #2
 8001522:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001524:	2304      	movs	r3, #4
 8001526:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001528:	f107 0320 	add.w	r3, r7, #32
 800152c:	4618      	mov	r0, r3
 800152e:	f001 fd83 	bl	8003038 <HAL_RCC_OscConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001538:	f000 f820 	bl	800157c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153c:	230f      	movs	r3, #15
 800153e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001540:	2302      	movs	r3, #2
 8001542:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001548:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800154c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800154e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001552:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2105      	movs	r1, #5
 800155a:	4618      	mov	r0, r3
 800155c:	f001 ffe4 	bl	8003528 <HAL_RCC_ClockConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001566:	f000 f809 	bl	800157c <Error_Handler>
  }
}
 800156a:	bf00      	nop
 800156c:	3750      	adds	r7, #80	; 0x50
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	40007000 	.word	0x40007000

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001584:	e7fe      	b.n	8001584 <Error_Handler+0x8>
	...

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_MspInit+0x4c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a0f      	ldr	r2, [pc, #60]	; (80015d4 <HAL_MspInit+0x4c>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_MspInit+0x4c>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_MspInit+0x4c>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_MspInit+0x4c>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <NMI_Handler+0x4>

080015de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <MemManage_Handler+0x4>

080015ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001624:	f000 f902 	bl	800182c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <SystemInit+0x20>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <SystemInit+0x20>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_USART1_UART_Init+0x4c>)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <MX_USART1_UART_Init+0x50>)
 8001658:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <MX_USART1_UART_Init+0x4c>)
 800165c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001660:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_USART1_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_USART1_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_USART1_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_USART1_UART_Init+0x4c>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_USART1_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_USART1_UART_Init+0x4c>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_USART1_UART_Init+0x4c>)
 8001688:	f002 f94a 	bl	8003920 <HAL_UART_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001692:	f7ff ff73 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000080 	.word	0x20000080
 80016a0:	40011000 	.word	0x40011000

080016a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a19      	ldr	r2, [pc, #100]	; (8001728 <HAL_UART_MspInit+0x84>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d12c      	bne.n	8001720 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_UART_MspInit+0x88>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	4a17      	ldr	r2, [pc, #92]	; (800172c <HAL_UART_MspInit+0x88>)
 80016d0:	f043 0310 	orr.w	r3, r3, #16
 80016d4:	6453      	str	r3, [r2, #68]	; 0x44
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_UART_MspInit+0x88>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <HAL_UART_MspInit+0x88>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a10      	ldr	r2, [pc, #64]	; (800172c <HAL_UART_MspInit+0x88>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_UART_MspInit+0x88>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001710:	2307      	movs	r3, #7
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <HAL_UART_MspInit+0x8c>)
 800171c:	f000 f9b0 	bl	8001a80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	; 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40011000 	.word	0x40011000
 800172c:	40023800 	.word	0x40023800
 8001730:	40020000 	.word	0x40020000

08001734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800176c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001738:	480d      	ldr	r0, [pc, #52]	; (8001770 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800173a:	490e      	ldr	r1, [pc, #56]	; (8001774 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800173c:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001740:	e002      	b.n	8001748 <LoopCopyDataInit>

08001742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001746:	3304      	adds	r3, #4

08001748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800174c:	d3f9      	bcc.n	8001742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174e:	4a0b      	ldr	r2, [pc, #44]	; (800177c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001750:	4c0b      	ldr	r4, [pc, #44]	; (8001780 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001754:	e001      	b.n	800175a <LoopFillZerobss>

08001756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001758:	3204      	adds	r2, #4

0800175a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800175c:	d3fb      	bcc.n	8001756 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800175e:	f7ff ff65 	bl	800162c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001762:	f002 faf3 	bl	8003d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001766:	f7ff fe8d 	bl	8001484 <main>
  bx  lr    
 800176a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800176c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001774:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001778:	08003ee8 	.word	0x08003ee8
  ldr r2, =_sbss
 800177c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001780:	200000c8 	.word	0x200000c8

08001784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001784:	e7fe      	b.n	8001784 <ADC_IRQHandler>
	...

08001788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <HAL_Init+0x40>)
 8001792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001796:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <HAL_Init+0x40>)
 800179e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_Init+0x40>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <HAL_Init+0x40>)
 80017aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b0:	2003      	movs	r0, #3
 80017b2:	f000 f931 	bl	8001a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b6:	2000      	movs	r0, #0
 80017b8:	f000 f808 	bl	80017cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017bc:	f7ff fee4 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023c00 	.word	0x40023c00

080017cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_InitTick+0x54>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_InitTick+0x58>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f93b 	bl	8001a66 <HAL_SYSTICK_Config>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00e      	b.n	8001818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b0f      	cmp	r3, #15
 80017fe:	d80a      	bhi.n	8001816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001800:	2200      	movs	r2, #0
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f000 f911 	bl	8001a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800180c:	4a06      	ldr	r2, [pc, #24]	; (8001828 <HAL_InitTick+0x5c>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e000      	b.n	8001818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000000 	.word	0x20000000
 8001824:	20000008 	.word	0x20000008
 8001828:	20000004 	.word	0x20000004

0800182c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_IncTick+0x20>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_IncTick+0x24>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <HAL_IncTick+0x24>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000008 	.word	0x20000008
 8001850:	200000c4 	.word	0x200000c4

08001854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_GetTick+0x14>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	200000c4 	.word	0x200000c4

0800186c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff ffee 	bl	8001854 <HAL_GetTick>
 8001878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001884:	d005      	beq.n	8001892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_Delay+0x44>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001892:	bf00      	nop
 8001894:	f7ff ffde 	bl	8001854 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d8f7      	bhi.n	8001894 <HAL_Delay+0x28>
  {
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000008 	.word	0x20000008

080018b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d0:	4013      	ands	r3, r2
 80018d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e6:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	60d3      	str	r3, [r2, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <__NVIC_GetPriorityGrouping+0x18>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	f003 0307 	and.w	r3, r3, #7
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db0a      	blt.n	8001942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	490c      	ldr	r1, [pc, #48]	; (8001964 <__NVIC_SetPriority+0x4c>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	440b      	add	r3, r1
 800193c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001940:	e00a      	b.n	8001958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4908      	ldr	r1, [pc, #32]	; (8001968 <__NVIC_SetPriority+0x50>)
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	3b04      	subs	r3, #4
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	440b      	add	r3, r1
 8001956:	761a      	strb	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf28      	it	cs
 800198a:	2304      	movcs	r3, #4
 800198c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	2b06      	cmp	r3, #6
 8001994:	d902      	bls.n	800199c <NVIC_EncodePriority+0x30>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3b03      	subs	r3, #3
 800199a:	e000      	b.n	800199e <NVIC_EncodePriority+0x32>
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43d9      	mvns	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	4313      	orrs	r3, r2
         );
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	; 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e4:	d301      	bcc.n	80019ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00f      	b.n	8001a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <SysTick_Config+0x40>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f2:	210f      	movs	r1, #15
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f7ff ff8e 	bl	8001918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <SysTick_Config+0x40>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <SysTick_Config+0x40>)
 8001a04:	2207      	movs	r2, #7
 8001a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	e000e010 	.word	0xe000e010

08001a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff47 	bl	80018b4 <__NVIC_SetPriorityGrouping>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a40:	f7ff ff5c 	bl	80018fc <__NVIC_GetPriorityGrouping>
 8001a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	6978      	ldr	r0, [r7, #20]
 8001a4c:	f7ff ff8e 	bl	800196c <NVIC_EncodePriority>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff5d 	bl	8001918 <__NVIC_SetPriority>
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffb0 	bl	80019d4 <SysTick_Config>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	e16b      	b.n	8001d74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	f040 815a 	bne.w	8001d6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d005      	beq.n	8001ad2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d130      	bne.n	8001b34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	2203      	movs	r2, #3
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b08:	2201      	movs	r2, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	f003 0201 	and.w	r2, r3, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d017      	beq.n	8001b70 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d123      	bne.n	8001bc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	08da      	lsrs	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3208      	adds	r2, #8
 8001b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	220f      	movs	r2, #15
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	08da      	lsrs	r2, r3, #3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3208      	adds	r2, #8
 8001bbe:	69b9      	ldr	r1, [r7, #24]
 8001bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0203 	and.w	r2, r3, #3
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80b4 	beq.w	8001d6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	4b60      	ldr	r3, [pc, #384]	; (8001d8c <HAL_GPIO_Init+0x30c>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	4a5f      	ldr	r2, [pc, #380]	; (8001d8c <HAL_GPIO_Init+0x30c>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c14:	6453      	str	r3, [r2, #68]	; 0x44
 8001c16:	4b5d      	ldr	r3, [pc, #372]	; (8001d8c <HAL_GPIO_Init+0x30c>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c22:	4a5b      	ldr	r2, [pc, #364]	; (8001d90 <HAL_GPIO_Init+0x310>)
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	3302      	adds	r3, #2
 8001c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	220f      	movs	r2, #15
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a52      	ldr	r2, [pc, #328]	; (8001d94 <HAL_GPIO_Init+0x314>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d02b      	beq.n	8001ca6 <HAL_GPIO_Init+0x226>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a51      	ldr	r2, [pc, #324]	; (8001d98 <HAL_GPIO_Init+0x318>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d025      	beq.n	8001ca2 <HAL_GPIO_Init+0x222>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a50      	ldr	r2, [pc, #320]	; (8001d9c <HAL_GPIO_Init+0x31c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d01f      	beq.n	8001c9e <HAL_GPIO_Init+0x21e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4f      	ldr	r2, [pc, #316]	; (8001da0 <HAL_GPIO_Init+0x320>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d019      	beq.n	8001c9a <HAL_GPIO_Init+0x21a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4e      	ldr	r2, [pc, #312]	; (8001da4 <HAL_GPIO_Init+0x324>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d013      	beq.n	8001c96 <HAL_GPIO_Init+0x216>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4d      	ldr	r2, [pc, #308]	; (8001da8 <HAL_GPIO_Init+0x328>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00d      	beq.n	8001c92 <HAL_GPIO_Init+0x212>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4c      	ldr	r2, [pc, #304]	; (8001dac <HAL_GPIO_Init+0x32c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d007      	beq.n	8001c8e <HAL_GPIO_Init+0x20e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4b      	ldr	r2, [pc, #300]	; (8001db0 <HAL_GPIO_Init+0x330>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d101      	bne.n	8001c8a <HAL_GPIO_Init+0x20a>
 8001c86:	2307      	movs	r3, #7
 8001c88:	e00e      	b.n	8001ca8 <HAL_GPIO_Init+0x228>
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	e00c      	b.n	8001ca8 <HAL_GPIO_Init+0x228>
 8001c8e:	2306      	movs	r3, #6
 8001c90:	e00a      	b.n	8001ca8 <HAL_GPIO_Init+0x228>
 8001c92:	2305      	movs	r3, #5
 8001c94:	e008      	b.n	8001ca8 <HAL_GPIO_Init+0x228>
 8001c96:	2304      	movs	r3, #4
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x228>
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e004      	b.n	8001ca8 <HAL_GPIO_Init+0x228>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e002      	b.n	8001ca8 <HAL_GPIO_Init+0x228>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x228>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	f002 0203 	and.w	r2, r2, #3
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	4093      	lsls	r3, r2
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb8:	4935      	ldr	r1, [pc, #212]	; (8001d90 <HAL_GPIO_Init+0x310>)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc6:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <HAL_GPIO_Init+0x334>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cea:	4a32      	ldr	r2, [pc, #200]	; (8001db4 <HAL_GPIO_Init+0x334>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cf0:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <HAL_GPIO_Init+0x334>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d14:	4a27      	ldr	r2, [pc, #156]	; (8001db4 <HAL_GPIO_Init+0x334>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d1a:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <HAL_GPIO_Init+0x334>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d3e:	4a1d      	ldr	r2, [pc, #116]	; (8001db4 <HAL_GPIO_Init+0x334>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d44:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <HAL_GPIO_Init+0x334>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d68:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <HAL_GPIO_Init+0x334>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3301      	adds	r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	f67f ae90 	bls.w	8001a9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40013800 	.word	0x40013800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	40020c00 	.word	0x40020c00
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40021400 	.word	0x40021400
 8001dac:	40021800 	.word	0x40021800
 8001db0:	40021c00 	.word	0x40021c00
 8001db4:	40013c00 	.word	0x40013c00

08001db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e12b      	b.n	8002022 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff fb08 	bl	80013f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2224      	movs	r2, #36	; 0x24
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0201 	bic.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e1c:	f001 fd58 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 8001e20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4a81      	ldr	r2, [pc, #516]	; (800202c <HAL_I2C_Init+0x274>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d807      	bhi.n	8001e3c <HAL_I2C_Init+0x84>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4a80      	ldr	r2, [pc, #512]	; (8002030 <HAL_I2C_Init+0x278>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	bf94      	ite	ls
 8001e34:	2301      	movls	r3, #1
 8001e36:	2300      	movhi	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e006      	b.n	8001e4a <HAL_I2C_Init+0x92>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4a7d      	ldr	r2, [pc, #500]	; (8002034 <HAL_I2C_Init+0x27c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	bf94      	ite	ls
 8001e44:	2301      	movls	r3, #1
 8001e46:	2300      	movhi	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e0e7      	b.n	8002022 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4a78      	ldr	r2, [pc, #480]	; (8002038 <HAL_I2C_Init+0x280>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	0c9b      	lsrs	r3, r3, #18
 8001e5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4a6a      	ldr	r2, [pc, #424]	; (800202c <HAL_I2C_Init+0x274>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d802      	bhi.n	8001e8c <HAL_I2C_Init+0xd4>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	e009      	b.n	8001ea0 <HAL_I2C_Init+0xe8>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e92:	fb02 f303 	mul.w	r3, r2, r3
 8001e96:	4a69      	ldr	r2, [pc, #420]	; (800203c <HAL_I2C_Init+0x284>)
 8001e98:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001eb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	495c      	ldr	r1, [pc, #368]	; (800202c <HAL_I2C_Init+0x274>)
 8001ebc:	428b      	cmp	r3, r1
 8001ebe:	d819      	bhi.n	8001ef4 <HAL_I2C_Init+0x13c>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1e59      	subs	r1, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ece:	1c59      	adds	r1, r3, #1
 8001ed0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ed4:	400b      	ands	r3, r1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_I2C_Init+0x138>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1e59      	subs	r1, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eee:	e051      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	e04f      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d111      	bne.n	8001f20 <HAL_I2C_Init+0x168>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1e58      	subs	r0, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	440b      	add	r3, r1
 8001f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf0c      	ite	eq
 8001f18:	2301      	moveq	r3, #1
 8001f1a:	2300      	movne	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	e012      	b.n	8001f46 <HAL_I2C_Init+0x18e>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1e58      	subs	r0, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	0099      	lsls	r1, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f36:	3301      	adds	r3, #1
 8001f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	bf0c      	ite	eq
 8001f40:	2301      	moveq	r3, #1
 8001f42:	2300      	movne	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_I2C_Init+0x196>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e022      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10e      	bne.n	8001f74 <HAL_I2C_Init+0x1bc>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1e58      	subs	r0, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6859      	ldr	r1, [r3, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	440b      	add	r3, r1
 8001f64:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f72:	e00f      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1e58      	subs	r0, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	0099      	lsls	r1, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	6809      	ldr	r1, [r1, #0]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6911      	ldr	r1, [r2, #16]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68d2      	ldr	r2, [r2, #12]
 8001fce:	4311      	orrs	r1, r2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	000186a0 	.word	0x000186a0
 8002030:	001e847f 	.word	0x001e847f
 8002034:	003d08ff 	.word	0x003d08ff
 8002038:	431bde83 	.word	0x431bde83
 800203c:	10624dd3 	.word	0x10624dd3

08002040 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af02      	add	r7, sp, #8
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	461a      	mov	r2, r3
 800204c:	460b      	mov	r3, r1
 800204e:	817b      	strh	r3, [r7, #10]
 8002050:	4613      	mov	r3, r2
 8002052:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff fbfe 	bl	8001854 <HAL_GetTick>
 8002058:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b20      	cmp	r3, #32
 8002064:	f040 80e0 	bne.w	8002228 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	2319      	movs	r3, #25
 800206e:	2201      	movs	r2, #1
 8002070:	4970      	ldr	r1, [pc, #448]	; (8002234 <HAL_I2C_Master_Transmit+0x1f4>)
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 fe02 	bl	8002c7c <I2C_WaitOnFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800207e:	2302      	movs	r3, #2
 8002080:	e0d3      	b.n	800222a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_I2C_Master_Transmit+0x50>
 800208c:	2302      	movs	r3, #2
 800208e:	e0cc      	b.n	800222a <HAL_I2C_Master_Transmit+0x1ea>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d007      	beq.n	80020b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2221      	movs	r2, #33	; 0x21
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2210      	movs	r2, #16
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	893a      	ldrh	r2, [r7, #8]
 80020e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4a50      	ldr	r2, [pc, #320]	; (8002238 <HAL_I2C_Master_Transmit+0x1f8>)
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020f8:	8979      	ldrh	r1, [r7, #10]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	6a3a      	ldr	r2, [r7, #32]
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 fbbc 	bl	800287c <I2C_MasterRequestWrite>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e08d      	b.n	800222a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002124:	e066      	b.n	80021f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	6a39      	ldr	r1, [r7, #32]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 fe7c 	bl	8002e28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00d      	beq.n	8002152 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	2b04      	cmp	r3, #4
 800213c:	d107      	bne.n	800214e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800214c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e06b      	b.n	800222a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216c:	b29b      	uxth	r3, r3
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b04      	cmp	r3, #4
 800218e:	d11b      	bne.n	80021c8 <HAL_I2C_Master_Transmit+0x188>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002194:	2b00      	cmp	r3, #0
 8002196:	d017      	beq.n	80021c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	781a      	ldrb	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	6a39      	ldr	r1, [r7, #32]
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 fe6c 	bl	8002eaa <I2C_WaitOnBTFFlagUntilTimeout>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00d      	beq.n	80021f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d107      	bne.n	80021f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e01a      	b.n	800222a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d194      	bne.n	8002126 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	e000      	b.n	800222a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002228:	2302      	movs	r3, #2
  }
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	00100002 	.word	0x00100002
 8002238:	ffff0000 	.word	0xffff0000

0800223c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	4608      	mov	r0, r1
 8002246:	4611      	mov	r1, r2
 8002248:	461a      	mov	r2, r3
 800224a:	4603      	mov	r3, r0
 800224c:	817b      	strh	r3, [r7, #10]
 800224e:	460b      	mov	r3, r1
 8002250:	813b      	strh	r3, [r7, #8]
 8002252:	4613      	mov	r3, r2
 8002254:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002256:	f7ff fafd 	bl	8001854 <HAL_GetTick>
 800225a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b20      	cmp	r3, #32
 8002266:	f040 80d9 	bne.w	800241c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2319      	movs	r3, #25
 8002270:	2201      	movs	r2, #1
 8002272:	496d      	ldr	r1, [pc, #436]	; (8002428 <HAL_I2C_Mem_Write+0x1ec>)
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 fd01 	bl	8002c7c <I2C_WaitOnFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002280:	2302      	movs	r3, #2
 8002282:	e0cc      	b.n	800241e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_I2C_Mem_Write+0x56>
 800228e:	2302      	movs	r3, #2
 8002290:	e0c5      	b.n	800241e <HAL_I2C_Mem_Write+0x1e2>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d007      	beq.n	80022b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2221      	movs	r2, #33	; 0x21
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2240      	movs	r2, #64	; 0x40
 80022d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a3a      	ldr	r2, [r7, #32]
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a4d      	ldr	r2, [pc, #308]	; (800242c <HAL_I2C_Mem_Write+0x1f0>)
 80022f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022fa:	88f8      	ldrh	r0, [r7, #6]
 80022fc:	893a      	ldrh	r2, [r7, #8]
 80022fe:	8979      	ldrh	r1, [r7, #10]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	4603      	mov	r3, r0
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fb38 	bl	8002980 <I2C_RequestMemoryWrite>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d052      	beq.n	80023bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e081      	b.n	800241e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 fd82 	bl	8002e28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00d      	beq.n	8002346 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	2b04      	cmp	r3, #4
 8002330:	d107      	bne.n	8002342 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002340:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e06b      	b.n	800241e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	781a      	ldrb	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b04      	cmp	r3, #4
 8002382:	d11b      	bne.n	80023bc <HAL_I2C_Mem_Write+0x180>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	2b00      	cmp	r3, #0
 800238a:	d017      	beq.n	80023bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1aa      	bne.n	800231a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 fd6e 	bl	8002eaa <I2C_WaitOnBTFFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00d      	beq.n	80023f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d107      	bne.n	80023ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e016      	b.n	800241e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	e000      	b.n	800241e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800241c:	2302      	movs	r3, #2
  }
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	00100002 	.word	0x00100002
 800242c:	ffff0000 	.word	0xffff0000

08002430 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08c      	sub	sp, #48	; 0x30
 8002434:	af02      	add	r7, sp, #8
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	4608      	mov	r0, r1
 800243a:	4611      	mov	r1, r2
 800243c:	461a      	mov	r2, r3
 800243e:	4603      	mov	r3, r0
 8002440:	817b      	strh	r3, [r7, #10]
 8002442:	460b      	mov	r3, r1
 8002444:	813b      	strh	r3, [r7, #8]
 8002446:	4613      	mov	r3, r2
 8002448:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800244a:	f7ff fa03 	bl	8001854 <HAL_GetTick>
 800244e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b20      	cmp	r3, #32
 800245a:	f040 8208 	bne.w	800286e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2319      	movs	r3, #25
 8002464:	2201      	movs	r2, #1
 8002466:	497b      	ldr	r1, [pc, #492]	; (8002654 <HAL_I2C_Mem_Read+0x224>)
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fc07 	bl	8002c7c <I2C_WaitOnFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002474:	2302      	movs	r3, #2
 8002476:	e1fb      	b.n	8002870 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_I2C_Mem_Read+0x56>
 8002482:	2302      	movs	r3, #2
 8002484:	e1f4      	b.n	8002870 <HAL_I2C_Mem_Read+0x440>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d007      	beq.n	80024ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2222      	movs	r2, #34	; 0x22
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2240      	movs	r2, #64	; 0x40
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80024dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4a5b      	ldr	r2, [pc, #364]	; (8002658 <HAL_I2C_Mem_Read+0x228>)
 80024ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024ee:	88f8      	ldrh	r0, [r7, #6]
 80024f0:	893a      	ldrh	r2, [r7, #8]
 80024f2:	8979      	ldrh	r1, [r7, #10]
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	4603      	mov	r3, r0
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fad4 	bl	8002aac <I2C_RequestMemoryRead>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e1b0      	b.n	8002870 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002512:	2b00      	cmp	r3, #0
 8002514:	d113      	bne.n	800253e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002516:	2300      	movs	r3, #0
 8002518:	623b      	str	r3, [r7, #32]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	623b      	str	r3, [r7, #32]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	623b      	str	r3, [r7, #32]
 800252a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	e184      	b.n	8002848 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002542:	2b01      	cmp	r3, #1
 8002544:	d11b      	bne.n	800257e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002554:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e164      	b.n	8002848 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	2b02      	cmp	r3, #2
 8002584:	d11b      	bne.n	80025be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002594:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	e144      	b.n	8002848 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025d4:	e138      	b.n	8002848 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025da:	2b03      	cmp	r3, #3
 80025dc:	f200 80f1 	bhi.w	80027c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d123      	bne.n	8002630 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fc9d 	bl	8002f2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e139      	b.n	8002870 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800262e:	e10b      	b.n	8002848 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002634:	2b02      	cmp	r3, #2
 8002636:	d14e      	bne.n	80026d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263e:	2200      	movs	r2, #0
 8002640:	4906      	ldr	r1, [pc, #24]	; (800265c <HAL_I2C_Mem_Read+0x22c>)
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fb1a 	bl	8002c7c <I2C_WaitOnFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e10e      	b.n	8002870 <HAL_I2C_Mem_Read+0x440>
 8002652:	bf00      	nop
 8002654:	00100002 	.word	0x00100002
 8002658:	ffff0000 	.word	0xffff0000
 800265c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026d4:	e0b8      	b.n	8002848 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026dc:	2200      	movs	r2, #0
 80026de:	4966      	ldr	r1, [pc, #408]	; (8002878 <HAL_I2C_Mem_Read+0x448>)
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 facb 	bl	8002c7c <I2C_WaitOnFlagUntilTimeout>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0bf      	b.n	8002870 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002728:	b29b      	uxth	r3, r3
 800272a:	3b01      	subs	r3, #1
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002738:	2200      	movs	r2, #0
 800273a:	494f      	ldr	r1, [pc, #316]	; (8002878 <HAL_I2C_Mem_Read+0x448>)
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 fa9d 	bl	8002c7c <I2C_WaitOnFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e091      	b.n	8002870 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027c0:	e042      	b.n	8002848 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 fbb0 	bl	8002f2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e04c      	b.n	8002870 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b04      	cmp	r3, #4
 8002814:	d118      	bne.n	8002848 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	2b00      	cmp	r3, #0
 800284e:	f47f aec2 	bne.w	80025d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800286e:	2302      	movs	r3, #2
  }
}
 8002870:	4618      	mov	r0, r3
 8002872:	3728      	adds	r7, #40	; 0x28
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	00010004 	.word	0x00010004

0800287c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	460b      	mov	r3, r1
 800288a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b08      	cmp	r3, #8
 8002896:	d006      	beq.n	80028a6 <I2C_MasterRequestWrite+0x2a>
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d003      	beq.n	80028a6 <I2C_MasterRequestWrite+0x2a>
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028a4:	d108      	bne.n	80028b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	e00b      	b.n	80028d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	2b12      	cmp	r3, #18
 80028be:	d107      	bne.n	80028d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f9cd 	bl	8002c7c <I2C_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00d      	beq.n	8002904 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f6:	d103      	bne.n	8002900 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e035      	b.n	8002970 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800290c:	d108      	bne.n	8002920 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800290e:	897b      	ldrh	r3, [r7, #10]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800291c:	611a      	str	r2, [r3, #16]
 800291e:	e01b      	b.n	8002958 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002920:	897b      	ldrh	r3, [r7, #10]
 8002922:	11db      	asrs	r3, r3, #7
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f003 0306 	and.w	r3, r3, #6
 800292a:	b2db      	uxtb	r3, r3
 800292c:	f063 030f 	orn	r3, r3, #15
 8002930:	b2da      	uxtb	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	490e      	ldr	r1, [pc, #56]	; (8002978 <I2C_MasterRequestWrite+0xfc>)
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f9f3 	bl	8002d2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e010      	b.n	8002970 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800294e:	897b      	ldrh	r3, [r7, #10]
 8002950:	b2da      	uxtb	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4907      	ldr	r1, [pc, #28]	; (800297c <I2C_MasterRequestWrite+0x100>)
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f9e3 	bl	8002d2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	00010008 	.word	0x00010008
 800297c:	00010002 	.word	0x00010002

08002980 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	4608      	mov	r0, r1
 800298a:	4611      	mov	r1, r2
 800298c:	461a      	mov	r2, r3
 800298e:	4603      	mov	r3, r0
 8002990:	817b      	strh	r3, [r7, #10]
 8002992:	460b      	mov	r3, r1
 8002994:	813b      	strh	r3, [r7, #8]
 8002996:	4613      	mov	r3, r2
 8002998:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f960 	bl	8002c7c <I2C_WaitOnFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00d      	beq.n	80029de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d0:	d103      	bne.n	80029da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e05f      	b.n	8002a9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029de:	897b      	ldrh	r3, [r7, #10]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	6a3a      	ldr	r2, [r7, #32]
 80029f2:	492d      	ldr	r1, [pc, #180]	; (8002aa8 <I2C_RequestMemoryWrite+0x128>)
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f998 	bl	8002d2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e04c      	b.n	8002a9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	6a39      	ldr	r1, [r7, #32]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fa02 	bl	8002e28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00d      	beq.n	8002a46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d107      	bne.n	8002a42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e02b      	b.n	8002a9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d105      	bne.n	8002a58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a4c:	893b      	ldrh	r3, [r7, #8]
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	611a      	str	r2, [r3, #16]
 8002a56:	e021      	b.n	8002a9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a58:	893b      	ldrh	r3, [r7, #8]
 8002a5a:	0a1b      	lsrs	r3, r3, #8
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a68:	6a39      	ldr	r1, [r7, #32]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f9dc 	bl	8002e28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00d      	beq.n	8002a92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d107      	bne.n	8002a8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e005      	b.n	8002a9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a92:	893b      	ldrh	r3, [r7, #8]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	00010002 	.word	0x00010002

08002aac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	4608      	mov	r0, r1
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4603      	mov	r3, r0
 8002abc:	817b      	strh	r3, [r7, #10]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	813b      	strh	r3, [r7, #8]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ad4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f8c2 	bl	8002c7c <I2C_WaitOnFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00d      	beq.n	8002b1a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0c:	d103      	bne.n	8002b16 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e0aa      	b.n	8002c70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b1a:	897b      	ldrh	r3, [r7, #10]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	6a3a      	ldr	r2, [r7, #32]
 8002b2e:	4952      	ldr	r1, [pc, #328]	; (8002c78 <I2C_RequestMemoryRead+0x1cc>)
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f8fa 	bl	8002d2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e097      	b.n	8002c70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b58:	6a39      	ldr	r1, [r7, #32]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f964 	bl	8002e28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00d      	beq.n	8002b82 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d107      	bne.n	8002b7e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e076      	b.n	8002c70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d105      	bne.n	8002b94 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b88:	893b      	ldrh	r3, [r7, #8]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	611a      	str	r2, [r3, #16]
 8002b92:	e021      	b.n	8002bd8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b94:	893b      	ldrh	r3, [r7, #8]
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba4:	6a39      	ldr	r1, [r7, #32]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f93e 	bl	8002e28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d107      	bne.n	8002bca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e050      	b.n	8002c70 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bce:	893b      	ldrh	r3, [r7, #8]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bda:	6a39      	ldr	r1, [r7, #32]
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f923 	bl	8002e28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00d      	beq.n	8002c04 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d107      	bne.n	8002c00 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e035      	b.n	8002c70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c12:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f82b 	bl	8002c7c <I2C_WaitOnFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00d      	beq.n	8002c48 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c3a:	d103      	bne.n	8002c44 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e013      	b.n	8002c70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c48:	897b      	ldrh	r3, [r7, #10]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	6a3a      	ldr	r2, [r7, #32]
 8002c5c:	4906      	ldr	r1, [pc, #24]	; (8002c78 <I2C_RequestMemoryRead+0x1cc>)
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f863 	bl	8002d2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	00010002 	.word	0x00010002

08002c7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c8c:	e025      	b.n	8002cda <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d021      	beq.n	8002cda <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c96:	f7fe fddd 	bl	8001854 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d302      	bcc.n	8002cac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d116      	bne.n	8002cda <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f043 0220 	orr.w	r2, r3, #32
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e023      	b.n	8002d22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d10d      	bne.n	8002d00 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	43da      	mvns	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	bf0c      	ite	eq
 8002cf6:	2301      	moveq	r3, #1
 8002cf8:	2300      	movne	r3, #0
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	e00c      	b.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	43da      	mvns	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	bf0c      	ite	eq
 8002d12:	2301      	moveq	r3, #1
 8002d14:	2300      	movne	r3, #0
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	461a      	mov	r2, r3
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d0b6      	beq.n	8002c8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d38:	e051      	b.n	8002dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d48:	d123      	bne.n	8002d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f043 0204 	orr.w	r2, r3, #4
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e046      	b.n	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d021      	beq.n	8002dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9a:	f7fe fd5b 	bl	8001854 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d302      	bcc.n	8002db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d116      	bne.n	8002dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f043 0220 	orr.w	r2, r3, #32
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e020      	b.n	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	0c1b      	lsrs	r3, r3, #16
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d10c      	bne.n	8002e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4013      	ands	r3, r2
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	bf14      	ite	ne
 8002dfa:	2301      	movne	r3, #1
 8002dfc:	2300      	moveq	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	e00b      	b.n	8002e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	43da      	mvns	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d18d      	bne.n	8002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e34:	e02d      	b.n	8002e92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f8ce 	bl	8002fd8 <I2C_IsAcknowledgeFailed>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e02d      	b.n	8002ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d021      	beq.n	8002e92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4e:	f7fe fd01 	bl	8001854 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d302      	bcc.n	8002e64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d116      	bne.n	8002e92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f043 0220 	orr.w	r2, r3, #32
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e007      	b.n	8002ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9c:	2b80      	cmp	r3, #128	; 0x80
 8002e9e:	d1ca      	bne.n	8002e36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002eb6:	e02d      	b.n	8002f14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f88d 	bl	8002fd8 <I2C_IsAcknowledgeFailed>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e02d      	b.n	8002f24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ece:	d021      	beq.n	8002f14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed0:	f7fe fcc0 	bl	8001854 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d302      	bcc.n	8002ee6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d116      	bne.n	8002f14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e007      	b.n	8002f24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d1ca      	bne.n	8002eb8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f38:	e042      	b.n	8002fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b10      	cmp	r3, #16
 8002f46:	d119      	bne.n	8002f7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f06f 0210 	mvn.w	r2, #16
 8002f50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e029      	b.n	8002fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7c:	f7fe fc6a 	bl	8001854 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d302      	bcc.n	8002f92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d116      	bne.n	8002fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	f043 0220 	orr.w	r2, r3, #32
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e007      	b.n	8002fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fca:	2b40      	cmp	r3, #64	; 0x40
 8002fcc:	d1b5      	bne.n	8002f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fee:	d11b      	bne.n	8003028 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ff8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	f043 0204 	orr.w	r2, r3, #4
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e264      	b.n	8003514 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d075      	beq.n	8003142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003056:	4ba3      	ldr	r3, [pc, #652]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b04      	cmp	r3, #4
 8003060:	d00c      	beq.n	800307c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003062:	4ba0      	ldr	r3, [pc, #640]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800306a:	2b08      	cmp	r3, #8
 800306c:	d112      	bne.n	8003094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306e:	4b9d      	ldr	r3, [pc, #628]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800307a:	d10b      	bne.n	8003094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307c:	4b99      	ldr	r3, [pc, #612]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d05b      	beq.n	8003140 <HAL_RCC_OscConfig+0x108>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d157      	bne.n	8003140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e23f      	b.n	8003514 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309c:	d106      	bne.n	80030ac <HAL_RCC_OscConfig+0x74>
 800309e:	4b91      	ldr	r3, [pc, #580]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a90      	ldr	r2, [pc, #576]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e01d      	b.n	80030e8 <HAL_RCC_OscConfig+0xb0>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCC_OscConfig+0x98>
 80030b6:	4b8b      	ldr	r3, [pc, #556]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a8a      	ldr	r2, [pc, #552]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b88      	ldr	r3, [pc, #544]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a87      	ldr	r2, [pc, #540]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e00b      	b.n	80030e8 <HAL_RCC_OscConfig+0xb0>
 80030d0:	4b84      	ldr	r3, [pc, #528]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a83      	ldr	r2, [pc, #524]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	4b81      	ldr	r3, [pc, #516]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a80      	ldr	r2, [pc, #512]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d013      	beq.n	8003118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe fbb0 	bl	8001854 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f8:	f7fe fbac 	bl	8001854 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e204      	b.n	8003514 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4b76      	ldr	r3, [pc, #472]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0xc0>
 8003116:	e014      	b.n	8003142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fe fb9c 	bl	8001854 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003120:	f7fe fb98 	bl	8001854 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e1f0      	b.n	8003514 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003132:	4b6c      	ldr	r3, [pc, #432]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0xe8>
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d063      	beq.n	8003216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800314e:	4b65      	ldr	r3, [pc, #404]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800315a:	4b62      	ldr	r3, [pc, #392]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003162:	2b08      	cmp	r3, #8
 8003164:	d11c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003166:	4b5f      	ldr	r3, [pc, #380]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d116      	bne.n	80031a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	4b5c      	ldr	r3, [pc, #368]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_RCC_OscConfig+0x152>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d001      	beq.n	800318a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e1c4      	b.n	8003514 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318a:	4b56      	ldr	r3, [pc, #344]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4952      	ldr	r1, [pc, #328]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319e:	e03a      	b.n	8003216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d020      	beq.n	80031ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a8:	4b4f      	ldr	r3, [pc, #316]	; (80032e8 <HAL_RCC_OscConfig+0x2b0>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ae:	f7fe fb51 	bl	8001854 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b6:	f7fe fb4d 	bl	8001854 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e1a5      	b.n	8003514 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c8:	4b46      	ldr	r3, [pc, #280]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d4:	4b43      	ldr	r3, [pc, #268]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4940      	ldr	r1, [pc, #256]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]
 80031e8:	e015      	b.n	8003216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ea:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <HAL_RCC_OscConfig+0x2b0>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fe fb30 	bl	8001854 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031f8:	f7fe fb2c 	bl	8001854 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e184      	b.n	8003514 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320a:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d030      	beq.n	8003284 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d016      	beq.n	8003258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800322a:	4b30      	ldr	r3, [pc, #192]	; (80032ec <HAL_RCC_OscConfig+0x2b4>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003230:	f7fe fb10 	bl	8001854 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003238:	f7fe fb0c 	bl	8001854 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e164      	b.n	8003514 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324a:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x200>
 8003256:	e015      	b.n	8003284 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003258:	4b24      	ldr	r3, [pc, #144]	; (80032ec <HAL_RCC_OscConfig+0x2b4>)
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325e:	f7fe faf9 	bl	8001854 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003266:	f7fe faf5 	bl	8001854 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e14d      	b.n	8003514 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003278:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800327a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f0      	bne.n	8003266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80a0 	beq.w	80033d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003292:	2300      	movs	r3, #0
 8003294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10f      	bne.n	80032c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	4a0e      	ldr	r2, [pc, #56]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80032ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b0:	6413      	str	r3, [r2, #64]	; 0x40
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032be:	2301      	movs	r3, #1
 80032c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_RCC_OscConfig+0x2b8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d121      	bne.n	8003312 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ce:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <HAL_RCC_OscConfig+0x2b8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a07      	ldr	r2, [pc, #28]	; (80032f0 <HAL_RCC_OscConfig+0x2b8>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032da:	f7fe fabb 	bl	8001854 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	e011      	b.n	8003306 <HAL_RCC_OscConfig+0x2ce>
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	42470000 	.word	0x42470000
 80032ec:	42470e80 	.word	0x42470e80
 80032f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f4:	f7fe faae 	bl	8001854 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e106      	b.n	8003514 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003306:	4b85      	ldr	r3, [pc, #532]	; (800351c <HAL_RCC_OscConfig+0x4e4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d106      	bne.n	8003328 <HAL_RCC_OscConfig+0x2f0>
 800331a:	4b81      	ldr	r3, [pc, #516]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331e:	4a80      	ldr	r2, [pc, #512]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6713      	str	r3, [r2, #112]	; 0x70
 8003326:	e01c      	b.n	8003362 <HAL_RCC_OscConfig+0x32a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b05      	cmp	r3, #5
 800332e:	d10c      	bne.n	800334a <HAL_RCC_OscConfig+0x312>
 8003330:	4b7b      	ldr	r3, [pc, #492]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003334:	4a7a      	ldr	r2, [pc, #488]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 8003336:	f043 0304 	orr.w	r3, r3, #4
 800333a:	6713      	str	r3, [r2, #112]	; 0x70
 800333c:	4b78      	ldr	r3, [pc, #480]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	4a77      	ldr	r2, [pc, #476]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6713      	str	r3, [r2, #112]	; 0x70
 8003348:	e00b      	b.n	8003362 <HAL_RCC_OscConfig+0x32a>
 800334a:	4b75      	ldr	r3, [pc, #468]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a74      	ldr	r2, [pc, #464]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	6713      	str	r3, [r2, #112]	; 0x70
 8003356:	4b72      	ldr	r3, [pc, #456]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	4a71      	ldr	r2, [pc, #452]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 800335c:	f023 0304 	bic.w	r3, r3, #4
 8003360:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d015      	beq.n	8003396 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fe fa73 	bl	8001854 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003370:	e00a      	b.n	8003388 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fe fa6f 	bl	8001854 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003380:	4293      	cmp	r3, r2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e0c5      	b.n	8003514 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003388:	4b65      	ldr	r3, [pc, #404]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0ee      	beq.n	8003372 <HAL_RCC_OscConfig+0x33a>
 8003394:	e014      	b.n	80033c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003396:	f7fe fa5d 	bl	8001854 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339c:	e00a      	b.n	80033b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800339e:	f7fe fa59 	bl	8001854 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e0af      	b.n	8003514 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b4:	4b5a      	ldr	r3, [pc, #360]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1ee      	bne.n	800339e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d105      	bne.n	80033d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c6:	4b56      	ldr	r3, [pc, #344]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	4a55      	ldr	r2, [pc, #340]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 80033cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 809b 	beq.w	8003512 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033dc:	4b50      	ldr	r3, [pc, #320]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d05c      	beq.n	80034a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d141      	bne.n	8003474 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f0:	4b4c      	ldr	r3, [pc, #304]	; (8003524 <HAL_RCC_OscConfig+0x4ec>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f6:	f7fe fa2d 	bl	8001854 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fe:	f7fe fa29 	bl	8001854 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e081      	b.n	8003514 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003410:	4b43      	ldr	r3, [pc, #268]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f0      	bne.n	80033fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69da      	ldr	r2, [r3, #28]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	019b      	lsls	r3, r3, #6
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	3b01      	subs	r3, #1
 8003436:	041b      	lsls	r3, r3, #16
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	061b      	lsls	r3, r3, #24
 8003440:	4937      	ldr	r1, [pc, #220]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 8003442:	4313      	orrs	r3, r2
 8003444:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003446:	4b37      	ldr	r3, [pc, #220]	; (8003524 <HAL_RCC_OscConfig+0x4ec>)
 8003448:	2201      	movs	r2, #1
 800344a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7fe fa02 	bl	8001854 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003454:	f7fe f9fe 	bl	8001854 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e056      	b.n	8003514 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003466:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0x41c>
 8003472:	e04e      	b.n	8003512 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003474:	4b2b      	ldr	r3, [pc, #172]	; (8003524 <HAL_RCC_OscConfig+0x4ec>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347a:	f7fe f9eb 	bl	8001854 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003482:	f7fe f9e7 	bl	8001854 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e03f      	b.n	8003514 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003494:	4b22      	ldr	r3, [pc, #136]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f0      	bne.n	8003482 <HAL_RCC_OscConfig+0x44a>
 80034a0:	e037      	b.n	8003512 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e032      	b.n	8003514 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034ae:	4b1c      	ldr	r3, [pc, #112]	; (8003520 <HAL_RCC_OscConfig+0x4e8>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d028      	beq.n	800350e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d121      	bne.n	800350e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d11a      	bne.n	800350e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034de:	4013      	ands	r3, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d111      	bne.n	800350e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	085b      	lsrs	r3, r3, #1
 80034f6:	3b01      	subs	r3, #1
 80034f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d107      	bne.n	800350e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d001      	beq.n	8003512 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40007000 	.word	0x40007000
 8003520:	40023800 	.word	0x40023800
 8003524:	42470060 	.word	0x42470060

08003528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e0cc      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800353c:	4b68      	ldr	r3, [pc, #416]	; (80036e0 <HAL_RCC_ClockConfig+0x1b8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d90c      	bls.n	8003564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354a:	4b65      	ldr	r3, [pc, #404]	; (80036e0 <HAL_RCC_ClockConfig+0x1b8>)
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b63      	ldr	r3, [pc, #396]	; (80036e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0b8      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d020      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800357c:	4b59      	ldr	r3, [pc, #356]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4a58      	ldr	r2, [pc, #352]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003594:	4b53      	ldr	r3, [pc, #332]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a52      	ldr	r2, [pc, #328]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800359e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a0:	4b50      	ldr	r3, [pc, #320]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	494d      	ldr	r1, [pc, #308]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d044      	beq.n	8003648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	4b47      	ldr	r3, [pc, #284]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d119      	bne.n	8003606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e07f      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d003      	beq.n	80035e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d107      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e6:	4b3f      	ldr	r3, [pc, #252]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e06f      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f6:	4b3b      	ldr	r3, [pc, #236]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e067      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003606:	4b37      	ldr	r3, [pc, #220]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f023 0203 	bic.w	r2, r3, #3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4934      	ldr	r1, [pc, #208]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003614:	4313      	orrs	r3, r2
 8003616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003618:	f7fe f91c 	bl	8001854 <HAL_GetTick>
 800361c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	e00a      	b.n	8003636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003620:	f7fe f918 	bl	8001854 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	; 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e04f      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	4b2b      	ldr	r3, [pc, #172]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 020c 	and.w	r2, r3, #12
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	429a      	cmp	r2, r3
 8003646:	d1eb      	bne.n	8003620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003648:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <HAL_RCC_ClockConfig+0x1b8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d20c      	bcs.n	8003670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b22      	ldr	r3, [pc, #136]	; (80036e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e032      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800367c:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4916      	ldr	r1, [pc, #88]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800369a:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	490e      	ldr	r1, [pc, #56]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036ae:	f000 f821 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 80036b2:	4602      	mov	r2, r0
 80036b4:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	091b      	lsrs	r3, r3, #4
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	490a      	ldr	r1, [pc, #40]	; (80036e8 <HAL_RCC_ClockConfig+0x1c0>)
 80036c0:	5ccb      	ldrb	r3, [r1, r3]
 80036c2:	fa22 f303 	lsr.w	r3, r2, r3
 80036c6:	4a09      	ldr	r2, [pc, #36]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 80036c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ca:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fe f87c 	bl	80017cc <HAL_InitTick>

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40023c00 	.word	0x40023c00
 80036e4:	40023800 	.word	0x40023800
 80036e8:	08003ec0 	.word	0x08003ec0
 80036ec:	20000000 	.word	0x20000000
 80036f0:	20000004 	.word	0x20000004

080036f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	607b      	str	r3, [r7, #4]
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	2300      	movs	r3, #0
 8003706:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800370c:	4b67      	ldr	r3, [pc, #412]	; (80038ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 030c 	and.w	r3, r3, #12
 8003714:	2b08      	cmp	r3, #8
 8003716:	d00d      	beq.n	8003734 <HAL_RCC_GetSysClockFreq+0x40>
 8003718:	2b08      	cmp	r3, #8
 800371a:	f200 80bd 	bhi.w	8003898 <HAL_RCC_GetSysClockFreq+0x1a4>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_RCC_GetSysClockFreq+0x34>
 8003722:	2b04      	cmp	r3, #4
 8003724:	d003      	beq.n	800372e <HAL_RCC_GetSysClockFreq+0x3a>
 8003726:	e0b7      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003728:	4b61      	ldr	r3, [pc, #388]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800372a:	60bb      	str	r3, [r7, #8]
       break;
 800372c:	e0b7      	b.n	800389e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800372e:	4b61      	ldr	r3, [pc, #388]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003730:	60bb      	str	r3, [r7, #8]
      break;
 8003732:	e0b4      	b.n	800389e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003734:	4b5d      	ldr	r3, [pc, #372]	; (80038ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800373c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800373e:	4b5b      	ldr	r3, [pc, #364]	; (80038ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d04d      	beq.n	80037e6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800374a:	4b58      	ldr	r3, [pc, #352]	; (80038ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	099b      	lsrs	r3, r3, #6
 8003750:	461a      	mov	r2, r3
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	f240 10ff 	movw	r0, #511	; 0x1ff
 800375a:	f04f 0100 	mov.w	r1, #0
 800375e:	ea02 0800 	and.w	r8, r2, r0
 8003762:	ea03 0901 	and.w	r9, r3, r1
 8003766:	4640      	mov	r0, r8
 8003768:	4649      	mov	r1, r9
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	014b      	lsls	r3, r1, #5
 8003774:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003778:	0142      	lsls	r2, r0, #5
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	ebb0 0008 	subs.w	r0, r0, r8
 8003782:	eb61 0109 	sbc.w	r1, r1, r9
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	018b      	lsls	r3, r1, #6
 8003790:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003794:	0182      	lsls	r2, r0, #6
 8003796:	1a12      	subs	r2, r2, r0
 8003798:	eb63 0301 	sbc.w	r3, r3, r1
 800379c:	f04f 0000 	mov.w	r0, #0
 80037a0:	f04f 0100 	mov.w	r1, #0
 80037a4:	00d9      	lsls	r1, r3, #3
 80037a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037aa:	00d0      	lsls	r0, r2, #3
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	eb12 0208 	adds.w	r2, r2, r8
 80037b4:	eb43 0309 	adc.w	r3, r3, r9
 80037b8:	f04f 0000 	mov.w	r0, #0
 80037bc:	f04f 0100 	mov.w	r1, #0
 80037c0:	0259      	lsls	r1, r3, #9
 80037c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80037c6:	0250      	lsls	r0, r2, #9
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4610      	mov	r0, r2
 80037ce:	4619      	mov	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	461a      	mov	r2, r3
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	f7fd f9bc 	bl	8000b54 <__aeabi_uldivmod>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4613      	mov	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	e04a      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e6:	4b31      	ldr	r3, [pc, #196]	; (80038ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	099b      	lsrs	r3, r3, #6
 80037ec:	461a      	mov	r2, r3
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037f6:	f04f 0100 	mov.w	r1, #0
 80037fa:	ea02 0400 	and.w	r4, r2, r0
 80037fe:	ea03 0501 	and.w	r5, r3, r1
 8003802:	4620      	mov	r0, r4
 8003804:	4629      	mov	r1, r5
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	014b      	lsls	r3, r1, #5
 8003810:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003814:	0142      	lsls	r2, r0, #5
 8003816:	4610      	mov	r0, r2
 8003818:	4619      	mov	r1, r3
 800381a:	1b00      	subs	r0, r0, r4
 800381c:	eb61 0105 	sbc.w	r1, r1, r5
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	018b      	lsls	r3, r1, #6
 800382a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800382e:	0182      	lsls	r2, r0, #6
 8003830:	1a12      	subs	r2, r2, r0
 8003832:	eb63 0301 	sbc.w	r3, r3, r1
 8003836:	f04f 0000 	mov.w	r0, #0
 800383a:	f04f 0100 	mov.w	r1, #0
 800383e:	00d9      	lsls	r1, r3, #3
 8003840:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003844:	00d0      	lsls	r0, r2, #3
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	1912      	adds	r2, r2, r4
 800384c:	eb45 0303 	adc.w	r3, r5, r3
 8003850:	f04f 0000 	mov.w	r0, #0
 8003854:	f04f 0100 	mov.w	r1, #0
 8003858:	0299      	lsls	r1, r3, #10
 800385a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800385e:	0290      	lsls	r0, r2, #10
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	461a      	mov	r2, r3
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	f7fd f970 	bl	8000b54 <__aeabi_uldivmod>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4613      	mov	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	0c1b      	lsrs	r3, r3, #16
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	3301      	adds	r3, #1
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	fbb2 f3f3 	udiv	r3, r2, r3
 8003894:	60bb      	str	r3, [r7, #8]
      break;
 8003896:	e002      	b.n	800389e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800389a:	60bb      	str	r3, [r7, #8]
      break;
 800389c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800389e:	68bb      	ldr	r3, [r7, #8]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038aa:	bf00      	nop
 80038ac:	40023800 	.word	0x40023800
 80038b0:	00f42400 	.word	0x00f42400
 80038b4:	007a1200 	.word	0x007a1200

080038b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038bc:	4b03      	ldr	r3, [pc, #12]	; (80038cc <HAL_RCC_GetHCLKFreq+0x14>)
 80038be:	681b      	ldr	r3, [r3, #0]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000000 	.word	0x20000000

080038d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038d4:	f7ff fff0 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 80038d8:	4602      	mov	r2, r0
 80038da:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	0a9b      	lsrs	r3, r3, #10
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	4903      	ldr	r1, [pc, #12]	; (80038f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038e6:	5ccb      	ldrb	r3, [r1, r3]
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40023800 	.word	0x40023800
 80038f4:	08003ed0 	.word	0x08003ed0

080038f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038fc:	f7ff ffdc 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	0b5b      	lsrs	r3, r3, #13
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	4903      	ldr	r1, [pc, #12]	; (800391c <HAL_RCC_GetPCLK2Freq+0x24>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	08003ed0 	.word	0x08003ed0

08003920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e03f      	b.n	80039b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fd feac 	bl	80016a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2224      	movs	r2, #36	; 0x24
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f829 	bl	80039bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c0:	b09f      	sub	sp, #124	; 0x7c
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d2:	68d9      	ldr	r1, [r3, #12]
 80039d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	ea40 0301 	orr.w	r3, r0, r1
 80039dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80039f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a00:	f021 010c 	bic.w	r1, r1, #12
 8003a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1a:	6999      	ldr	r1, [r3, #24]
 8003a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	ea40 0301 	orr.w	r3, r0, r1
 8003a24:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	4bc5      	ldr	r3, [pc, #788]	; (8003d40 <UART_SetConfig+0x384>)
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d004      	beq.n	8003a3a <UART_SetConfig+0x7e>
 8003a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4bc3      	ldr	r3, [pc, #780]	; (8003d44 <UART_SetConfig+0x388>)
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d103      	bne.n	8003a42 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a3a:	f7ff ff5d 	bl	80038f8 <HAL_RCC_GetPCLK2Freq>
 8003a3e:	6778      	str	r0, [r7, #116]	; 0x74
 8003a40:	e002      	b.n	8003a48 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a42:	f7ff ff45 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 8003a46:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a50:	f040 80b6 	bne.w	8003bc0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a56:	461c      	mov	r4, r3
 8003a58:	f04f 0500 	mov.w	r5, #0
 8003a5c:	4622      	mov	r2, r4
 8003a5e:	462b      	mov	r3, r5
 8003a60:	1891      	adds	r1, r2, r2
 8003a62:	6439      	str	r1, [r7, #64]	; 0x40
 8003a64:	415b      	adcs	r3, r3
 8003a66:	647b      	str	r3, [r7, #68]	; 0x44
 8003a68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a6c:	1912      	adds	r2, r2, r4
 8003a6e:	eb45 0303 	adc.w	r3, r5, r3
 8003a72:	f04f 0000 	mov.w	r0, #0
 8003a76:	f04f 0100 	mov.w	r1, #0
 8003a7a:	00d9      	lsls	r1, r3, #3
 8003a7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a80:	00d0      	lsls	r0, r2, #3
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	1911      	adds	r1, r2, r4
 8003a88:	6639      	str	r1, [r7, #96]	; 0x60
 8003a8a:	416b      	adcs	r3, r5
 8003a8c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	461a      	mov	r2, r3
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	1891      	adds	r1, r2, r2
 8003a9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a9c:	415b      	adcs	r3, r3
 8003a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003aa4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003aa8:	f7fd f854 	bl	8000b54 <__aeabi_uldivmod>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4ba5      	ldr	r3, [pc, #660]	; (8003d48 <UART_SetConfig+0x38c>)
 8003ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	011e      	lsls	r6, r3, #4
 8003aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003abc:	461c      	mov	r4, r3
 8003abe:	f04f 0500 	mov.w	r5, #0
 8003ac2:	4622      	mov	r2, r4
 8003ac4:	462b      	mov	r3, r5
 8003ac6:	1891      	adds	r1, r2, r2
 8003ac8:	6339      	str	r1, [r7, #48]	; 0x30
 8003aca:	415b      	adcs	r3, r3
 8003acc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ace:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ad2:	1912      	adds	r2, r2, r4
 8003ad4:	eb45 0303 	adc.w	r3, r5, r3
 8003ad8:	f04f 0000 	mov.w	r0, #0
 8003adc:	f04f 0100 	mov.w	r1, #0
 8003ae0:	00d9      	lsls	r1, r3, #3
 8003ae2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ae6:	00d0      	lsls	r0, r2, #3
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	1911      	adds	r1, r2, r4
 8003aee:	65b9      	str	r1, [r7, #88]	; 0x58
 8003af0:	416b      	adcs	r3, r5
 8003af2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	461a      	mov	r2, r3
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	1891      	adds	r1, r2, r2
 8003b00:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b02:	415b      	adcs	r3, r3
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b0a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b0e:	f7fd f821 	bl	8000b54 <__aeabi_uldivmod>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4b8c      	ldr	r3, [pc, #560]	; (8003d48 <UART_SetConfig+0x38c>)
 8003b18:	fba3 1302 	umull	r1, r3, r3, r2
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	2164      	movs	r1, #100	; 0x64
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	3332      	adds	r3, #50	; 0x32
 8003b2a:	4a87      	ldr	r2, [pc, #540]	; (8003d48 <UART_SetConfig+0x38c>)
 8003b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b38:	441e      	add	r6, r3
 8003b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f04f 0100 	mov.w	r1, #0
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	1894      	adds	r4, r2, r2
 8003b48:	623c      	str	r4, [r7, #32]
 8003b4a:	415b      	adcs	r3, r3
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b52:	1812      	adds	r2, r2, r0
 8003b54:	eb41 0303 	adc.w	r3, r1, r3
 8003b58:	f04f 0400 	mov.w	r4, #0
 8003b5c:	f04f 0500 	mov.w	r5, #0
 8003b60:	00dd      	lsls	r5, r3, #3
 8003b62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b66:	00d4      	lsls	r4, r2, #3
 8003b68:	4622      	mov	r2, r4
 8003b6a:	462b      	mov	r3, r5
 8003b6c:	1814      	adds	r4, r2, r0
 8003b6e:	653c      	str	r4, [r7, #80]	; 0x50
 8003b70:	414b      	adcs	r3, r1
 8003b72:	657b      	str	r3, [r7, #84]	; 0x54
 8003b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	1891      	adds	r1, r2, r2
 8003b80:	61b9      	str	r1, [r7, #24]
 8003b82:	415b      	adcs	r3, r3
 8003b84:	61fb      	str	r3, [r7, #28]
 8003b86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b8a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b8e:	f7fc ffe1 	bl	8000b54 <__aeabi_uldivmod>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4b6c      	ldr	r3, [pc, #432]	; (8003d48 <UART_SetConfig+0x38c>)
 8003b98:	fba3 1302 	umull	r1, r3, r3, r2
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	2164      	movs	r1, #100	; 0x64
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	3332      	adds	r3, #50	; 0x32
 8003baa:	4a67      	ldr	r2, [pc, #412]	; (8003d48 <UART_SetConfig+0x38c>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	f003 0207 	and.w	r2, r3, #7
 8003bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4432      	add	r2, r6
 8003bbc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bbe:	e0b9      	b.n	8003d34 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bc2:	461c      	mov	r4, r3
 8003bc4:	f04f 0500 	mov.w	r5, #0
 8003bc8:	4622      	mov	r2, r4
 8003bca:	462b      	mov	r3, r5
 8003bcc:	1891      	adds	r1, r2, r2
 8003bce:	6139      	str	r1, [r7, #16]
 8003bd0:	415b      	adcs	r3, r3
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003bd8:	1912      	adds	r2, r2, r4
 8003bda:	eb45 0303 	adc.w	r3, r5, r3
 8003bde:	f04f 0000 	mov.w	r0, #0
 8003be2:	f04f 0100 	mov.w	r1, #0
 8003be6:	00d9      	lsls	r1, r3, #3
 8003be8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bec:	00d0      	lsls	r0, r2, #3
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	eb12 0804 	adds.w	r8, r2, r4
 8003bf6:	eb43 0905 	adc.w	r9, r3, r5
 8003bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f04f 0100 	mov.w	r1, #0
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	008b      	lsls	r3, r1, #2
 8003c0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c12:	0082      	lsls	r2, r0, #2
 8003c14:	4640      	mov	r0, r8
 8003c16:	4649      	mov	r1, r9
 8003c18:	f7fc ff9c 	bl	8000b54 <__aeabi_uldivmod>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4b49      	ldr	r3, [pc, #292]	; (8003d48 <UART_SetConfig+0x38c>)
 8003c22:	fba3 2302 	umull	r2, r3, r3, r2
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	011e      	lsls	r6, r3, #4
 8003c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f04f 0100 	mov.w	r1, #0
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	1894      	adds	r4, r2, r2
 8003c38:	60bc      	str	r4, [r7, #8]
 8003c3a:	415b      	adcs	r3, r3
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c42:	1812      	adds	r2, r2, r0
 8003c44:	eb41 0303 	adc.w	r3, r1, r3
 8003c48:	f04f 0400 	mov.w	r4, #0
 8003c4c:	f04f 0500 	mov.w	r5, #0
 8003c50:	00dd      	lsls	r5, r3, #3
 8003c52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c56:	00d4      	lsls	r4, r2, #3
 8003c58:	4622      	mov	r2, r4
 8003c5a:	462b      	mov	r3, r5
 8003c5c:	1814      	adds	r4, r2, r0
 8003c5e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003c60:	414b      	adcs	r3, r1
 8003c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f04f 0100 	mov.w	r1, #0
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	008b      	lsls	r3, r1, #2
 8003c78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c7c:	0082      	lsls	r2, r0, #2
 8003c7e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c82:	f7fc ff67 	bl	8000b54 <__aeabi_uldivmod>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4b2f      	ldr	r3, [pc, #188]	; (8003d48 <UART_SetConfig+0x38c>)
 8003c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c90:	095b      	lsrs	r3, r3, #5
 8003c92:	2164      	movs	r1, #100	; 0x64
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	3332      	adds	r3, #50	; 0x32
 8003c9e:	4a2a      	ldr	r2, [pc, #168]	; (8003d48 <UART_SetConfig+0x38c>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003caa:	441e      	add	r6, r3
 8003cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f04f 0100 	mov.w	r1, #0
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	1894      	adds	r4, r2, r2
 8003cba:	603c      	str	r4, [r7, #0]
 8003cbc:	415b      	adcs	r3, r3
 8003cbe:	607b      	str	r3, [r7, #4]
 8003cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cc4:	1812      	adds	r2, r2, r0
 8003cc6:	eb41 0303 	adc.w	r3, r1, r3
 8003cca:	f04f 0400 	mov.w	r4, #0
 8003cce:	f04f 0500 	mov.w	r5, #0
 8003cd2:	00dd      	lsls	r5, r3, #3
 8003cd4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cd8:	00d4      	lsls	r4, r2, #3
 8003cda:	4622      	mov	r2, r4
 8003cdc:	462b      	mov	r3, r5
 8003cde:	eb12 0a00 	adds.w	sl, r2, r0
 8003ce2:	eb43 0b01 	adc.w	fp, r3, r1
 8003ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f04f 0100 	mov.w	r1, #0
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	008b      	lsls	r3, r1, #2
 8003cfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cfe:	0082      	lsls	r2, r0, #2
 8003d00:	4650      	mov	r0, sl
 8003d02:	4659      	mov	r1, fp
 8003d04:	f7fc ff26 	bl	8000b54 <__aeabi_uldivmod>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <UART_SetConfig+0x38c>)
 8003d0e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	2164      	movs	r1, #100	; 0x64
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	3332      	adds	r3, #50	; 0x32
 8003d20:	4a09      	ldr	r2, [pc, #36]	; (8003d48 <UART_SetConfig+0x38c>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	f003 020f 	and.w	r2, r3, #15
 8003d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4432      	add	r2, r6
 8003d32:	609a      	str	r2, [r3, #8]
}
 8003d34:	bf00      	nop
 8003d36:	377c      	adds	r7, #124	; 0x7c
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d3e:	bf00      	nop
 8003d40:	40011000 	.word	0x40011000
 8003d44:	40011400 	.word	0x40011400
 8003d48:	51eb851f 	.word	0x51eb851f

08003d4c <__libc_init_array>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	4d0d      	ldr	r5, [pc, #52]	; (8003d84 <__libc_init_array+0x38>)
 8003d50:	4c0d      	ldr	r4, [pc, #52]	; (8003d88 <__libc_init_array+0x3c>)
 8003d52:	1b64      	subs	r4, r4, r5
 8003d54:	10a4      	asrs	r4, r4, #2
 8003d56:	2600      	movs	r6, #0
 8003d58:	42a6      	cmp	r6, r4
 8003d5a:	d109      	bne.n	8003d70 <__libc_init_array+0x24>
 8003d5c:	4d0b      	ldr	r5, [pc, #44]	; (8003d8c <__libc_init_array+0x40>)
 8003d5e:	4c0c      	ldr	r4, [pc, #48]	; (8003d90 <__libc_init_array+0x44>)
 8003d60:	f000 f8a2 	bl	8003ea8 <_init>
 8003d64:	1b64      	subs	r4, r4, r5
 8003d66:	10a4      	asrs	r4, r4, #2
 8003d68:	2600      	movs	r6, #0
 8003d6a:	42a6      	cmp	r6, r4
 8003d6c:	d105      	bne.n	8003d7a <__libc_init_array+0x2e>
 8003d6e:	bd70      	pop	{r4, r5, r6, pc}
 8003d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d74:	4798      	blx	r3
 8003d76:	3601      	adds	r6, #1
 8003d78:	e7ee      	b.n	8003d58 <__libc_init_array+0xc>
 8003d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d7e:	4798      	blx	r3
 8003d80:	3601      	adds	r6, #1
 8003d82:	e7f2      	b.n	8003d6a <__libc_init_array+0x1e>
 8003d84:	08003ee0 	.word	0x08003ee0
 8003d88:	08003ee0 	.word	0x08003ee0
 8003d8c:	08003ee0 	.word	0x08003ee0
 8003d90:	08003ee4 	.word	0x08003ee4

08003d94 <memset>:
 8003d94:	4402      	add	r2, r0
 8003d96:	4603      	mov	r3, r0
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d100      	bne.n	8003d9e <memset+0xa>
 8003d9c:	4770      	bx	lr
 8003d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003da2:	e7f9      	b.n	8003d98 <memset+0x4>
 8003da4:	0000      	movs	r0, r0
	...

08003da8 <floor>:
 8003da8:	ec51 0b10 	vmov	r0, r1, d0
 8003dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003db0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003db4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8003db8:	2e13      	cmp	r6, #19
 8003dba:	ee10 5a10 	vmov	r5, s0
 8003dbe:	ee10 8a10 	vmov	r8, s0
 8003dc2:	460c      	mov	r4, r1
 8003dc4:	dc32      	bgt.n	8003e2c <floor+0x84>
 8003dc6:	2e00      	cmp	r6, #0
 8003dc8:	da14      	bge.n	8003df4 <floor+0x4c>
 8003dca:	a333      	add	r3, pc, #204	; (adr r3, 8003e98 <floor+0xf0>)
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	f7fc fa00 	bl	80001d4 <__adddf3>
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f7fc fe42 	bl	8000a60 <__aeabi_dcmpgt>
 8003ddc:	b138      	cbz	r0, 8003dee <floor+0x46>
 8003dde:	2c00      	cmp	r4, #0
 8003de0:	da57      	bge.n	8003e92 <floor+0xea>
 8003de2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003de6:	431d      	orrs	r5, r3
 8003de8:	d001      	beq.n	8003dee <floor+0x46>
 8003dea:	4c2d      	ldr	r4, [pc, #180]	; (8003ea0 <floor+0xf8>)
 8003dec:	2500      	movs	r5, #0
 8003dee:	4621      	mov	r1, r4
 8003df0:	4628      	mov	r0, r5
 8003df2:	e025      	b.n	8003e40 <floor+0x98>
 8003df4:	4f2b      	ldr	r7, [pc, #172]	; (8003ea4 <floor+0xfc>)
 8003df6:	4137      	asrs	r7, r6
 8003df8:	ea01 0307 	and.w	r3, r1, r7
 8003dfc:	4303      	orrs	r3, r0
 8003dfe:	d01f      	beq.n	8003e40 <floor+0x98>
 8003e00:	a325      	add	r3, pc, #148	; (adr r3, 8003e98 <floor+0xf0>)
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	f7fc f9e5 	bl	80001d4 <__adddf3>
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f7fc fe27 	bl	8000a60 <__aeabi_dcmpgt>
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d0eb      	beq.n	8003dee <floor+0x46>
 8003e16:	2c00      	cmp	r4, #0
 8003e18:	bfbe      	ittt	lt
 8003e1a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003e1e:	fa43 f606 	asrlt.w	r6, r3, r6
 8003e22:	19a4      	addlt	r4, r4, r6
 8003e24:	ea24 0407 	bic.w	r4, r4, r7
 8003e28:	2500      	movs	r5, #0
 8003e2a:	e7e0      	b.n	8003dee <floor+0x46>
 8003e2c:	2e33      	cmp	r6, #51	; 0x33
 8003e2e:	dd0b      	ble.n	8003e48 <floor+0xa0>
 8003e30:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003e34:	d104      	bne.n	8003e40 <floor+0x98>
 8003e36:	ee10 2a10 	vmov	r2, s0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	f7fc f9ca 	bl	80001d4 <__adddf3>
 8003e40:	ec41 0b10 	vmov	d0, r0, r1
 8003e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e48:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8003e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e50:	fa23 f707 	lsr.w	r7, r3, r7
 8003e54:	4207      	tst	r7, r0
 8003e56:	d0f3      	beq.n	8003e40 <floor+0x98>
 8003e58:	a30f      	add	r3, pc, #60	; (adr r3, 8003e98 <floor+0xf0>)
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	f7fc f9b9 	bl	80001d4 <__adddf3>
 8003e62:	2200      	movs	r2, #0
 8003e64:	2300      	movs	r3, #0
 8003e66:	f7fc fdfb 	bl	8000a60 <__aeabi_dcmpgt>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d0bf      	beq.n	8003dee <floor+0x46>
 8003e6e:	2c00      	cmp	r4, #0
 8003e70:	da02      	bge.n	8003e78 <floor+0xd0>
 8003e72:	2e14      	cmp	r6, #20
 8003e74:	d103      	bne.n	8003e7e <floor+0xd6>
 8003e76:	3401      	adds	r4, #1
 8003e78:	ea25 0507 	bic.w	r5, r5, r7
 8003e7c:	e7b7      	b.n	8003dee <floor+0x46>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003e84:	fa03 f606 	lsl.w	r6, r3, r6
 8003e88:	4435      	add	r5, r6
 8003e8a:	4545      	cmp	r5, r8
 8003e8c:	bf38      	it	cc
 8003e8e:	18e4      	addcc	r4, r4, r3
 8003e90:	e7f2      	b.n	8003e78 <floor+0xd0>
 8003e92:	2500      	movs	r5, #0
 8003e94:	462c      	mov	r4, r5
 8003e96:	e7aa      	b.n	8003dee <floor+0x46>
 8003e98:	8800759c 	.word	0x8800759c
 8003e9c:	7e37e43c 	.word	0x7e37e43c
 8003ea0:	bff00000 	.word	0xbff00000
 8003ea4:	000fffff 	.word	0x000fffff

08003ea8 <_init>:
 8003ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eaa:	bf00      	nop
 8003eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eae:	bc08      	pop	{r3}
 8003eb0:	469e      	mov	lr, r3
 8003eb2:	4770      	bx	lr

08003eb4 <_fini>:
 8003eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb6:	bf00      	nop
 8003eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eba:	bc08      	pop	{r3}
 8003ebc:	469e      	mov	lr, r3
 8003ebe:	4770      	bx	lr
