
F407_VL53L0X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b710  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  0800b8a0  0800b8a0  0001b8a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c14c  0800c14c  0002049c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c14c  0800c14c  0001c14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c154  0800c154  0002049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c154  0800c154  0001c154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c158  0800c158  0001c158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000049c  20000000  0800c15c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  2000049c  0800c5f8  0002049c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000814  0800c5f8  00020814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b10e  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fbc  00000000  00000000  0003b5da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0003e598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  0003f588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024112  00000000  00000000  00040468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139e5  00000000  00000000  0006457a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd001  00000000  00000000  00077f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00144f60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052a0  00000000  00000000  00144fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000049c 	.word	0x2000049c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b888 	.word	0x0800b888

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004a0 	.word	0x200004a0
 80001cc:	0800b888 	.word	0x0800b888

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <VL53L0X_GetDeviceInfo>:

    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev, VL53L0X_DeviceInfo_t* pVL53L0X_DeviceInfo) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	73fb      	strb	r3, [r7, #15]
    LOG_FUNCTION_START("");

    Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8000eee:	6839      	ldr	r1, [r7, #0]
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f004 fed3 	bl	8005c9c <VL53L0X_get_device_info>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	73fb      	strb	r3, [r7, #15]

    LOG_FUNCTION_END(Status);
    return Status;
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
                                                         int32_t*    pOffsetCalibrationDataMicroMeter) {
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b084      	sub	sp, #16
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
    LOG_FUNCTION_START("");

    Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8000f14:	6839      	ldr	r1, [r7, #0]
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f001 fcf2 	bl	8002900 <VL53L0X_get_offset_calibration_data_micro_meter>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	73fb      	strb	r3, [r7, #15]
                                                             pOffsetCalibrationDataMicroMeter);

    LOG_FUNCTION_END(Status);
    return Status;
 8000f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <VL53L0X_SetDeviceAddress>:
}

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	70fb      	strb	r3, [r7, #3]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73fb      	strb	r3, [r7, #15]
    LOG_FUNCTION_START("");

    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	085b      	lsrs	r3, r3, #1
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	461a      	mov	r2, r3
 8000f44:	218a      	movs	r1, #138	; 0x8a
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f004 ff93 	bl	8005e72 <VL53L0X_WrByte>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73fb      	strb	r3, [r7, #15]
                            DeviceAddress / 2);

    LOG_FUNCTION_END(Status);
    return Status;
 8000f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev) {
 8000f5c:	b5b0      	push	{r4, r5, r7, lr}
 8000f5e:	b096      	sub	sp, #88	; 0x58
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    LOG_FUNCTION_START("");

    /* by default the I2C is running at 1V8 if you want to change it you
     * need to include this define at compilation level. */
#ifdef USE_I2C_2V8
    Status = VL53L0X_UpdateByte(Dev,
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	22fe      	movs	r2, #254	; 0xfe
 8000f6e:	2189      	movs	r1, #137	; 0x89
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f004 ffd5 	bl	8005f20 <VL53L0X_UpdateByte>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                0xFE,
                                0x01);
#endif

    /* Set I2C standard mode */
    if (Status == VL53L0X_ERROR_NONE) {
 8000f7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d107      	bne.n	8000f94 <VL53L0X_DataInit+0x38>
        Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2188      	movs	r1, #136	; 0x88
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f004 ff72 	bl	8005e72 <VL53L0X_WrByte>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    }

#endif

    /* Default value is 1000 for Linearity Corrective Gain */
    PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fa2:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

    /* Dmax default Parameter */
    PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000fac:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
    PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a9e      	ldr	r2, [pc, #632]	; (800122c <VL53L0X_DataInit+0x2d0>)
 8000fb4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
                  (FixPoint1616_t) ((0x00016B85))); /* 1.42 No Cover Glass*/

    /* Set Default static parameters
     * set first temporary values 9.44MHz * 65536 = 618660 */
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a9d      	ldr	r2, [pc, #628]	; (8001230 <VL53L0X_DataInit+0x2d4>)
 8000fbc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

    /* Set Default XTalkCompensationRateMegaCps to 0  */
    VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	621a      	str	r2, [r3, #32]

    /* Get default parameters */
    Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4619      	mov	r1, r3
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fab3 	bl	8001538 <VL53L0X_GetDeviceParameters>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    if (Status == VL53L0X_ERROR_NONE) {
 8000fd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d112      	bne.n	8001006 <VL53L0X_DataInit+0xaa>
        /* initialize PAL values */
        CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	743b      	strb	r3, [r7, #16]
        CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	747b      	strb	r3, [r7, #17]
        PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f103 0410 	add.w	r4, r3, #16
 8000fee:	f107 0510 	add.w	r5, r7, #16
 8000ff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001002:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    /* Sigma estimator variable */
    PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2264      	movs	r2, #100	; 0x64
 800100a:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
    PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001014:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
    PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800101e:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
    PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001028:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

    /* Use internal default settings */
    PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

    Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001034:	2201      	movs	r2, #1
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f004 ff1a 	bl	8005e72 <VL53L0X_WrByte>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001046:	4313      	orrs	r3, r2
 8001048:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800104c:	2201      	movs	r2, #1
 800104e:	21ff      	movs	r1, #255	; 0xff
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f004 ff0e 	bl	8005e72 <VL53L0X_WrByte>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800105e:	4313      	orrs	r3, r2
 8001060:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f004 ff02 	bl	8005e72 <VL53L0X_WrByte>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001076:	4313      	orrs	r3, r2
 8001078:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800107c:	f107 030f 	add.w	r3, r7, #15
 8001080:	461a      	mov	r2, r3
 8001082:	2191      	movs	r1, #145	; 0x91
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f004 ff7d 	bl	8005f84 <VL53L0X_RdByte>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001092:	4313      	orrs	r3, r2
 8001094:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    PALDevDataSet(Dev, StopVariable, StopVariable);
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
    Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2100      	movs	r1, #0
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f004 fee4 	bl	8005e72 <VL53L0X_WrByte>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80010b2:	4313      	orrs	r3, r2
 80010b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80010b8:	2200      	movs	r2, #0
 80010ba:	21ff      	movs	r1, #255	; 0xff
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f004 fed8 	bl	8005e72 <VL53L0X_WrByte>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80010ca:	4313      	orrs	r3, r2
 80010cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f004 fecc 	bl	8005e72 <VL53L0X_WrByte>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80010e2:	4313      	orrs	r3, r2
 80010e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    /* Enable all check */
    for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80010e8:	2300      	movs	r3, #0
 80010ea:	653b      	str	r3, [r7, #80]	; 0x50
 80010ec:	e014      	b.n	8001118 <VL53L0X_DataInit+0x1bc>
        if (Status == VL53L0X_ERROR_NONE) {
 80010ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d114      	bne.n	8001120 <VL53L0X_DataInit+0x1c4>
            Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80010f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	2201      	movs	r2, #1
 80010fc:	4619      	mov	r1, r3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 fd3e 	bl	8001b80 <VL53L0X_SetLimitCheckEnable>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800110c:	4313      	orrs	r3, r2
 800110e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001114:	3301      	adds	r3, #1
 8001116:	653b      	str	r3, [r7, #80]	; 0x50
 8001118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800111a:	2b05      	cmp	r3, #5
 800111c:	dde7      	ble.n	80010ee <VL53L0X_DataInit+0x192>
 800111e:	e000      	b.n	8001122 <VL53L0X_DataInit+0x1c6>
        } else {
            break;
 8001120:	bf00      	nop
        }
    }

    /* Disable the following checks */
    if (Status == VL53L0X_ERROR_NONE) {
 8001122:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001126:	2b00      	cmp	r3, #0
 8001128:	d107      	bne.n	800113a <VL53L0X_DataInit+0x1de>
        Status = VL53L0X_SetLimitCheckEnable(Dev,
 800112a:	2200      	movs	r2, #0
 800112c:	2102      	movs	r1, #2
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 fd26 	bl	8001b80 <VL53L0X_SetLimitCheckEnable>
 8001134:	4603      	mov	r3, r0
 8001136:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                             VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800113a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800113e:	2b00      	cmp	r3, #0
 8001140:	d107      	bne.n	8001152 <VL53L0X_DataInit+0x1f6>
        Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001142:	2200      	movs	r2, #0
 8001144:	2103      	movs	r1, #3
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 fd1a 	bl	8001b80 <VL53L0X_SetLimitCheckEnable>
 800114c:	4603      	mov	r3, r0
 800114e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                             VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8001152:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001156:	2b00      	cmp	r3, #0
 8001158:	d107      	bne.n	800116a <VL53L0X_DataInit+0x20e>
        Status = VL53L0X_SetLimitCheckEnable(Dev,
 800115a:	2200      	movs	r2, #0
 800115c:	2104      	movs	r1, #4
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 fd0e 	bl	8001b80 <VL53L0X_SetLimitCheckEnable>
 8001164:	4603      	mov	r3, r0
 8001166:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                             VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800116a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800116e:	2b00      	cmp	r3, #0
 8001170:	d107      	bne.n	8001182 <VL53L0X_DataInit+0x226>
        Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001172:	2200      	movs	r2, #0
 8001174:	2105      	movs	r1, #5
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 fd02 	bl	8001b80 <VL53L0X_SetLimitCheckEnable>
 800117c:	4603      	mov	r3, r0
 800117e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                             VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);
    }

    /* Limit default values */
    if (Status == VL53L0X_ERROR_NONE) {
 8001182:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001186:	2b00      	cmp	r3, #0
 8001188:	d108      	bne.n	800119c <VL53L0X_DataInit+0x240>
        Status = VL53L0X_SetLimitCheckValue(Dev,
 800118a:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800118e:	2100      	movs	r1, #0
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 fda5 	bl	8001ce0 <VL53L0X_SetLimitCheckValue>
 8001196:	4603      	mov	r3, r0
 8001198:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                            VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
                                            (FixPoint1616_t) (18 * 65536));
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800119c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d108      	bne.n	80011b6 <VL53L0X_DataInit+0x25a>
        Status = VL53L0X_SetLimitCheckValue(Dev,
 80011a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011a8:	2101      	movs	r1, #1
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 fd98 	bl	8001ce0 <VL53L0X_SetLimitCheckValue>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                            (FixPoint1616_t) (25 * 65536 / 100));

        /* 0.25 * 65536 */
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80011b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d108      	bne.n	80011d0 <VL53L0X_DataInit+0x274>
        Status = VL53L0X_SetLimitCheckValue(Dev,
 80011be:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80011c2:	2102      	movs	r1, #2
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 fd8b 	bl	8001ce0 <VL53L0X_SetLimitCheckValue>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                            VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
                                            (FixPoint1616_t) (35 * 65536));
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80011d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d107      	bne.n	80011e8 <VL53L0X_DataInit+0x28c>
        Status = VL53L0X_SetLimitCheckValue(Dev,
 80011d8:	2200      	movs	r2, #0
 80011da:	2103      	movs	r1, #3
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 fd7f 	bl	8001ce0 <VL53L0X_SetLimitCheckValue>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                            VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                            (FixPoint1616_t) (0 * 65536));
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80011e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10f      	bne.n	8001210 <VL53L0X_DataInit+0x2b4>
        PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	22ff      	movs	r2, #255	; 0xff
 80011f4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
        Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80011f8:	22ff      	movs	r2, #255	; 0xff
 80011fa:	2101      	movs	r1, #1
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f004 fe38 	bl	8005e72 <VL53L0X_WrByte>
 8001202:	4603      	mov	r3, r0
 8001204:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                0xFF);

        /* Set PAL state to tell that we are waiting for call to
         * VL53L0X_StaticInit */
        PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8001210:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001214:	2b00      	cmp	r3, #0
 8001216:	d103      	bne.n	8001220 <VL53L0X_DataInit+0x2c4>
        VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8001220:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001224:	4618      	mov	r0, r3
 8001226:	3758      	adds	r7, #88	; 0x58
 8001228:	46bd      	mov	sp, r7
 800122a:	bdb0      	pop	{r4, r5, r7, pc}
 800122c:	00016b85 	.word	0x00016b85
 8001230:	000970a4 	.word	0x000970a4

08001234 <VL53L0X_StaticInit>:

    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev) {
 8001234:	b5b0      	push	{r4, r5, r7, lr}
 8001236:	b09e      	sub	sp, #120	; 0x78
 8001238:	af02      	add	r7, sp, #8
 800123a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800123c:	2300      	movs	r3, #0
 800123e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	2240      	movs	r2, #64	; 0x40
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f007 fe32 	bl	8008eb4 <memset>
    uint8_t* pTuningSettingBuffer;
    uint16_t tempword = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	837b      	strh	r3, [r7, #26]
    uint8_t tempbyte = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	767b      	strb	r3, [r7, #25]
    uint8_t UseInternalTuningSettings = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uint32_t count = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	663b      	str	r3, [r7, #96]	; 0x60
    uint8_t isApertureSpads = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	763b      	strb	r3, [r7, #24]
    uint32_t refSpadCount = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
    uint8_t ApertureSpads = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint8_t vcselPulsePeriodPCLK;
    uint32_t seqTimeoutMicroSecs;

    LOG_FUNCTION_START("");

    Status = VL53L0X_get_info_from_device(Dev, 1);
 8001270:	2101      	movs	r1, #1
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f002 fabe 	bl	80037f4 <VL53L0X_get_info_from_device>
 8001278:	4603      	mov	r3, r0
 800127a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    /* set the ref spad from NVM */
    count = (uint32_t) VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8001284:	663b      	str	r3, [r7, #96]	; 0x60
                                                          ReferenceSpadCount);
    ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800128c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                                       ReferenceSpadType);

    /* NVM value invalid */
    if ((ApertureSpads > 1) ||
 8001290:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001294:	2b01      	cmp	r3, #1
 8001296:	d80d      	bhi.n	80012b4 <VL53L0X_StaticInit+0x80>
 8001298:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800129c:	2b01      	cmp	r3, #1
 800129e:	d102      	bne.n	80012a6 <VL53L0X_StaticInit+0x72>
        ((ApertureSpads == 1) && (count > 32)) ||
 80012a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012a2:	2b20      	cmp	r3, #32
 80012a4:	d806      	bhi.n	80012b4 <VL53L0X_StaticInit+0x80>
 80012a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10e      	bne.n	80012cc <VL53L0X_StaticInit+0x98>
        ((ApertureSpads == 0) && (count > 12))) {
 80012ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012b0:	2b0c      	cmp	r3, #12
 80012b2:	d90b      	bls.n	80012cc <VL53L0X_StaticInit+0x98>
        Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80012b4:	f107 0218 	add.w	r2, r7, #24
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f001 fd1a 	bl	8002cf8 <VL53L0X_perform_ref_spad_management>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80012ca:	e009      	b.n	80012e0 <VL53L0X_StaticInit+0xac>
                                                     &isApertureSpads);
    } else {
        Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80012cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80012d0:	461a      	mov	r2, r3
 80012d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f001 ff1b 	bl	8003110 <VL53L0X_set_reference_spads>
 80012da:	4603      	mov	r3, r0
 80012dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    /* Initialize tuning settings buffer to prevent compiler warning. */
    pTuningSettingBuffer = DefaultTuningSettings;
 80012e0:	4b94      	ldr	r3, [pc, #592]	; (8001534 <VL53L0X_StaticInit+0x300>)
 80012e2:	66bb      	str	r3, [r7, #104]	; 0x68

    if (Status == VL53L0X_ERROR_NONE) {
 80012e4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10f      	bne.n	800130c <VL53L0X_StaticInit+0xd8>
        UseInternalTuningSettings = PALDevDataGet(Dev,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80012f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                                                  UseInternalTuningSettings);

        if (UseInternalTuningSettings == 0) {
 80012f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d104      	bne.n	8001308 <VL53L0X_StaticInit+0xd4>
            pTuningSettingBuffer = PALDevDataGet(Dev,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001304:	66bb      	str	r3, [r7, #104]	; 0x68
 8001306:	e001      	b.n	800130c <VL53L0X_StaticInit+0xd8>
                                                 pTuningSettingsPointer);
        } else {
            pTuningSettingBuffer = DefaultTuningSettings;
 8001308:	4b8a      	ldr	r3, [pc, #552]	; (8001534 <VL53L0X_StaticInit+0x300>)
 800130a:	66bb      	str	r3, [r7, #104]	; 0x68
        }
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800130c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001310:	2b00      	cmp	r3, #0
 8001312:	d106      	bne.n	8001322 <VL53L0X_StaticInit+0xee>
        Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8001314:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f003 fe12 	bl	8004f40 <VL53L0X_load_tuning_settings>
 800131c:	4603      	mov	r3, r0
 800131e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    /* Set interrupt config to new sample ready */
    if (Status == VL53L0X_ERROR_NONE) {
 8001322:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10a      	bne.n	8001340 <VL53L0X_StaticInit+0x10c>
        Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800132a:	2300      	movs	r3, #0
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2304      	movs	r3, #4
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f001 f8fb 	bl	8002530 <VL53L0X_SetGpioConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                       VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
                                       VL53L0X_INTERRUPTPOLARITY_LOW);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8001340:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001344:	2b00      	cmp	r3, #0
 8001346:	d121      	bne.n	800138c <VL53L0X_StaticInit+0x158>
        Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001348:	2201      	movs	r2, #1
 800134a:	21ff      	movs	r1, #255	; 0xff
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f004 fd90 	bl	8005e72 <VL53L0X_WrByte>
 8001352:	4603      	mov	r3, r0
 8001354:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8001358:	f107 031a 	add.w	r3, r7, #26
 800135c:	461a      	mov	r2, r3
 800135e:	2184      	movs	r1, #132	; 0x84
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f004 fe28 	bl	8005fb6 <VL53L0X_RdWord>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800136e:	4313      	orrs	r3, r2
 8001370:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001374:	2200      	movs	r2, #0
 8001376:	21ff      	movs	r1, #255	; 0xff
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f004 fd7a 	bl	8005e72 <VL53L0X_WrByte>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001386:	4313      	orrs	r3, r2
 8001388:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800138c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001390:	2b00      	cmp	r3, #0
 8001392:	d105      	bne.n	80013a0 <VL53L0X_StaticInit+0x16c>
        VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8001394:	8b7b      	ldrh	r3, [r7, #26]
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	461a      	mov	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                                           VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
    }

    /* After static init, some device parameters may be changed,
     * so update them */
    if (Status == VL53L0X_ERROR_NONE) {
 80013a0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d108      	bne.n	80013ba <VL53L0X_StaticInit+0x186>
        Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f8c2 	bl	8001538 <VL53L0X_GetDeviceParameters>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80013ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d110      	bne.n	80013e4 <VL53L0X_StaticInit+0x1b0>
        Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80013c2:	f107 0319 	add.w	r3, r7, #25
 80013c6:	4619      	mov	r1, r3
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f984 	bl	80016d6 <VL53L0X_GetFractionEnable>
 80013ce:	4603      	mov	r3, r0
 80013d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

        if (Status == VL53L0X_ERROR_NONE) {
 80013d4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d103      	bne.n	80013e4 <VL53L0X_StaticInit+0x1b0>
            PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80013dc:	7e7a      	ldrb	r2, [r7, #25]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
        }
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80013e4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10e      	bne.n	800140a <VL53L0X_StaticInit+0x1d6>
        PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f103 0410 	add.w	r4, r3, #16
 80013f2:	f107 051c 	add.w	r5, r7, #28
 80013f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001402:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001406:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    /* read the sequence config and save it */
    if (Status == VL53L0X_ERROR_NONE) {
 800140a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800140e:	2b00      	cmp	r3, #0
 8001410:	d111      	bne.n	8001436 <VL53L0X_StaticInit+0x202>
        Status = VL53L0X_RdByte(Dev,
 8001412:	f107 0319 	add.w	r3, r7, #25
 8001416:	461a      	mov	r2, r3
 8001418:	2101      	movs	r1, #1
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f004 fdb2 	bl	8005f84 <VL53L0X_RdByte>
 8001420:	4603      	mov	r3, r0
 8001422:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);

        if (Status == VL53L0X_ERROR_NONE) {
 8001426:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800142a:	2b00      	cmp	r3, #0
 800142c:	d103      	bne.n	8001436 <VL53L0X_StaticInit+0x202>
            PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800142e:	7e7a      	ldrb	r2, [r7, #25]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
        }
    }

    /* Disable MSRC and TCC by default */
    if (Status == VL53L0X_ERROR_NONE) {
 8001436:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800143a:	2b00      	cmp	r3, #0
 800143c:	d107      	bne.n	800144e <VL53L0X_StaticInit+0x21a>
        Status = VL53L0X_SetSequenceStepEnable(Dev,
 800143e:	2200      	movs	r2, #0
 8001440:	2100      	movs	r1, #0
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f9bc 	bl	80017c0 <VL53L0X_SetSequenceStepEnable>
 8001448:	4603      	mov	r3, r0
 800144a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                               VL53L0X_SEQUENCESTEP_TCC, 0);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800144e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001452:	2b00      	cmp	r3, #0
 8001454:	d107      	bne.n	8001466 <VL53L0X_StaticInit+0x232>
        Status = VL53L0X_SetSequenceStepEnable(Dev,
 8001456:	2200      	movs	r2, #0
 8001458:	2102      	movs	r1, #2
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 f9b0 	bl	80017c0 <VL53L0X_SetSequenceStepEnable>
 8001460:	4603      	mov	r3, r0
 8001462:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                               VL53L0X_SEQUENCESTEP_MSRC, 0);
    }

    /* Set PAL State to standby */
    if (Status == VL53L0X_ERROR_NONE) {
 8001466:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800146a:	2b00      	cmp	r3, #0
 800146c:	d103      	bne.n	8001476 <VL53L0X_StaticInit+0x242>
        PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2203      	movs	r2, #3
 8001472:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    }

    /* Store pre-range vcsel period */
    if (Status == VL53L0X_ERROR_NONE) {
 8001476:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800147a:	2b00      	cmp	r3, #0
 800147c:	d109      	bne.n	8001492 <VL53L0X_StaticInit+0x25e>
        Status = VL53L0X_GetVcselPulsePeriod(
 800147e:	f107 0313 	add.w	r3, r7, #19
 8001482:	461a      	mov	r2, r3
 8001484:	2100      	movs	r1, #0
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f982 	bl	8001790 <VL53L0X_GetVcselPulsePeriod>
 800148c:	4603      	mov	r3, r0
 800148e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            Dev,
            VL53L0X_VCSEL_PERIOD_PRE_RANGE,
            &vcselPulsePeriodPCLK);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8001492:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001496:	2b00      	cmp	r3, #0
 8001498:	d103      	bne.n	80014a2 <VL53L0X_StaticInit+0x26e>
        VL53L0X_SETDEVICESPECIFICPARAMETER(
 800149a:	7cfa      	ldrb	r2, [r7, #19]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
            PreRangeVcselPulsePeriod,
            vcselPulsePeriodPCLK);
    }

    /* Store final-range vcsel period */
    if (Status == VL53L0X_ERROR_NONE) {
 80014a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d109      	bne.n	80014be <VL53L0X_StaticInit+0x28a>
        Status = VL53L0X_GetVcselPulsePeriod(
 80014aa:	f107 0313 	add.w	r3, r7, #19
 80014ae:	461a      	mov	r2, r3
 80014b0:	2101      	movs	r1, #1
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f96c 	bl	8001790 <VL53L0X_GetVcselPulsePeriod>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            Dev,
            VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
            &vcselPulsePeriodPCLK);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80014be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d103      	bne.n	80014ce <VL53L0X_StaticInit+0x29a>
        VL53L0X_SETDEVICESPECIFICPARAMETER(
 80014c6:	7cfa      	ldrb	r2, [r7, #19]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
            FinalRangeVcselPulsePeriod,
            vcselPulsePeriodPCLK);
    }

    /* Store pre-range timeout */
    if (Status == VL53L0X_ERROR_NONE) {
 80014ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d109      	bne.n	80014ea <VL53L0X_StaticInit+0x2b6>
        Status = get_sequence_step_timeout(
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	461a      	mov	r2, r3
 80014dc:	2103      	movs	r1, #3
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f002 ff0a 	bl	80042f8 <get_sequence_step_timeout>
 80014e4:	4603      	mov	r3, r0
 80014e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            Dev,
            VL53L0X_SEQUENCESTEP_PRE_RANGE,
            &seqTimeoutMicroSecs);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80014ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d103      	bne.n	80014fa <VL53L0X_StaticInit+0x2c6>
        VL53L0X_SETDEVICESPECIFICPARAMETER(
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
            PreRangeTimeoutMicroSecs,
            seqTimeoutMicroSecs);
    }

    /* Store final-range timeout */
    if (Status == VL53L0X_ERROR_NONE) {
 80014fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d109      	bne.n	8001516 <VL53L0X_StaticInit+0x2e2>
        Status = get_sequence_step_timeout(
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	461a      	mov	r2, r3
 8001508:	2104      	movs	r1, #4
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f002 fef4 	bl	80042f8 <get_sequence_step_timeout>
 8001510:	4603      	mov	r3, r0
 8001512:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            Dev,
            VL53L0X_SEQUENCESTEP_FINAL_RANGE,
            &seqTimeoutMicroSecs);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8001516:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800151a:	2b00      	cmp	r3, #0
 800151c:	d103      	bne.n	8001526 <VL53L0X_StaticInit+0x2f2>
        VL53L0X_SETDEVICESPECIFICPARAMETER(
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
            FinalRangeTimeoutMicroSecs,
            seqTimeoutMicroSecs);
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8001526:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800152a:	4618      	mov	r0, r3
 800152c:	3770      	adds	r7, #112	; 0x70
 800152e:	46bd      	mov	sp, r7
 8001530:	bdb0      	pop	{r4, r5, r7, pc}
 8001532:	bf00      	nop
 8001534:	20000000 	.word	0x20000000

08001538 <VL53L0X_GetDeviceParameters>:

    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev, VL53L0X_DeviceParameters_t* pDeviceParameters) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]
    int i;

    LOG_FUNCTION_START("");

    Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f8b0 	bl	80016b0 <VL53L0X_GetDeviceMode>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]

    if (Status == VL53L0X_ERROR_NONE) {
 8001554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d107      	bne.n	800156c <VL53L0X_GetDeviceParameters+0x34>
        Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	3308      	adds	r3, #8
 8001560:	4619      	mov	r1, r3
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 fa78 	bl	8001a58 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8001568:	4603      	mov	r3, r0
 800156a:	73fb      	strb	r3, [r7, #15]
                                                               &(pDeviceParameters->InterMeasurementPeriodMilliSeconds));
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800156c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <VL53L0X_GetDeviceParameters+0x42>
        pDeviceParameters->XTalkCompensationEnable = 0;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	731a      	strb	r2, [r3, #12]
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800157a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d107      	bne.n	8001592 <VL53L0X_GetDeviceParameters+0x5a>
        Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	3310      	adds	r3, #16
 8001586:	4619      	mov	r1, r3
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 faae 	bl	8001aea <VL53L0X_GetXTalkCompensationRateMegaCps>
 800158e:	4603      	mov	r3, r0
 8001590:	73fb      	strb	r3, [r7, #15]
                                                         &(pDeviceParameters->XTalkCompensationRateMegaCps));
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d107      	bne.n	80015aa <VL53L0X_GetDeviceParameters+0x72>
        Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	3314      	adds	r3, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff fcb0 	bl	8000f06 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80015a6:	4603      	mov	r3, r0
 80015a8:	73fb      	strb	r3, [r7, #15]
                                                            &(pDeviceParameters->RangeOffsetMicroMeters));
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80015aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d134      	bne.n	800161c <VL53L0X_GetDeviceParameters+0xe4>
        for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	e02a      	b.n	800160e <VL53L0X_GetDeviceParameters+0xd6>
            /* get first the values, then the enables.
             * VL53L0X_GetLimitCheckValue will modify the enable
             * flags
             */
            if (Status == VL53L0X_ERROR_NONE) {
 80015b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d12a      	bne.n	8001616 <VL53L0X_GetDeviceParameters+0xde>
                Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	b299      	uxth	r1, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	3308      	adds	r3, #8
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	3304      	adds	r3, #4
 80015d0:	461a      	mov	r2, r3
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fbe6 	bl	8001da4 <VL53L0X_GetLimitCheckValue>
 80015d8:	4603      	mov	r3, r0
 80015da:	461a      	mov	r2, r3
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	4313      	orrs	r3, r2
 80015e0:	73fb      	strb	r3, [r7, #15]
                                                     &(pDeviceParameters->LimitChecksValue[i]));
            } else {
                break;
            }

            if (Status == VL53L0X_ERROR_NONE) {
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d117      	bne.n	800161a <VL53L0X_GetDeviceParameters+0xe2>
                Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	b299      	uxth	r1, r3
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	3318      	adds	r3, #24
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	4413      	add	r3, r2
 80015f6:	461a      	mov	r2, r3
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 fb4d 	bl	8001c98 <VL53L0X_GetLimitCheckEnable>
 80015fe:	4603      	mov	r3, r0
 8001600:	461a      	mov	r2, r3
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	4313      	orrs	r3, r2
 8001606:	73fb      	strb	r3, [r7, #15]
        for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	3301      	adds	r3, #1
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2b05      	cmp	r3, #5
 8001612:	ddd1      	ble.n	80015b8 <VL53L0X_GetDeviceParameters+0x80>
 8001614:	e002      	b.n	800161c <VL53L0X_GetDeviceParameters+0xe4>
                break;
 8001616:	bf00      	nop
 8001618:	e000      	b.n	800161c <VL53L0X_GetDeviceParameters+0xe4>
                                                      &(pDeviceParameters->LimitChecksEnable[i]));
            } else {
                break;
 800161a:	bf00      	nop
            }
        }
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800161c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d107      	bne.n	8001634 <VL53L0X_GetDeviceParameters+0xfc>
        Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	333c      	adds	r3, #60	; 0x3c
 8001628:	4619      	mov	r1, r3
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 fc48 	bl	8001ec0 <VL53L0X_GetWrapAroundCheckEnable>
 8001630:	4603      	mov	r3, r0
 8001632:	73fb      	strb	r3, [r7, #15]
                                                  &(pDeviceParameters->WrapAroundCheckEnable));
    }

    /* Need to be done at the end as it uses VCSELPulsePeriod */
    if (Status == VL53L0X_ERROR_NONE) {
 8001634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d107      	bne.n	800164c <VL53L0X_GetDeviceParameters+0x114>
        Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	3304      	adds	r3, #4
 8001640:	4619      	mov	r1, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f879 	bl	800173a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8001648:	4603      	mov	r3, r0
 800164a:	73fb      	strb	r3, [r7, #15]
                                                                &(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
    }

    LOG_FUNCTION_END(Status);
    return Status;
 800164c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode) {
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	70fb      	strb	r3, [r7, #3]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]

    LOG_FUNCTION_START("%d", (int) DeviceMode);

    switch (DeviceMode) {
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	2b15      	cmp	r3, #21
 800166c:	bf8c      	ite	hi
 800166e:	2201      	movhi	r2, #1
 8001670:	2200      	movls	r2, #0
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	2a00      	cmp	r2, #0
 8001676:	d10e      	bne.n	8001696 <VL53L0X_SetDeviceMode+0x3e>
 8001678:	2201      	movs	r2, #1
 800167a:	409a      	lsls	r2, r3
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <VL53L0X_SetDeviceMode+0x54>)
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf14      	ite	ne
 8001684:	2301      	movne	r3, #1
 8001686:	2300      	moveq	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <VL53L0X_SetDeviceMode+0x3e>
        case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
        case VL53L0X_DEVICEMODE_GPIO_DRIVE:
        case VL53L0X_DEVICEMODE_GPIO_OSC:

            /* Supported modes */
            VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	78fa      	ldrb	r2, [r7, #3]
 8001692:	741a      	strb	r2, [r3, #16]
            break;
 8001694:	e001      	b.n	800169a <VL53L0X_SetDeviceMode+0x42>

        default:

            /* Unsupported mode */
            Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8001696:	23f8      	movs	r3, #248	; 0xf8
 8001698:	73fb      	strb	r3, [r7, #15]
    }

    LOG_FUNCTION_END(Status);
    return Status;
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	0030000b 	.word	0x0030000b

080016b0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes* pDeviceMode) {
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
    LOG_FUNCTION_START("");

    VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	7c1a      	ldrb	r2, [r3, #16]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	701a      	strb	r2, [r3, #0]

    LOG_FUNCTION_END(Status);
    return Status;
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <VL53L0X_GetFractionEnable>:

    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t*    pEnabled) {
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]
    LOG_FUNCTION_START("");

    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	2109      	movs	r1, #9
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f004 fc4b 	bl	8005f84 <VL53L0X_RdByte>
 80016ee:	4603      	mov	r3, r0
 80016f0:	73fb      	strb	r3, [r7, #15]

    if (Status == VL53L0X_ERROR_NONE) {
 80016f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d106      	bne.n	8001708 <VL53L0X_GetFractionEnable+0x32>
        *pEnabled = (*pEnabled & 1);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	b2da      	uxtb	r2, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	701a      	strb	r2, [r3, #0]
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8001708:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
                                                             uint32_t    MeasurementTimingBudgetMicroSeconds) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]
    LOG_FUNCTION_START("");

    Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8001722:	6839      	ldr	r1, [r7, #0]
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f003 fa7a 	bl	8004c1e <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800172a:	4603      	mov	r3, r0
 800172c:	73fb      	strb	r3, [r7, #15]
                                                                 MeasurementTimingBudgetMicroSeconds);

    LOG_FUNCTION_END(Status);

    return Status;
 800172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
                                                             uint32_t*   pMeasurementTimingBudgetMicroSeconds) {
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]
    LOG_FUNCTION_START("");

    Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8001748:	6839      	ldr	r1, [r7, #0]
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f003 fb47 	bl	8004dde <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8001750:	4603      	mov	r3, r0
 8001752:	73fb      	strb	r3, [r7, #15]
                                                                 pMeasurementTimingBudgetMicroSeconds);

    LOG_FUNCTION_END(Status);
    return Status;
 8001754:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev, VL53L0X_VcselPeriod VcselPeriodType,
                                          uint8_t VCSELPulsePeriodPCLK) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	70fb      	strb	r3, [r7, #3]
 800176c:	4613      	mov	r3, r2
 800176e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]
    LOG_FUNCTION_START("");

    Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8001774:	78ba      	ldrb	r2, [r7, #2]
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	4619      	mov	r1, r3
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f002 ff8f 	bl	800469e <VL53L0X_set_vcsel_pulse_period>
 8001780:	4603      	mov	r3, r0
 8001782:	73fb      	strb	r3, [r7, #15]
                                            VCSELPulsePeriodPCLK);

    LOG_FUNCTION_END(Status);
    return Status;
 8001784:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev, VL53L0X_VcselPeriod VcselPeriodType,
                                          uint8_t*            pVCSELPulsePeriodPCLK) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	460b      	mov	r3, r1
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800179e:	2300      	movs	r3, #0
 80017a0:	75fb      	strb	r3, [r7, #23]
    LOG_FUNCTION_START("");

    Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80017a2:	7afb      	ldrb	r3, [r7, #11]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	4619      	mov	r1, r3
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f003 fa01 	bl	8004bb0 <VL53L0X_get_vcsel_pulse_period>
 80017ae:	4603      	mov	r3, r0
 80017b0:	75fb      	strb	r3, [r7, #23]
                                            pVCSELPulsePeriodPCLK);

    LOG_FUNCTION_END(Status);
    return Status;
 80017b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev, VL53L0X_SequenceStepId SequenceStepId,
                                            uint8_t SequenceStepEnabled) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	70fb      	strb	r3, [r7, #3]
 80017cc:	4613      	mov	r3, r2
 80017ce:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	75fb      	strb	r3, [r7, #23]
    uint8_t SequenceConfig = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	73fb      	strb	r3, [r7, #15]
    uint8_t SequenceConfigNew = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	75bb      	strb	r3, [r7, #22]
    uint32_t MeasurementTimingBudgetMicroSeconds;
    LOG_FUNCTION_START("");

    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80017dc:	f107 030f 	add.w	r3, r7, #15
 80017e0:	461a      	mov	r2, r3
 80017e2:	2101      	movs	r1, #1
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f004 fbcd 	bl	8005f84 <VL53L0X_RdByte>
 80017ea:	4603      	mov	r3, r0
 80017ec:	75fb      	strb	r3, [r7, #23]
                            &SequenceConfig);

    SequenceConfigNew = SequenceConfig;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	75bb      	strb	r3, [r7, #22]

    if (Status == VL53L0X_ERROR_NONE) {
 80017f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d15a      	bne.n	80018b0 <VL53L0X_SetSequenceStepEnable+0xf0>
        if (SequenceStepEnabled == 1) {
 80017fa:	78bb      	ldrb	r3, [r7, #2]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d12b      	bne.n	8001858 <VL53L0X_SetSequenceStepEnable+0x98>
            /* Enable requested sequence step
             */
            switch (SequenceStepId) {
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	2b04      	cmp	r3, #4
 8001804:	d825      	bhi.n	8001852 <VL53L0X_SetSequenceStepEnable+0x92>
 8001806:	a201      	add	r2, pc, #4	; (adr r2, 800180c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8001808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180c:	08001821 	.word	0x08001821
 8001810:	0800182b 	.word	0x0800182b
 8001814:	08001835 	.word	0x08001835
 8001818:	0800183f 	.word	0x0800183f
 800181c:	08001849 	.word	0x08001849
                case VL53L0X_SEQUENCESTEP_TCC:
                    SequenceConfigNew |= 0x10;
 8001820:	7dbb      	ldrb	r3, [r7, #22]
 8001822:	f043 0310 	orr.w	r3, r3, #16
 8001826:	75bb      	strb	r3, [r7, #22]
                    break;
 8001828:	e043      	b.n	80018b2 <VL53L0X_SetSequenceStepEnable+0xf2>

                case VL53L0X_SEQUENCESTEP_DSS:
                    SequenceConfigNew |= 0x28;
 800182a:	7dbb      	ldrb	r3, [r7, #22]
 800182c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001830:	75bb      	strb	r3, [r7, #22]
                    break;
 8001832:	e03e      	b.n	80018b2 <VL53L0X_SetSequenceStepEnable+0xf2>

                case VL53L0X_SEQUENCESTEP_MSRC:
                    SequenceConfigNew |= 0x04;
 8001834:	7dbb      	ldrb	r3, [r7, #22]
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	75bb      	strb	r3, [r7, #22]
                    break;
 800183c:	e039      	b.n	80018b2 <VL53L0X_SetSequenceStepEnable+0xf2>

                case VL53L0X_SEQUENCESTEP_PRE_RANGE:
                    SequenceConfigNew |= 0x40;
 800183e:	7dbb      	ldrb	r3, [r7, #22]
 8001840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001844:	75bb      	strb	r3, [r7, #22]
                    break;
 8001846:	e034      	b.n	80018b2 <VL53L0X_SetSequenceStepEnable+0xf2>

                case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
                    SequenceConfigNew |= 0x80;
 8001848:	7dbb      	ldrb	r3, [r7, #22]
 800184a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800184e:	75bb      	strb	r3, [r7, #22]
                    break;
 8001850:	e02f      	b.n	80018b2 <VL53L0X_SetSequenceStepEnable+0xf2>

                default:
                    Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001852:	23fc      	movs	r3, #252	; 0xfc
 8001854:	75fb      	strb	r3, [r7, #23]
 8001856:	e02c      	b.n	80018b2 <VL53L0X_SetSequenceStepEnable+0xf2>
            }
        } else {
            /* Disable requested sequence step
             */
            switch (SequenceStepId) {
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	2b04      	cmp	r3, #4
 800185c:	d825      	bhi.n	80018aa <VL53L0X_SetSequenceStepEnable+0xea>
 800185e:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8001860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001864:	08001879 	.word	0x08001879
 8001868:	08001883 	.word	0x08001883
 800186c:	0800188d 	.word	0x0800188d
 8001870:	08001897 	.word	0x08001897
 8001874:	080018a1 	.word	0x080018a1
                case VL53L0X_SEQUENCESTEP_TCC:
                    SequenceConfigNew &= 0xef;
 8001878:	7dbb      	ldrb	r3, [r7, #22]
 800187a:	f023 0310 	bic.w	r3, r3, #16
 800187e:	75bb      	strb	r3, [r7, #22]
                    break;
 8001880:	e017      	b.n	80018b2 <VL53L0X_SetSequenceStepEnable+0xf2>

                case VL53L0X_SEQUENCESTEP_DSS:
                    SequenceConfigNew &= 0xd7;
 8001882:	7dbb      	ldrb	r3, [r7, #22]
 8001884:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001888:	75bb      	strb	r3, [r7, #22]
                    break;
 800188a:	e012      	b.n	80018b2 <VL53L0X_SetSequenceStepEnable+0xf2>

                case VL53L0X_SEQUENCESTEP_MSRC:
                    SequenceConfigNew &= 0xfb;
 800188c:	7dbb      	ldrb	r3, [r7, #22]
 800188e:	f023 0304 	bic.w	r3, r3, #4
 8001892:	75bb      	strb	r3, [r7, #22]
                    break;
 8001894:	e00d      	b.n	80018b2 <VL53L0X_SetSequenceStepEnable+0xf2>

                case VL53L0X_SEQUENCESTEP_PRE_RANGE:
                    SequenceConfigNew &= 0xbf;
 8001896:	7dbb      	ldrb	r3, [r7, #22]
 8001898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800189c:	75bb      	strb	r3, [r7, #22]
                    break;
 800189e:	e008      	b.n	80018b2 <VL53L0X_SetSequenceStepEnable+0xf2>

                case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
                    SequenceConfigNew &= 0x7f;
 80018a0:	7dbb      	ldrb	r3, [r7, #22]
 80018a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018a6:	75bb      	strb	r3, [r7, #22]
                    break;
 80018a8:	e003      	b.n	80018b2 <VL53L0X_SetSequenceStepEnable+0xf2>

                default:
                    Status = VL53L0X_ERROR_INVALID_PARAMS;
 80018aa:	23fc      	movs	r3, #252	; 0xfc
 80018ac:	75fb      	strb	r3, [r7, #23]
 80018ae:	e000      	b.n	80018b2 <VL53L0X_SetSequenceStepEnable+0xf2>
            }
        }
 80018b0:	bf00      	nop
    }

    if (SequenceConfigNew != SequenceConfig) {
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	7dba      	ldrb	r2, [r7, #22]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d01e      	beq.n	80018f8 <VL53L0X_SetSequenceStepEnable+0x138>
        /* Apply New Setting */
        if (Status == VL53L0X_ERROR_NONE) {
 80018ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d107      	bne.n	80018d2 <VL53L0X_SetSequenceStepEnable+0x112>
            Status = VL53L0X_WrByte(Dev,
 80018c2:	7dbb      	ldrb	r3, [r7, #22]
 80018c4:	461a      	mov	r2, r3
 80018c6:	2101      	movs	r1, #1
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f004 fad2 	bl	8005e72 <VL53L0X_WrByte>
 80018ce:	4603      	mov	r3, r0
 80018d0:	75fb      	strb	r3, [r7, #23]
                                    VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
        }

        if (Status == VL53L0X_ERROR_NONE) {
 80018d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d103      	bne.n	80018e2 <VL53L0X_SetSequenceStepEnable+0x122>
            PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7dba      	ldrb	r2, [r7, #22]
 80018de:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
        }

        /* Recalculate timing budget */
        if (Status == VL53L0X_ERROR_NONE) {
 80018e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d106      	bne.n	80018f8 <VL53L0X_SetSequenceStepEnable+0x138>
            VL53L0X_GETPARAMETERFIELD(Dev,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	613b      	str	r3, [r7, #16]
                                      MeasurementTimingBudgetMicroSeconds,
                                      MeasurementTimingBudgetMicroSeconds);

            VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80018f0:	6939      	ldr	r1, [r7, #16]
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ff0e 	bl	8001714 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
        }
    }

    LOG_FUNCTION_END(Status);

    return Status;
 80018f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev, VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
                                    uint8_t*               pSequenceStepEnabled) {
 8001904:	b480      	push	{r7}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	460b      	mov	r3, r1
 8001910:	72fb      	strb	r3, [r7, #11]
 8001912:	4613      	mov	r3, r2
 8001914:	72bb      	strb	r3, [r7, #10]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001916:	2300      	movs	r3, #0
 8001918:	75fb      	strb	r3, [r7, #23]
    *pSequenceStepEnabled = 0;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
    LOG_FUNCTION_START("");

    switch (SequenceStepId) {
 8001920:	7afb      	ldrb	r3, [r7, #11]
 8001922:	2b04      	cmp	r3, #4
 8001924:	d836      	bhi.n	8001994 <sequence_step_enabled+0x90>
 8001926:	a201      	add	r2, pc, #4	; (adr r2, 800192c <sequence_step_enabled+0x28>)
 8001928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192c:	08001941 	.word	0x08001941
 8001930:	08001953 	.word	0x08001953
 8001934:	08001965 	.word	0x08001965
 8001938:	08001977 	.word	0x08001977
 800193c:	08001989 	.word	0x08001989
        case VL53L0X_SEQUENCESTEP_TCC:
            *pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8001940:	7abb      	ldrb	r3, [r7, #10]
 8001942:	111b      	asrs	r3, r3, #4
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	b2da      	uxtb	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	701a      	strb	r2, [r3, #0]
            break;
 8001950:	e022      	b.n	8001998 <sequence_step_enabled+0x94>

        case VL53L0X_SEQUENCESTEP_DSS:
            *pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8001952:	7abb      	ldrb	r3, [r7, #10]
 8001954:	10db      	asrs	r3, r3, #3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	b2da      	uxtb	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	701a      	strb	r2, [r3, #0]
            break;
 8001962:	e019      	b.n	8001998 <sequence_step_enabled+0x94>

        case VL53L0X_SEQUENCESTEP_MSRC:
            *pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8001964:	7abb      	ldrb	r3, [r7, #10]
 8001966:	109b      	asrs	r3, r3, #2
 8001968:	b2db      	uxtb	r3, r3
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	b2da      	uxtb	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	701a      	strb	r2, [r3, #0]
            break;
 8001974:	e010      	b.n	8001998 <sequence_step_enabled+0x94>

        case VL53L0X_SEQUENCESTEP_PRE_RANGE:
            *pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8001976:	7abb      	ldrb	r3, [r7, #10]
 8001978:	119b      	asrs	r3, r3, #6
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	b2da      	uxtb	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	701a      	strb	r2, [r3, #0]
            break;
 8001986:	e007      	b.n	8001998 <sequence_step_enabled+0x94>

        case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
            *pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8001988:	7abb      	ldrb	r3, [r7, #10]
 800198a:	09db      	lsrs	r3, r3, #7
 800198c:	b2da      	uxtb	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	701a      	strb	r2, [r3, #0]
            break;
 8001992:	e001      	b.n	8001998 <sequence_step_enabled+0x94>

        default:
            Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001994:	23fc      	movs	r3, #252	; 0xfc
 8001996:	75fb      	strb	r3, [r7, #23]
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8001998:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800199c:	4618      	mov	r0, r3
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <VL53L0X_GetSequenceStepEnables>:
    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV                       Dev,
                                             VL53L0X_SchedulerSequenceSteps_t* pSchedulerSequenceSteps) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	73fb      	strb	r3, [r7, #15]
    uint8_t SequenceConfig = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	73bb      	strb	r3, [r7, #14]
    LOG_FUNCTION_START("");

    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80019ba:	f107 030e 	add.w	r3, r7, #14
 80019be:	461a      	mov	r2, r3
 80019c0:	2101      	movs	r1, #1
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f004 fade 	bl	8005f84 <VL53L0X_RdByte>
 80019c8:	4603      	mov	r3, r0
 80019ca:	73fb      	strb	r3, [r7, #15]
                            &SequenceConfig);

    if (Status == VL53L0X_ERROR_NONE) {
 80019cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d107      	bne.n	80019e4 <VL53L0X_GetSequenceStepEnables+0x3c>
        Status = sequence_step_enabled(Dev,
 80019d4:	7bba      	ldrb	r2, [r7, #14]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2100      	movs	r1, #0
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ff92 	bl	8001904 <sequence_step_enabled>
 80019e0:	4603      	mov	r3, r0
 80019e2:	73fb      	strb	r3, [r7, #15]
                                       VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
                                       &pSchedulerSequenceSteps->TccOn);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80019e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d108      	bne.n	80019fe <VL53L0X_GetSequenceStepEnables+0x56>
        Status = sequence_step_enabled(Dev,
 80019ec:	7bba      	ldrb	r2, [r7, #14]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	3302      	adds	r3, #2
 80019f2:	2101      	movs	r1, #1
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff85 	bl	8001904 <sequence_step_enabled>
 80019fa:	4603      	mov	r3, r0
 80019fc:	73fb      	strb	r3, [r7, #15]
                                       VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
                                       &pSchedulerSequenceSteps->DssOn);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d108      	bne.n	8001a18 <VL53L0X_GetSequenceStepEnables+0x70>
        Status = sequence_step_enabled(Dev,
 8001a06:	7bba      	ldrb	r2, [r7, #14]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ff78 	bl	8001904 <sequence_step_enabled>
 8001a14:	4603      	mov	r3, r0
 8001a16:	73fb      	strb	r3, [r7, #15]
                                       VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
                                       &pSchedulerSequenceSteps->MsrcOn);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8001a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d108      	bne.n	8001a32 <VL53L0X_GetSequenceStepEnables+0x8a>
        Status = sequence_step_enabled(Dev,
 8001a20:	7bba      	ldrb	r2, [r7, #14]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	3303      	adds	r3, #3
 8001a26:	2103      	movs	r1, #3
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff6b 	bl	8001904 <sequence_step_enabled>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	73fb      	strb	r3, [r7, #15]
                                       VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
                                       &pSchedulerSequenceSteps->PreRangeOn);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8001a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d108      	bne.n	8001a4c <VL53L0X_GetSequenceStepEnables+0xa4>
        Status = sequence_step_enabled(Dev,
 8001a3a:	7bba      	ldrb	r2, [r7, #14]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	2104      	movs	r1, #4
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ff5e 	bl	8001904 <sequence_step_enabled>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
                                       VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
                                       &pSchedulerSequenceSteps->FinalRangeOn);
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8001a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
                                                            uint32_t*   pInterMeasurementPeriodMilliSeconds) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
    uint16_t osc_calibrate_val;
    uint32_t IMPeriodMilliSeconds;

    LOG_FUNCTION_START("");

    Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	21f8      	movs	r1, #248	; 0xf8
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f004 faa1 	bl	8005fb6 <VL53L0X_RdWord>
 8001a74:	4603      	mov	r3, r0
 8001a76:	73fb      	strb	r3, [r7, #15]
                            &osc_calibrate_val);

    if (Status == VL53L0X_ERROR_NONE) {
 8001a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d108      	bne.n	8001a92 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
        Status = VL53L0X_RdDWord(Dev,
 8001a80:	f107 0308 	add.w	r3, r7, #8
 8001a84:	461a      	mov	r2, r3
 8001a86:	2104      	movs	r1, #4
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f004 fab6 	bl	8005ffa <VL53L0X_RdDWord>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	73fb      	strb	r3, [r7, #15]
                                 VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
                                 &IMPeriodMilliSeconds);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10c      	bne.n	8001ab4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
        if (osc_calibrate_val != 0) {
 8001a9a:	89bb      	ldrh	r3, [r7, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
            *pInterMeasurementPeriodMilliSeconds =
                IMPeriodMilliSeconds / osc_calibrate_val;
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	89ba      	ldrh	r2, [r7, #12]
 8001aa4:	fbb3 f2f2 	udiv	r2, r3, r2
            *pInterMeasurementPeriodMilliSeconds =
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	601a      	str	r2, [r3, #0]
        }

        VL53L0X_SETPARAMETERFIELD(Dev,
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]
                                  InterMeasurementPeriodMilliSeconds,
                                  *pInterMeasurementPeriodMilliSeconds);
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8001ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <VL53L0X_GetXTalkCompensationEnable>:

    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev, uint8_t*    pXTalkCompensationEnable) {
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	73fb      	strb	r3, [r7, #15]
    uint8_t Temp8;
    LOG_FUNCTION_START("");

    VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7f1b      	ldrb	r3, [r3, #28]
 8001ad2:	73bb      	strb	r3, [r7, #14]
    *pXTalkCompensationEnable = Temp8;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	7bba      	ldrb	r2, [r7, #14]
 8001ad8:	701a      	strb	r2, [r3, #0]

    LOG_FUNCTION_END(Status);
    return Status;
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <VL53L0X_GetXTalkCompensationRateMegaCps>:

    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev, FixPoint1616_t* pXTalkCompensationRateMegaCps) {
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	75fb      	strb	r3, [r7, #23]
    uint16_t Value;
    FixPoint1616_t TempFix1616;

    LOG_FUNCTION_START("");

    Status = VL53L0X_RdWord(Dev,
 8001af8:	f107 030e 	add.w	r3, r7, #14
 8001afc:	461a      	mov	r2, r3
 8001afe:	2120      	movs	r1, #32
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f004 fa58 	bl	8005fb6 <VL53L0X_RdWord>
 8001b06:	4603      	mov	r3, r0
 8001b08:	75fb      	strb	r3, [r7, #23]
                            VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t*) &Value);

    if (Status == VL53L0X_ERROR_NONE) {
 8001b0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d118      	bne.n	8001b44 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
        if (Value == 0) {
 8001b12:	89fb      	ldrh	r3, [r7, #14]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d109      	bne.n	8001b2c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
            /* the Xtalk is disabled return value from memory */
            VL53L0X_GETPARAMETERFIELD(Dev,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	613b      	str	r3, [r7, #16]
                                      XTalkCompensationRateMegaCps, TempFix1616);
            *pXTalkCompensationRateMegaCps = TempFix1616;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	601a      	str	r2, [r3, #0]
            VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	771a      	strb	r2, [r3, #28]
 8001b2a:	e00b      	b.n	8001b44 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
                                      0);
        } else {
            TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8001b2c:	89fb      	ldrh	r3, [r7, #14]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	613b      	str	r3, [r7, #16]
            *pXTalkCompensationRateMegaCps = TempFix1616;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	601a      	str	r2, [r3, #0]
            VL53L0X_SETPARAMETERFIELD(Dev,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	621a      	str	r2, [r3, #32]
                                      XTalkCompensationRateMegaCps, TempFix1616);
            VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	771a      	strb	r2, [r3, #28]
                                      1);
        }
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8001b44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <VL53L0X_SetRefCalibration>:

VL53L0X_Error VL53L0X_SetRefCalibration(VL53L0X_DEV Dev, uint8_t VhvSettings, uint8_t PhaseCal) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	73fb      	strb	r3, [r7, #15]
    LOG_FUNCTION_START("");

    Status = VL53L0X_set_ref_calibration(Dev, VhvSettings, PhaseCal);
 8001b64:	78ba      	ldrb	r2, [r7, #2]
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f001 fd52 	bl	8003614 <VL53L0X_set_ref_calibration>
 8001b70:	4603      	mov	r3, r0
 8001b72:	73fb      	strb	r3, [r7, #15]

    LOG_FUNCTION_END(Status);
    return Status;
 8001b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <VL53L0X_SetLimitCheckEnable>:

    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId, uint8_t LimitCheckEnable) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	807b      	strh	r3, [r7, #2]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	75fb      	strb	r3, [r7, #23]
    FixPoint1616_t TempFix1616 = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
    uint8_t LimitCheckEnableInt = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	73fb      	strb	r3, [r7, #15]
    uint8_t LimitCheckDisable = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	73bb      	strb	r3, [r7, #14]
    uint8_t Temp8;

    LOG_FUNCTION_START("");

    if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d902      	bls.n	8001bac <VL53L0X_SetLimitCheckEnable+0x2c>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001ba6:	23fc      	movs	r3, #252	; 0xfc
 8001ba8:	75fb      	strb	r3, [r7, #23]
 8001baa:	e05b      	b.n	8001c64 <VL53L0X_SetLimitCheckEnable+0xe4>
    } else {
        if (LimitCheckEnable == 0) {
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <VL53L0X_SetLimitCheckEnable+0x40>
            TempFix1616 = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
            LimitCheckEnableInt = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]
            LimitCheckDisable = 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	73bb      	strb	r3, [r7, #14]
 8001bbe:	e00a      	b.n	8001bd6 <VL53L0X_SetLimitCheckEnable+0x56>
        } else {
            VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001bc0:	887b      	ldrh	r3, [r7, #2]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	330c      	adds	r3, #12
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	613b      	str	r3, [r7, #16]
                                           LimitCheckId, TempFix1616);
            LimitCheckDisable = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73bb      	strb	r3, [r7, #14]

            /* this to be sure to have either 0 or 1 */
            LimitCheckEnableInt = 1;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	73fb      	strb	r3, [r7, #15]
        }

        switch (LimitCheckId) {
 8001bd6:	887b      	ldrh	r3, [r7, #2]
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	d841      	bhi.n	8001c60 <VL53L0X_SetLimitCheckEnable+0xe0>
 8001bdc:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <VL53L0X_SetLimitCheckEnable+0x64>)
 8001bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be2:	bf00      	nop
 8001be4:	08001bfd 	.word	0x08001bfd
 8001be8:	08001c07 	.word	0x08001c07
 8001bec:	08001c1d 	.word	0x08001c1d
 8001bf0:	08001c27 	.word	0x08001c27
 8001bf4:	08001c31 	.word	0x08001c31
 8001bf8:	08001c49 	.word	0x08001c49
            case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:

                /* internal computation: */
                VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                               VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
                                               LimitCheckEnableInt);

                break;
 8001c04:	e02e      	b.n	8001c64 <VL53L0X_SetLimitCheckEnable+0xe4>

            case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

                Status = VL53L0X_WrWord(Dev,
                                        VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
                                        VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	0a5b      	lsrs	r3, r3, #9
                Status = VL53L0X_WrWord(Dev,
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2144      	movs	r1, #68	; 0x44
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f004 f948 	bl	8005ea6 <VL53L0X_WrWord>
 8001c16:	4603      	mov	r3, r0
 8001c18:	75fb      	strb	r3, [r7, #23]

                break;
 8001c1a:	e023      	b.n	8001c64 <VL53L0X_SetLimitCheckEnable+0xe4>

            case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

                /* internal computation: */
                VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                                               VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
                                               LimitCheckEnableInt);

                break;
 8001c24:	e01e      	b.n	8001c64 <VL53L0X_SetLimitCheckEnable+0xe4>

            case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

                /* internal computation: */
                VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                               VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                               LimitCheckEnableInt);

                break;
 8001c2e:	e019      	b.n	8001c64 <VL53L0X_SetLimitCheckEnable+0xe4>

            case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

                Temp8 = (uint8_t) (LimitCheckDisable << 1);
 8001c30:	7bbb      	ldrb	r3, [r7, #14]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	737b      	strb	r3, [r7, #13]
                Status = VL53L0X_UpdateByte(Dev,
 8001c36:	7b7b      	ldrb	r3, [r7, #13]
 8001c38:	22fe      	movs	r2, #254	; 0xfe
 8001c3a:	2160      	movs	r1, #96	; 0x60
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f004 f96f 	bl	8005f20 <VL53L0X_UpdateByte>
 8001c42:	4603      	mov	r3, r0
 8001c44:	75fb      	strb	r3, [r7, #23]
                                            VL53L0X_REG_MSRC_CONFIG_CONTROL,
                                            0xFE, Temp8);

                break;
 8001c46:	e00d      	b.n	8001c64 <VL53L0X_SetLimitCheckEnable+0xe4>

            case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

                Temp8 = (uint8_t) (LimitCheckDisable << 4);
 8001c48:	7bbb      	ldrb	r3, [r7, #14]
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	737b      	strb	r3, [r7, #13]
                Status = VL53L0X_UpdateByte(Dev,
 8001c4e:	7b7b      	ldrb	r3, [r7, #13]
 8001c50:	22ef      	movs	r2, #239	; 0xef
 8001c52:	2160      	movs	r1, #96	; 0x60
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f004 f963 	bl	8005f20 <VL53L0X_UpdateByte>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	75fb      	strb	r3, [r7, #23]
                                            VL53L0X_REG_MSRC_CONFIG_CONTROL,
                                            0xEF, Temp8);

                break;
 8001c5e:	e001      	b.n	8001c64 <VL53L0X_SetLimitCheckEnable+0xe4>

            default:
                Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001c60:	23fc      	movs	r3, #252	; 0xfc
 8001c62:	75fb      	strb	r3, [r7, #23]
        }
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8001c64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10f      	bne.n	8001c8c <VL53L0X_SetLimitCheckEnable+0x10c>
        if (LimitCheckEnable == 0) {
 8001c6c:	787b      	ldrb	r3, [r7, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d106      	bne.n	8001c80 <VL53L0X_SetLimitCheckEnable+0x100>
            VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001c7e:	e005      	b.n	8001c8c <VL53L0X_SetLimitCheckEnable+0x10c>
                                           LimitCheckId, 0);
        } else {
            VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                           LimitCheckId, 1);
        }
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8001c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId, uint8_t*    pLimitCheckEnable) {
 8001c98:	b480      	push	{r7}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	817b      	strh	r3, [r7, #10]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	75fb      	strb	r3, [r7, #23]
    uint8_t Temp8;

    LOG_FUNCTION_START("");

    if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001caa:	897b      	ldrh	r3, [r7, #10]
 8001cac:	2b05      	cmp	r3, #5
 8001cae:	d905      	bls.n	8001cbc <VL53L0X_GetLimitCheckEnable+0x24>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001cb0:	23fc      	movs	r3, #252	; 0xfc
 8001cb2:	75fb      	strb	r3, [r7, #23]
        *pLimitCheckEnable = 0;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
 8001cba:	e008      	b.n	8001cce <VL53L0X_GetLimitCheckEnable+0x36>
    } else {
        VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001cbc:	897b      	ldrh	r3, [r7, #10]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cc6:	75bb      	strb	r3, [r7, #22]
                                       LimitCheckId, Temp8);
        *pLimitCheckEnable = Temp8;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7dba      	ldrb	r2, [r7, #22]
 8001ccc:	701a      	strb	r2, [r3, #0]
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8001cce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	371c      	adds	r7, #28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId, FixPoint1616_t LimitCheckValue) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	817b      	strh	r3, [r7, #10]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	75fb      	strb	r3, [r7, #23]
    uint8_t Temp8;

    LOG_FUNCTION_START("");

    VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8001cf2:	897b      	ldrh	r3, [r7, #10]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cfc:	75bb      	strb	r3, [r7, #22]
                                   Temp8);

    if (Temp8 == 0) {
 8001cfe:	7dbb      	ldrb	r3, [r7, #22]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d107      	bne.n	8001d14 <VL53L0X_SetLimitCheckValue+0x34>
        /* disabled write only internal value */
        VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001d04:	897b      	ldrh	r3, [r7, #10]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	330c      	adds	r3, #12
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	e040      	b.n	8001d96 <VL53L0X_SetLimitCheckValue+0xb6>
                                       LimitCheckId, LimitCheckValue);
    } else {
        switch (LimitCheckId) {
 8001d14:	897b      	ldrh	r3, [r7, #10]
 8001d16:	2b05      	cmp	r3, #5
 8001d18:	d830      	bhi.n	8001d7c <VL53L0X_SetLimitCheckValue+0x9c>
 8001d1a:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <VL53L0X_SetLimitCheckValue+0x40>)
 8001d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d20:	08001d39 	.word	0x08001d39
 8001d24:	08001d41 	.word	0x08001d41
 8001d28:	08001d57 	.word	0x08001d57
 8001d2c:	08001d5f 	.word	0x08001d5f
 8001d30:	08001d67 	.word	0x08001d67
 8001d34:	08001d67 	.word	0x08001d67
            case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:

                /* internal computation: */
                VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	635a      	str	r2, [r3, #52]	; 0x34
                                               VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
                                               LimitCheckValue);
                break;
 8001d3e:	e01f      	b.n	8001d80 <VL53L0X_SetLimitCheckValue+0xa0>

            case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

                Status = VL53L0X_WrWord(Dev,
                                        VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
                                        VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	0a5b      	lsrs	r3, r3, #9
                Status = VL53L0X_WrWord(Dev,
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	2144      	movs	r1, #68	; 0x44
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f004 f8ab 	bl	8005ea6 <VL53L0X_WrWord>
 8001d50:	4603      	mov	r3, r0
 8001d52:	75fb      	strb	r3, [r7, #23]
                                            LimitCheckValue));

                break;
 8001d54:	e014      	b.n	8001d80 <VL53L0X_SetLimitCheckValue+0xa0>

            case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

                /* internal computation: */
                VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	63da      	str	r2, [r3, #60]	; 0x3c
                                               VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
                                               LimitCheckValue);

                break;
 8001d5c:	e010      	b.n	8001d80 <VL53L0X_SetLimitCheckValue+0xa0>

            case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

                /* internal computation: */
                VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	641a      	str	r2, [r3, #64]	; 0x40
                                               VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                               LimitCheckValue);

                break;
 8001d64:	e00c      	b.n	8001d80 <VL53L0X_SetLimitCheckValue+0xa0>
            case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
            case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

                Status = VL53L0X_WrWord(Dev,
                                        VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
                                        VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	0a5b      	lsrs	r3, r3, #9
                Status = VL53L0X_WrWord(Dev,
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	2164      	movs	r1, #100	; 0x64
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f004 f898 	bl	8005ea6 <VL53L0X_WrWord>
 8001d76:	4603      	mov	r3, r0
 8001d78:	75fb      	strb	r3, [r7, #23]
                                            LimitCheckValue));

                break;
 8001d7a:	e001      	b.n	8001d80 <VL53L0X_SetLimitCheckValue+0xa0>

            default:
                Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001d7c:	23fc      	movs	r3, #252	; 0xfc
 8001d7e:	75fb      	strb	r3, [r7, #23]
        }

        if (Status == VL53L0X_ERROR_NONE) {
 8001d80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d106      	bne.n	8001d96 <VL53L0X_SetLimitCheckValue+0xb6>
            VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001d88:	897b      	ldrh	r3, [r7, #10]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	330c      	adds	r3, #12
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	605a      	str	r2, [r3, #4]
                                           LimitCheckId, LimitCheckValue);
        }
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8001d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop

08001da4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId, FixPoint1616_t* pLimitCheckValue) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	460b      	mov	r3, r1
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	817b      	strh	r3, [r7, #10]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	77fb      	strb	r3, [r7, #31]
    uint8_t EnableZeroValue = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	77bb      	strb	r3, [r7, #30]
    uint16_t Temp16;
    FixPoint1616_t TempFix1616;

    LOG_FUNCTION_START("");

    switch (LimitCheckId) {
 8001dba:	897b      	ldrh	r3, [r7, #10]
 8001dbc:	2b05      	cmp	r3, #5
 8001dbe:	d847      	bhi.n	8001e50 <VL53L0X_GetLimitCheckValue+0xac>
 8001dc0:	a201      	add	r2, pc, #4	; (adr r2, 8001dc8 <VL53L0X_GetLimitCheckValue+0x24>)
 8001dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc6:	bf00      	nop
 8001dc8:	08001de1 	.word	0x08001de1
 8001dcc:	08001ded 	.word	0x08001ded
 8001dd0:	08001e13 	.word	0x08001e13
 8001dd4:	08001e1f 	.word	0x08001e1f
 8001dd8:	08001e2b 	.word	0x08001e2b
 8001ddc:	08001e2b 	.word	0x08001e2b
        case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:

            /* internal computation: */
            VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de4:	61bb      	str	r3, [r7, #24]
                                           VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
            EnableZeroValue = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	77bb      	strb	r3, [r7, #30]
            break;
 8001dea:	e033      	b.n	8001e54 <VL53L0X_GetLimitCheckValue+0xb0>

        case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
            Status = VL53L0X_RdWord(Dev,
 8001dec:	f107 0316 	add.w	r3, r7, #22
 8001df0:	461a      	mov	r2, r3
 8001df2:	2144      	movs	r1, #68	; 0x44
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f004 f8de 	bl	8005fb6 <VL53L0X_RdWord>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	77fb      	strb	r3, [r7, #31]
                                    VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
                                    &Temp16);

            if (Status == VL53L0X_ERROR_NONE) {
 8001dfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d102      	bne.n	8001e0c <VL53L0X_GetLimitCheckValue+0x68>
                TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001e06:	8afb      	ldrh	r3, [r7, #22]
 8001e08:	025b      	lsls	r3, r3, #9
 8001e0a:	61bb      	str	r3, [r7, #24]
            }

            EnableZeroValue = 1;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	77bb      	strb	r3, [r7, #30]
            break;
 8001e10:	e020      	b.n	8001e54 <VL53L0X_GetLimitCheckValue+0xb0>

        case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

            /* internal computation: */
            VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e16:	61bb      	str	r3, [r7, #24]
                                           VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
            EnableZeroValue = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	77bb      	strb	r3, [r7, #30]
            break;
 8001e1c:	e01a      	b.n	8001e54 <VL53L0X_GetLimitCheckValue+0xb0>

        case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

            /* internal computation: */
            VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	61bb      	str	r3, [r7, #24]
                                           VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
            EnableZeroValue = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	77bb      	strb	r3, [r7, #30]
            break;
 8001e28:	e014      	b.n	8001e54 <VL53L0X_GetLimitCheckValue+0xb0>

        case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
        case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
            Status = VL53L0X_RdWord(Dev,
 8001e2a:	f107 0316 	add.w	r3, r7, #22
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2164      	movs	r1, #100	; 0x64
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f004 f8bf 	bl	8005fb6 <VL53L0X_RdWord>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	77fb      	strb	r3, [r7, #31]
                                    VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
                                    &Temp16);

            if (Status == VL53L0X_ERROR_NONE) {
 8001e3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d102      	bne.n	8001e4a <VL53L0X_GetLimitCheckValue+0xa6>
                TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001e44:	8afb      	ldrh	r3, [r7, #22]
 8001e46:	025b      	lsls	r3, r3, #9
 8001e48:	61bb      	str	r3, [r7, #24]
            }

            EnableZeroValue = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	77bb      	strb	r3, [r7, #30]
            break;
 8001e4e:	e001      	b.n	8001e54 <VL53L0X_GetLimitCheckValue+0xb0>

        default:
            Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001e50:	23fc      	movs	r3, #252	; 0xfc
 8001e52:	77fb      	strb	r3, [r7, #31]
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8001e54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d12a      	bne.n	8001eb2 <VL53L0X_GetLimitCheckValue+0x10e>
        if (EnableZeroValue == 1) {
 8001e5c:	7fbb      	ldrb	r3, [r7, #30]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d124      	bne.n	8001eac <VL53L0X_GetLimitCheckValue+0x108>
            if (TempFix1616 == 0) {
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d110      	bne.n	8001e8a <VL53L0X_GetLimitCheckValue+0xe6>
                /* disabled: return value from memory */
                VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8001e68:	897b      	ldrh	r3, [r7, #10]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	330c      	adds	r3, #12
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	61bb      	str	r3, [r7, #24]
                                               LimitChecksValue, LimitCheckId,
                                               TempFix1616);
                *pLimitCheckValue = TempFix1616;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	601a      	str	r2, [r3, #0]
                VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001e7c:	897b      	ldrh	r3, [r7, #10]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4413      	add	r3, r2
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001e88:	e013      	b.n	8001eb2 <VL53L0X_GetLimitCheckValue+0x10e>
                                               LimitChecksEnable, LimitCheckId, 0);
            } else {
                *pLimitCheckValue = TempFix1616;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	601a      	str	r2, [r3, #0]
                VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001e90:	897b      	ldrh	r3, [r7, #10]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	330c      	adds	r3, #12
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	605a      	str	r2, [r3, #4]
                                               LimitChecksValue, LimitCheckId,
                                               TempFix1616);
                VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001e9e:	897b      	ldrh	r3, [r7, #10]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001eaa:	e002      	b.n	8001eb2 <VL53L0X_GetLimitCheckValue+0x10e>
                                               LimitChecksEnable, LimitCheckId, 1);
            }
        } else {
            *pLimitCheckValue = TempFix1616;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	601a      	str	r2, [r3, #0]
        }
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8001eb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3720      	adds	r7, #32
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop

08001ec0 <VL53L0X_GetWrapAroundCheckEnable>:

    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev, uint8_t*    pWrapAroundCheckEnable) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    LOG_FUNCTION_START("");

    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8001ece:	f107 030e 	add.w	r3, r7, #14
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f004 f854 	bl	8005f84 <VL53L0X_RdByte>
 8001edc:	4603      	mov	r3, r0
 8001ede:	73fb      	strb	r3, [r7, #15]

    if (Status == VL53L0X_ERROR_NONE) {
 8001ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10e      	bne.n	8001f06 <VL53L0X_GetWrapAroundCheckEnable+0x46>
        PALDevDataSet(Dev, SequenceConfig, data);
 8001ee8:	7bba      	ldrb	r2, [r7, #14]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

        if (data & (0x01 << 7)) {
 8001ef0:	7bbb      	ldrb	r3, [r7, #14]
 8001ef2:	b25b      	sxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da03      	bge.n	8001f00 <VL53L0X_GetWrapAroundCheckEnable+0x40>
            *pWrapAroundCheckEnable = 0x01;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2201      	movs	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
 8001efe:	e002      	b.n	8001f06 <VL53L0X_GetWrapAroundCheckEnable+0x46>
        } else {
            *pWrapAroundCheckEnable = 0x00;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
        }
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8001f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d104      	bne.n	8001f18 <VL53L0X_GetWrapAroundCheckEnable+0x58>
        VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	781a      	ldrb	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                                  *pWrapAroundCheckEnable);
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8001f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <VL53L0X_PerformSingleMeasurement>:
}

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	73fb      	strb	r3, [r7, #15]
    VL53L0X_DeviceModes DeviceMode;

    LOG_FUNCTION_START("");

    /* Get Current DeviceMode */
    Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8001f30:	f107 030e 	add.w	r3, r7, #14
 8001f34:	4619      	mov	r1, r3
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff fbba 	bl	80016b0 <VL53L0X_GetDeviceMode>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	73fb      	strb	r3, [r7, #15]

    /* Start immediately to run a single ranging measurement in case of
     * single ranging or single histogram */
    if ((Status == VL53L0X_ERROR_NONE) &&
 8001f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d107      	bne.n	8001f58 <VL53L0X_PerformSingleMeasurement+0x34>
        (DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)) {
 8001f48:	7bbb      	ldrb	r3, [r7, #14]
    if ((Status == VL53L0X_ERROR_NONE) &&
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d104      	bne.n	8001f58 <VL53L0X_PerformSingleMeasurement+0x34>
        Status = VL53L0X_StartMeasurement(Dev);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f898 	bl	8002084 <VL53L0X_StartMeasurement>
 8001f54:	4603      	mov	r3, r0
 8001f56:	73fb      	strb	r3, [r7, #15]
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8001f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d104      	bne.n	8001f6a <VL53L0X_PerformSingleMeasurement+0x46>
        Status = VL53L0X_measurement_poll_for_completion(Dev);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f001 fb7a 	bl	800365a <VL53L0X_measurement_poll_for_completion>
 8001f66:	4603      	mov	r3, r0
 8001f68:	73fb      	strb	r3, [r7, #15]
    }

    /* Change PAL State in case of single ranging or single histogram */
    if ((Status == VL53L0X_ERROR_NONE) &&
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <VL53L0X_PerformSingleMeasurement+0x5c>
        (DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)) {
 8001f72:	7bbb      	ldrb	r3, [r7, #14]
    if ((Status == VL53L0X_ERROR_NONE) &&
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d103      	bne.n	8001f80 <VL53L0X_PerformSingleMeasurement+0x5c>
        PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8001f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <VL53L0X_PerformRefCalibration>:

    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t*    pVhvSettings, uint8_t*    pPhaseCal) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	75fb      	strb	r3, [r7, #23]
    LOG_FUNCTION_START("");

    Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f001 faf9 	bl	800359a <VL53L0X_perform_ref_calibration>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	75fb      	strb	r3, [r7, #23]
                                             pPhaseCal, 1);

    LOG_FUNCTION_END(Status);
    return Status;
 8001fac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <VL53L0X_CheckAndLoadInterruptSettings>:

    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev, uint8_t StartNotStopFlag) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]
    uint8_t InterruptConfig;
    FixPoint1616_t ThresholdLow;
    FixPoint1616_t ThresholdHigh;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	75fb      	strb	r3, [r7, #23]

    InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8001fce:	75bb      	strb	r3, [r7, #22]
                                                         Pin0GpioFunctionality);

    if ((InterruptConfig ==
 8001fd0:	7dbb      	ldrb	r3, [r7, #22]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d005      	beq.n	8001fe2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
         VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8001fd6:	7dbb      	ldrb	r3, [r7, #22]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d002      	beq.n	8001fe2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
        (InterruptConfig ==
         VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8001fdc:	7dbb      	ldrb	r3, [r7, #22]
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d147      	bne.n	8002072 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
        (InterruptConfig ==
         VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {
        Status = VL53L0X_GetInterruptThresholds(Dev,
 8001fe2:	f107 030c 	add.w	r3, r7, #12
 8001fe6:	f107 0210 	add.w	r2, r7, #16
 8001fea:	2101      	movs	r1, #1
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 fbc3 	bl	8002778 <VL53L0X_GetInterruptThresholds>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	75fb      	strb	r3, [r7, #23]
                                                VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
                                                &ThresholdLow, &ThresholdHigh);

        if (((ThresholdLow > 255 * 65536) ||
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8001ffc:	d803      	bhi.n	8002006 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
             (ThresholdHigh > 255 * 65536)) &&
 8001ffe:	68fb      	ldr	r3, [r7, #12]
        if (((ThresholdLow > 255 * 65536) ||
 8002000:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8002004:	d935      	bls.n	8002072 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
             (ThresholdHigh > 255 * 65536)) &&
 8002006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d131      	bne.n	8002072 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
            (Status == VL53L0X_ERROR_NONE)) {
            if (StartNotStopFlag != 0) {
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
                Status = VL53L0X_load_tuning_settings(Dev,
 8002014:	491a      	ldr	r1, [pc, #104]	; (8002080 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f002 ff92 	bl	8004f40 <VL53L0X_load_tuning_settings>
 800201c:	4603      	mov	r3, r0
 800201e:	75fb      	strb	r3, [r7, #23]
 8002020:	e027      	b.n	8002072 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
                                                      InterruptThresholdSettings);
            } else {
                Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8002022:	2204      	movs	r2, #4
 8002024:	21ff      	movs	r1, #255	; 0xff
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f003 ff23 	bl	8005e72 <VL53L0X_WrByte>
 800202c:	4603      	mov	r3, r0
 800202e:	461a      	mov	r2, r3
 8002030:	7dfb      	ldrb	r3, [r7, #23]
 8002032:	4313      	orrs	r3, r2
 8002034:	75fb      	strb	r3, [r7, #23]
                Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002036:	2200      	movs	r2, #0
 8002038:	2170      	movs	r1, #112	; 0x70
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f003 ff19 	bl	8005e72 <VL53L0X_WrByte>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	7dfb      	ldrb	r3, [r7, #23]
 8002046:	4313      	orrs	r3, r2
 8002048:	75fb      	strb	r3, [r7, #23]
                Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800204a:	2200      	movs	r2, #0
 800204c:	21ff      	movs	r1, #255	; 0xff
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f003 ff0f 	bl	8005e72 <VL53L0X_WrByte>
 8002054:	4603      	mov	r3, r0
 8002056:	461a      	mov	r2, r3
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	4313      	orrs	r3, r2
 800205c:	75fb      	strb	r3, [r7, #23]
                Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800205e:	2200      	movs	r2, #0
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f003 ff05 	bl	8005e72 <VL53L0X_WrByte>
 8002068:	4603      	mov	r3, r0
 800206a:	461a      	mov	r2, r3
 800206c:	7dfb      	ldrb	r3, [r7, #23]
 800206e:	4313      	orrs	r3, r2
 8002070:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return Status;
 8002072:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200000f4 	.word	0x200000f4

08002084 <VL53L0X_StartMeasurement>:

VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800208c:	2300      	movs	r3, #0
 800208e:	75fb      	strb	r3, [r7, #23]
    VL53L0X_DeviceModes DeviceMode;
    uint8_t Byte;
    uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
    uint32_t LoopNb;
    LOG_FUNCTION_START("");

    /* Get Current DeviceMode */
    VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8002094:	f107 030e 	add.w	r3, r7, #14
 8002098:	4619      	mov	r1, r3
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff fb08 	bl	80016b0 <VL53L0X_GetDeviceMode>

    Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80020a0:	2201      	movs	r2, #1
 80020a2:	2180      	movs	r1, #128	; 0x80
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f003 fee4 	bl	8005e72 <VL53L0X_WrByte>
 80020aa:	4603      	mov	r3, r0
 80020ac:	75fb      	strb	r3, [r7, #23]
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80020ae:	2201      	movs	r2, #1
 80020b0:	21ff      	movs	r1, #255	; 0xff
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f003 fedd 	bl	8005e72 <VL53L0X_WrByte>
 80020b8:	4603      	mov	r3, r0
 80020ba:	75fb      	strb	r3, [r7, #23]
    Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80020bc:	2200      	movs	r2, #0
 80020be:	2100      	movs	r1, #0
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f003 fed6 	bl	8005e72 <VL53L0X_WrByte>
 80020c6:	4603      	mov	r3, r0
 80020c8:	75fb      	strb	r3, [r7, #23]
    Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80020d0:	461a      	mov	r2, r3
 80020d2:	2191      	movs	r1, #145	; 0x91
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f003 fecc 	bl	8005e72 <VL53L0X_WrByte>
 80020da:	4603      	mov	r3, r0
 80020dc:	75fb      	strb	r3, [r7, #23]
    Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80020de:	2201      	movs	r2, #1
 80020e0:	2100      	movs	r1, #0
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f003 fec5 	bl	8005e72 <VL53L0X_WrByte>
 80020e8:	4603      	mov	r3, r0
 80020ea:	75fb      	strb	r3, [r7, #23]
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80020ec:	2200      	movs	r2, #0
 80020ee:	21ff      	movs	r1, #255	; 0xff
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f003 febe 	bl	8005e72 <VL53L0X_WrByte>
 80020f6:	4603      	mov	r3, r0
 80020f8:	75fb      	strb	r3, [r7, #23]
    Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f003 feb7 	bl	8005e72 <VL53L0X_WrByte>
 8002104:	4603      	mov	r3, r0
 8002106:	75fb      	strb	r3, [r7, #23]

    switch (DeviceMode) {
 8002108:	7bbb      	ldrb	r3, [r7, #14]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d054      	beq.n	80021b8 <VL53L0X_StartMeasurement+0x134>
 800210e:	2b03      	cmp	r3, #3
 8002110:	dc6c      	bgt.n	80021ec <VL53L0X_StartMeasurement+0x168>
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <VL53L0X_StartMeasurement+0x98>
 8002116:	2b01      	cmp	r3, #1
 8002118:	d034      	beq.n	8002184 <VL53L0X_StartMeasurement+0x100>
 800211a:	e067      	b.n	80021ec <VL53L0X_StartMeasurement+0x168>
        case VL53L0X_DEVICEMODE_SINGLE_RANGING:
            Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800211c:	2201      	movs	r2, #1
 800211e:	2100      	movs	r1, #0
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f003 fea6 	bl	8005e72 <VL53L0X_WrByte>
 8002126:	4603      	mov	r3, r0
 8002128:	75fb      	strb	r3, [r7, #23]

            Byte = StartStopByte;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	737b      	strb	r3, [r7, #13]

            if (Status == VL53L0X_ERROR_NONE) {
 800212e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d15d      	bne.n	80021f2 <VL53L0X_StartMeasurement+0x16e>
                /* Wait until start bit has been cleared */
                LoopNb = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]

                do {
                    if (LoopNb > 0) {
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <VL53L0X_StartMeasurement+0xce>
                        Status = VL53L0X_RdByte(Dev,
 8002140:	f107 030d 	add.w	r3, r7, #13
 8002144:	461a      	mov	r2, r3
 8002146:	2100      	movs	r1, #0
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f003 ff1b 	bl	8005f84 <VL53L0X_RdByte>
 800214e:	4603      	mov	r3, r0
 8002150:	75fb      	strb	r3, [r7, #23]
                                                VL53L0X_REG_SYSRANGE_START, &Byte);
                    }

                    LoopNb = LoopNb + 1;
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	3301      	adds	r3, #1
 8002156:	613b      	str	r3, [r7, #16]
                } while (((Byte & StartStopByte) == StartStopByte) &&
 8002158:	7b7a      	ldrb	r2, [r7, #13]
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	4013      	ands	r3, r2
 800215e:	b2db      	uxtb	r3, r3
                         (Status == VL53L0X_ERROR_NONE) &&
                         (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	429a      	cmp	r2, r3
 8002164:	d107      	bne.n	8002176 <VL53L0X_StartMeasurement+0xf2>
                } while (((Byte & StartStopByte) == StartStopByte) &&
 8002166:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d103      	bne.n	8002176 <VL53L0X_StartMeasurement+0xf2>
                         (Status == VL53L0X_ERROR_NONE) &&
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002174:	d3e1      	bcc.n	800213a <VL53L0X_StartMeasurement+0xb6>

                if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800217c:	d339      	bcc.n	80021f2 <VL53L0X_StartMeasurement+0x16e>
                    Status = VL53L0X_ERROR_TIME_OUT;
 800217e:	23f9      	movs	r3, #249	; 0xf9
 8002180:	75fb      	strb	r3, [r7, #23]
                }
            }

            break;
 8002182:	e036      	b.n	80021f2 <VL53L0X_StartMeasurement+0x16e>
        case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:

            /* Back-to-back mode */

            /* Check if need to apply interrupt settings */
            if (Status == VL53L0X_ERROR_NONE) {
 8002184:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <VL53L0X_StartMeasurement+0x114>
                Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800218c:	2101      	movs	r1, #1
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ff12 	bl	8001fb8 <VL53L0X_CheckAndLoadInterruptSettings>
 8002194:	4603      	mov	r3, r0
 8002196:	75fb      	strb	r3, [r7, #23]
            }

            Status = VL53L0X_WrByte(Dev,
 8002198:	2202      	movs	r2, #2
 800219a:	2100      	movs	r1, #0
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f003 fe68 	bl	8005e72 <VL53L0X_WrByte>
 80021a2:	4603      	mov	r3, r0
 80021a4:	75fb      	strb	r3, [r7, #23]
                                    VL53L0X_REG_SYSRANGE_START,
                                    VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);

            if (Status == VL53L0X_ERROR_NONE) {
 80021a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d123      	bne.n	80021f6 <VL53L0X_StartMeasurement+0x172>
                /* Set PAL State to Running */
                PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2204      	movs	r2, #4
 80021b2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
            }

            break;
 80021b6:	e01e      	b.n	80021f6 <VL53L0X_StartMeasurement+0x172>

        case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:

            /* Continuous mode */
            /* Check if need to apply interrupt settings */
            if (Status == VL53L0X_ERROR_NONE) {
 80021b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d105      	bne.n	80021cc <VL53L0X_StartMeasurement+0x148>
                Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80021c0:	2101      	movs	r1, #1
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff fef8 	bl	8001fb8 <VL53L0X_CheckAndLoadInterruptSettings>
 80021c8:	4603      	mov	r3, r0
 80021ca:	75fb      	strb	r3, [r7, #23]
            }

            Status = VL53L0X_WrByte(Dev,
 80021cc:	2204      	movs	r2, #4
 80021ce:	2100      	movs	r1, #0
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f003 fe4e 	bl	8005e72 <VL53L0X_WrByte>
 80021d6:	4603      	mov	r3, r0
 80021d8:	75fb      	strb	r3, [r7, #23]
                                    VL53L0X_REG_SYSRANGE_START,
                                    VL53L0X_REG_SYSRANGE_MODE_TIMED);

            if (Status == VL53L0X_ERROR_NONE) {
 80021da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10b      	bne.n	80021fa <VL53L0X_StartMeasurement+0x176>
                /* Set PAL State to Running */
                PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2204      	movs	r2, #4
 80021e6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
            }

            break;
 80021ea:	e006      	b.n	80021fa <VL53L0X_StartMeasurement+0x176>

        default:

            /* Selected mode not supported */
            Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80021ec:	23f8      	movs	r3, #248	; 0xf8
 80021ee:	75fb      	strb	r3, [r7, #23]
 80021f0:	e004      	b.n	80021fc <VL53L0X_StartMeasurement+0x178>
            break;
 80021f2:	bf00      	nop
 80021f4:	e002      	b.n	80021fc <VL53L0X_StartMeasurement+0x178>
            break;
 80021f6:	bf00      	nop
 80021f8:	e000      	b.n	80021fc <VL53L0X_StartMeasurement+0x178>
            break;
 80021fa:	bf00      	nop
    }

    LOG_FUNCTION_END(Status);
    return Status;
 80021fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <VL53L0X_GetMeasurementDataReady>:

    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev, uint8_t*    pMeasurementDataReady) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]
    uint8_t SysRangeStatusRegister;
    uint8_t InterruptConfig;
    uint32_t InterruptMask;
    LOG_FUNCTION_START("");

    InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800221c:	73bb      	strb	r3, [r7, #14]
                                                         Pin0GpioFunctionality);

    if (InterruptConfig ==
 800221e:	7bbb      	ldrb	r3, [r7, #14]
 8002220:	2b04      	cmp	r3, #4
 8002222:	d112      	bne.n	800224a <VL53L0X_GetMeasurementDataReady+0x42>
        VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
        Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8002224:	f107 0308 	add.w	r3, r7, #8
 8002228:	4619      	mov	r1, r3
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 fb1a 	bl	8002864 <VL53L0X_GetInterruptMaskStatus>
 8002230:	4603      	mov	r3, r0
 8002232:	73fb      	strb	r3, [r7, #15]

        if (InterruptMask ==
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b04      	cmp	r3, #4
 8002238:	d103      	bne.n	8002242 <VL53L0X_GetMeasurementDataReady+0x3a>
            VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
            *pMeasurementDataReady = 1;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	e01c      	b.n	800227c <VL53L0X_GetMeasurementDataReady+0x74>
        } else {
            *pMeasurementDataReady = 0;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
 8002248:	e018      	b.n	800227c <VL53L0X_GetMeasurementDataReady+0x74>
        }
    } else {
        Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800224a:	f107 030d 	add.w	r3, r7, #13
 800224e:	461a      	mov	r2, r3
 8002250:	2114      	movs	r1, #20
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f003 fe96 	bl	8005f84 <VL53L0X_RdByte>
 8002258:	4603      	mov	r3, r0
 800225a:	73fb      	strb	r3, [r7, #15]
                                &SysRangeStatusRegister);

        if (Status == VL53L0X_ERROR_NONE) {
 800225c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10b      	bne.n	800227c <VL53L0X_GetMeasurementDataReady+0x74>
            if (SysRangeStatusRegister & 0x01) {
 8002264:	7b7b      	ldrb	r3, [r7, #13]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <VL53L0X_GetMeasurementDataReady+0x6e>
                *pMeasurementDataReady = 1;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
 8002274:	e002      	b.n	800227c <VL53L0X_GetMeasurementDataReady+0x74>
            } else {
                *pMeasurementDataReady = 0;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    LOG_FUNCTION_END(Status);
    return Status;
 800227c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <VL53L0X_GetRangingMeasurementData>:
    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV                       Dev,
                                                VL53L0X_RangingMeasurementData_t* pRangingMeasurementData) {
 8002288:	b5b0      	push	{r4, r5, r7, lr}
 800228a:	b096      	sub	sp, #88	; 0x58
 800228c:	af02      	add	r7, sp, #8
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002292:	2300      	movs	r3, #0
 8002294:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
     * use multi read even if some registers are not useful, result will
     * be more efficient
     * start reading at 0x14 dec20
     * end reading at 0x21 dec33 total 14 bytes to read
     */
    Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8002298:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800229c:	230c      	movs	r3, #12
 800229e:	2114      	movs	r1, #20
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f003 fdb7 	bl	8005e14 <VL53L0X_ReadMulti>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if (Status == VL53L0X_ERROR_NONE) {
 80022ac:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f040 80d1 	bne.w	8002458 <VL53L0X_GetRangingMeasurementData+0x1d0>
        pRangingMeasurementData->ZoneId = 0;    /* Only one zone */
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2200      	movs	r2, #0
 80022ba:	759a      	strb	r2, [r3, #22]
        pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]

        tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80022c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        /* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
         *(format 11.2) else no fractional
         */

        pRangingMeasurementData->MeasurementTimeUsec = 0;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2200      	movs	r2, #0
 80022dc:	605a      	str	r2, [r3, #4]

        SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80022de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	025b      	lsls	r3, r3, #9
 80022f4:	647b      	str	r3, [r7, #68]	; 0x44
            VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));

        /* peak_signal_count_rate_rtn_mcps */
        pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022fa:	60da      	str	r2, [r3, #12]

        AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80022fc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002300:	b29b      	uxth	r3, r3
 8002302:	021b      	lsls	r3, r3, #8
 8002304:	b29a      	uxth	r2, r3
 8002306:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800230a:	b29b      	uxth	r3, r3
 800230c:	4413      	add	r3, r2
 800230e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        pRangingMeasurementData->AmbientRateRtnMegaCps =
            VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8002312:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002316:	025b      	lsls	r3, r3, #9
 8002318:	461a      	mov	r2, r3
        pRangingMeasurementData->AmbientRateRtnMegaCps =
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	611a      	str	r2, [r3, #16]

        EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800231e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002322:	b29b      	uxth	r3, r3
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	b29a      	uxth	r2, r3
 8002328:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800232c:	b29b      	uxth	r3, r3
 800232e:	4413      	add	r3, r2
 8002330:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                                                   localBuffer[2]);

        /* EffectiveSpadRtnCount is 8.8 format */
        pRangingMeasurementData->EffectiveSpadRtnCount =
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800233a:	829a      	strh	r2, [r3, #20]
            EffectiveSpadRtnCount;

        DeviceRangeStatus = localBuffer[0];
 800233c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002340:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

        /* Get Linearity Corrective Gain */
        LinearityCorrectiveGain = PALDevDataGet(Dev,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800234a:	87bb      	strh	r3, [r7, #60]	; 0x3c
                                                LinearityCorrectiveGain);

        /* Get ranging configuration */
        RangeFractionalEnable = PALDevDataGet(Dev,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8002352:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                                              RangeFractionalEnable);

        if (LinearityCorrectiveGain != 1000) {
 8002356:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800235c:	d046      	beq.n	80023ec <VL53L0X_GetRangingMeasurementData+0x164>
            tmpuint16 = (uint16_t) ((LinearityCorrectiveGain *
 800235e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002360:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002364:	fb02 f303 	mul.w	r3, r2, r3
                                     tmpuint16 + 500) / 1000);
 8002368:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800236c:	4a57      	ldr	r2, [pc, #348]	; (80024cc <VL53L0X_GetRangingMeasurementData+0x244>)
 800236e:	fb82 1203 	smull	r1, r2, r2, r3
 8002372:	1192      	asrs	r2, r2, #6
 8002374:	17db      	asrs	r3, r3, #31
 8002376:	1ad3      	subs	r3, r2, r3
            tmpuint16 = (uint16_t) ((LinearityCorrectiveGain *
 8002378:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

            /* Implement Xtalk */
            VL53L0X_GETPARAMETERFIELD(Dev,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	873b      	strh	r3, [r7, #56]	; 0x38
                                      XTalkCompensationRateMegaCps,
                                      XTalkCompensationRateMegaCps);
            VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7f1b      	ldrb	r3, [r3, #28]
 8002386:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                      XTalkCompensationEnable);

            if (XTalkCompensationEnable) {
 800238a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800238e:	2b00      	cmp	r3, #0
 8002390:	d02c      	beq.n	80023ec <VL53L0X_GetRangingMeasurementData+0x164>
                if ((SignalRate -
                     ((XTalkCompensationRateMegaCps *
 8002392:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002394:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002398:	fb02 f303 	mul.w	r3, r2, r3
                       EffectiveSpadRtnCount) >> 8)) <=
 800239c:	121a      	asrs	r2, r3, #8
 800239e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                if ((SignalRate -
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d10d      	bne.n	80023c0 <VL53L0X_GetRangingMeasurementData+0x138>
                    0) {
                    if (RangeFractionalEnable) {
 80023a4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d004      	beq.n	80023b6 <VL53L0X_GetRangingMeasurementData+0x12e>
                        XtalkRangeMilliMeter = 8888;
 80023ac:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80023b0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80023b4:	e016      	b.n	80023e4 <VL53L0X_GetRangingMeasurementData+0x15c>
                    } else {
                        XtalkRangeMilliMeter = 8888 <<
 80023b6:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80023ba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80023be:	e011      	b.n	80023e4 <VL53L0X_GetRangingMeasurementData+0x15c>
                                               2;
                    }
                } else {
                    XtalkRangeMilliMeter =
                        (tmpuint16 * SignalRate) /
 80023c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80023c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023c6:	fb02 f203 	mul.w	r2, r2, r3
                        (SignalRate -
                         ((XTalkCompensationRateMegaCps *
 80023ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80023cc:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
                           EffectiveSpadRtnCount) >>
 80023d4:	121b      	asrs	r3, r3, #8
 80023d6:	4619      	mov	r1, r3
                        (SignalRate -
 80023d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023da:	1a5b      	subs	r3, r3, r1
                        (tmpuint16 * SignalRate) /
 80023dc:	fbb2 f3f3 	udiv	r3, r2, r3
                    XtalkRangeMilliMeter =
 80023e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                          8));
                }

                tmpuint16 = XtalkRangeMilliMeter;
 80023e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            }
        }

        if (RangeFractionalEnable) {
 80023ec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00d      	beq.n	8002410 <VL53L0X_GetRangingMeasurementData+0x188>
            pRangingMeasurementData->RangeMilliMeter =
                (uint16_t) ((tmpuint16) >> 2);
 80023f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	b29a      	uxth	r2, r3
            pRangingMeasurementData->RangeMilliMeter =
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	811a      	strh	r2, [r3, #8]
            pRangingMeasurementData->RangeFractionalPart =
                (uint8_t) ((tmpuint16 & 0x03) << 6);
 8002400:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002404:	b2db      	uxtb	r3, r3
 8002406:	019b      	lsls	r3, r3, #6
 8002408:	b2da      	uxtb	r2, r3
            pRangingMeasurementData->RangeFractionalPart =
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	75da      	strb	r2, [r3, #23]
 800240e:	e006      	b.n	800241e <VL53L0X_GetRangingMeasurementData+0x196>
        } else {
            pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002416:	811a      	strh	r2, [r3, #8]
            pRangingMeasurementData->RangeFractionalPart = 0;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	2200      	movs	r2, #0
 800241c:	75da      	strb	r2, [r3, #23]
         * For a standard definition of RangeStatus, this should
         * return 0 in case of good result after a ranging
         * The range status depends on the device so call a device
         * specific function to obtain the right Status.
         */
        Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800241e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002422:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8002426:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	4613      	mov	r3, r2
 8002432:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f003 fa21 	bl	800587c <VL53L0X_get_pal_range_status>
 800243a:	4603      	mov	r3, r0
 800243c:	461a      	mov	r2, r3
 800243e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002442:	4313      	orrs	r3, r2
 8002444:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                                               SignalRate, EffectiveSpadRtnCount,
                                               pRangingMeasurementData, &PalRangeStatus);

        if (Status == VL53L0X_ERROR_NONE) {
 8002448:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800244c:	2b00      	cmp	r3, #0
 800244e:	d103      	bne.n	8002458 <VL53L0X_GetRangingMeasurementData+0x1d0>
            pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8002450:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	761a      	strb	r2, [r3, #24]
        }
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8002458:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800245c:	2b00      	cmp	r3, #0
 800245e:	d12f      	bne.n	80024c0 <VL53L0X_GetRangingMeasurementData+0x238>
        /* Copy last read data into Dev buffer */
        LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f107 040c 	add.w	r4, r7, #12
 8002466:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800246a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800246c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800246e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002472:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        LastRangeDataBuffer.RangeMilliMeter =
            pRangingMeasurementData->RangeMilliMeter;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	891b      	ldrh	r3, [r3, #8]
        LastRangeDataBuffer.RangeMilliMeter =
 800247a:	82bb      	strh	r3, [r7, #20]
        LastRangeDataBuffer.RangeFractionalPart =
            pRangingMeasurementData->RangeFractionalPart;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	7ddb      	ldrb	r3, [r3, #23]
        LastRangeDataBuffer.RangeFractionalPart =
 8002480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        LastRangeDataBuffer.RangeDMaxMilliMeter =
            pRangingMeasurementData->RangeDMaxMilliMeter;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	895b      	ldrh	r3, [r3, #10]
        LastRangeDataBuffer.RangeDMaxMilliMeter =
 8002488:	82fb      	strh	r3, [r7, #22]
        LastRangeDataBuffer.MeasurementTimeUsec =
            pRangingMeasurementData->MeasurementTimeUsec;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
        LastRangeDataBuffer.MeasurementTimeUsec =
 800248e:	613b      	str	r3, [r7, #16]
        LastRangeDataBuffer.SignalRateRtnMegaCps =
            pRangingMeasurementData->SignalRateRtnMegaCps;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
        LastRangeDataBuffer.SignalRateRtnMegaCps =
 8002494:	61bb      	str	r3, [r7, #24]
        LastRangeDataBuffer.AmbientRateRtnMegaCps =
            pRangingMeasurementData->AmbientRateRtnMegaCps;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
        LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800249a:	61fb      	str	r3, [r7, #28]
        LastRangeDataBuffer.EffectiveSpadRtnCount =
            pRangingMeasurementData->EffectiveSpadRtnCount;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	8a9b      	ldrh	r3, [r3, #20]
        LastRangeDataBuffer.EffectiveSpadRtnCount =
 80024a0:	843b      	strh	r3, [r7, #32]
        LastRangeDataBuffer.RangeStatus =
            pRangingMeasurementData->RangeStatus;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	7e1b      	ldrb	r3, [r3, #24]
        LastRangeDataBuffer.RangeStatus =
 80024a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

        PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80024b0:	f107 050c 	add.w	r5, r7, #12
 80024b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }

    LOG_FUNCTION_END(Status);
    return Status;
 80024c0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3750      	adds	r7, #80	; 0x50
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bdb0      	pop	{r4, r5, r7, pc}
 80024cc:	10624dd3 	.word	0x10624dd3

080024d0 <VL53L0X_PerformSingleRangingMeasurement>:
    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV                       Dev,
                                                      VL53L0X_RangingMeasurementData_t* pRangingMeasurementData) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]

    LOG_FUNCTION_START("");

    /* This function will do a complete single ranging
     * Here we fix the mode! */
    Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80024de:	2100      	movs	r1, #0
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff f8b9 	bl	8001658 <VL53L0X_SetDeviceMode>
 80024e6:	4603      	mov	r3, r0
 80024e8:	73fb      	strb	r3, [r7, #15]

    if (Status == VL53L0X_ERROR_NONE) {
 80024ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d104      	bne.n	80024fc <VL53L0X_PerformSingleRangingMeasurement+0x2c>
        Status = VL53L0X_PerformSingleMeasurement(Dev);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff fd16 	bl	8001f24 <VL53L0X_PerformSingleMeasurement>
 80024f8:	4603      	mov	r3, r0
 80024fa:	73fb      	strb	r3, [r7, #15]
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80024fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d105      	bne.n	8002510 <VL53L0X_PerformSingleRangingMeasurement+0x40>
        Status = VL53L0X_GetRangingMeasurementData(Dev,
 8002504:	6839      	ldr	r1, [r7, #0]
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff febe 	bl	8002288 <VL53L0X_GetRangingMeasurementData>
 800250c:	4603      	mov	r3, r0
 800250e:	73fb      	strb	r3, [r7, #15]
                                                   pRangingMeasurementData);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8002510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d105      	bne.n	8002524 <VL53L0X_PerformSingleRangingMeasurement+0x54>
        Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002518:	2100      	movs	r1, #0
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f962 	bl	80027e4 <VL53L0X_ClearInterruptMask>
 8002520:	4603      	mov	r3, r0
 8002522:	73fb      	strb	r3, [r7, #15]
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8002524:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <VL53L0X_SetGpioConfig>:
}

/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin, VL53L0X_DeviceModes DeviceMode,
                                    VL53L0X_GpioFunctionality Functionality, VL53L0X_InterruptPolarity Polarity) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	4608      	mov	r0, r1
 800253a:	4611      	mov	r1, r2
 800253c:	461a      	mov	r2, r3
 800253e:	4603      	mov	r3, r0
 8002540:	70fb      	strb	r3, [r7, #3]
 8002542:	460b      	mov	r3, r1
 8002544:	70bb      	strb	r3, [r7, #2]
 8002546:	4613      	mov	r3, r2
 8002548:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    LOG_FUNCTION_START("");

    if (Pin != 0) {
 800254e:	78fb      	ldrb	r3, [r7, #3]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <VL53L0X_SetGpioConfig+0x2a>
        Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8002554:	23f6      	movs	r3, #246	; 0xf6
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	e107      	b.n	800276a <VL53L0X_SetGpioConfig+0x23a>
    } else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800255a:	78bb      	ldrb	r3, [r7, #2]
 800255c:	2b14      	cmp	r3, #20
 800255e:	d110      	bne.n	8002582 <VL53L0X_SetGpioConfig+0x52>
        if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW) {
 8002560:	7e3b      	ldrb	r3, [r7, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <VL53L0X_SetGpioConfig+0x3c>
            data = 0x10;
 8002566:	2310      	movs	r3, #16
 8002568:	73bb      	strb	r3, [r7, #14]
 800256a:	e001      	b.n	8002570 <VL53L0X_SetGpioConfig+0x40>
        } else {
            data = 1;
 800256c:	2301      	movs	r3, #1
 800256e:	73bb      	strb	r3, [r7, #14]
        }

        Status = VL53L0X_WrByte(Dev,
 8002570:	7bbb      	ldrb	r3, [r7, #14]
 8002572:	461a      	mov	r2, r3
 8002574:	2184      	movs	r1, #132	; 0x84
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f003 fc7b 	bl	8005e72 <VL53L0X_WrByte>
 800257c:	4603      	mov	r3, r0
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	e0f3      	b.n	800276a <VL53L0X_SetGpioConfig+0x23a>
                                VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);
    } else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8002582:	78bb      	ldrb	r3, [r7, #2]
 8002584:	2b15      	cmp	r3, #21
 8002586:	f040 8097 	bne.w	80026b8 <VL53L0X_SetGpioConfig+0x188>
        Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800258a:	2201      	movs	r2, #1
 800258c:	21ff      	movs	r1, #255	; 0xff
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f003 fc6f 	bl	8005e72 <VL53L0X_WrByte>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	4313      	orrs	r3, r2
 800259c:	73fb      	strb	r3, [r7, #15]
        Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f003 fc65 	bl	8005e72 <VL53L0X_WrByte>
 80025a8:	4603      	mov	r3, r0
 80025aa:	461a      	mov	r2, r3
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	73fb      	strb	r3, [r7, #15]

        Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80025b2:	2200      	movs	r2, #0
 80025b4:	21ff      	movs	r1, #255	; 0xff
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f003 fc5b 	bl	8005e72 <VL53L0X_WrByte>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	73fb      	strb	r3, [r7, #15]
        Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80025c6:	2201      	movs	r2, #1
 80025c8:	2180      	movs	r1, #128	; 0x80
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f003 fc51 	bl	8005e72 <VL53L0X_WrByte>
 80025d0:	4603      	mov	r3, r0
 80025d2:	461a      	mov	r2, r3
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	73fb      	strb	r3, [r7, #15]
        Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80025da:	2202      	movs	r2, #2
 80025dc:	2185      	movs	r1, #133	; 0x85
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f003 fc47 	bl	8005e72 <VL53L0X_WrByte>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	73fb      	strb	r3, [r7, #15]

        Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80025ee:	2204      	movs	r2, #4
 80025f0:	21ff      	movs	r1, #255	; 0xff
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f003 fc3d 	bl	8005e72 <VL53L0X_WrByte>
 80025f8:	4603      	mov	r3, r0
 80025fa:	461a      	mov	r2, r3
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	4313      	orrs	r3, r2
 8002600:	73fb      	strb	r3, [r7, #15]
        Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8002602:	2200      	movs	r2, #0
 8002604:	21cd      	movs	r1, #205	; 0xcd
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f003 fc33 	bl	8005e72 <VL53L0X_WrByte>
 800260c:	4603      	mov	r3, r0
 800260e:	461a      	mov	r2, r3
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	4313      	orrs	r3, r2
 8002614:	73fb      	strb	r3, [r7, #15]
        Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8002616:	2211      	movs	r2, #17
 8002618:	21cc      	movs	r1, #204	; 0xcc
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f003 fc29 	bl	8005e72 <VL53L0X_WrByte>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	4313      	orrs	r3, r2
 8002628:	73fb      	strb	r3, [r7, #15]

        Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800262a:	2207      	movs	r2, #7
 800262c:	21ff      	movs	r1, #255	; 0xff
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f003 fc1f 	bl	8005e72 <VL53L0X_WrByte>
 8002634:	4603      	mov	r3, r0
 8002636:	461a      	mov	r2, r3
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	4313      	orrs	r3, r2
 800263c:	73fb      	strb	r3, [r7, #15]
        Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800263e:	2200      	movs	r2, #0
 8002640:	21be      	movs	r1, #190	; 0xbe
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f003 fc15 	bl	8005e72 <VL53L0X_WrByte>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	4313      	orrs	r3, r2
 8002650:	73fb      	strb	r3, [r7, #15]

        Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8002652:	2206      	movs	r2, #6
 8002654:	21ff      	movs	r1, #255	; 0xff
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f003 fc0b 	bl	8005e72 <VL53L0X_WrByte>
 800265c:	4603      	mov	r3, r0
 800265e:	461a      	mov	r2, r3
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	4313      	orrs	r3, r2
 8002664:	73fb      	strb	r3, [r7, #15]
        Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8002666:	2209      	movs	r2, #9
 8002668:	21cc      	movs	r1, #204	; 0xcc
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f003 fc01 	bl	8005e72 <VL53L0X_WrByte>
 8002670:	4603      	mov	r3, r0
 8002672:	461a      	mov	r2, r3
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	4313      	orrs	r3, r2
 8002678:	73fb      	strb	r3, [r7, #15]

        Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800267a:	2200      	movs	r2, #0
 800267c:	21ff      	movs	r1, #255	; 0xff
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f003 fbf7 	bl	8005e72 <VL53L0X_WrByte>
 8002684:	4603      	mov	r3, r0
 8002686:	461a      	mov	r2, r3
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	4313      	orrs	r3, r2
 800268c:	73fb      	strb	r3, [r7, #15]
        Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800268e:	2201      	movs	r2, #1
 8002690:	21ff      	movs	r1, #255	; 0xff
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f003 fbed 	bl	8005e72 <VL53L0X_WrByte>
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	4313      	orrs	r3, r2
 80026a0:	73fb      	strb	r3, [r7, #15]
        Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f003 fbe3 	bl	8005e72 <VL53L0X_WrByte>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461a      	mov	r2, r3
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	73fb      	strb	r3, [r7, #15]
 80026b6:	e058      	b.n	800276a <VL53L0X_SetGpioConfig+0x23a>
    } else {
        if (Status == VL53L0X_ERROR_NONE) {
 80026b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d121      	bne.n	8002704 <VL53L0X_SetGpioConfig+0x1d4>
            switch (Functionality) {
 80026c0:	787b      	ldrb	r3, [r7, #1]
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d81b      	bhi.n	80026fe <VL53L0X_SetGpioConfig+0x1ce>
 80026c6:	a201      	add	r2, pc, #4	; (adr r2, 80026cc <VL53L0X_SetGpioConfig+0x19c>)
 80026c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026cc:	080026e1 	.word	0x080026e1
 80026d0:	080026e7 	.word	0x080026e7
 80026d4:	080026ed 	.word	0x080026ed
 80026d8:	080026f3 	.word	0x080026f3
 80026dc:	080026f9 	.word	0x080026f9
                case VL53L0X_GPIOFUNCTIONALITY_OFF:
                    data = 0x00;
 80026e0:	2300      	movs	r3, #0
 80026e2:	73bb      	strb	r3, [r7, #14]
                    break;
 80026e4:	e00f      	b.n	8002706 <VL53L0X_SetGpioConfig+0x1d6>

                case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
                    data = 0x01;
 80026e6:	2301      	movs	r3, #1
 80026e8:	73bb      	strb	r3, [r7, #14]
                    break;
 80026ea:	e00c      	b.n	8002706 <VL53L0X_SetGpioConfig+0x1d6>

                case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
                    data = 0x02;
 80026ec:	2302      	movs	r3, #2
 80026ee:	73bb      	strb	r3, [r7, #14]
                    break;
 80026f0:	e009      	b.n	8002706 <VL53L0X_SetGpioConfig+0x1d6>

                case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
                    data = 0x03;
 80026f2:	2303      	movs	r3, #3
 80026f4:	73bb      	strb	r3, [r7, #14]
                    break;
 80026f6:	e006      	b.n	8002706 <VL53L0X_SetGpioConfig+0x1d6>

                case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
                    data = 0x04;
 80026f8:	2304      	movs	r3, #4
 80026fa:	73bb      	strb	r3, [r7, #14]
                    break;
 80026fc:	e003      	b.n	8002706 <VL53L0X_SetGpioConfig+0x1d6>

                default:
                    Status =
 80026fe:	23f5      	movs	r3, #245	; 0xf5
 8002700:	73fb      	strb	r3, [r7, #15]
 8002702:	e000      	b.n	8002706 <VL53L0X_SetGpioConfig+0x1d6>
                        VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
            }
        }
 8002704:	bf00      	nop

        if (Status == VL53L0X_ERROR_NONE) {
 8002706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d107      	bne.n	800271e <VL53L0X_SetGpioConfig+0x1ee>
            Status = VL53L0X_WrByte(Dev,
 800270e:	7bbb      	ldrb	r3, [r7, #14]
 8002710:	461a      	mov	r2, r3
 8002712:	210a      	movs	r1, #10
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f003 fbac 	bl	8005e72 <VL53L0X_WrByte>
 800271a:	4603      	mov	r3, r0
 800271c:	73fb      	strb	r3, [r7, #15]
                                    VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);
        }

        if (Status == VL53L0X_ERROR_NONE) {
 800271e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10f      	bne.n	8002746 <VL53L0X_SetGpioConfig+0x216>
            if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW) {
 8002726:	7e3b      	ldrb	r3, [r7, #24]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d102      	bne.n	8002732 <VL53L0X_SetGpioConfig+0x202>
                data = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	73bb      	strb	r3, [r7, #14]
 8002730:	e001      	b.n	8002736 <VL53L0X_SetGpioConfig+0x206>
            } else {
                data = (uint8_t) (1 << 4);
 8002732:	2310      	movs	r3, #16
 8002734:	73bb      	strb	r3, [r7, #14]
            }

            Status = VL53L0X_UpdateByte(Dev,
 8002736:	7bbb      	ldrb	r3, [r7, #14]
 8002738:	22ef      	movs	r2, #239	; 0xef
 800273a:	2184      	movs	r1, #132	; 0x84
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f003 fbef 	bl	8005f20 <VL53L0X_UpdateByte>
 8002742:	4603      	mov	r3, r0
 8002744:	73fb      	strb	r3, [r7, #15]
                                        VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
        }

        if (Status == VL53L0X_ERROR_NONE) {
 8002746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d103      	bne.n	8002756 <VL53L0X_SetGpioConfig+0x226>
            VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	787a      	ldrb	r2, [r7, #1]
 8002752:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
                                               Pin0GpioFunctionality, Functionality);
        }

        if (Status == VL53L0X_ERROR_NONE) {
 8002756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d105      	bne.n	800276a <VL53L0X_SetGpioConfig+0x23a>
            Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800275e:	2100      	movs	r1, #0
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f83f 	bl	80027e4 <VL53L0X_ClearInterruptMask>
 8002766:	4603      	mov	r3, r0
 8002768:	73fb      	strb	r3, [r7, #15]
        }
    }

    LOG_FUNCTION_END(Status);
    return Status;
 800276a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop

08002778 <VL53L0X_GetInterruptThresholds>:
    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode,
                                             FixPoint1616_t*     pThresholdLow, FixPoint1616_t*     pThresholdHigh) {
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	460b      	mov	r3, r1
 8002786:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002788:	2300      	movs	r3, #0
 800278a:	75fb      	strb	r3, [r7, #23]
    uint16_t Threshold16;
    LOG_FUNCTION_START("");

    /* no dependency on DeviceMode for Ewok */

    Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	461a      	mov	r2, r3
 8002792:	210e      	movs	r1, #14
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f003 fc0e 	bl	8005fb6 <VL53L0X_RdWord>
 800279a:	4603      	mov	r3, r0
 800279c:	75fb      	strb	r3, [r7, #23]

    /* Need to multiply by 2 because the FW will apply a x2 */
    *pThresholdLow = (FixPoint1616_t) ((0x00fff & Threshold16) << 17);
 800279e:	8abb      	ldrh	r3, [r7, #20]
 80027a0:	045b      	lsls	r3, r3, #17
 80027a2:	461a      	mov	r2, r3
 80027a4:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <VL53L0X_GetInterruptThresholds+0x68>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6013      	str	r3, [r2, #0]

    if (Status == VL53L0X_ERROR_NONE) {
 80027ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10f      	bne.n	80027d4 <VL53L0X_GetInterruptThresholds+0x5c>
        Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	461a      	mov	r2, r3
 80027ba:	210c      	movs	r1, #12
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f003 fbfa 	bl	8005fb6 <VL53L0X_RdWord>
 80027c2:	4603      	mov	r3, r0
 80027c4:	75fb      	strb	r3, [r7, #23]
                                &Threshold16);

        /* Need to multiply by 2 because the FW will apply a x2 */
        *pThresholdHigh =
            (FixPoint1616_t) ((0x00fff & Threshold16) << 17);
 80027c6:	8abb      	ldrh	r3, [r7, #20]
 80027c8:	045b      	lsls	r3, r3, #17
 80027ca:	461a      	mov	r2, r3
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <VL53L0X_GetInterruptThresholds+0x68>)
 80027ce:	4013      	ands	r3, r2
        *pThresholdHigh =
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	6013      	str	r3, [r2, #0]
    }

    LOG_FUNCTION_END(Status);
    return Status;
 80027d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	1ffe0000 	.word	0x1ffe0000

080027e4 <VL53L0X_ClearInterruptMask>:
    LOG_FUNCTION_END(Status);
    return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	73fb      	strb	r3, [r7, #15]
    uint8_t LoopCount;
    uint8_t Byte;
    LOG_FUNCTION_START("");

    /* clear bit 0 range interrupt, bit 1 error interrupt */
    LoopCount = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73bb      	strb	r3, [r7, #14]

    do {
        Status = VL53L0X_WrByte(Dev,
 80027f6:	2201      	movs	r2, #1
 80027f8:	210b      	movs	r1, #11
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f003 fb39 	bl	8005e72 <VL53L0X_WrByte>
 8002800:	4603      	mov	r3, r0
 8002802:	73fb      	strb	r3, [r7, #15]
                                VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
        Status |= VL53L0X_WrByte(Dev,
 8002804:	2200      	movs	r2, #0
 8002806:	210b      	movs	r1, #11
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f003 fb32 	bl	8005e72 <VL53L0X_WrByte>
 800280e:	4603      	mov	r3, r0
 8002810:	461a      	mov	r2, r3
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	4313      	orrs	r3, r2
 8002816:	73fb      	strb	r3, [r7, #15]
                                 VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
        Status |= VL53L0X_RdByte(Dev,
 8002818:	f107 030d 	add.w	r3, r7, #13
 800281c:	461a      	mov	r2, r3
 800281e:	2113      	movs	r1, #19
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f003 fbaf 	bl	8005f84 <VL53L0X_RdByte>
 8002826:	4603      	mov	r3, r0
 8002828:	461a      	mov	r2, r3
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	4313      	orrs	r3, r2
 800282e:	73fb      	strb	r3, [r7, #15]
                                 VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
        LoopCount++;
 8002830:	7bbb      	ldrb	r3, [r7, #14]
 8002832:	3301      	adds	r3, #1
 8002834:	73bb      	strb	r3, [r7, #14]
    } while (((Byte & 0x07) != 0x00) &&
 8002836:	7b7b      	ldrb	r3, [r7, #13]
 8002838:	f003 0307 	and.w	r3, r3, #7
             (LoopCount < 3) &&
             (Status == VL53L0X_ERROR_NONE));
 800283c:	2b00      	cmp	r3, #0
 800283e:	d006      	beq.n	800284e <VL53L0X_ClearInterruptMask+0x6a>
    } while (((Byte & 0x07) != 0x00) &&
 8002840:	7bbb      	ldrb	r3, [r7, #14]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d803      	bhi.n	800284e <VL53L0X_ClearInterruptMask+0x6a>
             (LoopCount < 3) &&
 8002846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0d3      	beq.n	80027f6 <VL53L0X_ClearInterruptMask+0x12>

    if (LoopCount >= 3) {
 800284e:	7bbb      	ldrb	r3, [r7, #14]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <VL53L0X_ClearInterruptMask+0x74>
        Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8002854:	23f4      	movs	r3, #244	; 0xf4
 8002856:	73fb      	strb	r3, [r7, #15]
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8002858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev, uint32_t*   pInterruptMaskStatus) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]
    uint8_t Byte;
    LOG_FUNCTION_START("");

    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8002872:	f107 030e 	add.w	r3, r7, #14
 8002876:	461a      	mov	r2, r3
 8002878:	2113      	movs	r1, #19
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f003 fb82 	bl	8005f84 <VL53L0X_RdByte>
 8002880:	4603      	mov	r3, r0
 8002882:	73fb      	strb	r3, [r7, #15]
    *pInterruptMaskStatus = Byte & 0x07;
 8002884:	7bbb      	ldrb	r3, [r7, #14]
 8002886:	f003 0207 	and.w	r2, r3, #7
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	601a      	str	r2, [r3, #0]

    if (Byte & 0x18) {
 800288e:	7bbb      	ldrb	r3, [r7, #14]
 8002890:	f003 0318 	and.w	r3, r3, #24
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <VL53L0X_GetInterruptMaskStatus+0x38>
        Status = VL53L0X_ERROR_RANGE_ERROR;
 8002898:	23fa      	movs	r3, #250	; 0xfa
 800289a:	73fb      	strb	r3, [r7, #15]
    }

    LOG_FUNCTION_END(Status);
    return Status;
 800289c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <VL53L0X_SetReferenceSpads>:

/*****************************************************************************
 * Internal functions
 *****************************************************************************/

VL53L0X_Error VL53L0X_SetReferenceSpads(VL53L0X_DEV Dev, uint32_t count, uint8_t isApertureSpads) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	4613      	mov	r3, r2
 80028b4:	71fb      	strb	r3, [r7, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	75fb      	strb	r3, [r7, #23]
    LOG_FUNCTION_START("");

    Status = VL53L0X_set_reference_spads(Dev, count, isApertureSpads);
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	461a      	mov	r2, r3
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 fc25 	bl	8003110 <VL53L0X_set_reference_spads>
 80028c6:	4603      	mov	r3, r0
 80028c8:	75fb      	strb	r3, [r7, #23]

    LOG_FUNCTION_END(Status);

    return Status;
 80028ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <VL53L0X_PerformRefSpadManagement>:
    LOG_FUNCTION_END(Status);

    return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev, uint32_t*   refSpadCount, uint8_t*    isApertureSpads) {
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	75fb      	strb	r3, [r7, #23]
    LOG_FUNCTION_START("");

    Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fa04 	bl	8002cf8 <VL53L0X_perform_ref_spad_management>
 80028f0:	4603      	mov	r3, r0
 80028f2:	75fb      	strb	r3, [r7, #23]
                                                 isApertureSpads);

    LOG_FUNCTION_END(Status);

    return Status;
 80028f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <VL53L0X_get_offset_calibration_data_micro_meter>:
    LOG_FUNCTION_END(Status);
    return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
                                                              int32_t*    pOffsetCalibrationDataMicroMeter) {
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800290a:	2300      	movs	r3, #0
 800290c:	73fb      	strb	r3, [r7, #15]
    uint16_t RangeOffsetRegister;
    int16_t cMaxOffset = 2047;
 800290e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002912:	81bb      	strh	r3, [r7, #12]
    int16_t cOffsetRange = 4096;
 8002914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002918:	817b      	strh	r3, [r7, #10]

    /* Note that offset has 10.2 format */

    Status = VL53L0X_RdWord(Dev,
 800291a:	f107 0308 	add.w	r3, r7, #8
 800291e:	461a      	mov	r2, r3
 8002920:	2128      	movs	r1, #40	; 0x28
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f003 fb47 	bl	8005fb6 <VL53L0X_RdWord>
 8002928:	4603      	mov	r3, r0
 800292a:	73fb      	strb	r3, [r7, #15]
                            VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
                            &RangeOffsetRegister);

    if (Status == VL53L0X_ERROR_NONE) {
 800292c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d11e      	bne.n	8002972 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
        RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8002934:	893b      	ldrh	r3, [r7, #8]
 8002936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293a:	b29b      	uxth	r3, r3
 800293c:	813b      	strh	r3, [r7, #8]

        /* Apply 12 bit 2's compliment conversion */
        if (RangeOffsetRegister > cMaxOffset) {
 800293e:	893b      	ldrh	r3, [r7, #8]
 8002940:	461a      	mov	r2, r3
 8002942:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002946:	429a      	cmp	r2, r3
 8002948:	dd0b      	ble.n	8002962 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
            *pOffsetCalibrationDataMicroMeter =
                (int16_t) (RangeOffsetRegister - cOffsetRange) *
 800294a:	893a      	ldrh	r2, [r7, #8]
 800294c:	897b      	ldrh	r3, [r7, #10]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	b29b      	uxth	r3, r3
 8002952:	b21b      	sxth	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	23fa      	movs	r3, #250	; 0xfa
 8002958:	fb03 f202 	mul.w	r2, r3, r2
            *pOffsetCalibrationDataMicroMeter =
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	e007      	b.n	8002972 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
                250;
        } else {
            *pOffsetCalibrationDataMicroMeter =
                (int16_t) RangeOffsetRegister * 250;
 8002962:	893b      	ldrh	r3, [r7, #8]
 8002964:	b21b      	sxth	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	23fa      	movs	r3, #250	; 0xfa
 800296a:	fb03 f202 	mul.w	r2, r3, r2
            *pOffsetCalibrationDataMicroMeter =
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	601a      	str	r2, [r3, #0]
        }
    }

    return Status;
 8002972:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <get_next_good_spad>:
    }

    return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size, uint32_t curr, int32_t* next) {
 800297e:	b480      	push	{r7}
 8002980:	b08b      	sub	sp, #44	; 0x2c
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	603b      	str	r3, [r7, #0]
    uint32_t startIndex;
    uint32_t fineOffset;
    uint32_t cSpadsPerByte = 8;
 800298c:	2308      	movs	r3, #8
 800298e:	61bb      	str	r3, [r7, #24]
    uint32_t coarseIndex;
    uint32_t fineIndex;
    uint8_t dataByte;
    uint8_t success = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	77bb      	strb	r3, [r7, #30]
     *
     * The coarse index is the byte index of the array and the fine index is
     * the index of the bit within each byte.
     */

    *next = -1;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	f04f 32ff 	mov.w	r2, #4294967295
 800299a:	601a      	str	r2, [r3, #0]

    startIndex = curr / cSpadsPerByte;
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	617b      	str	r3, [r7, #20]
    fineOffset = curr % cSpadsPerByte;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80029ae:	69b9      	ldr	r1, [r7, #24]
 80029b0:	fb01 f202 	mul.w	r2, r1, r2
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	613b      	str	r3, [r7, #16]

    for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
 80029bc:	e030      	b.n	8002a20 <get_next_good_spad+0xa2>
         coarseIndex++) {
        fineIndex = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	623b      	str	r3, [r7, #32]
        dataByte = goodSpadArray[coarseIndex];
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	4413      	add	r3, r2
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	77fb      	strb	r3, [r7, #31]

        if (coarseIndex == startIndex) {
 80029cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d11e      	bne.n	8002a12 <get_next_good_spad+0x94>
            /* locate the bit position of the provided current
             * spad bit before iterating */
            dataByte >>= fineOffset;
 80029d4:	7ffa      	ldrb	r2, [r7, #31]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	fa42 f303 	asr.w	r3, r2, r3
 80029dc:	77fb      	strb	r3, [r7, #31]
            fineIndex = fineOffset;
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	623b      	str	r3, [r7, #32]
        }

        while (fineIndex < cSpadsPerByte) {
 80029e2:	e016      	b.n	8002a12 <get_next_good_spad+0x94>
            if ((dataByte & 0x1) == 1) {
 80029e4:	7ffb      	ldrb	r3, [r7, #31]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <get_next_good_spad+0x88>
                success = 1;
 80029ee:	2301      	movs	r3, #1
 80029f0:	77bb      	strb	r3, [r7, #30]
                *next = coarseIndex * cSpadsPerByte + fineIndex;
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	fb02 f203 	mul.w	r2, r2, r3
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	4413      	add	r3, r2
 80029fe:	461a      	mov	r2, r3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	601a      	str	r2, [r3, #0]
                break;
 8002a04:	e009      	b.n	8002a1a <get_next_good_spad+0x9c>
            }

            dataByte >>= 1;
 8002a06:	7ffb      	ldrb	r3, [r7, #31]
 8002a08:	085b      	lsrs	r3, r3, #1
 8002a0a:	77fb      	strb	r3, [r7, #31]
            fineIndex++;
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	623b      	str	r3, [r7, #32]
        while (fineIndex < cSpadsPerByte) {
 8002a12:	6a3a      	ldr	r2, [r7, #32]
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d3e4      	bcc.n	80029e4 <get_next_good_spad+0x66>
         coarseIndex++) {
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
    for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8002a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d202      	bcs.n	8002a2e <get_next_good_spad+0xb0>
 8002a28:	7fbb      	ldrb	r3, [r7, #30]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0c7      	beq.n	80029be <get_next_good_spad+0x40>
        }
    }
}
 8002a2e:	bf00      	nop
 8002a30:	372c      	adds	r7, #44	; 0x2c
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
	...

08002a3c <is_aperture>:

uint8_t is_aperture(uint32_t spadIndex) {
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
    /*
     * This function reports if a given spad index is an aperture SPAD by
     * deriving the quadrant.
     */
    uint32_t quadrant;
    uint8_t isAperture = 1;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
    quadrant = spadIndex >> 6;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	099b      	lsrs	r3, r3, #6
 8002a4c:	60bb      	str	r3, [r7, #8]

    if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0) {
 8002a4e:	4a07      	ldr	r2, [pc, #28]	; (8002a6c <is_aperture+0x30>)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <is_aperture+0x22>
        isAperture = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	73fb      	strb	r3, [r7, #15]
    }

    return isAperture;
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	200002ac 	.word	0x200002ac

08002a70 <enable_spad_bit>:

VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size, uint32_t spadIndex) {
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	; 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	77fb      	strb	r3, [r7, #31]
    uint32_t cSpadsPerByte = 8;
 8002a80:	2308      	movs	r3, #8
 8002a82:	61bb      	str	r3, [r7, #24]
    uint32_t coarseIndex;
    uint32_t fineIndex;

    coarseIndex = spadIndex / cSpadsPerByte;
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]
    fineIndex = spadIndex % cSpadsPerByte;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a96:	69b9      	ldr	r1, [r7, #24]
 8002a98:	fb01 f202 	mul.w	r2, r1, r2
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]

    if (coarseIndex >= size) {
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d302      	bcc.n	8002aae <enable_spad_bit+0x3e>
        status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002aa8:	23ce      	movs	r3, #206	; 0xce
 8002aaa:	77fb      	strb	r3, [r7, #31]
 8002aac:	e010      	b.n	8002ad0 <enable_spad_bit+0x60>
    } else {
        spadArray[coarseIndex] |= (1 << fineIndex);
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	b25a      	sxtb	r2, r3
 8002ab8:	2101      	movs	r1, #1
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	b25b      	sxtb	r3, r3
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	b259      	sxtb	r1, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	4413      	add	r3, r2
 8002acc:	b2ca      	uxtb	r2, r1
 8002ace:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8002ad0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3724      	adds	r7, #36	; 0x24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <set_ref_spad_map>:
    }

    return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t*    refSpadArray) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8002aea:	2306      	movs	r3, #6
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	21b0      	movs	r1, #176	; 0xb0
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f003 f957 	bl	8005da4 <VL53L0X_WriteMulti>
 8002af6:	4603      	mov	r3, r0
 8002af8:	73fb      	strb	r3, [r7, #15]
                                              VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
                                              refSpadArray, 6);
    return status;
 8002afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t*    refSpadArray) {
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8002b10:	2306      	movs	r3, #6
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	21b0      	movs	r1, #176	; 0xb0
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f003 f97c 	bl	8005e14 <VL53L0X_ReadMulti>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	73fb      	strb	r3, [r7, #15]
                                             VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
                                             refSpadArray, 6);
    return status;
 8002b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <enable_ref_spads>:

VL53L0X_Error enable_ref_spads(VL53L0X_DEV Dev, uint8_t apertureSpads, uint8_t goodSpadArray[], uint8_t spadArray[],
                               uint32_t size, uint32_t start, uint32_t offset, uint32_t spadCount,
                               uint32_t*   lastSpad) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08c      	sub	sp, #48	; 0x30
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t index;
    uint32_t i;
    int32_t nextGoodSpad = offset;
 8002b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b44:	61fb      	str	r3, [r7, #28]
     *
     * This function applies to only aperture or only non-aperture spads.
     * Checks are performed to ensure this.
     */

    currentSpad = offset;
 8002b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b48:	623b      	str	r3, [r7, #32]

    for (index = 0; index < spadCount; index++) {
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b4e:	e02b      	b.n	8002ba8 <enable_ref_spads+0x7c>
        get_next_good_spad(goodSpadArray, size, currentSpad,
 8002b50:	f107 031c 	add.w	r3, r7, #28
 8002b54:	6a3a      	ldr	r2, [r7, #32]
 8002b56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff ff10 	bl	800297e <get_next_good_spad>
                           &nextGoodSpad);

        if (nextGoodSpad == -1) {
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b64:	d103      	bne.n	8002b6e <enable_ref_spads+0x42>
            status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002b66:	23ce      	movs	r3, #206	; 0xce
 8002b68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8002b6c:	e020      	b.n	8002bb0 <enable_ref_spads+0x84>
        }

        /* Confirm that the next good SPAD is non-aperture */
        if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	461a      	mov	r2, r3
 8002b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b74:	4413      	add	r3, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff ff60 	bl	8002a3c <is_aperture>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	461a      	mov	r2, r3
 8002b80:	7afb      	ldrb	r3, [r7, #11]
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d003      	beq.n	8002b8e <enable_ref_spads+0x62>
            /* if we can't get the required number of good aperture
             * spads from the current quadrant then this is an error
             */
            status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002b86:	23ce      	movs	r3, #206	; 0xce
 8002b88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8002b8c:	e010      	b.n	8002bb0 <enable_ref_spads+0x84>
        }

        currentSpad = (uint32_t) nextGoodSpad;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	623b      	str	r3, [r7, #32]
        enable_spad_bit(spadArray, size, currentSpad);
 8002b92:	6a3a      	ldr	r2, [r7, #32]
 8002b94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b96:	6838      	ldr	r0, [r7, #0]
 8002b98:	f7ff ff6a 	bl	8002a70 <enable_spad_bit>
        currentSpad++;
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	623b      	str	r3, [r7, #32]
    for (index = 0; index < spadCount; index++) {
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d3cf      	bcc.n	8002b50 <enable_ref_spads+0x24>
    }

    *lastSpad = currentSpad;
 8002bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb2:	6a3a      	ldr	r2, [r7, #32]
 8002bb4:	601a      	str	r2, [r3, #0]

    if (status == VL53L0X_ERROR_NONE) {
 8002bb6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <enable_ref_spads+0xa0>
        status = set_ref_spad_map(Dev, spadArray);
 8002bbe:	6839      	ldr	r1, [r7, #0]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f7ff ff8d 	bl	8002ae0 <set_ref_spad_map>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (status == VL53L0X_ERROR_NONE) {
 8002bcc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d121      	bne.n	8002c18 <enable_ref_spads+0xec>
        status = get_ref_spad_map(Dev, checkSpadArray);
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	4619      	mov	r1, r3
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f7ff ff93 	bl	8002b06 <get_ref_spad_map>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        i = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Compare spad maps. If not equal report error. */
        while (i < size) {
 8002bea:	e011      	b.n	8002c10 <enable_ref_spads+0xe4>
            if (spadArray[i] != checkSpadArray[i]) {
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	4413      	add	r3, r2
 8002bf2:	781a      	ldrb	r2, [r3, #0]
 8002bf4:	f107 0114 	add.w	r1, r7, #20
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	440b      	add	r3, r1
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d003      	beq.n	8002c0a <enable_ref_spads+0xde>
                status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002c02:	23ce      	movs	r3, #206	; 0xce
 8002c04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                break;
 8002c08:	e006      	b.n	8002c18 <enable_ref_spads+0xec>
            }

            i++;
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
        while (i < size) {
 8002c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d3e9      	bcc.n	8002bec <enable_ref_spads+0xc0>
        }
    }

    return status;
 8002c18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3730      	adds	r7, #48	; 0x30
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <perform_ref_signal_measurement>:

VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev, uint16_t*   refSignalRate) {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	; 0x28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    VL53L0X_RangingMeasurementData_t rangingMeasurementData;

    uint8_t SequenceConfig = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* store the value of the sequence config,
     * this will be reset before the end of the function
     */

    SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002c40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /*
     * This function performs a reference signal rate measurement.
     */
    if (status == VL53L0X_ERROR_NONE) {
 8002c44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d107      	bne.n	8002c5c <perform_ref_signal_measurement+0x38>
        status = VL53L0X_WrByte(Dev,
 8002c4c:	22c0      	movs	r2, #192	; 0xc0
 8002c4e:	2101      	movs	r1, #1
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f003 f90e 	bl	8005e72 <VL53L0X_WrByte>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);
    }

    if (status == VL53L0X_ERROR_NONE) {
 8002c5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d108      	bne.n	8002c76 <perform_ref_signal_measurement+0x52>
        status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8002c64:	f107 0308 	add.w	r3, r7, #8
 8002c68:	4619      	mov	r1, r3
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff fc30 	bl	80024d0 <VL53L0X_PerformSingleRangingMeasurement>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                         &rangingMeasurementData);
    }

    if (status == VL53L0X_ERROR_NONE) {
 8002c76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d107      	bne.n	8002c8e <perform_ref_signal_measurement+0x6a>
        status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002c7e:	2201      	movs	r2, #1
 8002c80:	21ff      	movs	r1, #255	; 0xff
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f003 f8f5 	bl	8005e72 <VL53L0X_WrByte>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if (status == VL53L0X_ERROR_NONE) {
 8002c8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d107      	bne.n	8002ca6 <perform_ref_signal_measurement+0x82>
        status = VL53L0X_RdWord(Dev,
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	21b6      	movs	r1, #182	; 0xb6
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f003 f98b 	bl	8005fb6 <VL53L0X_RdWord>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
                                refSignalRate);
    }

    if (status == VL53L0X_ERROR_NONE) {
 8002ca6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d107      	bne.n	8002cbe <perform_ref_signal_measurement+0x9a>
        status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	21ff      	movs	r1, #255	; 0xff
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f003 f8dd 	bl	8005e72 <VL53L0X_WrByte>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if (status == VL53L0X_ERROR_NONE) {
 8002cbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d112      	bne.n	8002cec <perform_ref_signal_measurement+0xc8>
        /* restore the previous Sequence Config */
        status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002cc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002cca:	461a      	mov	r2, r3
 8002ccc:	2101      	movs	r1, #1
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f003 f8cf 	bl	8005e72 <VL53L0X_WrByte>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                SequenceConfig);

        if (status == VL53L0X_ERROR_NONE) {
 8002cda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d104      	bne.n	8002cec <perform_ref_signal_measurement+0xc8>
            PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002ce8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
        }
    }

    return status;
 8002cec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3728      	adds	r7, #40	; 0x28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev, uint32_t*   refSpadCount,
                                                  uint8_t*    isApertureSpads) {
 8002cf8:	b590      	push	{r4, r7, lr}
 8002cfa:	b09d      	sub	sp, #116	; 0x74
 8002cfc:	af06      	add	r7, sp, #24
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    uint8_t lastSpadArray[6];
    uint8_t startSelect = 0xB4;
 8002d0a:	23b4      	movs	r3, #180	; 0xb4
 8002d0c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    uint32_t minimumSpadCount = 3;
 8002d10:	2303      	movs	r3, #3
 8002d12:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t maxSpadCount = 44;
 8002d14:	232c      	movs	r3, #44	; 0x2c
 8002d16:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t currentSpadIndex = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	653b      	str	r3, [r7, #80]	; 0x50
    uint32_t lastSpadIndex = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61bb      	str	r3, [r7, #24]
    int32_t nextGoodSpad = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
    uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8002d24:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002d28:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t peakSignalRateRef;
    uint32_t needAptSpads = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t index = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t spadArraySize = 6;
 8002d32:	2306      	movs	r3, #6
 8002d34:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t signalRateDiff = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t lastSignalRateDiff = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	647b      	str	r3, [r7, #68]	; 0x44
    uint8_t complete = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    uint8_t VhvSettings = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	747b      	strb	r3, [r7, #17]
    uint8_t PhaseCal = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	743b      	strb	r3, [r7, #16]
    uint32_t refSpadCount_int = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint8_t isApertureSpads_int = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
     * The start point is currently fixed to 180, which lies towards the end
     * of the non-aperture quadrant and runs in to the adjacent aperture
     * quadrant.
     */

    targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8002d5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
     * This is a short term implementation. The good spad map will be
     * provided as an input.
     * Note that there are 6 bytes. Only the first 44 bits will be used to
     * represent spads.
     */
    for (index = 0; index < spadArraySize; index++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d62:	e009      	b.n	8002d78 <VL53L0X_perform_ref_spad_management+0x80>
        Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
    for (index = 0; index < spadArraySize; index++)
 8002d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d74:	3301      	adds	r3, #1
 8002d76:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d3f1      	bcc.n	8002d64 <VL53L0X_perform_ref_spad_management+0x6c>

    Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002d80:	2201      	movs	r2, #1
 8002d82:	21ff      	movs	r1, #255	; 0xff
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f003 f874 	bl	8005e72 <VL53L0X_WrByte>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    if (Status == VL53L0X_ERROR_NONE) {
 8002d90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d107      	bne.n	8002da8 <VL53L0X_perform_ref_spad_management+0xb0>
        Status = VL53L0X_WrByte(Dev,
 8002d98:	2200      	movs	r2, #0
 8002d9a:	214f      	movs	r1, #79	; 0x4f
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f003 f868 	bl	8005e72 <VL53L0X_WrByte>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8002da8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d107      	bne.n	8002dc0 <VL53L0X_perform_ref_spad_management+0xc8>
        Status = VL53L0X_WrByte(Dev,
 8002db0:	222c      	movs	r2, #44	; 0x2c
 8002db2:	214e      	movs	r1, #78	; 0x4e
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f003 f85c 	bl	8005e72 <VL53L0X_WrByte>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8002dc0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d107      	bne.n	8002dd8 <VL53L0X_perform_ref_spad_management+0xe0>
        Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002dc8:	2200      	movs	r2, #0
 8002dca:	21ff      	movs	r1, #255	; 0xff
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f003 f850 	bl	8005e72 <VL53L0X_WrByte>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8002dd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d109      	bne.n	8002df4 <VL53L0X_perform_ref_spad_management+0xfc>
        Status = VL53L0X_WrByte(Dev,
 8002de0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002de4:	461a      	mov	r2, r3
 8002de6:	21b6      	movs	r1, #182	; 0xb6
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f003 f842 	bl	8005e72 <VL53L0X_WrByte>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
                                startSelect);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8002df4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d107      	bne.n	8002e0c <VL53L0X_perform_ref_spad_management+0x114>
        Status = VL53L0X_WrByte(Dev,
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2180      	movs	r1, #128	; 0x80
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f003 f836 	bl	8005e72 <VL53L0X_WrByte>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);
    }

    /* Perform ref calibration */
    if (Status == VL53L0X_ERROR_NONE) {
 8002e0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10a      	bne.n	8002e2a <VL53L0X_perform_ref_spad_management+0x132>
        Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8002e14:	f107 0210 	add.w	r2, r7, #16
 8002e18:	f107 0111 	add.w	r1, r7, #17
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 fbbb 	bl	800359a <VL53L0X_perform_ref_calibration>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                                 &PhaseCal, 0);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8002e2a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d121      	bne.n	8002e76 <VL53L0X_perform_ref_spad_management+0x17e>
        /* Enable Minimum NON-APERTURE Spads */
        currentSpadIndex = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	653b      	str	r3, [r7, #80]	; 0x50
        lastSpadIndex = currentSpadIndex;
 8002e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e38:	61bb      	str	r3, [r7, #24]
        needAptSpads = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
        Status = enable_ref_spads(Dev,
 8002e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e40:	b2d9      	uxtb	r1, r3
                                  needAptSpads,
                                  Dev->Data.SpadData.RefGoodSpadMap,
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f503 7095 	add.w	r0, r3, #298	; 0x12a
                                  Dev->Data.SpadData.RefSpadEnables,
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f503 7492 	add.w	r4, r3, #292	; 0x124
        Status = enable_ref_spads(Dev,
 8002e4e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002e52:	f107 0218 	add.w	r2, r7, #24
 8002e56:	9204      	str	r2, [sp, #16]
 8002e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e5a:	9203      	str	r2, [sp, #12]
 8002e5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e5e:	9202      	str	r2, [sp, #8]
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	4623      	mov	r3, r4
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f7ff fe5e 	bl	8002b2c <enable_ref_spads>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                  currentSpadIndex,
                                  minimumSpadCount,
                                  &lastSpadIndex);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8002e76:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d174      	bne.n	8002f68 <VL53L0X_perform_ref_spad_management+0x270>
        currentSpadIndex = lastSpadIndex;
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	653b      	str	r3, [r7, #80]	; 0x50

        Status = perform_ref_signal_measurement(Dev,
 8002e82:	f107 0312 	add.w	r3, r7, #18
 8002e86:	4619      	mov	r1, r3
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f7ff fecb 	bl	8002c24 <perform_ref_signal_measurement>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                                &peakSignalRateRef);

        if ((Status == VL53L0X_ERROR_NONE) &&
 8002e94:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d161      	bne.n	8002f60 <VL53L0X_perform_ref_spad_management+0x268>
            (peakSignalRateRef > targetRefRate)) {
 8002e9c:	8a7b      	ldrh	r3, [r7, #18]
        if ((Status == VL53L0X_ERROR_NONE) &&
 8002e9e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d25d      	bcs.n	8002f60 <VL53L0X_perform_ref_spad_management+0x268>
            /* Signal rate measurement too high,
             * switch to APERTURE SPADs */

            for (index = 0; index < spadArraySize; index++)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ea8:	e009      	b.n	8002ebe <VL53L0X_perform_ref_spad_management+0x1c6>
                Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
            for (index = 0; index < spadArraySize; index++)
 8002eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eba:	3301      	adds	r3, #1
 8002ebc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ebe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d3f1      	bcc.n	8002eaa <VL53L0X_perform_ref_spad_management+0x1b2>

            /* Increment to the first APERTURE spad */
            while ((is_aperture(startSelect + currentSpadIndex) ==
 8002ec6:	e002      	b.n	8002ece <VL53L0X_perform_ref_spad_management+0x1d6>
                    0) && (currentSpadIndex < maxSpadCount)) {
                currentSpadIndex++;
 8002ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eca:	3301      	adds	r3, #1
 8002ecc:	653b      	str	r3, [r7, #80]	; 0x50
            while ((is_aperture(startSelect + currentSpadIndex) ==
 8002ece:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8002ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed4:	4413      	add	r3, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fdb0 	bl	8002a3c <is_aperture>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d103      	bne.n	8002eea <VL53L0X_perform_ref_spad_management+0x1f2>
                    0) && (currentSpadIndex < maxSpadCount)) {
 8002ee2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d3ee      	bcc.n	8002ec8 <VL53L0X_perform_ref_spad_management+0x1d0>
            }

            needAptSpads = 1;
 8002eea:	2301      	movs	r3, #1
 8002eec:	64fb      	str	r3, [r7, #76]	; 0x4c

            Status = enable_ref_spads(Dev,
 8002eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef0:	b2d9      	uxtb	r1, r3
                                      needAptSpads,
                                      Dev->Data.SpadData.RefGoodSpadMap,
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
                                      Dev->Data.SpadData.RefSpadEnables,
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f503 7492 	add.w	r4, r3, #292	; 0x124
            Status = enable_ref_spads(Dev,
 8002efe:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002f02:	f107 0218 	add.w	r2, r7, #24
 8002f06:	9204      	str	r2, [sp, #16]
 8002f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f0a:	9203      	str	r2, [sp, #12]
 8002f0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f0e:	9202      	str	r2, [sp, #8]
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	4623      	mov	r3, r4
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7ff fe06 	bl	8002b2c <enable_ref_spads>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                      startSelect,
                                      currentSpadIndex,
                                      minimumSpadCount,
                                      &lastSpadIndex);

            if (Status == VL53L0X_ERROR_NONE) {
 8002f26:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d11b      	bne.n	8002f66 <VL53L0X_perform_ref_spad_management+0x26e>
                currentSpadIndex = lastSpadIndex;
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	653b      	str	r3, [r7, #80]	; 0x50
                Status = perform_ref_signal_measurement(Dev,
 8002f32:	f107 0312 	add.w	r3, r7, #18
 8002f36:	4619      	mov	r1, r3
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7ff fe73 	bl	8002c24 <perform_ref_signal_measurement>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                                        &peakSignalRateRef);

                if ((Status == VL53L0X_ERROR_NONE) &&
 8002f44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10c      	bne.n	8002f66 <VL53L0X_perform_ref_spad_management+0x26e>
                    (peakSignalRateRef > targetRefRate)) {
 8002f4c:	8a7b      	ldrh	r3, [r7, #18]
                if ((Status == VL53L0X_ERROR_NONE) &&
 8002f4e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d208      	bcs.n	8002f66 <VL53L0X_perform_ref_spad_management+0x26e>
                     * setting the minimum number of
                     * APERTURE spads. Can do no more
                     * therefore set the min number of
                     * aperture spads as the result.
                     */
                    isApertureSpads_int = 1;
 8002f54:	2301      	movs	r3, #1
 8002f56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    refSpadCount_int = minimumSpadCount;
 8002f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
            if (Status == VL53L0X_ERROR_NONE) {
 8002f5e:	e002      	b.n	8002f66 <VL53L0X_perform_ref_spad_management+0x26e>
                }
            }
        } else {
            needAptSpads = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f64:	e000      	b.n	8002f68 <VL53L0X_perform_ref_spad_management+0x270>
            if (Status == VL53L0X_ERROR_NONE) {
 8002f66:	bf00      	nop
        }
    }

    if ((Status == VL53L0X_ERROR_NONE) &&
 8002f68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f040 80af 	bne.w	80030d0 <VL53L0X_perform_ref_spad_management+0x3d8>
        (peakSignalRateRef < targetRefRate)) {
 8002f72:	8a7b      	ldrh	r3, [r7, #18]
    if ((Status == VL53L0X_ERROR_NONE) &&
 8002f74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002f76:	429a      	cmp	r2, r3
 8002f78:	f240 80aa 	bls.w	80030d0 <VL53L0X_perform_ref_spad_management+0x3d8>
        /* At this point, the minimum number of either aperture
         * or non-aperture spads have been set. Proceed to add
         * spads and perform measurements until the target
         * reference is reached.
         */
        isApertureSpads_int = needAptSpads;
 8002f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        refSpadCount_int = minimumSpadCount;
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	63fb      	str	r3, [r7, #60]	; 0x3c

        memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8002f8c:	f107 031c 	add.w	r3, r7, #28
 8002f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f92:	4618      	mov	r0, r3
 8002f94:	f005 ff80 	bl	8008e98 <memcpy>
               spadArraySize);
        lastSignalRateDiff = abs(peakSignalRateRef -
 8002f98:	8a7b      	ldrh	r3, [r7, #18]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bfb8      	it	lt
 8002fa4:	425b      	neglt	r3, r3
 8002fa6:	647b      	str	r3, [r7, #68]	; 0x44
                                 targetRefRate);
        complete = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

        while (!complete) {
 8002fae:	e086      	b.n	80030be <VL53L0X_perform_ref_spad_management+0x3c6>
            get_next_good_spad(
                Dev->Data.SpadData.RefGoodSpadMap,
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f503 7095 	add.w	r0, r3, #298	; 0x12a
            get_next_good_spad(
 8002fb6:	f107 0314 	add.w	r3, r7, #20
 8002fba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fbe:	f7ff fcde 	bl	800297e <get_next_good_spad>
                spadArraySize, currentSpadIndex,
                &nextGoodSpad);

            if (nextGoodSpad == -1) {
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc8:	d103      	bne.n	8002fd2 <VL53L0X_perform_ref_spad_management+0x2da>
                Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002fca:	23ce      	movs	r3, #206	; 0xce
 8002fcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                break;
 8002fd0:	e07e      	b.n	80030d0 <VL53L0X_perform_ref_spad_management+0x3d8>
            }

            /* Cannot combine Aperture and Non-Aperture spads, so
             * ensure the current spad is of the correct type.
             */
            if (is_aperture((uint32_t) startSelect + nextGoodSpad) !=
 8002fd2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4413      	add	r3, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fd2e 	bl	8002a3c <is_aperture>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d003      	beq.n	8002ff2 <VL53L0X_perform_ref_spad_management+0x2fa>
                needAptSpads) {
                /* At this point we have enabled the maximum
                 * number of Aperture spads.
                 */
                complete = 1;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                break;
 8002ff0:	e06e      	b.n	80030d0 <VL53L0X_perform_ref_spad_management+0x3d8>
            }

            (refSpadCount_int)++;
 8002ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	63fb      	str	r3, [r7, #60]	; 0x3c

            currentSpadIndex = nextGoodSpad;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	653b      	str	r3, [r7, #80]	; 0x50
            Status = enable_spad_bit(
                Dev->Data.SpadData.RefSpadEnables,
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f503 7392 	add.w	r3, r3, #292	; 0x124
            Status = enable_spad_bit(
 8003002:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fd32 	bl	8002a70 <enable_spad_bit>
 800300c:	4603      	mov	r3, r0
 800300e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                spadArraySize, currentSpadIndex);

            if (Status == VL53L0X_ERROR_NONE) {
 8003012:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10c      	bne.n	8003034 <VL53L0X_perform_ref_spad_management+0x33c>
                currentSpadIndex++;
 800301a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800301c:	3301      	adds	r3, #1
 800301e:	653b      	str	r3, [r7, #80]	; 0x50

                /* Proceed to apply the additional spad and
                 * perform measurement. */
                Status = set_ref_spad_map(Dev,
                                          Dev->Data.SpadData.RefSpadEnables);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f503 7392 	add.w	r3, r3, #292	; 0x124
                Status = set_ref_spad_map(Dev,
 8003026:	4619      	mov	r1, r3
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7ff fd59 	bl	8002ae0 <set_ref_spad_map>
 800302e:	4603      	mov	r3, r0
 8003030:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            }

            if (Status != VL53L0X_ERROR_NONE) {
 8003034:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003038:	2b00      	cmp	r3, #0
 800303a:	d146      	bne.n	80030ca <VL53L0X_perform_ref_spad_management+0x3d2>
                break;
            }

            Status = perform_ref_signal_measurement(Dev,
 800303c:	f107 0312 	add.w	r3, r7, #18
 8003040:	4619      	mov	r1, r3
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f7ff fdee 	bl	8002c24 <perform_ref_signal_measurement>
 8003048:	4603      	mov	r3, r0
 800304a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                                    &peakSignalRateRef);

            if (Status != VL53L0X_ERROR_NONE) {
 800304e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003052:	2b00      	cmp	r3, #0
 8003054:	d13b      	bne.n	80030ce <VL53L0X_perform_ref_spad_management+0x3d6>
                break;
            }

            signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8003056:	8a7b      	ldrh	r3, [r7, #18]
 8003058:	461a      	mov	r2, r3
 800305a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	bfb8      	it	lt
 8003062:	425b      	neglt	r3, r3
 8003064:	627b      	str	r3, [r7, #36]	; 0x24

            if (peakSignalRateRef > targetRefRate) {
 8003066:	8a7b      	ldrh	r3, [r7, #18]
 8003068:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800306a:	429a      	cmp	r2, r3
 800306c:	d21c      	bcs.n	80030a8 <VL53L0X_perform_ref_spad_management+0x3b0>
                /* Select the spad map that provides the
                 * measurement closest to the target rate,
                 * either above or below it.
                 */
                if (signalRateDiff > lastSignalRateDiff) {
 800306e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003072:	429a      	cmp	r2, r3
 8003074:	d914      	bls.n	80030a0 <VL53L0X_perform_ref_spad_management+0x3a8>
                    /* Previous spad map produced a closer
                     * measurement, so choose this. */
                    Status = set_ref_spad_map(Dev,
 8003076:	f107 031c 	add.w	r3, r7, #28
 800307a:	4619      	mov	r1, r3
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f7ff fd2f 	bl	8002ae0 <set_ref_spad_map>
 8003082:	4603      	mov	r3, r0
 8003084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                              lastSpadArray);
                    memcpy(
                        Dev->Data.SpadData.RefSpadEnables,
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f503 7392 	add.w	r3, r3, #292	; 0x124
                    memcpy(
 800308e:	f107 011c 	add.w	r1, r7, #28
 8003092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003094:	4618      	mov	r0, r3
 8003096:	f005 feff 	bl	8008e98 <memcpy>
                        lastSpadArray, spadArraySize);

                    (refSpadCount_int)--;
 800309a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309c:	3b01      	subs	r3, #1
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
                }

                complete = 1;
 80030a0:	2301      	movs	r3, #1
 80030a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80030a6:	e00a      	b.n	80030be <VL53L0X_perform_ref_spad_management+0x3c6>
            } else {
                /* Continue to add spads */
                lastSignalRateDiff = signalRateDiff;
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	647b      	str	r3, [r7, #68]	; 0x44
                memcpy(lastSpadArray,
                       Dev->Data.SpadData.RefSpadEnables,
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f503 7192 	add.w	r1, r3, #292	; 0x124
                memcpy(lastSpadArray,
 80030b2:	f107 031c 	add.w	r3, r7, #28
 80030b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030b8:	4618      	mov	r0, r3
 80030ba:	f005 feed 	bl	8008e98 <memcpy>
        while (!complete) {
 80030be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f43f af74 	beq.w	8002fb0 <VL53L0X_perform_ref_spad_management+0x2b8>
 80030c8:	e002      	b.n	80030d0 <VL53L0X_perform_ref_spad_management+0x3d8>
                break;
 80030ca:	bf00      	nop
 80030cc:	e000      	b.n	80030d0 <VL53L0X_perform_ref_spad_management+0x3d8>
                break;
 80030ce:	bf00      	nop
                       spadArraySize);
            }
        } /* while */
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80030d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d115      	bne.n	8003104 <VL53L0X_perform_ref_spad_management+0x40c>
        *refSpadCount = refSpadCount_int;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030dc:	601a      	str	r2, [r3, #0]
        *isApertureSpads = isApertureSpads_int;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80030e4:	701a      	strb	r2, [r3, #0]

        VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
                                           ReferenceSpadCount, (uint8_t) (*refSpadCount));
        VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	781a      	ldrb	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                                           ReferenceSpadType, *isApertureSpads);
    }

    return Status;
 8003104:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003108:	4618      	mov	r0, r3
 800310a:	375c      	adds	r7, #92	; 0x5c
 800310c:	46bd      	mov	sp, r7
 800310e:	bd90      	pop	{r4, r7, pc}

08003110 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev, uint32_t count, uint8_t isApertureSpads) {
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b093      	sub	sp, #76	; 0x4c
 8003114:	af06      	add	r7, sp, #24
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	4613      	mov	r3, r2
 800311c:	71fb      	strb	r3, [r7, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800311e:	2300      	movs	r3, #0
 8003120:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t currentSpadIndex = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t startSelect = 0xB4;
 8003128:	23b4      	movs	r3, #180	; 0xb4
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint32_t spadArraySize = 6;
 800312e:	2306      	movs	r3, #6
 8003130:	61fb      	str	r3, [r7, #28]
    uint32_t maxSpadCount = 44;
 8003132:	232c      	movs	r3, #44	; 0x2c
 8003134:	61bb      	str	r3, [r7, #24]
     * aperture or
     * non-aperture, as requested.
     * The good spad map will be applied.
     */

    Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003136:	2201      	movs	r2, #1
 8003138:	21ff      	movs	r1, #255	; 0xff
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f002 fe99 	bl	8005e72 <VL53L0X_WrByte>
 8003140:	4603      	mov	r3, r0
 8003142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (Status == VL53L0X_ERROR_NONE) {
 8003146:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800314a:	2b00      	cmp	r3, #0
 800314c:	d107      	bne.n	800315e <VL53L0X_set_reference_spads+0x4e>
        Status = VL53L0X_WrByte(Dev,
 800314e:	2200      	movs	r2, #0
 8003150:	214f      	movs	r1, #79	; 0x4f
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f002 fe8d 	bl	8005e72 <VL53L0X_WrByte>
 8003158:	4603      	mov	r3, r0
 800315a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800315e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003162:	2b00      	cmp	r3, #0
 8003164:	d107      	bne.n	8003176 <VL53L0X_set_reference_spads+0x66>
        Status = VL53L0X_WrByte(Dev,
 8003166:	222c      	movs	r2, #44	; 0x2c
 8003168:	214e      	movs	r1, #78	; 0x4e
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f002 fe81 	bl	8005e72 <VL53L0X_WrByte>
 8003170:	4603      	mov	r3, r0
 8003172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8003176:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800317a:	2b00      	cmp	r3, #0
 800317c:	d107      	bne.n	800318e <VL53L0X_set_reference_spads+0x7e>
        Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800317e:	2200      	movs	r2, #0
 8003180:	21ff      	movs	r1, #255	; 0xff
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f002 fe75 	bl	8005e72 <VL53L0X_WrByte>
 8003188:	4603      	mov	r3, r0
 800318a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800318e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003192:	2b00      	cmp	r3, #0
 8003194:	d109      	bne.n	80031aa <VL53L0X_set_reference_spads+0x9a>
        Status = VL53L0X_WrByte(Dev,
 8003196:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800319a:	461a      	mov	r2, r3
 800319c:	21b6      	movs	r1, #182	; 0xb6
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f002 fe67 	bl	8005e72 <VL53L0X_WrByte>
 80031a4:	4603      	mov	r3, r0
 80031a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
                                startSelect);
    }

    for (index = 0; index < spadArraySize; index++)
 80031aa:	2300      	movs	r3, #0
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
 80031ae:	e009      	b.n	80031c4 <VL53L0X_set_reference_spads+0xb4>
        Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
    for (index = 0; index < spadArraySize; index++)
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	3301      	adds	r3, #1
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
 80031c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d3f1      	bcc.n	80031b0 <VL53L0X_set_reference_spads+0xa0>

    if (isApertureSpads) {
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d011      	beq.n	80031f6 <VL53L0X_set_reference_spads+0xe6>
        /* Increment to the first APERTURE spad */
        while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80031d2:	e002      	b.n	80031da <VL53L0X_set_reference_spads+0xca>
               (currentSpadIndex < maxSpadCount)) {
            currentSpadIndex++;
 80031d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d6:	3301      	adds	r3, #1
 80031d8:	62bb      	str	r3, [r7, #40]	; 0x28
        while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80031da:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80031de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e0:	4413      	add	r3, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fc2a 	bl	8002a3c <is_aperture>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d103      	bne.n	80031f6 <VL53L0X_set_reference_spads+0xe6>
 80031ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d3ee      	bcc.n	80031d4 <VL53L0X_set_reference_spads+0xc4>
        }
    }

    Status = enable_ref_spads(Dev,
                              isApertureSpads,
                              Dev->Data.SpadData.RefGoodSpadMap,
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
                              Dev->Data.SpadData.RefSpadEnables,
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f503 7492 	add.w	r4, r3, #292	; 0x124
    Status = enable_ref_spads(Dev,
 8003202:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003206:	79f9      	ldrb	r1, [r7, #7]
 8003208:	f107 0214 	add.w	r2, r7, #20
 800320c:	9204      	str	r2, [sp, #16]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	9203      	str	r2, [sp, #12]
 8003212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003214:	9202      	str	r2, [sp, #8]
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	4623      	mov	r3, r4
 800321e:	4602      	mov	r2, r0
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f7ff fc83 	bl	8002b2c <enable_ref_spads>
 8003226:	4603      	mov	r3, r0
 8003228:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                              startSelect,
                              currentSpadIndex,
                              count,
                              &lastSpadIndex);

    if (Status == VL53L0X_ERROR_NONE) {
 800322c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10c      	bne.n	800324e <VL53L0X_set_reference_spads+0x13e>
        VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	b2da      	uxtb	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
                                           ReferenceSpadCount, (uint8_t) (count));
        VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	79fa      	ldrb	r2, [r7, #7]
 800324a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                                           ReferenceSpadType, isApertureSpads);
    }

    return Status;
 800324e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003252:	4618      	mov	r0, r3
 8003254:	3734      	adds	r7, #52	; 0x34
 8003256:	46bd      	mov	sp, r7
 8003258:	bd90      	pop	{r4, r7, pc}

0800325a <VL53L0X_perform_single_ref_calibration>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev, uint8_t vhv_init_byte) {
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	70fb      	strb	r3, [r7, #3]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003266:	2300      	movs	r3, #0
 8003268:	73fb      	strb	r3, [r7, #15]

    if (Status == VL53L0X_ERROR_NONE) {
 800326a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <VL53L0X_perform_single_ref_calibration+0x2e>
        Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	b2db      	uxtb	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	2100      	movs	r1, #0
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f002 fdf7 	bl	8005e72 <VL53L0X_WrByte>
 8003284:	4603      	mov	r3, r0
 8003286:	73fb      	strb	r3, [r7, #15]
                                VL53L0X_REG_SYSRANGE_MODE_START_STOP |
                                vhv_init_byte);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8003288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <VL53L0X_perform_single_ref_calibration+0x40>
        Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f9e2 	bl	800365a <VL53L0X_measurement_poll_for_completion>
 8003296:	4603      	mov	r3, r0
 8003298:	73fb      	strb	r3, [r7, #15]
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800329a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d105      	bne.n	80032ae <VL53L0X_perform_single_ref_calibration+0x54>
        Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80032a2:	2100      	movs	r1, #0
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff fa9d 	bl	80027e4 <VL53L0X_ClearInterruptMask>
 80032aa:	4603      	mov	r3, r0
 80032ac:	73fb      	strb	r3, [r7, #15]
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80032ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <VL53L0X_perform_single_ref_calibration+0x6a>
        Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80032b6:	2200      	movs	r2, #0
 80032b8:	2100      	movs	r1, #0
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f002 fdd9 	bl	8005e72 <VL53L0X_WrByte>
 80032c0:	4603      	mov	r3, r0
 80032c2:	73fb      	strb	r3, [r7, #15]
    }

    return Status;
 80032c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write, uint8_t VhvSettings, uint8_t PhaseCal,
                                         uint8_t*      pVhvSettings, uint8_t*      pPhaseCal, const uint8_t vhv_enable,
                                         const uint8_t phase_enable) {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	4608      	mov	r0, r1
 80032da:	4611      	mov	r1, r2
 80032dc:	461a      	mov	r2, r3
 80032de:	4603      	mov	r3, r0
 80032e0:	70fb      	strb	r3, [r7, #3]
 80032e2:	460b      	mov	r3, r1
 80032e4:	70bb      	strb	r3, [r7, #2]
 80032e6:	4613      	mov	r3, r2
 80032e8:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	73fb      	strb	r3, [r7, #15]
    uint8_t PhaseCalint = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	73bb      	strb	r3, [r7, #14]

    /* Read VHV from device */
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80032f2:	2201      	movs	r2, #1
 80032f4:	21ff      	movs	r1, #255	; 0xff
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f002 fdbb 	bl	8005e72 <VL53L0X_WrByte>
 80032fc:	4603      	mov	r3, r0
 80032fe:	461a      	mov	r2, r3
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	4313      	orrs	r3, r2
 8003304:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003306:	2200      	movs	r2, #0
 8003308:	2100      	movs	r1, #0
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f002 fdb1 	bl	8005e72 <VL53L0X_WrByte>
 8003310:	4603      	mov	r3, r0
 8003312:	461a      	mov	r2, r3
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	4313      	orrs	r3, r2
 8003318:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800331a:	2200      	movs	r2, #0
 800331c:	21ff      	movs	r1, #255	; 0xff
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f002 fda7 	bl	8005e72 <VL53L0X_WrByte>
 8003324:	4603      	mov	r3, r0
 8003326:	461a      	mov	r2, r3
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	4313      	orrs	r3, r2
 800332c:	73fb      	strb	r3, [r7, #15]

    if (read_not_write) {
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01e      	beq.n	8003372 <VL53L0X_ref_calibration_io+0xa2>
        if (vhv_enable) {
 8003334:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d009      	beq.n	8003350 <VL53L0X_ref_calibration_io+0x80>
            Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	21cb      	movs	r1, #203	; 0xcb
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f002 fe1f 	bl	8005f84 <VL53L0X_RdByte>
 8003346:	4603      	mov	r3, r0
 8003348:	461a      	mov	r2, r3
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	4313      	orrs	r3, r2
 800334e:	73fb      	strb	r3, [r7, #15]
        }

        if (phase_enable) {
 8003350:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003354:	2b00      	cmp	r3, #0
 8003356:	d02a      	beq.n	80033ae <VL53L0X_ref_calibration_io+0xde>
            Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8003358:	f107 030e 	add.w	r3, r7, #14
 800335c:	461a      	mov	r2, r3
 800335e:	21ee      	movs	r1, #238	; 0xee
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f002 fe0f 	bl	8005f84 <VL53L0X_RdByte>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	4313      	orrs	r3, r2
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	e01d      	b.n	80033ae <VL53L0X_ref_calibration_io+0xde>
        }
    } else {
        if (vhv_enable) {
 8003372:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <VL53L0X_ref_calibration_io+0xc0>
            Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800337a:	78bb      	ldrb	r3, [r7, #2]
 800337c:	461a      	mov	r2, r3
 800337e:	21cb      	movs	r1, #203	; 0xcb
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f002 fd76 	bl	8005e72 <VL53L0X_WrByte>
 8003386:	4603      	mov	r3, r0
 8003388:	461a      	mov	r2, r3
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	4313      	orrs	r3, r2
 800338e:	73fb      	strb	r3, [r7, #15]
        }

        if (phase_enable) {
 8003390:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <VL53L0X_ref_calibration_io+0xde>
            Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8003398:	787b      	ldrb	r3, [r7, #1]
 800339a:	2280      	movs	r2, #128	; 0x80
 800339c:	21ee      	movs	r1, #238	; 0xee
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f002 fdbe 	bl	8005f20 <VL53L0X_UpdateByte>
 80033a4:	4603      	mov	r3, r0
 80033a6:	461a      	mov	r2, r3
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	73fb      	strb	r3, [r7, #15]
        }
    }

    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80033ae:	2201      	movs	r2, #1
 80033b0:	21ff      	movs	r1, #255	; 0xff
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f002 fd5d 	bl	8005e72 <VL53L0X_WrByte>
 80033b8:	4603      	mov	r3, r0
 80033ba:	461a      	mov	r2, r3
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	4313      	orrs	r3, r2
 80033c0:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80033c2:	2201      	movs	r2, #1
 80033c4:	2100      	movs	r1, #0
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f002 fd53 	bl	8005e72 <VL53L0X_WrByte>
 80033cc:	4603      	mov	r3, r0
 80033ce:	461a      	mov	r2, r3
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80033d6:	2200      	movs	r2, #0
 80033d8:	21ff      	movs	r1, #255	; 0xff
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f002 fd49 	bl	8005e72 <VL53L0X_WrByte>
 80033e0:	4603      	mov	r3, r0
 80033e2:	461a      	mov	r2, r3
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	73fb      	strb	r3, [r7, #15]

    *pPhaseCal = (uint8_t) (PhaseCalint & 0xEF);
 80033ea:	7bbb      	ldrb	r3, [r7, #14]
 80033ec:	f023 0310 	bic.w	r3, r3, #16
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	701a      	strb	r2, [r3, #0]

    return Status;
 80033f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <VL53L0X_perform_vhv_calibration>:

VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev, uint8_t*      pVhvSettings,
                                              const uint8_t get_data_enable, const uint8_t restore_config) {
 8003402:	b580      	push	{r7, lr}
 8003404:	b08a      	sub	sp, #40	; 0x28
 8003406:	af04      	add	r7, sp, #16
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	4611      	mov	r1, r2
 800340e:	461a      	mov	r2, r3
 8003410:	460b      	mov	r3, r1
 8003412:	71fb      	strb	r3, [r7, #7]
 8003414:	4613      	mov	r3, r2
 8003416:	71bb      	strb	r3, [r7, #6]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003418:	2300      	movs	r3, #0
 800341a:	75fb      	strb	r3, [r7, #23]
    uint8_t SequenceConfig = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	75bb      	strb	r3, [r7, #22]
    uint8_t VhvSettings = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	757b      	strb	r3, [r7, #21]
    uint8_t PhaseCal = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	753b      	strb	r3, [r7, #20]
    uint8_t PhaseCalInt = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	74fb      	strb	r3, [r7, #19]

    /* store the value of the sequence config,
     * this will be reset before the end of the function
     */

    if (restore_config) {
 800342c:	79bb      	ldrb	r3, [r7, #6]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <VL53L0X_perform_vhv_calibration+0x38>
        SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003438:	75bb      	strb	r3, [r7, #22]
    }

    /* Run VHV */
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800343a:	2201      	movs	r2, #1
 800343c:	2101      	movs	r1, #1
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f002 fd17 	bl	8005e72 <VL53L0X_WrByte>
 8003444:	4603      	mov	r3, r0
 8003446:	75fb      	strb	r3, [r7, #23]

    if (Status == VL53L0X_ERROR_NONE) {
 8003448:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d105      	bne.n	800345c <VL53L0X_perform_vhv_calibration+0x5a>
        Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8003450:	2140      	movs	r1, #64	; 0x40
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f7ff ff01 	bl	800325a <VL53L0X_perform_single_ref_calibration>
 8003458:	4603      	mov	r3, r0
 800345a:	75fb      	strb	r3, [r7, #23]
    }

    /* Read VHV from device */
    if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800345c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d115      	bne.n	8003490 <VL53L0X_perform_vhv_calibration+0x8e>
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d112      	bne.n	8003490 <VL53L0X_perform_vhv_calibration+0x8e>
        Status = VL53L0X_ref_calibration_io(Dev, 1,
 800346a:	7d39      	ldrb	r1, [r7, #20]
 800346c:	7d7a      	ldrb	r2, [r7, #21]
 800346e:	2300      	movs	r3, #0
 8003470:	9303      	str	r3, [sp, #12]
 8003472:	2301      	movs	r3, #1
 8003474:	9302      	str	r3, [sp, #8]
 8003476:	f107 0313 	add.w	r3, r7, #19
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	460b      	mov	r3, r1
 8003482:	2101      	movs	r1, #1
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff ff23 	bl	80032d0 <VL53L0X_ref_calibration_io>
 800348a:	4603      	mov	r3, r0
 800348c:	75fb      	strb	r3, [r7, #23]
 800348e:	e002      	b.n	8003496 <VL53L0X_perform_vhv_calibration+0x94>
                                            VhvSettings, PhaseCal, /* Not used here */
                                            pVhvSettings, &PhaseCalInt,
                                            1, 0);
    } else {
        *pVhvSettings = 0;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]
    }

    if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8003496:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d112      	bne.n	80034c4 <VL53L0X_perform_vhv_calibration+0xc2>
 800349e:	79bb      	ldrb	r3, [r7, #6]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00f      	beq.n	80034c4 <VL53L0X_perform_vhv_calibration+0xc2>
        /* restore the previous Sequence Config */
        Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80034a4:	7dbb      	ldrb	r3, [r7, #22]
 80034a6:	461a      	mov	r2, r3
 80034a8:	2101      	movs	r1, #1
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f002 fce1 	bl	8005e72 <VL53L0X_WrByte>
 80034b0:	4603      	mov	r3, r0
 80034b2:	75fb      	strb	r3, [r7, #23]
                                SequenceConfig);

        if (Status == VL53L0X_ERROR_NONE) {
 80034b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d103      	bne.n	80034c4 <VL53L0X_perform_vhv_calibration+0xc2>
            PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	7dba      	ldrb	r2, [r7, #22]
 80034c0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
        }
    }

    return Status;
 80034c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev, uint8_t*      pPhaseCal, const uint8_t get_data_enable,
                                                const uint8_t restore_config) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	; 0x28
 80034d4:	af04      	add	r7, sp, #16
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	4611      	mov	r1, r2
 80034dc:	461a      	mov	r2, r3
 80034de:	460b      	mov	r3, r1
 80034e0:	71fb      	strb	r3, [r7, #7]
 80034e2:	4613      	mov	r3, r2
 80034e4:	71bb      	strb	r3, [r7, #6]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034e6:	2300      	movs	r3, #0
 80034e8:	75fb      	strb	r3, [r7, #23]
    uint8_t SequenceConfig = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	75bb      	strb	r3, [r7, #22]
    uint8_t VhvSettings = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	757b      	strb	r3, [r7, #21]
    uint8_t PhaseCal = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	753b      	strb	r3, [r7, #20]

    /* store the value of the sequence config,
     * this will be reset before the end of the function
     */

    if (restore_config) {
 80034f6:	79bb      	ldrb	r3, [r7, #6]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <VL53L0X_perform_phase_calibration+0x34>
        SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003502:	75bb      	strb	r3, [r7, #22]
    }

    /* Run PhaseCal */
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8003504:	2202      	movs	r2, #2
 8003506:	2101      	movs	r1, #1
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f002 fcb2 	bl	8005e72 <VL53L0X_WrByte>
 800350e:	4603      	mov	r3, r0
 8003510:	75fb      	strb	r3, [r7, #23]

    if (Status == VL53L0X_ERROR_NONE) {
 8003512:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d105      	bne.n	8003526 <VL53L0X_perform_phase_calibration+0x56>
        Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800351a:	2100      	movs	r1, #0
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f7ff fe9c 	bl	800325a <VL53L0X_perform_single_ref_calibration>
 8003522:	4603      	mov	r3, r0
 8003524:	75fb      	strb	r3, [r7, #23]
    }

    /* Read PhaseCal from device */
    if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8003526:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d115      	bne.n	800355a <VL53L0X_perform_phase_calibration+0x8a>
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d112      	bne.n	800355a <VL53L0X_perform_phase_calibration+0x8a>
        Status = VL53L0X_ref_calibration_io(Dev, 1,
 8003534:	7d39      	ldrb	r1, [r7, #20]
 8003536:	7d7a      	ldrb	r2, [r7, #21]
 8003538:	2301      	movs	r3, #1
 800353a:	9303      	str	r3, [sp, #12]
 800353c:	2300      	movs	r3, #0
 800353e:	9302      	str	r3, [sp, #8]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	9301      	str	r3, [sp, #4]
 8003544:	f107 0313 	add.w	r3, r7, #19
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	460b      	mov	r3, r1
 800354c:	2101      	movs	r1, #1
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f7ff febe 	bl	80032d0 <VL53L0X_ref_calibration_io>
 8003554:	4603      	mov	r3, r0
 8003556:	75fb      	strb	r3, [r7, #23]
 8003558:	e002      	b.n	8003560 <VL53L0X_perform_phase_calibration+0x90>
                                            VhvSettings, PhaseCal, /* Not used here */
                                            &VhvSettingsint, pPhaseCal,
                                            0, 1);
    } else {
        *pPhaseCal = 0;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
    }

    if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8003560:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d112      	bne.n	800358e <VL53L0X_perform_phase_calibration+0xbe>
 8003568:	79bb      	ldrb	r3, [r7, #6]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00f      	beq.n	800358e <VL53L0X_perform_phase_calibration+0xbe>
        /* restore the previous Sequence Config */
        Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800356e:	7dbb      	ldrb	r3, [r7, #22]
 8003570:	461a      	mov	r2, r3
 8003572:	2101      	movs	r1, #1
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f002 fc7c 	bl	8005e72 <VL53L0X_WrByte>
 800357a:	4603      	mov	r3, r0
 800357c:	75fb      	strb	r3, [r7, #23]
                                SequenceConfig);

        if (Status == VL53L0X_ERROR_NONE) {
 800357e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d103      	bne.n	800358e <VL53L0X_perform_phase_calibration+0xbe>
            PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	7dba      	ldrb	r2, [r7, #22]
 800358a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
        }
    }

    return Status;
 800358e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev, uint8_t*    pVhvSettings, uint8_t*    pPhaseCal,
                                              uint8_t get_data_enable) {
 800359a:	b580      	push	{r7, lr}
 800359c:	b086      	sub	sp, #24
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	70fb      	strb	r3, [r7, #3]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035a8:	2300      	movs	r3, #0
 80035aa:	75fb      	strb	r3, [r7, #23]
    uint8_t SequenceConfig = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	75bb      	strb	r3, [r7, #22]

    /* store the value of the sequence config,
     * this will be reset before the end of the function
     */

    SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80035b6:	75bb      	strb	r3, [r7, #22]

    /* In the following function we don't save the config to optimize
     * writes on device. Config is saved and restored only once. */
    Status = VL53L0X_perform_vhv_calibration(
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	2300      	movs	r3, #0
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7ff ff1f 	bl	8003402 <VL53L0X_perform_vhv_calibration>
 80035c4:	4603      	mov	r3, r0
 80035c6:	75fb      	strb	r3, [r7, #23]
        Dev, pVhvSettings, get_data_enable, 0);

    if (Status == VL53L0X_ERROR_NONE) {
 80035c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d107      	bne.n	80035e0 <VL53L0X_perform_ref_calibration+0x46>
        Status = VL53L0X_perform_phase_calibration(
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	2300      	movs	r3, #0
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7ff ff7a 	bl	80034d0 <VL53L0X_perform_phase_calibration>
 80035dc:	4603      	mov	r3, r0
 80035de:	75fb      	strb	r3, [r7, #23]
            Dev, pPhaseCal, get_data_enable, 0);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80035e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10f      	bne.n	8003608 <VL53L0X_perform_ref_calibration+0x6e>
        /* restore the previous Sequence Config */
        Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80035e8:	7dbb      	ldrb	r3, [r7, #22]
 80035ea:	461a      	mov	r2, r3
 80035ec:	2101      	movs	r1, #1
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f002 fc3f 	bl	8005e72 <VL53L0X_WrByte>
 80035f4:	4603      	mov	r3, r0
 80035f6:	75fb      	strb	r3, [r7, #23]
                                SequenceConfig);

        if (Status == VL53L0X_ERROR_NONE) {
 80035f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d103      	bne.n	8003608 <VL53L0X_perform_ref_calibration+0x6e>
            PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	7dba      	ldrb	r2, [r7, #22]
 8003604:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
        }
    }

    return Status;
 8003608:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <VL53L0X_set_ref_calibration>:

VL53L0X_Error VL53L0X_set_ref_calibration(VL53L0X_DEV Dev, uint8_t VhvSettings, uint8_t PhaseCal) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af04      	add	r7, sp, #16
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	70fb      	strb	r3, [r7, #3]
 8003620:	4613      	mov	r3, r2
 8003622:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003624:	2300      	movs	r3, #0
 8003626:	73fb      	strb	r3, [r7, #15]
    uint8_t pVhvSettings;
    uint8_t pPhaseCal;

    Status = VL53L0X_ref_calibration_io(Dev, 0,
 8003628:	78b9      	ldrb	r1, [r7, #2]
 800362a:	78fa      	ldrb	r2, [r7, #3]
 800362c:	2301      	movs	r3, #1
 800362e:	9303      	str	r3, [sp, #12]
 8003630:	2301      	movs	r3, #1
 8003632:	9302      	str	r3, [sp, #8]
 8003634:	f107 030d 	add.w	r3, r7, #13
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	f107 030e 	add.w	r3, r7, #14
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	460b      	mov	r3, r1
 8003642:	2100      	movs	r1, #0
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff fe43 	bl	80032d0 <VL53L0X_ref_calibration_io>
 800364a:	4603      	mov	r3, r0
 800364c:	73fb      	strb	r3, [r7, #15]
                                        VhvSettings, PhaseCal,
                                        &pVhvSettings, &pPhaseCal,
                                        1, 1);

    return Status;
 800364e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <VL53L0X_measurement_poll_for_completion>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev) {
 800365a:	b580      	push	{r7, lr}
 800365c:	b086      	sub	sp, #24
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003662:	2300      	movs	r3, #0
 8003664:	75fb      	strb	r3, [r7, #23]
    uint8_t NewDataReady = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	73fb      	strb	r3, [r7, #15]
    uint32_t LoopNb;

    LOG_FUNCTION_START("");

    LoopNb = 0;
 800366a:	2300      	movs	r3, #0
 800366c:	613b      	str	r3, [r7, #16]

    do {
        Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800366e:	f107 030f 	add.w	r3, r7, #15
 8003672:	4619      	mov	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7fe fdc7 	bl	8002208 <VL53L0X_GetMeasurementDataReady>
 800367a:	4603      	mov	r3, r0
 800367c:	75fb      	strb	r3, [r7, #23]

        if (Status != 0) {
 800367e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d110      	bne.n	80036a8 <VL53L0X_measurement_poll_for_completion+0x4e>
            break; /* the error is set */
        }

        if (NewDataReady == 1) {
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d00f      	beq.n	80036ac <VL53L0X_measurement_poll_for_completion+0x52>
            break; /* done note that status == 0 */
        }

        LoopNb++;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	3301      	adds	r3, #1
 8003690:	613b      	str	r3, [r7, #16]

        if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003698:	d302      	bcc.n	80036a0 <VL53L0X_measurement_poll_for_completion+0x46>
            Status = VL53L0X_ERROR_TIME_OUT;
 800369a:	23f9      	movs	r3, #249	; 0xf9
 800369c:	75fb      	strb	r3, [r7, #23]
            break;
 800369e:	e006      	b.n	80036ae <VL53L0X_measurement_poll_for_completion+0x54>
        }

        VL53L0X_PollingDelay(Dev);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f002 fcce 	bl	8006042 <VL53L0X_PollingDelay>
        Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80036a6:	e7e2      	b.n	800366e <VL53L0X_measurement_poll_for_completion+0x14>
            break; /* the error is set */
 80036a8:	bf00      	nop
 80036aa:	e000      	b.n	80036ae <VL53L0X_measurement_poll_for_completion+0x54>
            break; /* done note that status == 0 */
 80036ac:	bf00      	nop
    } while (1);

    LOG_FUNCTION_END(Status);

    return Status;
 80036ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <VL53L0X_decode_vcsel_period>:

uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg) {
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	71fb      	strb	r3, [r7, #7]
    /*!
     * Converts the encoded VCSEL period register value into the real
     * period in PLL clocks
     */

    uint8_t vcsel_period_pclks = 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	73fb      	strb	r3, [r7, #15]

    vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	3301      	adds	r3, #1
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]

    return vcsel_period_pclks;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks) {
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	71fb      	strb	r3, [r7, #7]
    /*!
     * Converts the encoded VCSEL period register value into the real period
     * in PLL clocks
     */

    uint8_t vcsel_period_reg = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]

    vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]

    return vcsel_period_reg;
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <VL53L0X_isqrt>:

uint32_t VL53L0X_isqrt(uint32_t num) {
 8003706:	b480      	push	{r7}
 8003708:	b085      	sub	sp, #20
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
     * Implements an integer square root
     *
     * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
     */

    uint32_t res = 0;
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
    uint32_t bit = 1 << 30;
 8003712:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003716:	60bb      	str	r3, [r7, #8]

    /* The second-to-top bit is set:
     *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

    /* "bit" starts at the highest power of four <= the argument. */
    while (bit > num)
 8003718:	e002      	b.n	8003720 <VL53L0X_isqrt+0x1a>
        bit >>= 2;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	60bb      	str	r3, [r7, #8]
    while (bit > num)
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	429a      	cmp	r2, r3
 8003726:	d8f8      	bhi.n	800371a <VL53L0X_isqrt+0x14>

    while (bit != 0) {
 8003728:	e017      	b.n	800375a <VL53L0X_isqrt+0x54>
        if (num >= res + bit) {
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4413      	add	r3, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	429a      	cmp	r2, r3
 8003734:	d30b      	bcc.n	800374e <VL53L0X_isqrt+0x48>
            num -= res + bit;
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4413      	add	r3, r2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	607b      	str	r3, [r7, #4]
            res = (res >> 1) + bit;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	085b      	lsrs	r3, r3, #1
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	4413      	add	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	e002      	b.n	8003754 <VL53L0X_isqrt+0x4e>
        } else {
            res >>= 1;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	085b      	lsrs	r3, r3, #1
 8003752:	60fb      	str	r3, [r7, #12]
        }

        bit >>= 2;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	60bb      	str	r3, [r7, #8]
    while (bit != 0) {
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e4      	bne.n	800372a <VL53L0X_isqrt+0x24>
    }

    return res;
 8003760:	68fb      	ldr	r3, [r7, #12]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <VL53L0X_device_read_strobe>:
    }

    return res;
}

VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev) {
 800376e:	b580      	push	{r7, lr}
 8003770:	b086      	sub	sp, #24
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003776:	2300      	movs	r3, #0
 8003778:	75fb      	strb	r3, [r7, #23]
    uint8_t strobe;
    uint32_t LoopNb;
    LOG_FUNCTION_START("");

    Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800377a:	2200      	movs	r2, #0
 800377c:	2183      	movs	r1, #131	; 0x83
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f002 fb77 	bl	8005e72 <VL53L0X_WrByte>
 8003784:	4603      	mov	r3, r0
 8003786:	461a      	mov	r2, r3
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	4313      	orrs	r3, r2
 800378c:	75fb      	strb	r3, [r7, #23]

    /* polling
     * use timeout to avoid deadlock*/
    if (Status == VL53L0X_ERROR_NONE) {
 800378e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d11e      	bne.n	80037d4 <VL53L0X_device_read_strobe+0x66>
        LoopNb = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	613b      	str	r3, [r7, #16]

        do {
            Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800379a:	f107 030f 	add.w	r3, r7, #15
 800379e:	461a      	mov	r2, r3
 80037a0:	2183      	movs	r1, #131	; 0x83
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f002 fbee 	bl	8005f84 <VL53L0X_RdByte>
 80037a8:	4603      	mov	r3, r0
 80037aa:	75fb      	strb	r3, [r7, #23]

            if ((strobe != 0x00) || (Status != VL53L0X_ERROR_NONE)) {
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10a      	bne.n	80037c8 <VL53L0X_device_read_strobe+0x5a>
 80037b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <VL53L0X_device_read_strobe+0x5a>
                break;
            }

            LoopNb = LoopNb + 1;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	3301      	adds	r3, #1
 80037be:	613b      	str	r3, [r7, #16]
        } while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80037c6:	d3e8      	bcc.n	800379a <VL53L0X_device_read_strobe+0x2c>

        if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80037ce:	d301      	bcc.n	80037d4 <VL53L0X_device_read_strobe+0x66>
            Status = VL53L0X_ERROR_TIME_OUT;
 80037d0:	23f9      	movs	r3, #249	; 0xf9
 80037d2:	75fb      	strb	r3, [r7, #23]
        }
    }

    Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80037d4:	2201      	movs	r2, #1
 80037d6:	2183      	movs	r1, #131	; 0x83
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f002 fb4a 	bl	8005e72 <VL53L0X_WrByte>
 80037de:	4603      	mov	r3, r0
 80037e0:	461a      	mov	r2, r3
 80037e2:	7dfb      	ldrb	r3, [r7, #23]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	75fb      	strb	r3, [r7, #23]

    LOG_FUNCTION_END(Status);
    return Status;
 80037e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b098      	sub	sp, #96	; 0x60
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	70fb      	strb	r3, [r7, #3]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003800:	2300      	movs	r3, #0
 8003802:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint8_t byte;
    uint32_t TmpDWord;
    uint8_t ModuleId;
    uint8_t Revision;
    uint8_t ReferenceSpadCount = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t ReferenceSpadType = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint32_t PartUIDUpper = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t PartUIDLower = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t OffsetFixed1104_mm = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t OffsetMicroMeters = 0;
 800381e:	2300      	movs	r3, #0
 8003820:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8003824:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003828:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t DistMeasFixed1104_400_mm = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	657b      	str	r3, [r7, #84]	; 0x54
    uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800382e:	2300      	movs	r3, #0
 8003830:	653b      	str	r3, [r7, #80]	; 0x50
    char ProductId[19];
    char* ProductId_tmp;
    uint8_t ReadDataFromDeviceDone;
    FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8003832:	2300      	movs	r3, #0
 8003834:	643b      	str	r3, [r7, #64]	; 0x40
    uint8_t NvmRefGoodSpadMap[VL53L0X_REF_SPAD_BUFFER_SIZE];
    int i;

    LOG_FUNCTION_START("");

    ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800383c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                                                ReadDataFromDeviceDone);

    /* This access is done only once after that a GetDeviceInfo or
     * datainit is done*/
    if (ReadDataFromDeviceDone != 7) {
 8003840:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003844:	2b07      	cmp	r3, #7
 8003846:	f000 8408 	beq.w	800405a <VL53L0X_get_info_from_device+0x866>
        Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800384a:	2201      	movs	r2, #1
 800384c:	2180      	movs	r1, #128	; 0x80
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f002 fb0f 	bl	8005e72 <VL53L0X_WrByte>
 8003854:	4603      	mov	r3, r0
 8003856:	461a      	mov	r2, r3
 8003858:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800385c:	4313      	orrs	r3, r2
 800385e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003862:	2201      	movs	r2, #1
 8003864:	21ff      	movs	r1, #255	; 0xff
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f002 fb03 	bl	8005e72 <VL53L0X_WrByte>
 800386c:	4603      	mov	r3, r0
 800386e:	461a      	mov	r2, r3
 8003870:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003874:	4313      	orrs	r3, r2
 8003876:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800387a:	2200      	movs	r2, #0
 800387c:	2100      	movs	r1, #0
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f002 faf7 	bl	8005e72 <VL53L0X_WrByte>
 8003884:	4603      	mov	r3, r0
 8003886:	461a      	mov	r2, r3
 8003888:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800388c:	4313      	orrs	r3, r2
 800388e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

        Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003892:	2206      	movs	r2, #6
 8003894:	21ff      	movs	r1, #255	; 0xff
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f002 faeb 	bl	8005e72 <VL53L0X_WrByte>
 800389c:	4603      	mov	r3, r0
 800389e:	461a      	mov	r2, r3
 80038a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80038aa:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80038ae:	461a      	mov	r2, r3
 80038b0:	2183      	movs	r1, #131	; 0x83
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f002 fb66 	bl	8005f84 <VL53L0X_RdByte>
 80038b8:	4603      	mov	r3, r0
 80038ba:	461a      	mov	r2, r3
 80038bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        Status |= VL53L0X_WrByte(Dev, 0x83, byte | 4);
 80038c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80038ca:	f043 0304 	orr.w	r3, r3, #4
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	2183      	movs	r1, #131	; 0x83
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f002 facc 	bl	8005e72 <VL53L0X_WrByte>
 80038da:	4603      	mov	r3, r0
 80038dc:	461a      	mov	r2, r3
 80038de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80038e8:	2207      	movs	r2, #7
 80038ea:	21ff      	movs	r1, #255	; 0xff
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f002 fac0 	bl	8005e72 <VL53L0X_WrByte>
 80038f2:	4603      	mov	r3, r0
 80038f4:	461a      	mov	r2, r3
 80038f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8003900:	2201      	movs	r2, #1
 8003902:	2181      	movs	r1, #129	; 0x81
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f002 fab4 	bl	8005e72 <VL53L0X_WrByte>
 800390a:	4603      	mov	r3, r0
 800390c:	461a      	mov	r2, r3
 800390e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003912:	4313      	orrs	r3, r2
 8003914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

        Status |= VL53L0X_PollingDelay(Dev);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f002 fb92 	bl	8006042 <VL53L0X_PollingDelay>
 800391e:	4603      	mov	r3, r0
 8003920:	461a      	mov	r2, r3
 8003922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003926:	4313      	orrs	r3, r2
 8003928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

        Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800392c:	2201      	movs	r2, #1
 800392e:	2180      	movs	r1, #128	; 0x80
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f002 fa9e 	bl	8005e72 <VL53L0X_WrByte>
 8003936:	4603      	mov	r3, r0
 8003938:	461a      	mov	r2, r3
 800393a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800393e:	4313      	orrs	r3, r2
 8003940:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

        if (((option & 1) == 1) &&
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8098 	beq.w	8003a80 <VL53L0X_get_info_from_device+0x28c>
            ((ReadDataFromDeviceDone & 1) == 0)) {
 8003950:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003954:	f003 0301 	and.w	r3, r3, #1
        if (((option & 1) == 1) &&
 8003958:	2b00      	cmp	r3, #0
 800395a:	f040 8091 	bne.w	8003a80 <VL53L0X_get_info_from_device+0x28c>
            Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800395e:	226b      	movs	r2, #107	; 0x6b
 8003960:	2194      	movs	r1, #148	; 0x94
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f002 fa85 	bl	8005e72 <VL53L0X_WrByte>
 8003968:	4603      	mov	r3, r0
 800396a:	461a      	mov	r2, r3
 800396c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003970:	4313      	orrs	r3, r2
 8003972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_device_read_strobe(Dev);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fef9 	bl	800376e <VL53L0X_device_read_strobe>
 800397c:	4603      	mov	r3, r0
 800397e:	461a      	mov	r2, r3
 8003980:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003984:	4313      	orrs	r3, r2
 8003986:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800398a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800398e:	461a      	mov	r2, r3
 8003990:	2190      	movs	r1, #144	; 0x90
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f002 fb31 	bl	8005ffa <VL53L0X_RdDWord>
 8003998:	4603      	mov	r3, r0
 800399a:	461a      	mov	r2, r3
 800399c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            ReferenceSpadCount = (uint8_t) ((TmpDWord >> 8) & 0x07f);
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	0a1b      	lsrs	r3, r3, #8
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            ReferenceSpadType = (uint8_t) ((TmpDWord >> 15) & 0x01);
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	0bdb      	lsrs	r3, r3, #15
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

            Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80039c2:	2224      	movs	r2, #36	; 0x24
 80039c4:	2194      	movs	r1, #148	; 0x94
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f002 fa53 	bl	8005e72 <VL53L0X_WrByte>
 80039cc:	4603      	mov	r3, r0
 80039ce:	461a      	mov	r2, r3
 80039d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_device_read_strobe(Dev);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff fec7 	bl	800376e <VL53L0X_device_read_strobe>
 80039e0:	4603      	mov	r3, r0
 80039e2:	461a      	mov	r2, r3
 80039e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80039ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039f2:	461a      	mov	r2, r3
 80039f4:	2190      	movs	r1, #144	; 0x90
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f002 faff 	bl	8005ffa <VL53L0X_RdDWord>
 80039fc:	4603      	mov	r3, r0
 80039fe:	461a      	mov	r2, r3
 8003a00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            NvmRefGoodSpadMap[0] = (uint8_t) ((TmpDWord >> 24) &
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0c:	0e1b      	lsrs	r3, r3, #24
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	723b      	strb	r3, [r7, #8]
                                              0xff);
            NvmRefGoodSpadMap[1] = (uint8_t) ((TmpDWord >> 16) &
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	0c1b      	lsrs	r3, r3, #16
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	727b      	strb	r3, [r7, #9]
                                              0xff);
            NvmRefGoodSpadMap[2] = (uint8_t) ((TmpDWord >> 8) &
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	0a1b      	lsrs	r3, r3, #8
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	72bb      	strb	r3, [r7, #10]
                                              0xff);
            NvmRefGoodSpadMap[3] = (uint8_t) (TmpDWord & 0xff);
 8003a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	72fb      	strb	r3, [r7, #11]

            Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8003a28:	2225      	movs	r2, #37	; 0x25
 8003a2a:	2194      	movs	r1, #148	; 0x94
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f002 fa20 	bl	8005e72 <VL53L0X_WrByte>
 8003a32:	4603      	mov	r3, r0
 8003a34:	461a      	mov	r2, r3
 8003a36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_device_read_strobe(Dev);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff fe94 	bl	800376e <VL53L0X_device_read_strobe>
 8003a46:	4603      	mov	r3, r0
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003a54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2190      	movs	r1, #144	; 0x90
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f002 facc 	bl	8005ffa <VL53L0X_RdDWord>
 8003a62:	4603      	mov	r3, r0
 8003a64:	461a      	mov	r2, r3
 8003a66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            NvmRefGoodSpadMap[4] = (uint8_t) ((TmpDWord >> 24) &
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	0e1b      	lsrs	r3, r3, #24
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	733b      	strb	r3, [r7, #12]
                                              0xff);
            NvmRefGoodSpadMap[5] = (uint8_t) ((TmpDWord >> 16) &
 8003a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7a:	0c1b      	lsrs	r3, r3, #16
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	737b      	strb	r3, [r7, #13]
                                              0xff);
        }

        if (((option & 2) == 2) &&
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8189 	beq.w	8003d9e <VL53L0X_get_info_from_device+0x5aa>
            ((ReadDataFromDeviceDone & 2) == 0)) {
 8003a8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a90:	f003 0302 	and.w	r3, r3, #2
        if (((option & 2) == 2) &&
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f040 8182 	bne.w	8003d9e <VL53L0X_get_info_from_device+0x5aa>
            Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	2194      	movs	r1, #148	; 0x94
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f002 f9e7 	bl	8005e72 <VL53L0X_WrByte>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_device_read_strobe(Dev);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff fe5b 	bl	800376e <VL53L0X_device_read_strobe>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	461a      	mov	r2, r3
 8003abc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8003ac6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8003aca:	461a      	mov	r2, r3
 8003acc:	2190      	movs	r1, #144	; 0x90
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f002 fa58 	bl	8005f84 <VL53L0X_RdByte>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003ae2:	227b      	movs	r2, #123	; 0x7b
 8003ae4:	2194      	movs	r1, #148	; 0x94
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f002 f9c3 	bl	8005e72 <VL53L0X_WrByte>
 8003aec:	4603      	mov	r3, r0
 8003aee:	461a      	mov	r2, r3
 8003af0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_device_read_strobe(Dev);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fe37 	bl	800376e <VL53L0X_device_read_strobe>
 8003b00:	4603      	mov	r3, r0
 8003b02:	461a      	mov	r2, r3
 8003b04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8003b0e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8003b12:	461a      	mov	r2, r3
 8003b14:	2190      	movs	r1, #144	; 0x90
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f002 fa34 	bl	8005f84 <VL53L0X_RdByte>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8003b2a:	2277      	movs	r2, #119	; 0x77
 8003b2c:	2194      	movs	r1, #148	; 0x94
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f002 f99f 	bl	8005e72 <VL53L0X_WrByte>
 8003b34:	4603      	mov	r3, r0
 8003b36:	461a      	mov	r2, r3
 8003b38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_device_read_strobe(Dev);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff fe13 	bl	800376e <VL53L0X_device_read_strobe>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003b56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2190      	movs	r1, #144	; 0x90
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f002 fa4b 	bl	8005ffa <VL53L0X_RdDWord>
 8003b64:	4603      	mov	r3, r0
 8003b66:	461a      	mov	r2, r3
 8003b68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            ProductId[0] = (char) ((TmpDWord >> 25) & 0x07f);
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	0e5b      	lsrs	r3, r3, #25
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	743b      	strb	r3, [r7, #16]
            ProductId[1] = (char) ((TmpDWord >> 18) & 0x07f);
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	0c9b      	lsrs	r3, r3, #18
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	747b      	strb	r3, [r7, #17]
            ProductId[2] = (char) ((TmpDWord >> 11) & 0x07f);
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	0adb      	lsrs	r3, r3, #11
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	74bb      	strb	r3, [r7, #18]
            ProductId[3] = (char) ((TmpDWord >> 4) & 0x07f);
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	74fb      	strb	r3, [r7, #19]

            byte = (uint8_t) ((TmpDWord & 0x00f) << 3);
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

            Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8003bbc:	2278      	movs	r2, #120	; 0x78
 8003bbe:	2194      	movs	r1, #148	; 0x94
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f002 f956 	bl	8005e72 <VL53L0X_WrByte>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_device_read_strobe(Dev);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff fdca 	bl	800376e <VL53L0X_device_read_strobe>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003be8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bec:	461a      	mov	r2, r3
 8003bee:	2190      	movs	r1, #144	; 0x90
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f002 fa02 	bl	8005ffa <VL53L0X_RdDWord>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            ProductId[4] = (char) (byte +
                                   ((TmpDWord >> 29) & 0x07f));
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	0f5b      	lsrs	r3, r3, #29
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c0e:	b2da      	uxtb	r2, r3
            ProductId[4] = (char) (byte +
 8003c10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c14:	4413      	add	r3, r2
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	753b      	strb	r3, [r7, #20]
            ProductId[5] = (char) ((TmpDWord >> 22) & 0x07f);
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	0d9b      	lsrs	r3, r3, #22
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	757b      	strb	r3, [r7, #21]
            ProductId[6] = (char) ((TmpDWord >> 15) & 0x07f);
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	0bdb      	lsrs	r3, r3, #15
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	75bb      	strb	r3, [r7, #22]
            ProductId[7] = (char) ((TmpDWord >> 8) & 0x07f);
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	0a1b      	lsrs	r3, r3, #8
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	75fb      	strb	r3, [r7, #23]
            ProductId[8] = (char) ((TmpDWord >> 1) & 0x07f);
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	085b      	lsrs	r3, r3, #1
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	763b      	strb	r3, [r7, #24]

            byte = (uint8_t) ((TmpDWord & 0x001) << 6);
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	019b      	lsls	r3, r3, #6
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

            Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003c64:	2279      	movs	r2, #121	; 0x79
 8003c66:	2194      	movs	r1, #148	; 0x94
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f002 f902 	bl	8005e72 <VL53L0X_WrByte>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	461a      	mov	r2, r3
 8003c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            Status |= VL53L0X_device_read_strobe(Dev);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff fd76 	bl	800376e <VL53L0X_device_read_strobe>
 8003c82:	4603      	mov	r3, r0
 8003c84:	461a      	mov	r2, r3
 8003c86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003c90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c94:	461a      	mov	r2, r3
 8003c96:	2190      	movs	r1, #144	; 0x90
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f002 f9ae 	bl	8005ffa <VL53L0X_RdDWord>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            ProductId[9] = (char) (byte +
                                   ((TmpDWord >> 26) & 0x07f));
 8003cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cae:	0e9b      	lsrs	r3, r3, #26
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cb6:	b2da      	uxtb	r2, r3
            ProductId[9] = (char) (byte +
 8003cb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003cbc:	4413      	add	r3, r2
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	767b      	strb	r3, [r7, #25]
            ProductId[10] = (char) ((TmpDWord >> 19) & 0x07f);
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc4:	0cdb      	lsrs	r3, r3, #19
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	76bb      	strb	r3, [r7, #26]
            ProductId[11] = (char) ((TmpDWord >> 12) & 0x07f);
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd2:	0b1b      	lsrs	r3, r3, #12
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	76fb      	strb	r3, [r7, #27]
            ProductId[12] = (char) ((TmpDWord >> 5) & 0x07f);
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	095b      	lsrs	r3, r3, #5
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	773b      	strb	r3, [r7, #28]

            byte = (uint8_t) ((TmpDWord & 0x01f) << 2);
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

            Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8003cfe:	227a      	movs	r2, #122	; 0x7a
 8003d00:	2194      	movs	r1, #148	; 0x94
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f002 f8b5 	bl	8005e72 <VL53L0X_WrByte>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            Status |= VL53L0X_device_read_strobe(Dev);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff fd29 	bl	800376e <VL53L0X_device_read_strobe>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003d2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d2e:	461a      	mov	r2, r3
 8003d30:	2190      	movs	r1, #144	; 0x90
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f002 f961 	bl	8005ffa <VL53L0X_RdDWord>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            ProductId[13] = (char) (byte +
                                    ((TmpDWord >> 30) & 0x07f));
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	0f9b      	lsrs	r3, r3, #30
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d50:	b2da      	uxtb	r2, r3
            ProductId[13] = (char) (byte +
 8003d52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003d56:	4413      	add	r3, r2
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	777b      	strb	r3, [r7, #29]
            ProductId[14] = (char) ((TmpDWord >> 23) & 0x07f);
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5e:	0ddb      	lsrs	r3, r3, #23
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	77bb      	strb	r3, [r7, #30]
            ProductId[15] = (char) ((TmpDWord >> 16) & 0x07f);
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	0c1b      	lsrs	r3, r3, #16
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	77fb      	strb	r3, [r7, #31]
            ProductId[16] = (char) ((TmpDWord >> 9) & 0x07f);
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	0a5b      	lsrs	r3, r3, #9
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	f887 3020 	strb.w	r3, [r7, #32]
            ProductId[17] = (char) ((TmpDWord >> 2) & 0x07f);
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	089b      	lsrs	r3, r3, #2
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            ProductId[18] = '\0';
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        }

        if (((option & 4) == 4) &&
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 80f1 	beq.w	8003f8c <VL53L0X_get_info_from_device+0x798>
            ((ReadDataFromDeviceDone & 4) == 0)) {
 8003daa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003dae:	f003 0304 	and.w	r3, r3, #4
        if (((option & 4) == 4) &&
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f040 80ea 	bne.w	8003f8c <VL53L0X_get_info_from_device+0x798>
            Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003db8:	227b      	movs	r2, #123	; 0x7b
 8003dba:	2194      	movs	r1, #148	; 0x94
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f002 f858 	bl	8005e72 <VL53L0X_WrByte>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_device_read_strobe(Dev);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff fccc 	bl	800376e <VL53L0X_device_read_strobe>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8003de4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003de8:	461a      	mov	r2, r3
 8003dea:	2190      	movs	r1, #144	; 0x90
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f002 f904 	bl	8005ffa <VL53L0X_RdDWord>
 8003df2:	4603      	mov	r3, r0
 8003df4:	461a      	mov	r2, r3
 8003df6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8003e00:	227c      	movs	r2, #124	; 0x7c
 8003e02:	2194      	movs	r1, #148	; 0x94
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f002 f834 	bl	8005e72 <VL53L0X_WrByte>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_device_read_strobe(Dev);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff fca8 	bl	800376e <VL53L0X_device_read_strobe>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	461a      	mov	r2, r3
 8003e22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8003e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e30:	461a      	mov	r2, r3
 8003e32:	2190      	movs	r1, #144	; 0x90
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f002 f8e0 	bl	8005ffa <VL53L0X_RdDWord>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8003e48:	2273      	movs	r2, #115	; 0x73
 8003e4a:	2194      	movs	r1, #148	; 0x94
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f002 f810 	bl	8005e72 <VL53L0X_WrByte>
 8003e52:	4603      	mov	r3, r0
 8003e54:	461a      	mov	r2, r3
 8003e56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_device_read_strobe(Dev);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff fc84 	bl	800376e <VL53L0X_device_read_strobe>
 8003e66:	4603      	mov	r3, r0
 8003e68:	461a      	mov	r2, r3
 8003e6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003e74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e78:	461a      	mov	r2, r3
 8003e7a:	2190      	movs	r1, #144	; 0x90
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f002 f8bc 	bl	8005ffa <VL53L0X_RdDWord>
 8003e82:	4603      	mov	r3, r0
 8003e84:	461a      	mov	r2, r3
 8003e86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            SignalRateMeasFixed1104_400_mm = (TmpDWord &
                                              0x0000000ff) << 8;
 8003e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e92:	021b      	lsls	r3, r3, #8
            SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	653b      	str	r3, [r7, #80]	; 0x50

            Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003e98:	2274      	movs	r2, #116	; 0x74
 8003e9a:	2194      	movs	r1, #148	; 0x94
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f001 ffe8 	bl	8005e72 <VL53L0X_WrByte>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_device_read_strobe(Dev);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff fc5c 	bl	800376e <VL53L0X_device_read_strobe>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	461a      	mov	r2, r3
 8003eba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003ec4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ec8:	461a      	mov	r2, r3
 8003eca:	2190      	movs	r1, #144	; 0x90
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f002 f894 	bl	8005ffa <VL53L0X_RdDWord>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
                                                0xff000000) >> 24);
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	0e1b      	lsrs	r3, r3, #24
            SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8003ee4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	653b      	str	r3, [r7, #80]	; 0x50

            Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8003eea:	2275      	movs	r2, #117	; 0x75
 8003eec:	2194      	movs	r1, #148	; 0x94
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f001 ffbf 	bl	8005e72 <VL53L0X_WrByte>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_device_read_strobe(Dev);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff fc33 	bl	800376e <VL53L0X_device_read_strobe>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003f16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2190      	movs	r1, #144	; 0x90
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f002 f86b 	bl	8005ffa <VL53L0X_RdDWord>
 8003f24:	4603      	mov	r3, r0
 8003f26:	461a      	mov	r2, r3
 8003f28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff) <<
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	657b      	str	r3, [r7, #84]	; 0x54
                                       8;

            Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003f3a:	2276      	movs	r2, #118	; 0x76
 8003f3c:	2194      	movs	r1, #148	; 0x94
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f001 ff97 	bl	8005e72 <VL53L0X_WrByte>
 8003f44:	4603      	mov	r3, r0
 8003f46:	461a      	mov	r2, r3
 8003f48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_device_read_strobe(Dev);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff fc0b 	bl	800376e <VL53L0X_device_read_strobe>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003f66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	2190      	movs	r1, #144	; 0x90
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f002 f843 	bl	8005ffa <VL53L0X_RdDWord>
 8003f74:	4603      	mov	r3, r0
 8003f76:	461a      	mov	r2, r3
 8003f78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000) >>
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	0e1b      	lsrs	r3, r3, #24
 8003f86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	657b      	str	r3, [r7, #84]	; 0x54
                                         24);
        }

        Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2181      	movs	r1, #129	; 0x81
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f001 ff6e 	bl	8005e72 <VL53L0X_WrByte>
 8003f96:	4603      	mov	r3, r0
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003fa4:	2206      	movs	r2, #6
 8003fa6:	21ff      	movs	r1, #255	; 0xff
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f001 ff62 	bl	8005e72 <VL53L0X_WrByte>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003fbc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2183      	movs	r1, #131	; 0x83
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f001 ffdd 	bl	8005f84 <VL53L0X_RdByte>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	461a      	mov	r2, r3
 8003fce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        Status |= VL53L0X_WrByte(Dev, 0x83, byte & 0xfb);
 8003fd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003fdc:	f023 0304 	bic.w	r3, r3, #4
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	2183      	movs	r1, #131	; 0x83
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f001 ff43 	bl	8005e72 <VL53L0X_WrByte>
 8003fec:	4603      	mov	r3, r0
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	21ff      	movs	r1, #255	; 0xff
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f001 ff37 	bl	8005e72 <VL53L0X_WrByte>
 8004004:	4603      	mov	r3, r0
 8004006:	461a      	mov	r2, r3
 8004008:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800400c:	4313      	orrs	r3, r2
 800400e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004012:	2201      	movs	r2, #1
 8004014:	2100      	movs	r1, #0
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f001 ff2b 	bl	8005e72 <VL53L0X_WrByte>
 800401c:	4603      	mov	r3, r0
 800401e:	461a      	mov	r2, r3
 8004020:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004024:	4313      	orrs	r3, r2
 8004026:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

        Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800402a:	2200      	movs	r2, #0
 800402c:	21ff      	movs	r1, #255	; 0xff
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f001 ff1f 	bl	8005e72 <VL53L0X_WrByte>
 8004034:	4603      	mov	r3, r0
 8004036:	461a      	mov	r2, r3
 8004038:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800403c:	4313      	orrs	r3, r2
 800403e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004042:	2200      	movs	r2, #0
 8004044:	2180      	movs	r1, #128	; 0x80
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f001 ff13 	bl	8005e72 <VL53L0X_WrByte>
 800404c:	4603      	mov	r3, r0
 800404e:	461a      	mov	r2, r3
 8004050:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004054:	4313      	orrs	r3, r2
 8004056:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }

    if ((Status == VL53L0X_ERROR_NONE) &&
 800405a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800405e:	2b00      	cmp	r3, #0
 8004060:	f040 808f 	bne.w	8004182 <VL53L0X_get_info_from_device+0x98e>
 8004064:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004068:	2b07      	cmp	r3, #7
 800406a:	f000 808a 	beq.w	8004182 <VL53L0X_get_info_from_device+0x98e>
        (ReadDataFromDeviceDone != 7)) {
        /* Assign to variable if status is ok */
        if (((option & 1) == 1) &&
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d024      	beq.n	80040c2 <VL53L0X_get_info_from_device+0x8ce>
            ((ReadDataFromDeviceDone & 1) == 0)) {
 8004078:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800407c:	f003 0301 	and.w	r3, r3, #1
        if (((option & 1) == 1) &&
 8004080:	2b00      	cmp	r3, #0
 8004082:	d11e      	bne.n	80040c2 <VL53L0X_get_info_from_device+0x8ce>
            VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800408a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
                                               ReferenceSpadCount, ReferenceSpadCount);

            VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8004094:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                                               ReferenceSpadType, ReferenceSpadType);

            for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8004098:	2300      	movs	r3, #0
 800409a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800409c:	e00e      	b.n	80040bc <VL53L0X_get_info_from_device+0x8c8>
                Dev->Data.SpadData.RefGoodSpadMap[i] =
                    NvmRefGoodSpadMap[i];
 800409e:	f107 0208 	add.w	r2, r7, #8
 80040a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a4:	4413      	add	r3, r2
 80040a6:	7819      	ldrb	r1, [r3, #0]
                Dev->Data.SpadData.RefGoodSpadMap[i] =
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80040b2:	460a      	mov	r2, r1
 80040b4:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80040b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b8:	3301      	adds	r3, #1
 80040ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040be:	2b05      	cmp	r3, #5
 80040c0:	dded      	ble.n	800409e <VL53L0X_get_info_from_device+0x8aa>
            }
        }

        if (((option & 2) == 2) &&
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d018      	beq.n	80040fe <VL53L0X_get_info_from_device+0x90a>
            ((ReadDataFromDeviceDone & 2) == 0)) {
 80040cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80040d0:	f003 0302 	and.w	r3, r3, #2
        if (((option & 2) == 2) &&
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d112      	bne.n	80040fe <VL53L0X_get_info_from_device+0x90a>
            VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80040d8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
                                               ModuleId, ModuleId);

            VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80040e2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
                                               Revision, Revision);

            ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	33f3      	adds	r3, #243	; 0xf3
 80040f0:	63bb      	str	r3, [r7, #56]	; 0x38
                                                               ProductId);
            VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80040f2:	f107 0310 	add.w	r3, r7, #16
 80040f6:	4619      	mov	r1, r3
 80040f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80040fa:	f005 fb65 	bl	80097c8 <strcpy>
        }

        if (((option & 4) == 4) &&
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d030      	beq.n	800416a <VL53L0X_get_info_from_device+0x976>
            ((ReadDataFromDeviceDone & 4) == 0)) {
 8004108:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800410c:	f003 0304 	and.w	r3, r3, #4
        if (((option & 4) == 4) &&
 8004110:	2b00      	cmp	r3, #0
 8004112:	d12a      	bne.n	800416a <VL53L0X_get_info_from_device+0x976>
            VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                                               PartUIDUpper, PartUIDUpper);

            VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800411c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
                                               PartUIDLower, PartUIDLower);

            SignalRateMeasFixed400mmFix =
 8004124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004126:	025b      	lsls	r3, r3, #9
 8004128:	643b      	str	r3, [r7, #64]	; 0x40
                VL53L0X_FIXPOINT97TOFIXPOINT1616(
                    SignalRateMeasFixed1104_400_mm);

            VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800412e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
                                               SignalRateMeasFixed400mm,
                                               SignalRateMeasFixed400mmFix);

            OffsetMicroMeters = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            if (DistMeasFixed1104_400_mm != 0) {
 8004138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800413a:	2b00      	cmp	r3, #0
 800413c:	d011      	beq.n	8004162 <VL53L0X_get_info_from_device+0x96e>
                OffsetFixed1104_mm =
 800413e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	64bb      	str	r3, [r7, #72]	; 0x48
                    DistMeasFixed1104_400_mm -
                    DistMeasTgtFixed1104_mm;
                OffsetMicroMeters = (OffsetFixed1104_mm *
 8004146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004148:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800414c:	fb02 f303 	mul.w	r3, r2, r3
                                     1000) >> 4;
 8004150:	091b      	lsrs	r3, r3, #4
                OffsetMicroMeters = (OffsetFixed1104_mm *
 8004152:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                OffsetMicroMeters *= -1;
 8004156:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800415a:	425b      	negs	r3, r3
 800415c:	b29b      	uxth	r3, r3
 800415e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            }

            PALDevDataSet(Dev,
 8004162:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	60da      	str	r2, [r3, #12]
                          Part2PartOffsetAdjustmentNVMMicroMeter,
                          OffsetMicroMeters);
        }

        byte = (uint8_t) (ReadDataFromDeviceDone | option);
 800416a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	4313      	orrs	r3, r2
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8004178:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
                                           byte);
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8004182:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8004186:	4618      	mov	r0, r3
 8004188:	3760      	adds	r7, #96	; 0x60
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <VL53L0X_calc_macro_period_ps>:

uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks) {
 800418e:	b480      	push	{r7}
 8004190:	b087      	sub	sp, #28
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	460b      	mov	r3, r1
 8004198:	70fb      	strb	r3, [r7, #3]
    LOG_FUNCTION_START("");

    /* The above calculation will produce rounding errors,
     * therefore set fixed value
     */
    PLL_period_ps = 1655;
 800419a:	f240 6277 	movw	r2, #1655	; 0x677
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	e9c7 2304 	strd	r2, r3, [r7, #16]

    macro_period_vclks = 2304;
 80041a6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80041aa:	60fb      	str	r3, [r7, #12]
    macro_period_ps = (uint32_t) (macro_period_vclks *
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	fb02 f303 	mul.w	r3, r2, r3
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	60bb      	str	r3, [r7, #8]
                                  vcsel_period_pclks * PLL_period_ps);

    LOG_FUNCTION_END("");
    return macro_period_ps;
 80041bc:	68bb      	ldr	r3, [r7, #8]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks) {
 80041ca:	b480      	push	{r7}
 80041cc:	b087      	sub	sp, #28
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
    /*!
     * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
     */

    uint16_t encoded_timeout = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	82fb      	strh	r3, [r7, #22]
    uint32_t ls_byte = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
    uint16_t ms_byte = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	81fb      	strh	r3, [r7, #14]

    if (timeout_macro_clks > 0) {
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d017      	beq.n	8004214 <VL53L0X_encode_timeout+0x4a>
        ls_byte = timeout_macro_clks - 1;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	613b      	str	r3, [r7, #16]

        while ((ls_byte & 0xFFFFFF00) > 0) {
 80041ea:	e005      	b.n	80041f8 <VL53L0X_encode_timeout+0x2e>
            ls_byte = ls_byte >> 1;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	085b      	lsrs	r3, r3, #1
 80041f0:	613b      	str	r3, [r7, #16]
            ms_byte++;
 80041f2:	89fb      	ldrh	r3, [r7, #14]
 80041f4:	3301      	adds	r3, #1
 80041f6:	81fb      	strh	r3, [r7, #14]
        while ((ls_byte & 0xFFFFFF00) > 0) {
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f4      	bne.n	80041ec <VL53L0X_encode_timeout+0x22>
        }

        encoded_timeout = (ms_byte << 8) +
 8004202:	89fb      	ldrh	r3, [r7, #14]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	b29a      	uxth	r2, r3
                          (uint16_t) (ls_byte & 0x000000FF);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	b29b      	uxth	r3, r3
 800420c:	b2db      	uxtb	r3, r3
 800420e:	b29b      	uxth	r3, r3
        encoded_timeout = (ms_byte << 8) +
 8004210:	4413      	add	r3, r2
 8004212:	82fb      	strh	r3, [r7, #22]
    }

    return encoded_timeout;
 8004214:	8afb      	ldrh	r3, [r7, #22]
}
 8004216:	4618      	mov	r0, r3
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout) {
 8004222:	b480      	push	{r7}
 8004224:	b085      	sub	sp, #20
 8004226:	af00      	add	r7, sp, #0
 8004228:	4603      	mov	r3, r0
 800422a:	80fb      	strh	r3, [r7, #6]
    /*!
     * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
     */

    uint32_t timeout_macro_clks = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]

    timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF) <<
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	b2db      	uxtb	r3, r3
                          (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8004234:	88fa      	ldrh	r2, [r7, #6]
 8004236:	0a12      	lsrs	r2, r2, #8
 8004238:	b292      	uxth	r2, r2
    timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF) <<
 800423a:	4093      	lsls	r3, r2
 800423c:	3301      	adds	r3, #1
 800423e:	60fb      	str	r3, [r7, #12]

    return timeout_macro_clks;
 8004240:	68fb      	ldr	r3, [r7, #12]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev, uint32_t timeout_period_us, uint8_t vcsel_period_pclks) {
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	4613      	mov	r3, r2
 800425c:	71fb      	strb	r3, [r7, #7]
    uint32_t macro_period_ps;
    uint32_t macro_period_ns;
    uint32_t timeout_period_mclks = 0;
 800425e:	2300      	movs	r3, #0
 8004260:	61fb      	str	r3, [r7, #28]

    macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	4619      	mov	r1, r3
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f7ff ff91 	bl	800418e <VL53L0X_calc_macro_period_ps>
 800426c:	61b8      	str	r0, [r7, #24]
    macro_period_ns = (macro_period_ps + 500) / 1000;
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004274:	4a0a      	ldr	r2, [pc, #40]	; (80042a0 <VL53L0X_calc_timeout_mclks+0x50>)
 8004276:	fba2 2303 	umull	r2, r3, r2, r3
 800427a:	099b      	lsrs	r3, r3, #6
 800427c:	617b      	str	r3, [r7, #20]

    timeout_period_mclks =
        (uint32_t) (((timeout_period_us * 1000) +
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004284:	fb02 f203 	mul.w	r2, r2, r3
                     (macro_period_ns / 2)) / macro_period_ns);
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	085b      	lsrs	r3, r3, #1
        (uint32_t) (((timeout_period_us * 1000) +
 800428c:	441a      	add	r2, r3
    timeout_period_mclks =
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	fbb2 f3f3 	udiv	r3, r2, r3
 8004294:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8004296:	69fb      	ldr	r3, [r7, #28]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3720      	adds	r7, #32
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	10624dd3 	.word	0x10624dd3

080042a4 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev, uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	807b      	strh	r3, [r7, #2]
 80042b0:	4613      	mov	r3, r2
 80042b2:	707b      	strb	r3, [r7, #1]
    uint32_t macro_period_ps;
    uint32_t macro_period_ns;
    uint32_t actual_timeout_period_us = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]

    macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80042b8:	787b      	ldrb	r3, [r7, #1]
 80042ba:	4619      	mov	r1, r3
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff ff66 	bl	800418e <VL53L0X_calc_macro_period_ps>
 80042c2:	6138      	str	r0, [r7, #16]
    macro_period_ns = (macro_period_ps + 500) / 1000;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80042ca:	4a0a      	ldr	r2, [pc, #40]	; (80042f4 <VL53L0X_calc_timeout_us+0x50>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	099b      	lsrs	r3, r3, #6
 80042d2:	60fb      	str	r3, [r7, #12]

    actual_timeout_period_us =
        ((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 80042d4:	887b      	ldrh	r3, [r7, #2]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	fb02 f303 	mul.w	r3, r2, r3
 80042dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
    actual_timeout_period_us =
 80042e0:	4a04      	ldr	r2, [pc, #16]	; (80042f4 <VL53L0X_calc_timeout_us+0x50>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	099b      	lsrs	r3, r3, #6
 80042e8:	617b      	str	r3, [r7, #20]

    return actual_timeout_period_us;
 80042ea:	697b      	ldr	r3, [r7, #20]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	10624dd3 	.word	0x10624dd3

080042f8 <get_sequence_step_timeout>:

VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev, VL53L0X_SequenceStepId SequenceStepId,
                                        uint32_t*              pTimeOutMicroSecs) {
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08c      	sub	sp, #48	; 0x30
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	460b      	mov	r3, r1
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004306:	2300      	movs	r3, #0
 8004308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t CurrentVCSELPulsePeriodPClk;
    uint8_t EncodedTimeOutByte = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	f887 3020 	strb.w	r3, [r7, #32]
    uint32_t TimeoutMicroSeconds = 0;
 8004312:	2300      	movs	r3, #0
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
    uint16_t PreRangeEncodedTimeOut = 0;
 8004316:	2300      	movs	r3, #0
 8004318:	83fb      	strh	r3, [r7, #30]
    uint16_t MsrcTimeOutMClks;
    uint16_t PreRangeTimeOutMClks;
    uint16_t FinalRangeTimeOutMClks = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t FinalRangeEncodedTimeOut;
    VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

    if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC) ||
 800431e:	7afb      	ldrb	r3, [r7, #11]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <get_sequence_step_timeout+0x38>
 8004324:	7afb      	ldrb	r3, [r7, #11]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d002      	beq.n	8004330 <get_sequence_step_timeout+0x38>
        (SequenceStepId == VL53L0X_SEQUENCESTEP_DSS) ||
 800432a:	7afb      	ldrb	r3, [r7, #11]
 800432c:	2b02      	cmp	r3, #2
 800432e:	d128      	bne.n	8004382 <get_sequence_step_timeout+0x8a>
        (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {
        Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004330:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004334:	461a      	mov	r2, r3
 8004336:	2100      	movs	r1, #0
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f7fd fa29 	bl	8001790 <VL53L0X_GetVcselPulsePeriod>
 800433e:	4603      	mov	r3, r0
 8004340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                             VL53L0X_VCSEL_PERIOD_PRE_RANGE,
                                             &CurrentVCSELPulsePeriodPClk);

        if (Status == VL53L0X_ERROR_NONE) {
 8004344:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <get_sequence_step_timeout+0x68>
            Status = VL53L0X_RdByte(Dev,
 800434c:	f107 0320 	add.w	r3, r7, #32
 8004350:	461a      	mov	r2, r3
 8004352:	2146      	movs	r1, #70	; 0x46
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f001 fe15 	bl	8005f84 <VL53L0X_RdByte>
 800435a:	4603      	mov	r3, r0
 800435c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                    VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
                                    &EncodedTimeOutByte);
        }

        MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8004360:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004364:	b29b      	uxth	r3, r3
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff ff5b 	bl	8004222 <VL53L0X_decode_timeout>
 800436c:	4603      	mov	r3, r0
 800436e:	847b      	strh	r3, [r7, #34]	; 0x22

        TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8004370:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004374:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004376:	4619      	mov	r1, r3
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7ff ff93 	bl	80042a4 <VL53L0X_calc_timeout_us>
 800437e:	62b8      	str	r0, [r7, #40]	; 0x28
 8004380:	e092      	b.n	80044a8 <get_sequence_step_timeout+0x1b0>
                                                      MsrcTimeOutMClks,
                                                      CurrentVCSELPulsePeriodPClk);
    } else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8004382:	7afb      	ldrb	r3, [r7, #11]
 8004384:	2b03      	cmp	r3, #3
 8004386:	d135      	bne.n	80043f4 <get_sequence_step_timeout+0xfc>
        /* Retrieve PRE-RANGE VCSEL Period */
        Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004388:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800438c:	461a      	mov	r2, r3
 800438e:	2100      	movs	r1, #0
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f7fd f9fd 	bl	8001790 <VL53L0X_GetVcselPulsePeriod>
 8004396:	4603      	mov	r3, r0
 8004398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                             VL53L0X_VCSEL_PERIOD_PRE_RANGE,
                                             &CurrentVCSELPulsePeriodPClk);

        /* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
        if (Status == VL53L0X_ERROR_NONE) {
 800439c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f040 8081 	bne.w	80044a8 <get_sequence_step_timeout+0x1b0>
            /* Retrieve PRE-RANGE VCSEL Period */
            Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80043a6:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80043aa:	461a      	mov	r2, r3
 80043ac:	2100      	movs	r1, #0
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f7fd f9ee 	bl	8001790 <VL53L0X_GetVcselPulsePeriod>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                                 VL53L0X_VCSEL_PERIOD_PRE_RANGE,
                                                 &CurrentVCSELPulsePeriodPClk);

            if (Status == VL53L0X_ERROR_NONE) {
 80043ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <get_sequence_step_timeout+0xde>
                Status = VL53L0X_RdWord(Dev,
 80043c2:	f107 031e 	add.w	r3, r7, #30
 80043c6:	461a      	mov	r2, r3
 80043c8:	2151      	movs	r1, #81	; 0x51
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f001 fdf3 	bl	8005fb6 <VL53L0X_RdWord>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                        VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
                                        &PreRangeEncodedTimeOut);
            }

            PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80043d6:	8bfb      	ldrh	r3, [r7, #30]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff ff22 	bl	8004222 <VL53L0X_decode_timeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	84fb      	strh	r3, [r7, #38]	; 0x26
                PreRangeEncodedTimeOut);

            TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80043e2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80043e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043e8:	4619      	mov	r1, r3
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f7ff ff5a 	bl	80042a4 <VL53L0X_calc_timeout_us>
 80043f0:	62b8      	str	r0, [r7, #40]	; 0x28
 80043f2:	e059      	b.n	80044a8 <get_sequence_step_timeout+0x1b0>
                                                          PreRangeTimeOutMClks,
                                                          CurrentVCSELPulsePeriodPClk);
        }
    } else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80043f4:	7afb      	ldrb	r3, [r7, #11]
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d156      	bne.n	80044a8 <get_sequence_step_timeout+0x1b0>
        VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80043fa:	f107 0314 	add.w	r3, r7, #20
 80043fe:	4619      	mov	r1, r3
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f7fd fad1 	bl	80019a8 <VL53L0X_GetSequenceStepEnables>
        PreRangeTimeOutMClks = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	84fb      	strh	r3, [r7, #38]	; 0x26

        if (SchedulerSequenceSteps.PreRangeOn) {
 800440a:	7dfb      	ldrb	r3, [r7, #23]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01d      	beq.n	800444c <get_sequence_step_timeout+0x154>
            /* Retrieve PRE-RANGE VCSEL Period */
            Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004410:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004414:	461a      	mov	r2, r3
 8004416:	2100      	movs	r1, #0
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f7fd f9b9 	bl	8001790 <VL53L0X_GetVcselPulsePeriod>
 800441e:	4603      	mov	r3, r0
 8004420:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                                 VL53L0X_VCSEL_PERIOD_PRE_RANGE,
                                                 &CurrentVCSELPulsePeriodPClk);

            /* Retrieve PRE-RANGE Timeout in Macro periods
             * (MCLKS) */
            if (Status == VL53L0X_ERROR_NONE) {
 8004424:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10f      	bne.n	800444c <get_sequence_step_timeout+0x154>
                Status = VL53L0X_RdWord(Dev,
 800442c:	f107 031e 	add.w	r3, r7, #30
 8004430:	461a      	mov	r2, r3
 8004432:	2151      	movs	r1, #81	; 0x51
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f001 fdbe 	bl	8005fb6 <VL53L0X_RdWord>
 800443a:	4603      	mov	r3, r0
 800443c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                        VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
                                        &PreRangeEncodedTimeOut);
                PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8004440:	8bfb      	ldrh	r3, [r7, #30]
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff feed 	bl	8004222 <VL53L0X_decode_timeout>
 8004448:	4603      	mov	r3, r0
 800444a:	84fb      	strh	r3, [r7, #38]	; 0x26
                    PreRangeEncodedTimeOut);
            }
        }

        if (Status == VL53L0X_ERROR_NONE) {
 800444c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004450:	2b00      	cmp	r3, #0
 8004452:	d109      	bne.n	8004468 <get_sequence_step_timeout+0x170>
            /* Retrieve FINAL-RANGE VCSEL Period */
            Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004454:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004458:	461a      	mov	r2, r3
 800445a:	2101      	movs	r1, #1
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7fd f997 	bl	8001790 <VL53L0X_GetVcselPulsePeriod>
 8004462:	4603      	mov	r3, r0
 8004464:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                                 VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
                                                 &CurrentVCSELPulsePeriodPClk);
        }

        /* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
        if (Status == VL53L0X_ERROR_NONE) {
 8004468:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10f      	bne.n	8004490 <get_sequence_step_timeout+0x198>
            Status = VL53L0X_RdWord(Dev,
 8004470:	f107 031c 	add.w	r3, r7, #28
 8004474:	461a      	mov	r2, r3
 8004476:	2171      	movs	r1, #113	; 0x71
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f001 fd9c 	bl	8005fb6 <VL53L0X_RdWord>
 800447e:	4603      	mov	r3, r0
 8004480:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                    VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
                                    &FinalRangeEncodedTimeOut);
            FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8004484:	8bbb      	ldrh	r3, [r7, #28]
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fecb 	bl	8004222 <VL53L0X_decode_timeout>
 800448c:	4603      	mov	r3, r0
 800448e:	84bb      	strh	r3, [r7, #36]	; 0x24
                FinalRangeEncodedTimeOut);
        }

        FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8004490:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004492:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	84bb      	strh	r3, [r7, #36]	; 0x24
        TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8004498:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800449c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800449e:	4619      	mov	r1, r3
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f7ff feff 	bl	80042a4 <VL53L0X_calc_timeout_us>
 80044a6:	62b8      	str	r0, [r7, #40]	; 0x28
                                                      FinalRangeTimeOutMClks,
                                                      CurrentVCSELPulsePeriodPClk);
    }

    *pTimeOutMicroSecs = TimeoutMicroSeconds;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ac:	601a      	str	r2, [r3, #0]

    return Status;
 80044ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3730      	adds	r7, #48	; 0x30
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <set_sequence_step_timeout>:

VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev, VL53L0X_SequenceStepId SequenceStepId,
                                        uint32_t TimeOutMicroSecs) {
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b08a      	sub	sp, #40	; 0x28
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	460b      	mov	r3, r1
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044c8:	2300      	movs	r3, #0
 80044ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t MsrcRangeTimeOutMClks;
    uint32_t FinalRangeTimeOutMClks;
    uint16_t FinalRangeEncodedTimeOut;
    VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

    if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC) ||
 80044ce:	7afb      	ldrb	r3, [r7, #11]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <set_sequence_step_timeout+0x26>
 80044d4:	7afb      	ldrb	r3, [r7, #11]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d002      	beq.n	80044e0 <set_sequence_step_timeout+0x26>
        (SequenceStepId == VL53L0X_SEQUENCESTEP_DSS) ||
 80044da:	7afb      	ldrb	r3, [r7, #11]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d138      	bne.n	8004552 <set_sequence_step_timeout+0x98>
        (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {
        Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80044e0:	f107 031b 	add.w	r3, r7, #27
 80044e4:	461a      	mov	r2, r3
 80044e6:	2100      	movs	r1, #0
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f7fd f951 	bl	8001790 <VL53L0X_GetVcselPulsePeriod>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                             VL53L0X_VCSEL_PERIOD_PRE_RANGE,
                                             &CurrentVCSELPulsePeriodPClk);

        if (Status == VL53L0X_ERROR_NONE) {
 80044f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d11a      	bne.n	8004532 <set_sequence_step_timeout+0x78>
            MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80044fc:	7efb      	ldrb	r3, [r7, #27]
 80044fe:	461a      	mov	r2, r3
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f7ff fea4 	bl	8004250 <VL53L0X_calc_timeout_mclks>
 8004508:	4603      	mov	r3, r0
 800450a:	83bb      	strh	r3, [r7, #28]
                                                               TimeOutMicroSecs,
                                                               (uint8_t) CurrentVCSELPulsePeriodPClk);

            if (MsrcRangeTimeOutMClks > 256) {
 800450c:	8bbb      	ldrh	r3, [r7, #28]
 800450e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004512:	d903      	bls.n	800451c <set_sequence_step_timeout+0x62>
                MsrcEncodedTimeOut = 255;
 8004514:	23ff      	movs	r3, #255	; 0xff
 8004516:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800451a:	e004      	b.n	8004526 <set_sequence_step_timeout+0x6c>
            } else {
                MsrcEncodedTimeOut =
                    (uint8_t) MsrcRangeTimeOutMClks - 1;
 800451c:	8bbb      	ldrh	r3, [r7, #28]
 800451e:	b2db      	uxtb	r3, r3
                MsrcEncodedTimeOut =
 8004520:	3b01      	subs	r3, #1
 8004522:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }

            VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004526:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800452a:	b29a      	uxth	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
                                               LastEncodedTimeout,
                                               MsrcEncodedTimeOut);
        }

        if (Status == VL53L0X_ERROR_NONE) {
 8004532:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004536:	2b00      	cmp	r3, #0
 8004538:	f040 80ab 	bne.w	8004692 <set_sequence_step_timeout+0x1d8>
            Status = VL53L0X_WrByte(Dev,
 800453c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004540:	461a      	mov	r2, r3
 8004542:	2146      	movs	r1, #70	; 0x46
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f001 fc94 	bl	8005e72 <VL53L0X_WrByte>
 800454a:	4603      	mov	r3, r0
 800454c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (Status == VL53L0X_ERROR_NONE) {
 8004550:	e09f      	b.n	8004692 <set_sequence_step_timeout+0x1d8>
                                    VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
                                    MsrcEncodedTimeOut);
        }
    } else {
        if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8004552:	7afb      	ldrb	r3, [r7, #11]
 8004554:	2b03      	cmp	r3, #3
 8004556:	d135      	bne.n	80045c4 <set_sequence_step_timeout+0x10a>
            if (Status == VL53L0X_ERROR_NONE) {
 8004558:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800455c:	2b00      	cmp	r3, #0
 800455e:	d11b      	bne.n	8004598 <set_sequence_step_timeout+0xde>
                Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004560:	f107 031b 	add.w	r3, r7, #27
 8004564:	461a      	mov	r2, r3
 8004566:	2100      	movs	r1, #0
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f7fd f911 	bl	8001790 <VL53L0X_GetVcselPulsePeriod>
 800456e:	4603      	mov	r3, r0
 8004570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                     VL53L0X_VCSEL_PERIOD_PRE_RANGE,
                                                     &CurrentVCSELPulsePeriodPClk);
                PreRangeTimeOutMClks =
                    VL53L0X_calc_timeout_mclks(Dev,
 8004574:	7efb      	ldrb	r3, [r7, #27]
 8004576:	461a      	mov	r2, r3
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f7ff fe68 	bl	8004250 <VL53L0X_calc_timeout_mclks>
 8004580:	4603      	mov	r3, r0
                PreRangeTimeOutMClks =
 8004582:	84bb      	strh	r3, [r7, #36]	; 0x24
                                               TimeOutMicroSecs,
                                               (uint8_t) CurrentVCSELPulsePeriodPClk);
                PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8004584:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fe1f 	bl	80041ca <VL53L0X_encode_timeout>
 800458c:	4603      	mov	r3, r0
 800458e:	833b      	strh	r3, [r7, #24]
                    PreRangeTimeOutMClks);

                VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004590:	8b3a      	ldrh	r2, [r7, #24]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
                                                   LastEncodedTimeout,
                                                   PreRangeEncodedTimeOut);
            }

            if (Status == VL53L0X_ERROR_NONE) {
 8004598:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800459c:	2b00      	cmp	r3, #0
 800459e:	d108      	bne.n	80045b2 <set_sequence_step_timeout+0xf8>
                Status = VL53L0X_WrWord(Dev,
 80045a0:	8b3b      	ldrh	r3, [r7, #24]
 80045a2:	461a      	mov	r2, r3
 80045a4:	2151      	movs	r1, #81	; 0x51
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f001 fc7d 	bl	8005ea6 <VL53L0X_WrWord>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
                                        PreRangeEncodedTimeOut);
            }

            if (Status == VL53L0X_ERROR_NONE) {
 80045b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d16b      	bne.n	8004692 <set_sequence_step_timeout+0x1d8>
                VL53L0X_SETDEVICESPECIFICPARAMETER(
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80045c2:	e066      	b.n	8004692 <set_sequence_step_timeout+0x1d8>
                    Dev,
                    PreRangeTimeoutMicroSecs,
                    TimeOutMicroSecs);
            }
        } else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80045c4:	7afb      	ldrb	r3, [r7, #11]
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d160      	bne.n	800468c <set_sequence_step_timeout+0x1d2>
             * must be added. To do this both final and pre-range
             * timeouts must be expressed in macro periods MClks
             * because they have different vcsel periods.
             */

            VL53L0X_GetSequenceStepEnables(Dev,
 80045ca:	f107 0310 	add.w	r3, r7, #16
 80045ce:	4619      	mov	r1, r3
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f7fd f9e9 	bl	80019a8 <VL53L0X_GetSequenceStepEnables>
                                           &SchedulerSequenceSteps);
            PreRangeTimeOutMClks = 0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	84bb      	strh	r3, [r7, #36]	; 0x24

            if (SchedulerSequenceSteps.PreRangeOn) {
 80045da:	7cfb      	ldrb	r3, [r7, #19]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01d      	beq.n	800461c <set_sequence_step_timeout+0x162>
                /* Retrieve PRE-RANGE VCSEL Period */
                Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80045e0:	f107 031b 	add.w	r3, r7, #27
 80045e4:	461a      	mov	r2, r3
 80045e6:	2100      	movs	r1, #0
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7fd f8d1 	bl	8001790 <VL53L0X_GetVcselPulsePeriod>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                     VL53L0X_VCSEL_PERIOD_PRE_RANGE,
                                                     &CurrentVCSELPulsePeriodPClk);

                /* Retrieve PRE-RANGE Timeout in Macro periods
                 * (MCLKS) */
                if (Status == VL53L0X_ERROR_NONE) {
 80045f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10f      	bne.n	800461c <set_sequence_step_timeout+0x162>
                    Status = VL53L0X_RdWord(Dev, 0x51,
 80045fc:	f107 0318 	add.w	r3, r7, #24
 8004600:	461a      	mov	r2, r3
 8004602:	2151      	movs	r1, #81	; 0x51
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f001 fcd6 	bl	8005fb6 <VL53L0X_RdWord>
 800460a:	4603      	mov	r3, r0
 800460c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                            &PreRangeEncodedTimeOut);
                    PreRangeTimeOutMClks =
                        VL53L0X_decode_timeout(
 8004610:	8b3b      	ldrh	r3, [r7, #24]
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fe05 	bl	8004222 <VL53L0X_decode_timeout>
 8004618:	4603      	mov	r3, r0
                    PreRangeTimeOutMClks =
 800461a:	84bb      	strh	r3, [r7, #36]	; 0x24
            }

            /* Calculate FINAL RANGE Timeout in Macro Periods
             * (MCLKS) and add PRE-RANGE value
             */
            if (Status == VL53L0X_ERROR_NONE) {
 800461c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004620:	2b00      	cmp	r3, #0
 8004622:	d109      	bne.n	8004638 <set_sequence_step_timeout+0x17e>
                Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004624:	f107 031b 	add.w	r3, r7, #27
 8004628:	461a      	mov	r2, r3
 800462a:	2101      	movs	r1, #1
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f7fd f8af 	bl	8001790 <VL53L0X_GetVcselPulsePeriod>
 8004632:	4603      	mov	r3, r0
 8004634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                     VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
                                                     &CurrentVCSELPulsePeriodPClk);
            }

            if (Status == VL53L0X_ERROR_NONE) {
 8004638:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800463c:	2b00      	cmp	r3, #0
 800463e:	d128      	bne.n	8004692 <set_sequence_step_timeout+0x1d8>
                FinalRangeTimeOutMClks =
                    VL53L0X_calc_timeout_mclks(Dev,
 8004640:	7efb      	ldrb	r3, [r7, #27]
 8004642:	461a      	mov	r2, r3
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f7ff fe02 	bl	8004250 <VL53L0X_calc_timeout_mclks>
 800464c:	6238      	str	r0, [r7, #32]
                                               TimeOutMicroSecs,
                                               (uint8_t) CurrentVCSELPulsePeriodPClk);

                FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800464e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004650:	6a3a      	ldr	r2, [r7, #32]
 8004652:	4413      	add	r3, r2
 8004654:	623b      	str	r3, [r7, #32]

                FinalRangeEncodedTimeOut =
                    VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8004656:	6a38      	ldr	r0, [r7, #32]
 8004658:	f7ff fdb7 	bl	80041ca <VL53L0X_encode_timeout>
 800465c:	4603      	mov	r3, r0
 800465e:	83fb      	strh	r3, [r7, #30]

                if (Status == VL53L0X_ERROR_NONE) {
 8004660:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004664:	2b00      	cmp	r3, #0
 8004666:	d108      	bne.n	800467a <set_sequence_step_timeout+0x1c0>
                    Status = VL53L0X_WrWord(Dev, 0x71,
 8004668:	8bfb      	ldrh	r3, [r7, #30]
 800466a:	461a      	mov	r2, r3
 800466c:	2171      	movs	r1, #113	; 0x71
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f001 fc19 	bl	8005ea6 <VL53L0X_WrWord>
 8004674:	4603      	mov	r3, r0
 8004676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                            FinalRangeEncodedTimeOut);
                }

                if (Status == VL53L0X_ERROR_NONE) {
 800467a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800467e:	2b00      	cmp	r3, #0
 8004680:	d107      	bne.n	8004692 <set_sequence_step_timeout+0x1d8>
                    VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800468a:	e002      	b.n	8004692 <set_sequence_step_timeout+0x1d8>
                        FinalRangeTimeoutMicroSecs,
                        TimeOutMicroSecs);
                }
            }
        } else {
            Status = VL53L0X_ERROR_INVALID_PARAMS;
 800468c:	23fc      	movs	r3, #252	; 0xfc
 800468e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    return Status;
 8004692:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004696:	4618      	mov	r0, r3
 8004698:	3728      	adds	r7, #40	; 0x28
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev, VL53L0X_VcselPeriod VcselPeriodType,
                                             uint8_t VCSELPulsePeriodPCLK) {
 800469e:	b580      	push	{r7, lr}
 80046a0:	b08a      	sub	sp, #40	; 0x28
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	460b      	mov	r3, r1
 80046a8:	70fb      	strb	r3, [r7, #3]
 80046aa:	4613      	mov	r3, r2
 80046ac:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t vcsel_period_reg;
    uint8_t MinPreVcselPeriodPCLK = 12;
 80046b4:	230c      	movs	r3, #12
 80046b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t MaxPreVcselPeriodPCLK = 18;
 80046ba:	2312      	movs	r3, #18
 80046bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t MinFinalVcselPeriodPCLK = 8;
 80046c0:	2308      	movs	r3, #8
 80046c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    uint8_t MaxFinalVcselPeriodPCLK = 14;
 80046c6:	230e      	movs	r3, #14
 80046c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint32_t MeasurementTimingBudgetMicroSeconds;
    uint32_t FinalRangeTimeoutMicroSeconds;
    uint32_t PreRangeTimeoutMicroSeconds;
    uint32_t MsrcTimeoutMicroSeconds;
    uint8_t PhaseCalInt = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	73fb      	strb	r3, [r7, #15]

    /* Check if valid clock period requested */

    if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80046d0:	78bb      	ldrb	r3, [r7, #2]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <VL53L0X_set_vcsel_pulse_period+0x46>
        /* Value must be an even number */
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 80046dc:	23fc      	movs	r3, #252	; 0xfc
 80046de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80046e2:	e020      	b.n	8004726 <VL53L0X_set_vcsel_pulse_period+0x88>
    } else if ((VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) &&
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10d      	bne.n	8004706 <VL53L0X_set_vcsel_pulse_period+0x68>
 80046ea:	78ba      	ldrb	r2, [r7, #2]
 80046ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d304      	bcc.n	80046fe <VL53L0X_set_vcsel_pulse_period+0x60>
               ((VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK) ||
 80046f4:	78ba      	ldrb	r2, [r7, #2]
 80046f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d903      	bls.n	8004706 <VL53L0X_set_vcsel_pulse_period+0x68>
                (VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK))) {
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 80046fe:	23fc      	movs	r3, #252	; 0xfc
 8004700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004704:	e00f      	b.n	8004726 <VL53L0X_set_vcsel_pulse_period+0x88>
    } else if ((VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) &&
 8004706:	78fb      	ldrb	r3, [r7, #3]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d10c      	bne.n	8004726 <VL53L0X_set_vcsel_pulse_period+0x88>
 800470c:	78ba      	ldrb	r2, [r7, #2]
 800470e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004712:	429a      	cmp	r2, r3
 8004714:	d304      	bcc.n	8004720 <VL53L0X_set_vcsel_pulse_period+0x82>
               ((VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK) ||
 8004716:	78ba      	ldrb	r2, [r7, #2]
 8004718:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800471c:	429a      	cmp	r2, r3
 800471e:	d902      	bls.n	8004726 <VL53L0X_set_vcsel_pulse_period+0x88>
                (VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK))) {
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004720:	23fc      	movs	r3, #252	; 0xfc
 8004722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Apply specific settings for the requested clock period */

    if (Status != VL53L0X_ERROR_NONE) {
 8004726:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <VL53L0X_set_vcsel_pulse_period+0x96>
        return Status;
 800472e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004732:	e239      	b.n	8004ba8 <VL53L0X_set_vcsel_pulse_period+0x50a>
    }

    if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d150      	bne.n	80047dc <VL53L0X_set_vcsel_pulse_period+0x13e>
        /* Set phase check limits */
        if (VCSELPulsePeriodPCLK == 12) {
 800473a:	78bb      	ldrb	r3, [r7, #2]
 800473c:	2b0c      	cmp	r3, #12
 800473e:	d110      	bne.n	8004762 <VL53L0X_set_vcsel_pulse_period+0xc4>
            Status = VL53L0X_WrByte(Dev,
 8004740:	2218      	movs	r2, #24
 8004742:	2157      	movs	r1, #87	; 0x57
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f001 fb94 	bl	8005e72 <VL53L0X_WrByte>
 800474a:	4603      	mov	r3, r0
 800474c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
                                    0x18);
            Status = VL53L0X_WrByte(Dev,
 8004750:	2208      	movs	r2, #8
 8004752:	2156      	movs	r1, #86	; 0x56
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f001 fb8c 	bl	8005e72 <VL53L0X_WrByte>
 800475a:	4603      	mov	r3, r0
 800475c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004760:	e17f      	b.n	8004a62 <VL53L0X_set_vcsel_pulse_period+0x3c4>
                                    VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
                                    0x08);
        } else if (VCSELPulsePeriodPCLK == 14) {
 8004762:	78bb      	ldrb	r3, [r7, #2]
 8004764:	2b0e      	cmp	r3, #14
 8004766:	d110      	bne.n	800478a <VL53L0X_set_vcsel_pulse_period+0xec>
            Status = VL53L0X_WrByte(Dev,
 8004768:	2230      	movs	r2, #48	; 0x30
 800476a:	2157      	movs	r1, #87	; 0x57
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f001 fb80 	bl	8005e72 <VL53L0X_WrByte>
 8004772:	4603      	mov	r3, r0
 8004774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
                                    0x30);
            Status = VL53L0X_WrByte(Dev,
 8004778:	2208      	movs	r2, #8
 800477a:	2156      	movs	r1, #86	; 0x56
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f001 fb78 	bl	8005e72 <VL53L0X_WrByte>
 8004782:	4603      	mov	r3, r0
 8004784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004788:	e16b      	b.n	8004a62 <VL53L0X_set_vcsel_pulse_period+0x3c4>
                                    VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
                                    0x08);
        } else if (VCSELPulsePeriodPCLK == 16) {
 800478a:	78bb      	ldrb	r3, [r7, #2]
 800478c:	2b10      	cmp	r3, #16
 800478e:	d110      	bne.n	80047b2 <VL53L0X_set_vcsel_pulse_period+0x114>
            Status = VL53L0X_WrByte(Dev,
 8004790:	2240      	movs	r2, #64	; 0x40
 8004792:	2157      	movs	r1, #87	; 0x57
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f001 fb6c 	bl	8005e72 <VL53L0X_WrByte>
 800479a:	4603      	mov	r3, r0
 800479c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
                                    0x40);
            Status = VL53L0X_WrByte(Dev,
 80047a0:	2208      	movs	r2, #8
 80047a2:	2156      	movs	r1, #86	; 0x56
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f001 fb64 	bl	8005e72 <VL53L0X_WrByte>
 80047aa:	4603      	mov	r3, r0
 80047ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80047b0:	e157      	b.n	8004a62 <VL53L0X_set_vcsel_pulse_period+0x3c4>
                                    VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
                                    0x08);
        } else if (VCSELPulsePeriodPCLK == 18) {
 80047b2:	78bb      	ldrb	r3, [r7, #2]
 80047b4:	2b12      	cmp	r3, #18
 80047b6:	f040 8154 	bne.w	8004a62 <VL53L0X_set_vcsel_pulse_period+0x3c4>
            Status = VL53L0X_WrByte(Dev,
 80047ba:	2250      	movs	r2, #80	; 0x50
 80047bc:	2157      	movs	r1, #87	; 0x57
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f001 fb57 	bl	8005e72 <VL53L0X_WrByte>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
                                    0x50);
            Status = VL53L0X_WrByte(Dev,
 80047ca:	2208      	movs	r2, #8
 80047cc:	2156      	movs	r1, #86	; 0x56
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f001 fb4f 	bl	8005e72 <VL53L0X_WrByte>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80047da:	e142      	b.n	8004a62 <VL53L0X_set_vcsel_pulse_period+0x3c4>
                                    VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
                                    0x08);
        }
    } else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	f040 813f 	bne.w	8004a62 <VL53L0X_set_vcsel_pulse_period+0x3c4>
        if (VCSELPulsePeriodPCLK == 8) {
 80047e4:	78bb      	ldrb	r3, [r7, #2]
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d14c      	bne.n	8004884 <VL53L0X_set_vcsel_pulse_period+0x1e6>
            Status = VL53L0X_WrByte(Dev,
 80047ea:	2210      	movs	r2, #16
 80047ec:	2148      	movs	r1, #72	; 0x48
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f001 fb3f 	bl	8005e72 <VL53L0X_WrByte>
 80047f4:	4603      	mov	r3, r0
 80047f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
                                    0x10);
            Status = VL53L0X_WrByte(Dev,
 80047fa:	2208      	movs	r2, #8
 80047fc:	2147      	movs	r1, #71	; 0x47
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f001 fb37 	bl	8005e72 <VL53L0X_WrByte>
 8004804:	4603      	mov	r3, r0
 8004806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
                                    0x08);

            Status |= VL53L0X_WrByte(Dev,
 800480a:	2202      	movs	r2, #2
 800480c:	2132      	movs	r1, #50	; 0x32
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f001 fb2f 	bl	8005e72 <VL53L0X_WrByte>
 8004814:	4603      	mov	r3, r0
 8004816:	461a      	mov	r2, r3
 8004818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800481c:	4313      	orrs	r3, r2
 800481e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                     VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
            Status |= VL53L0X_WrByte(Dev,
 8004822:	220c      	movs	r2, #12
 8004824:	2130      	movs	r1, #48	; 0x30
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f001 fb23 	bl	8005e72 <VL53L0X_WrByte>
 800482c:	4603      	mov	r3, r0
 800482e:	461a      	mov	r2, r3
 8004830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004834:	4313      	orrs	r3, r2
 8004836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                     VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

            Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800483a:	2201      	movs	r2, #1
 800483c:	21ff      	movs	r1, #255	; 0xff
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f001 fb17 	bl	8005e72 <VL53L0X_WrByte>
 8004844:	4603      	mov	r3, r0
 8004846:	461a      	mov	r2, r3
 8004848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800484c:	4313      	orrs	r3, r2
 800484e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Status |= VL53L0X_WrByte(Dev,
 8004852:	2230      	movs	r2, #48	; 0x30
 8004854:	2130      	movs	r1, #48	; 0x30
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f001 fb0b 	bl	8005e72 <VL53L0X_WrByte>
 800485c:	4603      	mov	r3, r0
 800485e:	461a      	mov	r2, r3
 8004860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004864:	4313      	orrs	r3, r2
 8004866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                     VL53L0X_REG_ALGO_PHASECAL_LIM,
                                     0x30);
            Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800486a:	2200      	movs	r2, #0
 800486c:	21ff      	movs	r1, #255	; 0xff
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f001 faff 	bl	8005e72 <VL53L0X_WrByte>
 8004874:	4603      	mov	r3, r0
 8004876:	461a      	mov	r2, r3
 8004878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800487c:	4313      	orrs	r3, r2
 800487e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004882:	e0ee      	b.n	8004a62 <VL53L0X_set_vcsel_pulse_period+0x3c4>
        } else if (VCSELPulsePeriodPCLK == 10) {
 8004884:	78bb      	ldrb	r3, [r7, #2]
 8004886:	2b0a      	cmp	r3, #10
 8004888:	d14c      	bne.n	8004924 <VL53L0X_set_vcsel_pulse_period+0x286>
            Status = VL53L0X_WrByte(Dev,
 800488a:	2228      	movs	r2, #40	; 0x28
 800488c:	2148      	movs	r1, #72	; 0x48
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f001 faef 	bl	8005e72 <VL53L0X_WrByte>
 8004894:	4603      	mov	r3, r0
 8004896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
                                    0x28);
            Status = VL53L0X_WrByte(Dev,
 800489a:	2208      	movs	r2, #8
 800489c:	2147      	movs	r1, #71	; 0x47
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f001 fae7 	bl	8005e72 <VL53L0X_WrByte>
 80048a4:	4603      	mov	r3, r0
 80048a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
                                    0x08);

            Status |= VL53L0X_WrByte(Dev,
 80048aa:	2203      	movs	r2, #3
 80048ac:	2132      	movs	r1, #50	; 0x32
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f001 fadf 	bl	8005e72 <VL53L0X_WrByte>
 80048b4:	4603      	mov	r3, r0
 80048b6:	461a      	mov	r2, r3
 80048b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048bc:	4313      	orrs	r3, r2
 80048be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                     VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
            Status |= VL53L0X_WrByte(Dev,
 80048c2:	2209      	movs	r2, #9
 80048c4:	2130      	movs	r1, #48	; 0x30
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f001 fad3 	bl	8005e72 <VL53L0X_WrByte>
 80048cc:	4603      	mov	r3, r0
 80048ce:	461a      	mov	r2, r3
 80048d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                     VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

            Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80048da:	2201      	movs	r2, #1
 80048dc:	21ff      	movs	r1, #255	; 0xff
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f001 fac7 	bl	8005e72 <VL53L0X_WrByte>
 80048e4:	4603      	mov	r3, r0
 80048e6:	461a      	mov	r2, r3
 80048e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Status |= VL53L0X_WrByte(Dev,
 80048f2:	2220      	movs	r2, #32
 80048f4:	2130      	movs	r1, #48	; 0x30
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f001 fabb 	bl	8005e72 <VL53L0X_WrByte>
 80048fc:	4603      	mov	r3, r0
 80048fe:	461a      	mov	r2, r3
 8004900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004904:	4313      	orrs	r3, r2
 8004906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                     VL53L0X_REG_ALGO_PHASECAL_LIM,
                                     0x20);
            Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800490a:	2200      	movs	r2, #0
 800490c:	21ff      	movs	r1, #255	; 0xff
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f001 faaf 	bl	8005e72 <VL53L0X_WrByte>
 8004914:	4603      	mov	r3, r0
 8004916:	461a      	mov	r2, r3
 8004918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800491c:	4313      	orrs	r3, r2
 800491e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004922:	e09e      	b.n	8004a62 <VL53L0X_set_vcsel_pulse_period+0x3c4>
        } else if (VCSELPulsePeriodPCLK == 12) {
 8004924:	78bb      	ldrb	r3, [r7, #2]
 8004926:	2b0c      	cmp	r3, #12
 8004928:	d14c      	bne.n	80049c4 <VL53L0X_set_vcsel_pulse_period+0x326>
            Status = VL53L0X_WrByte(Dev,
 800492a:	2238      	movs	r2, #56	; 0x38
 800492c:	2148      	movs	r1, #72	; 0x48
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f001 fa9f 	bl	8005e72 <VL53L0X_WrByte>
 8004934:	4603      	mov	r3, r0
 8004936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
                                    0x38);
            Status = VL53L0X_WrByte(Dev,
 800493a:	2208      	movs	r2, #8
 800493c:	2147      	movs	r1, #71	; 0x47
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f001 fa97 	bl	8005e72 <VL53L0X_WrByte>
 8004944:	4603      	mov	r3, r0
 8004946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
                                    0x08);

            Status |= VL53L0X_WrByte(Dev,
 800494a:	2203      	movs	r2, #3
 800494c:	2132      	movs	r1, #50	; 0x32
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f001 fa8f 	bl	8005e72 <VL53L0X_WrByte>
 8004954:	4603      	mov	r3, r0
 8004956:	461a      	mov	r2, r3
 8004958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800495c:	4313      	orrs	r3, r2
 800495e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                     VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
            Status |= VL53L0X_WrByte(Dev,
 8004962:	2208      	movs	r2, #8
 8004964:	2130      	movs	r1, #48	; 0x30
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f001 fa83 	bl	8005e72 <VL53L0X_WrByte>
 800496c:	4603      	mov	r3, r0
 800496e:	461a      	mov	r2, r3
 8004970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004974:	4313      	orrs	r3, r2
 8004976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                     VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

            Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800497a:	2201      	movs	r2, #1
 800497c:	21ff      	movs	r1, #255	; 0xff
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f001 fa77 	bl	8005e72 <VL53L0X_WrByte>
 8004984:	4603      	mov	r3, r0
 8004986:	461a      	mov	r2, r3
 8004988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800498c:	4313      	orrs	r3, r2
 800498e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Status |= VL53L0X_WrByte(Dev,
 8004992:	2220      	movs	r2, #32
 8004994:	2130      	movs	r1, #48	; 0x30
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f001 fa6b 	bl	8005e72 <VL53L0X_WrByte>
 800499c:	4603      	mov	r3, r0
 800499e:	461a      	mov	r2, r3
 80049a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                     VL53L0X_REG_ALGO_PHASECAL_LIM,
                                     0x20);
            Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80049aa:	2200      	movs	r2, #0
 80049ac:	21ff      	movs	r1, #255	; 0xff
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f001 fa5f 	bl	8005e72 <VL53L0X_WrByte>
 80049b4:	4603      	mov	r3, r0
 80049b6:	461a      	mov	r2, r3
 80049b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049bc:	4313      	orrs	r3, r2
 80049be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80049c2:	e04e      	b.n	8004a62 <VL53L0X_set_vcsel_pulse_period+0x3c4>
        } else if (VCSELPulsePeriodPCLK == 14) {
 80049c4:	78bb      	ldrb	r3, [r7, #2]
 80049c6:	2b0e      	cmp	r3, #14
 80049c8:	d14b      	bne.n	8004a62 <VL53L0X_set_vcsel_pulse_period+0x3c4>
            Status = VL53L0X_WrByte(Dev,
 80049ca:	2248      	movs	r2, #72	; 0x48
 80049cc:	2148      	movs	r1, #72	; 0x48
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f001 fa4f 	bl	8005e72 <VL53L0X_WrByte>
 80049d4:	4603      	mov	r3, r0
 80049d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
                                    0x048);
            Status = VL53L0X_WrByte(Dev,
 80049da:	2208      	movs	r2, #8
 80049dc:	2147      	movs	r1, #71	; 0x47
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f001 fa47 	bl	8005e72 <VL53L0X_WrByte>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
                                    0x08);

            Status |= VL53L0X_WrByte(Dev,
 80049ea:	2203      	movs	r2, #3
 80049ec:	2132      	movs	r1, #50	; 0x32
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f001 fa3f 	bl	8005e72 <VL53L0X_WrByte>
 80049f4:	4603      	mov	r3, r0
 80049f6:	461a      	mov	r2, r3
 80049f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                     VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
            Status |= VL53L0X_WrByte(Dev,
 8004a02:	2207      	movs	r2, #7
 8004a04:	2130      	movs	r1, #48	; 0x30
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f001 fa33 	bl	8005e72 <VL53L0X_WrByte>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                     VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

            Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	21ff      	movs	r1, #255	; 0xff
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f001 fa27 	bl	8005e72 <VL53L0X_WrByte>
 8004a24:	4603      	mov	r3, r0
 8004a26:	461a      	mov	r2, r3
 8004a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Status |= VL53L0X_WrByte(Dev,
 8004a32:	2220      	movs	r2, #32
 8004a34:	2130      	movs	r1, #48	; 0x30
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f001 fa1b 	bl	8005e72 <VL53L0X_WrByte>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                     VL53L0X_REG_ALGO_PHASECAL_LIM,
                                     0x20);
            Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	21ff      	movs	r1, #255	; 0xff
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f001 fa0f 	bl	8005e72 <VL53L0X_WrByte>
 8004a54:	4603      	mov	r3, r0
 8004a56:	461a      	mov	r2, r3
 8004a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    /* Re-calculate and apply timeouts, in macro periods */

    if (Status == VL53L0X_ERROR_NONE) {
 8004a62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d17f      	bne.n	8004b6a <VL53L0X_set_vcsel_pulse_period+0x4cc>
        vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8004a6a:	78bb      	ldrb	r3, [r7, #2]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fe fe37 	bl	80036e0 <VL53L0X_encode_vcsel_period>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
         * using the new VCSEL period.
         *
         * For the MSRC timeout, the same applies - this timeout being
         * dependant on the pre-range vcsel period.
         */
        switch (VcselPeriodType) {
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d045      	beq.n	8004b0e <VL53L0X_set_vcsel_pulse_period+0x470>
 8004a82:	e06e      	b.n	8004b62 <VL53L0X_set_vcsel_pulse_period+0x4c4>
            case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
                Status = get_sequence_step_timeout(Dev,
 8004a84:	f107 0314 	add.w	r3, r7, #20
 8004a88:	461a      	mov	r2, r3
 8004a8a:	2103      	movs	r1, #3
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff fc33 	bl	80042f8 <get_sequence_step_timeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                   VL53L0X_SEQUENCESTEP_PRE_RANGE,
                                                   &PreRangeTimeoutMicroSeconds);

                if (Status == VL53L0X_ERROR_NONE) {
 8004a98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d109      	bne.n	8004ab4 <VL53L0X_set_vcsel_pulse_period+0x416>
                    Status = get_sequence_step_timeout(Dev,
 8004aa0:	f107 0310 	add.w	r3, r7, #16
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2102      	movs	r1, #2
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff fc25 	bl	80042f8 <get_sequence_step_timeout>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                       VL53L0X_SEQUENCESTEP_MSRC,
                                                       &MsrcTimeoutMicroSeconds);
                }

                if (Status == VL53L0X_ERROR_NONE) {
 8004ab4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d109      	bne.n	8004ad0 <VL53L0X_set_vcsel_pulse_period+0x432>
                    Status = VL53L0X_WrByte(Dev,
 8004abc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	2150      	movs	r1, #80	; 0x50
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f001 f9d4 	bl	8005e72 <VL53L0X_WrByte>
 8004aca:	4603      	mov	r3, r0
 8004acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                            VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
                                            vcsel_period_reg);
                }

                if (Status == VL53L0X_ERROR_NONE) {
 8004ad0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d108      	bne.n	8004aea <VL53L0X_set_vcsel_pulse_period+0x44c>
                    Status = set_sequence_step_timeout(Dev,
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	461a      	mov	r2, r3
 8004adc:	2103      	movs	r1, #3
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff fceb 	bl	80044ba <set_sequence_step_timeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                       VL53L0X_SEQUENCESTEP_PRE_RANGE,
                                                       PreRangeTimeoutMicroSeconds);
                }

                if (Status == VL53L0X_ERROR_NONE) {
 8004aea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d108      	bne.n	8004b04 <VL53L0X_set_vcsel_pulse_period+0x466>
                    Status = set_sequence_step_timeout(Dev,
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	461a      	mov	r2, r3
 8004af6:	2102      	movs	r1, #2
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff fcde 	bl	80044ba <set_sequence_step_timeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                       VL53L0X_SEQUENCESTEP_MSRC,
                                                       MsrcTimeoutMicroSeconds);
                }

                VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	78ba      	ldrb	r2, [r7, #2]
 8004b08:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
                    Dev,
                    PreRangeVcselPulsePeriod,
                    VCSELPulsePeriodPCLK);
                break;
 8004b0c:	e02e      	b.n	8004b6c <VL53L0X_set_vcsel_pulse_period+0x4ce>

            case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
                Status = get_sequence_step_timeout(Dev,
 8004b0e:	f107 0318 	add.w	r3, r7, #24
 8004b12:	461a      	mov	r2, r3
 8004b14:	2104      	movs	r1, #4
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff fbee 	bl	80042f8 <get_sequence_step_timeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
                                                   &FinalRangeTimeoutMicroSeconds);

                if (Status == VL53L0X_ERROR_NONE) {
 8004b22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d109      	bne.n	8004b3e <VL53L0X_set_vcsel_pulse_period+0x4a0>
                    Status = VL53L0X_WrByte(Dev,
 8004b2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004b2e:	461a      	mov	r2, r3
 8004b30:	2170      	movs	r1, #112	; 0x70
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f001 f99d 	bl	8005e72 <VL53L0X_WrByte>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                            VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
                                            vcsel_period_reg);
                }

                if (Status == VL53L0X_ERROR_NONE) {
 8004b3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d108      	bne.n	8004b58 <VL53L0X_set_vcsel_pulse_period+0x4ba>
                    Status = set_sequence_step_timeout(Dev,
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	2104      	movs	r1, #4
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff fcb4 	bl	80044ba <set_sequence_step_timeout>
 8004b52:	4603      	mov	r3, r0
 8004b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                       VL53L0X_SEQUENCESTEP_FINAL_RANGE,
                                                       FinalRangeTimeoutMicroSeconds);
                }

                VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	78ba      	ldrb	r2, [r7, #2]
 8004b5c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                    Dev,
                    FinalRangeVcselPulsePeriod,
                    VCSELPulsePeriodPCLK);
                break;
 8004b60:	e004      	b.n	8004b6c <VL53L0X_set_vcsel_pulse_period+0x4ce>

            default:
                Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004b62:	23fc      	movs	r3, #252	; 0xfc
 8004b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004b68:	e000      	b.n	8004b6c <VL53L0X_set_vcsel_pulse_period+0x4ce>
        }
    }
 8004b6a:	bf00      	nop

    /* Finally, the timing budget must be re-applied */
    if (Status == VL53L0X_ERROR_NONE) {
 8004b6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <VL53L0X_set_vcsel_pulse_period+0x4ea>
        VL53L0X_GETPARAMETERFIELD(Dev,
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	61fb      	str	r3, [r7, #28]
                                  MeasurementTimingBudgetMicroSeconds,
                                  MeasurementTimingBudgetMicroSeconds);

        Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8004b7a:	69f9      	ldr	r1, [r7, #28]
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7fc fdc9 	bl	8001714 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8004b82:	4603      	mov	r3, r0
 8004b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Perform the phase calibration. This is needed after changing on
     * vcsel period.
     * get_data_enable = 0, restore_config = 1 */
    if (Status == VL53L0X_ERROR_NONE) {
 8004b88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d109      	bne.n	8004ba4 <VL53L0X_set_vcsel_pulse_period+0x506>
        Status = VL53L0X_perform_phase_calibration(
 8004b90:	f107 010f 	add.w	r1, r7, #15
 8004b94:	2301      	movs	r3, #1
 8004b96:	2200      	movs	r2, #0
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fe fc99 	bl	80034d0 <VL53L0X_perform_phase_calibration>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Dev, &PhaseCalInt, 0, 1);
    }

    return Status;
 8004ba4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3728      	adds	r7, #40	; 0x28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev, VL53L0X_VcselPeriod VcselPeriodType,
                                             uint8_t*            pVCSELPulsePeriodPCLK) {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	75fb      	strb	r3, [r7, #23]
    uint8_t vcsel_period_reg;

    switch (VcselPeriodType) {
 8004bc2:	7afb      	ldrb	r3, [r7, #11]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <VL53L0X_get_vcsel_pulse_period+0x1e>
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d00a      	beq.n	8004be2 <VL53L0X_get_vcsel_pulse_period+0x32>
 8004bcc:	e013      	b.n	8004bf6 <VL53L0X_get_vcsel_pulse_period+0x46>
        case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
            Status = VL53L0X_RdByte(Dev,
 8004bce:	f107 0316 	add.w	r3, r7, #22
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	2150      	movs	r1, #80	; 0x50
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f001 f9d4 	bl	8005f84 <VL53L0X_RdByte>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	75fb      	strb	r3, [r7, #23]
                                    VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
                                    &vcsel_period_reg);
            break;
 8004be0:	e00b      	b.n	8004bfa <VL53L0X_get_vcsel_pulse_period+0x4a>

        case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
            Status = VL53L0X_RdByte(Dev,
 8004be2:	f107 0316 	add.w	r3, r7, #22
 8004be6:	461a      	mov	r2, r3
 8004be8:	2170      	movs	r1, #112	; 0x70
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f001 f9ca 	bl	8005f84 <VL53L0X_RdByte>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	75fb      	strb	r3, [r7, #23]
                                    VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
                                    &vcsel_period_reg);
            break;
 8004bf4:	e001      	b.n	8004bfa <VL53L0X_get_vcsel_pulse_period+0x4a>

        default:
            Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004bf6:	23fc      	movs	r3, #252	; 0xfc
 8004bf8:	75fb      	strb	r3, [r7, #23]
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8004bfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d107      	bne.n	8004c12 <VL53L0X_get_vcsel_pulse_period+0x62>
        *pVCSELPulsePeriodPCLK =
            VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8004c02:	7dbb      	ldrb	r3, [r7, #22]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fe fd58 	bl	80036ba <VL53L0X_decode_vcsel_period>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	461a      	mov	r2, r3
        *pVCSELPulsePeriodPCLK =
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	701a      	strb	r2, [r3, #0]
    }

    return Status;
 8004c12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <VL53L0X_set_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
                                                                  uint32_t    MeasurementTimingBudgetMicroSeconds) {
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b092      	sub	sp, #72	; 0x48
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint32_t FinalRangeTimingBudgetMicroSeconds;
    VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
    uint32_t MsrcDccTccTimeoutMicroSeconds = 2000;
 8004c2e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004c32:	613b      	str	r3, [r7, #16]
    uint32_t StartOverheadMicroSeconds = 1910;
 8004c34:	f240 7376 	movw	r3, #1910	; 0x776
 8004c38:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t EndOverheadMicroSeconds = 960;
 8004c3a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004c3e:	63bb      	str	r3, [r7, #56]	; 0x38
    uint32_t MsrcOverheadMicroSeconds = 660;
 8004c40:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t TccOverheadMicroSeconds = 590;
 8004c46:	f240 234e 	movw	r3, #590	; 0x24e
 8004c4a:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t DssOverheadMicroSeconds = 690;
 8004c4c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t PreRangeOverheadMicroSeconds = 660;
 8004c52:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t FinalRangeOverheadMicroSeconds = 550;
 8004c58:	f240 2326 	movw	r3, #550	; 0x226
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t PreRangeTimeoutMicroSeconds = 0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]
    uint32_t cMinTimingBudgetMicroSeconds = 20000;
 8004c62:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004c66:	623b      	str	r3, [r7, #32]
    uint32_t SubTimeout = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61fb      	str	r3, [r7, #28]

    LOG_FUNCTION_START("");

    if (MeasurementTimingBudgetMicroSeconds <
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d205      	bcs.n	8004c80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
        cMinTimingBudgetMicroSeconds) {
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004c74:	23fc      	movs	r3, #252	; 0xfc
 8004c76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        return Status;
 8004c7a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004c7e:	e0aa      	b.n	8004dd6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
    }

    FinalRangeTimingBudgetMicroSeconds =
        MeasurementTimingBudgetMicroSeconds -
        (StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8004c80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c84:	4413      	add	r3, r2
    FinalRangeTimingBudgetMicroSeconds =
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	643b      	str	r3, [r7, #64]	; 0x40

    Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004c8c:	f107 0314 	add.w	r3, r7, #20
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fc fe88 	bl	80019a8 <VL53L0X_GetSequenceStepEnables>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((Status == VL53L0X_ERROR_NONE) &&
 8004c9e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d15b      	bne.n	8004d5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
        (SchedulerSequenceSteps.TccOn ||
 8004ca6:	7d3b      	ldrb	r3, [r7, #20]
    if ((Status == VL53L0X_ERROR_NONE) &&
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d105      	bne.n	8004cb8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
         SchedulerSequenceSteps.MsrcOn ||
 8004cac:	7d7b      	ldrb	r3, [r7, #21]
        (SchedulerSequenceSteps.TccOn ||
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d102      	bne.n	8004cb8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
         SchedulerSequenceSteps.DssOn)) {
 8004cb2:	7dbb      	ldrb	r3, [r7, #22]
         SchedulerSequenceSteps.MsrcOn ||
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d052      	beq.n	8004d5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
        /* TCC, MSRC and DSS all share the same timeout */
        Status = get_sequence_step_timeout(Dev,
 8004cb8:	f107 0310 	add.w	r3, r7, #16
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	2102      	movs	r1, #2
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff fb19 	bl	80042f8 <get_sequence_step_timeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                                           &MsrcDccTccTimeoutMicroSeconds);

        /* Subtract the TCC, MSRC and DSS timeouts if they are
         * enabled. */

        if (Status != VL53L0X_ERROR_NONE) {
 8004ccc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
            return Status;
 8004cd4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004cd8:	e07d      	b.n	8004dd6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
        }

        /* TCC */
        if (SchedulerSequenceSteps.TccOn) {
 8004cda:	7d3b      	ldrb	r3, [r7, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00f      	beq.n	8004d00 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
            SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ce4:	4413      	add	r3, r2
 8004ce6:	61fb      	str	r3, [r7, #28]
                         TccOverheadMicroSeconds;

            if (SubTimeout <
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d204      	bcs.n	8004cfa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
                FinalRangeTimingBudgetMicroSeconds) {
                FinalRangeTimingBudgetMicroSeconds -=
 8004cf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	643b      	str	r3, [r7, #64]	; 0x40
 8004cf8:	e002      	b.n	8004d00 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
                    SubTimeout;
            } else {
                /* Requested timeout too big. */
                Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004cfa:	23fc      	movs	r3, #252	; 0xfc
 8004cfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }

        if (Status != VL53L0X_ERROR_NONE) {
 8004d00:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
            LOG_FUNCTION_END(Status);
            return Status;
 8004d08:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004d0c:	e063      	b.n	8004dd6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
        }

        /* DSS */
        if (SchedulerSequenceSteps.DssOn) {
 8004d0e:	7dbb      	ldrb	r3, [r7, #22]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d011      	beq.n	8004d38 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>
            SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	4413      	add	r3, r2
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	61fb      	str	r3, [r7, #28]
                              DssOverheadMicroSeconds);

            if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d204      	bcs.n	8004d30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
                FinalRangeTimingBudgetMicroSeconds -=
 8004d26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d2e:	e016      	b.n	8004d5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
                    SubTimeout;
            } else {
                /* Requested timeout too big. */
                Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004d30:	23fc      	movs	r3, #252	; 0xfc
 8004d32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004d36:	e012      	b.n	8004d5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
            }
        } else if (SchedulerSequenceSteps.MsrcOn) {
 8004d38:	7d7b      	ldrb	r3, [r7, #21]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00f      	beq.n	8004d5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
            /* MSRC */
            SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d42:	4413      	add	r3, r2
 8004d44:	61fb      	str	r3, [r7, #28]
                         MsrcOverheadMicroSeconds;

            if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d204      	bcs.n	8004d58 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
                FinalRangeTimingBudgetMicroSeconds -=
 8004d4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	643b      	str	r3, [r7, #64]	; 0x40
 8004d56:	e002      	b.n	8004d5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
                    SubTimeout;
            } else {
                /* Requested timeout too big. */
                Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004d58:	23fc      	movs	r3, #252	; 0xfc
 8004d5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }
    }

    if (Status != VL53L0X_ERROR_NONE) {
 8004d5e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
        LOG_FUNCTION_END(Status);
        return Status;
 8004d66:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004d6a:	e034      	b.n	8004dd6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
    }

    if (SchedulerSequenceSteps.PreRangeOn) {
 8004d6c:	7dfb      	ldrb	r3, [r7, #23]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d019      	beq.n	8004da6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
        /* Subtract the Pre-range timeout if enabled. */

        Status = get_sequence_step_timeout(Dev,
 8004d72:	f107 030c 	add.w	r3, r7, #12
 8004d76:	461a      	mov	r2, r3
 8004d78:	2103      	movs	r1, #3
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff fabc 	bl	80042f8 <get_sequence_step_timeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                                           VL53L0X_SEQUENCESTEP_PRE_RANGE,
                                           &PreRangeTimeoutMicroSeconds);

        SubTimeout = PreRangeTimeoutMicroSeconds +
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d8a:	4413      	add	r3, r2
 8004d8c:	61fb      	str	r3, [r7, #28]
                     PreRangeOverheadMicroSeconds;

        if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004d8e:	69fa      	ldr	r2, [r7, #28]
 8004d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d204      	bcs.n	8004da0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
            FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8004d96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d9e:	e002      	b.n	8004da6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
        } else {
            /* Requested timeout too big. */
            Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004da0:	23fc      	movs	r3, #252	; 0xfc
 8004da2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }
    }

    if ((Status == VL53L0X_ERROR_NONE) &&
 8004da6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d111      	bne.n	8004dd2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
        SchedulerSequenceSteps.FinalRangeOn) {
 8004dae:	7e3b      	ldrb	r3, [r7, #24]
    if ((Status == VL53L0X_ERROR_NONE) &&
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00e      	beq.n	8004dd2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
        FinalRangeTimingBudgetMicroSeconds -=
 8004db4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	643b      	str	r3, [r7, #64]	; 0x40
         * budget and the sum of all other timeouts within the sequence.
         * If there is no room for the final range timeout, then an error
         * will be set. Otherwise the remaining time will be applied to
         * the final range.
         */
        Status = set_sequence_step_timeout(Dev,
 8004dbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dbe:	2104      	movs	r1, #4
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff fb7a 	bl	80044ba <set_sequence_step_timeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                                           VL53L0X_SEQUENCESTEP_FINAL_RANGE,
                                           FinalRangeTimingBudgetMicroSeconds);

        VL53L0X_SETPARAMETERFIELD(Dev,
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	615a      	str	r2, [r3, #20]
                                  MeasurementTimingBudgetMicroSeconds);
    }

    LOG_FUNCTION_END(Status);

    return Status;
 8004dd2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3748      	adds	r7, #72	; 0x48
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
                                                                  uint32_t*   pMeasurementTimingBudgetMicroSeconds) {
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b090      	sub	sp, #64	; 0x40
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004de8:	2300      	movs	r3, #0
 8004dea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
    uint32_t FinalRangeTimeoutMicroSeconds;
    uint32_t MsrcDccTccTimeoutMicroSeconds = 2000;
 8004dee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004df2:	613b      	str	r3, [r7, #16]
    uint32_t StartOverheadMicroSeconds = 1910;
 8004df4:	f240 7376 	movw	r3, #1910	; 0x776
 8004df8:	63bb      	str	r3, [r7, #56]	; 0x38
    uint32_t EndOverheadMicroSeconds = 960;
 8004dfa:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004dfe:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t MsrcOverheadMicroSeconds = 660;
 8004e00:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004e04:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t TccOverheadMicroSeconds = 590;
 8004e06:	f240 234e 	movw	r3, #590	; 0x24e
 8004e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t DssOverheadMicroSeconds = 690;
 8004e0c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8004e10:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t PreRangeOverheadMicroSeconds = 660;
 8004e12:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t FinalRangeOverheadMicroSeconds = 550;
 8004e18:	f240 2326 	movw	r3, #550	; 0x226
 8004e1c:	623b      	str	r3, [r7, #32]
    uint32_t PreRangeTimeoutMicroSeconds = 0;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]

    LOG_FUNCTION_START("");

    /* Start and end overhead times always present */
    *pMeasurementTimingBudgetMicroSeconds =
        StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8004e22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e26:	441a      	add	r2, r3
    *pMeasurementTimingBudgetMicroSeconds =
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	601a      	str	r2, [r3, #0]

    Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004e2c:	f107 0318 	add.w	r3, r7, #24
 8004e30:	4619      	mov	r1, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fc fdb8 	bl	80019a8 <VL53L0X_GetSequenceStepEnables>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    if (Status != VL53L0X_ERROR_NONE) {
 8004e3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
        LOG_FUNCTION_END(Status);
        return Status;
 8004e46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004e4a:	e075      	b.n	8004f38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
    }

    if (SchedulerSequenceSteps.TccOn ||
 8004e4c:	7e3b      	ldrb	r3, [r7, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d105      	bne.n	8004e5e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
        SchedulerSequenceSteps.MsrcOn ||
 8004e52:	7e7b      	ldrb	r3, [r7, #25]
    if (SchedulerSequenceSteps.TccOn ||
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d102      	bne.n	8004e5e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
        SchedulerSequenceSteps.DssOn) {
 8004e58:	7ebb      	ldrb	r3, [r7, #26]
        SchedulerSequenceSteps.MsrcOn ||
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d030      	beq.n	8004ec0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
        Status = get_sequence_step_timeout(Dev,
 8004e5e:	f107 0310 	add.w	r3, r7, #16
 8004e62:	461a      	mov	r2, r3
 8004e64:	2102      	movs	r1, #2
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fa46 	bl	80042f8 <get_sequence_step_timeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                           VL53L0X_SEQUENCESTEP_MSRC,
                                           &MsrcDccTccTimeoutMicroSeconds);

        if (Status == VL53L0X_ERROR_NONE) {
 8004e72:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d122      	bne.n	8004ec0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
            if (SchedulerSequenceSteps.TccOn) {
 8004e7a:	7e3b      	ldrb	r3, [r7, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d007      	beq.n	8004e90 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
                *pMeasurementTimingBudgetMicroSeconds +=
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
                    MsrcDccTccTimeoutMicroSeconds +
 8004e84:	6939      	ldr	r1, [r7, #16]
 8004e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e88:	440b      	add	r3, r1
                *pMeasurementTimingBudgetMicroSeconds +=
 8004e8a:	441a      	add	r2, r3
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	601a      	str	r2, [r3, #0]
                    TccOverheadMicroSeconds;
            }

            if (SchedulerSequenceSteps.DssOn) {
 8004e90:	7ebb      	ldrb	r3, [r7, #26]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d009      	beq.n	8004eaa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
                *pMeasurementTimingBudgetMicroSeconds +=
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
                    2 * (MsrcDccTccTimeoutMicroSeconds +
 8004e9a:	6939      	ldr	r1, [r7, #16]
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	440b      	add	r3, r1
 8004ea0:	005b      	lsls	r3, r3, #1
                *pMeasurementTimingBudgetMicroSeconds +=
 8004ea2:	441a      	add	r2, r3
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	e00a      	b.n	8004ec0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
                         DssOverheadMicroSeconds);
            } else if (SchedulerSequenceSteps.MsrcOn) {
 8004eaa:	7e7b      	ldrb	r3, [r7, #25]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d007      	beq.n	8004ec0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
                *pMeasurementTimingBudgetMicroSeconds +=
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
                    MsrcDccTccTimeoutMicroSeconds +
 8004eb4:	6939      	ldr	r1, [r7, #16]
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	440b      	add	r3, r1
                *pMeasurementTimingBudgetMicroSeconds +=
 8004eba:	441a      	add	r2, r3
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	601a      	str	r2, [r3, #0]
                    MsrcOverheadMicroSeconds;
            }
        }
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8004ec0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d114      	bne.n	8004ef2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
        if (SchedulerSequenceSteps.PreRangeOn) {
 8004ec8:	7efb      	ldrb	r3, [r7, #27]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d011      	beq.n	8004ef2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
            Status = get_sequence_step_timeout(Dev,
 8004ece:	f107 030c 	add.w	r3, r7, #12
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	2103      	movs	r1, #3
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7ff fa0e 	bl	80042f8 <get_sequence_step_timeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                               VL53L0X_SEQUENCESTEP_PRE_RANGE,
                                               &PreRangeTimeoutMicroSeconds);
            *pMeasurementTimingBudgetMicroSeconds +=
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
                PreRangeTimeoutMicroSeconds +
 8004ee6:	68f9      	ldr	r1, [r7, #12]
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	440b      	add	r3, r1
            *pMeasurementTimingBudgetMicroSeconds +=
 8004eec:	441a      	add	r2, r3
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	601a      	str	r2, [r3, #0]
                PreRangeOverheadMicroSeconds;
        }
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8004ef2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d114      	bne.n	8004f24 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
        if (SchedulerSequenceSteps.FinalRangeOn) {
 8004efa:	7f3b      	ldrb	r3, [r7, #28]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d011      	beq.n	8004f24 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
            Status = get_sequence_step_timeout(Dev,
 8004f00:	f107 0314 	add.w	r3, r7, #20
 8004f04:	461a      	mov	r2, r3
 8004f06:	2104      	movs	r1, #4
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff f9f5 	bl	80042f8 <get_sequence_step_timeout>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                               VL53L0X_SEQUENCESTEP_FINAL_RANGE,
                                               &FinalRangeTimeoutMicroSeconds);
            *pMeasurementTimingBudgetMicroSeconds +=
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
                (FinalRangeTimeoutMicroSeconds +
 8004f18:	6979      	ldr	r1, [r7, #20]
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	440b      	add	r3, r1
            *pMeasurementTimingBudgetMicroSeconds +=
 8004f1e:	441a      	add	r2, r3
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	601a      	str	r2, [r3, #0]
                 FinalRangeOverheadMicroSeconds);
        }
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8004f24:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d103      	bne.n	8004f34 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
        VL53L0X_SETPARAMETERFIELD(Dev,
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	615a      	str	r2, [r3, #20]
                                  MeasurementTimingBudgetMicroSeconds,
                                  *pMeasurementTimingBudgetMicroSeconds);
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8004f34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3740      	adds	r7, #64	; 0x40
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <VL53L0X_load_tuning_settings>:

VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev, uint8_t*    pTuningSettingBuffer) {
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	77fb      	strb	r3, [r7, #31]
    uint8_t localBuffer[4]; /* max */
    uint16_t Temp16;

    LOG_FUNCTION_START("");

    Index = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]

    while ((*(pTuningSettingBuffer + Index) != 0) &&
 8004f52:	e0c6      	b.n	80050e2 <VL53L0X_load_tuning_settings+0x1a2>
           (Status == VL53L0X_ERROR_NONE)) {
        NumberOfWrites = *(pTuningSettingBuffer + Index);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	4413      	add	r3, r2
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	74fb      	strb	r3, [r7, #19]
        Index++;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	3301      	adds	r3, #1
 8004f62:	617b      	str	r3, [r7, #20]

        if (NumberOfWrites == 0xFF) {
 8004f64:	7cfb      	ldrb	r3, [r7, #19]
 8004f66:	2bff      	cmp	r3, #255	; 0xff
 8004f68:	f040 808d 	bne.w	8005086 <VL53L0X_load_tuning_settings+0x146>
            /* internal parameters */
            SelectParam = *(pTuningSettingBuffer + Index);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	4413      	add	r3, r2
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	747b      	strb	r3, [r7, #17]
            Index++;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	617b      	str	r3, [r7, #20]

            switch (SelectParam) {
 8004f7c:	7c7b      	ldrb	r3, [r7, #17]
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d87e      	bhi.n	8005080 <VL53L0X_load_tuning_settings+0x140>
 8004f82:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <VL53L0X_load_tuning_settings+0x48>)
 8004f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f88:	08004f99 	.word	0x08004f99
 8004f8c:	08004fd3 	.word	0x08004fd3
 8004f90:	0800500d 	.word	0x0800500d
 8004f94:	08005047 	.word	0x08005047
                case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
                    msb = *(pTuningSettingBuffer + Index);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	743b      	strb	r3, [r7, #16]
                    Index++;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	617b      	str	r3, [r7, #20]
                    lsb = *(pTuningSettingBuffer + Index);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	4413      	add	r3, r2
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	73fb      	strb	r3, [r7, #15]
                    Index++;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	617b      	str	r3, [r7, #20]
                    Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004fb8:	7c3b      	ldrb	r3, [r7, #16]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	81bb      	strh	r3, [r7, #12]
                    PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	89ba      	ldrh	r2, [r7, #12]
 8004fcc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
                    break;
 8004fd0:	e087      	b.n	80050e2 <VL53L0X_load_tuning_settings+0x1a2>

                case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
                    msb = *(pTuningSettingBuffer + Index);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	743b      	strb	r3, [r7, #16]
                    Index++;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	617b      	str	r3, [r7, #20]
                    lsb = *(pTuningSettingBuffer + Index);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	73fb      	strb	r3, [r7, #15]
                    Index++;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	617b      	str	r3, [r7, #20]
                    Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004ff2:	7c3b      	ldrb	r3, [r7, #16]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	4413      	add	r3, r2
 8005000:	81bb      	strh	r3, [r7, #12]
                    PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	89ba      	ldrh	r2, [r7, #12]
 8005006:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
                                  Temp16);
                    break;
 800500a:	e06a      	b.n	80050e2 <VL53L0X_load_tuning_settings+0x1a2>

                case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
                    msb = *(pTuningSettingBuffer + Index);
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	4413      	add	r3, r2
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	743b      	strb	r3, [r7, #16]
                    Index++;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	3301      	adds	r3, #1
 800501a:	617b      	str	r3, [r7, #20]
                    lsb = *(pTuningSettingBuffer + Index);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	4413      	add	r3, r2
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	73fb      	strb	r3, [r7, #15]
                    Index++;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	3301      	adds	r3, #1
 800502a:	617b      	str	r3, [r7, #20]
                    Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800502c:	7c3b      	ldrb	r3, [r7, #16]
 800502e:	b29b      	uxth	r3, r3
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	b29a      	uxth	r2, r3
 8005034:	7bfb      	ldrb	r3, [r7, #15]
 8005036:	b29b      	uxth	r3, r3
 8005038:	4413      	add	r3, r2
 800503a:	81bb      	strh	r3, [r7, #12]
                    PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	89ba      	ldrh	r2, [r7, #12]
 8005040:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
                    break;
 8005044:	e04d      	b.n	80050e2 <VL53L0X_load_tuning_settings+0x1a2>

                case 3: /* uint16_t targetRefRate -> 2 bytes */
                    msb = *(pTuningSettingBuffer + Index);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	4413      	add	r3, r2
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	743b      	strb	r3, [r7, #16]
                    Index++;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	3301      	adds	r3, #1
 8005054:	617b      	str	r3, [r7, #20]
                    lsb = *(pTuningSettingBuffer + Index);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	4413      	add	r3, r2
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	73fb      	strb	r3, [r7, #15]
                    Index++;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	3301      	adds	r3, #1
 8005064:	617b      	str	r3, [r7, #20]
                    Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005066:	7c3b      	ldrb	r3, [r7, #16]
 8005068:	b29b      	uxth	r3, r3
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	b29a      	uxth	r2, r3
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	b29b      	uxth	r3, r3
 8005072:	4413      	add	r3, r2
 8005074:	81bb      	strh	r3, [r7, #12]
                    PALDevDataSet(Dev, targetRefRate, Temp16);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	89ba      	ldrh	r2, [r7, #12]
 800507a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
                    break;
 800507e:	e030      	b.n	80050e2 <VL53L0X_load_tuning_settings+0x1a2>

                default: /* invalid parameter */
                    Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005080:	23fc      	movs	r3, #252	; 0xfc
 8005082:	77fb      	strb	r3, [r7, #31]
 8005084:	e02d      	b.n	80050e2 <VL53L0X_load_tuning_settings+0x1a2>
            }
        } else if (NumberOfWrites <= 4) {
 8005086:	7cfb      	ldrb	r3, [r7, #19]
 8005088:	2b04      	cmp	r3, #4
 800508a:	d828      	bhi.n	80050de <VL53L0X_load_tuning_settings+0x19e>
            Address = *(pTuningSettingBuffer + Index);
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	4413      	add	r3, r2
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	74bb      	strb	r3, [r7, #18]
            Index++;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	3301      	adds	r3, #1
 800509a:	617b      	str	r3, [r7, #20]

            for (i = 0; i < NumberOfWrites; i++) {
 800509c:	2300      	movs	r3, #0
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	e00f      	b.n	80050c2 <VL53L0X_load_tuning_settings+0x182>
                localBuffer[i] = *(pTuningSettingBuffer +
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	4413      	add	r3, r2
 80050a8:	7819      	ldrb	r1, [r3, #0]
 80050aa:	f107 0208 	add.w	r2, r7, #8
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	4413      	add	r3, r2
 80050b2:	460a      	mov	r2, r1
 80050b4:	701a      	strb	r2, [r3, #0]
                                   Index);
                Index++;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	3301      	adds	r3, #1
 80050ba:	617b      	str	r3, [r7, #20]
            for (i = 0; i < NumberOfWrites; i++) {
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	3301      	adds	r3, #1
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	7cfb      	ldrb	r3, [r7, #19]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	dbeb      	blt.n	80050a2 <VL53L0X_load_tuning_settings+0x162>
            }

            Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80050ca:	7cfb      	ldrb	r3, [r7, #19]
 80050cc:	f107 0208 	add.w	r2, r7, #8
 80050d0:	7cb9      	ldrb	r1, [r7, #18]
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fe66 	bl	8005da4 <VL53L0X_WriteMulti>
 80050d8:	4603      	mov	r3, r0
 80050da:	77fb      	strb	r3, [r7, #31]
 80050dc:	e001      	b.n	80050e2 <VL53L0X_load_tuning_settings+0x1a2>
                                        NumberOfWrites);
        } else {
            Status = VL53L0X_ERROR_INVALID_PARAMS;
 80050de:	23fc      	movs	r3, #252	; 0xfc
 80050e0:	77fb      	strb	r3, [r7, #31]
    while ((*(pTuningSettingBuffer + Index) != 0) &&
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	4413      	add	r3, r2
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d004      	beq.n	80050f8 <VL53L0X_load_tuning_settings+0x1b8>
 80050ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f43f af2e 	beq.w	8004f54 <VL53L0X_load_tuning_settings+0x14>
        }
    }

    LOG_FUNCTION_END(Status);
    return Status;
 80050f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3720      	adds	r7, #32
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t* pRangingMeasurementData,
                                           FixPoint1616_t*                   ptotal_xtalk_rate_mcps) {
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005110:	2300      	movs	r3, #0
 8005112:	77fb      	strb	r3, [r7, #31]

    uint8_t xtalkCompEnable;
    FixPoint1616_t totalXtalkMegaCps;
    FixPoint1616_t xtalkPerSpadMegaCps;

    *ptotal_xtalk_rate_mcps = 0;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]

    Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800511a:	f107 0313 	add.w	r3, r7, #19
 800511e:	4619      	mov	r1, r3
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f7fc fccd 	bl	8001ac0 <VL53L0X_GetXTalkCompensationEnable>
 8005126:	4603      	mov	r3, r0
 8005128:	77fb      	strb	r3, [r7, #31]

    if (Status == VL53L0X_ERROR_NONE) {
 800512a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d111      	bne.n	8005156 <VL53L0X_get_total_xtalk_rate+0x52>
        if (xtalkCompEnable) {
 8005132:	7cfb      	ldrb	r3, [r7, #19]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00e      	beq.n	8005156 <VL53L0X_get_total_xtalk_rate+0x52>
            VL53L0X_GETPARAMETERFIELD(
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	61bb      	str	r3, [r7, #24]
                XTalkCompensationRateMegaCps,
                xtalkPerSpadMegaCps);

            /* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
            totalXtalkMegaCps =
                pRangingMeasurementData->EffectiveSpadRtnCount *
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	8a9b      	ldrh	r3, [r3, #20]
 8005142:	461a      	mov	r2, r3
            totalXtalkMegaCps =
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	fb02 f303 	mul.w	r3, r2, r3
 800514a:	617b      	str	r3, [r7, #20]
                xtalkPerSpadMegaCps;

            /* FixPoint0824 >> 8 = FixPoint1616 */
            *ptotal_xtalk_rate_mcps =
                (totalXtalkMegaCps + 0x80) >> 8;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	3380      	adds	r3, #128	; 0x80
 8005150:	0a1a      	lsrs	r2, r3, #8
            *ptotal_xtalk_rate_mcps =
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	601a      	str	r2, [r3, #0]
        }
    }

    return Status;
 8005156:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3720      	adds	r7, #32
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t* pRangingMeasurementData,
                                            FixPoint1616_t*                   ptotal_signal_rate_mcps) {
 8005162:	b580      	push	{r7, lr}
 8005164:	b086      	sub	sp, #24
 8005166:	af00      	add	r7, sp, #0
 8005168:	60f8      	str	r0, [r7, #12]
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	607a      	str	r2, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800516e:	2300      	movs	r3, #0
 8005170:	75fb      	strb	r3, [r7, #23]
    FixPoint1616_t totalXtalkMegaCps;

    LOG_FUNCTION_START("");

    *ptotal_signal_rate_mcps =
        pRangingMeasurementData->SignalRateRtnMegaCps;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	68da      	ldr	r2, [r3, #12]
    *ptotal_signal_rate_mcps =
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	601a      	str	r2, [r3, #0]

    Status = VL53L0X_get_total_xtalk_rate(
 800517a:	f107 0310 	add.w	r3, r7, #16
 800517e:	461a      	mov	r2, r3
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f7ff ffbe 	bl	8005104 <VL53L0X_get_total_xtalk_rate>
 8005188:	4603      	mov	r3, r0
 800518a:	75fb      	strb	r3, [r7, #23]
        Dev, pRangingMeasurementData, &totalXtalkMegaCps);

    if (Status == VL53L0X_ERROR_NONE) {
 800518c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d105      	bne.n	80051a0 <VL53L0X_get_total_signal_rate+0x3e>
        *ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	441a      	add	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	601a      	str	r2, [r3, #0]
    }

    return Status;
 80051a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <VL53L0X_calc_dmax>:

VL53L0X_Error VL53L0X_calc_dmax(VL53L0X_DEV Dev, FixPoint1616_t totalSignalRate_mcps,
                                FixPoint1616_t totalCorrSignalRate_mcps, FixPoint1616_t pwMult,
                                uint32_t sigmaEstimateP1, FixPoint1616_t sigmaEstimateP2, uint32_t peakVcselDuration_us,
                                uint32_t*      pdmax_mm) {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b09a      	sub	sp, #104	; 0x68
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
    const uint32_t cSigmaLimit = 18;
 80051ba:	2312      	movs	r3, #18
 80051bc:	657b      	str	r3, [r7, #84]	; 0x54
    const FixPoint1616_t cSignalLimit = 0x4000;     /* 0.25 */
 80051be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051c2:	653b      	str	r3, [r7, #80]	; 0x50
    const FixPoint1616_t cSigmaEstRef = 0x00000042; /* 0.001 */
 80051c4:	2342      	movs	r3, #66	; 0x42
 80051c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 80051c8:	2306      	movs	r3, #6
 80051ca:	64bb      	str	r3, [r7, #72]	; 0x48
    const uint32_t cAmbEffWidthDMax_ns = 7;
 80051cc:	2307      	movs	r3, #7
 80051ce:	647b      	str	r3, [r7, #68]	; 0x44
    FixPoint1616_t dmaxAmbient;
    FixPoint1616_t dmaxDarkTmp;
    FixPoint1616_t sigmaEstP2Tmp;
    uint32_t signalRateTemp_mcps;

    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051d0:	2300      	movs	r3, #0
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    LOG_FUNCTION_START("");

    dmaxCalRange_mm =
        PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
    dmaxCalRange_mm =
 80051dc:	63fb      	str	r3, [r7, #60]	; 0x3c

    dmaxCalSignalRateRtn_mcps =
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80051e4:	63bb      	str	r3, [r7, #56]	; 0x38
        PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

    /* uint32 * FixPoint1616 = FixPoint1616 */
    SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80051e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
 80051ee:	637b      	str	r3, [r7, #52]	; 0x34

    /* FixPoint1616 >> 8 = FixPoint2408 */
    SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 80051f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f2:	3380      	adds	r3, #128	; 0x80
 80051f4:	0a1b      	lsrs	r3, r3, #8
 80051f6:	637b      	str	r3, [r7, #52]	; 0x34
    SignalAt0mm *= dmaxCalRange_mm;
 80051f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051fc:	fb02 f303 	mul.w	r3, r2, r3
 8005200:	637b      	str	r3, [r7, #52]	; 0x34

    minSignalNeeded_p1 = 0;
 8005202:	2300      	movs	r3, #0
 8005204:	667b      	str	r3, [r7, #100]	; 0x64

    if (totalCorrSignalRate_mcps > 0) {
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01a      	beq.n	8005242 <VL53L0X_calc_dmax+0x96>
        /* Shift by 10 bits to increase resolution prior to the
         * division */
        signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	029b      	lsls	r3, r3, #10
 8005210:	633b      	str	r3, [r7, #48]	; 0x30

        /* Add rounding value prior to division */
        minSignalNeeded_p1 = signalRateTemp_mcps +
                             (totalCorrSignalRate_mcps / 2);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	085b      	lsrs	r3, r3, #1
        minSignalNeeded_p1 = signalRateTemp_mcps +
 8005216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005218:	4413      	add	r3, r2
 800521a:	667b      	str	r3, [r7, #100]	; 0x64

        /* FixPoint0626/FixPoint1616 = FixPoint2210 */
        minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800521c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	fbb2 f3f3 	udiv	r3, r2, r3
 8005224:	667b      	str	r3, [r7, #100]	; 0x64

        /* Apply a factored version of the speed of light.
         * Correction to be applied at the end */
        minSignalNeeded_p1 *= 3;
 8005226:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005228:	4613      	mov	r3, r2
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	4413      	add	r3, r2
 800522e:	667b      	str	r3, [r7, #100]	; 0x64

        /* FixPoint2210 * FixPoint2210 = FixPoint1220 */
        minSignalNeeded_p1 *= minSignalNeeded_p1;
 8005230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005232:	fb03 f303 	mul.w	r3, r3, r3
 8005236:	667b      	str	r3, [r7, #100]	; 0x64

        /* FixPoint1220 >> 16 = FixPoint2804 */
        minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8005238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800523a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800523e:	0c1b      	lsrs	r3, r3, #16
 8005240:	667b      	str	r3, [r7, #100]	; 0x64
    }

    minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005246:	fb02 f303 	mul.w	r3, r2, r3
 800524a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* FixPoint1616 >> 16 =	 uint32 */
    minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800524c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005252:	0c1b      	lsrs	r3, r3, #16
 8005254:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* uint32 * uint32	=  uint32 */
    minSignalNeeded_p2 *= minSignalNeeded_p2;
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	fb03 f303 	mul.w	r3, r3, r3
 800525c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Check sigmaEstimateP2
     * If this value is too high there is not enough signal rate
     * to calculate dmax value so set a suitable value to ensure
     * a very small dmax.
     */
    sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800525e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005260:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005264:	0c1b      	lsrs	r3, r3, #16
 8005266:	62bb      	str	r3, [r7, #40]	; 0x28
    sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns / 2) /
 8005268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800526a:	085a      	lsrs	r2, r3, #1
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	441a      	add	r2, r3
 8005270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005272:	fbb2 f3f3 	udiv	r3, r2, r3
 8005276:	62bb      	str	r3, [r7, #40]	; 0x28
                    cAmbEffWidthSigmaEst_ns;
    sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800527c:	fb02 f303 	mul.w	r3, r2, r3
 8005280:	62bb      	str	r3, [r7, #40]	; 0x28

    if (sigmaEstP2Tmp > 0xffff) {
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005288:	d302      	bcc.n	8005290 <VL53L0X_calc_dmax+0xe4>
        minSignalNeeded_p3 = 0xfff00000;
 800528a:	4b54      	ldr	r3, [pc, #336]	; (80053dc <VL53L0X_calc_dmax+0x230>)
 800528c:	663b      	str	r3, [r7, #96]	; 0x60
 800528e:	e015      	b.n	80052bc <VL53L0X_calc_dmax+0x110>
    } else {
        /* DMAX uses a different ambient width from sigma, so apply
         * correction.
         * Perform division before multiplication to prevent overflow.
         */
        sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns / 2) /
 8005290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005292:	085a      	lsrs	r2, r3, #1
 8005294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005296:	441a      	add	r2, r3
 8005298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800529a:	fbb2 f3f3 	udiv	r3, r2, r3
 800529e:	677b      	str	r3, [r7, #116]	; 0x74
                          cAmbEffWidthSigmaEst_ns;
        sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80052a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052a4:	fb02 f303 	mul.w	r3, r2, r3
 80052a8:	677b      	str	r3, [r7, #116]	; 0x74

        /* FixPoint1616 >> 16 = uint32 */
        minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80052aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80052b0:	0c1b      	lsrs	r3, r3, #16
 80052b2:	663b      	str	r3, [r7, #96]	; 0x60

        minSignalNeeded_p3 *= minSignalNeeded_p3;
 80052b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052b6:	fb03 f303 	mul.w	r3, r3, r3
 80052ba:	663b      	str	r3, [r7, #96]	; 0x60
    }

    /* FixPoint1814 / uint32 = FixPoint1814 */
    sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 80052bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052be:	039b      	lsls	r3, r3, #14
 80052c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80052c4:	4a46      	ldr	r2, [pc, #280]	; (80053e0 <VL53L0X_calc_dmax+0x234>)
 80052c6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ca:	099b      	lsrs	r3, r3, #6
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
    sigmaLimitTmp *= sigmaLimitTmp;
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	fb03 f303 	mul.w	r3, r3, r3
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24

    /* FixPoint1616 * FixPoint1616 = FixPoint3232 */
    sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 80052d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d8:	fb03 f303 	mul.w	r3, r3, r3
 80052dc:	623b      	str	r3, [r7, #32]

    /* FixPoint3232 >> 4 = FixPoint0428 */
    sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	3308      	adds	r3, #8
 80052e2:	091b      	lsrs	r3, r3, #4
 80052e4:	623b      	str	r3, [r7, #32]

    /* FixPoint0428 - FixPoint0428	= FixPoint0428 */
    sigmaLimitTmp -= sigmaEstSqTmp;
 80052e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* uint32_t * FixPoint0428 = FixPoint0428 */
    minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 80052ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f0:	4613      	mov	r3, r2
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	4413      	add	r3, r2
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	61fb      	str	r3, [r7, #28]

    /* FixPoint0428 >> 14 = FixPoint1814 */
    minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005300:	0b9b      	lsrs	r3, r3, #14
 8005302:	61fb      	str	r3, [r7, #28]

    /* uint32 + uint32 = uint32 */
    minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8005304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005308:	4413      	add	r3, r2
 800530a:	61bb      	str	r3, [r7, #24]

    /* uint32 / uint32 = uint32 */
    minSignalNeeded += (peakVcselDuration_us / 2);
 800530c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800530e:	085b      	lsrs	r3, r3, #1
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	4413      	add	r3, r2
 8005314:	61bb      	str	r3, [r7, #24]
    minSignalNeeded /= peakVcselDuration_us;
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800531a:	fbb2 f3f3 	udiv	r3, r2, r3
 800531e:	61bb      	str	r3, [r7, #24]

    /* uint32 << 14 = FixPoint1814 */
    minSignalNeeded <<= 14;
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	039b      	lsls	r3, r3, #14
 8005324:	61bb      	str	r3, [r7, #24]

    /* FixPoint1814 / FixPoint1814 = uint32 */
    minSignalNeeded += (minSignalNeeded_p4 / 2);
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	085b      	lsrs	r3, r3, #1
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4413      	add	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
    minSignalNeeded /= minSignalNeeded_p4;
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	fbb2 f3f3 	udiv	r3, r2, r3
 8005338:	61bb      	str	r3, [r7, #24]

    /* FixPoint3200 * FixPoint2804 := FixPoint2804*/
    minSignalNeeded *= minSignalNeeded_p1;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800533e:	fb02 f303 	mul.w	r3, r2, r3
 8005342:	61bb      	str	r3, [r7, #24]
     * and 10E-22 on the denominator.
     * We do this because 32bit fix point calculation can't
     * handle the larger and smaller elements of this equation,
     * i.e. speed of light and pulse widths.
     */
    minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800534a:	4a25      	ldr	r2, [pc, #148]	; (80053e0 <VL53L0X_calc_dmax+0x234>)
 800534c:	fba2 2303 	umull	r2, r3, r2, r3
 8005350:	099b      	lsrs	r3, r3, #6
 8005352:	61bb      	str	r3, [r7, #24]
    minSignalNeeded <<= 4;
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	61bb      	str	r3, [r7, #24]

    minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005360:	4a1f      	ldr	r2, [pc, #124]	; (80053e0 <VL53L0X_calc_dmax+0x234>)
 8005362:	fba2 2303 	umull	r2, r3, r2, r3
 8005366:	099b      	lsrs	r3, r3, #6
 8005368:	61bb      	str	r3, [r7, #24]

    /* FixPoint1616 >> 8 = FixPoint2408 */
    signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800536a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800536c:	3380      	adds	r3, #128	; 0x80
 800536e:	0a1b      	lsrs	r3, r3, #8
 8005370:	617b      	str	r3, [r7, #20]

    /* FixPoint2408/FixPoint2408 = uint32 */
    if (signalLimitTmp != 0) {
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <VL53L0X_calc_dmax+0x1de>
        dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2)) /
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	085a      	lsrs	r2, r3, #1
 800537c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537e:	441a      	add	r2, r3
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	fbb2 f3f3 	udiv	r3, r2, r3
 8005386:	65bb      	str	r3, [r7, #88]	; 0x58
 8005388:	e001      	b.n	800538e <VL53L0X_calc_dmax+0x1e2>
                      signalLimitTmp;
    } else {
        dmaxDarkTmp = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800538e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005390:	f7fe f9b9 	bl	8003706 <VL53L0X_isqrt>
 8005394:	6138      	str	r0, [r7, #16]

    /* FixPoint2408/FixPoint2408 = uint32 */
    if (minSignalNeeded != 0) {
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d008      	beq.n	80053ae <VL53L0X_calc_dmax+0x202>
        dmaxAmbient = (SignalAt0mm + minSignalNeeded / 2) /
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	085a      	lsrs	r2, r3, #1
 80053a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a2:	441a      	add	r2, r3
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ac:	e001      	b.n	80053b2 <VL53L0X_calc_dmax+0x206>
                      minSignalNeeded;
    } else {
        dmaxAmbient = 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80053b2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80053b4:	f7fe f9a7 	bl	8003706 <VL53L0X_isqrt>
 80053b8:	65f8      	str	r0, [r7, #92]	; 0x5c

    *pdmax_mm = dmaxDark;
 80053ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	601a      	str	r2, [r3, #0]

    if (dmaxDark > dmaxAmbient) {
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d902      	bls.n	80053ce <VL53L0X_calc_dmax+0x222>
        *pdmax_mm = dmaxAmbient;
 80053c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053cc:	601a      	str	r2, [r3, #0]
    }

    LOG_FUNCTION_END(Status);

    return Status;
 80053ce:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3768      	adds	r7, #104	; 0x68
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	fff00000 	.word	0xfff00000
 80053e0:	10624dd3 	.word	0x10624dd3

080053e4 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t* pRangingMeasurementData,
                                          FixPoint1616_t*                   pSigmaEstimate,
                                          uint32_t*                         pDmax_mm) {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b0b4      	sub	sp, #208	; 0xd0
 80053e8:	af04      	add	r7, sp, #16
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
    /* Expressed in 100ths of a ns, i.e. centi-ns */
    const uint32_t cPulseEffectiveWidth_centi_ns = 800;
 80053f2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80053f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    /* Expressed in 100ths of a ns, i.e. centi-ns */
    const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80053fa:	f44f 7316 	mov.w	r3, #600	; 0x258
 80053fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs = 0x00190000; /* 25ms */
 8005402:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8005406:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    const uint32_t cVcselPulseWidth_ps = 4700;                                 /* pico secs */
 800540a:	f241 235c 	movw	r3, #4700	; 0x125c
 800540e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const FixPoint1616_t cSigmaEstMax = 0x028F87AE;
 8005412:	4b9e      	ldr	r3, [pc, #632]	; (800568c <VL53L0X_calc_sigma_estimate+0x2a8>)
 8005414:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    const FixPoint1616_t cSigmaEstRtnMax = 0xF000;
 8005418:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800541c:	67fb      	str	r3, [r7, #124]	; 0x7c
    const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000 /
 800541e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8005422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005426:	fbb2 f3f3 	udiv	r3, r2, r3
 800542a:	67bb      	str	r3, [r7, #120]	; 0x78
                                                cAmbientEffectiveWidth_centi_ns;

    /* Time Of Flight per mm (6.6 pico secs) */
    const FixPoint1616_t cTOF_per_mm_ps = 0x0006999A;
 800542c:	4b98      	ldr	r3, [pc, #608]	; (8005690 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800542e:	677b      	str	r3, [r7, #116]	; 0x74
    const uint32_t c16BitRoundingParam = 0x00008000;
 8005430:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005434:	673b      	str	r3, [r7, #112]	; 0x70
    const FixPoint1616_t cMaxXTalk_kcps = 0x00320000;
 8005436:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800543a:	66fb      	str	r3, [r7, #108]	; 0x6c
    const uint32_t cPllPeriod_ps = 1655;
 800543c:	f240 6377 	movw	r3, #1655	; 0x677
 8005440:	66bb      	str	r3, [r7, #104]	; 0x68
    FixPoint1616_t xTalkCorrection;
    FixPoint1616_t ambientRate_kcps;
    FixPoint1616_t peakSignalRate_kcps;
    FixPoint1616_t xTalkCompRate_mcps;
    uint32_t xTalkCompRate_kcps;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005442:	2300      	movs	r3, #0
 8005444:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
     * Estimates the range sigma
     */

    LOG_FUNCTION_START("");

    VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	617b      	str	r3, [r7, #20]
     * We work in kcps rather than mcps as this helps keep within the
     * confines of the 32 Fix1616 type.
     */

    ambientRate_kcps =
        (pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005456:	fb02 f303 	mul.w	r3, r2, r3
    ambientRate_kcps =
 800545a:	0c1b      	lsrs	r3, r3, #16
 800545c:	667b      	str	r3, [r7, #100]	; 0x64

    correctedSignalRate_mcps =
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	663b      	str	r3, [r7, #96]	; 0x60
        pRangingMeasurementData->SignalRateRtnMegaCps;

    Status = VL53L0X_get_total_signal_rate(
 8005464:	f107 0310 	add.w	r3, r7, #16
 8005468:	461a      	mov	r2, r3
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f7ff fe78 	bl	8005162 <VL53L0X_get_total_signal_rate>
 8005472:	4603      	mov	r3, r0
 8005474:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        Dev, pRangingMeasurementData, &totalSignalRate_mcps);
    Status = VL53L0X_get_total_xtalk_rate(
 8005478:	f107 0314 	add.w	r3, r7, #20
 800547c:	461a      	mov	r2, r3
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7ff fe3f 	bl	8005104 <VL53L0X_get_total_xtalk_rate>
 8005486:	4603      	mov	r3, r0
 8005488:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        Dev, pRangingMeasurementData, &xTalkCompRate_mcps);

    /* Signal rate measurement provided by device is the
     * peak signal rate, not average.
     */
    peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005492:	fb02 f303 	mul.w	r3, r2, r3
 8005496:	65fb      	str	r3, [r7, #92]	; 0x5c
    peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8005498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800549a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800549e:	0c1b      	lsrs	r3, r3, #16
 80054a0:	65fb      	str	r3, [r7, #92]	; 0x5c

    xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054a8:	fb02 f303 	mul.w	r3, r2, r3
 80054ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    if (xTalkCompRate_kcps > cMaxXTalk_kcps) {
 80054b0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80054b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d902      	bls.n	80054c0 <VL53L0X_calc_sigma_estimate+0xdc>
        xTalkCompRate_kcps = cMaxXTalk_kcps;
 80054ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80054c0:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d168      	bne.n	800559a <VL53L0X_calc_sigma_estimate+0x1b6>
        /* Calculate final range macro periods */
        finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80054ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            Dev, FinalRangeTimeoutMicroSecs);

        finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80054d8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            Dev, FinalRangeVcselPulsePeriod);

        finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80054dc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80054e0:	461a      	mov	r2, r3
 80054e2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f7fe feb2 	bl	8004250 <VL53L0X_calc_timeout_mclks>
 80054ec:	6578      	str	r0, [r7, #84]	; 0x54
            Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

        /* Calculate pre-range macro periods */
        preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80054f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            Dev, PreRangeTimeoutMicroSecs);

        preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80054fe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            Dev, PreRangeVcselPulsePeriod);

        preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8005502:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005506:	461a      	mov	r2, r3
 8005508:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f7fe fe9f 	bl	8004250 <VL53L0X_calc_timeout_mclks>
 8005512:	64f8      	str	r0, [r7, #76]	; 0x4c
            Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

        vcselWidth = 3;
 8005514:	2303      	movs	r3, #3
 8005516:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

        if (finalRangeVcselPCLKS == 8) {
 800551a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800551e:	2b08      	cmp	r3, #8
 8005520:	d102      	bne.n	8005528 <VL53L0X_calc_sigma_estimate+0x144>
            vcselWidth = 2;
 8005522:	2302      	movs	r3, #2
 8005524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        }

        peakVcselDuration_us = vcselWidth * 2048 *
                               (preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8005528:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800552a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800552c:	4413      	add	r3, r2
        peakVcselDuration_us = vcselWidth * 2048 *
 800552e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005532:	fb02 f303 	mul.w	r3, r2, r3
 8005536:	02db      	lsls	r3, r3, #11
 8005538:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        peakVcselDuration_us = (peakVcselDuration_us + 500) / 1000;
 800553c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005540:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005544:	4a53      	ldr	r2, [pc, #332]	; (8005694 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005546:	fba2 2303 	umull	r2, r3, r2, r3
 800554a:	099b      	lsrs	r3, r3, #6
 800554c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        peakVcselDuration_us *= cPllPeriod_ps;
 8005550:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005554:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005556:	fb02 f303 	mul.w	r3, r2, r3
 800555a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        peakVcselDuration_us = (peakVcselDuration_us + 500) / 1000;
 800555e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005562:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005566:	4a4b      	ldr	r2, [pc, #300]	; (8005694 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005568:	fba2 2303 	umull	r2, r3, r2, r3
 800556c:	099b      	lsrs	r3, r3, #6
 800556e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

        /* Fix1616 >> 8 = Fix2408 */
        totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	3380      	adds	r3, #128	; 0x80
 8005576:	0a1b      	lsrs	r3, r3, #8
 8005578:	613b      	str	r3, [r7, #16]

        /* Fix2408 * uint32 = Fix2408 */
        vcselTotalEventsRtn = totalSignalRate_mcps *
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005580:	fb02 f303 	mul.w	r3, r2, r3
 8005584:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              peakVcselDuration_us;

        /* Fix2408 >> 8 = uint32 */
        vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8005588:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800558c:	3380      	adds	r3, #128	; 0x80
 800558e:	0a1b      	lsrs	r3, r3, #8
 8005590:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        /* Fix2408 << 8 = Fix1616 = */
        totalSignalRate_mcps <<= 8;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	613b      	str	r3, [r7, #16]
    }

    if (Status != VL53L0X_ERROR_NONE) {
 800559a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <VL53L0X_calc_sigma_estimate+0x1c4>
        LOG_FUNCTION_END(Status);
        return Status;
 80055a2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80055a6:	e15e      	b.n	8005866 <VL53L0X_calc_sigma_estimate+0x482>
    }

    if (peakSignalRate_kcps == 0) {
 80055a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10c      	bne.n	80055c8 <VL53L0X_calc_sigma_estimate+0x1e4>
        *pSigmaEstimate = cSigmaEstMax;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055b4:	601a      	str	r2, [r3, #0]
        PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055bc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        *pDmax_mm = 0;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	e14c      	b.n	8005862 <VL53L0X_calc_sigma_estimate+0x47e>
    } else {
        if (vcselTotalEventsRtn < 1) {
 80055c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d102      	bne.n	80055d6 <VL53L0X_calc_sigma_estimate+0x1f2>
            vcselTotalEventsRtn = 1;
 80055d0:	2301      	movs	r3, #1
 80055d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        }

        sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 80055d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055da:	64bb      	str	r3, [r7, #72]	; 0x48

        /* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
        sigmaEstimateP2 = (ambientRate_kcps << 16) / peakSignalRate_kcps;
 80055dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055de:	041a      	lsls	r2, r3, #16
 80055e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

        if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80055ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d902      	bls.n	80055fa <VL53L0X_calc_sigma_estimate+0x216>
            /* Clip to prevent overflow. Will ensure safe
             * max result. */
            sigmaEstimateP2 = cAmbToSignalRatioMax;
 80055f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        }

        sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80055fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80055fe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005602:	fb02 f303 	mul.w	r3, r2, r3
 8005606:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

        sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800560a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800560e:	4613      	mov	r3, r2
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4618      	mov	r0, r3
 8005618:	f7fe f875 	bl	8003706 <VL53L0X_isqrt>
 800561c:	4603      	mov	r3, r0
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	647b      	str	r3, [r7, #68]	; 0x44

        /* uint32 * FixPoint1616 = FixPoint1616 */
        deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	891b      	ldrh	r3, [r3, #8]
 8005626:	461a      	mov	r2, r3
 8005628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800562a:	fb02 f303 	mul.w	r3, r2, r3
 800562e:	643b      	str	r3, [r7, #64]	; 0x40
         * (uint32 << 16) - FixPoint1616 = FixPoint1616.
         * Divide result by 1000 to convert to mcps.
         * 500 is added to ensure rounding when integer division
         * truncates.
         */
        diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005632:	041a      	lsls	r2, r3, #16
                       2 * xTalkCompRate_kcps) + 500) / 1000;
 8005634:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005638:	005b      	lsls	r3, r3, #1
        diff1_mcps = (((peakSignalRate_kcps << 16) -
 800563a:	1ad3      	subs	r3, r2, r3
                       2 * xTalkCompRate_kcps) + 500) / 1000;
 800563c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
        diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005640:	4a14      	ldr	r2, [pc, #80]	; (8005694 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005642:	fba2 2303 	umull	r2, r3, r2, r3
 8005646:	099b      	lsrs	r3, r3, #6
 8005648:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* vcselRate + xtalkCompRate */
        diff2_mcps = ((peakSignalRate_kcps << 16) + 500) / 1000;
 800564a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800564c:	041b      	lsls	r3, r3, #16
 800564e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005652:	4a10      	ldr	r2, [pc, #64]	; (8005694 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005654:	fba2 2303 	umull	r2, r3, r2, r3
 8005658:	099b      	lsrs	r3, r3, #6
 800565a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Shift by 8 bits to increase resolution prior to the
         * division */
        diff1_mcps <<= 8;
 800565c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565e:	021b      	lsls	r3, r3, #8
 8005660:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* FixPoint0824/FixPoint1616 = FixPoint2408 */
        xTalkCorrection = abs(diff1_mcps / diff2_mcps);
 8005662:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	fbb2 f3f3 	udiv	r3, r2, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	bfb8      	it	lt
 800566e:	425b      	neglt	r3, r3
 8005670:	637b      	str	r3, [r7, #52]	; 0x34

        /* FixPoint2408 << 8 = FixPoint1616 */
        xTalkCorrection <<= 8;
 8005672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005674:	021b      	lsls	r3, r3, #8
 8005676:	637b      	str	r3, [r7, #52]	; 0x34

        if (pRangingMeasurementData->RangeStatus != 0) {
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	7e1b      	ldrb	r3, [r3, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00b      	beq.n	8005698 <VL53L0X_calc_sigma_estimate+0x2b4>
            pwMult = 1 << 16;
 8005680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005684:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005688:	e033      	b.n	80056f2 <VL53L0X_calc_sigma_estimate+0x30e>
 800568a:	bf00      	nop
 800568c:	028f87ae 	.word	0x028f87ae
 8005690:	0006999a 	.word	0x0006999a
 8005694:	10624dd3 	.word	0x10624dd3
        } else {
            /* FixPoint1616/uint32 = FixPoint1616 */
            pwMult = deltaT_ps / cVcselPulseWidth_ps; /* smaller than 1.0f */
 8005698:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800569a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800569e:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            /*
             * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
             * values are small enough such that32 bits will not be
             * exceeded.
             */
            pwMult *= ((1 << 16) - xTalkCorrection);
 80056a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a8:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 80056ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056b0:	fb02 f303 	mul.w	r3, r2, r3
 80056b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

            /* (FixPoint3232 >> 16) = FixPoint1616 */
            pwMult = (pwMult + c16BitRoundingParam) >> 16;
 80056b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80056bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056be:	4413      	add	r3, r2
 80056c0:	0c1b      	lsrs	r3, r3, #16
 80056c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

            /* FixPoint1616 + FixPoint1616 = FixPoint1616 */
            pwMult += (1 << 16);
 80056c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056ca:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80056ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            /*
             * At this point the value will be 1.xx, therefore if we square
             * the value this will exceed 32 bits. To address this perform
             * a single shift to the right before the multiplication.
             */
            pwMult >>= 1;
 80056d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056d6:	085b      	lsrs	r3, r3, #1
 80056d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

            /* FixPoint1715 * FixPoint1715 = FixPoint3430 */
            pwMult = pwMult * pwMult;
 80056dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056e0:	fb03 f303 	mul.w	r3, r3, r3
 80056e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

            /* (FixPoint3430 >> 14) = Fix1616 */
            pwMult >>= 14;
 80056e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056ec:	0b9b      	lsrs	r3, r3, #14
 80056ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        }

        /* FixPoint1616 * uint32 = FixPoint1616 */
        sqr1 = pwMult * sigmaEstimateP1;
 80056f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056f8:	fb02 f303 	mul.w	r3, r2, r3
 80056fc:	633b      	str	r3, [r7, #48]	; 0x30

        /* (FixPoint1616 >> 16) = FixPoint3200 */
        sqr1 = (sqr1 + 0x8000) >> 16;
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005704:	0c1b      	lsrs	r3, r3, #16
 8005706:	633b      	str	r3, [r7, #48]	; 0x30

        /* FixPoint3200 * FixPoint3200 = FixPoint6400 */
        sqr1 *= sqr1;
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	fb03 f303 	mul.w	r3, r3, r3
 800570e:	633b      	str	r3, [r7, #48]	; 0x30

        sqr2 = sigmaEstimateP2;
 8005710:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* (FixPoint1616 >> 16) = FixPoint3200 */
        sqr2 = (sqr2 + 0x8000) >> 16;
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800571c:	0c1b      	lsrs	r3, r3, #16
 800571e:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* FixPoint3200 * FixPoint3200 = FixPoint6400 */
        sqr2 *= sqr2;
 8005720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005722:	fb03 f303 	mul.w	r3, r3, r3
 8005726:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* FixPoint64000 + FixPoint6400 = FixPoint6400 */
        sqrSum = sqr1 + sqr2;
 8005728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572c:	4413      	add	r3, r2
 800572e:	62bb      	str	r3, [r7, #40]	; 0x28

        /* SQRT(FixPoin6400) = FixPoint3200 */
        sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8005730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005732:	f7fd ffe8 	bl	8003706 <VL53L0X_isqrt>
 8005736:	6278      	str	r0, [r7, #36]	; 0x24

        /* (FixPoint3200 << 16) = FixPoint1616 */
        sqrtResult_centi_ns <<= 16;
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	041b      	lsls	r3, r3, #16
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
        /*
         * Note that the Speed Of Light is expressed in um per 1E-10
         * seconds (2997) Therefore to get mm/ns we have to divide by
         * 10000
         */
        sigmaEstRtn = (((sqrtResult_centi_ns + 50) / 100) /
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	3332      	adds	r3, #50	; 0x32
 8005742:	4a4b      	ldr	r2, [pc, #300]	; (8005870 <VL53L0X_calc_sigma_estimate+0x48c>)
 8005744:	fba2 2303 	umull	r2, r3, r2, r3
 8005748:	095a      	lsrs	r2, r3, #5
 800574a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800574c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                       sigmaEstimateP3);
        sigmaEstRtn *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8005754:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005758:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800575c:	fb02 f303 	mul.w	r3, r2, r3
 8005760:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

        /* Add 5000 before dividing by 10000 to ensure rounding. */
        sigmaEstRtn += 5000;
 8005764:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005768:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800576c:	3308      	adds	r3, #8
 800576e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        sigmaEstRtn /= 10000;
 8005772:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005776:	4a3f      	ldr	r2, [pc, #252]	; (8005874 <VL53L0X_calc_sigma_estimate+0x490>)
 8005778:	fba2 2303 	umull	r2, r3, r2, r3
 800577c:	0b5b      	lsrs	r3, r3, #13
 800577e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

        if (sigmaEstRtn > cSigmaEstRtnMax) {
 8005782:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005786:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005788:	429a      	cmp	r2, r3
 800578a:	d902      	bls.n	8005792 <VL53L0X_calc_sigma_estimate+0x3ae>
            /* Clip to prevent overflow. Will ensure safe
             * max result. */
            sigmaEstRtn = cSigmaEstRtnMax;
 800578c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800578e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        }

        finalRangeIntegrationTimeMilliSecs =
            (finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500) / 1000;
 8005792:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005796:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800579a:	4413      	add	r3, r2
 800579c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
        finalRangeIntegrationTimeMilliSecs =
 80057a0:	4a35      	ldr	r2, [pc, #212]	; (8005878 <VL53L0X_calc_sigma_estimate+0x494>)
 80057a2:	fba2 2303 	umull	r2, r3, r2, r3
 80057a6:	099b      	lsrs	r3, r3, #6
 80057a8:	623b      	str	r3, [r7, #32]
        /* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
         * sqrt(FixPoint1616/int) = FixPoint2408)
         */
        sigmaEstRef =
            VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
                           finalRangeIntegrationTimeMilliSecs / 2) /
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	085a      	lsrs	r2, r3, #1
            VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80057ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057b2:	441a      	add	r2, r3
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fd ffa3 	bl	8003706 <VL53L0X_isqrt>
 80057c0:	61f8      	str	r0, [r7, #28]
                          finalRangeIntegrationTimeMilliSecs);

        /* FixPoint2408 << 8 = FixPoint1616 */
        sigmaEstRef <<= 8;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	61fb      	str	r3, [r7, #28]
        sigmaEstRef = (sigmaEstRef + 500) / 1000;
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80057ce:	4a2a      	ldr	r2, [pc, #168]	; (8005878 <VL53L0X_calc_sigma_estimate+0x494>)
 80057d0:	fba2 2303 	umull	r2, r3, r2, r3
 80057d4:	099b      	lsrs	r3, r3, #6
 80057d6:	61fb      	str	r3, [r7, #28]

        /* FixPoint1616 * FixPoint1616 = FixPoint3232 */
        sqr1 = sigmaEstRtn * sigmaEstRtn;
 80057d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057dc:	fb03 f303 	mul.w	r3, r3, r3
 80057e0:	633b      	str	r3, [r7, #48]	; 0x30

        /* FixPoint1616 * FixPoint1616 = FixPoint3232 */
        sqr2 = sigmaEstRef * sigmaEstRef;
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	fb03 f303 	mul.w	r3, r3, r3
 80057e8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* sqrt(FixPoint3232) = FixPoint1616 */
        sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80057ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ee:	4413      	add	r3, r2
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fd ff88 	bl	8003706 <VL53L0X_isqrt>
 80057f6:	61b8      	str	r0, [r7, #24]
         * Note that the Shift by 4 bits increases resolution prior to
         * the sqrt, therefore the result must be shifted by 2 bits to
         * the right to revert back to the FixPoint1616 format.
         */

        sigmaEstimate = 1000 * sqrtResult;
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057fe:	fb02 f303 	mul.w	r3, r2, r3
 8005802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8005806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005808:	2b00      	cmp	r3, #0
 800580a:	d009      	beq.n	8005820 <VL53L0X_calc_sigma_estimate+0x43c>
 800580c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005810:	2b00      	cmp	r3, #0
 8005812:	d005      	beq.n	8005820 <VL53L0X_calc_sigma_estimate+0x43c>
 8005814:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005818:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800581c:	429a      	cmp	r2, r3
 800581e:	d903      	bls.n	8005828 <VL53L0X_calc_sigma_estimate+0x444>
            (sigmaEstimate > cSigmaEstMax)) {
            sigmaEstimate = cSigmaEstMax;
 8005820:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005824:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        }

        *pSigmaEstimate = (uint32_t) (sigmaEstimate);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800582e:	601a      	str	r2, [r3, #0]
        PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        Status = VL53L0X_calc_dmax(
 800583a:	6939      	ldr	r1, [r7, #16]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	9303      	str	r3, [sp, #12]
 8005840:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005844:	9302      	str	r3, [sp, #8]
 8005846:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800584a:	9301      	str	r3, [sp, #4]
 800584c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005854:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f7ff fca8 	bl	80051ac <VL53L0X_calc_dmax>
 800585c:	4603      	mov	r3, r0
 800585e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
            peakVcselDuration_us,
            pDmax_mm);
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8005862:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8005866:	4618      	mov	r0, r3
 8005868:	37c0      	adds	r7, #192	; 0xc0
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	51eb851f 	.word	0x51eb851f
 8005874:	d1b71759 	.word	0xd1b71759
 8005878:	10624dd3 	.word	0x10624dd3

0800587c <VL53L0X_get_pal_range_status>:

VL53L0X_Error VL53L0X_get_pal_range_status(VL53L0X_DEV Dev, uint8_t DeviceRangeStatus, FixPoint1616_t SignalRate,
                                           uint16_t EffectiveSpadRtnCount,
                                           VL53L0X_RangingMeasurementData_t* pRangingMeasurementData,
                                           uint8_t*                          pPalRangeStatus) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b090      	sub	sp, #64	; 0x40
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	607a      	str	r2, [r7, #4]
 8005886:	461a      	mov	r2, r3
 8005888:	460b      	mov	r3, r1
 800588a:	72fb      	strb	r3, [r7, #11]
 800588c:	4613      	mov	r3, r2
 800588e:	813b      	strh	r3, [r7, #8]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005890:	2300      	movs	r3, #0
 8005892:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t NoneFlag;
    uint8_t SigmaLimitflag = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t SignalRefClipflag = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    uint8_t RangeIgnoreThresholdflag = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    uint8_t SigmaLimitCheckEnable = 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t SignalRefClipLimitCheckEnable = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    FixPoint1616_t SigmaEstimate;
    FixPoint1616_t SigmaLimitValue;
    FixPoint1616_t SignalRefClipValue;
    FixPoint1616_t RangeIgnoreThresholdValue;
    FixPoint1616_t SignalRatePerSpad;
    uint8_t DeviceRangeStatusInternal = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    uint16_t tmpWord = 0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	82fb      	strh	r3, [r7, #22]
    uint8_t Temp8;
    uint32_t Dmax_mm = 0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	613b      	str	r3, [r7, #16]
     * the value 11 in the DeviceRangeStatus.
     * In addition, the SigmaEstimator is not included in the VL53L0X
     * DeviceRangeStatus, this will be added in the PalRangeStatus.
     */

    DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 80058ce:	7afb      	ldrb	r3, [r7, #11]
 80058d0:	10db      	asrs	r3, r3, #3
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    if ((DeviceRangeStatusInternal == 0) ||
 80058dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d017      	beq.n	8005914 <VL53L0X_get_pal_range_status+0x98>
 80058e4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80058e8:	2b05      	cmp	r3, #5
 80058ea:	d013      	beq.n	8005914 <VL53L0X_get_pal_range_status+0x98>
        (DeviceRangeStatusInternal == 5) ||
 80058ec:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80058f0:	2b07      	cmp	r3, #7
 80058f2:	d00f      	beq.n	8005914 <VL53L0X_get_pal_range_status+0x98>
        (DeviceRangeStatusInternal == 7) ||
 80058f4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80058f8:	2b0c      	cmp	r3, #12
 80058fa:	d00b      	beq.n	8005914 <VL53L0X_get_pal_range_status+0x98>
        (DeviceRangeStatusInternal == 12) ||
 80058fc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005900:	2b0d      	cmp	r3, #13
 8005902:	d007      	beq.n	8005914 <VL53L0X_get_pal_range_status+0x98>
        (DeviceRangeStatusInternal == 13) ||
 8005904:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005908:	2b0e      	cmp	r3, #14
 800590a:	d003      	beq.n	8005914 <VL53L0X_get_pal_range_status+0x98>
        (DeviceRangeStatusInternal == 14) ||
 800590c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005910:	2b0f      	cmp	r3, #15
 8005912:	d103      	bne.n	800591c <VL53L0X_get_pal_range_status+0xa0>
        (DeviceRangeStatusInternal == 15)
        ) {
        NoneFlag = 1;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800591a:	e002      	b.n	8005922 <VL53L0X_get_pal_range_status+0xa6>
    } else {
        NoneFlag = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

    /*
     * Check if Sigma limit is enabled, if yes then do comparison with limit
     * value and put the result back into pPalRangeStatus.
     */
    if (Status == VL53L0X_ERROR_NONE) {
 8005922:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005926:	2b00      	cmp	r3, #0
 8005928:	d109      	bne.n	800593e <VL53L0X_get_pal_range_status+0xc2>
        Status = VL53L0X_GetLimitCheckEnable(Dev,
 800592a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800592e:	461a      	mov	r2, r3
 8005930:	2100      	movs	r1, #0
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f7fc f9b0 	bl	8001c98 <VL53L0X_GetLimitCheckEnable>
 8005938:	4603      	mov	r3, r0
 800593a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                             VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
                                             &SigmaLimitCheckEnable);
    }

    if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800593e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005942:	2b00      	cmp	r3, #0
 8005944:	d02e      	beq.n	80059a4 <VL53L0X_get_pal_range_status+0x128>
 8005946:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800594a:	2b00      	cmp	r3, #0
 800594c:	d12a      	bne.n	80059a4 <VL53L0X_get_pal_range_status+0x128>
        /*
         * compute the Sigma and check with limit
         */
        Status = VL53L0X_calc_sigma_estimate(
 800594e:	f107 0310 	add.w	r3, r7, #16
 8005952:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005956:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f7ff fd43 	bl	80053e4 <VL53L0X_calc_sigma_estimate>
 800595e:	4603      	mov	r3, r0
 8005960:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            Dev,
            pRangingMeasurementData,
            &SigmaEstimate,
            &Dmax_mm);

        if (Status == VL53L0X_ERROR_NONE) {
 8005964:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005968:	2b00      	cmp	r3, #0
 800596a:	d103      	bne.n	8005974 <VL53L0X_get_pal_range_status+0xf8>
            pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	b29a      	uxth	r2, r3
 8005970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005972:	815a      	strh	r2, [r3, #10]
        }

        if (Status == VL53L0X_ERROR_NONE) {
 8005974:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005978:	2b00      	cmp	r3, #0
 800597a:	d113      	bne.n	80059a4 <VL53L0X_get_pal_range_status+0x128>
            Status = VL53L0X_GetLimitCheckValue(Dev,
 800597c:	f107 0320 	add.w	r3, r7, #32
 8005980:	461a      	mov	r2, r3
 8005982:	2100      	movs	r1, #0
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f7fc fa0d 	bl	8001da4 <VL53L0X_GetLimitCheckValue>
 800598a:	4603      	mov	r3, r0
 800598c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                                VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
                                                &SigmaLimitValue);

            if ((SigmaLimitValue > 0) &&
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d006      	beq.n	80059a4 <VL53L0X_get_pal_range_status+0x128>
                (SigmaEstimate > SigmaLimitValue)) {
 8005996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005998:	6a3b      	ldr	r3, [r7, #32]
            if ((SigmaLimitValue > 0) &&
 800599a:	429a      	cmp	r2, r3
 800599c:	d902      	bls.n	80059a4 <VL53L0X_get_pal_range_status+0x128>
                /* Limit Fail */
                SigmaLimitflag = 1;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    /*
     * Check if Signal ref clip limit is enabled, if yes then do comparison
     * with limit value and put the result back into pPalRangeStatus.
     */
    if (Status == VL53L0X_ERROR_NONE) {
 80059a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d109      	bne.n	80059c0 <VL53L0X_get_pal_range_status+0x144>
        Status = VL53L0X_GetLimitCheckEnable(Dev,
 80059ac:	f107 0329 	add.w	r3, r7, #41	; 0x29
 80059b0:	461a      	mov	r2, r3
 80059b2:	2102      	movs	r1, #2
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f7fc f96f 	bl	8001c98 <VL53L0X_GetLimitCheckEnable>
 80059ba:	4603      	mov	r3, r0
 80059bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                             VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
                                             &SignalRefClipLimitCheckEnable);
    }

    if ((SignalRefClipLimitCheckEnable != 0) &&
 80059c0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d044      	beq.n	8005a52 <VL53L0X_get_pal_range_status+0x1d6>
 80059c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d140      	bne.n	8005a52 <VL53L0X_get_pal_range_status+0x1d6>
        (Status == VL53L0X_ERROR_NONE)) {
        Status = VL53L0X_GetLimitCheckValue(Dev,
 80059d0:	f107 031c 	add.w	r3, r7, #28
 80059d4:	461a      	mov	r2, r3
 80059d6:	2102      	movs	r1, #2
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f7fc f9e3 	bl	8001da4 <VL53L0X_GetLimitCheckValue>
 80059de:	4603      	mov	r3, r0
 80059e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                            VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
                                            &SignalRefClipValue);

        /* Read LastSignalRefMcps from device */
        if (Status == VL53L0X_ERROR_NONE) {
 80059e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d107      	bne.n	80059fc <VL53L0X_get_pal_range_status+0x180>
            Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80059ec:	2201      	movs	r2, #1
 80059ee:	21ff      	movs	r1, #255	; 0xff
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 fa3e 	bl	8005e72 <VL53L0X_WrByte>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        }

        if (Status == VL53L0X_ERROR_NONE) {
 80059fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d109      	bne.n	8005a18 <VL53L0X_get_pal_range_status+0x19c>
            Status = VL53L0X_RdWord(Dev,
 8005a04:	f107 0316 	add.w	r3, r7, #22
 8005a08:	461a      	mov	r2, r3
 8005a0a:	21b6      	movs	r1, #182	; 0xb6
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 fad2 	bl	8005fb6 <VL53L0X_RdWord>
 8005a12:	4603      	mov	r3, r0
 8005a14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                    VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
                                    &tmpWord);
        }

        if (Status == VL53L0X_ERROR_NONE) {
 8005a18:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d107      	bne.n	8005a30 <VL53L0X_get_pal_range_status+0x1b4>
            Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005a20:	2200      	movs	r2, #0
 8005a22:	21ff      	movs	r1, #255	; 0xff
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 fa24 	bl	8005e72 <VL53L0X_WrByte>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        }

        LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8005a30:	8afb      	ldrh	r3, [r7, #22]
 8005a32:	025b      	lsls	r3, r3, #9
 8005a34:	62fb      	str	r3, [r7, #44]	; 0x2c
        PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a3a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

        if ((SignalRefClipValue > 0) &&
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d006      	beq.n	8005a52 <VL53L0X_get_pal_range_status+0x1d6>
            (LastSignalRefMcps > SignalRefClipValue)) {
 8005a44:	69fb      	ldr	r3, [r7, #28]
        if ((SignalRefClipValue > 0) &&
 8005a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d902      	bls.n	8005a52 <VL53L0X_get_pal_range_status+0x1d6>
            /* Limit Fail */
            SignalRefClipflag = 1;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
     * Check if Signal ref clip limit is enabled, if yes then do comparison
     * with limit value and put the result back into pPalRangeStatus.
     * EffectiveSpadRtnCount has a format 8.8
     * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
     */
    if (Status == VL53L0X_ERROR_NONE) {
 8005a52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d109      	bne.n	8005a6e <VL53L0X_get_pal_range_status+0x1f2>
        Status = VL53L0X_GetLimitCheckEnable(Dev,
 8005a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a5e:	461a      	mov	r2, r3
 8005a60:	2103      	movs	r1, #3
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f7fc f918 	bl	8001c98 <VL53L0X_GetLimitCheckEnable>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                             VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                             &RangeIgnoreThresholdLimitCheckEnable);
    }

    if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8005a6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d023      	beq.n	8005abe <VL53L0X_get_pal_range_status+0x242>
 8005a76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d11f      	bne.n	8005abe <VL53L0X_get_pal_range_status+0x242>
        (Status == VL53L0X_ERROR_NONE)) {
        /* Compute the signal rate per spad */
        if (EffectiveSpadRtnCount == 0) {
 8005a7e:	893b      	ldrh	r3, [r7, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d102      	bne.n	8005a8a <VL53L0X_get_pal_range_status+0x20e>
            SignalRatePerSpad = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	637b      	str	r3, [r7, #52]	; 0x34
 8005a88:	e005      	b.n	8005a96 <VL53L0X_get_pal_range_status+0x21a>
        } else {
            SignalRatePerSpad = (FixPoint1616_t) ((256 * SignalRate) /
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	021a      	lsls	r2, r3, #8
 8005a8e:	893b      	ldrh	r3, [r7, #8]
 8005a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a94:	637b      	str	r3, [r7, #52]	; 0x34
                                                  EffectiveSpadRtnCount);
        }

        Status = VL53L0X_GetLimitCheckValue(Dev,
 8005a96:	f107 0318 	add.w	r3, r7, #24
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	2103      	movs	r1, #3
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f7fc f980 	bl	8001da4 <VL53L0X_GetLimitCheckValue>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                            VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                            &RangeIgnoreThresholdValue);

        if ((RangeIgnoreThresholdValue > 0) &&
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d006      	beq.n	8005abe <VL53L0X_get_pal_range_status+0x242>
            (SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8005ab0:	69bb      	ldr	r3, [r7, #24]
        if ((RangeIgnoreThresholdValue > 0) &&
 8005ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d202      	bcs.n	8005abe <VL53L0X_get_pal_range_status+0x242>
            /* Limit Fail add 2^6 to range status */
            RangeIgnoreThresholdflag = 1;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8005abe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d14a      	bne.n	8005b5c <VL53L0X_get_pal_range_status+0x2e0>
        if (NoneFlag == 1) {
 8005ac6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d103      	bne.n	8005ad6 <VL53L0X_get_pal_range_status+0x25a>
            *pPalRangeStatus = 255; /* NONE */
 8005ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad0:	22ff      	movs	r2, #255	; 0xff
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	e042      	b.n	8005b5c <VL53L0X_get_pal_range_status+0x2e0>
        } else if ((DeviceRangeStatusInternal == 1) ||
 8005ad6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d007      	beq.n	8005aee <VL53L0X_get_pal_range_status+0x272>
 8005ade:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d003      	beq.n	8005aee <VL53L0X_get_pal_range_status+0x272>
                   (DeviceRangeStatusInternal == 2) ||
 8005ae6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d103      	bne.n	8005af6 <VL53L0X_get_pal_range_status+0x27a>
                   (DeviceRangeStatusInternal == 3)) {
            *pPalRangeStatus = 5; /* HW fail */
 8005aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af0:	2205      	movs	r2, #5
 8005af2:	701a      	strb	r2, [r3, #0]
 8005af4:	e032      	b.n	8005b5c <VL53L0X_get_pal_range_status+0x2e0>
        } else if ((DeviceRangeStatusInternal == 6) ||
 8005af6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005afa:	2b06      	cmp	r3, #6
 8005afc:	d003      	beq.n	8005b06 <VL53L0X_get_pal_range_status+0x28a>
 8005afe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005b02:	2b09      	cmp	r3, #9
 8005b04:	d103      	bne.n	8005b0e <VL53L0X_get_pal_range_status+0x292>
                   (DeviceRangeStatusInternal == 9)) {
            *pPalRangeStatus = 4; /* Phase fail */
 8005b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b08:	2204      	movs	r2, #4
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	e026      	b.n	8005b5c <VL53L0X_get_pal_range_status+0x2e0>
        } else if ((DeviceRangeStatusInternal == 8) ||
 8005b0e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d007      	beq.n	8005b26 <VL53L0X_get_pal_range_status+0x2aa>
 8005b16:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005b1a:	2b0a      	cmp	r3, #10
 8005b1c:	d003      	beq.n	8005b26 <VL53L0X_get_pal_range_status+0x2aa>
                   (DeviceRangeStatusInternal == 10) ||
 8005b1e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d103      	bne.n	8005b2e <VL53L0X_get_pal_range_status+0x2b2>
                   (SignalRefClipflag == 1)) {
            *pPalRangeStatus = 3; /* Min range */
 8005b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b28:	2203      	movs	r2, #3
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	e016      	b.n	8005b5c <VL53L0X_get_pal_range_status+0x2e0>
        } else if ((DeviceRangeStatusInternal == 4) ||
 8005b2e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d003      	beq.n	8005b3e <VL53L0X_get_pal_range_status+0x2c2>
 8005b36:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d103      	bne.n	8005b46 <VL53L0X_get_pal_range_status+0x2ca>
                   (RangeIgnoreThresholdflag == 1)) {
            *pPalRangeStatus = 2; /* Signal Fail */
 8005b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b40:	2202      	movs	r2, #2
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	e00a      	b.n	8005b5c <VL53L0X_get_pal_range_status+0x2e0>
        } else if (SigmaLimitflag == 1) {
 8005b46:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d103      	bne.n	8005b56 <VL53L0X_get_pal_range_status+0x2da>
            *pPalRangeStatus = 1; /* Sigma	 Fail */
 8005b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b50:	2201      	movs	r2, #1
 8005b52:	701a      	strb	r2, [r3, #0]
 8005b54:	e002      	b.n	8005b5c <VL53L0X_get_pal_range_status+0x2e0>
        } else {
            *pPalRangeStatus = 0; /* Range Valid */
 8005b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b58:	2200      	movs	r2, #0
 8005b5a:	701a      	strb	r2, [r3, #0]
        }
    }

    /* DMAX only relevant during range error */
    if (*pPalRangeStatus == 0) {
 8005b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d102      	bne.n	8005b6a <VL53L0X_get_pal_range_status+0x2ee>
        pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8005b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b66:	2200      	movs	r2, #0
 8005b68:	815a      	strh	r2, [r3, #10]
    }

    /* fill the Limit Check Status */

    Status = VL53L0X_GetLimitCheckEnable(Dev,
 8005b6a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8005b6e:	461a      	mov	r2, r3
 8005b70:	2101      	movs	r1, #1
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f7fc f890 	bl	8001c98 <VL53L0X_GetLimitCheckEnable>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                         VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
                                         &SignalRateFinalRangeLimitCheckEnable);

    if (Status == VL53L0X_ERROR_NONE) {
 8005b7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d14f      	bne.n	8005c26 <VL53L0X_get_pal_range_status+0x3aa>
        if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1)) {
 8005b86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <VL53L0X_get_pal_range_status+0x31a>
 8005b8e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d103      	bne.n	8005b9e <VL53L0X_get_pal_range_status+0x322>
            Temp8 = 1;
 8005b96:	2301      	movs	r3, #1
 8005b98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b9c:	e002      	b.n	8005ba4 <VL53L0X_get_pal_range_status+0x328>
        } else {
            Temp8 = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005baa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
                                       VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

        if ((DeviceRangeStatusInternal == 4) ||
 8005bae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d003      	beq.n	8005bbe <VL53L0X_get_pal_range_status+0x342>
            (SignalRateFinalRangeLimitCheckEnable == 0)) {
 8005bb6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
        if ((DeviceRangeStatusInternal == 4) ||
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d103      	bne.n	8005bc6 <VL53L0X_get_pal_range_status+0x34a>
            Temp8 = 1;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc4:	e002      	b.n	8005bcc <VL53L0X_get_pal_range_status+0x350>
        } else {
            Temp8 = 0;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005bd2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                       VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
                                       Temp8);

        if ((SignalRefClipLimitCheckEnable == 0) ||
 8005bd6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <VL53L0X_get_pal_range_status+0x36a>
 8005bde:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d103      	bne.n	8005bee <VL53L0X_get_pal_range_status+0x372>
            (SignalRefClipflag == 1)) {
            Temp8 = 1;
 8005be6:	2301      	movs	r3, #1
 8005be8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bec:	e002      	b.n	8005bf4 <VL53L0X_get_pal_range_status+0x378>
        } else {
            Temp8 = 0;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005bfa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                                       VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

        if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8005bfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <VL53L0X_get_pal_range_status+0x392>
 8005c06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d103      	bne.n	8005c16 <VL53L0X_get_pal_range_status+0x39a>
            (RangeIgnoreThresholdflag == 1)) {
            Temp8 = 1;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c14:	e002      	b.n	8005c1c <VL53L0X_get_pal_range_status+0x3a0>
        } else {
            Temp8 = 0;
 8005c16:	2300      	movs	r3, #0
 8005c18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005c22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                                       VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                       Temp8);
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8005c26:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3740      	adds	r7, #64	; 0x40
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <VL53L0X_check_part_used>:
    _LOG_FUNCTION_END(TRACE_MODULE_API, status,##__VA_ARGS__)
#define LOG_FUNCTION_END_FMT(status, fmt, ...) \
    _LOG_FUNCTION_END_FMT(TRACE_MODULE_API, status, fmt,##__VA_ARGS__)

VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev, uint8_t*              Revision,
                                      VL53L0X_DeviceInfo_t* pVL53L0X_DeviceInfo) {
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b086      	sub	sp, #24
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	75fb      	strb	r3, [r7, #23]
    uint8_t ModuleIdInt;
    char* ProductId_tmp;

    LOG_FUNCTION_START("");

    Status = VL53L0X_get_info_from_device(Dev, 2);
 8005c42:	2102      	movs	r1, #2
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f7fd fdd5 	bl	80037f4 <VL53L0X_get_info_from_device>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	75fb      	strb	r3, [r7, #23]

    if (Status == VL53L0X_ERROR_NONE) {
 8005c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d11c      	bne.n	8005c90 <VL53L0X_check_part_used+0x5e>
        ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 8005c5c:	75bb      	strb	r3, [r7, #22]

        if (ModuleIdInt == 0) {
 8005c5e:	7dbb      	ldrb	r3, [r7, #22]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d107      	bne.n	8005c74 <VL53L0X_check_part_used+0x42>
            *Revision = 0;
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2200      	movs	r2, #0
 8005c68:	701a      	strb	r2, [r3, #0]
            VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3340      	adds	r3, #64	; 0x40
 8005c6e:	2200      	movs	r2, #0
 8005c70:	701a      	strb	r2, [r3, #0]
 8005c72:	e00d      	b.n	8005c90 <VL53L0X_check_part_used+0x5e>
        } else {
            *Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	701a      	strb	r2, [r3, #0]
            ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	33f3      	adds	r3, #243	; 0xf3
 8005c82:	613b      	str	r3, [r7, #16]
                                                               ProductId);
            VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3340      	adds	r3, #64	; 0x40
 8005c88:	6939      	ldr	r1, [r7, #16]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f003 fd9c 	bl	80097c8 <strcpy>
        }
    }

    LOG_FUNCTION_END(Status);
    return Status;
 8005c90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <VL53L0X_get_device_info>:

VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev, VL53L0X_DeviceInfo_t* pVL53L0X_DeviceInfo) {
 8005c9c:	b5b0      	push	{r4, r5, r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	73fb      	strb	r3, [r7, #15]
    uint8_t revision_id;
    uint8_t Revision;

    Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8005caa:	f107 030d 	add.w	r3, r7, #13
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff ffbd 	bl	8005c32 <VL53L0X_check_part_used>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	73fb      	strb	r3, [r7, #15]

    if (Status == VL53L0X_ERROR_NONE) {
 8005cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d13b      	bne.n	8005d3c <VL53L0X_get_device_info+0xa0>
        if (Revision == 0) {
 8005cc4:	7b7b      	ldrb	r3, [r7, #13]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d108      	bne.n	8005cdc <VL53L0X_get_device_info+0x40>
            VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	4a30      	ldr	r2, [pc, #192]	; (8005d90 <VL53L0X_get_device_info+0xf4>)
 8005cce:	461c      	mov	r4, r3
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005cd4:	6020      	str	r0, [r4, #0]
 8005cd6:	6061      	str	r1, [r4, #4]
 8005cd8:	60a2      	str	r2, [r4, #8]
 8005cda:	e027      	b.n	8005d2c <VL53L0X_get_device_info+0x90>
                               VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
        } else if ((Revision <= 34) && (Revision != 32)) {
 8005cdc:	7b7b      	ldrb	r3, [r7, #13]
 8005cde:	2b22      	cmp	r3, #34	; 0x22
 8005ce0:	d80b      	bhi.n	8005cfa <VL53L0X_get_device_info+0x5e>
 8005ce2:	7b7b      	ldrb	r3, [r7, #13]
 8005ce4:	2b20      	cmp	r3, #32
 8005ce6:	d008      	beq.n	8005cfa <VL53L0X_get_device_info+0x5e>
            VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	4a2a      	ldr	r2, [pc, #168]	; (8005d94 <VL53L0X_get_device_info+0xf8>)
 8005cec:	461c      	mov	r4, r3
 8005cee:	4613      	mov	r3, r2
 8005cf0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005cf2:	6020      	str	r0, [r4, #0]
 8005cf4:	6061      	str	r1, [r4, #4]
 8005cf6:	60a2      	str	r2, [r4, #8]
 8005cf8:	e018      	b.n	8005d2c <VL53L0X_get_device_info+0x90>
                               VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
        } else if (Revision < 39) {
 8005cfa:	7b7b      	ldrb	r3, [r7, #13]
 8005cfc:	2b26      	cmp	r3, #38	; 0x26
 8005cfe:	d808      	bhi.n	8005d12 <VL53L0X_get_device_info+0x76>
            VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	4a25      	ldr	r2, [pc, #148]	; (8005d98 <VL53L0X_get_device_info+0xfc>)
 8005d04:	461c      	mov	r4, r3
 8005d06:	4613      	mov	r3, r2
 8005d08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005d0a:	6020      	str	r0, [r4, #0]
 8005d0c:	6061      	str	r1, [r4, #4]
 8005d0e:	60a2      	str	r2, [r4, #8]
 8005d10:	e00c      	b.n	8005d2c <VL53L0X_get_device_info+0x90>
                               VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
        } else {
            VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	4a21      	ldr	r2, [pc, #132]	; (8005d9c <VL53L0X_get_device_info+0x100>)
 8005d16:	461d      	mov	r5, r3
 8005d18:	4614      	mov	r4, r2
 8005d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d1c:	6028      	str	r0, [r5, #0]
 8005d1e:	6069      	str	r1, [r5, #4]
 8005d20:	60aa      	str	r2, [r5, #8]
 8005d22:	60eb      	str	r3, [r5, #12]
 8005d24:	6820      	ldr	r0, [r4, #0]
 8005d26:	6128      	str	r0, [r5, #16]
 8005d28:	7923      	ldrb	r3, [r4, #4]
 8005d2a:	752b      	strb	r3, [r5, #20]
                               VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
        }

        VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	3320      	adds	r3, #32
 8005d30:	491b      	ldr	r1, [pc, #108]	; (8005da0 <VL53L0X_get_device_info+0x104>)
 8005d32:	461a      	mov	r2, r3
 8005d34:	460b      	mov	r3, r1
 8005d36:	cb03      	ldmia	r3!, {r0, r1}
 8005d38:	6010      	str	r0, [r2, #0]
 8005d3a:	6051      	str	r1, [r2, #4]
                           VL53L0X_STRING_DEVICE_INFO_TYPE);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8005d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d108      	bne.n	8005d56 <VL53L0X_get_device_info+0xba>
        Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	3360      	adds	r3, #96	; 0x60
 8005d48:	461a      	mov	r2, r3
 8005d4a:	21c0      	movs	r1, #192	; 0xc0
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f919 	bl	8005f84 <VL53L0X_RdByte>
 8005d52:	4603      	mov	r3, r0
 8005d54:	73fb      	strb	r3, [r7, #15]
                                &pVL53L0X_DeviceInfo->ProductType);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8005d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d112      	bne.n	8005d84 <VL53L0X_get_device_info+0xe8>
        Status = VL53L0X_RdByte(Dev,
 8005d5e:	f107 030e 	add.w	r3, r7, #14
 8005d62:	461a      	mov	r2, r3
 8005d64:	21c2      	movs	r1, #194	; 0xc2
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f90c 	bl	8005f84 <VL53L0X_RdByte>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	73fb      	strb	r3, [r7, #15]
                                VL53L0X_REG_IDENTIFICATION_REVISION_ID,
                                &revision_id);
        pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        pVL53L0X_DeviceInfo->ProductRevisionMinor =
            (revision_id & 0xF0) >> 4;
 8005d78:	7bbb      	ldrb	r3, [r7, #14]
 8005d7a:	091b      	lsrs	r3, r3, #4
 8005d7c:	b2da      	uxtb	r2, r3
        pVL53L0X_DeviceInfo->ProductRevisionMinor =
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    }

    return Status;
 8005d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8005d90:	0800b8a0 	.word	0x0800b8a0
 8005d94:	0800b8ac 	.word	0x0800b8ac
 8005d98:	0800b8b8 	.word	0x0800b8b8
 8005d9c:	0800b8c4 	.word	0x0800b8c4
 8005da0:	0800b8dc 	.word	0x0800b8dc

08005da4 <VL53L0X_WriteMulti>:
#define VL53L0X_DoneI2CAcces(Dev) /* todo mutex release */


static uint8_t mp_i2c_buffer[COMMS_BUFFER_SIZE];

VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t* pdata, uint32_t count) {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	607a      	str	r2, [r7, #4]
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	460b      	mov	r3, r1
 8005db2:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005db4:	2300      	movs	r3, #0
 8005db6:	75fb      	strb	r3, [r7, #23]

    if (count >= VL53L0X_MAX_I2C_XFER_SIZE) {
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2b3f      	cmp	r3, #63	; 0x3f
 8005dbc:	d901      	bls.n	8005dc2 <VL53L0X_WriteMulti+0x1e>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005dbe:	23fc      	movs	r3, #252	; 0xfc
 8005dc0:	75fb      	strb	r3, [r7, #23]
    }

    mp_i2c_buffer[0] = index;
 8005dc2:	4a12      	ldr	r2, [pc, #72]	; (8005e0c <VL53L0X_WriteMulti+0x68>)
 8005dc4:	7afb      	ldrb	r3, [r7, #11]
 8005dc6:	7013      	strb	r3, [r2, #0]
    memcpy(&mp_i2c_buffer[1], pdata, count);
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	4810      	ldr	r0, [pc, #64]	; (8005e10 <VL53L0X_WriteMulti+0x6c>)
 8005dce:	f003 f863 	bl	8008e98 <memcpy>

    if (HAL_OK != HAL_I2C_Master_Transmit(Dev->hi2c, Dev->I2cDevAddr, mp_i2c_buffer, count + 1, I2C_TIMEOUT_MS(count))) {
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8005dde:	b299      	uxth	r1, r3
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3301      	adds	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	330a      	adds	r3, #10
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	4613      	mov	r3, r2
 8005df0:	4a06      	ldr	r2, [pc, #24]	; (8005e0c <VL53L0X_WriteMulti+0x68>)
 8005df2:	f001 fb31 	bl	8007458 <HAL_I2C_Master_Transmit>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <VL53L0X_WriteMulti+0x5c>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005dfc:	23ec      	movs	r3, #236	; 0xec
 8005dfe:	75fb      	strb	r3, [r7, #23]
    }

    return Status;
 8005e00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	200004b8 	.word	0x200004b8
 8005e10:	200004b9 	.word	0x200004b9

08005e14 <VL53L0X_ReadMulti>:

VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t*    pdata, uint32_t count) {
 8005e14:	b590      	push	{r4, r7, lr}
 8005e16:	b08b      	sub	sp, #44	; 0x2c
 8005e18:	af04      	add	r7, sp, #16
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	607a      	str	r2, [r7, #4]
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	460b      	mov	r3, r1
 8005e22:	72fb      	strb	r3, [r7, #11]
    VL53L0X_I2C_USER_VAR
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e24:	2300      	movs	r3, #0
 8005e26:	75fb      	strb	r3, [r7, #23]

    if (count >= VL53L0X_MAX_I2C_XFER_SIZE) {
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b3f      	cmp	r3, #63	; 0x3f
 8005e2c:	d901      	bls.n	8005e32 <VL53L0X_ReadMulti+0x1e>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005e2e:	23fc      	movs	r3, #252	; 0xfc
 8005e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_OK != HAL_I2C_Mem_Read(Dev->hi2c, Dev->I2cDevAddr, index, 0x00000001U, pdata, count, I2C_TIMEOUT_MS(count))) {
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8005e3e:	b299      	uxth	r1, r3
 8005e40:	7afb      	ldrb	r3, [r7, #11]
 8005e42:	b29c      	uxth	r4, r3
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	320a      	adds	r2, #10
 8005e4c:	9202      	str	r2, [sp, #8]
 8005e4e:	9301      	str	r3, [sp, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	2301      	movs	r3, #1
 8005e56:	4622      	mov	r2, r4
 8005e58:	f001 fbfc 	bl	8007654 <HAL_I2C_Mem_Read>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <VL53L0X_ReadMulti+0x52>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005e62:	23ec      	movs	r3, #236	; 0xec
 8005e64:	75fb      	strb	r3, [r7, #23]
    }

    return Status;
 8005e66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	371c      	adds	r7, #28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd90      	pop	{r4, r7, pc}

08005e72 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	70fb      	strb	r3, [r7, #3]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e82:	2300      	movs	r3, #0
 8005e84:	73fb      	strb	r3, [r7, #15]
    const int32_t cbyte_count = 1;
 8005e86:	2301      	movs	r3, #1
 8005e88:	60bb      	str	r3, [r7, #8]

    Status = VL53L0X_WriteMulti(Dev, index, &data, cbyte_count);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	1cba      	adds	r2, r7, #2
 8005e8e:	78f9      	ldrb	r1, [r7, #3]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff ff87 	bl	8005da4 <VL53L0X_WriteMulti>
 8005e96:	4603      	mov	r3, r0
 8005e98:	73fb      	strb	r3, [r7, #15]

    return Status;
 8005e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	70fb      	strb	r3, [r7, #3]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	73fb      	strb	r3, [r7, #15]
    uint8_t buffer[BYTES_PER_WORD];

    // Split 16-bit word into MS and LS uint8_t
    buffer[0] = (uint8_t) ((data >> 8) & 0xFF);
 8005eba:	883b      	ldrh	r3, [r7, #0]
 8005ebc:	0a1b      	lsrs	r3, r3, #8
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	733b      	strb	r3, [r7, #12]
    buffer[1] = (uint8_t) (data & 0xFF);
 8005ec4:	883b      	ldrh	r3, [r7, #0]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	737b      	strb	r3, [r7, #13]

    if (index % 2 == 1) {
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d015      	beq.n	8005f02 <VL53L0X_WrWord+0x5c>
        Status = VL53L0X_WriteMulti(Dev, index, &buffer[0], BYTES_PER_WORD);
 8005ed6:	f107 020c 	add.w	r2, r7, #12
 8005eda:	78f9      	ldrb	r1, [r7, #3]
 8005edc:	2302      	movs	r3, #2
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff ff60 	bl	8005da4 <VL53L0X_WriteMulti>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	73fb      	strb	r3, [r7, #15]
        Status = VL53L0X_WriteMulti(Dev, index + 1, &buffer[1], BYTES_PER_WORD);
 8005ee8:	78fb      	ldrb	r3, [r7, #3]
 8005eea:	3301      	adds	r3, #1
 8005eec:	b2d9      	uxtb	r1, r3
 8005eee:	f107 030c 	add.w	r3, r7, #12
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff ff54 	bl	8005da4 <VL53L0X_WriteMulti>
 8005efc:	4603      	mov	r3, r0
 8005efe:	73fb      	strb	r3, [r7, #15]
 8005f00:	e008      	b.n	8005f14 <VL53L0X_WrWord+0x6e>

        // serial comms cannot handle word writes to non 2-byte aligned registers.
    } else {
        Status = VL53L0X_WriteMulti(Dev, index, buffer, BYTES_PER_WORD);
 8005f02:	f107 020c 	add.w	r2, r7, #12
 8005f06:	78f9      	ldrb	r1, [r7, #3]
 8005f08:	2302      	movs	r3, #2
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff ff4a 	bl	8005da4 <VL53L0X_WriteMulti>
 8005f10:	4603      	mov	r3, r0
 8005f12:	73fb      	strb	r3, [r7, #15]
    }

    return Status;
 8005f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <VL53L0X_UpdateByte>:
    Status = VL53L0X_WriteMulti(Dev, index, buffer, BYTES_PER_DWORD);

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	4608      	mov	r0, r1
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	4603      	mov	r3, r0
 8005f30:	70fb      	strb	r3, [r7, #3]
 8005f32:	460b      	mov	r3, r1
 8005f34:	70bb      	strb	r3, [r7, #2]
 8005f36:	4613      	mov	r3, r2
 8005f38:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8005f3e:	f107 020e 	add.w	r2, r7, #14
 8005f42:	78fb      	ldrb	r3, [r7, #3]
 8005f44:	4619      	mov	r1, r3
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f81c 	bl	8005f84 <VL53L0X_RdByte>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	73fb      	strb	r3, [r7, #15]

    if (Status == VL53L0X_ERROR_NONE) {
 8005f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10f      	bne.n	8005f78 <VL53L0X_UpdateByte+0x58>
        data = (data & AndData) | OrData;
 8005f58:	7bba      	ldrb	r2, [r7, #14]
 8005f5a:	78bb      	ldrb	r3, [r7, #2]
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	787b      	ldrb	r3, [r7, #1]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	73bb      	strb	r3, [r7, #14]
        Status = VL53L0X_WrByte(Dev, index, data);
 8005f68:	7bba      	ldrb	r2, [r7, #14]
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff ff7f 	bl	8005e72 <VL53L0X_WrByte>
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]
    }

    return Status;
 8005f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t* data) {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	75fb      	strb	r3, [r7, #23]
    const int32_t cbyte_count = 1;
 8005f96:	2301      	movs	r3, #1
 8005f98:	613b      	str	r3, [r7, #16]

    Status = VL53L0X_ReadMulti(Dev, index, data, cbyte_count);
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	7af9      	ldrb	r1, [r7, #11]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7ff ff37 	bl	8005e14 <VL53L0X_ReadMulti>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	75fb      	strb	r3, [r7, #23]

    return Status;
 8005faa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t*   data) {
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b086      	sub	sp, #24
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	607a      	str	r2, [r7, #4]
 8005fc2:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	75fb      	strb	r3, [r7, #23]

    uint8_t buffer[BYTES_PER_WORD];

    Status= VL53L0X_ReadMulti(Dev, index, buffer, BYTES_PER_WORD);
 8005fc8:	f107 0214 	add.w	r2, r7, #20
 8005fcc:	7af9      	ldrb	r1, [r7, #11]
 8005fce:	2302      	movs	r3, #2
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f7ff ff1f 	bl	8005e14 <VL53L0X_ReadMulti>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	75fb      	strb	r3, [r7, #23]
    *data = ((uint16_t) buffer[0] << 8) + (uint16_t) buffer[1];
 8005fda:	7d3b      	ldrb	r3, [r7, #20]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	021b      	lsls	r3, r3, #8
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	7d7b      	ldrb	r3, [r7, #21]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	801a      	strh	r2, [r3, #0]

    return Status;
 8005fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t*   data) {
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b086      	sub	sp, #24
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	460b      	mov	r3, r1
 8006004:	607a      	str	r2, [r7, #4]
 8006006:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006008:	2300      	movs	r3, #0
 800600a:	75fb      	strb	r3, [r7, #23]

    uint8_t buffer[BYTES_PER_DWORD];

    Status= VL53L0X_ReadMulti(Dev, index, buffer, BYTES_PER_DWORD);
 800600c:	f107 0210 	add.w	r2, r7, #16
 8006010:	7af9      	ldrb	r1, [r7, #11]
 8006012:	2304      	movs	r3, #4
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7ff fefd 	bl	8005e14 <VL53L0X_ReadMulti>
 800601a:	4603      	mov	r3, r0
 800601c:	75fb      	strb	r3, [r7, #23]
    *data = ((uint32_t) buffer[0] << 24) + ((uint32_t) buffer[1] << 16) + ((uint32_t) buffer[2] << 8) +
 800601e:	7c3b      	ldrb	r3, [r7, #16]
 8006020:	061a      	lsls	r2, r3, #24
 8006022:	7c7b      	ldrb	r3, [r7, #17]
 8006024:	041b      	lsls	r3, r3, #16
 8006026:	441a      	add	r2, r3
 8006028:	7cbb      	ldrb	r3, [r7, #18]
 800602a:	021b      	lsls	r3, r3, #8
 800602c:	4413      	add	r3, r2
             (uint32_t) buffer[3];
 800602e:	7cfa      	ldrb	r2, [r7, #19]
    *data = ((uint32_t) buffer[0] << 24) + ((uint32_t) buffer[1] << 16) + ((uint32_t) buffer[2] << 8) +
 8006030:	441a      	add	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	601a      	str	r2, [r3, #0]

    return Status;
 8006036:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB 250

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
    return VL53L0X_Delay(VL53L0X_POLLINGDELAY_LOOPNB);
 800604a:	20fa      	movs	r0, #250	; 0xfa
 800604c:	f000 f9f8 	bl	8006440 <VL53L0X_Delay>
 8006050:	4603      	mov	r3, r0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <vl53l0x_init>:
/*****************************************
 * Public Functions Bodies Definitions
 *****************************************/

VL53L0X_Error vl53l0x_init(VL53L0X_Dev_t* p_device, VL53L0X_DeviceInfo_t device_info,
                           vl53l0x_calibration_data_t calibration) {
 800605a:	b084      	sub	sp, #16
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	f107 001c 	add.w	r0, r7, #28
 8006068:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800606c:	2300      	movs	r3, #0
 800606e:	73fb      	strb	r3, [r7, #15]

    // Data initialization
    Status = VL53L0X_DataInit(p_device);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7fa ff73 	bl	8000f5c <VL53L0X_DataInit>
 8006076:	4603      	mov	r3, r0
 8006078:	73fb      	strb	r3, [r7, #15]

    if (Status == VL53L0X_ERROR_NONE) {
 800607a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d115      	bne.n	80060ae <vl53l0x_init+0x54>
        Status = VL53L0X_GetDeviceInfo(p_device, &device_info);
 8006082:	f107 031c 	add.w	r3, r7, #28
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7fa ff29 	bl	8000ee0 <VL53L0X_GetDeviceInfo>
 800608e:	4603      	mov	r3, r0
 8006090:	73fb      	strb	r3, [r7, #15]

        if (Status == VL53L0X_ERROR_NONE) {
 8006092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d109      	bne.n	80060ae <vl53l0x_init+0x54>
            if ((device_info.ProductRevisionMinor != 1) && (device_info.ProductRevisionMinor != 1)) {
 800609a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d005      	beq.n	80060ae <vl53l0x_init+0x54>
 80060a2:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d001      	beq.n	80060ae <vl53l0x_init+0x54>
                Status = VL53L0X_ERROR_NOT_SUPPORTED;
 80060aa:	23fb      	movs	r3, #251	; 0xfb
 80060ac:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80060ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d104      	bne.n	80060c0 <vl53l0x_init+0x66>
        // Device Initialization
        Status = VL53L0X_StaticInit(p_device);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7fb f8bc 	bl	8001234 <VL53L0X_StaticInit>
 80060bc:	4603      	mov	r3, r0
 80060be:	73fb      	strb	r3, [r7, #15]
    }

    if (p_device->calibrated) {
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3161 	ldrb.w	r3, [r3, #353]	; 0x161
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d01c      	beq.n	8006104 <vl53l0x_init+0xaa>
        // Load de calibration data
        if (Status == VL53L0X_ERROR_NONE) {
 80060ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <vl53l0x_init+0x8c>
            Status = VL53L0X_SetReferenceSpads(p_device,
 80060d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060d6:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7fc fbe3 	bl	80028a8 <VL53L0X_SetReferenceSpads>
 80060e2:	4603      	mov	r3, r0
 80060e4:	73fb      	strb	r3, [r7, #15]
                                               calibration.refSpadCount, calibration.isApertureSpads);
        }

        if (Status == VL53L0X_ERROR_NONE) {
 80060e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d129      	bne.n	8006142 <vl53l0x_init+0xe8>
            Status = VL53L0X_SetRefCalibration(p_device,
 80060ee:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80060f2:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7fb fd29 	bl	8001b50 <VL53L0X_SetRefCalibration>
 80060fe:	4603      	mov	r3, r0
 8006100:	73fb      	strb	r3, [r7, #15]
 8006102:	e01e      	b.n	8006142 <vl53l0x_init+0xe8>
                                               calibration.VhvSettings, calibration.PhaseCal);
        }
    } else {
        // Device calibration
        if (Status == VL53L0X_ERROR_NONE) {
 8006104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <vl53l0x_init+0xc8>
            Status =
                VL53L0X_PerformRefSpadManagement(p_device, &(calibration.refSpadCount),
 800610c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006110:	1d1a      	adds	r2, r3, #4
 8006112:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7fc fbdc 	bl	80028d6 <VL53L0X_PerformRefSpadManagement>
 800611e:	4603      	mov	r3, r0
 8006120:	73fb      	strb	r3, [r7, #15]
                                                 &(calibration.isApertureSpads));
        }

        if (Status == VL53L0X_ERROR_NONE) {
 8006122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10b      	bne.n	8006142 <vl53l0x_init+0xe8>
            Status = VL53L0X_PerformRefCalibration(p_device, &(calibration.VhvSettings), &(calibration.PhaseCal));
 800612a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800612e:	1d9a      	adds	r2, r3, #6
 8006130:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006134:	3305      	adds	r3, #5
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7fb ff27 	bl	8001f8c <VL53L0X_PerformRefCalibration>
 800613e:	4603      	mov	r3, r0
 8006140:	73fb      	strb	r3, [r7, #15]
        }
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8006142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d105      	bne.n	8006156 <vl53l0x_init+0xfc>
        // Device default is single ranging mode
        Status = VL53L0X_SetDeviceMode(p_device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800614a:	2101      	movs	r1, #1
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7fb fa83 	bl	8001658 <VL53L0X_SetDeviceMode>
 8006152:	4603      	mov	r3, r0
 8006154:	73fb      	strb	r3, [r7, #15]
    }

    // Enable Sigma Signal and Threshold check
    if (Status == VL53L0X_ERROR_NONE) {
 8006156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <vl53l0x_init+0x112>
        Status = VL53L0X_SetLimitCheckEnable(p_device,
 800615e:	2201      	movs	r2, #1
 8006160:	2100      	movs	r1, #0
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fb fd0c 	bl	8001b80 <VL53L0X_SetLimitCheckEnable>
 8006168:	4603      	mov	r3, r0
 800616a:	73fb      	strb	r3, [r7, #15]
                                             VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800616c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d106      	bne.n	8006182 <vl53l0x_init+0x128>
        Status = VL53L0X_SetLimitCheckEnable(p_device,
 8006174:	2201      	movs	r2, #1
 8006176:	2101      	movs	r1, #1
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7fb fd01 	bl	8001b80 <VL53L0X_SetLimitCheckEnable>
 800617e:	4603      	mov	r3, r0
 8006180:	73fb      	strb	r3, [r7, #15]
                                             VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
    }

    // Set Values
    if (Status == VL53L0X_ERROR_NONE) {
 8006182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d107      	bne.n	800619a <vl53l0x_init+0x140>
        Status = VL53L0X_SetLimitCheckValue(p_device,
 800618a:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800618e:	2100      	movs	r1, #0
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7fb fda5 	bl	8001ce0 <VL53L0X_SetLimitCheckValue>
 8006196:	4603      	mov	r3, r0
 8006198:	73fb      	strb	r3, [r7, #15]
                                            VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
                                            (FixPoint1616_t) (SIGMA_LIMIT_VALUE_MM * (1 << 16)));
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800619a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d107      	bne.n	80061b2 <vl53l0x_init+0x158>
        Status = VL53L0X_SetLimitCheckValue(p_device,
 80061a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061a6:	2101      	movs	r1, #1
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7fb fd99 	bl	8001ce0 <VL53L0X_SetLimitCheckValue>
 80061ae:	4603      	mov	r3, r0
 80061b0:	73fb      	strb	r3, [r7, #15]
                                            VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
                                            (FixPoint1616_t) (SIGNAL_RATE_LIMIT_VALUE_MCPS * (1 << 16)));
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80061b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <vl53l0x_init+0x16e>
        Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(p_device, MEASUREMENT_TIME_BUDGET_US);
 80061ba:	f24c 3150 	movw	r1, #50000	; 0xc350
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fb faa8 	bl	8001714 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80061c4:	4603      	mov	r3, r0
 80061c6:	73fb      	strb	r3, [r7, #15]
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80061c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d106      	bne.n	80061de <vl53l0x_init+0x184>
        Status = VL53L0X_SetVcselPulsePeriod(p_device,
 80061d0:	2212      	movs	r2, #18
 80061d2:	2100      	movs	r1, #0
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7fb fac3 	bl	8001760 <VL53L0X_SetVcselPulsePeriod>
 80061da:	4603      	mov	r3, r0
 80061dc:	73fb      	strb	r3, [r7, #15]
                                             VL53L0X_VCSEL_PERIOD_PRE_RANGE, PRE_RANGE_PULSE_PERIOD);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80061de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d106      	bne.n	80061f4 <vl53l0x_init+0x19a>
        Status = VL53L0X_SetVcselPulsePeriod(p_device,
 80061e6:	220e      	movs	r2, #14
 80061e8:	2101      	movs	r1, #1
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fb fab8 	bl	8001760 <VL53L0X_SetVcselPulsePeriod>
 80061f0:	4603      	mov	r3, r0
 80061f2:	73fb      	strb	r3, [r7, #15]
                                             VL53L0X_VCSEL_PERIOD_FINAL_RANGE, FINAL_RANGE_PULSE_PERIOD);
    }

    // Start reading
    if (Status == VL53L0X_ERROR_NONE) {
 80061f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d104      	bne.n	8006206 <vl53l0x_init+0x1ac>
        Status = VL53L0X_StartMeasurement(p_device);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7fb ff41 	bl	8002084 <VL53L0X_StartMeasurement>
 8006202:	4603      	mov	r3, r0
 8006204:	73fb      	strb	r3, [r7, #15]
    }

    return Status;
 8006206:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006214:	b004      	add	sp, #16
 8006216:	4770      	bx	lr

08006218 <vl53l0x_turn_off>:

void vl53l0x_turn_off(VL53L0X_Dev_t* p_device) {
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(p_device->xshut_port, p_device->xshut_pin, GPIO_PIN_RESET);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8b3 316c 	ldrh.w	r3, [r3, #364]	; 0x16c
 800622c:	2200      	movs	r2, #0
 800622e:	4619      	mov	r1, r3
 8006230:	f000 ffb4 	bl	800719c <HAL_GPIO_WritePin>
}
 8006234:	bf00      	nop
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <vl53l0x_turn_on>:

void vl53l0x_turn_on(VL53L0X_Dev_t* p_device) {
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(p_device->xshut_port, p_device->xshut_pin, GPIO_PIN_SET);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8b3 316c 	ldrh.w	r3, [r3, #364]	; 0x16c
 8006250:	2201      	movs	r2, #1
 8006252:	4619      	mov	r1, r3
 8006254:	f000 ffa2 	bl	800719c <HAL_GPIO_WritePin>
}
 8006258:	bf00      	nop
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <vl53l0x_wait_boot>:

VL53L0X_Error vl53l0x_wait_boot(VL53L0X_Dev_t* p_device) {
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_UNDEFINED;
 8006268:	23fd      	movs	r3, #253	; 0xfd
 800626a:	73fb      	strb	r3, [r7, #15]
    uint16_t byte = 0x0000;
 800626c:	2300      	movs	r3, #0
 800626e:	817b      	strh	r3, [r7, #10]
    uint16_t loopCounter = 0;
 8006270:	2300      	movs	r3, #0
 8006272:	81bb      	strh	r3, [r7, #12]

    vl53l0x_turn_on(p_device);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff ffe1 	bl	800623c <vl53l0x_turn_on>

    while (loopCounter < 400) {
 800627a:	e013      	b.n	80062a4 <vl53l0x_wait_boot+0x44>
        // It doesn't work without a delay, even using 0
        VL53L0X_Delay(0);
 800627c:	2000      	movs	r0, #0
 800627e:	f000 f8df 	bl	8006440 <VL53L0X_Delay>
        status = VL53L0X_RdWord(p_device,
 8006282:	f107 030a 	add.w	r3, r7, #10
 8006286:	461a      	mov	r2, r3
 8006288:	21c0      	movs	r1, #192	; 0xc0
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff fe93 	bl	8005fb6 <VL53L0X_RdWord>
 8006290:	4603      	mov	r3, r0
 8006292:	73fb      	strb	r3, [r7, #15]
                                VL53L0X_REG_IDENTIFICATION_MODEL_ID, &byte);

        if (byte == 0xEEAA) {
 8006294:	897b      	ldrh	r3, [r7, #10]
 8006296:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 800629a:	4293      	cmp	r3, r2
 800629c:	d007      	beq.n	80062ae <vl53l0x_wait_boot+0x4e>
            break;
        }

        loopCounter++;
 800629e:	89bb      	ldrh	r3, [r7, #12]
 80062a0:	3301      	adds	r3, #1
 80062a2:	81bb      	strh	r3, [r7, #12]
    while (loopCounter < 400) {
 80062a4:	89bb      	ldrh	r3, [r7, #12]
 80062a6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80062aa:	d3e7      	bcc.n	800627c <vl53l0x_wait_boot+0x1c>
 80062ac:	e000      	b.n	80062b0 <vl53l0x_wait_boot+0x50>
            break;
 80062ae:	bf00      	nop
    }

    return status;
 80062b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	0000      	movs	r0, r0
	...

080062c0 <vl53l0x_update_range>:

uint8_t vl53l0x_update_range(VL53L0X_Dev_t* p_device, VL53L0X_RangingMeasurementData_t* p_ranging_data, uint16_t* range,
                             uint16_t max_range) {
 80062c0:	b5b0      	push	{r4, r5, r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	807b      	strh	r3, [r7, #2]
    uint8_t status = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	75fb      	strb	r3, [r7, #23]
    uint16_t aux_range = *range;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	82bb      	strh	r3, [r7, #20]
    status = VL53L0X_GetRangingMeasurementData(p_device, p_ranging_data);
 80062d8:	68b9      	ldr	r1, [r7, #8]
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f7fb ffd4 	bl	8002288 <VL53L0X_GetRangingMeasurementData>
 80062e0:	4603      	mov	r3, r0
 80062e2:	75fb      	strb	r3, [r7, #23]

    if (status != VL53L0X_ERROR_NONE) {
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <vl53l0x_update_range+0x2e>
        return status;
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
 80062ec:	e090      	b.n	8006410 <vl53l0x_update_range+0x150>
    }

    uint8_t range_status = p_ranging_data->RangeStatus;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	7e1b      	ldrb	r3, [r3, #24]
 80062f2:	74fb      	strb	r3, [r7, #19]

    if (range_status == 0) {  // VALID RANGE
 80062f4:	7cfb      	ldrb	r3, [r7, #19]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d125      	bne.n	8006346 <vl53l0x_update_range+0x86>
        aux_range = (p_ranging_data->RangeMilliMeter) * VALID_RANGE_FILTER + (1 - VALID_RANGE_FILTER) * aux_range;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	891b      	ldrh	r3, [r3, #8]
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fa f910 	bl	8000524 <__aeabi_i2d>
 8006304:	a344      	add	r3, pc, #272	; (adr r3, 8006418 <vl53l0x_update_range+0x158>)
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	f7fa f975 	bl	80005f8 <__aeabi_dmul>
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	4614      	mov	r4, r2
 8006314:	461d      	mov	r5, r3
 8006316:	8abb      	ldrh	r3, [r7, #20]
 8006318:	4618      	mov	r0, r3
 800631a:	f7fa f903 	bl	8000524 <__aeabi_i2d>
 800631e:	a340      	add	r3, pc, #256	; (adr r3, 8006420 <vl53l0x_update_range+0x160>)
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	f7fa f968 	bl	80005f8 <__aeabi_dmul>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4620      	mov	r0, r4
 800632e:	4629      	mov	r1, r5
 8006330:	f7f9 ffac 	bl	800028c <__adddf3>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	4610      	mov	r0, r2
 800633a:	4619      	mov	r1, r3
 800633c:	f7fa fc34 	bl	8000ba8 <__aeabi_d2uiz>
 8006340:	4603      	mov	r3, r0
 8006342:	82bb      	strh	r3, [r7, #20]
 8006344:	e056      	b.n	80063f4 <vl53l0x_update_range+0x134>
    } else if (range_status == 1) {  // SIGMA FAIL
 8006346:	7cfb      	ldrb	r3, [r7, #19]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d125      	bne.n	8006398 <vl53l0x_update_range+0xd8>
        aux_range = (p_ranging_data->RangeMilliMeter) * SIGMA_FAIL_FILTER + (1 - SIGMA_FAIL_FILTER) * aux_range;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	891b      	ldrh	r3, [r3, #8]
 8006350:	4618      	mov	r0, r3
 8006352:	f7fa f8e7 	bl	8000524 <__aeabi_i2d>
 8006356:	a334      	add	r3, pc, #208	; (adr r3, 8006428 <vl53l0x_update_range+0x168>)
 8006358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635c:	f7fa f94c 	bl	80005f8 <__aeabi_dmul>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4614      	mov	r4, r2
 8006366:	461d      	mov	r5, r3
 8006368:	8abb      	ldrh	r3, [r7, #20]
 800636a:	4618      	mov	r0, r3
 800636c:	f7fa f8da 	bl	8000524 <__aeabi_i2d>
 8006370:	a329      	add	r3, pc, #164	; (adr r3, 8006418 <vl53l0x_update_range+0x158>)
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	f7fa f93f 	bl	80005f8 <__aeabi_dmul>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4620      	mov	r0, r4
 8006380:	4629      	mov	r1, r5
 8006382:	f7f9 ff83 	bl	800028c <__adddf3>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4610      	mov	r0, r2
 800638c:	4619      	mov	r1, r3
 800638e:	f7fa fc0b 	bl	8000ba8 <__aeabi_d2uiz>
 8006392:	4603      	mov	r3, r0
 8006394:	82bb      	strh	r3, [r7, #20]
 8006396:	e02d      	b.n	80063f4 <vl53l0x_update_range+0x134>
    } else if (range_status == 4) {  // PHASE FAIL
 8006398:	7cfb      	ldrb	r3, [r7, #19]
 800639a:	2b04      	cmp	r3, #4
 800639c:	d02a      	beq.n	80063f4 <vl53l0x_update_range+0x134>
        /* In this case, aux_range will not be updated, because the reading is mostly random when this erro occurs */
    } else if (range_status == 5) {  // HARDWARE FAIL
 800639e:	7cfb      	ldrb	r3, [r7, #19]
 80063a0:	2b05      	cmp	r3, #5
 80063a2:	d102      	bne.n	80063aa <vl53l0x_update_range+0xea>
        aux_range = max_range;
 80063a4:	887b      	ldrh	r3, [r7, #2]
 80063a6:	82bb      	strh	r3, [r7, #20]
 80063a8:	e024      	b.n	80063f4 <vl53l0x_update_range+0x134>
    } else {
        // 2 - SIGNAL FAIL
        // 3 - MIN RANGE FAIL
        aux_range = (p_ranging_data->RangeMilliMeter) * DAFAULT_FILTER + (1 - DAFAULT_FILTER) * aux_range;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	891b      	ldrh	r3, [r3, #8]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fa f8b8 	bl	8000524 <__aeabi_i2d>
 80063b4:	a31e      	add	r3, pc, #120	; (adr r3, 8006430 <vl53l0x_update_range+0x170>)
 80063b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ba:	f7fa f91d 	bl	80005f8 <__aeabi_dmul>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4614      	mov	r4, r2
 80063c4:	461d      	mov	r5, r3
 80063c6:	8abb      	ldrh	r3, [r7, #20]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fa f8ab 	bl	8000524 <__aeabi_i2d>
 80063ce:	a31a      	add	r3, pc, #104	; (adr r3, 8006438 <vl53l0x_update_range+0x178>)
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	f7fa f910 	bl	80005f8 <__aeabi_dmul>
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	4620      	mov	r0, r4
 80063de:	4629      	mov	r1, r5
 80063e0:	f7f9 ff54 	bl	800028c <__adddf3>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	4610      	mov	r0, r2
 80063ea:	4619      	mov	r1, r3
 80063ec:	f7fa fbdc 	bl	8000ba8 <__aeabi_d2uiz>
 80063f0:	4603      	mov	r3, r0
 80063f2:	82bb      	strh	r3, [r7, #20]
    }

    *range = min(aux_range, max_range);
 80063f4:	887a      	ldrh	r2, [r7, #2]
 80063f6:	8abb      	ldrh	r3, [r7, #20]
 80063f8:	4293      	cmp	r3, r2
 80063fa:	bf28      	it	cs
 80063fc:	4613      	movcs	r3, r2
 80063fe:	b29a      	uxth	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	801a      	strh	r2, [r3, #0]

    if (status == 0) {
 8006404:	7dfb      	ldrb	r3, [r7, #23]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <vl53l0x_update_range+0x14e>
        status = range_status;
 800640a:	7cfb      	ldrb	r3, [r7, #19]
 800640c:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800640e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bdb0      	pop	{r4, r5, r7, pc}
 8006418:	9999999a 	.word	0x9999999a
 800641c:	3fe99999 	.word	0x3fe99999
 8006420:	99999998 	.word	0x99999998
 8006424:	3fc99999 	.word	0x3fc99999
 8006428:	9999999a 	.word	0x9999999a
 800642c:	3fc99999 	.word	0x3fc99999
 8006430:	9999999a 	.word	0x9999999a
 8006434:	3fd99999 	.word	0x3fd99999
 8006438:	33333333 	.word	0x33333333
 800643c:	3fe33333 	.word	0x3fe33333

08006440 <VL53L0X_Delay>:

VL53L0X_Error VL53L0X_Delay(uint32_t ms)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fc01 	bl	8006c50 <HAL_Delay>
	return 0;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <app_main_init>:
vl53l0x_calibration_data_t calibration;
uint16_t distance;
uint16_t Mx_Distance = 200;

//初始化函数
void app_main_init(void) {
 8006458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800645a:	b099      	sub	sp, #100	; 0x64
 800645c:	af18      	add	r7, sp, #96	; 0x60
	while(vl53l0x_init(&device, device_info, calibration));
 800645e:	bf00      	nop
 8006460:	4b15      	ldr	r3, [pc, #84]	; (80064b8 <app_main_init+0x60>)
 8006462:	4916      	ldr	r1, [pc, #88]	; (80064bc <app_main_init+0x64>)
 8006464:	aa16      	add	r2, sp, #88	; 0x58
 8006466:	c903      	ldmia	r1, {r0, r1}
 8006468:	e882 0003 	stmia.w	r2, {r0, r1}
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	2600      	movs	r6, #0
 8006470:	4616      	mov	r6, r2
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	2500      	movs	r5, #0
 8006476:	4615      	mov	r5, r2
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	2400      	movs	r4, #0
 800647c:	4614      	mov	r4, r2
 800647e:	4668      	mov	r0, sp
 8006480:	330c      	adds	r3, #12
 8006482:	2257      	movs	r2, #87	; 0x57
 8006484:	4619      	mov	r1, r3
 8006486:	f002 fd07 	bl	8008e98 <memcpy>
 800648a:	4631      	mov	r1, r6
 800648c:	462a      	mov	r2, r5
 800648e:	4623      	mov	r3, r4
 8006490:	480b      	ldr	r0, [pc, #44]	; (80064c0 <app_main_init+0x68>)
 8006492:	f7ff fde2 	bl	800605a <vl53l0x_init>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e1      	bne.n	8006460 <app_main_init+0x8>
	vl53l0x_turn_off(&device);
 800649c:	4808      	ldr	r0, [pc, #32]	; (80064c0 <app_main_init+0x68>)
 800649e:	f7ff febb 	bl	8006218 <vl53l0x_turn_off>
	vl53l0x_wait_boot(&device);
 80064a2:	4807      	ldr	r0, [pc, #28]	; (80064c0 <app_main_init+0x68>)
 80064a4:	f7ff fedc 	bl	8006260 <vl53l0x_wait_boot>
	VL53L0X_SetDeviceAddress(&device, 0x52);
 80064a8:	2152      	movs	r1, #82	; 0x52
 80064aa:	4805      	ldr	r0, [pc, #20]	; (80064c0 <app_main_init+0x68>)
 80064ac:	f7fa fd3e 	bl	8000f2c <VL53L0X_SetDeviceAddress>
}
 80064b0:	bf00      	nop
 80064b2:	3704      	adds	r7, #4
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064b8:	20000594 	.word	0x20000594
 80064bc:	20000508 	.word	0x20000508
 80064c0:	200005f8 	.word	0x200005f8

080064c4 <app_main>:

//主程序函数
void app_main(void) {
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0
	vl53l0x_update_range(&device, &ranging_data, &distance, Mx_Distance);
 80064c8:	4b09      	ldr	r3, [pc, #36]	; (80064f0 <app_main+0x2c>)
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	4a09      	ldr	r2, [pc, #36]	; (80064f4 <app_main+0x30>)
 80064ce:	490a      	ldr	r1, [pc, #40]	; (80064f8 <app_main+0x34>)
 80064d0:	480a      	ldr	r0, [pc, #40]	; (80064fc <app_main+0x38>)
 80064d2:	f7ff fef5 	bl	80062c0 <vl53l0x_update_range>
	printf("距离为:%d\r\n", distance);
 80064d6:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <app_main+0x30>)
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	4619      	mov	r1, r3
 80064dc:	4808      	ldr	r0, [pc, #32]	; (8006500 <app_main+0x3c>)
 80064de:	f003 f95b 	bl	8009798 <iprintf>
	HAL_Delay(500);
 80064e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80064e6:	f000 fbb3 	bl	8006c50 <HAL_Delay>
}
 80064ea:	bf00      	nop
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	200002bc 	.word	0x200002bc
 80064f4:	20000504 	.word	0x20000504
 80064f8:	20000578 	.word	0x20000578
 80064fc:	200005f8 	.word	0x200005f8
 8006500:	0800bd44 	.word	0x0800bd44

08006504 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 800650c:	bf00      	nop
 800650e:	4b08      	ldr	r3, [pc, #32]	; (8006530 <__io_putchar+0x2c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0f9      	beq.n	800650e <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	b2da      	uxtb	r2, r3
 800651e:	4b04      	ldr	r3, [pc, #16]	; (8006530 <__io_putchar+0x2c>)
 8006520:	605a      	str	r2, [r3, #4]

	//  while ((USART2->SR & 0X40) == 0) {
	//  }; //循环发送,直到发送完毕
	//  USART2->DR = (uint8_t) ch;

	return ch;
 8006522:	687b      	ldr	r3, [r7, #4]
}
 8006524:	4618      	mov	r0, r3
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	40011000 	.word	0x40011000

08006534 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08a      	sub	sp, #40	; 0x28
 8006538:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800653a:	f107 0314 	add.w	r3, r7, #20
 800653e:	2200      	movs	r2, #0
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	605a      	str	r2, [r3, #4]
 8006544:	609a      	str	r2, [r3, #8]
 8006546:	60da      	str	r2, [r3, #12]
 8006548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800654a:	2300      	movs	r3, #0
 800654c:	613b      	str	r3, [r7, #16]
 800654e:	4b26      	ldr	r3, [pc, #152]	; (80065e8 <MX_GPIO_Init+0xb4>)
 8006550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006552:	4a25      	ldr	r2, [pc, #148]	; (80065e8 <MX_GPIO_Init+0xb4>)
 8006554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006558:	6313      	str	r3, [r2, #48]	; 0x30
 800655a:	4b23      	ldr	r3, [pc, #140]	; (80065e8 <MX_GPIO_Init+0xb4>)
 800655c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006562:	613b      	str	r3, [r7, #16]
 8006564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006566:	2300      	movs	r3, #0
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	4b1f      	ldr	r3, [pc, #124]	; (80065e8 <MX_GPIO_Init+0xb4>)
 800656c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656e:	4a1e      	ldr	r2, [pc, #120]	; (80065e8 <MX_GPIO_Init+0xb4>)
 8006570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006574:	6313      	str	r3, [r2, #48]	; 0x30
 8006576:	4b1c      	ldr	r3, [pc, #112]	; (80065e8 <MX_GPIO_Init+0xb4>)
 8006578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006582:	2300      	movs	r3, #0
 8006584:	60bb      	str	r3, [r7, #8]
 8006586:	4b18      	ldr	r3, [pc, #96]	; (80065e8 <MX_GPIO_Init+0xb4>)
 8006588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658a:	4a17      	ldr	r2, [pc, #92]	; (80065e8 <MX_GPIO_Init+0xb4>)
 800658c:	f043 0301 	orr.w	r3, r3, #1
 8006590:	6313      	str	r3, [r2, #48]	; 0x30
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <MX_GPIO_Init+0xb4>)
 8006594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	60bb      	str	r3, [r7, #8]
 800659c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800659e:	2300      	movs	r3, #0
 80065a0:	607b      	str	r3, [r7, #4]
 80065a2:	4b11      	ldr	r3, [pc, #68]	; (80065e8 <MX_GPIO_Init+0xb4>)
 80065a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a6:	4a10      	ldr	r2, [pc, #64]	; (80065e8 <MX_GPIO_Init+0xb4>)
 80065a8:	f043 0302 	orr.w	r3, r3, #2
 80065ac:	6313      	str	r3, [r2, #48]	; 0x30
 80065ae:	4b0e      	ldr	r3, [pc, #56]	; (80065e8 <MX_GPIO_Init+0xb4>)
 80065b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	607b      	str	r3, [r7, #4]
 80065b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET);
 80065ba:	2201      	movs	r2, #1
 80065bc:	2102      	movs	r1, #2
 80065be:	480b      	ldr	r0, [pc, #44]	; (80065ec <MX_GPIO_Init+0xb8>)
 80065c0:	f000 fdec 	bl	800719c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80065c4:	2302      	movs	r3, #2
 80065c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80065c8:	2311      	movs	r3, #17
 80065ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065cc:	2301      	movs	r3, #1
 80065ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065d0:	2302      	movs	r3, #2
 80065d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80065d4:	f107 0314 	add.w	r3, r7, #20
 80065d8:	4619      	mov	r1, r3
 80065da:	4804      	ldr	r0, [pc, #16]	; (80065ec <MX_GPIO_Init+0xb8>)
 80065dc:	f000 fc42 	bl	8006e64 <HAL_GPIO_Init>

}
 80065e0:	bf00      	nop
 80065e2:	3728      	adds	r7, #40	; 0x28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	40023800 	.word	0x40023800
 80065ec:	40021800 	.word	0x40021800

080065f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80065f4:	4b12      	ldr	r3, [pc, #72]	; (8006640 <MX_I2C1_Init+0x50>)
 80065f6:	4a13      	ldr	r2, [pc, #76]	; (8006644 <MX_I2C1_Init+0x54>)
 80065f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80065fa:	4b11      	ldr	r3, [pc, #68]	; (8006640 <MX_I2C1_Init+0x50>)
 80065fc:	4a12      	ldr	r2, [pc, #72]	; (8006648 <MX_I2C1_Init+0x58>)
 80065fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006600:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <MX_I2C1_Init+0x50>)
 8006602:	2200      	movs	r2, #0
 8006604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006606:	4b0e      	ldr	r3, [pc, #56]	; (8006640 <MX_I2C1_Init+0x50>)
 8006608:	2200      	movs	r2, #0
 800660a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800660c:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <MX_I2C1_Init+0x50>)
 800660e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006614:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <MX_I2C1_Init+0x50>)
 8006616:	2200      	movs	r2, #0
 8006618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800661a:	4b09      	ldr	r3, [pc, #36]	; (8006640 <MX_I2C1_Init+0x50>)
 800661c:	2200      	movs	r2, #0
 800661e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006620:	4b07      	ldr	r3, [pc, #28]	; (8006640 <MX_I2C1_Init+0x50>)
 8006622:	2200      	movs	r2, #0
 8006624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006626:	4b06      	ldr	r3, [pc, #24]	; (8006640 <MX_I2C1_Init+0x50>)
 8006628:	2200      	movs	r2, #0
 800662a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800662c:	4804      	ldr	r0, [pc, #16]	; (8006640 <MX_I2C1_Init+0x50>)
 800662e:	f000 fdcf 	bl	80071d0 <HAL_I2C_Init>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006638:	f000 f8cc 	bl	80067d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800663c:	bf00      	nop
 800663e:	bd80      	pop	{r7, pc}
 8006640:	20000768 	.word	0x20000768
 8006644:	40005400 	.word	0x40005400
 8006648:	00061a80 	.word	0x00061a80

0800664c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08a      	sub	sp, #40	; 0x28
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006654:	f107 0314 	add.w	r3, r7, #20
 8006658:	2200      	movs	r2, #0
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	605a      	str	r2, [r3, #4]
 800665e:	609a      	str	r2, [r3, #8]
 8006660:	60da      	str	r2, [r3, #12]
 8006662:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a19      	ldr	r2, [pc, #100]	; (80066d0 <HAL_I2C_MspInit+0x84>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d12b      	bne.n	80066c6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800666e:	2300      	movs	r3, #0
 8006670:	613b      	str	r3, [r7, #16]
 8006672:	4b18      	ldr	r3, [pc, #96]	; (80066d4 <HAL_I2C_MspInit+0x88>)
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	4a17      	ldr	r2, [pc, #92]	; (80066d4 <HAL_I2C_MspInit+0x88>)
 8006678:	f043 0302 	orr.w	r3, r3, #2
 800667c:	6313      	str	r3, [r2, #48]	; 0x30
 800667e:	4b15      	ldr	r3, [pc, #84]	; (80066d4 <HAL_I2C_MspInit+0x88>)
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	613b      	str	r3, [r7, #16]
 8006688:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IIC_SCL_Pin|IIC_SDA_Pin;
 800668a:	23c0      	movs	r3, #192	; 0xc0
 800668c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800668e:	2312      	movs	r3, #18
 8006690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006692:	2301      	movs	r3, #1
 8006694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006696:	2303      	movs	r3, #3
 8006698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800669a:	2304      	movs	r3, #4
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800669e:	f107 0314 	add.w	r3, r7, #20
 80066a2:	4619      	mov	r1, r3
 80066a4:	480c      	ldr	r0, [pc, #48]	; (80066d8 <HAL_I2C_MspInit+0x8c>)
 80066a6:	f000 fbdd 	bl	8006e64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80066aa:	2300      	movs	r3, #0
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <HAL_I2C_MspInit+0x88>)
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	4a08      	ldr	r2, [pc, #32]	; (80066d4 <HAL_I2C_MspInit+0x88>)
 80066b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066b8:	6413      	str	r3, [r2, #64]	; 0x40
 80066ba:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <HAL_I2C_MspInit+0x88>)
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80066c6:	bf00      	nop
 80066c8:	3728      	adds	r7, #40	; 0x28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	40005400 	.word	0x40005400
 80066d4:	40023800 	.word	0x40023800
 80066d8:	40020400 	.word	0x40020400

080066dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80066e0:	f000 fa44 	bl	8006b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80066e4:	f000 f80c 	bl	8006700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80066e8:	f7ff ff24 	bl	8006534 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80066ec:	f000 f9a2 	bl	8006a34 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80066f0:	f7ff ff7e 	bl	80065f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 80066f4:	f7ff feb0 	bl	8006458 <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_main();
 80066f8:	f7ff fee4 	bl	80064c4 <app_main>
 80066fc:	e7fc      	b.n	80066f8 <main+0x1c>
	...

08006700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b094      	sub	sp, #80	; 0x50
 8006704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006706:	f107 0320 	add.w	r3, r7, #32
 800670a:	2230      	movs	r2, #48	; 0x30
 800670c:	2100      	movs	r1, #0
 800670e:	4618      	mov	r0, r3
 8006710:	f002 fbd0 	bl	8008eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006714:	f107 030c 	add.w	r3, r7, #12
 8006718:	2200      	movs	r2, #0
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	605a      	str	r2, [r3, #4]
 800671e:	609a      	str	r2, [r3, #8]
 8006720:	60da      	str	r2, [r3, #12]
 8006722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006724:	2300      	movs	r3, #0
 8006726:	60bb      	str	r3, [r7, #8]
 8006728:	4b28      	ldr	r3, [pc, #160]	; (80067cc <SystemClock_Config+0xcc>)
 800672a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672c:	4a27      	ldr	r2, [pc, #156]	; (80067cc <SystemClock_Config+0xcc>)
 800672e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006732:	6413      	str	r3, [r2, #64]	; 0x40
 8006734:	4b25      	ldr	r3, [pc, #148]	; (80067cc <SystemClock_Config+0xcc>)
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800673c:	60bb      	str	r3, [r7, #8]
 800673e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006740:	2300      	movs	r3, #0
 8006742:	607b      	str	r3, [r7, #4]
 8006744:	4b22      	ldr	r3, [pc, #136]	; (80067d0 <SystemClock_Config+0xd0>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a21      	ldr	r2, [pc, #132]	; (80067d0 <SystemClock_Config+0xd0>)
 800674a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800674e:	6013      	str	r3, [r2, #0]
 8006750:	4b1f      	ldr	r3, [pc, #124]	; (80067d0 <SystemClock_Config+0xd0>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006758:	607b      	str	r3, [r7, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800675c:	2301      	movs	r3, #1
 800675e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006766:	2302      	movs	r3, #2
 8006768:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800676a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800676e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006770:	2304      	movs	r3, #4
 8006772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006774:	23a8      	movs	r3, #168	; 0xa8
 8006776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006778:	2302      	movs	r3, #2
 800677a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800677c:	2304      	movs	r3, #4
 800677e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006780:	f107 0320 	add.w	r3, r7, #32
 8006784:	4618      	mov	r0, r3
 8006786:	f001 fcd3 	bl	8008130 <HAL_RCC_OscConfig>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006790:	f000 f820 	bl	80067d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006794:	230f      	movs	r3, #15
 8006796:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006798:	2302      	movs	r3, #2
 800679a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800679c:	2300      	movs	r3, #0
 800679e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80067a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80067a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80067a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80067ac:	f107 030c 	add.w	r3, r7, #12
 80067b0:	2105      	movs	r1, #5
 80067b2:	4618      	mov	r0, r3
 80067b4:	f001 ff34 	bl	8008620 <HAL_RCC_ClockConfig>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80067be:	f000 f809 	bl	80067d4 <Error_Handler>
  }
}
 80067c2:	bf00      	nop
 80067c4:	3750      	adds	r7, #80	; 0x50
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	40023800 	.word	0x40023800
 80067d0:	40007000 	.word	0x40007000

080067d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80067d8:	b672      	cpsid	i
}
 80067da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80067dc:	e7fe      	b.n	80067dc <Error_Handler+0x8>
	...

080067e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067e6:	2300      	movs	r3, #0
 80067e8:	607b      	str	r3, [r7, #4]
 80067ea:	4b10      	ldr	r3, [pc, #64]	; (800682c <HAL_MspInit+0x4c>)
 80067ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ee:	4a0f      	ldr	r2, [pc, #60]	; (800682c <HAL_MspInit+0x4c>)
 80067f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067f4:	6453      	str	r3, [r2, #68]	; 0x44
 80067f6:	4b0d      	ldr	r3, [pc, #52]	; (800682c <HAL_MspInit+0x4c>)
 80067f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067fe:	607b      	str	r3, [r7, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006802:	2300      	movs	r3, #0
 8006804:	603b      	str	r3, [r7, #0]
 8006806:	4b09      	ldr	r3, [pc, #36]	; (800682c <HAL_MspInit+0x4c>)
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	4a08      	ldr	r2, [pc, #32]	; (800682c <HAL_MspInit+0x4c>)
 800680c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006810:	6413      	str	r3, [r2, #64]	; 0x40
 8006812:	4b06      	ldr	r3, [pc, #24]	; (800682c <HAL_MspInit+0x4c>)
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	40023800 	.word	0x40023800

08006830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006834:	e7fe      	b.n	8006834 <NMI_Handler+0x4>

08006836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006836:	b480      	push	{r7}
 8006838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800683a:	e7fe      	b.n	800683a <HardFault_Handler+0x4>

0800683c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006840:	e7fe      	b.n	8006840 <MemManage_Handler+0x4>

08006842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006842:	b480      	push	{r7}
 8006844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006846:	e7fe      	b.n	8006846 <BusFault_Handler+0x4>

08006848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800684c:	e7fe      	b.n	800684c <UsageFault_Handler+0x4>

0800684e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800684e:	b480      	push	{r7}
 8006850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006852:	bf00      	nop
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006860:	bf00      	nop
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800686a:	b480      	push	{r7}
 800686c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800686e:	bf00      	nop
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800687c:	f000 f9c8 	bl	8006c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006880:	bf00      	nop
 8006882:	bd80      	pop	{r7, pc}

08006884 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
	return 1;
 8006888:	2301      	movs	r3, #1
}
 800688a:	4618      	mov	r0, r3
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <_kill>:

int _kill(int pid, int sig)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800689e:	f002 fad1 	bl	8008e44 <__errno>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2216      	movs	r2, #22
 80068a6:	601a      	str	r2, [r3, #0]
	return -1;
 80068a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <_exit>:

void _exit (int status)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80068bc:	f04f 31ff 	mov.w	r1, #4294967295
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff ffe7 	bl	8006894 <_kill>
	while (1) {}		/* Make sure we hang here */
 80068c6:	e7fe      	b.n	80068c6 <_exit+0x12>

080068c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068d4:	2300      	movs	r3, #0
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	e00a      	b.n	80068f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80068da:	f3af 8000 	nop.w
 80068de:	4601      	mov	r1, r0
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	60ba      	str	r2, [r7, #8]
 80068e6:	b2ca      	uxtb	r2, r1
 80068e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	3301      	adds	r3, #1
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	dbf0      	blt.n	80068da <_read+0x12>
	}

return len;
 80068f8:	687b      	ldr	r3, [r7, #4]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b086      	sub	sp, #24
 8006906:	af00      	add	r7, sp, #0
 8006908:	60f8      	str	r0, [r7, #12]
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800690e:	2300      	movs	r3, #0
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	e009      	b.n	8006928 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	60ba      	str	r2, [r7, #8]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff fdf1 	bl	8006504 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	3301      	adds	r3, #1
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	429a      	cmp	r2, r3
 800692e:	dbf1      	blt.n	8006914 <_write+0x12>
	}
	return len;
 8006930:	687b      	ldr	r3, [r7, #4]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <_close>:

int _close(int file)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
	return -1;
 8006942:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006946:	4618      	mov	r0, r3
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006962:	605a      	str	r2, [r3, #4]
	return 0;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <_isatty>:

int _isatty(int file)
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
	return 1;
 800697a:	2301      	movs	r3, #1
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
	return 0;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
	...

080069a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80069ac:	4a14      	ldr	r2, [pc, #80]	; (8006a00 <_sbrk+0x5c>)
 80069ae:	4b15      	ldr	r3, [pc, #84]	; (8006a04 <_sbrk+0x60>)
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80069b8:	4b13      	ldr	r3, [pc, #76]	; (8006a08 <_sbrk+0x64>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d102      	bne.n	80069c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80069c0:	4b11      	ldr	r3, [pc, #68]	; (8006a08 <_sbrk+0x64>)
 80069c2:	4a12      	ldr	r2, [pc, #72]	; (8006a0c <_sbrk+0x68>)
 80069c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80069c6:	4b10      	ldr	r3, [pc, #64]	; (8006a08 <_sbrk+0x64>)
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4413      	add	r3, r2
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d207      	bcs.n	80069e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80069d4:	f002 fa36 	bl	8008e44 <__errno>
 80069d8:	4603      	mov	r3, r0
 80069da:	220c      	movs	r2, #12
 80069dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80069de:	f04f 33ff 	mov.w	r3, #4294967295
 80069e2:	e009      	b.n	80069f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80069e4:	4b08      	ldr	r3, [pc, #32]	; (8006a08 <_sbrk+0x64>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80069ea:	4b07      	ldr	r3, [pc, #28]	; (8006a08 <_sbrk+0x64>)
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4413      	add	r3, r2
 80069f2:	4a05      	ldr	r2, [pc, #20]	; (8006a08 <_sbrk+0x64>)
 80069f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80069f6:	68fb      	ldr	r3, [r7, #12]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	20020000 	.word	0x20020000
 8006a04:	00000400 	.word	0x00000400
 8006a08:	200004f8 	.word	0x200004f8
 8006a0c:	20000818 	.word	0x20000818

08006a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a14:	4b06      	ldr	r3, [pc, #24]	; (8006a30 <SystemInit+0x20>)
 8006a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1a:	4a05      	ldr	r2, [pc, #20]	; (8006a30 <SystemInit+0x20>)
 8006a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006a24:	bf00      	nop
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	e000ed00 	.word	0xe000ed00

08006a34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006a38:	4b11      	ldr	r3, [pc, #68]	; (8006a80 <MX_USART1_UART_Init+0x4c>)
 8006a3a:	4a12      	ldr	r2, [pc, #72]	; (8006a84 <MX_USART1_UART_Init+0x50>)
 8006a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006a3e:	4b10      	ldr	r3, [pc, #64]	; (8006a80 <MX_USART1_UART_Init+0x4c>)
 8006a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006a46:	4b0e      	ldr	r3, [pc, #56]	; (8006a80 <MX_USART1_UART_Init+0x4c>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006a4c:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <MX_USART1_UART_Init+0x4c>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006a52:	4b0b      	ldr	r3, [pc, #44]	; (8006a80 <MX_USART1_UART_Init+0x4c>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006a58:	4b09      	ldr	r3, [pc, #36]	; (8006a80 <MX_USART1_UART_Init+0x4c>)
 8006a5a:	220c      	movs	r2, #12
 8006a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a5e:	4b08      	ldr	r3, [pc, #32]	; (8006a80 <MX_USART1_UART_Init+0x4c>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a64:	4b06      	ldr	r3, [pc, #24]	; (8006a80 <MX_USART1_UART_Init+0x4c>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006a6a:	4805      	ldr	r0, [pc, #20]	; (8006a80 <MX_USART1_UART_Init+0x4c>)
 8006a6c:	f001 ffd4 	bl	8008a18 <HAL_UART_Init>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006a76:	f7ff fead 	bl	80067d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006a7a:	bf00      	nop
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	200007bc 	.word	0x200007bc
 8006a84:	40011000 	.word	0x40011000

08006a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08a      	sub	sp, #40	; 0x28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a90:	f107 0314 	add.w	r3, r7, #20
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	605a      	str	r2, [r3, #4]
 8006a9a:	609a      	str	r2, [r3, #8]
 8006a9c:	60da      	str	r2, [r3, #12]
 8006a9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <HAL_UART_MspInit+0x84>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d12c      	bne.n	8006b04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006aaa:	2300      	movs	r3, #0
 8006aac:	613b      	str	r3, [r7, #16]
 8006aae:	4b18      	ldr	r3, [pc, #96]	; (8006b10 <HAL_UART_MspInit+0x88>)
 8006ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab2:	4a17      	ldr	r2, [pc, #92]	; (8006b10 <HAL_UART_MspInit+0x88>)
 8006ab4:	f043 0310 	orr.w	r3, r3, #16
 8006ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8006aba:	4b15      	ldr	r3, [pc, #84]	; (8006b10 <HAL_UART_MspInit+0x88>)
 8006abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006abe:	f003 0310 	and.w	r3, r3, #16
 8006ac2:	613b      	str	r3, [r7, #16]
 8006ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	4b11      	ldr	r3, [pc, #68]	; (8006b10 <HAL_UART_MspInit+0x88>)
 8006acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ace:	4a10      	ldr	r2, [pc, #64]	; (8006b10 <HAL_UART_MspInit+0x88>)
 8006ad0:	f043 0301 	orr.w	r3, r3, #1
 8006ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ad6:	4b0e      	ldr	r3, [pc, #56]	; (8006b10 <HAL_UART_MspInit+0x88>)
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006ae2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ae8:	2302      	movs	r3, #2
 8006aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aec:	2300      	movs	r3, #0
 8006aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006af0:	2303      	movs	r3, #3
 8006af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006af4:	2307      	movs	r3, #7
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006af8:	f107 0314 	add.w	r3, r7, #20
 8006afc:	4619      	mov	r1, r3
 8006afe:	4805      	ldr	r0, [pc, #20]	; (8006b14 <HAL_UART_MspInit+0x8c>)
 8006b00:	f000 f9b0 	bl	8006e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006b04:	bf00      	nop
 8006b06:	3728      	adds	r7, #40	; 0x28
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	40011000 	.word	0x40011000
 8006b10:	40023800 	.word	0x40023800
 8006b14:	40020000 	.word	0x40020000

08006b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006b1c:	480d      	ldr	r0, [pc, #52]	; (8006b54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006b1e:	490e      	ldr	r1, [pc, #56]	; (8006b58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006b20:	4a0e      	ldr	r2, [pc, #56]	; (8006b5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b24:	e002      	b.n	8006b2c <LoopCopyDataInit>

08006b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b2a:	3304      	adds	r3, #4

08006b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b30:	d3f9      	bcc.n	8006b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b32:	4a0b      	ldr	r2, [pc, #44]	; (8006b60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006b34:	4c0b      	ldr	r4, [pc, #44]	; (8006b64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b38:	e001      	b.n	8006b3e <LoopFillZerobss>

08006b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b3c:	3204      	adds	r2, #4

08006b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b40:	d3fb      	bcc.n	8006b3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006b42:	f7ff ff65 	bl	8006a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b46:	f002 f983 	bl	8008e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b4a:	f7ff fdc7 	bl	80066dc <main>
  bx  lr    
 8006b4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006b50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b58:	2000049c 	.word	0x2000049c
  ldr r2, =_sidata
 8006b5c:	0800c15c 	.word	0x0800c15c
  ldr r2, =_sbss
 8006b60:	2000049c 	.word	0x2000049c
  ldr r4, =_ebss
 8006b64:	20000814 	.word	0x20000814

08006b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b68:	e7fe      	b.n	8006b68 <ADC_IRQHandler>
	...

08006b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006b70:	4b0e      	ldr	r3, [pc, #56]	; (8006bac <HAL_Init+0x40>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a0d      	ldr	r2, [pc, #52]	; (8006bac <HAL_Init+0x40>)
 8006b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006b7c:	4b0b      	ldr	r3, [pc, #44]	; (8006bac <HAL_Init+0x40>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a0a      	ldr	r2, [pc, #40]	; (8006bac <HAL_Init+0x40>)
 8006b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006b88:	4b08      	ldr	r3, [pc, #32]	; (8006bac <HAL_Init+0x40>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a07      	ldr	r2, [pc, #28]	; (8006bac <HAL_Init+0x40>)
 8006b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b94:	2003      	movs	r0, #3
 8006b96:	f000 f931 	bl	8006dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	f000 f808 	bl	8006bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ba0:	f7ff fe1e 	bl	80067e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40023c00 	.word	0x40023c00

08006bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006bb8:	4b12      	ldr	r3, [pc, #72]	; (8006c04 <HAL_InitTick+0x54>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	4b12      	ldr	r3, [pc, #72]	; (8006c08 <HAL_InitTick+0x58>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 f93b 	bl	8006e4a <HAL_SYSTICK_Config>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e00e      	b.n	8006bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b0f      	cmp	r3, #15
 8006be2:	d80a      	bhi.n	8006bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006be4:	2200      	movs	r2, #0
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	f000 f911 	bl	8006e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006bf0:	4a06      	ldr	r2, [pc, #24]	; (8006c0c <HAL_InitTick+0x5c>)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e000      	b.n	8006bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	200002c0 	.word	0x200002c0
 8006c08:	200002c8 	.word	0x200002c8
 8006c0c:	200002c4 	.word	0x200002c4

08006c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c14:	4b06      	ldr	r3, [pc, #24]	; (8006c30 <HAL_IncTick+0x20>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <HAL_IncTick+0x24>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4413      	add	r3, r2
 8006c20:	4a04      	ldr	r2, [pc, #16]	; (8006c34 <HAL_IncTick+0x24>)
 8006c22:	6013      	str	r3, [r2, #0]
}
 8006c24:	bf00      	nop
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	200002c8 	.word	0x200002c8
 8006c34:	20000800 	.word	0x20000800

08006c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8006c3c:	4b03      	ldr	r3, [pc, #12]	; (8006c4c <HAL_GetTick+0x14>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	20000800 	.word	0x20000800

08006c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c58:	f7ff ffee 	bl	8006c38 <HAL_GetTick>
 8006c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c68:	d005      	beq.n	8006c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c6a:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <HAL_Delay+0x44>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006c76:	bf00      	nop
 8006c78:	f7ff ffde 	bl	8006c38 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d8f7      	bhi.n	8006c78 <HAL_Delay+0x28>
  {
  }
}
 8006c88:	bf00      	nop
 8006c8a:	bf00      	nop
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	200002c8 	.word	0x200002c8

08006c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ca8:	4b0c      	ldr	r3, [pc, #48]	; (8006cdc <__NVIC_SetPriorityGrouping+0x44>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006cca:	4a04      	ldr	r2, [pc, #16]	; (8006cdc <__NVIC_SetPriorityGrouping+0x44>)
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	60d3      	str	r3, [r2, #12]
}
 8006cd0:	bf00      	nop
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	e000ed00 	.word	0xe000ed00

08006ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ce4:	4b04      	ldr	r3, [pc, #16]	; (8006cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	0a1b      	lsrs	r3, r3, #8
 8006cea:	f003 0307 	and.w	r3, r3, #7
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	e000ed00 	.word	0xe000ed00

08006cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	4603      	mov	r3, r0
 8006d04:	6039      	str	r1, [r7, #0]
 8006d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	db0a      	blt.n	8006d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	490c      	ldr	r1, [pc, #48]	; (8006d48 <__NVIC_SetPriority+0x4c>)
 8006d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d1a:	0112      	lsls	r2, r2, #4
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	440b      	add	r3, r1
 8006d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d24:	e00a      	b.n	8006d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	4908      	ldr	r1, [pc, #32]	; (8006d4c <__NVIC_SetPriority+0x50>)
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	3b04      	subs	r3, #4
 8006d34:	0112      	lsls	r2, r2, #4
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	440b      	add	r3, r1
 8006d3a:	761a      	strb	r2, [r3, #24]
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	e000e100 	.word	0xe000e100
 8006d4c:	e000ed00 	.word	0xe000ed00

08006d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b089      	sub	sp, #36	; 0x24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	f1c3 0307 	rsb	r3, r3, #7
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	bf28      	it	cs
 8006d6e:	2304      	movcs	r3, #4
 8006d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	3304      	adds	r3, #4
 8006d76:	2b06      	cmp	r3, #6
 8006d78:	d902      	bls.n	8006d80 <NVIC_EncodePriority+0x30>
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	3b03      	subs	r3, #3
 8006d7e:	e000      	b.n	8006d82 <NVIC_EncodePriority+0x32>
 8006d80:	2300      	movs	r3, #0
 8006d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d84:	f04f 32ff 	mov.w	r2, #4294967295
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8e:	43da      	mvns	r2, r3
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	401a      	ands	r2, r3
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d98:	f04f 31ff 	mov.w	r1, #4294967295
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006da2:	43d9      	mvns	r1, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006da8:	4313      	orrs	r3, r2
         );
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3724      	adds	r7, #36	; 0x24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
	...

08006db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006dc8:	d301      	bcc.n	8006dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e00f      	b.n	8006dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006dce:	4a0a      	ldr	r2, [pc, #40]	; (8006df8 <SysTick_Config+0x40>)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006dd6:	210f      	movs	r1, #15
 8006dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ddc:	f7ff ff8e 	bl	8006cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006de0:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <SysTick_Config+0x40>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006de6:	4b04      	ldr	r3, [pc, #16]	; (8006df8 <SysTick_Config+0x40>)
 8006de8:	2207      	movs	r2, #7
 8006dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	e000e010 	.word	0xe000e010

08006dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff ff47 	bl	8006c98 <__NVIC_SetPriorityGrouping>
}
 8006e0a:	bf00      	nop
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b086      	sub	sp, #24
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	4603      	mov	r3, r0
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	607a      	str	r2, [r7, #4]
 8006e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006e24:	f7ff ff5c 	bl	8006ce0 <__NVIC_GetPriorityGrouping>
 8006e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	6978      	ldr	r0, [r7, #20]
 8006e30:	f7ff ff8e 	bl	8006d50 <NVIC_EncodePriority>
 8006e34:	4602      	mov	r2, r0
 8006e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff ff5d 	bl	8006cfc <__NVIC_SetPriority>
}
 8006e42:	bf00      	nop
 8006e44:	3718      	adds	r7, #24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b082      	sub	sp, #8
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff ffb0 	bl	8006db8 <SysTick_Config>
 8006e58:	4603      	mov	r3, r0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b089      	sub	sp, #36	; 0x24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	61fb      	str	r3, [r7, #28]
 8006e7e:	e16b      	b.n	8007158 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006e80:	2201      	movs	r2, #1
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	fa02 f303 	lsl.w	r3, r2, r3
 8006e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	4013      	ands	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	f040 815a 	bne.w	8007152 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d005      	beq.n	8006eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d130      	bne.n	8006f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	2203      	movs	r2, #3
 8006ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec6:	43db      	mvns	r3, r3
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	4013      	ands	r3, r2
 8006ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	68da      	ldr	r2, [r3, #12]
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006eec:	2201      	movs	r2, #1
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	091b      	lsrs	r3, r3, #4
 8006f02:	f003 0201 	and.w	r2, r3, #1
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f003 0303 	and.w	r3, r3, #3
 8006f20:	2b03      	cmp	r3, #3
 8006f22:	d017      	beq.n	8006f54 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	2203      	movs	r2, #3
 8006f30:	fa02 f303 	lsl.w	r3, r2, r3
 8006f34:	43db      	mvns	r3, r3
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	4013      	ands	r3, r2
 8006f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	fa02 f303 	lsl.w	r3, r2, r3
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f003 0303 	and.w	r3, r3, #3
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d123      	bne.n	8006fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	08da      	lsrs	r2, r3, #3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	3208      	adds	r2, #8
 8006f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	220f      	movs	r2, #15
 8006f78:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	4013      	ands	r3, r2
 8006f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	691a      	ldr	r2, [r3, #16]
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	f003 0307 	and.w	r3, r3, #7
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	fa02 f303 	lsl.w	r3, r2, r3
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	08da      	lsrs	r2, r3, #3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3208      	adds	r2, #8
 8006fa2:	69b9      	ldr	r1, [r7, #24]
 8006fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	2203      	movs	r2, #3
 8006fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb8:	43db      	mvns	r3, r3
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f003 0203 	and.w	r2, r3, #3
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 80b4 	beq.w	8007152 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	4b60      	ldr	r3, [pc, #384]	; (8007170 <HAL_GPIO_Init+0x30c>)
 8006ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff2:	4a5f      	ldr	r2, [pc, #380]	; (8007170 <HAL_GPIO_Init+0x30c>)
 8006ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8006ffa:	4b5d      	ldr	r3, [pc, #372]	; (8007170 <HAL_GPIO_Init+0x30c>)
 8006ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007006:	4a5b      	ldr	r2, [pc, #364]	; (8007174 <HAL_GPIO_Init+0x310>)
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	089b      	lsrs	r3, r3, #2
 800700c:	3302      	adds	r3, #2
 800700e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	220f      	movs	r2, #15
 800701e:	fa02 f303 	lsl.w	r3, r2, r3
 8007022:	43db      	mvns	r3, r3
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	4013      	ands	r3, r2
 8007028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a52      	ldr	r2, [pc, #328]	; (8007178 <HAL_GPIO_Init+0x314>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d02b      	beq.n	800708a <HAL_GPIO_Init+0x226>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a51      	ldr	r2, [pc, #324]	; (800717c <HAL_GPIO_Init+0x318>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d025      	beq.n	8007086 <HAL_GPIO_Init+0x222>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a50      	ldr	r2, [pc, #320]	; (8007180 <HAL_GPIO_Init+0x31c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d01f      	beq.n	8007082 <HAL_GPIO_Init+0x21e>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a4f      	ldr	r2, [pc, #316]	; (8007184 <HAL_GPIO_Init+0x320>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d019      	beq.n	800707e <HAL_GPIO_Init+0x21a>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a4e      	ldr	r2, [pc, #312]	; (8007188 <HAL_GPIO_Init+0x324>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d013      	beq.n	800707a <HAL_GPIO_Init+0x216>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a4d      	ldr	r2, [pc, #308]	; (800718c <HAL_GPIO_Init+0x328>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d00d      	beq.n	8007076 <HAL_GPIO_Init+0x212>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a4c      	ldr	r2, [pc, #304]	; (8007190 <HAL_GPIO_Init+0x32c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d007      	beq.n	8007072 <HAL_GPIO_Init+0x20e>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a4b      	ldr	r2, [pc, #300]	; (8007194 <HAL_GPIO_Init+0x330>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d101      	bne.n	800706e <HAL_GPIO_Init+0x20a>
 800706a:	2307      	movs	r3, #7
 800706c:	e00e      	b.n	800708c <HAL_GPIO_Init+0x228>
 800706e:	2308      	movs	r3, #8
 8007070:	e00c      	b.n	800708c <HAL_GPIO_Init+0x228>
 8007072:	2306      	movs	r3, #6
 8007074:	e00a      	b.n	800708c <HAL_GPIO_Init+0x228>
 8007076:	2305      	movs	r3, #5
 8007078:	e008      	b.n	800708c <HAL_GPIO_Init+0x228>
 800707a:	2304      	movs	r3, #4
 800707c:	e006      	b.n	800708c <HAL_GPIO_Init+0x228>
 800707e:	2303      	movs	r3, #3
 8007080:	e004      	b.n	800708c <HAL_GPIO_Init+0x228>
 8007082:	2302      	movs	r3, #2
 8007084:	e002      	b.n	800708c <HAL_GPIO_Init+0x228>
 8007086:	2301      	movs	r3, #1
 8007088:	e000      	b.n	800708c <HAL_GPIO_Init+0x228>
 800708a:	2300      	movs	r3, #0
 800708c:	69fa      	ldr	r2, [r7, #28]
 800708e:	f002 0203 	and.w	r2, r2, #3
 8007092:	0092      	lsls	r2, r2, #2
 8007094:	4093      	lsls	r3, r2
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	4313      	orrs	r3, r2
 800709a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800709c:	4935      	ldr	r1, [pc, #212]	; (8007174 <HAL_GPIO_Init+0x310>)
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	089b      	lsrs	r3, r3, #2
 80070a2:	3302      	adds	r3, #2
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80070aa:	4b3b      	ldr	r3, [pc, #236]	; (8007198 <HAL_GPIO_Init+0x334>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	43db      	mvns	r3, r3
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	4013      	ands	r3, r2
 80070b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070ce:	4a32      	ldr	r2, [pc, #200]	; (8007198 <HAL_GPIO_Init+0x334>)
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80070d4:	4b30      	ldr	r3, [pc, #192]	; (8007198 <HAL_GPIO_Init+0x334>)
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	43db      	mvns	r3, r3
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	4013      	ands	r3, r2
 80070e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070f8:	4a27      	ldr	r2, [pc, #156]	; (8007198 <HAL_GPIO_Init+0x334>)
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070fe:	4b26      	ldr	r3, [pc, #152]	; (8007198 <HAL_GPIO_Init+0x334>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	43db      	mvns	r3, r3
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	4013      	ands	r3, r2
 800710c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	4313      	orrs	r3, r2
 8007120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007122:	4a1d      	ldr	r2, [pc, #116]	; (8007198 <HAL_GPIO_Init+0x334>)
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007128:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <HAL_GPIO_Init+0x334>)
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	43db      	mvns	r3, r3
 8007132:	69ba      	ldr	r2, [r7, #24]
 8007134:	4013      	ands	r3, r2
 8007136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	4313      	orrs	r3, r2
 800714a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800714c:	4a12      	ldr	r2, [pc, #72]	; (8007198 <HAL_GPIO_Init+0x334>)
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	3301      	adds	r3, #1
 8007156:	61fb      	str	r3, [r7, #28]
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	2b0f      	cmp	r3, #15
 800715c:	f67f ae90 	bls.w	8006e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007160:	bf00      	nop
 8007162:	bf00      	nop
 8007164:	3724      	adds	r7, #36	; 0x24
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	40023800 	.word	0x40023800
 8007174:	40013800 	.word	0x40013800
 8007178:	40020000 	.word	0x40020000
 800717c:	40020400 	.word	0x40020400
 8007180:	40020800 	.word	0x40020800
 8007184:	40020c00 	.word	0x40020c00
 8007188:	40021000 	.word	0x40021000
 800718c:	40021400 	.word	0x40021400
 8007190:	40021800 	.word	0x40021800
 8007194:	40021c00 	.word	0x40021c00
 8007198:	40013c00 	.word	0x40013c00

0800719c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	807b      	strh	r3, [r7, #2]
 80071a8:	4613      	mov	r3, r2
 80071aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071ac:	787b      	ldrb	r3, [r7, #1]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071b2:	887a      	ldrh	r2, [r7, #2]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80071b8:	e003      	b.n	80071c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80071ba:	887b      	ldrh	r3, [r7, #2]
 80071bc:	041a      	lsls	r2, r3, #16
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	619a      	str	r2, [r3, #24]
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
	...

080071d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e12b      	b.n	800743a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d106      	bne.n	80071fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7ff fa28 	bl	800664c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2224      	movs	r2, #36	; 0x24
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0201 	bic.w	r2, r2, #1
 8007212:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007222:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007232:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007234:	f001 fbc8 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 8007238:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	4a81      	ldr	r2, [pc, #516]	; (8007444 <HAL_I2C_Init+0x274>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d807      	bhi.n	8007254 <HAL_I2C_Init+0x84>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4a80      	ldr	r2, [pc, #512]	; (8007448 <HAL_I2C_Init+0x278>)
 8007248:	4293      	cmp	r3, r2
 800724a:	bf94      	ite	ls
 800724c:	2301      	movls	r3, #1
 800724e:	2300      	movhi	r3, #0
 8007250:	b2db      	uxtb	r3, r3
 8007252:	e006      	b.n	8007262 <HAL_I2C_Init+0x92>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4a7d      	ldr	r2, [pc, #500]	; (800744c <HAL_I2C_Init+0x27c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	bf94      	ite	ls
 800725c:	2301      	movls	r3, #1
 800725e:	2300      	movhi	r3, #0
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e0e7      	b.n	800743a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4a78      	ldr	r2, [pc, #480]	; (8007450 <HAL_I2C_Init+0x280>)
 800726e:	fba2 2303 	umull	r2, r3, r2, r3
 8007272:	0c9b      	lsrs	r3, r3, #18
 8007274:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	430a      	orrs	r2, r1
 8007288:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	4a6a      	ldr	r2, [pc, #424]	; (8007444 <HAL_I2C_Init+0x274>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d802      	bhi.n	80072a4 <HAL_I2C_Init+0xd4>
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	3301      	adds	r3, #1
 80072a2:	e009      	b.n	80072b8 <HAL_I2C_Init+0xe8>
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80072aa:	fb02 f303 	mul.w	r3, r2, r3
 80072ae:	4a69      	ldr	r2, [pc, #420]	; (8007454 <HAL_I2C_Init+0x284>)
 80072b0:	fba2 2303 	umull	r2, r3, r2, r3
 80072b4:	099b      	lsrs	r3, r3, #6
 80072b6:	3301      	adds	r3, #1
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	430b      	orrs	r3, r1
 80072be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80072ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	495c      	ldr	r1, [pc, #368]	; (8007444 <HAL_I2C_Init+0x274>)
 80072d4:	428b      	cmp	r3, r1
 80072d6:	d819      	bhi.n	800730c <HAL_I2C_Init+0x13c>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	1e59      	subs	r1, r3, #1
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80072e6:	1c59      	adds	r1, r3, #1
 80072e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80072ec:	400b      	ands	r3, r1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00a      	beq.n	8007308 <HAL_I2C_Init+0x138>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	1e59      	subs	r1, r3, #1
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8007300:	3301      	adds	r3, #1
 8007302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007306:	e051      	b.n	80073ac <HAL_I2C_Init+0x1dc>
 8007308:	2304      	movs	r3, #4
 800730a:	e04f      	b.n	80073ac <HAL_I2C_Init+0x1dc>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d111      	bne.n	8007338 <HAL_I2C_Init+0x168>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	1e58      	subs	r0, r3, #1
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6859      	ldr	r1, [r3, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	005b      	lsls	r3, r3, #1
 8007320:	440b      	add	r3, r1
 8007322:	fbb0 f3f3 	udiv	r3, r0, r3
 8007326:	3301      	adds	r3, #1
 8007328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800732c:	2b00      	cmp	r3, #0
 800732e:	bf0c      	ite	eq
 8007330:	2301      	moveq	r3, #1
 8007332:	2300      	movne	r3, #0
 8007334:	b2db      	uxtb	r3, r3
 8007336:	e012      	b.n	800735e <HAL_I2C_Init+0x18e>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	1e58      	subs	r0, r3, #1
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6859      	ldr	r1, [r3, #4]
 8007340:	460b      	mov	r3, r1
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	440b      	add	r3, r1
 8007346:	0099      	lsls	r1, r3, #2
 8007348:	440b      	add	r3, r1
 800734a:	fbb0 f3f3 	udiv	r3, r0, r3
 800734e:	3301      	adds	r3, #1
 8007350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007354:	2b00      	cmp	r3, #0
 8007356:	bf0c      	ite	eq
 8007358:	2301      	moveq	r3, #1
 800735a:	2300      	movne	r3, #0
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <HAL_I2C_Init+0x196>
 8007362:	2301      	movs	r3, #1
 8007364:	e022      	b.n	80073ac <HAL_I2C_Init+0x1dc>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10e      	bne.n	800738c <HAL_I2C_Init+0x1bc>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	1e58      	subs	r0, r3, #1
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6859      	ldr	r1, [r3, #4]
 8007376:	460b      	mov	r3, r1
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	440b      	add	r3, r1
 800737c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007380:	3301      	adds	r3, #1
 8007382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800738a:	e00f      	b.n	80073ac <HAL_I2C_Init+0x1dc>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	1e58      	subs	r0, r3, #1
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6859      	ldr	r1, [r3, #4]
 8007394:	460b      	mov	r3, r1
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	440b      	add	r3, r1
 800739a:	0099      	lsls	r1, r3, #2
 800739c:	440b      	add	r3, r1
 800739e:	fbb0 f3f3 	udiv	r3, r0, r3
 80073a2:	3301      	adds	r3, #1
 80073a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	6809      	ldr	r1, [r1, #0]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	69da      	ldr	r2, [r3, #28]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	431a      	orrs	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80073da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	6911      	ldr	r1, [r2, #16]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	68d2      	ldr	r2, [r2, #12]
 80073e6:	4311      	orrs	r1, r2
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	6812      	ldr	r2, [r2, #0]
 80073ec:	430b      	orrs	r3, r1
 80073ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	695a      	ldr	r2, [r3, #20]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0201 	orr.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2220      	movs	r2, #32
 8007426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	000186a0 	.word	0x000186a0
 8007448:	001e847f 	.word	0x001e847f
 800744c:	003d08ff 	.word	0x003d08ff
 8007450:	431bde83 	.word	0x431bde83
 8007454:	10624dd3 	.word	0x10624dd3

08007458 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b088      	sub	sp, #32
 800745c:	af02      	add	r7, sp, #8
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	461a      	mov	r2, r3
 8007464:	460b      	mov	r3, r1
 8007466:	817b      	strh	r3, [r7, #10]
 8007468:	4613      	mov	r3, r2
 800746a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800746c:	f7ff fbe4 	bl	8006c38 <HAL_GetTick>
 8007470:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b20      	cmp	r3, #32
 800747c:	f040 80e0 	bne.w	8007640 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	2319      	movs	r3, #25
 8007486:	2201      	movs	r2, #1
 8007488:	4970      	ldr	r1, [pc, #448]	; (800764c <HAL_I2C_Master_Transmit+0x1f4>)
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 fc72 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007496:	2302      	movs	r3, #2
 8007498:	e0d3      	b.n	8007642 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_I2C_Master_Transmit+0x50>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e0cc      	b.n	8007642 <HAL_I2C_Master_Transmit+0x1ea>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d007      	beq.n	80074ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f042 0201 	orr.w	r2, r2, #1
 80074cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2221      	movs	r2, #33	; 0x21
 80074e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2210      	movs	r2, #16
 80074ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	893a      	ldrh	r2, [r7, #8]
 80074fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007504:	b29a      	uxth	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	4a50      	ldr	r2, [pc, #320]	; (8007650 <HAL_I2C_Master_Transmit+0x1f8>)
 800750e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007510:	8979      	ldrh	r1, [r7, #10]
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	6a3a      	ldr	r2, [r7, #32]
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 fac2 	bl	8007aa0 <I2C_MasterRequestWrite>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e08d      	b.n	8007642 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007526:	2300      	movs	r3, #0
 8007528:	613b      	str	r3, [r7, #16]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	613b      	str	r3, [r7, #16]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	613b      	str	r3, [r7, #16]
 800753a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800753c:	e066      	b.n	800760c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	6a39      	ldr	r1, [r7, #32]
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 fcec 	bl	8007f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00d      	beq.n	800756a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	2b04      	cmp	r3, #4
 8007554:	d107      	bne.n	8007566 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007564:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e06b      	b.n	8007642 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	781a      	ldrb	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007584:	b29b      	uxth	r3, r3
 8007586:	3b01      	subs	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007592:	3b01      	subs	r3, #1
 8007594:	b29a      	uxth	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	f003 0304 	and.w	r3, r3, #4
 80075a4:	2b04      	cmp	r3, #4
 80075a6:	d11b      	bne.n	80075e0 <HAL_I2C_Master_Transmit+0x188>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d017      	beq.n	80075e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	781a      	ldrb	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	6a39      	ldr	r1, [r7, #32]
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 fcdc 	bl	8007fa2 <I2C_WaitOnBTFFlagUntilTimeout>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00d      	beq.n	800760c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	d107      	bne.n	8007608 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007606:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e01a      	b.n	8007642 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007610:	2b00      	cmp	r3, #0
 8007612:	d194      	bne.n	800753e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2220      	movs	r2, #32
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	e000      	b.n	8007642 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007640:	2302      	movs	r3, #2
  }
}
 8007642:	4618      	mov	r0, r3
 8007644:	3718      	adds	r7, #24
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	00100002 	.word	0x00100002
 8007650:	ffff0000 	.word	0xffff0000

08007654 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b08c      	sub	sp, #48	; 0x30
 8007658:	af02      	add	r7, sp, #8
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	4608      	mov	r0, r1
 800765e:	4611      	mov	r1, r2
 8007660:	461a      	mov	r2, r3
 8007662:	4603      	mov	r3, r0
 8007664:	817b      	strh	r3, [r7, #10]
 8007666:	460b      	mov	r3, r1
 8007668:	813b      	strh	r3, [r7, #8]
 800766a:	4613      	mov	r3, r2
 800766c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800766e:	f7ff fae3 	bl	8006c38 <HAL_GetTick>
 8007672:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b20      	cmp	r3, #32
 800767e:	f040 8208 	bne.w	8007a92 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	2319      	movs	r3, #25
 8007688:	2201      	movs	r2, #1
 800768a:	497b      	ldr	r1, [pc, #492]	; (8007878 <HAL_I2C_Mem_Read+0x224>)
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fb71 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007698:	2302      	movs	r3, #2
 800769a:	e1fb      	b.n	8007a94 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d101      	bne.n	80076aa <HAL_I2C_Mem_Read+0x56>
 80076a6:	2302      	movs	r3, #2
 80076a8:	e1f4      	b.n	8007a94 <HAL_I2C_Mem_Read+0x440>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d007      	beq.n	80076d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 0201 	orr.w	r2, r2, #1
 80076ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2222      	movs	r2, #34	; 0x22
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2240      	movs	r2, #64	; 0x40
 80076ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007700:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007706:	b29a      	uxth	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4a5b      	ldr	r2, [pc, #364]	; (800787c <HAL_I2C_Mem_Read+0x228>)
 8007710:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007712:	88f8      	ldrh	r0, [r7, #6]
 8007714:	893a      	ldrh	r2, [r7, #8]
 8007716:	8979      	ldrh	r1, [r7, #10]
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	9301      	str	r3, [sp, #4]
 800771c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	4603      	mov	r3, r0
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 fa3e 	bl	8007ba4 <I2C_RequestMemoryRead>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e1b0      	b.n	8007a94 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007736:	2b00      	cmp	r3, #0
 8007738:	d113      	bne.n	8007762 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800773a:	2300      	movs	r3, #0
 800773c:	623b      	str	r3, [r7, #32]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	623b      	str	r3, [r7, #32]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	623b      	str	r3, [r7, #32]
 800774e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	e184      	b.n	8007a6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007766:	2b01      	cmp	r3, #1
 8007768:	d11b      	bne.n	80077a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007778:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800777a:	2300      	movs	r3, #0
 800777c:	61fb      	str	r3, [r7, #28]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	61fb      	str	r3, [r7, #28]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	61fb      	str	r3, [r7, #28]
 800778e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	e164      	b.n	8007a6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d11b      	bne.n	80077e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077ca:	2300      	movs	r3, #0
 80077cc:	61bb      	str	r3, [r7, #24]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	61bb      	str	r3, [r7, #24]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	61bb      	str	r3, [r7, #24]
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	e144      	b.n	8007a6c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077e2:	2300      	movs	r3, #0
 80077e4:	617b      	str	r3, [r7, #20]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	617b      	str	r3, [r7, #20]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	617b      	str	r3, [r7, #20]
 80077f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80077f8:	e138      	b.n	8007a6c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077fe:	2b03      	cmp	r3, #3
 8007800:	f200 80f1 	bhi.w	80079e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007808:	2b01      	cmp	r3, #1
 800780a:	d123      	bne.n	8007854 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800780c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 fc07 	bl	8008024 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e139      	b.n	8007a94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	691a      	ldr	r2, [r3, #16]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	b2d2      	uxtb	r2, r2
 800782c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800783c:	3b01      	subs	r3, #1
 800783e:	b29a      	uxth	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007848:	b29b      	uxth	r3, r3
 800784a:	3b01      	subs	r3, #1
 800784c:	b29a      	uxth	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007852:	e10b      	b.n	8007a6c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007858:	2b02      	cmp	r3, #2
 800785a:	d14e      	bne.n	80078fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007862:	2200      	movs	r2, #0
 8007864:	4906      	ldr	r1, [pc, #24]	; (8007880 <HAL_I2C_Mem_Read+0x22c>)
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 fa84 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d008      	beq.n	8007884 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e10e      	b.n	8007a94 <HAL_I2C_Mem_Read+0x440>
 8007876:	bf00      	nop
 8007878:	00100002 	.word	0x00100002
 800787c:	ffff0000 	.word	0xffff0000
 8007880:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007892:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	691a      	ldr	r2, [r3, #16]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078b0:	3b01      	subs	r3, #1
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078bc:	b29b      	uxth	r3, r3
 80078be:	3b01      	subs	r3, #1
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	691a      	ldr	r2, [r3, #16]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d0:	b2d2      	uxtb	r2, r2
 80078d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	1c5a      	adds	r2, r3, #1
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e2:	3b01      	subs	r3, #1
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	3b01      	subs	r3, #1
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078f8:	e0b8      	b.n	8007a6c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007900:	2200      	movs	r2, #0
 8007902:	4966      	ldr	r1, [pc, #408]	; (8007a9c <HAL_I2C_Mem_Read+0x448>)
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 fa35 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e0bf      	b.n	8007a94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	691a      	ldr	r2, [r3, #16]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	b2d2      	uxtb	r2, r2
 8007930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	1c5a      	adds	r2, r3, #1
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795c:	2200      	movs	r2, #0
 800795e:	494f      	ldr	r1, [pc, #316]	; (8007a9c <HAL_I2C_Mem_Read+0x448>)
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 fa07 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e091      	b.n	8007a94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800797e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	691a      	ldr	r2, [r3, #16]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	b2d2      	uxtb	r2, r2
 800798c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800799c:	3b01      	subs	r3, #1
 800799e:	b29a      	uxth	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	b2d2      	uxtb	r2, r2
 80079be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ce:	3b01      	subs	r3, #1
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079da:	b29b      	uxth	r3, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	b29a      	uxth	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079e4:	e042      	b.n	8007a6c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 fb1a 	bl	8008024 <I2C_WaitOnRXNEFlagUntilTimeout>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e04c      	b.n	8007a94 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	691a      	ldr	r2, [r3, #16]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a04:	b2d2      	uxtb	r2, r2
 8007a06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a16:	3b01      	subs	r3, #1
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	3b01      	subs	r3, #1
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	f003 0304 	and.w	r3, r3, #4
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d118      	bne.n	8007a6c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	691a      	ldr	r2, [r3, #16]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	b2d2      	uxtb	r2, r2
 8007a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a56:	3b01      	subs	r3, #1
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	3b01      	subs	r3, #1
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f47f aec2 	bne.w	80077fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2220      	movs	r2, #32
 8007a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	e000      	b.n	8007a94 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007a92:	2302      	movs	r3, #2
  }
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3728      	adds	r7, #40	; 0x28
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	00010004 	.word	0x00010004

08007aa0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b088      	sub	sp, #32
 8007aa4:	af02      	add	r7, sp, #8
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	607a      	str	r2, [r7, #4]
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	460b      	mov	r3, r1
 8007aae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d006      	beq.n	8007aca <I2C_MasterRequestWrite+0x2a>
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d003      	beq.n	8007aca <I2C_MasterRequestWrite+0x2a>
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ac8:	d108      	bne.n	8007adc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	e00b      	b.n	8007af4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae0:	2b12      	cmp	r3, #18
 8007ae2:	d107      	bne.n	8007af4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007af2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 f937 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00d      	beq.n	8007b28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b1a:	d103      	bne.n	8007b24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e035      	b.n	8007b94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b30:	d108      	bne.n	8007b44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b32:	897b      	ldrh	r3, [r7, #10]
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	461a      	mov	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b40:	611a      	str	r2, [r3, #16]
 8007b42:	e01b      	b.n	8007b7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007b44:	897b      	ldrh	r3, [r7, #10]
 8007b46:	11db      	asrs	r3, r3, #7
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	f003 0306 	and.w	r3, r3, #6
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	f063 030f 	orn	r3, r3, #15
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	490e      	ldr	r1, [pc, #56]	; (8007b9c <I2C_MasterRequestWrite+0xfc>)
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f95d 	bl	8007e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e010      	b.n	8007b94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007b72:	897b      	ldrh	r3, [r7, #10]
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	4907      	ldr	r1, [pc, #28]	; (8007ba0 <I2C_MasterRequestWrite+0x100>)
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 f94d 	bl	8007e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e000      	b.n	8007b94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3718      	adds	r7, #24
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	00010008 	.word	0x00010008
 8007ba0:	00010002 	.word	0x00010002

08007ba4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b088      	sub	sp, #32
 8007ba8:	af02      	add	r7, sp, #8
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	4608      	mov	r0, r1
 8007bae:	4611      	mov	r1, r2
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	817b      	strh	r3, [r7, #10]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	813b      	strh	r3, [r7, #8]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007bcc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 f8c2 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00d      	beq.n	8007c12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c04:	d103      	bne.n	8007c0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e0aa      	b.n	8007d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c12:	897b      	ldrh	r3, [r7, #10]
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	461a      	mov	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	6a3a      	ldr	r2, [r7, #32]
 8007c26:	4952      	ldr	r1, [pc, #328]	; (8007d70 <I2C_RequestMemoryRead+0x1cc>)
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 f8fa 	bl	8007e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e097      	b.n	8007d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c38:	2300      	movs	r3, #0
 8007c3a:	617b      	str	r3, [r7, #20]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	617b      	str	r3, [r7, #20]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c50:	6a39      	ldr	r1, [r7, #32]
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 f964 	bl	8007f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00d      	beq.n	8007c7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	d107      	bne.n	8007c76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e076      	b.n	8007d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c7a:	88fb      	ldrh	r3, [r7, #6]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d105      	bne.n	8007c8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c80:	893b      	ldrh	r3, [r7, #8]
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	611a      	str	r2, [r3, #16]
 8007c8a:	e021      	b.n	8007cd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c8c:	893b      	ldrh	r3, [r7, #8]
 8007c8e:	0a1b      	lsrs	r3, r3, #8
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c9c:	6a39      	ldr	r1, [r7, #32]
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 f93e 	bl	8007f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00d      	beq.n	8007cc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d107      	bne.n	8007cc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e050      	b.n	8007d68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007cc6:	893b      	ldrh	r3, [r7, #8]
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd2:	6a39      	ldr	r1, [r7, #32]
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 f923 	bl	8007f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00d      	beq.n	8007cfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce4:	2b04      	cmp	r3, #4
 8007ce6:	d107      	bne.n	8007cf8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cf6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e035      	b.n	8007d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 f82b 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00d      	beq.n	8007d40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d32:	d103      	bne.n	8007d3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e013      	b.n	8007d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007d40:	897b      	ldrh	r3, [r7, #10]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f043 0301 	orr.w	r3, r3, #1
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	6a3a      	ldr	r2, [r7, #32]
 8007d54:	4906      	ldr	r1, [pc, #24]	; (8007d70 <I2C_RequestMemoryRead+0x1cc>)
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 f863 	bl	8007e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e000      	b.n	8007d68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	00010002 	.word	0x00010002

08007d74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	603b      	str	r3, [r7, #0]
 8007d80:	4613      	mov	r3, r2
 8007d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d84:	e025      	b.n	8007dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8c:	d021      	beq.n	8007dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d8e:	f7fe ff53 	bl	8006c38 <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d302      	bcc.n	8007da4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d116      	bne.n	8007dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2220      	movs	r2, #32
 8007dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbe:	f043 0220 	orr.w	r2, r3, #32
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e023      	b.n	8007e1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	0c1b      	lsrs	r3, r3, #16
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d10d      	bne.n	8007df8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	43da      	mvns	r2, r3
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	4013      	ands	r3, r2
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bf0c      	ite	eq
 8007dee:	2301      	moveq	r3, #1
 8007df0:	2300      	movne	r3, #0
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	461a      	mov	r2, r3
 8007df6:	e00c      	b.n	8007e12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	43da      	mvns	r2, r3
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	4013      	ands	r3, r2
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	bf0c      	ite	eq
 8007e0a:	2301      	moveq	r3, #1
 8007e0c:	2300      	movne	r3, #0
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	461a      	mov	r2, r3
 8007e12:	79fb      	ldrb	r3, [r7, #7]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d0b6      	beq.n	8007d86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	60f8      	str	r0, [r7, #12]
 8007e2a:	60b9      	str	r1, [r7, #8]
 8007e2c:	607a      	str	r2, [r7, #4]
 8007e2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007e30:	e051      	b.n	8007ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e40:	d123      	bne.n	8007e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2220      	movs	r2, #32
 8007e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e76:	f043 0204 	orr.w	r2, r3, #4
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e046      	b.n	8007f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e90:	d021      	beq.n	8007ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e92:	f7fe fed1 	bl	8006c38 <HAL_GetTick>
 8007e96:	4602      	mov	r2, r0
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d302      	bcc.n	8007ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d116      	bne.n	8007ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2220      	movs	r2, #32
 8007eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	f043 0220 	orr.w	r2, r3, #32
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e020      	b.n	8007f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	0c1b      	lsrs	r3, r3, #16
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d10c      	bne.n	8007efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	43da      	mvns	r2, r3
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	4013      	ands	r3, r2
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	bf14      	ite	ne
 8007ef2:	2301      	movne	r3, #1
 8007ef4:	2300      	moveq	r3, #0
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	e00b      	b.n	8007f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	43da      	mvns	r2, r3
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	4013      	ands	r3, r2
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bf14      	ite	ne
 8007f0c:	2301      	movne	r3, #1
 8007f0e:	2300      	moveq	r3, #0
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d18d      	bne.n	8007e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f2c:	e02d      	b.n	8007f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f000 f8ce 	bl	80080d0 <I2C_IsAcknowledgeFailed>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e02d      	b.n	8007f9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f44:	d021      	beq.n	8007f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f46:	f7fe fe77 	bl	8006c38 <HAL_GetTick>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d302      	bcc.n	8007f5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d116      	bne.n	8007f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2220      	movs	r2, #32
 8007f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f76:	f043 0220 	orr.w	r2, r3, #32
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e007      	b.n	8007f9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f94:	2b80      	cmp	r3, #128	; 0x80
 8007f96:	d1ca      	bne.n	8007f2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	60f8      	str	r0, [r7, #12]
 8007faa:	60b9      	str	r1, [r7, #8]
 8007fac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007fae:	e02d      	b.n	800800c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f000 f88d 	bl	80080d0 <I2C_IsAcknowledgeFailed>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e02d      	b.n	800801c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc6:	d021      	beq.n	800800c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fc8:	f7fe fe36 	bl	8006c38 <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d302      	bcc.n	8007fde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d116      	bne.n	800800c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff8:	f043 0220 	orr.w	r2, r3, #32
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e007      	b.n	800801c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	f003 0304 	and.w	r3, r3, #4
 8008016:	2b04      	cmp	r3, #4
 8008018:	d1ca      	bne.n	8007fb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008030:	e042      	b.n	80080b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	f003 0310 	and.w	r3, r3, #16
 800803c:	2b10      	cmp	r3, #16
 800803e:	d119      	bne.n	8008074 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f06f 0210 	mvn.w	r2, #16
 8008048:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2220      	movs	r2, #32
 8008054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e029      	b.n	80080c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008074:	f7fe fde0 	bl	8006c38 <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	429a      	cmp	r2, r3
 8008082:	d302      	bcc.n	800808a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d116      	bne.n	80080b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2220      	movs	r2, #32
 8008094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a4:	f043 0220 	orr.w	r2, r3, #32
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e007      	b.n	80080c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c2:	2b40      	cmp	r3, #64	; 0x40
 80080c4:	d1b5      	bne.n	8008032 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080e6:	d11b      	bne.n	8008120 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80080f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2220      	movs	r2, #32
 80080fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810c:	f043 0204 	orr.w	r2, r3, #4
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e000      	b.n	8008122 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
	...

08008130 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e264      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d075      	beq.n	800823a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800814e:	4ba3      	ldr	r3, [pc, #652]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f003 030c 	and.w	r3, r3, #12
 8008156:	2b04      	cmp	r3, #4
 8008158:	d00c      	beq.n	8008174 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800815a:	4ba0      	ldr	r3, [pc, #640]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008162:	2b08      	cmp	r3, #8
 8008164:	d112      	bne.n	800818c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008166:	4b9d      	ldr	r3, [pc, #628]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800816e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008172:	d10b      	bne.n	800818c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008174:	4b99      	ldr	r3, [pc, #612]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d05b      	beq.n	8008238 <HAL_RCC_OscConfig+0x108>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d157      	bne.n	8008238 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e23f      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008194:	d106      	bne.n	80081a4 <HAL_RCC_OscConfig+0x74>
 8008196:	4b91      	ldr	r3, [pc, #580]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a90      	ldr	r2, [pc, #576]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 800819c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081a0:	6013      	str	r3, [r2, #0]
 80081a2:	e01d      	b.n	80081e0 <HAL_RCC_OscConfig+0xb0>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081ac:	d10c      	bne.n	80081c8 <HAL_RCC_OscConfig+0x98>
 80081ae:	4b8b      	ldr	r3, [pc, #556]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a8a      	ldr	r2, [pc, #552]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80081b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	4b88      	ldr	r3, [pc, #544]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a87      	ldr	r2, [pc, #540]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80081c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	e00b      	b.n	80081e0 <HAL_RCC_OscConfig+0xb0>
 80081c8:	4b84      	ldr	r3, [pc, #528]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a83      	ldr	r2, [pc, #524]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80081ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081d2:	6013      	str	r3, [r2, #0]
 80081d4:	4b81      	ldr	r3, [pc, #516]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a80      	ldr	r2, [pc, #512]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80081da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d013      	beq.n	8008210 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081e8:	f7fe fd26 	bl	8006c38 <HAL_GetTick>
 80081ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081ee:	e008      	b.n	8008202 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081f0:	f7fe fd22 	bl	8006c38 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b64      	cmp	r3, #100	; 0x64
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e204      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008202:	4b76      	ldr	r3, [pc, #472]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0f0      	beq.n	80081f0 <HAL_RCC_OscConfig+0xc0>
 800820e:	e014      	b.n	800823a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008210:	f7fe fd12 	bl	8006c38 <HAL_GetTick>
 8008214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008216:	e008      	b.n	800822a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008218:	f7fe fd0e 	bl	8006c38 <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	2b64      	cmp	r3, #100	; 0x64
 8008224:	d901      	bls.n	800822a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e1f0      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800822a:	4b6c      	ldr	r3, [pc, #432]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1f0      	bne.n	8008218 <HAL_RCC_OscConfig+0xe8>
 8008236:	e000      	b.n	800823a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0302 	and.w	r3, r3, #2
 8008242:	2b00      	cmp	r3, #0
 8008244:	d063      	beq.n	800830e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008246:	4b65      	ldr	r3, [pc, #404]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f003 030c 	and.w	r3, r3, #12
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00b      	beq.n	800826a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008252:	4b62      	ldr	r3, [pc, #392]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800825a:	2b08      	cmp	r3, #8
 800825c:	d11c      	bne.n	8008298 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800825e:	4b5f      	ldr	r3, [pc, #380]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d116      	bne.n	8008298 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800826a:	4b5c      	ldr	r3, [pc, #368]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0302 	and.w	r3, r3, #2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d005      	beq.n	8008282 <HAL_RCC_OscConfig+0x152>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d001      	beq.n	8008282 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e1c4      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008282:	4b56      	ldr	r3, [pc, #344]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	00db      	lsls	r3, r3, #3
 8008290:	4952      	ldr	r1, [pc, #328]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008292:	4313      	orrs	r3, r2
 8008294:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008296:	e03a      	b.n	800830e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d020      	beq.n	80082e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082a0:	4b4f      	ldr	r3, [pc, #316]	; (80083e0 <HAL_RCC_OscConfig+0x2b0>)
 80082a2:	2201      	movs	r2, #1
 80082a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a6:	f7fe fcc7 	bl	8006c38 <HAL_GetTick>
 80082aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082ac:	e008      	b.n	80082c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082ae:	f7fe fcc3 	bl	8006c38 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d901      	bls.n	80082c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e1a5      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082c0:	4b46      	ldr	r3, [pc, #280]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0302 	and.w	r3, r3, #2
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d0f0      	beq.n	80082ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082cc:	4b43      	ldr	r3, [pc, #268]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	00db      	lsls	r3, r3, #3
 80082da:	4940      	ldr	r1, [pc, #256]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	600b      	str	r3, [r1, #0]
 80082e0:	e015      	b.n	800830e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082e2:	4b3f      	ldr	r3, [pc, #252]	; (80083e0 <HAL_RCC_OscConfig+0x2b0>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e8:	f7fe fca6 	bl	8006c38 <HAL_GetTick>
 80082ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082ee:	e008      	b.n	8008302 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082f0:	f7fe fca2 	bl	8006c38 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d901      	bls.n	8008302 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e184      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008302:	4b36      	ldr	r3, [pc, #216]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0302 	and.w	r3, r3, #2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1f0      	bne.n	80082f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0308 	and.w	r3, r3, #8
 8008316:	2b00      	cmp	r3, #0
 8008318:	d030      	beq.n	800837c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d016      	beq.n	8008350 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008322:	4b30      	ldr	r3, [pc, #192]	; (80083e4 <HAL_RCC_OscConfig+0x2b4>)
 8008324:	2201      	movs	r2, #1
 8008326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008328:	f7fe fc86 	bl	8006c38 <HAL_GetTick>
 800832c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800832e:	e008      	b.n	8008342 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008330:	f7fe fc82 	bl	8006c38 <HAL_GetTick>
 8008334:	4602      	mov	r2, r0
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	2b02      	cmp	r3, #2
 800833c:	d901      	bls.n	8008342 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	e164      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008342:	4b26      	ldr	r3, [pc, #152]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0f0      	beq.n	8008330 <HAL_RCC_OscConfig+0x200>
 800834e:	e015      	b.n	800837c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008350:	4b24      	ldr	r3, [pc, #144]	; (80083e4 <HAL_RCC_OscConfig+0x2b4>)
 8008352:	2200      	movs	r2, #0
 8008354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008356:	f7fe fc6f 	bl	8006c38 <HAL_GetTick>
 800835a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800835c:	e008      	b.n	8008370 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800835e:	f7fe fc6b 	bl	8006c38 <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	2b02      	cmp	r3, #2
 800836a:	d901      	bls.n	8008370 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e14d      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008370:	4b1a      	ldr	r3, [pc, #104]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008374:	f003 0302 	and.w	r3, r3, #2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1f0      	bne.n	800835e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 80a0 	beq.w	80084ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800838a:	2300      	movs	r3, #0
 800838c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800838e:	4b13      	ldr	r3, [pc, #76]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10f      	bne.n	80083ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800839a:	2300      	movs	r3, #0
 800839c:	60bb      	str	r3, [r7, #8]
 800839e:	4b0f      	ldr	r3, [pc, #60]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80083a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a2:	4a0e      	ldr	r2, [pc, #56]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80083a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083a8:	6413      	str	r3, [r2, #64]	; 0x40
 80083aa:	4b0c      	ldr	r3, [pc, #48]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80083ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083b2:	60bb      	str	r3, [r7, #8]
 80083b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083b6:	2301      	movs	r3, #1
 80083b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083ba:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <HAL_RCC_OscConfig+0x2b8>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d121      	bne.n	800840a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083c6:	4b08      	ldr	r3, [pc, #32]	; (80083e8 <HAL_RCC_OscConfig+0x2b8>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a07      	ldr	r2, [pc, #28]	; (80083e8 <HAL_RCC_OscConfig+0x2b8>)
 80083cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083d2:	f7fe fc31 	bl	8006c38 <HAL_GetTick>
 80083d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083d8:	e011      	b.n	80083fe <HAL_RCC_OscConfig+0x2ce>
 80083da:	bf00      	nop
 80083dc:	40023800 	.word	0x40023800
 80083e0:	42470000 	.word	0x42470000
 80083e4:	42470e80 	.word	0x42470e80
 80083e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083ec:	f7fe fc24 	bl	8006c38 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d901      	bls.n	80083fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e106      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083fe:	4b85      	ldr	r3, [pc, #532]	; (8008614 <HAL_RCC_OscConfig+0x4e4>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0f0      	beq.n	80083ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d106      	bne.n	8008420 <HAL_RCC_OscConfig+0x2f0>
 8008412:	4b81      	ldr	r3, [pc, #516]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 8008414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008416:	4a80      	ldr	r2, [pc, #512]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 8008418:	f043 0301 	orr.w	r3, r3, #1
 800841c:	6713      	str	r3, [r2, #112]	; 0x70
 800841e:	e01c      	b.n	800845a <HAL_RCC_OscConfig+0x32a>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	2b05      	cmp	r3, #5
 8008426:	d10c      	bne.n	8008442 <HAL_RCC_OscConfig+0x312>
 8008428:	4b7b      	ldr	r3, [pc, #492]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 800842a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842c:	4a7a      	ldr	r2, [pc, #488]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 800842e:	f043 0304 	orr.w	r3, r3, #4
 8008432:	6713      	str	r3, [r2, #112]	; 0x70
 8008434:	4b78      	ldr	r3, [pc, #480]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 8008436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008438:	4a77      	ldr	r2, [pc, #476]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 800843a:	f043 0301 	orr.w	r3, r3, #1
 800843e:	6713      	str	r3, [r2, #112]	; 0x70
 8008440:	e00b      	b.n	800845a <HAL_RCC_OscConfig+0x32a>
 8008442:	4b75      	ldr	r3, [pc, #468]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 8008444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008446:	4a74      	ldr	r2, [pc, #464]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 8008448:	f023 0301 	bic.w	r3, r3, #1
 800844c:	6713      	str	r3, [r2, #112]	; 0x70
 800844e:	4b72      	ldr	r3, [pc, #456]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 8008450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008452:	4a71      	ldr	r2, [pc, #452]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 8008454:	f023 0304 	bic.w	r3, r3, #4
 8008458:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d015      	beq.n	800848e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008462:	f7fe fbe9 	bl	8006c38 <HAL_GetTick>
 8008466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008468:	e00a      	b.n	8008480 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800846a:	f7fe fbe5 	bl	8006c38 <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	f241 3288 	movw	r2, #5000	; 0x1388
 8008478:	4293      	cmp	r3, r2
 800847a:	d901      	bls.n	8008480 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	e0c5      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008480:	4b65      	ldr	r3, [pc, #404]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 8008482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	2b00      	cmp	r3, #0
 800848a:	d0ee      	beq.n	800846a <HAL_RCC_OscConfig+0x33a>
 800848c:	e014      	b.n	80084b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800848e:	f7fe fbd3 	bl	8006c38 <HAL_GetTick>
 8008492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008494:	e00a      	b.n	80084ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008496:	f7fe fbcf 	bl	8006c38 <HAL_GetTick>
 800849a:	4602      	mov	r2, r0
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d901      	bls.n	80084ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e0af      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084ac:	4b5a      	ldr	r3, [pc, #360]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 80084ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b0:	f003 0302 	and.w	r3, r3, #2
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1ee      	bne.n	8008496 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d105      	bne.n	80084ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084be:	4b56      	ldr	r3, [pc, #344]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	4a55      	ldr	r2, [pc, #340]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 80084c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f000 809b 	beq.w	800860a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80084d4:	4b50      	ldr	r3, [pc, #320]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f003 030c 	and.w	r3, r3, #12
 80084dc:	2b08      	cmp	r3, #8
 80084de:	d05c      	beq.n	800859a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d141      	bne.n	800856c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084e8:	4b4c      	ldr	r3, [pc, #304]	; (800861c <HAL_RCC_OscConfig+0x4ec>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084ee:	f7fe fba3 	bl	8006c38 <HAL_GetTick>
 80084f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084f4:	e008      	b.n	8008508 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084f6:	f7fe fb9f 	bl	8006c38 <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	2b02      	cmp	r3, #2
 8008502:	d901      	bls.n	8008508 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e081      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008508:	4b43      	ldr	r3, [pc, #268]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1f0      	bne.n	80084f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	69da      	ldr	r2, [r3, #28]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a1b      	ldr	r3, [r3, #32]
 800851c:	431a      	orrs	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008522:	019b      	lsls	r3, r3, #6
 8008524:	431a      	orrs	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852a:	085b      	lsrs	r3, r3, #1
 800852c:	3b01      	subs	r3, #1
 800852e:	041b      	lsls	r3, r3, #16
 8008530:	431a      	orrs	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008536:	061b      	lsls	r3, r3, #24
 8008538:	4937      	ldr	r1, [pc, #220]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 800853a:	4313      	orrs	r3, r2
 800853c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800853e:	4b37      	ldr	r3, [pc, #220]	; (800861c <HAL_RCC_OscConfig+0x4ec>)
 8008540:	2201      	movs	r2, #1
 8008542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008544:	f7fe fb78 	bl	8006c38 <HAL_GetTick>
 8008548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800854a:	e008      	b.n	800855e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800854c:	f7fe fb74 	bl	8006c38 <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	2b02      	cmp	r3, #2
 8008558:	d901      	bls.n	800855e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e056      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800855e:	4b2e      	ldr	r3, [pc, #184]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d0f0      	beq.n	800854c <HAL_RCC_OscConfig+0x41c>
 800856a:	e04e      	b.n	800860a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800856c:	4b2b      	ldr	r3, [pc, #172]	; (800861c <HAL_RCC_OscConfig+0x4ec>)
 800856e:	2200      	movs	r2, #0
 8008570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008572:	f7fe fb61 	bl	8006c38 <HAL_GetTick>
 8008576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008578:	e008      	b.n	800858c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800857a:	f7fe fb5d 	bl	8006c38 <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	2b02      	cmp	r3, #2
 8008586:	d901      	bls.n	800858c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008588:	2303      	movs	r3, #3
 800858a:	e03f      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800858c:	4b22      	ldr	r3, [pc, #136]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1f0      	bne.n	800857a <HAL_RCC_OscConfig+0x44a>
 8008598:	e037      	b.n	800860a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d101      	bne.n	80085a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e032      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80085a6:	4b1c      	ldr	r3, [pc, #112]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d028      	beq.n	8008606 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085be:	429a      	cmp	r2, r3
 80085c0:	d121      	bne.n	8008606 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d11a      	bne.n	8008606 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80085d6:	4013      	ands	r3, r2
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80085dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085de:	4293      	cmp	r3, r2
 80085e0:	d111      	bne.n	8008606 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ec:	085b      	lsrs	r3, r3, #1
 80085ee:	3b01      	subs	r3, #1
 80085f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d107      	bne.n	8008606 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008600:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008602:	429a      	cmp	r2, r3
 8008604:	d001      	beq.n	800860a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e000      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	40007000 	.word	0x40007000
 8008618:	40023800 	.word	0x40023800
 800861c:	42470060 	.word	0x42470060

08008620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d101      	bne.n	8008634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e0cc      	b.n	80087ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008634:	4b68      	ldr	r3, [pc, #416]	; (80087d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0307 	and.w	r3, r3, #7
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	429a      	cmp	r2, r3
 8008640:	d90c      	bls.n	800865c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008642:	4b65      	ldr	r3, [pc, #404]	; (80087d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008644:	683a      	ldr	r2, [r7, #0]
 8008646:	b2d2      	uxtb	r2, r2
 8008648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800864a:	4b63      	ldr	r3, [pc, #396]	; (80087d8 <HAL_RCC_ClockConfig+0x1b8>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0307 	and.w	r3, r3, #7
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	429a      	cmp	r2, r3
 8008656:	d001      	beq.n	800865c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e0b8      	b.n	80087ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0302 	and.w	r3, r3, #2
 8008664:	2b00      	cmp	r3, #0
 8008666:	d020      	beq.n	80086aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0304 	and.w	r3, r3, #4
 8008670:	2b00      	cmp	r3, #0
 8008672:	d005      	beq.n	8008680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008674:	4b59      	ldr	r3, [pc, #356]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	4a58      	ldr	r2, [pc, #352]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 800867a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800867e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0308 	and.w	r3, r3, #8
 8008688:	2b00      	cmp	r3, #0
 800868a:	d005      	beq.n	8008698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800868c:	4b53      	ldr	r3, [pc, #332]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	4a52      	ldr	r2, [pc, #328]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 8008692:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008698:	4b50      	ldr	r3, [pc, #320]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	494d      	ldr	r1, [pc, #308]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 80086a6:	4313      	orrs	r3, r2
 80086a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d044      	beq.n	8008740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d107      	bne.n	80086ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086be:	4b47      	ldr	r3, [pc, #284]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d119      	bne.n	80086fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e07f      	b.n	80087ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d003      	beq.n	80086de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d107      	bne.n	80086ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086de:	4b3f      	ldr	r3, [pc, #252]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d109      	bne.n	80086fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e06f      	b.n	80087ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086ee:	4b3b      	ldr	r3, [pc, #236]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e067      	b.n	80087ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80086fe:	4b37      	ldr	r3, [pc, #220]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f023 0203 	bic.w	r2, r3, #3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	4934      	ldr	r1, [pc, #208]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 800870c:	4313      	orrs	r3, r2
 800870e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008710:	f7fe fa92 	bl	8006c38 <HAL_GetTick>
 8008714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008716:	e00a      	b.n	800872e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008718:	f7fe fa8e 	bl	8006c38 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	f241 3288 	movw	r2, #5000	; 0x1388
 8008726:	4293      	cmp	r3, r2
 8008728:	d901      	bls.n	800872e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e04f      	b.n	80087ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800872e:	4b2b      	ldr	r3, [pc, #172]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f003 020c 	and.w	r2, r3, #12
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	429a      	cmp	r2, r3
 800873e:	d1eb      	bne.n	8008718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008740:	4b25      	ldr	r3, [pc, #148]	; (80087d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0307 	and.w	r3, r3, #7
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d20c      	bcs.n	8008768 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800874e:	4b22      	ldr	r3, [pc, #136]	; (80087d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	b2d2      	uxtb	r2, r2
 8008754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008756:	4b20      	ldr	r3, [pc, #128]	; (80087d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0307 	and.w	r3, r3, #7
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	429a      	cmp	r2, r3
 8008762:	d001      	beq.n	8008768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e032      	b.n	80087ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b00      	cmp	r3, #0
 8008772:	d008      	beq.n	8008786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008774:	4b19      	ldr	r3, [pc, #100]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	4916      	ldr	r1, [pc, #88]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 8008782:	4313      	orrs	r3, r2
 8008784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0308 	and.w	r3, r3, #8
 800878e:	2b00      	cmp	r3, #0
 8008790:	d009      	beq.n	80087a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008792:	4b12      	ldr	r3, [pc, #72]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	490e      	ldr	r1, [pc, #56]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80087a6:	f000 f821 	bl	80087ec <HAL_RCC_GetSysClockFreq>
 80087aa:	4602      	mov	r2, r0
 80087ac:	4b0b      	ldr	r3, [pc, #44]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	091b      	lsrs	r3, r3, #4
 80087b2:	f003 030f 	and.w	r3, r3, #15
 80087b6:	490a      	ldr	r1, [pc, #40]	; (80087e0 <HAL_RCC_ClockConfig+0x1c0>)
 80087b8:	5ccb      	ldrb	r3, [r1, r3]
 80087ba:	fa22 f303 	lsr.w	r3, r2, r3
 80087be:	4a09      	ldr	r2, [pc, #36]	; (80087e4 <HAL_RCC_ClockConfig+0x1c4>)
 80087c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80087c2:	4b09      	ldr	r3, [pc, #36]	; (80087e8 <HAL_RCC_ClockConfig+0x1c8>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fe f9f2 	bl	8006bb0 <HAL_InitTick>

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	40023c00 	.word	0x40023c00
 80087dc:	40023800 	.word	0x40023800
 80087e0:	0800bd54 	.word	0x0800bd54
 80087e4:	200002c0 	.word	0x200002c0
 80087e8:	200002c4 	.word	0x200002c4

080087ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80087f0:	b084      	sub	sp, #16
 80087f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80087f4:	2300      	movs	r3, #0
 80087f6:	607b      	str	r3, [r7, #4]
 80087f8:	2300      	movs	r3, #0
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	2300      	movs	r3, #0
 80087fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008804:	4b67      	ldr	r3, [pc, #412]	; (80089a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	f003 030c 	and.w	r3, r3, #12
 800880c:	2b08      	cmp	r3, #8
 800880e:	d00d      	beq.n	800882c <HAL_RCC_GetSysClockFreq+0x40>
 8008810:	2b08      	cmp	r3, #8
 8008812:	f200 80bd 	bhi.w	8008990 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <HAL_RCC_GetSysClockFreq+0x34>
 800881a:	2b04      	cmp	r3, #4
 800881c:	d003      	beq.n	8008826 <HAL_RCC_GetSysClockFreq+0x3a>
 800881e:	e0b7      	b.n	8008990 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008820:	4b61      	ldr	r3, [pc, #388]	; (80089a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008822:	60bb      	str	r3, [r7, #8]
       break;
 8008824:	e0b7      	b.n	8008996 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008826:	4b61      	ldr	r3, [pc, #388]	; (80089ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008828:	60bb      	str	r3, [r7, #8]
      break;
 800882a:	e0b4      	b.n	8008996 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800882c:	4b5d      	ldr	r3, [pc, #372]	; (80089a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008834:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008836:	4b5b      	ldr	r3, [pc, #364]	; (80089a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d04d      	beq.n	80088de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008842:	4b58      	ldr	r3, [pc, #352]	; (80089a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	099b      	lsrs	r3, r3, #6
 8008848:	461a      	mov	r2, r3
 800884a:	f04f 0300 	mov.w	r3, #0
 800884e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008852:	f04f 0100 	mov.w	r1, #0
 8008856:	ea02 0800 	and.w	r8, r2, r0
 800885a:	ea03 0901 	and.w	r9, r3, r1
 800885e:	4640      	mov	r0, r8
 8008860:	4649      	mov	r1, r9
 8008862:	f04f 0200 	mov.w	r2, #0
 8008866:	f04f 0300 	mov.w	r3, #0
 800886a:	014b      	lsls	r3, r1, #5
 800886c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008870:	0142      	lsls	r2, r0, #5
 8008872:	4610      	mov	r0, r2
 8008874:	4619      	mov	r1, r3
 8008876:	ebb0 0008 	subs.w	r0, r0, r8
 800887a:	eb61 0109 	sbc.w	r1, r1, r9
 800887e:	f04f 0200 	mov.w	r2, #0
 8008882:	f04f 0300 	mov.w	r3, #0
 8008886:	018b      	lsls	r3, r1, #6
 8008888:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800888c:	0182      	lsls	r2, r0, #6
 800888e:	1a12      	subs	r2, r2, r0
 8008890:	eb63 0301 	sbc.w	r3, r3, r1
 8008894:	f04f 0000 	mov.w	r0, #0
 8008898:	f04f 0100 	mov.w	r1, #0
 800889c:	00d9      	lsls	r1, r3, #3
 800889e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088a2:	00d0      	lsls	r0, r2, #3
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	eb12 0208 	adds.w	r2, r2, r8
 80088ac:	eb43 0309 	adc.w	r3, r3, r9
 80088b0:	f04f 0000 	mov.w	r0, #0
 80088b4:	f04f 0100 	mov.w	r1, #0
 80088b8:	0259      	lsls	r1, r3, #9
 80088ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80088be:	0250      	lsls	r0, r2, #9
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4610      	mov	r0, r2
 80088c6:	4619      	mov	r1, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	461a      	mov	r2, r3
 80088cc:	f04f 0300 	mov.w	r3, #0
 80088d0:	f7f8 f98a 	bl	8000be8 <__aeabi_uldivmod>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	4613      	mov	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]
 80088dc:	e04a      	b.n	8008974 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088de:	4b31      	ldr	r3, [pc, #196]	; (80089a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	099b      	lsrs	r3, r3, #6
 80088e4:	461a      	mov	r2, r3
 80088e6:	f04f 0300 	mov.w	r3, #0
 80088ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80088ee:	f04f 0100 	mov.w	r1, #0
 80088f2:	ea02 0400 	and.w	r4, r2, r0
 80088f6:	ea03 0501 	and.w	r5, r3, r1
 80088fa:	4620      	mov	r0, r4
 80088fc:	4629      	mov	r1, r5
 80088fe:	f04f 0200 	mov.w	r2, #0
 8008902:	f04f 0300 	mov.w	r3, #0
 8008906:	014b      	lsls	r3, r1, #5
 8008908:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800890c:	0142      	lsls	r2, r0, #5
 800890e:	4610      	mov	r0, r2
 8008910:	4619      	mov	r1, r3
 8008912:	1b00      	subs	r0, r0, r4
 8008914:	eb61 0105 	sbc.w	r1, r1, r5
 8008918:	f04f 0200 	mov.w	r2, #0
 800891c:	f04f 0300 	mov.w	r3, #0
 8008920:	018b      	lsls	r3, r1, #6
 8008922:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008926:	0182      	lsls	r2, r0, #6
 8008928:	1a12      	subs	r2, r2, r0
 800892a:	eb63 0301 	sbc.w	r3, r3, r1
 800892e:	f04f 0000 	mov.w	r0, #0
 8008932:	f04f 0100 	mov.w	r1, #0
 8008936:	00d9      	lsls	r1, r3, #3
 8008938:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800893c:	00d0      	lsls	r0, r2, #3
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	1912      	adds	r2, r2, r4
 8008944:	eb45 0303 	adc.w	r3, r5, r3
 8008948:	f04f 0000 	mov.w	r0, #0
 800894c:	f04f 0100 	mov.w	r1, #0
 8008950:	0299      	lsls	r1, r3, #10
 8008952:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008956:	0290      	lsls	r0, r2, #10
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4610      	mov	r0, r2
 800895e:	4619      	mov	r1, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	461a      	mov	r2, r3
 8008964:	f04f 0300 	mov.w	r3, #0
 8008968:	f7f8 f93e 	bl	8000be8 <__aeabi_uldivmod>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	4613      	mov	r3, r2
 8008972:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008974:	4b0b      	ldr	r3, [pc, #44]	; (80089a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	0c1b      	lsrs	r3, r3, #16
 800897a:	f003 0303 	and.w	r3, r3, #3
 800897e:	3301      	adds	r3, #1
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	fbb2 f3f3 	udiv	r3, r2, r3
 800898c:	60bb      	str	r3, [r7, #8]
      break;
 800898e:	e002      	b.n	8008996 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008990:	4b05      	ldr	r3, [pc, #20]	; (80089a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008992:	60bb      	str	r3, [r7, #8]
      break;
 8008994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008996:	68bb      	ldr	r3, [r7, #8]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80089a2:	bf00      	nop
 80089a4:	40023800 	.word	0x40023800
 80089a8:	00f42400 	.word	0x00f42400
 80089ac:	007a1200 	.word	0x007a1200

080089b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089b0:	b480      	push	{r7}
 80089b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80089b4:	4b03      	ldr	r3, [pc, #12]	; (80089c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80089b6:	681b      	ldr	r3, [r3, #0]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	200002c0 	.word	0x200002c0

080089c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80089cc:	f7ff fff0 	bl	80089b0 <HAL_RCC_GetHCLKFreq>
 80089d0:	4602      	mov	r2, r0
 80089d2:	4b05      	ldr	r3, [pc, #20]	; (80089e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	0a9b      	lsrs	r3, r3, #10
 80089d8:	f003 0307 	and.w	r3, r3, #7
 80089dc:	4903      	ldr	r1, [pc, #12]	; (80089ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80089de:	5ccb      	ldrb	r3, [r1, r3]
 80089e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	40023800 	.word	0x40023800
 80089ec:	0800bd64 	.word	0x0800bd64

080089f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80089f4:	f7ff ffdc 	bl	80089b0 <HAL_RCC_GetHCLKFreq>
 80089f8:	4602      	mov	r2, r0
 80089fa:	4b05      	ldr	r3, [pc, #20]	; (8008a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	0b5b      	lsrs	r3, r3, #13
 8008a00:	f003 0307 	and.w	r3, r3, #7
 8008a04:	4903      	ldr	r1, [pc, #12]	; (8008a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a06:	5ccb      	ldrb	r3, [r1, r3]
 8008a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	40023800 	.word	0x40023800
 8008a14:	0800bd64 	.word	0x0800bd64

08008a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d101      	bne.n	8008a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e03f      	b.n	8008aaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d106      	bne.n	8008a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7fe f822 	bl	8006a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2224      	movs	r2, #36	; 0x24
 8008a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68da      	ldr	r2, [r3, #12]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f829 	bl	8008ab4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	691a      	ldr	r2, [r3, #16]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	695a      	ldr	r2, [r3, #20]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68da      	ldr	r2, [r3, #12]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2220      	movs	r2, #32
 8008aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab8:	b09f      	sub	sp, #124	; 0x7c
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aca:	68d9      	ldr	r1, [r3, #12]
 8008acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	ea40 0301 	orr.w	r3, r0, r1
 8008ad4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ad8:	689a      	ldr	r2, [r3, #8]
 8008ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ae2:	695b      	ldr	r3, [r3, #20]
 8008ae4:	431a      	orrs	r2, r3
 8008ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008af8:	f021 010c 	bic.w	r1, r1, #12
 8008afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b02:	430b      	orrs	r3, r1
 8008b04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b12:	6999      	ldr	r1, [r3, #24]
 8008b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	ea40 0301 	orr.w	r3, r0, r1
 8008b1c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	4bc5      	ldr	r3, [pc, #788]	; (8008e38 <UART_SetConfig+0x384>)
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d004      	beq.n	8008b32 <UART_SetConfig+0x7e>
 8008b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	4bc3      	ldr	r3, [pc, #780]	; (8008e3c <UART_SetConfig+0x388>)
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d103      	bne.n	8008b3a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b32:	f7ff ff5d 	bl	80089f0 <HAL_RCC_GetPCLK2Freq>
 8008b36:	6778      	str	r0, [r7, #116]	; 0x74
 8008b38:	e002      	b.n	8008b40 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b3a:	f7ff ff45 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 8008b3e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b48:	f040 80b6 	bne.w	8008cb8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b4e:	461c      	mov	r4, r3
 8008b50:	f04f 0500 	mov.w	r5, #0
 8008b54:	4622      	mov	r2, r4
 8008b56:	462b      	mov	r3, r5
 8008b58:	1891      	adds	r1, r2, r2
 8008b5a:	6439      	str	r1, [r7, #64]	; 0x40
 8008b5c:	415b      	adcs	r3, r3
 8008b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8008b60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b64:	1912      	adds	r2, r2, r4
 8008b66:	eb45 0303 	adc.w	r3, r5, r3
 8008b6a:	f04f 0000 	mov.w	r0, #0
 8008b6e:	f04f 0100 	mov.w	r1, #0
 8008b72:	00d9      	lsls	r1, r3, #3
 8008b74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b78:	00d0      	lsls	r0, r2, #3
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	1911      	adds	r1, r2, r4
 8008b80:	6639      	str	r1, [r7, #96]	; 0x60
 8008b82:	416b      	adcs	r3, r5
 8008b84:	667b      	str	r3, [r7, #100]	; 0x64
 8008b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	f04f 0300 	mov.w	r3, #0
 8008b90:	1891      	adds	r1, r2, r2
 8008b92:	63b9      	str	r1, [r7, #56]	; 0x38
 8008b94:	415b      	adcs	r3, r3
 8008b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008b9c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008ba0:	f7f8 f822 	bl	8000be8 <__aeabi_uldivmod>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4ba5      	ldr	r3, [pc, #660]	; (8008e40 <UART_SetConfig+0x38c>)
 8008baa:	fba3 2302 	umull	r2, r3, r3, r2
 8008bae:	095b      	lsrs	r3, r3, #5
 8008bb0:	011e      	lsls	r6, r3, #4
 8008bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bb4:	461c      	mov	r4, r3
 8008bb6:	f04f 0500 	mov.w	r5, #0
 8008bba:	4622      	mov	r2, r4
 8008bbc:	462b      	mov	r3, r5
 8008bbe:	1891      	adds	r1, r2, r2
 8008bc0:	6339      	str	r1, [r7, #48]	; 0x30
 8008bc2:	415b      	adcs	r3, r3
 8008bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8008bc6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008bca:	1912      	adds	r2, r2, r4
 8008bcc:	eb45 0303 	adc.w	r3, r5, r3
 8008bd0:	f04f 0000 	mov.w	r0, #0
 8008bd4:	f04f 0100 	mov.w	r1, #0
 8008bd8:	00d9      	lsls	r1, r3, #3
 8008bda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008bde:	00d0      	lsls	r0, r2, #3
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	1911      	adds	r1, r2, r4
 8008be6:	65b9      	str	r1, [r7, #88]	; 0x58
 8008be8:	416b      	adcs	r3, r5
 8008bea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	f04f 0300 	mov.w	r3, #0
 8008bf6:	1891      	adds	r1, r2, r2
 8008bf8:	62b9      	str	r1, [r7, #40]	; 0x28
 8008bfa:	415b      	adcs	r3, r3
 8008bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c02:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008c06:	f7f7 ffef 	bl	8000be8 <__aeabi_uldivmod>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4b8c      	ldr	r3, [pc, #560]	; (8008e40 <UART_SetConfig+0x38c>)
 8008c10:	fba3 1302 	umull	r1, r3, r3, r2
 8008c14:	095b      	lsrs	r3, r3, #5
 8008c16:	2164      	movs	r1, #100	; 0x64
 8008c18:	fb01 f303 	mul.w	r3, r1, r3
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	00db      	lsls	r3, r3, #3
 8008c20:	3332      	adds	r3, #50	; 0x32
 8008c22:	4a87      	ldr	r2, [pc, #540]	; (8008e40 <UART_SetConfig+0x38c>)
 8008c24:	fba2 2303 	umull	r2, r3, r2, r3
 8008c28:	095b      	lsrs	r3, r3, #5
 8008c2a:	005b      	lsls	r3, r3, #1
 8008c2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c30:	441e      	add	r6, r3
 8008c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c34:	4618      	mov	r0, r3
 8008c36:	f04f 0100 	mov.w	r1, #0
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	1894      	adds	r4, r2, r2
 8008c40:	623c      	str	r4, [r7, #32]
 8008c42:	415b      	adcs	r3, r3
 8008c44:	627b      	str	r3, [r7, #36]	; 0x24
 8008c46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c4a:	1812      	adds	r2, r2, r0
 8008c4c:	eb41 0303 	adc.w	r3, r1, r3
 8008c50:	f04f 0400 	mov.w	r4, #0
 8008c54:	f04f 0500 	mov.w	r5, #0
 8008c58:	00dd      	lsls	r5, r3, #3
 8008c5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c5e:	00d4      	lsls	r4, r2, #3
 8008c60:	4622      	mov	r2, r4
 8008c62:	462b      	mov	r3, r5
 8008c64:	1814      	adds	r4, r2, r0
 8008c66:	653c      	str	r4, [r7, #80]	; 0x50
 8008c68:	414b      	adcs	r3, r1
 8008c6a:	657b      	str	r3, [r7, #84]	; 0x54
 8008c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	461a      	mov	r2, r3
 8008c72:	f04f 0300 	mov.w	r3, #0
 8008c76:	1891      	adds	r1, r2, r2
 8008c78:	61b9      	str	r1, [r7, #24]
 8008c7a:	415b      	adcs	r3, r3
 8008c7c:	61fb      	str	r3, [r7, #28]
 8008c7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008c86:	f7f7 ffaf 	bl	8000be8 <__aeabi_uldivmod>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4b6c      	ldr	r3, [pc, #432]	; (8008e40 <UART_SetConfig+0x38c>)
 8008c90:	fba3 1302 	umull	r1, r3, r3, r2
 8008c94:	095b      	lsrs	r3, r3, #5
 8008c96:	2164      	movs	r1, #100	; 0x64
 8008c98:	fb01 f303 	mul.w	r3, r1, r3
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	00db      	lsls	r3, r3, #3
 8008ca0:	3332      	adds	r3, #50	; 0x32
 8008ca2:	4a67      	ldr	r2, [pc, #412]	; (8008e40 <UART_SetConfig+0x38c>)
 8008ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca8:	095b      	lsrs	r3, r3, #5
 8008caa:	f003 0207 	and.w	r2, r3, #7
 8008cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4432      	add	r2, r6
 8008cb4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008cb6:	e0b9      	b.n	8008e2c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cba:	461c      	mov	r4, r3
 8008cbc:	f04f 0500 	mov.w	r5, #0
 8008cc0:	4622      	mov	r2, r4
 8008cc2:	462b      	mov	r3, r5
 8008cc4:	1891      	adds	r1, r2, r2
 8008cc6:	6139      	str	r1, [r7, #16]
 8008cc8:	415b      	adcs	r3, r3
 8008cca:	617b      	str	r3, [r7, #20]
 8008ccc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008cd0:	1912      	adds	r2, r2, r4
 8008cd2:	eb45 0303 	adc.w	r3, r5, r3
 8008cd6:	f04f 0000 	mov.w	r0, #0
 8008cda:	f04f 0100 	mov.w	r1, #0
 8008cde:	00d9      	lsls	r1, r3, #3
 8008ce0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ce4:	00d0      	lsls	r0, r2, #3
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	460b      	mov	r3, r1
 8008cea:	eb12 0804 	adds.w	r8, r2, r4
 8008cee:	eb43 0905 	adc.w	r9, r3, r5
 8008cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f04f 0100 	mov.w	r1, #0
 8008cfc:	f04f 0200 	mov.w	r2, #0
 8008d00:	f04f 0300 	mov.w	r3, #0
 8008d04:	008b      	lsls	r3, r1, #2
 8008d06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d0a:	0082      	lsls	r2, r0, #2
 8008d0c:	4640      	mov	r0, r8
 8008d0e:	4649      	mov	r1, r9
 8008d10:	f7f7 ff6a 	bl	8000be8 <__aeabi_uldivmod>
 8008d14:	4602      	mov	r2, r0
 8008d16:	460b      	mov	r3, r1
 8008d18:	4b49      	ldr	r3, [pc, #292]	; (8008e40 <UART_SetConfig+0x38c>)
 8008d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d1e:	095b      	lsrs	r3, r3, #5
 8008d20:	011e      	lsls	r6, r3, #4
 8008d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d24:	4618      	mov	r0, r3
 8008d26:	f04f 0100 	mov.w	r1, #0
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	1894      	adds	r4, r2, r2
 8008d30:	60bc      	str	r4, [r7, #8]
 8008d32:	415b      	adcs	r3, r3
 8008d34:	60fb      	str	r3, [r7, #12]
 8008d36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d3a:	1812      	adds	r2, r2, r0
 8008d3c:	eb41 0303 	adc.w	r3, r1, r3
 8008d40:	f04f 0400 	mov.w	r4, #0
 8008d44:	f04f 0500 	mov.w	r5, #0
 8008d48:	00dd      	lsls	r5, r3, #3
 8008d4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d4e:	00d4      	lsls	r4, r2, #3
 8008d50:	4622      	mov	r2, r4
 8008d52:	462b      	mov	r3, r5
 8008d54:	1814      	adds	r4, r2, r0
 8008d56:	64bc      	str	r4, [r7, #72]	; 0x48
 8008d58:	414b      	adcs	r3, r1
 8008d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f04f 0100 	mov.w	r1, #0
 8008d66:	f04f 0200 	mov.w	r2, #0
 8008d6a:	f04f 0300 	mov.w	r3, #0
 8008d6e:	008b      	lsls	r3, r1, #2
 8008d70:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d74:	0082      	lsls	r2, r0, #2
 8008d76:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008d7a:	f7f7 ff35 	bl	8000be8 <__aeabi_uldivmod>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4b2f      	ldr	r3, [pc, #188]	; (8008e40 <UART_SetConfig+0x38c>)
 8008d84:	fba3 1302 	umull	r1, r3, r3, r2
 8008d88:	095b      	lsrs	r3, r3, #5
 8008d8a:	2164      	movs	r1, #100	; 0x64
 8008d8c:	fb01 f303 	mul.w	r3, r1, r3
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	011b      	lsls	r3, r3, #4
 8008d94:	3332      	adds	r3, #50	; 0x32
 8008d96:	4a2a      	ldr	r2, [pc, #168]	; (8008e40 <UART_SetConfig+0x38c>)
 8008d98:	fba2 2303 	umull	r2, r3, r2, r3
 8008d9c:	095b      	lsrs	r3, r3, #5
 8008d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008da2:	441e      	add	r6, r3
 8008da4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008da6:	4618      	mov	r0, r3
 8008da8:	f04f 0100 	mov.w	r1, #0
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	1894      	adds	r4, r2, r2
 8008db2:	603c      	str	r4, [r7, #0]
 8008db4:	415b      	adcs	r3, r3
 8008db6:	607b      	str	r3, [r7, #4]
 8008db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dbc:	1812      	adds	r2, r2, r0
 8008dbe:	eb41 0303 	adc.w	r3, r1, r3
 8008dc2:	f04f 0400 	mov.w	r4, #0
 8008dc6:	f04f 0500 	mov.w	r5, #0
 8008dca:	00dd      	lsls	r5, r3, #3
 8008dcc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008dd0:	00d4      	lsls	r4, r2, #3
 8008dd2:	4622      	mov	r2, r4
 8008dd4:	462b      	mov	r3, r5
 8008dd6:	eb12 0a00 	adds.w	sl, r2, r0
 8008dda:	eb43 0b01 	adc.w	fp, r3, r1
 8008dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f04f 0100 	mov.w	r1, #0
 8008de8:	f04f 0200 	mov.w	r2, #0
 8008dec:	f04f 0300 	mov.w	r3, #0
 8008df0:	008b      	lsls	r3, r1, #2
 8008df2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008df6:	0082      	lsls	r2, r0, #2
 8008df8:	4650      	mov	r0, sl
 8008dfa:	4659      	mov	r1, fp
 8008dfc:	f7f7 fef4 	bl	8000be8 <__aeabi_uldivmod>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	4b0e      	ldr	r3, [pc, #56]	; (8008e40 <UART_SetConfig+0x38c>)
 8008e06:	fba3 1302 	umull	r1, r3, r3, r2
 8008e0a:	095b      	lsrs	r3, r3, #5
 8008e0c:	2164      	movs	r1, #100	; 0x64
 8008e0e:	fb01 f303 	mul.w	r3, r1, r3
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	011b      	lsls	r3, r3, #4
 8008e16:	3332      	adds	r3, #50	; 0x32
 8008e18:	4a09      	ldr	r2, [pc, #36]	; (8008e40 <UART_SetConfig+0x38c>)
 8008e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e1e:	095b      	lsrs	r3, r3, #5
 8008e20:	f003 020f 	and.w	r2, r3, #15
 8008e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4432      	add	r2, r6
 8008e2a:	609a      	str	r2, [r3, #8]
}
 8008e2c:	bf00      	nop
 8008e2e:	377c      	adds	r7, #124	; 0x7c
 8008e30:	46bd      	mov	sp, r7
 8008e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e36:	bf00      	nop
 8008e38:	40011000 	.word	0x40011000
 8008e3c:	40011400 	.word	0x40011400
 8008e40:	51eb851f 	.word	0x51eb851f

08008e44 <__errno>:
 8008e44:	4b01      	ldr	r3, [pc, #4]	; (8008e4c <__errno+0x8>)
 8008e46:	6818      	ldr	r0, [r3, #0]
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	200002cc 	.word	0x200002cc

08008e50 <__libc_init_array>:
 8008e50:	b570      	push	{r4, r5, r6, lr}
 8008e52:	4d0d      	ldr	r5, [pc, #52]	; (8008e88 <__libc_init_array+0x38>)
 8008e54:	4c0d      	ldr	r4, [pc, #52]	; (8008e8c <__libc_init_array+0x3c>)
 8008e56:	1b64      	subs	r4, r4, r5
 8008e58:	10a4      	asrs	r4, r4, #2
 8008e5a:	2600      	movs	r6, #0
 8008e5c:	42a6      	cmp	r6, r4
 8008e5e:	d109      	bne.n	8008e74 <__libc_init_array+0x24>
 8008e60:	4d0b      	ldr	r5, [pc, #44]	; (8008e90 <__libc_init_array+0x40>)
 8008e62:	4c0c      	ldr	r4, [pc, #48]	; (8008e94 <__libc_init_array+0x44>)
 8008e64:	f002 fd10 	bl	800b888 <_init>
 8008e68:	1b64      	subs	r4, r4, r5
 8008e6a:	10a4      	asrs	r4, r4, #2
 8008e6c:	2600      	movs	r6, #0
 8008e6e:	42a6      	cmp	r6, r4
 8008e70:	d105      	bne.n	8008e7e <__libc_init_array+0x2e>
 8008e72:	bd70      	pop	{r4, r5, r6, pc}
 8008e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e78:	4798      	blx	r3
 8008e7a:	3601      	adds	r6, #1
 8008e7c:	e7ee      	b.n	8008e5c <__libc_init_array+0xc>
 8008e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e82:	4798      	blx	r3
 8008e84:	3601      	adds	r6, #1
 8008e86:	e7f2      	b.n	8008e6e <__libc_init_array+0x1e>
 8008e88:	0800c154 	.word	0x0800c154
 8008e8c:	0800c154 	.word	0x0800c154
 8008e90:	0800c154 	.word	0x0800c154
 8008e94:	0800c158 	.word	0x0800c158

08008e98 <memcpy>:
 8008e98:	440a      	add	r2, r1
 8008e9a:	4291      	cmp	r1, r2
 8008e9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ea0:	d100      	bne.n	8008ea4 <memcpy+0xc>
 8008ea2:	4770      	bx	lr
 8008ea4:	b510      	push	{r4, lr}
 8008ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eae:	4291      	cmp	r1, r2
 8008eb0:	d1f9      	bne.n	8008ea6 <memcpy+0xe>
 8008eb2:	bd10      	pop	{r4, pc}

08008eb4 <memset>:
 8008eb4:	4402      	add	r2, r0
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d100      	bne.n	8008ebe <memset+0xa>
 8008ebc:	4770      	bx	lr
 8008ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8008ec2:	e7f9      	b.n	8008eb8 <memset+0x4>

08008ec4 <__cvt>:
 8008ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec8:	ec55 4b10 	vmov	r4, r5, d0
 8008ecc:	2d00      	cmp	r5, #0
 8008ece:	460e      	mov	r6, r1
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	462b      	mov	r3, r5
 8008ed4:	bfbb      	ittet	lt
 8008ed6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008eda:	461d      	movlt	r5, r3
 8008edc:	2300      	movge	r3, #0
 8008ede:	232d      	movlt	r3, #45	; 0x2d
 8008ee0:	700b      	strb	r3, [r1, #0]
 8008ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ee4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ee8:	4691      	mov	r9, r2
 8008eea:	f023 0820 	bic.w	r8, r3, #32
 8008eee:	bfbc      	itt	lt
 8008ef0:	4622      	movlt	r2, r4
 8008ef2:	4614      	movlt	r4, r2
 8008ef4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ef8:	d005      	beq.n	8008f06 <__cvt+0x42>
 8008efa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008efe:	d100      	bne.n	8008f02 <__cvt+0x3e>
 8008f00:	3601      	adds	r6, #1
 8008f02:	2102      	movs	r1, #2
 8008f04:	e000      	b.n	8008f08 <__cvt+0x44>
 8008f06:	2103      	movs	r1, #3
 8008f08:	ab03      	add	r3, sp, #12
 8008f0a:	9301      	str	r3, [sp, #4]
 8008f0c:	ab02      	add	r3, sp, #8
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	ec45 4b10 	vmov	d0, r4, r5
 8008f14:	4653      	mov	r3, sl
 8008f16:	4632      	mov	r2, r6
 8008f18:	f000 fcea 	bl	80098f0 <_dtoa_r>
 8008f1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f20:	4607      	mov	r7, r0
 8008f22:	d102      	bne.n	8008f2a <__cvt+0x66>
 8008f24:	f019 0f01 	tst.w	r9, #1
 8008f28:	d022      	beq.n	8008f70 <__cvt+0xac>
 8008f2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f2e:	eb07 0906 	add.w	r9, r7, r6
 8008f32:	d110      	bne.n	8008f56 <__cvt+0x92>
 8008f34:	783b      	ldrb	r3, [r7, #0]
 8008f36:	2b30      	cmp	r3, #48	; 0x30
 8008f38:	d10a      	bne.n	8008f50 <__cvt+0x8c>
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	4620      	mov	r0, r4
 8008f40:	4629      	mov	r1, r5
 8008f42:	f7f7 fdc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f46:	b918      	cbnz	r0, 8008f50 <__cvt+0x8c>
 8008f48:	f1c6 0601 	rsb	r6, r6, #1
 8008f4c:	f8ca 6000 	str.w	r6, [sl]
 8008f50:	f8da 3000 	ldr.w	r3, [sl]
 8008f54:	4499      	add	r9, r3
 8008f56:	2200      	movs	r2, #0
 8008f58:	2300      	movs	r3, #0
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	4629      	mov	r1, r5
 8008f5e:	f7f7 fdb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f62:	b108      	cbz	r0, 8008f68 <__cvt+0xa4>
 8008f64:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f68:	2230      	movs	r2, #48	; 0x30
 8008f6a:	9b03      	ldr	r3, [sp, #12]
 8008f6c:	454b      	cmp	r3, r9
 8008f6e:	d307      	bcc.n	8008f80 <__cvt+0xbc>
 8008f70:	9b03      	ldr	r3, [sp, #12]
 8008f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f74:	1bdb      	subs	r3, r3, r7
 8008f76:	4638      	mov	r0, r7
 8008f78:	6013      	str	r3, [r2, #0]
 8008f7a:	b004      	add	sp, #16
 8008f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f80:	1c59      	adds	r1, r3, #1
 8008f82:	9103      	str	r1, [sp, #12]
 8008f84:	701a      	strb	r2, [r3, #0]
 8008f86:	e7f0      	b.n	8008f6a <__cvt+0xa6>

08008f88 <__exponent>:
 8008f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2900      	cmp	r1, #0
 8008f8e:	bfb8      	it	lt
 8008f90:	4249      	neglt	r1, r1
 8008f92:	f803 2b02 	strb.w	r2, [r3], #2
 8008f96:	bfb4      	ite	lt
 8008f98:	222d      	movlt	r2, #45	; 0x2d
 8008f9a:	222b      	movge	r2, #43	; 0x2b
 8008f9c:	2909      	cmp	r1, #9
 8008f9e:	7042      	strb	r2, [r0, #1]
 8008fa0:	dd2a      	ble.n	8008ff8 <__exponent+0x70>
 8008fa2:	f10d 0407 	add.w	r4, sp, #7
 8008fa6:	46a4      	mov	ip, r4
 8008fa8:	270a      	movs	r7, #10
 8008faa:	46a6      	mov	lr, r4
 8008fac:	460a      	mov	r2, r1
 8008fae:	fb91 f6f7 	sdiv	r6, r1, r7
 8008fb2:	fb07 1516 	mls	r5, r7, r6, r1
 8008fb6:	3530      	adds	r5, #48	; 0x30
 8008fb8:	2a63      	cmp	r2, #99	; 0x63
 8008fba:	f104 34ff 	add.w	r4, r4, #4294967295
 8008fbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008fc2:	4631      	mov	r1, r6
 8008fc4:	dcf1      	bgt.n	8008faa <__exponent+0x22>
 8008fc6:	3130      	adds	r1, #48	; 0x30
 8008fc8:	f1ae 0502 	sub.w	r5, lr, #2
 8008fcc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008fd0:	1c44      	adds	r4, r0, #1
 8008fd2:	4629      	mov	r1, r5
 8008fd4:	4561      	cmp	r1, ip
 8008fd6:	d30a      	bcc.n	8008fee <__exponent+0x66>
 8008fd8:	f10d 0209 	add.w	r2, sp, #9
 8008fdc:	eba2 020e 	sub.w	r2, r2, lr
 8008fe0:	4565      	cmp	r5, ip
 8008fe2:	bf88      	it	hi
 8008fe4:	2200      	movhi	r2, #0
 8008fe6:	4413      	add	r3, r2
 8008fe8:	1a18      	subs	r0, r3, r0
 8008fea:	b003      	add	sp, #12
 8008fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ff2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008ff6:	e7ed      	b.n	8008fd4 <__exponent+0x4c>
 8008ff8:	2330      	movs	r3, #48	; 0x30
 8008ffa:	3130      	adds	r1, #48	; 0x30
 8008ffc:	7083      	strb	r3, [r0, #2]
 8008ffe:	70c1      	strb	r1, [r0, #3]
 8009000:	1d03      	adds	r3, r0, #4
 8009002:	e7f1      	b.n	8008fe8 <__exponent+0x60>

08009004 <_printf_float>:
 8009004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009008:	ed2d 8b02 	vpush	{d8}
 800900c:	b08d      	sub	sp, #52	; 0x34
 800900e:	460c      	mov	r4, r1
 8009010:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009014:	4616      	mov	r6, r2
 8009016:	461f      	mov	r7, r3
 8009018:	4605      	mov	r5, r0
 800901a:	f001 fb4b 	bl	800a6b4 <_localeconv_r>
 800901e:	f8d0 a000 	ldr.w	sl, [r0]
 8009022:	4650      	mov	r0, sl
 8009024:	f7f7 f8d4 	bl	80001d0 <strlen>
 8009028:	2300      	movs	r3, #0
 800902a:	930a      	str	r3, [sp, #40]	; 0x28
 800902c:	6823      	ldr	r3, [r4, #0]
 800902e:	9305      	str	r3, [sp, #20]
 8009030:	f8d8 3000 	ldr.w	r3, [r8]
 8009034:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009038:	3307      	adds	r3, #7
 800903a:	f023 0307 	bic.w	r3, r3, #7
 800903e:	f103 0208 	add.w	r2, r3, #8
 8009042:	f8c8 2000 	str.w	r2, [r8]
 8009046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800904e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009052:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009056:	9307      	str	r3, [sp, #28]
 8009058:	f8cd 8018 	str.w	r8, [sp, #24]
 800905c:	ee08 0a10 	vmov	s16, r0
 8009060:	4b9f      	ldr	r3, [pc, #636]	; (80092e0 <_printf_float+0x2dc>)
 8009062:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009066:	f04f 32ff 	mov.w	r2, #4294967295
 800906a:	f7f7 fd5f 	bl	8000b2c <__aeabi_dcmpun>
 800906e:	bb88      	cbnz	r0, 80090d4 <_printf_float+0xd0>
 8009070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009074:	4b9a      	ldr	r3, [pc, #616]	; (80092e0 <_printf_float+0x2dc>)
 8009076:	f04f 32ff 	mov.w	r2, #4294967295
 800907a:	f7f7 fd39 	bl	8000af0 <__aeabi_dcmple>
 800907e:	bb48      	cbnz	r0, 80090d4 <_printf_float+0xd0>
 8009080:	2200      	movs	r2, #0
 8009082:	2300      	movs	r3, #0
 8009084:	4640      	mov	r0, r8
 8009086:	4649      	mov	r1, r9
 8009088:	f7f7 fd28 	bl	8000adc <__aeabi_dcmplt>
 800908c:	b110      	cbz	r0, 8009094 <_printf_float+0x90>
 800908e:	232d      	movs	r3, #45	; 0x2d
 8009090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009094:	4b93      	ldr	r3, [pc, #588]	; (80092e4 <_printf_float+0x2e0>)
 8009096:	4894      	ldr	r0, [pc, #592]	; (80092e8 <_printf_float+0x2e4>)
 8009098:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800909c:	bf94      	ite	ls
 800909e:	4698      	movls	r8, r3
 80090a0:	4680      	movhi	r8, r0
 80090a2:	2303      	movs	r3, #3
 80090a4:	6123      	str	r3, [r4, #16]
 80090a6:	9b05      	ldr	r3, [sp, #20]
 80090a8:	f023 0204 	bic.w	r2, r3, #4
 80090ac:	6022      	str	r2, [r4, #0]
 80090ae:	f04f 0900 	mov.w	r9, #0
 80090b2:	9700      	str	r7, [sp, #0]
 80090b4:	4633      	mov	r3, r6
 80090b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80090b8:	4621      	mov	r1, r4
 80090ba:	4628      	mov	r0, r5
 80090bc:	f000 f9d8 	bl	8009470 <_printf_common>
 80090c0:	3001      	adds	r0, #1
 80090c2:	f040 8090 	bne.w	80091e6 <_printf_float+0x1e2>
 80090c6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ca:	b00d      	add	sp, #52	; 0x34
 80090cc:	ecbd 8b02 	vpop	{d8}
 80090d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d4:	4642      	mov	r2, r8
 80090d6:	464b      	mov	r3, r9
 80090d8:	4640      	mov	r0, r8
 80090da:	4649      	mov	r1, r9
 80090dc:	f7f7 fd26 	bl	8000b2c <__aeabi_dcmpun>
 80090e0:	b140      	cbz	r0, 80090f4 <_printf_float+0xf0>
 80090e2:	464b      	mov	r3, r9
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	bfbc      	itt	lt
 80090e8:	232d      	movlt	r3, #45	; 0x2d
 80090ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80090ee:	487f      	ldr	r0, [pc, #508]	; (80092ec <_printf_float+0x2e8>)
 80090f0:	4b7f      	ldr	r3, [pc, #508]	; (80092f0 <_printf_float+0x2ec>)
 80090f2:	e7d1      	b.n	8009098 <_printf_float+0x94>
 80090f4:	6863      	ldr	r3, [r4, #4]
 80090f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80090fa:	9206      	str	r2, [sp, #24]
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	d13f      	bne.n	8009180 <_printf_float+0x17c>
 8009100:	2306      	movs	r3, #6
 8009102:	6063      	str	r3, [r4, #4]
 8009104:	9b05      	ldr	r3, [sp, #20]
 8009106:	6861      	ldr	r1, [r4, #4]
 8009108:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800910c:	2300      	movs	r3, #0
 800910e:	9303      	str	r3, [sp, #12]
 8009110:	ab0a      	add	r3, sp, #40	; 0x28
 8009112:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009116:	ab09      	add	r3, sp, #36	; 0x24
 8009118:	ec49 8b10 	vmov	d0, r8, r9
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	6022      	str	r2, [r4, #0]
 8009120:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009124:	4628      	mov	r0, r5
 8009126:	f7ff fecd 	bl	8008ec4 <__cvt>
 800912a:	9b06      	ldr	r3, [sp, #24]
 800912c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800912e:	2b47      	cmp	r3, #71	; 0x47
 8009130:	4680      	mov	r8, r0
 8009132:	d108      	bne.n	8009146 <_printf_float+0x142>
 8009134:	1cc8      	adds	r0, r1, #3
 8009136:	db02      	blt.n	800913e <_printf_float+0x13a>
 8009138:	6863      	ldr	r3, [r4, #4]
 800913a:	4299      	cmp	r1, r3
 800913c:	dd41      	ble.n	80091c2 <_printf_float+0x1be>
 800913e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009142:	fa5f fb8b 	uxtb.w	fp, fp
 8009146:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800914a:	d820      	bhi.n	800918e <_printf_float+0x18a>
 800914c:	3901      	subs	r1, #1
 800914e:	465a      	mov	r2, fp
 8009150:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009154:	9109      	str	r1, [sp, #36]	; 0x24
 8009156:	f7ff ff17 	bl	8008f88 <__exponent>
 800915a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800915c:	1813      	adds	r3, r2, r0
 800915e:	2a01      	cmp	r2, #1
 8009160:	4681      	mov	r9, r0
 8009162:	6123      	str	r3, [r4, #16]
 8009164:	dc02      	bgt.n	800916c <_printf_float+0x168>
 8009166:	6822      	ldr	r2, [r4, #0]
 8009168:	07d2      	lsls	r2, r2, #31
 800916a:	d501      	bpl.n	8009170 <_printf_float+0x16c>
 800916c:	3301      	adds	r3, #1
 800916e:	6123      	str	r3, [r4, #16]
 8009170:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009174:	2b00      	cmp	r3, #0
 8009176:	d09c      	beq.n	80090b2 <_printf_float+0xae>
 8009178:	232d      	movs	r3, #45	; 0x2d
 800917a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800917e:	e798      	b.n	80090b2 <_printf_float+0xae>
 8009180:	9a06      	ldr	r2, [sp, #24]
 8009182:	2a47      	cmp	r2, #71	; 0x47
 8009184:	d1be      	bne.n	8009104 <_printf_float+0x100>
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1bc      	bne.n	8009104 <_printf_float+0x100>
 800918a:	2301      	movs	r3, #1
 800918c:	e7b9      	b.n	8009102 <_printf_float+0xfe>
 800918e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009192:	d118      	bne.n	80091c6 <_printf_float+0x1c2>
 8009194:	2900      	cmp	r1, #0
 8009196:	6863      	ldr	r3, [r4, #4]
 8009198:	dd0b      	ble.n	80091b2 <_printf_float+0x1ae>
 800919a:	6121      	str	r1, [r4, #16]
 800919c:	b913      	cbnz	r3, 80091a4 <_printf_float+0x1a0>
 800919e:	6822      	ldr	r2, [r4, #0]
 80091a0:	07d0      	lsls	r0, r2, #31
 80091a2:	d502      	bpl.n	80091aa <_printf_float+0x1a6>
 80091a4:	3301      	adds	r3, #1
 80091a6:	440b      	add	r3, r1
 80091a8:	6123      	str	r3, [r4, #16]
 80091aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80091ac:	f04f 0900 	mov.w	r9, #0
 80091b0:	e7de      	b.n	8009170 <_printf_float+0x16c>
 80091b2:	b913      	cbnz	r3, 80091ba <_printf_float+0x1b6>
 80091b4:	6822      	ldr	r2, [r4, #0]
 80091b6:	07d2      	lsls	r2, r2, #31
 80091b8:	d501      	bpl.n	80091be <_printf_float+0x1ba>
 80091ba:	3302      	adds	r3, #2
 80091bc:	e7f4      	b.n	80091a8 <_printf_float+0x1a4>
 80091be:	2301      	movs	r3, #1
 80091c0:	e7f2      	b.n	80091a8 <_printf_float+0x1a4>
 80091c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80091c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091c8:	4299      	cmp	r1, r3
 80091ca:	db05      	blt.n	80091d8 <_printf_float+0x1d4>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	6121      	str	r1, [r4, #16]
 80091d0:	07d8      	lsls	r0, r3, #31
 80091d2:	d5ea      	bpl.n	80091aa <_printf_float+0x1a6>
 80091d4:	1c4b      	adds	r3, r1, #1
 80091d6:	e7e7      	b.n	80091a8 <_printf_float+0x1a4>
 80091d8:	2900      	cmp	r1, #0
 80091da:	bfd4      	ite	le
 80091dc:	f1c1 0202 	rsble	r2, r1, #2
 80091e0:	2201      	movgt	r2, #1
 80091e2:	4413      	add	r3, r2
 80091e4:	e7e0      	b.n	80091a8 <_printf_float+0x1a4>
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	055a      	lsls	r2, r3, #21
 80091ea:	d407      	bmi.n	80091fc <_printf_float+0x1f8>
 80091ec:	6923      	ldr	r3, [r4, #16]
 80091ee:	4642      	mov	r2, r8
 80091f0:	4631      	mov	r1, r6
 80091f2:	4628      	mov	r0, r5
 80091f4:	47b8      	blx	r7
 80091f6:	3001      	adds	r0, #1
 80091f8:	d12c      	bne.n	8009254 <_printf_float+0x250>
 80091fa:	e764      	b.n	80090c6 <_printf_float+0xc2>
 80091fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009200:	f240 80e0 	bls.w	80093c4 <_printf_float+0x3c0>
 8009204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009208:	2200      	movs	r2, #0
 800920a:	2300      	movs	r3, #0
 800920c:	f7f7 fc5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009210:	2800      	cmp	r0, #0
 8009212:	d034      	beq.n	800927e <_printf_float+0x27a>
 8009214:	4a37      	ldr	r2, [pc, #220]	; (80092f4 <_printf_float+0x2f0>)
 8009216:	2301      	movs	r3, #1
 8009218:	4631      	mov	r1, r6
 800921a:	4628      	mov	r0, r5
 800921c:	47b8      	blx	r7
 800921e:	3001      	adds	r0, #1
 8009220:	f43f af51 	beq.w	80090c6 <_printf_float+0xc2>
 8009224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009228:	429a      	cmp	r2, r3
 800922a:	db02      	blt.n	8009232 <_printf_float+0x22e>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	07d8      	lsls	r0, r3, #31
 8009230:	d510      	bpl.n	8009254 <_printf_float+0x250>
 8009232:	ee18 3a10 	vmov	r3, s16
 8009236:	4652      	mov	r2, sl
 8009238:	4631      	mov	r1, r6
 800923a:	4628      	mov	r0, r5
 800923c:	47b8      	blx	r7
 800923e:	3001      	adds	r0, #1
 8009240:	f43f af41 	beq.w	80090c6 <_printf_float+0xc2>
 8009244:	f04f 0800 	mov.w	r8, #0
 8009248:	f104 091a 	add.w	r9, r4, #26
 800924c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800924e:	3b01      	subs	r3, #1
 8009250:	4543      	cmp	r3, r8
 8009252:	dc09      	bgt.n	8009268 <_printf_float+0x264>
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	079b      	lsls	r3, r3, #30
 8009258:	f100 8105 	bmi.w	8009466 <_printf_float+0x462>
 800925c:	68e0      	ldr	r0, [r4, #12]
 800925e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009260:	4298      	cmp	r0, r3
 8009262:	bfb8      	it	lt
 8009264:	4618      	movlt	r0, r3
 8009266:	e730      	b.n	80090ca <_printf_float+0xc6>
 8009268:	2301      	movs	r3, #1
 800926a:	464a      	mov	r2, r9
 800926c:	4631      	mov	r1, r6
 800926e:	4628      	mov	r0, r5
 8009270:	47b8      	blx	r7
 8009272:	3001      	adds	r0, #1
 8009274:	f43f af27 	beq.w	80090c6 <_printf_float+0xc2>
 8009278:	f108 0801 	add.w	r8, r8, #1
 800927c:	e7e6      	b.n	800924c <_printf_float+0x248>
 800927e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009280:	2b00      	cmp	r3, #0
 8009282:	dc39      	bgt.n	80092f8 <_printf_float+0x2f4>
 8009284:	4a1b      	ldr	r2, [pc, #108]	; (80092f4 <_printf_float+0x2f0>)
 8009286:	2301      	movs	r3, #1
 8009288:	4631      	mov	r1, r6
 800928a:	4628      	mov	r0, r5
 800928c:	47b8      	blx	r7
 800928e:	3001      	adds	r0, #1
 8009290:	f43f af19 	beq.w	80090c6 <_printf_float+0xc2>
 8009294:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009298:	4313      	orrs	r3, r2
 800929a:	d102      	bne.n	80092a2 <_printf_float+0x29e>
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	07d9      	lsls	r1, r3, #31
 80092a0:	d5d8      	bpl.n	8009254 <_printf_float+0x250>
 80092a2:	ee18 3a10 	vmov	r3, s16
 80092a6:	4652      	mov	r2, sl
 80092a8:	4631      	mov	r1, r6
 80092aa:	4628      	mov	r0, r5
 80092ac:	47b8      	blx	r7
 80092ae:	3001      	adds	r0, #1
 80092b0:	f43f af09 	beq.w	80090c6 <_printf_float+0xc2>
 80092b4:	f04f 0900 	mov.w	r9, #0
 80092b8:	f104 0a1a 	add.w	sl, r4, #26
 80092bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092be:	425b      	negs	r3, r3
 80092c0:	454b      	cmp	r3, r9
 80092c2:	dc01      	bgt.n	80092c8 <_printf_float+0x2c4>
 80092c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092c6:	e792      	b.n	80091ee <_printf_float+0x1ea>
 80092c8:	2301      	movs	r3, #1
 80092ca:	4652      	mov	r2, sl
 80092cc:	4631      	mov	r1, r6
 80092ce:	4628      	mov	r0, r5
 80092d0:	47b8      	blx	r7
 80092d2:	3001      	adds	r0, #1
 80092d4:	f43f aef7 	beq.w	80090c6 <_printf_float+0xc2>
 80092d8:	f109 0901 	add.w	r9, r9, #1
 80092dc:	e7ee      	b.n	80092bc <_printf_float+0x2b8>
 80092de:	bf00      	nop
 80092e0:	7fefffff 	.word	0x7fefffff
 80092e4:	0800bd70 	.word	0x0800bd70
 80092e8:	0800bd74 	.word	0x0800bd74
 80092ec:	0800bd7c 	.word	0x0800bd7c
 80092f0:	0800bd78 	.word	0x0800bd78
 80092f4:	0800bd80 	.word	0x0800bd80
 80092f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092fc:	429a      	cmp	r2, r3
 80092fe:	bfa8      	it	ge
 8009300:	461a      	movge	r2, r3
 8009302:	2a00      	cmp	r2, #0
 8009304:	4691      	mov	r9, r2
 8009306:	dc37      	bgt.n	8009378 <_printf_float+0x374>
 8009308:	f04f 0b00 	mov.w	fp, #0
 800930c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009310:	f104 021a 	add.w	r2, r4, #26
 8009314:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009316:	9305      	str	r3, [sp, #20]
 8009318:	eba3 0309 	sub.w	r3, r3, r9
 800931c:	455b      	cmp	r3, fp
 800931e:	dc33      	bgt.n	8009388 <_printf_float+0x384>
 8009320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009324:	429a      	cmp	r2, r3
 8009326:	db3b      	blt.n	80093a0 <_printf_float+0x39c>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	07da      	lsls	r2, r3, #31
 800932c:	d438      	bmi.n	80093a0 <_printf_float+0x39c>
 800932e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009330:	9b05      	ldr	r3, [sp, #20]
 8009332:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009334:	1ad3      	subs	r3, r2, r3
 8009336:	eba2 0901 	sub.w	r9, r2, r1
 800933a:	4599      	cmp	r9, r3
 800933c:	bfa8      	it	ge
 800933e:	4699      	movge	r9, r3
 8009340:	f1b9 0f00 	cmp.w	r9, #0
 8009344:	dc35      	bgt.n	80093b2 <_printf_float+0x3ae>
 8009346:	f04f 0800 	mov.w	r8, #0
 800934a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800934e:	f104 0a1a 	add.w	sl, r4, #26
 8009352:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009356:	1a9b      	subs	r3, r3, r2
 8009358:	eba3 0309 	sub.w	r3, r3, r9
 800935c:	4543      	cmp	r3, r8
 800935e:	f77f af79 	ble.w	8009254 <_printf_float+0x250>
 8009362:	2301      	movs	r3, #1
 8009364:	4652      	mov	r2, sl
 8009366:	4631      	mov	r1, r6
 8009368:	4628      	mov	r0, r5
 800936a:	47b8      	blx	r7
 800936c:	3001      	adds	r0, #1
 800936e:	f43f aeaa 	beq.w	80090c6 <_printf_float+0xc2>
 8009372:	f108 0801 	add.w	r8, r8, #1
 8009376:	e7ec      	b.n	8009352 <_printf_float+0x34e>
 8009378:	4613      	mov	r3, r2
 800937a:	4631      	mov	r1, r6
 800937c:	4642      	mov	r2, r8
 800937e:	4628      	mov	r0, r5
 8009380:	47b8      	blx	r7
 8009382:	3001      	adds	r0, #1
 8009384:	d1c0      	bne.n	8009308 <_printf_float+0x304>
 8009386:	e69e      	b.n	80090c6 <_printf_float+0xc2>
 8009388:	2301      	movs	r3, #1
 800938a:	4631      	mov	r1, r6
 800938c:	4628      	mov	r0, r5
 800938e:	9205      	str	r2, [sp, #20]
 8009390:	47b8      	blx	r7
 8009392:	3001      	adds	r0, #1
 8009394:	f43f ae97 	beq.w	80090c6 <_printf_float+0xc2>
 8009398:	9a05      	ldr	r2, [sp, #20]
 800939a:	f10b 0b01 	add.w	fp, fp, #1
 800939e:	e7b9      	b.n	8009314 <_printf_float+0x310>
 80093a0:	ee18 3a10 	vmov	r3, s16
 80093a4:	4652      	mov	r2, sl
 80093a6:	4631      	mov	r1, r6
 80093a8:	4628      	mov	r0, r5
 80093aa:	47b8      	blx	r7
 80093ac:	3001      	adds	r0, #1
 80093ae:	d1be      	bne.n	800932e <_printf_float+0x32a>
 80093b0:	e689      	b.n	80090c6 <_printf_float+0xc2>
 80093b2:	9a05      	ldr	r2, [sp, #20]
 80093b4:	464b      	mov	r3, r9
 80093b6:	4442      	add	r2, r8
 80093b8:	4631      	mov	r1, r6
 80093ba:	4628      	mov	r0, r5
 80093bc:	47b8      	blx	r7
 80093be:	3001      	adds	r0, #1
 80093c0:	d1c1      	bne.n	8009346 <_printf_float+0x342>
 80093c2:	e680      	b.n	80090c6 <_printf_float+0xc2>
 80093c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093c6:	2a01      	cmp	r2, #1
 80093c8:	dc01      	bgt.n	80093ce <_printf_float+0x3ca>
 80093ca:	07db      	lsls	r3, r3, #31
 80093cc:	d538      	bpl.n	8009440 <_printf_float+0x43c>
 80093ce:	2301      	movs	r3, #1
 80093d0:	4642      	mov	r2, r8
 80093d2:	4631      	mov	r1, r6
 80093d4:	4628      	mov	r0, r5
 80093d6:	47b8      	blx	r7
 80093d8:	3001      	adds	r0, #1
 80093da:	f43f ae74 	beq.w	80090c6 <_printf_float+0xc2>
 80093de:	ee18 3a10 	vmov	r3, s16
 80093e2:	4652      	mov	r2, sl
 80093e4:	4631      	mov	r1, r6
 80093e6:	4628      	mov	r0, r5
 80093e8:	47b8      	blx	r7
 80093ea:	3001      	adds	r0, #1
 80093ec:	f43f ae6b 	beq.w	80090c6 <_printf_float+0xc2>
 80093f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093f4:	2200      	movs	r2, #0
 80093f6:	2300      	movs	r3, #0
 80093f8:	f7f7 fb66 	bl	8000ac8 <__aeabi_dcmpeq>
 80093fc:	b9d8      	cbnz	r0, 8009436 <_printf_float+0x432>
 80093fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009400:	f108 0201 	add.w	r2, r8, #1
 8009404:	3b01      	subs	r3, #1
 8009406:	4631      	mov	r1, r6
 8009408:	4628      	mov	r0, r5
 800940a:	47b8      	blx	r7
 800940c:	3001      	adds	r0, #1
 800940e:	d10e      	bne.n	800942e <_printf_float+0x42a>
 8009410:	e659      	b.n	80090c6 <_printf_float+0xc2>
 8009412:	2301      	movs	r3, #1
 8009414:	4652      	mov	r2, sl
 8009416:	4631      	mov	r1, r6
 8009418:	4628      	mov	r0, r5
 800941a:	47b8      	blx	r7
 800941c:	3001      	adds	r0, #1
 800941e:	f43f ae52 	beq.w	80090c6 <_printf_float+0xc2>
 8009422:	f108 0801 	add.w	r8, r8, #1
 8009426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009428:	3b01      	subs	r3, #1
 800942a:	4543      	cmp	r3, r8
 800942c:	dcf1      	bgt.n	8009412 <_printf_float+0x40e>
 800942e:	464b      	mov	r3, r9
 8009430:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009434:	e6dc      	b.n	80091f0 <_printf_float+0x1ec>
 8009436:	f04f 0800 	mov.w	r8, #0
 800943a:	f104 0a1a 	add.w	sl, r4, #26
 800943e:	e7f2      	b.n	8009426 <_printf_float+0x422>
 8009440:	2301      	movs	r3, #1
 8009442:	4642      	mov	r2, r8
 8009444:	e7df      	b.n	8009406 <_printf_float+0x402>
 8009446:	2301      	movs	r3, #1
 8009448:	464a      	mov	r2, r9
 800944a:	4631      	mov	r1, r6
 800944c:	4628      	mov	r0, r5
 800944e:	47b8      	blx	r7
 8009450:	3001      	adds	r0, #1
 8009452:	f43f ae38 	beq.w	80090c6 <_printf_float+0xc2>
 8009456:	f108 0801 	add.w	r8, r8, #1
 800945a:	68e3      	ldr	r3, [r4, #12]
 800945c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800945e:	1a5b      	subs	r3, r3, r1
 8009460:	4543      	cmp	r3, r8
 8009462:	dcf0      	bgt.n	8009446 <_printf_float+0x442>
 8009464:	e6fa      	b.n	800925c <_printf_float+0x258>
 8009466:	f04f 0800 	mov.w	r8, #0
 800946a:	f104 0919 	add.w	r9, r4, #25
 800946e:	e7f4      	b.n	800945a <_printf_float+0x456>

08009470 <_printf_common>:
 8009470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009474:	4616      	mov	r6, r2
 8009476:	4699      	mov	r9, r3
 8009478:	688a      	ldr	r2, [r1, #8]
 800947a:	690b      	ldr	r3, [r1, #16]
 800947c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009480:	4293      	cmp	r3, r2
 8009482:	bfb8      	it	lt
 8009484:	4613      	movlt	r3, r2
 8009486:	6033      	str	r3, [r6, #0]
 8009488:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800948c:	4607      	mov	r7, r0
 800948e:	460c      	mov	r4, r1
 8009490:	b10a      	cbz	r2, 8009496 <_printf_common+0x26>
 8009492:	3301      	adds	r3, #1
 8009494:	6033      	str	r3, [r6, #0]
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	0699      	lsls	r1, r3, #26
 800949a:	bf42      	ittt	mi
 800949c:	6833      	ldrmi	r3, [r6, #0]
 800949e:	3302      	addmi	r3, #2
 80094a0:	6033      	strmi	r3, [r6, #0]
 80094a2:	6825      	ldr	r5, [r4, #0]
 80094a4:	f015 0506 	ands.w	r5, r5, #6
 80094a8:	d106      	bne.n	80094b8 <_printf_common+0x48>
 80094aa:	f104 0a19 	add.w	sl, r4, #25
 80094ae:	68e3      	ldr	r3, [r4, #12]
 80094b0:	6832      	ldr	r2, [r6, #0]
 80094b2:	1a9b      	subs	r3, r3, r2
 80094b4:	42ab      	cmp	r3, r5
 80094b6:	dc26      	bgt.n	8009506 <_printf_common+0x96>
 80094b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094bc:	1e13      	subs	r3, r2, #0
 80094be:	6822      	ldr	r2, [r4, #0]
 80094c0:	bf18      	it	ne
 80094c2:	2301      	movne	r3, #1
 80094c4:	0692      	lsls	r2, r2, #26
 80094c6:	d42b      	bmi.n	8009520 <_printf_common+0xb0>
 80094c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094cc:	4649      	mov	r1, r9
 80094ce:	4638      	mov	r0, r7
 80094d0:	47c0      	blx	r8
 80094d2:	3001      	adds	r0, #1
 80094d4:	d01e      	beq.n	8009514 <_printf_common+0xa4>
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	68e5      	ldr	r5, [r4, #12]
 80094da:	6832      	ldr	r2, [r6, #0]
 80094dc:	f003 0306 	and.w	r3, r3, #6
 80094e0:	2b04      	cmp	r3, #4
 80094e2:	bf08      	it	eq
 80094e4:	1aad      	subeq	r5, r5, r2
 80094e6:	68a3      	ldr	r3, [r4, #8]
 80094e8:	6922      	ldr	r2, [r4, #16]
 80094ea:	bf0c      	ite	eq
 80094ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094f0:	2500      	movne	r5, #0
 80094f2:	4293      	cmp	r3, r2
 80094f4:	bfc4      	itt	gt
 80094f6:	1a9b      	subgt	r3, r3, r2
 80094f8:	18ed      	addgt	r5, r5, r3
 80094fa:	2600      	movs	r6, #0
 80094fc:	341a      	adds	r4, #26
 80094fe:	42b5      	cmp	r5, r6
 8009500:	d11a      	bne.n	8009538 <_printf_common+0xc8>
 8009502:	2000      	movs	r0, #0
 8009504:	e008      	b.n	8009518 <_printf_common+0xa8>
 8009506:	2301      	movs	r3, #1
 8009508:	4652      	mov	r2, sl
 800950a:	4649      	mov	r1, r9
 800950c:	4638      	mov	r0, r7
 800950e:	47c0      	blx	r8
 8009510:	3001      	adds	r0, #1
 8009512:	d103      	bne.n	800951c <_printf_common+0xac>
 8009514:	f04f 30ff 	mov.w	r0, #4294967295
 8009518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800951c:	3501      	adds	r5, #1
 800951e:	e7c6      	b.n	80094ae <_printf_common+0x3e>
 8009520:	18e1      	adds	r1, r4, r3
 8009522:	1c5a      	adds	r2, r3, #1
 8009524:	2030      	movs	r0, #48	; 0x30
 8009526:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800952a:	4422      	add	r2, r4
 800952c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009534:	3302      	adds	r3, #2
 8009536:	e7c7      	b.n	80094c8 <_printf_common+0x58>
 8009538:	2301      	movs	r3, #1
 800953a:	4622      	mov	r2, r4
 800953c:	4649      	mov	r1, r9
 800953e:	4638      	mov	r0, r7
 8009540:	47c0      	blx	r8
 8009542:	3001      	adds	r0, #1
 8009544:	d0e6      	beq.n	8009514 <_printf_common+0xa4>
 8009546:	3601      	adds	r6, #1
 8009548:	e7d9      	b.n	80094fe <_printf_common+0x8e>
	...

0800954c <_printf_i>:
 800954c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009550:	460c      	mov	r4, r1
 8009552:	4691      	mov	r9, r2
 8009554:	7e27      	ldrb	r7, [r4, #24]
 8009556:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009558:	2f78      	cmp	r7, #120	; 0x78
 800955a:	4680      	mov	r8, r0
 800955c:	469a      	mov	sl, r3
 800955e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009562:	d807      	bhi.n	8009574 <_printf_i+0x28>
 8009564:	2f62      	cmp	r7, #98	; 0x62
 8009566:	d80a      	bhi.n	800957e <_printf_i+0x32>
 8009568:	2f00      	cmp	r7, #0
 800956a:	f000 80d8 	beq.w	800971e <_printf_i+0x1d2>
 800956e:	2f58      	cmp	r7, #88	; 0x58
 8009570:	f000 80a3 	beq.w	80096ba <_printf_i+0x16e>
 8009574:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800957c:	e03a      	b.n	80095f4 <_printf_i+0xa8>
 800957e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009582:	2b15      	cmp	r3, #21
 8009584:	d8f6      	bhi.n	8009574 <_printf_i+0x28>
 8009586:	a001      	add	r0, pc, #4	; (adr r0, 800958c <_printf_i+0x40>)
 8009588:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800958c:	080095e5 	.word	0x080095e5
 8009590:	080095f9 	.word	0x080095f9
 8009594:	08009575 	.word	0x08009575
 8009598:	08009575 	.word	0x08009575
 800959c:	08009575 	.word	0x08009575
 80095a0:	08009575 	.word	0x08009575
 80095a4:	080095f9 	.word	0x080095f9
 80095a8:	08009575 	.word	0x08009575
 80095ac:	08009575 	.word	0x08009575
 80095b0:	08009575 	.word	0x08009575
 80095b4:	08009575 	.word	0x08009575
 80095b8:	08009705 	.word	0x08009705
 80095bc:	08009629 	.word	0x08009629
 80095c0:	080096e7 	.word	0x080096e7
 80095c4:	08009575 	.word	0x08009575
 80095c8:	08009575 	.word	0x08009575
 80095cc:	08009727 	.word	0x08009727
 80095d0:	08009575 	.word	0x08009575
 80095d4:	08009629 	.word	0x08009629
 80095d8:	08009575 	.word	0x08009575
 80095dc:	08009575 	.word	0x08009575
 80095e0:	080096ef 	.word	0x080096ef
 80095e4:	680b      	ldr	r3, [r1, #0]
 80095e6:	1d1a      	adds	r2, r3, #4
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	600a      	str	r2, [r1, #0]
 80095ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80095f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095f4:	2301      	movs	r3, #1
 80095f6:	e0a3      	b.n	8009740 <_printf_i+0x1f4>
 80095f8:	6825      	ldr	r5, [r4, #0]
 80095fa:	6808      	ldr	r0, [r1, #0]
 80095fc:	062e      	lsls	r6, r5, #24
 80095fe:	f100 0304 	add.w	r3, r0, #4
 8009602:	d50a      	bpl.n	800961a <_printf_i+0xce>
 8009604:	6805      	ldr	r5, [r0, #0]
 8009606:	600b      	str	r3, [r1, #0]
 8009608:	2d00      	cmp	r5, #0
 800960a:	da03      	bge.n	8009614 <_printf_i+0xc8>
 800960c:	232d      	movs	r3, #45	; 0x2d
 800960e:	426d      	negs	r5, r5
 8009610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009614:	485e      	ldr	r0, [pc, #376]	; (8009790 <_printf_i+0x244>)
 8009616:	230a      	movs	r3, #10
 8009618:	e019      	b.n	800964e <_printf_i+0x102>
 800961a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800961e:	6805      	ldr	r5, [r0, #0]
 8009620:	600b      	str	r3, [r1, #0]
 8009622:	bf18      	it	ne
 8009624:	b22d      	sxthne	r5, r5
 8009626:	e7ef      	b.n	8009608 <_printf_i+0xbc>
 8009628:	680b      	ldr	r3, [r1, #0]
 800962a:	6825      	ldr	r5, [r4, #0]
 800962c:	1d18      	adds	r0, r3, #4
 800962e:	6008      	str	r0, [r1, #0]
 8009630:	0628      	lsls	r0, r5, #24
 8009632:	d501      	bpl.n	8009638 <_printf_i+0xec>
 8009634:	681d      	ldr	r5, [r3, #0]
 8009636:	e002      	b.n	800963e <_printf_i+0xf2>
 8009638:	0669      	lsls	r1, r5, #25
 800963a:	d5fb      	bpl.n	8009634 <_printf_i+0xe8>
 800963c:	881d      	ldrh	r5, [r3, #0]
 800963e:	4854      	ldr	r0, [pc, #336]	; (8009790 <_printf_i+0x244>)
 8009640:	2f6f      	cmp	r7, #111	; 0x6f
 8009642:	bf0c      	ite	eq
 8009644:	2308      	moveq	r3, #8
 8009646:	230a      	movne	r3, #10
 8009648:	2100      	movs	r1, #0
 800964a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800964e:	6866      	ldr	r6, [r4, #4]
 8009650:	60a6      	str	r6, [r4, #8]
 8009652:	2e00      	cmp	r6, #0
 8009654:	bfa2      	ittt	ge
 8009656:	6821      	ldrge	r1, [r4, #0]
 8009658:	f021 0104 	bicge.w	r1, r1, #4
 800965c:	6021      	strge	r1, [r4, #0]
 800965e:	b90d      	cbnz	r5, 8009664 <_printf_i+0x118>
 8009660:	2e00      	cmp	r6, #0
 8009662:	d04d      	beq.n	8009700 <_printf_i+0x1b4>
 8009664:	4616      	mov	r6, r2
 8009666:	fbb5 f1f3 	udiv	r1, r5, r3
 800966a:	fb03 5711 	mls	r7, r3, r1, r5
 800966e:	5dc7      	ldrb	r7, [r0, r7]
 8009670:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009674:	462f      	mov	r7, r5
 8009676:	42bb      	cmp	r3, r7
 8009678:	460d      	mov	r5, r1
 800967a:	d9f4      	bls.n	8009666 <_printf_i+0x11a>
 800967c:	2b08      	cmp	r3, #8
 800967e:	d10b      	bne.n	8009698 <_printf_i+0x14c>
 8009680:	6823      	ldr	r3, [r4, #0]
 8009682:	07df      	lsls	r7, r3, #31
 8009684:	d508      	bpl.n	8009698 <_printf_i+0x14c>
 8009686:	6923      	ldr	r3, [r4, #16]
 8009688:	6861      	ldr	r1, [r4, #4]
 800968a:	4299      	cmp	r1, r3
 800968c:	bfde      	ittt	le
 800968e:	2330      	movle	r3, #48	; 0x30
 8009690:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009694:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009698:	1b92      	subs	r2, r2, r6
 800969a:	6122      	str	r2, [r4, #16]
 800969c:	f8cd a000 	str.w	sl, [sp]
 80096a0:	464b      	mov	r3, r9
 80096a2:	aa03      	add	r2, sp, #12
 80096a4:	4621      	mov	r1, r4
 80096a6:	4640      	mov	r0, r8
 80096a8:	f7ff fee2 	bl	8009470 <_printf_common>
 80096ac:	3001      	adds	r0, #1
 80096ae:	d14c      	bne.n	800974a <_printf_i+0x1fe>
 80096b0:	f04f 30ff 	mov.w	r0, #4294967295
 80096b4:	b004      	add	sp, #16
 80096b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ba:	4835      	ldr	r0, [pc, #212]	; (8009790 <_printf_i+0x244>)
 80096bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	680e      	ldr	r6, [r1, #0]
 80096c4:	061f      	lsls	r7, r3, #24
 80096c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80096ca:	600e      	str	r6, [r1, #0]
 80096cc:	d514      	bpl.n	80096f8 <_printf_i+0x1ac>
 80096ce:	07d9      	lsls	r1, r3, #31
 80096d0:	bf44      	itt	mi
 80096d2:	f043 0320 	orrmi.w	r3, r3, #32
 80096d6:	6023      	strmi	r3, [r4, #0]
 80096d8:	b91d      	cbnz	r5, 80096e2 <_printf_i+0x196>
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	f023 0320 	bic.w	r3, r3, #32
 80096e0:	6023      	str	r3, [r4, #0]
 80096e2:	2310      	movs	r3, #16
 80096e4:	e7b0      	b.n	8009648 <_printf_i+0xfc>
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	f043 0320 	orr.w	r3, r3, #32
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	2378      	movs	r3, #120	; 0x78
 80096f0:	4828      	ldr	r0, [pc, #160]	; (8009794 <_printf_i+0x248>)
 80096f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096f6:	e7e3      	b.n	80096c0 <_printf_i+0x174>
 80096f8:	065e      	lsls	r6, r3, #25
 80096fa:	bf48      	it	mi
 80096fc:	b2ad      	uxthmi	r5, r5
 80096fe:	e7e6      	b.n	80096ce <_printf_i+0x182>
 8009700:	4616      	mov	r6, r2
 8009702:	e7bb      	b.n	800967c <_printf_i+0x130>
 8009704:	680b      	ldr	r3, [r1, #0]
 8009706:	6826      	ldr	r6, [r4, #0]
 8009708:	6960      	ldr	r0, [r4, #20]
 800970a:	1d1d      	adds	r5, r3, #4
 800970c:	600d      	str	r5, [r1, #0]
 800970e:	0635      	lsls	r5, r6, #24
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	d501      	bpl.n	8009718 <_printf_i+0x1cc>
 8009714:	6018      	str	r0, [r3, #0]
 8009716:	e002      	b.n	800971e <_printf_i+0x1d2>
 8009718:	0671      	lsls	r1, r6, #25
 800971a:	d5fb      	bpl.n	8009714 <_printf_i+0x1c8>
 800971c:	8018      	strh	r0, [r3, #0]
 800971e:	2300      	movs	r3, #0
 8009720:	6123      	str	r3, [r4, #16]
 8009722:	4616      	mov	r6, r2
 8009724:	e7ba      	b.n	800969c <_printf_i+0x150>
 8009726:	680b      	ldr	r3, [r1, #0]
 8009728:	1d1a      	adds	r2, r3, #4
 800972a:	600a      	str	r2, [r1, #0]
 800972c:	681e      	ldr	r6, [r3, #0]
 800972e:	6862      	ldr	r2, [r4, #4]
 8009730:	2100      	movs	r1, #0
 8009732:	4630      	mov	r0, r6
 8009734:	f7f6 fd54 	bl	80001e0 <memchr>
 8009738:	b108      	cbz	r0, 800973e <_printf_i+0x1f2>
 800973a:	1b80      	subs	r0, r0, r6
 800973c:	6060      	str	r0, [r4, #4]
 800973e:	6863      	ldr	r3, [r4, #4]
 8009740:	6123      	str	r3, [r4, #16]
 8009742:	2300      	movs	r3, #0
 8009744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009748:	e7a8      	b.n	800969c <_printf_i+0x150>
 800974a:	6923      	ldr	r3, [r4, #16]
 800974c:	4632      	mov	r2, r6
 800974e:	4649      	mov	r1, r9
 8009750:	4640      	mov	r0, r8
 8009752:	47d0      	blx	sl
 8009754:	3001      	adds	r0, #1
 8009756:	d0ab      	beq.n	80096b0 <_printf_i+0x164>
 8009758:	6823      	ldr	r3, [r4, #0]
 800975a:	079b      	lsls	r3, r3, #30
 800975c:	d413      	bmi.n	8009786 <_printf_i+0x23a>
 800975e:	68e0      	ldr	r0, [r4, #12]
 8009760:	9b03      	ldr	r3, [sp, #12]
 8009762:	4298      	cmp	r0, r3
 8009764:	bfb8      	it	lt
 8009766:	4618      	movlt	r0, r3
 8009768:	e7a4      	b.n	80096b4 <_printf_i+0x168>
 800976a:	2301      	movs	r3, #1
 800976c:	4632      	mov	r2, r6
 800976e:	4649      	mov	r1, r9
 8009770:	4640      	mov	r0, r8
 8009772:	47d0      	blx	sl
 8009774:	3001      	adds	r0, #1
 8009776:	d09b      	beq.n	80096b0 <_printf_i+0x164>
 8009778:	3501      	adds	r5, #1
 800977a:	68e3      	ldr	r3, [r4, #12]
 800977c:	9903      	ldr	r1, [sp, #12]
 800977e:	1a5b      	subs	r3, r3, r1
 8009780:	42ab      	cmp	r3, r5
 8009782:	dcf2      	bgt.n	800976a <_printf_i+0x21e>
 8009784:	e7eb      	b.n	800975e <_printf_i+0x212>
 8009786:	2500      	movs	r5, #0
 8009788:	f104 0619 	add.w	r6, r4, #25
 800978c:	e7f5      	b.n	800977a <_printf_i+0x22e>
 800978e:	bf00      	nop
 8009790:	0800bd82 	.word	0x0800bd82
 8009794:	0800bd93 	.word	0x0800bd93

08009798 <iprintf>:
 8009798:	b40f      	push	{r0, r1, r2, r3}
 800979a:	4b0a      	ldr	r3, [pc, #40]	; (80097c4 <iprintf+0x2c>)
 800979c:	b513      	push	{r0, r1, r4, lr}
 800979e:	681c      	ldr	r4, [r3, #0]
 80097a0:	b124      	cbz	r4, 80097ac <iprintf+0x14>
 80097a2:	69a3      	ldr	r3, [r4, #24]
 80097a4:	b913      	cbnz	r3, 80097ac <iprintf+0x14>
 80097a6:	4620      	mov	r0, r4
 80097a8:	f000 fee6 	bl	800a578 <__sinit>
 80097ac:	ab05      	add	r3, sp, #20
 80097ae:	9a04      	ldr	r2, [sp, #16]
 80097b0:	68a1      	ldr	r1, [r4, #8]
 80097b2:	9301      	str	r3, [sp, #4]
 80097b4:	4620      	mov	r0, r4
 80097b6:	f001 fbef 	bl	800af98 <_vfiprintf_r>
 80097ba:	b002      	add	sp, #8
 80097bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097c0:	b004      	add	sp, #16
 80097c2:	4770      	bx	lr
 80097c4:	200002cc 	.word	0x200002cc

080097c8 <strcpy>:
 80097c8:	4603      	mov	r3, r0
 80097ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097ce:	f803 2b01 	strb.w	r2, [r3], #1
 80097d2:	2a00      	cmp	r2, #0
 80097d4:	d1f9      	bne.n	80097ca <strcpy+0x2>
 80097d6:	4770      	bx	lr

080097d8 <quorem>:
 80097d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097dc:	6903      	ldr	r3, [r0, #16]
 80097de:	690c      	ldr	r4, [r1, #16]
 80097e0:	42a3      	cmp	r3, r4
 80097e2:	4607      	mov	r7, r0
 80097e4:	f2c0 8081 	blt.w	80098ea <quorem+0x112>
 80097e8:	3c01      	subs	r4, #1
 80097ea:	f101 0814 	add.w	r8, r1, #20
 80097ee:	f100 0514 	add.w	r5, r0, #20
 80097f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80097fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009800:	3301      	adds	r3, #1
 8009802:	429a      	cmp	r2, r3
 8009804:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009808:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800980c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009810:	d331      	bcc.n	8009876 <quorem+0x9e>
 8009812:	f04f 0e00 	mov.w	lr, #0
 8009816:	4640      	mov	r0, r8
 8009818:	46ac      	mov	ip, r5
 800981a:	46f2      	mov	sl, lr
 800981c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009820:	b293      	uxth	r3, r2
 8009822:	fb06 e303 	mla	r3, r6, r3, lr
 8009826:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800982a:	b29b      	uxth	r3, r3
 800982c:	ebaa 0303 	sub.w	r3, sl, r3
 8009830:	0c12      	lsrs	r2, r2, #16
 8009832:	f8dc a000 	ldr.w	sl, [ip]
 8009836:	fb06 e202 	mla	r2, r6, r2, lr
 800983a:	fa13 f38a 	uxtah	r3, r3, sl
 800983e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009842:	fa1f fa82 	uxth.w	sl, r2
 8009846:	f8dc 2000 	ldr.w	r2, [ip]
 800984a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800984e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009852:	b29b      	uxth	r3, r3
 8009854:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009858:	4581      	cmp	r9, r0
 800985a:	f84c 3b04 	str.w	r3, [ip], #4
 800985e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009862:	d2db      	bcs.n	800981c <quorem+0x44>
 8009864:	f855 300b 	ldr.w	r3, [r5, fp]
 8009868:	b92b      	cbnz	r3, 8009876 <quorem+0x9e>
 800986a:	9b01      	ldr	r3, [sp, #4]
 800986c:	3b04      	subs	r3, #4
 800986e:	429d      	cmp	r5, r3
 8009870:	461a      	mov	r2, r3
 8009872:	d32e      	bcc.n	80098d2 <quorem+0xfa>
 8009874:	613c      	str	r4, [r7, #16]
 8009876:	4638      	mov	r0, r7
 8009878:	f001 f9aa 	bl	800abd0 <__mcmp>
 800987c:	2800      	cmp	r0, #0
 800987e:	db24      	blt.n	80098ca <quorem+0xf2>
 8009880:	3601      	adds	r6, #1
 8009882:	4628      	mov	r0, r5
 8009884:	f04f 0c00 	mov.w	ip, #0
 8009888:	f858 2b04 	ldr.w	r2, [r8], #4
 800988c:	f8d0 e000 	ldr.w	lr, [r0]
 8009890:	b293      	uxth	r3, r2
 8009892:	ebac 0303 	sub.w	r3, ip, r3
 8009896:	0c12      	lsrs	r2, r2, #16
 8009898:	fa13 f38e 	uxtah	r3, r3, lr
 800989c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80098a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098aa:	45c1      	cmp	r9, r8
 80098ac:	f840 3b04 	str.w	r3, [r0], #4
 80098b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098b4:	d2e8      	bcs.n	8009888 <quorem+0xb0>
 80098b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098be:	b922      	cbnz	r2, 80098ca <quorem+0xf2>
 80098c0:	3b04      	subs	r3, #4
 80098c2:	429d      	cmp	r5, r3
 80098c4:	461a      	mov	r2, r3
 80098c6:	d30a      	bcc.n	80098de <quorem+0x106>
 80098c8:	613c      	str	r4, [r7, #16]
 80098ca:	4630      	mov	r0, r6
 80098cc:	b003      	add	sp, #12
 80098ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d2:	6812      	ldr	r2, [r2, #0]
 80098d4:	3b04      	subs	r3, #4
 80098d6:	2a00      	cmp	r2, #0
 80098d8:	d1cc      	bne.n	8009874 <quorem+0x9c>
 80098da:	3c01      	subs	r4, #1
 80098dc:	e7c7      	b.n	800986e <quorem+0x96>
 80098de:	6812      	ldr	r2, [r2, #0]
 80098e0:	3b04      	subs	r3, #4
 80098e2:	2a00      	cmp	r2, #0
 80098e4:	d1f0      	bne.n	80098c8 <quorem+0xf0>
 80098e6:	3c01      	subs	r4, #1
 80098e8:	e7eb      	b.n	80098c2 <quorem+0xea>
 80098ea:	2000      	movs	r0, #0
 80098ec:	e7ee      	b.n	80098cc <quorem+0xf4>
	...

080098f0 <_dtoa_r>:
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	ed2d 8b02 	vpush	{d8}
 80098f8:	ec57 6b10 	vmov	r6, r7, d0
 80098fc:	b095      	sub	sp, #84	; 0x54
 80098fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009900:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009904:	9105      	str	r1, [sp, #20]
 8009906:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800990a:	4604      	mov	r4, r0
 800990c:	9209      	str	r2, [sp, #36]	; 0x24
 800990e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009910:	b975      	cbnz	r5, 8009930 <_dtoa_r+0x40>
 8009912:	2010      	movs	r0, #16
 8009914:	f000 fed6 	bl	800a6c4 <malloc>
 8009918:	4602      	mov	r2, r0
 800991a:	6260      	str	r0, [r4, #36]	; 0x24
 800991c:	b920      	cbnz	r0, 8009928 <_dtoa_r+0x38>
 800991e:	4bb2      	ldr	r3, [pc, #712]	; (8009be8 <_dtoa_r+0x2f8>)
 8009920:	21ea      	movs	r1, #234	; 0xea
 8009922:	48b2      	ldr	r0, [pc, #712]	; (8009bec <_dtoa_r+0x2fc>)
 8009924:	f001 fd8e 	bl	800b444 <__assert_func>
 8009928:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800992c:	6005      	str	r5, [r0, #0]
 800992e:	60c5      	str	r5, [r0, #12]
 8009930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009932:	6819      	ldr	r1, [r3, #0]
 8009934:	b151      	cbz	r1, 800994c <_dtoa_r+0x5c>
 8009936:	685a      	ldr	r2, [r3, #4]
 8009938:	604a      	str	r2, [r1, #4]
 800993a:	2301      	movs	r3, #1
 800993c:	4093      	lsls	r3, r2
 800993e:	608b      	str	r3, [r1, #8]
 8009940:	4620      	mov	r0, r4
 8009942:	f000 ff07 	bl	800a754 <_Bfree>
 8009946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009948:	2200      	movs	r2, #0
 800994a:	601a      	str	r2, [r3, #0]
 800994c:	1e3b      	subs	r3, r7, #0
 800994e:	bfb9      	ittee	lt
 8009950:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009954:	9303      	strlt	r3, [sp, #12]
 8009956:	2300      	movge	r3, #0
 8009958:	f8c8 3000 	strge.w	r3, [r8]
 800995c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009960:	4ba3      	ldr	r3, [pc, #652]	; (8009bf0 <_dtoa_r+0x300>)
 8009962:	bfbc      	itt	lt
 8009964:	2201      	movlt	r2, #1
 8009966:	f8c8 2000 	strlt.w	r2, [r8]
 800996a:	ea33 0309 	bics.w	r3, r3, r9
 800996e:	d11b      	bne.n	80099a8 <_dtoa_r+0xb8>
 8009970:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009972:	f242 730f 	movw	r3, #9999	; 0x270f
 8009976:	6013      	str	r3, [r2, #0]
 8009978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800997c:	4333      	orrs	r3, r6
 800997e:	f000 857a 	beq.w	800a476 <_dtoa_r+0xb86>
 8009982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009984:	b963      	cbnz	r3, 80099a0 <_dtoa_r+0xb0>
 8009986:	4b9b      	ldr	r3, [pc, #620]	; (8009bf4 <_dtoa_r+0x304>)
 8009988:	e024      	b.n	80099d4 <_dtoa_r+0xe4>
 800998a:	4b9b      	ldr	r3, [pc, #620]	; (8009bf8 <_dtoa_r+0x308>)
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	3308      	adds	r3, #8
 8009990:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009992:	6013      	str	r3, [r2, #0]
 8009994:	9800      	ldr	r0, [sp, #0]
 8009996:	b015      	add	sp, #84	; 0x54
 8009998:	ecbd 8b02 	vpop	{d8}
 800999c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a0:	4b94      	ldr	r3, [pc, #592]	; (8009bf4 <_dtoa_r+0x304>)
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	3303      	adds	r3, #3
 80099a6:	e7f3      	b.n	8009990 <_dtoa_r+0xa0>
 80099a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099ac:	2200      	movs	r2, #0
 80099ae:	ec51 0b17 	vmov	r0, r1, d7
 80099b2:	2300      	movs	r3, #0
 80099b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80099b8:	f7f7 f886 	bl	8000ac8 <__aeabi_dcmpeq>
 80099bc:	4680      	mov	r8, r0
 80099be:	b158      	cbz	r0, 80099d8 <_dtoa_r+0xe8>
 80099c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099c2:	2301      	movs	r3, #1
 80099c4:	6013      	str	r3, [r2, #0]
 80099c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 8551 	beq.w	800a470 <_dtoa_r+0xb80>
 80099ce:	488b      	ldr	r0, [pc, #556]	; (8009bfc <_dtoa_r+0x30c>)
 80099d0:	6018      	str	r0, [r3, #0]
 80099d2:	1e43      	subs	r3, r0, #1
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	e7dd      	b.n	8009994 <_dtoa_r+0xa4>
 80099d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80099dc:	aa12      	add	r2, sp, #72	; 0x48
 80099de:	a913      	add	r1, sp, #76	; 0x4c
 80099e0:	4620      	mov	r0, r4
 80099e2:	f001 f999 	bl	800ad18 <__d2b>
 80099e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80099ea:	4683      	mov	fp, r0
 80099ec:	2d00      	cmp	r5, #0
 80099ee:	d07c      	beq.n	8009aea <_dtoa_r+0x1fa>
 80099f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80099f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80099fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009a02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009a06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a0a:	4b7d      	ldr	r3, [pc, #500]	; (8009c00 <_dtoa_r+0x310>)
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	4630      	mov	r0, r6
 8009a10:	4639      	mov	r1, r7
 8009a12:	f7f6 fc39 	bl	8000288 <__aeabi_dsub>
 8009a16:	a36e      	add	r3, pc, #440	; (adr r3, 8009bd0 <_dtoa_r+0x2e0>)
 8009a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1c:	f7f6 fdec 	bl	80005f8 <__aeabi_dmul>
 8009a20:	a36d      	add	r3, pc, #436	; (adr r3, 8009bd8 <_dtoa_r+0x2e8>)
 8009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a26:	f7f6 fc31 	bl	800028c <__adddf3>
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	460f      	mov	r7, r1
 8009a30:	f7f6 fd78 	bl	8000524 <__aeabi_i2d>
 8009a34:	a36a      	add	r3, pc, #424	; (adr r3, 8009be0 <_dtoa_r+0x2f0>)
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	f7f6 fddd 	bl	80005f8 <__aeabi_dmul>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	460b      	mov	r3, r1
 8009a42:	4630      	mov	r0, r6
 8009a44:	4639      	mov	r1, r7
 8009a46:	f7f6 fc21 	bl	800028c <__adddf3>
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	460f      	mov	r7, r1
 8009a4e:	f7f7 f883 	bl	8000b58 <__aeabi_d2iz>
 8009a52:	2200      	movs	r2, #0
 8009a54:	4682      	mov	sl, r0
 8009a56:	2300      	movs	r3, #0
 8009a58:	4630      	mov	r0, r6
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	f7f7 f83e 	bl	8000adc <__aeabi_dcmplt>
 8009a60:	b148      	cbz	r0, 8009a76 <_dtoa_r+0x186>
 8009a62:	4650      	mov	r0, sl
 8009a64:	f7f6 fd5e 	bl	8000524 <__aeabi_i2d>
 8009a68:	4632      	mov	r2, r6
 8009a6a:	463b      	mov	r3, r7
 8009a6c:	f7f7 f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a70:	b908      	cbnz	r0, 8009a76 <_dtoa_r+0x186>
 8009a72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a76:	f1ba 0f16 	cmp.w	sl, #22
 8009a7a:	d854      	bhi.n	8009b26 <_dtoa_r+0x236>
 8009a7c:	4b61      	ldr	r3, [pc, #388]	; (8009c04 <_dtoa_r+0x314>)
 8009a7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a8a:	f7f7 f827 	bl	8000adc <__aeabi_dcmplt>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d04b      	beq.n	8009b2a <_dtoa_r+0x23a>
 8009a92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a96:	2300      	movs	r3, #0
 8009a98:	930e      	str	r3, [sp, #56]	; 0x38
 8009a9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a9c:	1b5d      	subs	r5, r3, r5
 8009a9e:	1e6b      	subs	r3, r5, #1
 8009aa0:	9304      	str	r3, [sp, #16]
 8009aa2:	bf43      	ittte	mi
 8009aa4:	2300      	movmi	r3, #0
 8009aa6:	f1c5 0801 	rsbmi	r8, r5, #1
 8009aaa:	9304      	strmi	r3, [sp, #16]
 8009aac:	f04f 0800 	movpl.w	r8, #0
 8009ab0:	f1ba 0f00 	cmp.w	sl, #0
 8009ab4:	db3b      	blt.n	8009b2e <_dtoa_r+0x23e>
 8009ab6:	9b04      	ldr	r3, [sp, #16]
 8009ab8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009abc:	4453      	add	r3, sl
 8009abe:	9304      	str	r3, [sp, #16]
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	9306      	str	r3, [sp, #24]
 8009ac4:	9b05      	ldr	r3, [sp, #20]
 8009ac6:	2b09      	cmp	r3, #9
 8009ac8:	d869      	bhi.n	8009b9e <_dtoa_r+0x2ae>
 8009aca:	2b05      	cmp	r3, #5
 8009acc:	bfc4      	itt	gt
 8009ace:	3b04      	subgt	r3, #4
 8009ad0:	9305      	strgt	r3, [sp, #20]
 8009ad2:	9b05      	ldr	r3, [sp, #20]
 8009ad4:	f1a3 0302 	sub.w	r3, r3, #2
 8009ad8:	bfcc      	ite	gt
 8009ada:	2500      	movgt	r5, #0
 8009adc:	2501      	movle	r5, #1
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	d869      	bhi.n	8009bb6 <_dtoa_r+0x2c6>
 8009ae2:	e8df f003 	tbb	[pc, r3]
 8009ae6:	4e2c      	.short	0x4e2c
 8009ae8:	5a4c      	.short	0x5a4c
 8009aea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009aee:	441d      	add	r5, r3
 8009af0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009af4:	2b20      	cmp	r3, #32
 8009af6:	bfc1      	itttt	gt
 8009af8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009afc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009b00:	fa09 f303 	lslgt.w	r3, r9, r3
 8009b04:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b08:	bfda      	itte	le
 8009b0a:	f1c3 0320 	rsble	r3, r3, #32
 8009b0e:	fa06 f003 	lslle.w	r0, r6, r3
 8009b12:	4318      	orrgt	r0, r3
 8009b14:	f7f6 fcf6 	bl	8000504 <__aeabi_ui2d>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	4606      	mov	r6, r0
 8009b1c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009b20:	3d01      	subs	r5, #1
 8009b22:	9310      	str	r3, [sp, #64]	; 0x40
 8009b24:	e771      	b.n	8009a0a <_dtoa_r+0x11a>
 8009b26:	2301      	movs	r3, #1
 8009b28:	e7b6      	b.n	8009a98 <_dtoa_r+0x1a8>
 8009b2a:	900e      	str	r0, [sp, #56]	; 0x38
 8009b2c:	e7b5      	b.n	8009a9a <_dtoa_r+0x1aa>
 8009b2e:	f1ca 0300 	rsb	r3, sl, #0
 8009b32:	9306      	str	r3, [sp, #24]
 8009b34:	2300      	movs	r3, #0
 8009b36:	eba8 080a 	sub.w	r8, r8, sl
 8009b3a:	930d      	str	r3, [sp, #52]	; 0x34
 8009b3c:	e7c2      	b.n	8009ac4 <_dtoa_r+0x1d4>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	9308      	str	r3, [sp, #32]
 8009b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	dc39      	bgt.n	8009bbc <_dtoa_r+0x2cc>
 8009b48:	f04f 0901 	mov.w	r9, #1
 8009b4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b50:	464b      	mov	r3, r9
 8009b52:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009b56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009b58:	2200      	movs	r2, #0
 8009b5a:	6042      	str	r2, [r0, #4]
 8009b5c:	2204      	movs	r2, #4
 8009b5e:	f102 0614 	add.w	r6, r2, #20
 8009b62:	429e      	cmp	r6, r3
 8009b64:	6841      	ldr	r1, [r0, #4]
 8009b66:	d92f      	bls.n	8009bc8 <_dtoa_r+0x2d8>
 8009b68:	4620      	mov	r0, r4
 8009b6a:	f000 fdb3 	bl	800a6d4 <_Balloc>
 8009b6e:	9000      	str	r0, [sp, #0]
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d14b      	bne.n	8009c0c <_dtoa_r+0x31c>
 8009b74:	4b24      	ldr	r3, [pc, #144]	; (8009c08 <_dtoa_r+0x318>)
 8009b76:	4602      	mov	r2, r0
 8009b78:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b7c:	e6d1      	b.n	8009922 <_dtoa_r+0x32>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e7de      	b.n	8009b40 <_dtoa_r+0x250>
 8009b82:	2300      	movs	r3, #0
 8009b84:	9308      	str	r3, [sp, #32]
 8009b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b88:	eb0a 0903 	add.w	r9, sl, r3
 8009b8c:	f109 0301 	add.w	r3, r9, #1
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	9301      	str	r3, [sp, #4]
 8009b94:	bfb8      	it	lt
 8009b96:	2301      	movlt	r3, #1
 8009b98:	e7dd      	b.n	8009b56 <_dtoa_r+0x266>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e7f2      	b.n	8009b84 <_dtoa_r+0x294>
 8009b9e:	2501      	movs	r5, #1
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	9305      	str	r3, [sp, #20]
 8009ba4:	9508      	str	r5, [sp, #32]
 8009ba6:	f04f 39ff 	mov.w	r9, #4294967295
 8009baa:	2200      	movs	r2, #0
 8009bac:	f8cd 9004 	str.w	r9, [sp, #4]
 8009bb0:	2312      	movs	r3, #18
 8009bb2:	9209      	str	r2, [sp, #36]	; 0x24
 8009bb4:	e7cf      	b.n	8009b56 <_dtoa_r+0x266>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	9308      	str	r3, [sp, #32]
 8009bba:	e7f4      	b.n	8009ba6 <_dtoa_r+0x2b6>
 8009bbc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009bc0:	f8cd 9004 	str.w	r9, [sp, #4]
 8009bc4:	464b      	mov	r3, r9
 8009bc6:	e7c6      	b.n	8009b56 <_dtoa_r+0x266>
 8009bc8:	3101      	adds	r1, #1
 8009bca:	6041      	str	r1, [r0, #4]
 8009bcc:	0052      	lsls	r2, r2, #1
 8009bce:	e7c6      	b.n	8009b5e <_dtoa_r+0x26e>
 8009bd0:	636f4361 	.word	0x636f4361
 8009bd4:	3fd287a7 	.word	0x3fd287a7
 8009bd8:	8b60c8b3 	.word	0x8b60c8b3
 8009bdc:	3fc68a28 	.word	0x3fc68a28
 8009be0:	509f79fb 	.word	0x509f79fb
 8009be4:	3fd34413 	.word	0x3fd34413
 8009be8:	0800bdb1 	.word	0x0800bdb1
 8009bec:	0800bdc8 	.word	0x0800bdc8
 8009bf0:	7ff00000 	.word	0x7ff00000
 8009bf4:	0800bdad 	.word	0x0800bdad
 8009bf8:	0800bda4 	.word	0x0800bda4
 8009bfc:	0800bd81 	.word	0x0800bd81
 8009c00:	3ff80000 	.word	0x3ff80000
 8009c04:	0800bf20 	.word	0x0800bf20
 8009c08:	0800be27 	.word	0x0800be27
 8009c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c0e:	9a00      	ldr	r2, [sp, #0]
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	9b01      	ldr	r3, [sp, #4]
 8009c14:	2b0e      	cmp	r3, #14
 8009c16:	f200 80ad 	bhi.w	8009d74 <_dtoa_r+0x484>
 8009c1a:	2d00      	cmp	r5, #0
 8009c1c:	f000 80aa 	beq.w	8009d74 <_dtoa_r+0x484>
 8009c20:	f1ba 0f00 	cmp.w	sl, #0
 8009c24:	dd36      	ble.n	8009c94 <_dtoa_r+0x3a4>
 8009c26:	4ac3      	ldr	r2, [pc, #780]	; (8009f34 <_dtoa_r+0x644>)
 8009c28:	f00a 030f 	and.w	r3, sl, #15
 8009c2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c30:	ed93 7b00 	vldr	d7, [r3]
 8009c34:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009c38:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009c3c:	eeb0 8a47 	vmov.f32	s16, s14
 8009c40:	eef0 8a67 	vmov.f32	s17, s15
 8009c44:	d016      	beq.n	8009c74 <_dtoa_r+0x384>
 8009c46:	4bbc      	ldr	r3, [pc, #752]	; (8009f38 <_dtoa_r+0x648>)
 8009c48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c50:	f7f6 fdfc 	bl	800084c <__aeabi_ddiv>
 8009c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c58:	f007 070f 	and.w	r7, r7, #15
 8009c5c:	2503      	movs	r5, #3
 8009c5e:	4eb6      	ldr	r6, [pc, #728]	; (8009f38 <_dtoa_r+0x648>)
 8009c60:	b957      	cbnz	r7, 8009c78 <_dtoa_r+0x388>
 8009c62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c66:	ec53 2b18 	vmov	r2, r3, d8
 8009c6a:	f7f6 fdef 	bl	800084c <__aeabi_ddiv>
 8009c6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c72:	e029      	b.n	8009cc8 <_dtoa_r+0x3d8>
 8009c74:	2502      	movs	r5, #2
 8009c76:	e7f2      	b.n	8009c5e <_dtoa_r+0x36e>
 8009c78:	07f9      	lsls	r1, r7, #31
 8009c7a:	d508      	bpl.n	8009c8e <_dtoa_r+0x39e>
 8009c7c:	ec51 0b18 	vmov	r0, r1, d8
 8009c80:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c84:	f7f6 fcb8 	bl	80005f8 <__aeabi_dmul>
 8009c88:	ec41 0b18 	vmov	d8, r0, r1
 8009c8c:	3501      	adds	r5, #1
 8009c8e:	107f      	asrs	r7, r7, #1
 8009c90:	3608      	adds	r6, #8
 8009c92:	e7e5      	b.n	8009c60 <_dtoa_r+0x370>
 8009c94:	f000 80a6 	beq.w	8009de4 <_dtoa_r+0x4f4>
 8009c98:	f1ca 0600 	rsb	r6, sl, #0
 8009c9c:	4ba5      	ldr	r3, [pc, #660]	; (8009f34 <_dtoa_r+0x644>)
 8009c9e:	4fa6      	ldr	r7, [pc, #664]	; (8009f38 <_dtoa_r+0x648>)
 8009ca0:	f006 020f 	and.w	r2, r6, #15
 8009ca4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009cb0:	f7f6 fca2 	bl	80005f8 <__aeabi_dmul>
 8009cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cb8:	1136      	asrs	r6, r6, #4
 8009cba:	2300      	movs	r3, #0
 8009cbc:	2502      	movs	r5, #2
 8009cbe:	2e00      	cmp	r6, #0
 8009cc0:	f040 8085 	bne.w	8009dce <_dtoa_r+0x4de>
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1d2      	bne.n	8009c6e <_dtoa_r+0x37e>
 8009cc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f000 808c 	beq.w	8009de8 <_dtoa_r+0x4f8>
 8009cd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009cd4:	4b99      	ldr	r3, [pc, #612]	; (8009f3c <_dtoa_r+0x64c>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	4630      	mov	r0, r6
 8009cda:	4639      	mov	r1, r7
 8009cdc:	f7f6 fefe 	bl	8000adc <__aeabi_dcmplt>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	f000 8081 	beq.w	8009de8 <_dtoa_r+0x4f8>
 8009ce6:	9b01      	ldr	r3, [sp, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d07d      	beq.n	8009de8 <_dtoa_r+0x4f8>
 8009cec:	f1b9 0f00 	cmp.w	r9, #0
 8009cf0:	dd3c      	ble.n	8009d6c <_dtoa_r+0x47c>
 8009cf2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009cf6:	9307      	str	r3, [sp, #28]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	4b91      	ldr	r3, [pc, #580]	; (8009f40 <_dtoa_r+0x650>)
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	4639      	mov	r1, r7
 8009d00:	f7f6 fc7a 	bl	80005f8 <__aeabi_dmul>
 8009d04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d08:	3501      	adds	r5, #1
 8009d0a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009d0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d12:	4628      	mov	r0, r5
 8009d14:	f7f6 fc06 	bl	8000524 <__aeabi_i2d>
 8009d18:	4632      	mov	r2, r6
 8009d1a:	463b      	mov	r3, r7
 8009d1c:	f7f6 fc6c 	bl	80005f8 <__aeabi_dmul>
 8009d20:	4b88      	ldr	r3, [pc, #544]	; (8009f44 <_dtoa_r+0x654>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	f7f6 fab2 	bl	800028c <__adddf3>
 8009d28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d30:	9303      	str	r3, [sp, #12]
 8009d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d15c      	bne.n	8009df2 <_dtoa_r+0x502>
 8009d38:	4b83      	ldr	r3, [pc, #524]	; (8009f48 <_dtoa_r+0x658>)
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	4639      	mov	r1, r7
 8009d40:	f7f6 faa2 	bl	8000288 <__aeabi_dsub>
 8009d44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d48:	4606      	mov	r6, r0
 8009d4a:	460f      	mov	r7, r1
 8009d4c:	f7f6 fee4 	bl	8000b18 <__aeabi_dcmpgt>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	f040 8296 	bne.w	800a282 <_dtoa_r+0x992>
 8009d56:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d60:	4639      	mov	r1, r7
 8009d62:	f7f6 febb 	bl	8000adc <__aeabi_dcmplt>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	f040 8288 	bne.w	800a27c <_dtoa_r+0x98c>
 8009d6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009d70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f2c0 8158 	blt.w	800a02c <_dtoa_r+0x73c>
 8009d7c:	f1ba 0f0e 	cmp.w	sl, #14
 8009d80:	f300 8154 	bgt.w	800a02c <_dtoa_r+0x73c>
 8009d84:	4b6b      	ldr	r3, [pc, #428]	; (8009f34 <_dtoa_r+0x644>)
 8009d86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009d8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f280 80e3 	bge.w	8009f5c <_dtoa_r+0x66c>
 8009d96:	9b01      	ldr	r3, [sp, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f300 80df 	bgt.w	8009f5c <_dtoa_r+0x66c>
 8009d9e:	f040 826d 	bne.w	800a27c <_dtoa_r+0x98c>
 8009da2:	4b69      	ldr	r3, [pc, #420]	; (8009f48 <_dtoa_r+0x658>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	4640      	mov	r0, r8
 8009da8:	4649      	mov	r1, r9
 8009daa:	f7f6 fc25 	bl	80005f8 <__aeabi_dmul>
 8009dae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009db2:	f7f6 fea7 	bl	8000b04 <__aeabi_dcmpge>
 8009db6:	9e01      	ldr	r6, [sp, #4]
 8009db8:	4637      	mov	r7, r6
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	f040 8243 	bne.w	800a246 <_dtoa_r+0x956>
 8009dc0:	9d00      	ldr	r5, [sp, #0]
 8009dc2:	2331      	movs	r3, #49	; 0x31
 8009dc4:	f805 3b01 	strb.w	r3, [r5], #1
 8009dc8:	f10a 0a01 	add.w	sl, sl, #1
 8009dcc:	e23f      	b.n	800a24e <_dtoa_r+0x95e>
 8009dce:	07f2      	lsls	r2, r6, #31
 8009dd0:	d505      	bpl.n	8009dde <_dtoa_r+0x4ee>
 8009dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dd6:	f7f6 fc0f 	bl	80005f8 <__aeabi_dmul>
 8009dda:	3501      	adds	r5, #1
 8009ddc:	2301      	movs	r3, #1
 8009dde:	1076      	asrs	r6, r6, #1
 8009de0:	3708      	adds	r7, #8
 8009de2:	e76c      	b.n	8009cbe <_dtoa_r+0x3ce>
 8009de4:	2502      	movs	r5, #2
 8009de6:	e76f      	b.n	8009cc8 <_dtoa_r+0x3d8>
 8009de8:	9b01      	ldr	r3, [sp, #4]
 8009dea:	f8cd a01c 	str.w	sl, [sp, #28]
 8009dee:	930c      	str	r3, [sp, #48]	; 0x30
 8009df0:	e78d      	b.n	8009d0e <_dtoa_r+0x41e>
 8009df2:	9900      	ldr	r1, [sp, #0]
 8009df4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009df6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009df8:	4b4e      	ldr	r3, [pc, #312]	; (8009f34 <_dtoa_r+0x644>)
 8009dfa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009dfe:	4401      	add	r1, r0
 8009e00:	9102      	str	r1, [sp, #8]
 8009e02:	9908      	ldr	r1, [sp, #32]
 8009e04:	eeb0 8a47 	vmov.f32	s16, s14
 8009e08:	eef0 8a67 	vmov.f32	s17, s15
 8009e0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e14:	2900      	cmp	r1, #0
 8009e16:	d045      	beq.n	8009ea4 <_dtoa_r+0x5b4>
 8009e18:	494c      	ldr	r1, [pc, #304]	; (8009f4c <_dtoa_r+0x65c>)
 8009e1a:	2000      	movs	r0, #0
 8009e1c:	f7f6 fd16 	bl	800084c <__aeabi_ddiv>
 8009e20:	ec53 2b18 	vmov	r2, r3, d8
 8009e24:	f7f6 fa30 	bl	8000288 <__aeabi_dsub>
 8009e28:	9d00      	ldr	r5, [sp, #0]
 8009e2a:	ec41 0b18 	vmov	d8, r0, r1
 8009e2e:	4639      	mov	r1, r7
 8009e30:	4630      	mov	r0, r6
 8009e32:	f7f6 fe91 	bl	8000b58 <__aeabi_d2iz>
 8009e36:	900c      	str	r0, [sp, #48]	; 0x30
 8009e38:	f7f6 fb74 	bl	8000524 <__aeabi_i2d>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	460b      	mov	r3, r1
 8009e40:	4630      	mov	r0, r6
 8009e42:	4639      	mov	r1, r7
 8009e44:	f7f6 fa20 	bl	8000288 <__aeabi_dsub>
 8009e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e4a:	3330      	adds	r3, #48	; 0x30
 8009e4c:	f805 3b01 	strb.w	r3, [r5], #1
 8009e50:	ec53 2b18 	vmov	r2, r3, d8
 8009e54:	4606      	mov	r6, r0
 8009e56:	460f      	mov	r7, r1
 8009e58:	f7f6 fe40 	bl	8000adc <__aeabi_dcmplt>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d165      	bne.n	8009f2c <_dtoa_r+0x63c>
 8009e60:	4632      	mov	r2, r6
 8009e62:	463b      	mov	r3, r7
 8009e64:	4935      	ldr	r1, [pc, #212]	; (8009f3c <_dtoa_r+0x64c>)
 8009e66:	2000      	movs	r0, #0
 8009e68:	f7f6 fa0e 	bl	8000288 <__aeabi_dsub>
 8009e6c:	ec53 2b18 	vmov	r2, r3, d8
 8009e70:	f7f6 fe34 	bl	8000adc <__aeabi_dcmplt>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	f040 80b9 	bne.w	8009fec <_dtoa_r+0x6fc>
 8009e7a:	9b02      	ldr	r3, [sp, #8]
 8009e7c:	429d      	cmp	r5, r3
 8009e7e:	f43f af75 	beq.w	8009d6c <_dtoa_r+0x47c>
 8009e82:	4b2f      	ldr	r3, [pc, #188]	; (8009f40 <_dtoa_r+0x650>)
 8009e84:	ec51 0b18 	vmov	r0, r1, d8
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f7f6 fbb5 	bl	80005f8 <__aeabi_dmul>
 8009e8e:	4b2c      	ldr	r3, [pc, #176]	; (8009f40 <_dtoa_r+0x650>)
 8009e90:	ec41 0b18 	vmov	d8, r0, r1
 8009e94:	2200      	movs	r2, #0
 8009e96:	4630      	mov	r0, r6
 8009e98:	4639      	mov	r1, r7
 8009e9a:	f7f6 fbad 	bl	80005f8 <__aeabi_dmul>
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	460f      	mov	r7, r1
 8009ea2:	e7c4      	b.n	8009e2e <_dtoa_r+0x53e>
 8009ea4:	ec51 0b17 	vmov	r0, r1, d7
 8009ea8:	f7f6 fba6 	bl	80005f8 <__aeabi_dmul>
 8009eac:	9b02      	ldr	r3, [sp, #8]
 8009eae:	9d00      	ldr	r5, [sp, #0]
 8009eb0:	930c      	str	r3, [sp, #48]	; 0x30
 8009eb2:	ec41 0b18 	vmov	d8, r0, r1
 8009eb6:	4639      	mov	r1, r7
 8009eb8:	4630      	mov	r0, r6
 8009eba:	f7f6 fe4d 	bl	8000b58 <__aeabi_d2iz>
 8009ebe:	9011      	str	r0, [sp, #68]	; 0x44
 8009ec0:	f7f6 fb30 	bl	8000524 <__aeabi_i2d>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	4630      	mov	r0, r6
 8009eca:	4639      	mov	r1, r7
 8009ecc:	f7f6 f9dc 	bl	8000288 <__aeabi_dsub>
 8009ed0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ed2:	3330      	adds	r3, #48	; 0x30
 8009ed4:	f805 3b01 	strb.w	r3, [r5], #1
 8009ed8:	9b02      	ldr	r3, [sp, #8]
 8009eda:	429d      	cmp	r5, r3
 8009edc:	4606      	mov	r6, r0
 8009ede:	460f      	mov	r7, r1
 8009ee0:	f04f 0200 	mov.w	r2, #0
 8009ee4:	d134      	bne.n	8009f50 <_dtoa_r+0x660>
 8009ee6:	4b19      	ldr	r3, [pc, #100]	; (8009f4c <_dtoa_r+0x65c>)
 8009ee8:	ec51 0b18 	vmov	r0, r1, d8
 8009eec:	f7f6 f9ce 	bl	800028c <__adddf3>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	f7f6 fe0e 	bl	8000b18 <__aeabi_dcmpgt>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d175      	bne.n	8009fec <_dtoa_r+0x6fc>
 8009f00:	ec53 2b18 	vmov	r2, r3, d8
 8009f04:	4911      	ldr	r1, [pc, #68]	; (8009f4c <_dtoa_r+0x65c>)
 8009f06:	2000      	movs	r0, #0
 8009f08:	f7f6 f9be 	bl	8000288 <__aeabi_dsub>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	4630      	mov	r0, r6
 8009f12:	4639      	mov	r1, r7
 8009f14:	f7f6 fde2 	bl	8000adc <__aeabi_dcmplt>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	f43f af27 	beq.w	8009d6c <_dtoa_r+0x47c>
 8009f1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f20:	1e6b      	subs	r3, r5, #1
 8009f22:	930c      	str	r3, [sp, #48]	; 0x30
 8009f24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f28:	2b30      	cmp	r3, #48	; 0x30
 8009f2a:	d0f8      	beq.n	8009f1e <_dtoa_r+0x62e>
 8009f2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009f30:	e04a      	b.n	8009fc8 <_dtoa_r+0x6d8>
 8009f32:	bf00      	nop
 8009f34:	0800bf20 	.word	0x0800bf20
 8009f38:	0800bef8 	.word	0x0800bef8
 8009f3c:	3ff00000 	.word	0x3ff00000
 8009f40:	40240000 	.word	0x40240000
 8009f44:	401c0000 	.word	0x401c0000
 8009f48:	40140000 	.word	0x40140000
 8009f4c:	3fe00000 	.word	0x3fe00000
 8009f50:	4baf      	ldr	r3, [pc, #700]	; (800a210 <_dtoa_r+0x920>)
 8009f52:	f7f6 fb51 	bl	80005f8 <__aeabi_dmul>
 8009f56:	4606      	mov	r6, r0
 8009f58:	460f      	mov	r7, r1
 8009f5a:	e7ac      	b.n	8009eb6 <_dtoa_r+0x5c6>
 8009f5c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f60:	9d00      	ldr	r5, [sp, #0]
 8009f62:	4642      	mov	r2, r8
 8009f64:	464b      	mov	r3, r9
 8009f66:	4630      	mov	r0, r6
 8009f68:	4639      	mov	r1, r7
 8009f6a:	f7f6 fc6f 	bl	800084c <__aeabi_ddiv>
 8009f6e:	f7f6 fdf3 	bl	8000b58 <__aeabi_d2iz>
 8009f72:	9002      	str	r0, [sp, #8]
 8009f74:	f7f6 fad6 	bl	8000524 <__aeabi_i2d>
 8009f78:	4642      	mov	r2, r8
 8009f7a:	464b      	mov	r3, r9
 8009f7c:	f7f6 fb3c 	bl	80005f8 <__aeabi_dmul>
 8009f80:	4602      	mov	r2, r0
 8009f82:	460b      	mov	r3, r1
 8009f84:	4630      	mov	r0, r6
 8009f86:	4639      	mov	r1, r7
 8009f88:	f7f6 f97e 	bl	8000288 <__aeabi_dsub>
 8009f8c:	9e02      	ldr	r6, [sp, #8]
 8009f8e:	9f01      	ldr	r7, [sp, #4]
 8009f90:	3630      	adds	r6, #48	; 0x30
 8009f92:	f805 6b01 	strb.w	r6, [r5], #1
 8009f96:	9e00      	ldr	r6, [sp, #0]
 8009f98:	1bae      	subs	r6, r5, r6
 8009f9a:	42b7      	cmp	r7, r6
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	d137      	bne.n	800a012 <_dtoa_r+0x722>
 8009fa2:	f7f6 f973 	bl	800028c <__adddf3>
 8009fa6:	4642      	mov	r2, r8
 8009fa8:	464b      	mov	r3, r9
 8009faa:	4606      	mov	r6, r0
 8009fac:	460f      	mov	r7, r1
 8009fae:	f7f6 fdb3 	bl	8000b18 <__aeabi_dcmpgt>
 8009fb2:	b9c8      	cbnz	r0, 8009fe8 <_dtoa_r+0x6f8>
 8009fb4:	4642      	mov	r2, r8
 8009fb6:	464b      	mov	r3, r9
 8009fb8:	4630      	mov	r0, r6
 8009fba:	4639      	mov	r1, r7
 8009fbc:	f7f6 fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fc0:	b110      	cbz	r0, 8009fc8 <_dtoa_r+0x6d8>
 8009fc2:	9b02      	ldr	r3, [sp, #8]
 8009fc4:	07d9      	lsls	r1, r3, #31
 8009fc6:	d40f      	bmi.n	8009fe8 <_dtoa_r+0x6f8>
 8009fc8:	4620      	mov	r0, r4
 8009fca:	4659      	mov	r1, fp
 8009fcc:	f000 fbc2 	bl	800a754 <_Bfree>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	702b      	strb	r3, [r5, #0]
 8009fd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fd6:	f10a 0001 	add.w	r0, sl, #1
 8009fda:	6018      	str	r0, [r3, #0]
 8009fdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f43f acd8 	beq.w	8009994 <_dtoa_r+0xa4>
 8009fe4:	601d      	str	r5, [r3, #0]
 8009fe6:	e4d5      	b.n	8009994 <_dtoa_r+0xa4>
 8009fe8:	f8cd a01c 	str.w	sl, [sp, #28]
 8009fec:	462b      	mov	r3, r5
 8009fee:	461d      	mov	r5, r3
 8009ff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ff4:	2a39      	cmp	r2, #57	; 0x39
 8009ff6:	d108      	bne.n	800a00a <_dtoa_r+0x71a>
 8009ff8:	9a00      	ldr	r2, [sp, #0]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d1f7      	bne.n	8009fee <_dtoa_r+0x6fe>
 8009ffe:	9a07      	ldr	r2, [sp, #28]
 800a000:	9900      	ldr	r1, [sp, #0]
 800a002:	3201      	adds	r2, #1
 800a004:	9207      	str	r2, [sp, #28]
 800a006:	2230      	movs	r2, #48	; 0x30
 800a008:	700a      	strb	r2, [r1, #0]
 800a00a:	781a      	ldrb	r2, [r3, #0]
 800a00c:	3201      	adds	r2, #1
 800a00e:	701a      	strb	r2, [r3, #0]
 800a010:	e78c      	b.n	8009f2c <_dtoa_r+0x63c>
 800a012:	4b7f      	ldr	r3, [pc, #508]	; (800a210 <_dtoa_r+0x920>)
 800a014:	2200      	movs	r2, #0
 800a016:	f7f6 faef 	bl	80005f8 <__aeabi_dmul>
 800a01a:	2200      	movs	r2, #0
 800a01c:	2300      	movs	r3, #0
 800a01e:	4606      	mov	r6, r0
 800a020:	460f      	mov	r7, r1
 800a022:	f7f6 fd51 	bl	8000ac8 <__aeabi_dcmpeq>
 800a026:	2800      	cmp	r0, #0
 800a028:	d09b      	beq.n	8009f62 <_dtoa_r+0x672>
 800a02a:	e7cd      	b.n	8009fc8 <_dtoa_r+0x6d8>
 800a02c:	9a08      	ldr	r2, [sp, #32]
 800a02e:	2a00      	cmp	r2, #0
 800a030:	f000 80c4 	beq.w	800a1bc <_dtoa_r+0x8cc>
 800a034:	9a05      	ldr	r2, [sp, #20]
 800a036:	2a01      	cmp	r2, #1
 800a038:	f300 80a8 	bgt.w	800a18c <_dtoa_r+0x89c>
 800a03c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a03e:	2a00      	cmp	r2, #0
 800a040:	f000 80a0 	beq.w	800a184 <_dtoa_r+0x894>
 800a044:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a048:	9e06      	ldr	r6, [sp, #24]
 800a04a:	4645      	mov	r5, r8
 800a04c:	9a04      	ldr	r2, [sp, #16]
 800a04e:	2101      	movs	r1, #1
 800a050:	441a      	add	r2, r3
 800a052:	4620      	mov	r0, r4
 800a054:	4498      	add	r8, r3
 800a056:	9204      	str	r2, [sp, #16]
 800a058:	f000 fc38 	bl	800a8cc <__i2b>
 800a05c:	4607      	mov	r7, r0
 800a05e:	2d00      	cmp	r5, #0
 800a060:	dd0b      	ble.n	800a07a <_dtoa_r+0x78a>
 800a062:	9b04      	ldr	r3, [sp, #16]
 800a064:	2b00      	cmp	r3, #0
 800a066:	dd08      	ble.n	800a07a <_dtoa_r+0x78a>
 800a068:	42ab      	cmp	r3, r5
 800a06a:	9a04      	ldr	r2, [sp, #16]
 800a06c:	bfa8      	it	ge
 800a06e:	462b      	movge	r3, r5
 800a070:	eba8 0803 	sub.w	r8, r8, r3
 800a074:	1aed      	subs	r5, r5, r3
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	9304      	str	r3, [sp, #16]
 800a07a:	9b06      	ldr	r3, [sp, #24]
 800a07c:	b1fb      	cbz	r3, 800a0be <_dtoa_r+0x7ce>
 800a07e:	9b08      	ldr	r3, [sp, #32]
 800a080:	2b00      	cmp	r3, #0
 800a082:	f000 809f 	beq.w	800a1c4 <_dtoa_r+0x8d4>
 800a086:	2e00      	cmp	r6, #0
 800a088:	dd11      	ble.n	800a0ae <_dtoa_r+0x7be>
 800a08a:	4639      	mov	r1, r7
 800a08c:	4632      	mov	r2, r6
 800a08e:	4620      	mov	r0, r4
 800a090:	f000 fcd8 	bl	800aa44 <__pow5mult>
 800a094:	465a      	mov	r2, fp
 800a096:	4601      	mov	r1, r0
 800a098:	4607      	mov	r7, r0
 800a09a:	4620      	mov	r0, r4
 800a09c:	f000 fc2c 	bl	800a8f8 <__multiply>
 800a0a0:	4659      	mov	r1, fp
 800a0a2:	9007      	str	r0, [sp, #28]
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f000 fb55 	bl	800a754 <_Bfree>
 800a0aa:	9b07      	ldr	r3, [sp, #28]
 800a0ac:	469b      	mov	fp, r3
 800a0ae:	9b06      	ldr	r3, [sp, #24]
 800a0b0:	1b9a      	subs	r2, r3, r6
 800a0b2:	d004      	beq.n	800a0be <_dtoa_r+0x7ce>
 800a0b4:	4659      	mov	r1, fp
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f000 fcc4 	bl	800aa44 <__pow5mult>
 800a0bc:	4683      	mov	fp, r0
 800a0be:	2101      	movs	r1, #1
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f000 fc03 	bl	800a8cc <__i2b>
 800a0c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	dd7c      	ble.n	800a1c8 <_dtoa_r+0x8d8>
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	4601      	mov	r1, r0
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f000 fcb6 	bl	800aa44 <__pow5mult>
 800a0d8:	9b05      	ldr	r3, [sp, #20]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	4606      	mov	r6, r0
 800a0de:	dd76      	ble.n	800a1ce <_dtoa_r+0x8de>
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	9306      	str	r3, [sp, #24]
 800a0e4:	6933      	ldr	r3, [r6, #16]
 800a0e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a0ea:	6918      	ldr	r0, [r3, #16]
 800a0ec:	f000 fb9e 	bl	800a82c <__hi0bits>
 800a0f0:	f1c0 0020 	rsb	r0, r0, #32
 800a0f4:	9b04      	ldr	r3, [sp, #16]
 800a0f6:	4418      	add	r0, r3
 800a0f8:	f010 001f 	ands.w	r0, r0, #31
 800a0fc:	f000 8086 	beq.w	800a20c <_dtoa_r+0x91c>
 800a100:	f1c0 0320 	rsb	r3, r0, #32
 800a104:	2b04      	cmp	r3, #4
 800a106:	dd7f      	ble.n	800a208 <_dtoa_r+0x918>
 800a108:	f1c0 001c 	rsb	r0, r0, #28
 800a10c:	9b04      	ldr	r3, [sp, #16]
 800a10e:	4403      	add	r3, r0
 800a110:	4480      	add	r8, r0
 800a112:	4405      	add	r5, r0
 800a114:	9304      	str	r3, [sp, #16]
 800a116:	f1b8 0f00 	cmp.w	r8, #0
 800a11a:	dd05      	ble.n	800a128 <_dtoa_r+0x838>
 800a11c:	4659      	mov	r1, fp
 800a11e:	4642      	mov	r2, r8
 800a120:	4620      	mov	r0, r4
 800a122:	f000 fce9 	bl	800aaf8 <__lshift>
 800a126:	4683      	mov	fp, r0
 800a128:	9b04      	ldr	r3, [sp, #16]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	dd05      	ble.n	800a13a <_dtoa_r+0x84a>
 800a12e:	4631      	mov	r1, r6
 800a130:	461a      	mov	r2, r3
 800a132:	4620      	mov	r0, r4
 800a134:	f000 fce0 	bl	800aaf8 <__lshift>
 800a138:	4606      	mov	r6, r0
 800a13a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d069      	beq.n	800a214 <_dtoa_r+0x924>
 800a140:	4631      	mov	r1, r6
 800a142:	4658      	mov	r0, fp
 800a144:	f000 fd44 	bl	800abd0 <__mcmp>
 800a148:	2800      	cmp	r0, #0
 800a14a:	da63      	bge.n	800a214 <_dtoa_r+0x924>
 800a14c:	2300      	movs	r3, #0
 800a14e:	4659      	mov	r1, fp
 800a150:	220a      	movs	r2, #10
 800a152:	4620      	mov	r0, r4
 800a154:	f000 fb20 	bl	800a798 <__multadd>
 800a158:	9b08      	ldr	r3, [sp, #32]
 800a15a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a15e:	4683      	mov	fp, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	f000 818f 	beq.w	800a484 <_dtoa_r+0xb94>
 800a166:	4639      	mov	r1, r7
 800a168:	2300      	movs	r3, #0
 800a16a:	220a      	movs	r2, #10
 800a16c:	4620      	mov	r0, r4
 800a16e:	f000 fb13 	bl	800a798 <__multadd>
 800a172:	f1b9 0f00 	cmp.w	r9, #0
 800a176:	4607      	mov	r7, r0
 800a178:	f300 808e 	bgt.w	800a298 <_dtoa_r+0x9a8>
 800a17c:	9b05      	ldr	r3, [sp, #20]
 800a17e:	2b02      	cmp	r3, #2
 800a180:	dc50      	bgt.n	800a224 <_dtoa_r+0x934>
 800a182:	e089      	b.n	800a298 <_dtoa_r+0x9a8>
 800a184:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a186:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a18a:	e75d      	b.n	800a048 <_dtoa_r+0x758>
 800a18c:	9b01      	ldr	r3, [sp, #4]
 800a18e:	1e5e      	subs	r6, r3, #1
 800a190:	9b06      	ldr	r3, [sp, #24]
 800a192:	42b3      	cmp	r3, r6
 800a194:	bfbf      	itttt	lt
 800a196:	9b06      	ldrlt	r3, [sp, #24]
 800a198:	9606      	strlt	r6, [sp, #24]
 800a19a:	1af2      	sublt	r2, r6, r3
 800a19c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a19e:	bfb6      	itet	lt
 800a1a0:	189b      	addlt	r3, r3, r2
 800a1a2:	1b9e      	subge	r6, r3, r6
 800a1a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a1a6:	9b01      	ldr	r3, [sp, #4]
 800a1a8:	bfb8      	it	lt
 800a1aa:	2600      	movlt	r6, #0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	bfb5      	itete	lt
 800a1b0:	eba8 0503 	sublt.w	r5, r8, r3
 800a1b4:	9b01      	ldrge	r3, [sp, #4]
 800a1b6:	2300      	movlt	r3, #0
 800a1b8:	4645      	movge	r5, r8
 800a1ba:	e747      	b.n	800a04c <_dtoa_r+0x75c>
 800a1bc:	9e06      	ldr	r6, [sp, #24]
 800a1be:	9f08      	ldr	r7, [sp, #32]
 800a1c0:	4645      	mov	r5, r8
 800a1c2:	e74c      	b.n	800a05e <_dtoa_r+0x76e>
 800a1c4:	9a06      	ldr	r2, [sp, #24]
 800a1c6:	e775      	b.n	800a0b4 <_dtoa_r+0x7c4>
 800a1c8:	9b05      	ldr	r3, [sp, #20]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	dc18      	bgt.n	800a200 <_dtoa_r+0x910>
 800a1ce:	9b02      	ldr	r3, [sp, #8]
 800a1d0:	b9b3      	cbnz	r3, 800a200 <_dtoa_r+0x910>
 800a1d2:	9b03      	ldr	r3, [sp, #12]
 800a1d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1d8:	b9a3      	cbnz	r3, 800a204 <_dtoa_r+0x914>
 800a1da:	9b03      	ldr	r3, [sp, #12]
 800a1dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1e0:	0d1b      	lsrs	r3, r3, #20
 800a1e2:	051b      	lsls	r3, r3, #20
 800a1e4:	b12b      	cbz	r3, 800a1f2 <_dtoa_r+0x902>
 800a1e6:	9b04      	ldr	r3, [sp, #16]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	9304      	str	r3, [sp, #16]
 800a1ec:	f108 0801 	add.w	r8, r8, #1
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	9306      	str	r3, [sp, #24]
 800a1f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	f47f af74 	bne.w	800a0e4 <_dtoa_r+0x7f4>
 800a1fc:	2001      	movs	r0, #1
 800a1fe:	e779      	b.n	800a0f4 <_dtoa_r+0x804>
 800a200:	2300      	movs	r3, #0
 800a202:	e7f6      	b.n	800a1f2 <_dtoa_r+0x902>
 800a204:	9b02      	ldr	r3, [sp, #8]
 800a206:	e7f4      	b.n	800a1f2 <_dtoa_r+0x902>
 800a208:	d085      	beq.n	800a116 <_dtoa_r+0x826>
 800a20a:	4618      	mov	r0, r3
 800a20c:	301c      	adds	r0, #28
 800a20e:	e77d      	b.n	800a10c <_dtoa_r+0x81c>
 800a210:	40240000 	.word	0x40240000
 800a214:	9b01      	ldr	r3, [sp, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	dc38      	bgt.n	800a28c <_dtoa_r+0x99c>
 800a21a:	9b05      	ldr	r3, [sp, #20]
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	dd35      	ble.n	800a28c <_dtoa_r+0x99c>
 800a220:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a224:	f1b9 0f00 	cmp.w	r9, #0
 800a228:	d10d      	bne.n	800a246 <_dtoa_r+0x956>
 800a22a:	4631      	mov	r1, r6
 800a22c:	464b      	mov	r3, r9
 800a22e:	2205      	movs	r2, #5
 800a230:	4620      	mov	r0, r4
 800a232:	f000 fab1 	bl	800a798 <__multadd>
 800a236:	4601      	mov	r1, r0
 800a238:	4606      	mov	r6, r0
 800a23a:	4658      	mov	r0, fp
 800a23c:	f000 fcc8 	bl	800abd0 <__mcmp>
 800a240:	2800      	cmp	r0, #0
 800a242:	f73f adbd 	bgt.w	8009dc0 <_dtoa_r+0x4d0>
 800a246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a248:	9d00      	ldr	r5, [sp, #0]
 800a24a:	ea6f 0a03 	mvn.w	sl, r3
 800a24e:	f04f 0800 	mov.w	r8, #0
 800a252:	4631      	mov	r1, r6
 800a254:	4620      	mov	r0, r4
 800a256:	f000 fa7d 	bl	800a754 <_Bfree>
 800a25a:	2f00      	cmp	r7, #0
 800a25c:	f43f aeb4 	beq.w	8009fc8 <_dtoa_r+0x6d8>
 800a260:	f1b8 0f00 	cmp.w	r8, #0
 800a264:	d005      	beq.n	800a272 <_dtoa_r+0x982>
 800a266:	45b8      	cmp	r8, r7
 800a268:	d003      	beq.n	800a272 <_dtoa_r+0x982>
 800a26a:	4641      	mov	r1, r8
 800a26c:	4620      	mov	r0, r4
 800a26e:	f000 fa71 	bl	800a754 <_Bfree>
 800a272:	4639      	mov	r1, r7
 800a274:	4620      	mov	r0, r4
 800a276:	f000 fa6d 	bl	800a754 <_Bfree>
 800a27a:	e6a5      	b.n	8009fc8 <_dtoa_r+0x6d8>
 800a27c:	2600      	movs	r6, #0
 800a27e:	4637      	mov	r7, r6
 800a280:	e7e1      	b.n	800a246 <_dtoa_r+0x956>
 800a282:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a284:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a288:	4637      	mov	r7, r6
 800a28a:	e599      	b.n	8009dc0 <_dtoa_r+0x4d0>
 800a28c:	9b08      	ldr	r3, [sp, #32]
 800a28e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	f000 80fd 	beq.w	800a492 <_dtoa_r+0xba2>
 800a298:	2d00      	cmp	r5, #0
 800a29a:	dd05      	ble.n	800a2a8 <_dtoa_r+0x9b8>
 800a29c:	4639      	mov	r1, r7
 800a29e:	462a      	mov	r2, r5
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f000 fc29 	bl	800aaf8 <__lshift>
 800a2a6:	4607      	mov	r7, r0
 800a2a8:	9b06      	ldr	r3, [sp, #24]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d05c      	beq.n	800a368 <_dtoa_r+0xa78>
 800a2ae:	6879      	ldr	r1, [r7, #4]
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f000 fa0f 	bl	800a6d4 <_Balloc>
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	b928      	cbnz	r0, 800a2c6 <_dtoa_r+0x9d6>
 800a2ba:	4b80      	ldr	r3, [pc, #512]	; (800a4bc <_dtoa_r+0xbcc>)
 800a2bc:	4602      	mov	r2, r0
 800a2be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a2c2:	f7ff bb2e 	b.w	8009922 <_dtoa_r+0x32>
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	3202      	adds	r2, #2
 800a2ca:	0092      	lsls	r2, r2, #2
 800a2cc:	f107 010c 	add.w	r1, r7, #12
 800a2d0:	300c      	adds	r0, #12
 800a2d2:	f7fe fde1 	bl	8008e98 <memcpy>
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	4629      	mov	r1, r5
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f000 fc0c 	bl	800aaf8 <__lshift>
 800a2e0:	9b00      	ldr	r3, [sp, #0]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	9301      	str	r3, [sp, #4]
 800a2e6:	9b00      	ldr	r3, [sp, #0]
 800a2e8:	444b      	add	r3, r9
 800a2ea:	9307      	str	r3, [sp, #28]
 800a2ec:	9b02      	ldr	r3, [sp, #8]
 800a2ee:	f003 0301 	and.w	r3, r3, #1
 800a2f2:	46b8      	mov	r8, r7
 800a2f4:	9306      	str	r3, [sp, #24]
 800a2f6:	4607      	mov	r7, r0
 800a2f8:	9b01      	ldr	r3, [sp, #4]
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	4658      	mov	r0, fp
 800a300:	9302      	str	r3, [sp, #8]
 800a302:	f7ff fa69 	bl	80097d8 <quorem>
 800a306:	4603      	mov	r3, r0
 800a308:	3330      	adds	r3, #48	; 0x30
 800a30a:	9004      	str	r0, [sp, #16]
 800a30c:	4641      	mov	r1, r8
 800a30e:	4658      	mov	r0, fp
 800a310:	9308      	str	r3, [sp, #32]
 800a312:	f000 fc5d 	bl	800abd0 <__mcmp>
 800a316:	463a      	mov	r2, r7
 800a318:	4681      	mov	r9, r0
 800a31a:	4631      	mov	r1, r6
 800a31c:	4620      	mov	r0, r4
 800a31e:	f000 fc73 	bl	800ac08 <__mdiff>
 800a322:	68c2      	ldr	r2, [r0, #12]
 800a324:	9b08      	ldr	r3, [sp, #32]
 800a326:	4605      	mov	r5, r0
 800a328:	bb02      	cbnz	r2, 800a36c <_dtoa_r+0xa7c>
 800a32a:	4601      	mov	r1, r0
 800a32c:	4658      	mov	r0, fp
 800a32e:	f000 fc4f 	bl	800abd0 <__mcmp>
 800a332:	9b08      	ldr	r3, [sp, #32]
 800a334:	4602      	mov	r2, r0
 800a336:	4629      	mov	r1, r5
 800a338:	4620      	mov	r0, r4
 800a33a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a33e:	f000 fa09 	bl	800a754 <_Bfree>
 800a342:	9b05      	ldr	r3, [sp, #20]
 800a344:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a346:	9d01      	ldr	r5, [sp, #4]
 800a348:	ea43 0102 	orr.w	r1, r3, r2
 800a34c:	9b06      	ldr	r3, [sp, #24]
 800a34e:	430b      	orrs	r3, r1
 800a350:	9b08      	ldr	r3, [sp, #32]
 800a352:	d10d      	bne.n	800a370 <_dtoa_r+0xa80>
 800a354:	2b39      	cmp	r3, #57	; 0x39
 800a356:	d029      	beq.n	800a3ac <_dtoa_r+0xabc>
 800a358:	f1b9 0f00 	cmp.w	r9, #0
 800a35c:	dd01      	ble.n	800a362 <_dtoa_r+0xa72>
 800a35e:	9b04      	ldr	r3, [sp, #16]
 800a360:	3331      	adds	r3, #49	; 0x31
 800a362:	9a02      	ldr	r2, [sp, #8]
 800a364:	7013      	strb	r3, [r2, #0]
 800a366:	e774      	b.n	800a252 <_dtoa_r+0x962>
 800a368:	4638      	mov	r0, r7
 800a36a:	e7b9      	b.n	800a2e0 <_dtoa_r+0x9f0>
 800a36c:	2201      	movs	r2, #1
 800a36e:	e7e2      	b.n	800a336 <_dtoa_r+0xa46>
 800a370:	f1b9 0f00 	cmp.w	r9, #0
 800a374:	db06      	blt.n	800a384 <_dtoa_r+0xa94>
 800a376:	9905      	ldr	r1, [sp, #20]
 800a378:	ea41 0909 	orr.w	r9, r1, r9
 800a37c:	9906      	ldr	r1, [sp, #24]
 800a37e:	ea59 0101 	orrs.w	r1, r9, r1
 800a382:	d120      	bne.n	800a3c6 <_dtoa_r+0xad6>
 800a384:	2a00      	cmp	r2, #0
 800a386:	ddec      	ble.n	800a362 <_dtoa_r+0xa72>
 800a388:	4659      	mov	r1, fp
 800a38a:	2201      	movs	r2, #1
 800a38c:	4620      	mov	r0, r4
 800a38e:	9301      	str	r3, [sp, #4]
 800a390:	f000 fbb2 	bl	800aaf8 <__lshift>
 800a394:	4631      	mov	r1, r6
 800a396:	4683      	mov	fp, r0
 800a398:	f000 fc1a 	bl	800abd0 <__mcmp>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	9b01      	ldr	r3, [sp, #4]
 800a3a0:	dc02      	bgt.n	800a3a8 <_dtoa_r+0xab8>
 800a3a2:	d1de      	bne.n	800a362 <_dtoa_r+0xa72>
 800a3a4:	07da      	lsls	r2, r3, #31
 800a3a6:	d5dc      	bpl.n	800a362 <_dtoa_r+0xa72>
 800a3a8:	2b39      	cmp	r3, #57	; 0x39
 800a3aa:	d1d8      	bne.n	800a35e <_dtoa_r+0xa6e>
 800a3ac:	9a02      	ldr	r2, [sp, #8]
 800a3ae:	2339      	movs	r3, #57	; 0x39
 800a3b0:	7013      	strb	r3, [r2, #0]
 800a3b2:	462b      	mov	r3, r5
 800a3b4:	461d      	mov	r5, r3
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a3bc:	2a39      	cmp	r2, #57	; 0x39
 800a3be:	d050      	beq.n	800a462 <_dtoa_r+0xb72>
 800a3c0:	3201      	adds	r2, #1
 800a3c2:	701a      	strb	r2, [r3, #0]
 800a3c4:	e745      	b.n	800a252 <_dtoa_r+0x962>
 800a3c6:	2a00      	cmp	r2, #0
 800a3c8:	dd03      	ble.n	800a3d2 <_dtoa_r+0xae2>
 800a3ca:	2b39      	cmp	r3, #57	; 0x39
 800a3cc:	d0ee      	beq.n	800a3ac <_dtoa_r+0xabc>
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	e7c7      	b.n	800a362 <_dtoa_r+0xa72>
 800a3d2:	9a01      	ldr	r2, [sp, #4]
 800a3d4:	9907      	ldr	r1, [sp, #28]
 800a3d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a3da:	428a      	cmp	r2, r1
 800a3dc:	d02a      	beq.n	800a434 <_dtoa_r+0xb44>
 800a3de:	4659      	mov	r1, fp
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	220a      	movs	r2, #10
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f000 f9d7 	bl	800a798 <__multadd>
 800a3ea:	45b8      	cmp	r8, r7
 800a3ec:	4683      	mov	fp, r0
 800a3ee:	f04f 0300 	mov.w	r3, #0
 800a3f2:	f04f 020a 	mov.w	r2, #10
 800a3f6:	4641      	mov	r1, r8
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	d107      	bne.n	800a40c <_dtoa_r+0xb1c>
 800a3fc:	f000 f9cc 	bl	800a798 <__multadd>
 800a400:	4680      	mov	r8, r0
 800a402:	4607      	mov	r7, r0
 800a404:	9b01      	ldr	r3, [sp, #4]
 800a406:	3301      	adds	r3, #1
 800a408:	9301      	str	r3, [sp, #4]
 800a40a:	e775      	b.n	800a2f8 <_dtoa_r+0xa08>
 800a40c:	f000 f9c4 	bl	800a798 <__multadd>
 800a410:	4639      	mov	r1, r7
 800a412:	4680      	mov	r8, r0
 800a414:	2300      	movs	r3, #0
 800a416:	220a      	movs	r2, #10
 800a418:	4620      	mov	r0, r4
 800a41a:	f000 f9bd 	bl	800a798 <__multadd>
 800a41e:	4607      	mov	r7, r0
 800a420:	e7f0      	b.n	800a404 <_dtoa_r+0xb14>
 800a422:	f1b9 0f00 	cmp.w	r9, #0
 800a426:	9a00      	ldr	r2, [sp, #0]
 800a428:	bfcc      	ite	gt
 800a42a:	464d      	movgt	r5, r9
 800a42c:	2501      	movle	r5, #1
 800a42e:	4415      	add	r5, r2
 800a430:	f04f 0800 	mov.w	r8, #0
 800a434:	4659      	mov	r1, fp
 800a436:	2201      	movs	r2, #1
 800a438:	4620      	mov	r0, r4
 800a43a:	9301      	str	r3, [sp, #4]
 800a43c:	f000 fb5c 	bl	800aaf8 <__lshift>
 800a440:	4631      	mov	r1, r6
 800a442:	4683      	mov	fp, r0
 800a444:	f000 fbc4 	bl	800abd0 <__mcmp>
 800a448:	2800      	cmp	r0, #0
 800a44a:	dcb2      	bgt.n	800a3b2 <_dtoa_r+0xac2>
 800a44c:	d102      	bne.n	800a454 <_dtoa_r+0xb64>
 800a44e:	9b01      	ldr	r3, [sp, #4]
 800a450:	07db      	lsls	r3, r3, #31
 800a452:	d4ae      	bmi.n	800a3b2 <_dtoa_r+0xac2>
 800a454:	462b      	mov	r3, r5
 800a456:	461d      	mov	r5, r3
 800a458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a45c:	2a30      	cmp	r2, #48	; 0x30
 800a45e:	d0fa      	beq.n	800a456 <_dtoa_r+0xb66>
 800a460:	e6f7      	b.n	800a252 <_dtoa_r+0x962>
 800a462:	9a00      	ldr	r2, [sp, #0]
 800a464:	429a      	cmp	r2, r3
 800a466:	d1a5      	bne.n	800a3b4 <_dtoa_r+0xac4>
 800a468:	f10a 0a01 	add.w	sl, sl, #1
 800a46c:	2331      	movs	r3, #49	; 0x31
 800a46e:	e779      	b.n	800a364 <_dtoa_r+0xa74>
 800a470:	4b13      	ldr	r3, [pc, #76]	; (800a4c0 <_dtoa_r+0xbd0>)
 800a472:	f7ff baaf 	b.w	80099d4 <_dtoa_r+0xe4>
 800a476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f47f aa86 	bne.w	800998a <_dtoa_r+0x9a>
 800a47e:	4b11      	ldr	r3, [pc, #68]	; (800a4c4 <_dtoa_r+0xbd4>)
 800a480:	f7ff baa8 	b.w	80099d4 <_dtoa_r+0xe4>
 800a484:	f1b9 0f00 	cmp.w	r9, #0
 800a488:	dc03      	bgt.n	800a492 <_dtoa_r+0xba2>
 800a48a:	9b05      	ldr	r3, [sp, #20]
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	f73f aec9 	bgt.w	800a224 <_dtoa_r+0x934>
 800a492:	9d00      	ldr	r5, [sp, #0]
 800a494:	4631      	mov	r1, r6
 800a496:	4658      	mov	r0, fp
 800a498:	f7ff f99e 	bl	80097d8 <quorem>
 800a49c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a4a0:	f805 3b01 	strb.w	r3, [r5], #1
 800a4a4:	9a00      	ldr	r2, [sp, #0]
 800a4a6:	1aaa      	subs	r2, r5, r2
 800a4a8:	4591      	cmp	r9, r2
 800a4aa:	ddba      	ble.n	800a422 <_dtoa_r+0xb32>
 800a4ac:	4659      	mov	r1, fp
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	220a      	movs	r2, #10
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f000 f970 	bl	800a798 <__multadd>
 800a4b8:	4683      	mov	fp, r0
 800a4ba:	e7eb      	b.n	800a494 <_dtoa_r+0xba4>
 800a4bc:	0800be27 	.word	0x0800be27
 800a4c0:	0800bd80 	.word	0x0800bd80
 800a4c4:	0800bda4 	.word	0x0800bda4

0800a4c8 <std>:
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	b510      	push	{r4, lr}
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	e9c0 3300 	strd	r3, r3, [r0]
 800a4d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4d6:	6083      	str	r3, [r0, #8]
 800a4d8:	8181      	strh	r1, [r0, #12]
 800a4da:	6643      	str	r3, [r0, #100]	; 0x64
 800a4dc:	81c2      	strh	r2, [r0, #14]
 800a4de:	6183      	str	r3, [r0, #24]
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	2208      	movs	r2, #8
 800a4e4:	305c      	adds	r0, #92	; 0x5c
 800a4e6:	f7fe fce5 	bl	8008eb4 <memset>
 800a4ea:	4b05      	ldr	r3, [pc, #20]	; (800a500 <std+0x38>)
 800a4ec:	6263      	str	r3, [r4, #36]	; 0x24
 800a4ee:	4b05      	ldr	r3, [pc, #20]	; (800a504 <std+0x3c>)
 800a4f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4f2:	4b05      	ldr	r3, [pc, #20]	; (800a508 <std+0x40>)
 800a4f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4f6:	4b05      	ldr	r3, [pc, #20]	; (800a50c <std+0x44>)
 800a4f8:	6224      	str	r4, [r4, #32]
 800a4fa:	6323      	str	r3, [r4, #48]	; 0x30
 800a4fc:	bd10      	pop	{r4, pc}
 800a4fe:	bf00      	nop
 800a500:	0800b219 	.word	0x0800b219
 800a504:	0800b23b 	.word	0x0800b23b
 800a508:	0800b273 	.word	0x0800b273
 800a50c:	0800b297 	.word	0x0800b297

0800a510 <_cleanup_r>:
 800a510:	4901      	ldr	r1, [pc, #4]	; (800a518 <_cleanup_r+0x8>)
 800a512:	f000 b8af 	b.w	800a674 <_fwalk_reent>
 800a516:	bf00      	nop
 800a518:	0800b5ad 	.word	0x0800b5ad

0800a51c <__sfmoreglue>:
 800a51c:	b570      	push	{r4, r5, r6, lr}
 800a51e:	1e4a      	subs	r2, r1, #1
 800a520:	2568      	movs	r5, #104	; 0x68
 800a522:	4355      	muls	r5, r2
 800a524:	460e      	mov	r6, r1
 800a526:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a52a:	f000 fcb1 	bl	800ae90 <_malloc_r>
 800a52e:	4604      	mov	r4, r0
 800a530:	b140      	cbz	r0, 800a544 <__sfmoreglue+0x28>
 800a532:	2100      	movs	r1, #0
 800a534:	e9c0 1600 	strd	r1, r6, [r0]
 800a538:	300c      	adds	r0, #12
 800a53a:	60a0      	str	r0, [r4, #8]
 800a53c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a540:	f7fe fcb8 	bl	8008eb4 <memset>
 800a544:	4620      	mov	r0, r4
 800a546:	bd70      	pop	{r4, r5, r6, pc}

0800a548 <__sfp_lock_acquire>:
 800a548:	4801      	ldr	r0, [pc, #4]	; (800a550 <__sfp_lock_acquire+0x8>)
 800a54a:	f000 b8b8 	b.w	800a6be <__retarget_lock_acquire_recursive>
 800a54e:	bf00      	nop
 800a550:	2000080c 	.word	0x2000080c

0800a554 <__sfp_lock_release>:
 800a554:	4801      	ldr	r0, [pc, #4]	; (800a55c <__sfp_lock_release+0x8>)
 800a556:	f000 b8b3 	b.w	800a6c0 <__retarget_lock_release_recursive>
 800a55a:	bf00      	nop
 800a55c:	2000080c 	.word	0x2000080c

0800a560 <__sinit_lock_acquire>:
 800a560:	4801      	ldr	r0, [pc, #4]	; (800a568 <__sinit_lock_acquire+0x8>)
 800a562:	f000 b8ac 	b.w	800a6be <__retarget_lock_acquire_recursive>
 800a566:	bf00      	nop
 800a568:	20000807 	.word	0x20000807

0800a56c <__sinit_lock_release>:
 800a56c:	4801      	ldr	r0, [pc, #4]	; (800a574 <__sinit_lock_release+0x8>)
 800a56e:	f000 b8a7 	b.w	800a6c0 <__retarget_lock_release_recursive>
 800a572:	bf00      	nop
 800a574:	20000807 	.word	0x20000807

0800a578 <__sinit>:
 800a578:	b510      	push	{r4, lr}
 800a57a:	4604      	mov	r4, r0
 800a57c:	f7ff fff0 	bl	800a560 <__sinit_lock_acquire>
 800a580:	69a3      	ldr	r3, [r4, #24]
 800a582:	b11b      	cbz	r3, 800a58c <__sinit+0x14>
 800a584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a588:	f7ff bff0 	b.w	800a56c <__sinit_lock_release>
 800a58c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a590:	6523      	str	r3, [r4, #80]	; 0x50
 800a592:	4b13      	ldr	r3, [pc, #76]	; (800a5e0 <__sinit+0x68>)
 800a594:	4a13      	ldr	r2, [pc, #76]	; (800a5e4 <__sinit+0x6c>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	62a2      	str	r2, [r4, #40]	; 0x28
 800a59a:	42a3      	cmp	r3, r4
 800a59c:	bf04      	itt	eq
 800a59e:	2301      	moveq	r3, #1
 800a5a0:	61a3      	streq	r3, [r4, #24]
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f000 f820 	bl	800a5e8 <__sfp>
 800a5a8:	6060      	str	r0, [r4, #4]
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f000 f81c 	bl	800a5e8 <__sfp>
 800a5b0:	60a0      	str	r0, [r4, #8]
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f000 f818 	bl	800a5e8 <__sfp>
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	60e0      	str	r0, [r4, #12]
 800a5bc:	2104      	movs	r1, #4
 800a5be:	6860      	ldr	r0, [r4, #4]
 800a5c0:	f7ff ff82 	bl	800a4c8 <std>
 800a5c4:	68a0      	ldr	r0, [r4, #8]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	2109      	movs	r1, #9
 800a5ca:	f7ff ff7d 	bl	800a4c8 <std>
 800a5ce:	68e0      	ldr	r0, [r4, #12]
 800a5d0:	2202      	movs	r2, #2
 800a5d2:	2112      	movs	r1, #18
 800a5d4:	f7ff ff78 	bl	800a4c8 <std>
 800a5d8:	2301      	movs	r3, #1
 800a5da:	61a3      	str	r3, [r4, #24]
 800a5dc:	e7d2      	b.n	800a584 <__sinit+0xc>
 800a5de:	bf00      	nop
 800a5e0:	0800bd6c 	.word	0x0800bd6c
 800a5e4:	0800a511 	.word	0x0800a511

0800a5e8 <__sfp>:
 800a5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ea:	4607      	mov	r7, r0
 800a5ec:	f7ff ffac 	bl	800a548 <__sfp_lock_acquire>
 800a5f0:	4b1e      	ldr	r3, [pc, #120]	; (800a66c <__sfp+0x84>)
 800a5f2:	681e      	ldr	r6, [r3, #0]
 800a5f4:	69b3      	ldr	r3, [r6, #24]
 800a5f6:	b913      	cbnz	r3, 800a5fe <__sfp+0x16>
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	f7ff ffbd 	bl	800a578 <__sinit>
 800a5fe:	3648      	adds	r6, #72	; 0x48
 800a600:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a604:	3b01      	subs	r3, #1
 800a606:	d503      	bpl.n	800a610 <__sfp+0x28>
 800a608:	6833      	ldr	r3, [r6, #0]
 800a60a:	b30b      	cbz	r3, 800a650 <__sfp+0x68>
 800a60c:	6836      	ldr	r6, [r6, #0]
 800a60e:	e7f7      	b.n	800a600 <__sfp+0x18>
 800a610:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a614:	b9d5      	cbnz	r5, 800a64c <__sfp+0x64>
 800a616:	4b16      	ldr	r3, [pc, #88]	; (800a670 <__sfp+0x88>)
 800a618:	60e3      	str	r3, [r4, #12]
 800a61a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a61e:	6665      	str	r5, [r4, #100]	; 0x64
 800a620:	f000 f84c 	bl	800a6bc <__retarget_lock_init_recursive>
 800a624:	f7ff ff96 	bl	800a554 <__sfp_lock_release>
 800a628:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a62c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a630:	6025      	str	r5, [r4, #0]
 800a632:	61a5      	str	r5, [r4, #24]
 800a634:	2208      	movs	r2, #8
 800a636:	4629      	mov	r1, r5
 800a638:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a63c:	f7fe fc3a 	bl	8008eb4 <memset>
 800a640:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a644:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a648:	4620      	mov	r0, r4
 800a64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a64c:	3468      	adds	r4, #104	; 0x68
 800a64e:	e7d9      	b.n	800a604 <__sfp+0x1c>
 800a650:	2104      	movs	r1, #4
 800a652:	4638      	mov	r0, r7
 800a654:	f7ff ff62 	bl	800a51c <__sfmoreglue>
 800a658:	4604      	mov	r4, r0
 800a65a:	6030      	str	r0, [r6, #0]
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d1d5      	bne.n	800a60c <__sfp+0x24>
 800a660:	f7ff ff78 	bl	800a554 <__sfp_lock_release>
 800a664:	230c      	movs	r3, #12
 800a666:	603b      	str	r3, [r7, #0]
 800a668:	e7ee      	b.n	800a648 <__sfp+0x60>
 800a66a:	bf00      	nop
 800a66c:	0800bd6c 	.word	0x0800bd6c
 800a670:	ffff0001 	.word	0xffff0001

0800a674 <_fwalk_reent>:
 800a674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a678:	4606      	mov	r6, r0
 800a67a:	4688      	mov	r8, r1
 800a67c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a680:	2700      	movs	r7, #0
 800a682:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a686:	f1b9 0901 	subs.w	r9, r9, #1
 800a68a:	d505      	bpl.n	800a698 <_fwalk_reent+0x24>
 800a68c:	6824      	ldr	r4, [r4, #0]
 800a68e:	2c00      	cmp	r4, #0
 800a690:	d1f7      	bne.n	800a682 <_fwalk_reent+0xe>
 800a692:	4638      	mov	r0, r7
 800a694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a698:	89ab      	ldrh	r3, [r5, #12]
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d907      	bls.n	800a6ae <_fwalk_reent+0x3a>
 800a69e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	d003      	beq.n	800a6ae <_fwalk_reent+0x3a>
 800a6a6:	4629      	mov	r1, r5
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	47c0      	blx	r8
 800a6ac:	4307      	orrs	r7, r0
 800a6ae:	3568      	adds	r5, #104	; 0x68
 800a6b0:	e7e9      	b.n	800a686 <_fwalk_reent+0x12>
	...

0800a6b4 <_localeconv_r>:
 800a6b4:	4800      	ldr	r0, [pc, #0]	; (800a6b8 <_localeconv_r+0x4>)
 800a6b6:	4770      	bx	lr
 800a6b8:	20000420 	.word	0x20000420

0800a6bc <__retarget_lock_init_recursive>:
 800a6bc:	4770      	bx	lr

0800a6be <__retarget_lock_acquire_recursive>:
 800a6be:	4770      	bx	lr

0800a6c0 <__retarget_lock_release_recursive>:
 800a6c0:	4770      	bx	lr
	...

0800a6c4 <malloc>:
 800a6c4:	4b02      	ldr	r3, [pc, #8]	; (800a6d0 <malloc+0xc>)
 800a6c6:	4601      	mov	r1, r0
 800a6c8:	6818      	ldr	r0, [r3, #0]
 800a6ca:	f000 bbe1 	b.w	800ae90 <_malloc_r>
 800a6ce:	bf00      	nop
 800a6d0:	200002cc 	.word	0x200002cc

0800a6d4 <_Balloc>:
 800a6d4:	b570      	push	{r4, r5, r6, lr}
 800a6d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a6d8:	4604      	mov	r4, r0
 800a6da:	460d      	mov	r5, r1
 800a6dc:	b976      	cbnz	r6, 800a6fc <_Balloc+0x28>
 800a6de:	2010      	movs	r0, #16
 800a6e0:	f7ff fff0 	bl	800a6c4 <malloc>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	6260      	str	r0, [r4, #36]	; 0x24
 800a6e8:	b920      	cbnz	r0, 800a6f4 <_Balloc+0x20>
 800a6ea:	4b18      	ldr	r3, [pc, #96]	; (800a74c <_Balloc+0x78>)
 800a6ec:	4818      	ldr	r0, [pc, #96]	; (800a750 <_Balloc+0x7c>)
 800a6ee:	2166      	movs	r1, #102	; 0x66
 800a6f0:	f000 fea8 	bl	800b444 <__assert_func>
 800a6f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6f8:	6006      	str	r6, [r0, #0]
 800a6fa:	60c6      	str	r6, [r0, #12]
 800a6fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a6fe:	68f3      	ldr	r3, [r6, #12]
 800a700:	b183      	cbz	r3, 800a724 <_Balloc+0x50>
 800a702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a70a:	b9b8      	cbnz	r0, 800a73c <_Balloc+0x68>
 800a70c:	2101      	movs	r1, #1
 800a70e:	fa01 f605 	lsl.w	r6, r1, r5
 800a712:	1d72      	adds	r2, r6, #5
 800a714:	0092      	lsls	r2, r2, #2
 800a716:	4620      	mov	r0, r4
 800a718:	f000 fb5a 	bl	800add0 <_calloc_r>
 800a71c:	b160      	cbz	r0, 800a738 <_Balloc+0x64>
 800a71e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a722:	e00e      	b.n	800a742 <_Balloc+0x6e>
 800a724:	2221      	movs	r2, #33	; 0x21
 800a726:	2104      	movs	r1, #4
 800a728:	4620      	mov	r0, r4
 800a72a:	f000 fb51 	bl	800add0 <_calloc_r>
 800a72e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a730:	60f0      	str	r0, [r6, #12]
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1e4      	bne.n	800a702 <_Balloc+0x2e>
 800a738:	2000      	movs	r0, #0
 800a73a:	bd70      	pop	{r4, r5, r6, pc}
 800a73c:	6802      	ldr	r2, [r0, #0]
 800a73e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a742:	2300      	movs	r3, #0
 800a744:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a748:	e7f7      	b.n	800a73a <_Balloc+0x66>
 800a74a:	bf00      	nop
 800a74c:	0800bdb1 	.word	0x0800bdb1
 800a750:	0800be98 	.word	0x0800be98

0800a754 <_Bfree>:
 800a754:	b570      	push	{r4, r5, r6, lr}
 800a756:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a758:	4605      	mov	r5, r0
 800a75a:	460c      	mov	r4, r1
 800a75c:	b976      	cbnz	r6, 800a77c <_Bfree+0x28>
 800a75e:	2010      	movs	r0, #16
 800a760:	f7ff ffb0 	bl	800a6c4 <malloc>
 800a764:	4602      	mov	r2, r0
 800a766:	6268      	str	r0, [r5, #36]	; 0x24
 800a768:	b920      	cbnz	r0, 800a774 <_Bfree+0x20>
 800a76a:	4b09      	ldr	r3, [pc, #36]	; (800a790 <_Bfree+0x3c>)
 800a76c:	4809      	ldr	r0, [pc, #36]	; (800a794 <_Bfree+0x40>)
 800a76e:	218a      	movs	r1, #138	; 0x8a
 800a770:	f000 fe68 	bl	800b444 <__assert_func>
 800a774:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a778:	6006      	str	r6, [r0, #0]
 800a77a:	60c6      	str	r6, [r0, #12]
 800a77c:	b13c      	cbz	r4, 800a78e <_Bfree+0x3a>
 800a77e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a780:	6862      	ldr	r2, [r4, #4]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a788:	6021      	str	r1, [r4, #0]
 800a78a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a78e:	bd70      	pop	{r4, r5, r6, pc}
 800a790:	0800bdb1 	.word	0x0800bdb1
 800a794:	0800be98 	.word	0x0800be98

0800a798 <__multadd>:
 800a798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a79c:	690e      	ldr	r6, [r1, #16]
 800a79e:	4607      	mov	r7, r0
 800a7a0:	4698      	mov	r8, r3
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	f101 0014 	add.w	r0, r1, #20
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	6805      	ldr	r5, [r0, #0]
 800a7ac:	b2a9      	uxth	r1, r5
 800a7ae:	fb02 8101 	mla	r1, r2, r1, r8
 800a7b2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a7b6:	0c2d      	lsrs	r5, r5, #16
 800a7b8:	fb02 c505 	mla	r5, r2, r5, ip
 800a7bc:	b289      	uxth	r1, r1
 800a7be:	3301      	adds	r3, #1
 800a7c0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a7c4:	429e      	cmp	r6, r3
 800a7c6:	f840 1b04 	str.w	r1, [r0], #4
 800a7ca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a7ce:	dcec      	bgt.n	800a7aa <__multadd+0x12>
 800a7d0:	f1b8 0f00 	cmp.w	r8, #0
 800a7d4:	d022      	beq.n	800a81c <__multadd+0x84>
 800a7d6:	68a3      	ldr	r3, [r4, #8]
 800a7d8:	42b3      	cmp	r3, r6
 800a7da:	dc19      	bgt.n	800a810 <__multadd+0x78>
 800a7dc:	6861      	ldr	r1, [r4, #4]
 800a7de:	4638      	mov	r0, r7
 800a7e0:	3101      	adds	r1, #1
 800a7e2:	f7ff ff77 	bl	800a6d4 <_Balloc>
 800a7e6:	4605      	mov	r5, r0
 800a7e8:	b928      	cbnz	r0, 800a7f6 <__multadd+0x5e>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	4b0d      	ldr	r3, [pc, #52]	; (800a824 <__multadd+0x8c>)
 800a7ee:	480e      	ldr	r0, [pc, #56]	; (800a828 <__multadd+0x90>)
 800a7f0:	21b5      	movs	r1, #181	; 0xb5
 800a7f2:	f000 fe27 	bl	800b444 <__assert_func>
 800a7f6:	6922      	ldr	r2, [r4, #16]
 800a7f8:	3202      	adds	r2, #2
 800a7fa:	f104 010c 	add.w	r1, r4, #12
 800a7fe:	0092      	lsls	r2, r2, #2
 800a800:	300c      	adds	r0, #12
 800a802:	f7fe fb49 	bl	8008e98 <memcpy>
 800a806:	4621      	mov	r1, r4
 800a808:	4638      	mov	r0, r7
 800a80a:	f7ff ffa3 	bl	800a754 <_Bfree>
 800a80e:	462c      	mov	r4, r5
 800a810:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a814:	3601      	adds	r6, #1
 800a816:	f8c3 8014 	str.w	r8, [r3, #20]
 800a81a:	6126      	str	r6, [r4, #16]
 800a81c:	4620      	mov	r0, r4
 800a81e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a822:	bf00      	nop
 800a824:	0800be27 	.word	0x0800be27
 800a828:	0800be98 	.word	0x0800be98

0800a82c <__hi0bits>:
 800a82c:	0c03      	lsrs	r3, r0, #16
 800a82e:	041b      	lsls	r3, r3, #16
 800a830:	b9d3      	cbnz	r3, 800a868 <__hi0bits+0x3c>
 800a832:	0400      	lsls	r0, r0, #16
 800a834:	2310      	movs	r3, #16
 800a836:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a83a:	bf04      	itt	eq
 800a83c:	0200      	lsleq	r0, r0, #8
 800a83e:	3308      	addeq	r3, #8
 800a840:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a844:	bf04      	itt	eq
 800a846:	0100      	lsleq	r0, r0, #4
 800a848:	3304      	addeq	r3, #4
 800a84a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a84e:	bf04      	itt	eq
 800a850:	0080      	lsleq	r0, r0, #2
 800a852:	3302      	addeq	r3, #2
 800a854:	2800      	cmp	r0, #0
 800a856:	db05      	blt.n	800a864 <__hi0bits+0x38>
 800a858:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a85c:	f103 0301 	add.w	r3, r3, #1
 800a860:	bf08      	it	eq
 800a862:	2320      	moveq	r3, #32
 800a864:	4618      	mov	r0, r3
 800a866:	4770      	bx	lr
 800a868:	2300      	movs	r3, #0
 800a86a:	e7e4      	b.n	800a836 <__hi0bits+0xa>

0800a86c <__lo0bits>:
 800a86c:	6803      	ldr	r3, [r0, #0]
 800a86e:	f013 0207 	ands.w	r2, r3, #7
 800a872:	4601      	mov	r1, r0
 800a874:	d00b      	beq.n	800a88e <__lo0bits+0x22>
 800a876:	07da      	lsls	r2, r3, #31
 800a878:	d424      	bmi.n	800a8c4 <__lo0bits+0x58>
 800a87a:	0798      	lsls	r0, r3, #30
 800a87c:	bf49      	itett	mi
 800a87e:	085b      	lsrmi	r3, r3, #1
 800a880:	089b      	lsrpl	r3, r3, #2
 800a882:	2001      	movmi	r0, #1
 800a884:	600b      	strmi	r3, [r1, #0]
 800a886:	bf5c      	itt	pl
 800a888:	600b      	strpl	r3, [r1, #0]
 800a88a:	2002      	movpl	r0, #2
 800a88c:	4770      	bx	lr
 800a88e:	b298      	uxth	r0, r3
 800a890:	b9b0      	cbnz	r0, 800a8c0 <__lo0bits+0x54>
 800a892:	0c1b      	lsrs	r3, r3, #16
 800a894:	2010      	movs	r0, #16
 800a896:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a89a:	bf04      	itt	eq
 800a89c:	0a1b      	lsreq	r3, r3, #8
 800a89e:	3008      	addeq	r0, #8
 800a8a0:	071a      	lsls	r2, r3, #28
 800a8a2:	bf04      	itt	eq
 800a8a4:	091b      	lsreq	r3, r3, #4
 800a8a6:	3004      	addeq	r0, #4
 800a8a8:	079a      	lsls	r2, r3, #30
 800a8aa:	bf04      	itt	eq
 800a8ac:	089b      	lsreq	r3, r3, #2
 800a8ae:	3002      	addeq	r0, #2
 800a8b0:	07da      	lsls	r2, r3, #31
 800a8b2:	d403      	bmi.n	800a8bc <__lo0bits+0x50>
 800a8b4:	085b      	lsrs	r3, r3, #1
 800a8b6:	f100 0001 	add.w	r0, r0, #1
 800a8ba:	d005      	beq.n	800a8c8 <__lo0bits+0x5c>
 800a8bc:	600b      	str	r3, [r1, #0]
 800a8be:	4770      	bx	lr
 800a8c0:	4610      	mov	r0, r2
 800a8c2:	e7e8      	b.n	800a896 <__lo0bits+0x2a>
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	4770      	bx	lr
 800a8c8:	2020      	movs	r0, #32
 800a8ca:	4770      	bx	lr

0800a8cc <__i2b>:
 800a8cc:	b510      	push	{r4, lr}
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	f7ff feff 	bl	800a6d4 <_Balloc>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	b928      	cbnz	r0, 800a8e6 <__i2b+0x1a>
 800a8da:	4b05      	ldr	r3, [pc, #20]	; (800a8f0 <__i2b+0x24>)
 800a8dc:	4805      	ldr	r0, [pc, #20]	; (800a8f4 <__i2b+0x28>)
 800a8de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a8e2:	f000 fdaf 	bl	800b444 <__assert_func>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	6144      	str	r4, [r0, #20]
 800a8ea:	6103      	str	r3, [r0, #16]
 800a8ec:	bd10      	pop	{r4, pc}
 800a8ee:	bf00      	nop
 800a8f0:	0800be27 	.word	0x0800be27
 800a8f4:	0800be98 	.word	0x0800be98

0800a8f8 <__multiply>:
 800a8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8fc:	4614      	mov	r4, r2
 800a8fe:	690a      	ldr	r2, [r1, #16]
 800a900:	6923      	ldr	r3, [r4, #16]
 800a902:	429a      	cmp	r2, r3
 800a904:	bfb8      	it	lt
 800a906:	460b      	movlt	r3, r1
 800a908:	460d      	mov	r5, r1
 800a90a:	bfbc      	itt	lt
 800a90c:	4625      	movlt	r5, r4
 800a90e:	461c      	movlt	r4, r3
 800a910:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a914:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a918:	68ab      	ldr	r3, [r5, #8]
 800a91a:	6869      	ldr	r1, [r5, #4]
 800a91c:	eb0a 0709 	add.w	r7, sl, r9
 800a920:	42bb      	cmp	r3, r7
 800a922:	b085      	sub	sp, #20
 800a924:	bfb8      	it	lt
 800a926:	3101      	addlt	r1, #1
 800a928:	f7ff fed4 	bl	800a6d4 <_Balloc>
 800a92c:	b930      	cbnz	r0, 800a93c <__multiply+0x44>
 800a92e:	4602      	mov	r2, r0
 800a930:	4b42      	ldr	r3, [pc, #264]	; (800aa3c <__multiply+0x144>)
 800a932:	4843      	ldr	r0, [pc, #268]	; (800aa40 <__multiply+0x148>)
 800a934:	f240 115d 	movw	r1, #349	; 0x15d
 800a938:	f000 fd84 	bl	800b444 <__assert_func>
 800a93c:	f100 0614 	add.w	r6, r0, #20
 800a940:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a944:	4633      	mov	r3, r6
 800a946:	2200      	movs	r2, #0
 800a948:	4543      	cmp	r3, r8
 800a94a:	d31e      	bcc.n	800a98a <__multiply+0x92>
 800a94c:	f105 0c14 	add.w	ip, r5, #20
 800a950:	f104 0314 	add.w	r3, r4, #20
 800a954:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a958:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a95c:	9202      	str	r2, [sp, #8]
 800a95e:	ebac 0205 	sub.w	r2, ip, r5
 800a962:	3a15      	subs	r2, #21
 800a964:	f022 0203 	bic.w	r2, r2, #3
 800a968:	3204      	adds	r2, #4
 800a96a:	f105 0115 	add.w	r1, r5, #21
 800a96e:	458c      	cmp	ip, r1
 800a970:	bf38      	it	cc
 800a972:	2204      	movcc	r2, #4
 800a974:	9201      	str	r2, [sp, #4]
 800a976:	9a02      	ldr	r2, [sp, #8]
 800a978:	9303      	str	r3, [sp, #12]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d808      	bhi.n	800a990 <__multiply+0x98>
 800a97e:	2f00      	cmp	r7, #0
 800a980:	dc55      	bgt.n	800aa2e <__multiply+0x136>
 800a982:	6107      	str	r7, [r0, #16]
 800a984:	b005      	add	sp, #20
 800a986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a98a:	f843 2b04 	str.w	r2, [r3], #4
 800a98e:	e7db      	b.n	800a948 <__multiply+0x50>
 800a990:	f8b3 a000 	ldrh.w	sl, [r3]
 800a994:	f1ba 0f00 	cmp.w	sl, #0
 800a998:	d020      	beq.n	800a9dc <__multiply+0xe4>
 800a99a:	f105 0e14 	add.w	lr, r5, #20
 800a99e:	46b1      	mov	r9, r6
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a9a6:	f8d9 b000 	ldr.w	fp, [r9]
 800a9aa:	b2a1      	uxth	r1, r4
 800a9ac:	fa1f fb8b 	uxth.w	fp, fp
 800a9b0:	fb0a b101 	mla	r1, sl, r1, fp
 800a9b4:	4411      	add	r1, r2
 800a9b6:	f8d9 2000 	ldr.w	r2, [r9]
 800a9ba:	0c24      	lsrs	r4, r4, #16
 800a9bc:	0c12      	lsrs	r2, r2, #16
 800a9be:	fb0a 2404 	mla	r4, sl, r4, r2
 800a9c2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a9c6:	b289      	uxth	r1, r1
 800a9c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a9cc:	45f4      	cmp	ip, lr
 800a9ce:	f849 1b04 	str.w	r1, [r9], #4
 800a9d2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a9d6:	d8e4      	bhi.n	800a9a2 <__multiply+0xaa>
 800a9d8:	9901      	ldr	r1, [sp, #4]
 800a9da:	5072      	str	r2, [r6, r1]
 800a9dc:	9a03      	ldr	r2, [sp, #12]
 800a9de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a9e2:	3304      	adds	r3, #4
 800a9e4:	f1b9 0f00 	cmp.w	r9, #0
 800a9e8:	d01f      	beq.n	800aa2a <__multiply+0x132>
 800a9ea:	6834      	ldr	r4, [r6, #0]
 800a9ec:	f105 0114 	add.w	r1, r5, #20
 800a9f0:	46b6      	mov	lr, r6
 800a9f2:	f04f 0a00 	mov.w	sl, #0
 800a9f6:	880a      	ldrh	r2, [r1, #0]
 800a9f8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a9fc:	fb09 b202 	mla	r2, r9, r2, fp
 800aa00:	4492      	add	sl, r2
 800aa02:	b2a4      	uxth	r4, r4
 800aa04:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800aa08:	f84e 4b04 	str.w	r4, [lr], #4
 800aa0c:	f851 4b04 	ldr.w	r4, [r1], #4
 800aa10:	f8be 2000 	ldrh.w	r2, [lr]
 800aa14:	0c24      	lsrs	r4, r4, #16
 800aa16:	fb09 2404 	mla	r4, r9, r4, r2
 800aa1a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800aa1e:	458c      	cmp	ip, r1
 800aa20:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aa24:	d8e7      	bhi.n	800a9f6 <__multiply+0xfe>
 800aa26:	9a01      	ldr	r2, [sp, #4]
 800aa28:	50b4      	str	r4, [r6, r2]
 800aa2a:	3604      	adds	r6, #4
 800aa2c:	e7a3      	b.n	800a976 <__multiply+0x7e>
 800aa2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1a5      	bne.n	800a982 <__multiply+0x8a>
 800aa36:	3f01      	subs	r7, #1
 800aa38:	e7a1      	b.n	800a97e <__multiply+0x86>
 800aa3a:	bf00      	nop
 800aa3c:	0800be27 	.word	0x0800be27
 800aa40:	0800be98 	.word	0x0800be98

0800aa44 <__pow5mult>:
 800aa44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa48:	4615      	mov	r5, r2
 800aa4a:	f012 0203 	ands.w	r2, r2, #3
 800aa4e:	4606      	mov	r6, r0
 800aa50:	460f      	mov	r7, r1
 800aa52:	d007      	beq.n	800aa64 <__pow5mult+0x20>
 800aa54:	4c25      	ldr	r4, [pc, #148]	; (800aaec <__pow5mult+0xa8>)
 800aa56:	3a01      	subs	r2, #1
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa5e:	f7ff fe9b 	bl	800a798 <__multadd>
 800aa62:	4607      	mov	r7, r0
 800aa64:	10ad      	asrs	r5, r5, #2
 800aa66:	d03d      	beq.n	800aae4 <__pow5mult+0xa0>
 800aa68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aa6a:	b97c      	cbnz	r4, 800aa8c <__pow5mult+0x48>
 800aa6c:	2010      	movs	r0, #16
 800aa6e:	f7ff fe29 	bl	800a6c4 <malloc>
 800aa72:	4602      	mov	r2, r0
 800aa74:	6270      	str	r0, [r6, #36]	; 0x24
 800aa76:	b928      	cbnz	r0, 800aa84 <__pow5mult+0x40>
 800aa78:	4b1d      	ldr	r3, [pc, #116]	; (800aaf0 <__pow5mult+0xac>)
 800aa7a:	481e      	ldr	r0, [pc, #120]	; (800aaf4 <__pow5mult+0xb0>)
 800aa7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aa80:	f000 fce0 	bl	800b444 <__assert_func>
 800aa84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa88:	6004      	str	r4, [r0, #0]
 800aa8a:	60c4      	str	r4, [r0, #12]
 800aa8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aa90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa94:	b94c      	cbnz	r4, 800aaaa <__pow5mult+0x66>
 800aa96:	f240 2171 	movw	r1, #625	; 0x271
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	f7ff ff16 	bl	800a8cc <__i2b>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	f8c8 0008 	str.w	r0, [r8, #8]
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	6003      	str	r3, [r0, #0]
 800aaaa:	f04f 0900 	mov.w	r9, #0
 800aaae:	07eb      	lsls	r3, r5, #31
 800aab0:	d50a      	bpl.n	800aac8 <__pow5mult+0x84>
 800aab2:	4639      	mov	r1, r7
 800aab4:	4622      	mov	r2, r4
 800aab6:	4630      	mov	r0, r6
 800aab8:	f7ff ff1e 	bl	800a8f8 <__multiply>
 800aabc:	4639      	mov	r1, r7
 800aabe:	4680      	mov	r8, r0
 800aac0:	4630      	mov	r0, r6
 800aac2:	f7ff fe47 	bl	800a754 <_Bfree>
 800aac6:	4647      	mov	r7, r8
 800aac8:	106d      	asrs	r5, r5, #1
 800aaca:	d00b      	beq.n	800aae4 <__pow5mult+0xa0>
 800aacc:	6820      	ldr	r0, [r4, #0]
 800aace:	b938      	cbnz	r0, 800aae0 <__pow5mult+0x9c>
 800aad0:	4622      	mov	r2, r4
 800aad2:	4621      	mov	r1, r4
 800aad4:	4630      	mov	r0, r6
 800aad6:	f7ff ff0f 	bl	800a8f8 <__multiply>
 800aada:	6020      	str	r0, [r4, #0]
 800aadc:	f8c0 9000 	str.w	r9, [r0]
 800aae0:	4604      	mov	r4, r0
 800aae2:	e7e4      	b.n	800aaae <__pow5mult+0x6a>
 800aae4:	4638      	mov	r0, r7
 800aae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaea:	bf00      	nop
 800aaec:	0800bfe8 	.word	0x0800bfe8
 800aaf0:	0800bdb1 	.word	0x0800bdb1
 800aaf4:	0800be98 	.word	0x0800be98

0800aaf8 <__lshift>:
 800aaf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aafc:	460c      	mov	r4, r1
 800aafe:	6849      	ldr	r1, [r1, #4]
 800ab00:	6923      	ldr	r3, [r4, #16]
 800ab02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab06:	68a3      	ldr	r3, [r4, #8]
 800ab08:	4607      	mov	r7, r0
 800ab0a:	4691      	mov	r9, r2
 800ab0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab10:	f108 0601 	add.w	r6, r8, #1
 800ab14:	42b3      	cmp	r3, r6
 800ab16:	db0b      	blt.n	800ab30 <__lshift+0x38>
 800ab18:	4638      	mov	r0, r7
 800ab1a:	f7ff fddb 	bl	800a6d4 <_Balloc>
 800ab1e:	4605      	mov	r5, r0
 800ab20:	b948      	cbnz	r0, 800ab36 <__lshift+0x3e>
 800ab22:	4602      	mov	r2, r0
 800ab24:	4b28      	ldr	r3, [pc, #160]	; (800abc8 <__lshift+0xd0>)
 800ab26:	4829      	ldr	r0, [pc, #164]	; (800abcc <__lshift+0xd4>)
 800ab28:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ab2c:	f000 fc8a 	bl	800b444 <__assert_func>
 800ab30:	3101      	adds	r1, #1
 800ab32:	005b      	lsls	r3, r3, #1
 800ab34:	e7ee      	b.n	800ab14 <__lshift+0x1c>
 800ab36:	2300      	movs	r3, #0
 800ab38:	f100 0114 	add.w	r1, r0, #20
 800ab3c:	f100 0210 	add.w	r2, r0, #16
 800ab40:	4618      	mov	r0, r3
 800ab42:	4553      	cmp	r3, sl
 800ab44:	db33      	blt.n	800abae <__lshift+0xb6>
 800ab46:	6920      	ldr	r0, [r4, #16]
 800ab48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab4c:	f104 0314 	add.w	r3, r4, #20
 800ab50:	f019 091f 	ands.w	r9, r9, #31
 800ab54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab5c:	d02b      	beq.n	800abb6 <__lshift+0xbe>
 800ab5e:	f1c9 0e20 	rsb	lr, r9, #32
 800ab62:	468a      	mov	sl, r1
 800ab64:	2200      	movs	r2, #0
 800ab66:	6818      	ldr	r0, [r3, #0]
 800ab68:	fa00 f009 	lsl.w	r0, r0, r9
 800ab6c:	4302      	orrs	r2, r0
 800ab6e:	f84a 2b04 	str.w	r2, [sl], #4
 800ab72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab76:	459c      	cmp	ip, r3
 800ab78:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab7c:	d8f3      	bhi.n	800ab66 <__lshift+0x6e>
 800ab7e:	ebac 0304 	sub.w	r3, ip, r4
 800ab82:	3b15      	subs	r3, #21
 800ab84:	f023 0303 	bic.w	r3, r3, #3
 800ab88:	3304      	adds	r3, #4
 800ab8a:	f104 0015 	add.w	r0, r4, #21
 800ab8e:	4584      	cmp	ip, r0
 800ab90:	bf38      	it	cc
 800ab92:	2304      	movcc	r3, #4
 800ab94:	50ca      	str	r2, [r1, r3]
 800ab96:	b10a      	cbz	r2, 800ab9c <__lshift+0xa4>
 800ab98:	f108 0602 	add.w	r6, r8, #2
 800ab9c:	3e01      	subs	r6, #1
 800ab9e:	4638      	mov	r0, r7
 800aba0:	612e      	str	r6, [r5, #16]
 800aba2:	4621      	mov	r1, r4
 800aba4:	f7ff fdd6 	bl	800a754 <_Bfree>
 800aba8:	4628      	mov	r0, r5
 800abaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abae:	f842 0f04 	str.w	r0, [r2, #4]!
 800abb2:	3301      	adds	r3, #1
 800abb4:	e7c5      	b.n	800ab42 <__lshift+0x4a>
 800abb6:	3904      	subs	r1, #4
 800abb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800abbc:	f841 2f04 	str.w	r2, [r1, #4]!
 800abc0:	459c      	cmp	ip, r3
 800abc2:	d8f9      	bhi.n	800abb8 <__lshift+0xc0>
 800abc4:	e7ea      	b.n	800ab9c <__lshift+0xa4>
 800abc6:	bf00      	nop
 800abc8:	0800be27 	.word	0x0800be27
 800abcc:	0800be98 	.word	0x0800be98

0800abd0 <__mcmp>:
 800abd0:	b530      	push	{r4, r5, lr}
 800abd2:	6902      	ldr	r2, [r0, #16]
 800abd4:	690c      	ldr	r4, [r1, #16]
 800abd6:	1b12      	subs	r2, r2, r4
 800abd8:	d10e      	bne.n	800abf8 <__mcmp+0x28>
 800abda:	f100 0314 	add.w	r3, r0, #20
 800abde:	3114      	adds	r1, #20
 800abe0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800abe4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800abe8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800abec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800abf0:	42a5      	cmp	r5, r4
 800abf2:	d003      	beq.n	800abfc <__mcmp+0x2c>
 800abf4:	d305      	bcc.n	800ac02 <__mcmp+0x32>
 800abf6:	2201      	movs	r2, #1
 800abf8:	4610      	mov	r0, r2
 800abfa:	bd30      	pop	{r4, r5, pc}
 800abfc:	4283      	cmp	r3, r0
 800abfe:	d3f3      	bcc.n	800abe8 <__mcmp+0x18>
 800ac00:	e7fa      	b.n	800abf8 <__mcmp+0x28>
 800ac02:	f04f 32ff 	mov.w	r2, #4294967295
 800ac06:	e7f7      	b.n	800abf8 <__mcmp+0x28>

0800ac08 <__mdiff>:
 800ac08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0c:	460c      	mov	r4, r1
 800ac0e:	4606      	mov	r6, r0
 800ac10:	4611      	mov	r1, r2
 800ac12:	4620      	mov	r0, r4
 800ac14:	4617      	mov	r7, r2
 800ac16:	f7ff ffdb 	bl	800abd0 <__mcmp>
 800ac1a:	1e05      	subs	r5, r0, #0
 800ac1c:	d110      	bne.n	800ac40 <__mdiff+0x38>
 800ac1e:	4629      	mov	r1, r5
 800ac20:	4630      	mov	r0, r6
 800ac22:	f7ff fd57 	bl	800a6d4 <_Balloc>
 800ac26:	b930      	cbnz	r0, 800ac36 <__mdiff+0x2e>
 800ac28:	4b39      	ldr	r3, [pc, #228]	; (800ad10 <__mdiff+0x108>)
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	f240 2132 	movw	r1, #562	; 0x232
 800ac30:	4838      	ldr	r0, [pc, #224]	; (800ad14 <__mdiff+0x10c>)
 800ac32:	f000 fc07 	bl	800b444 <__assert_func>
 800ac36:	2301      	movs	r3, #1
 800ac38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac40:	bfa4      	itt	ge
 800ac42:	463b      	movge	r3, r7
 800ac44:	4627      	movge	r7, r4
 800ac46:	4630      	mov	r0, r6
 800ac48:	6879      	ldr	r1, [r7, #4]
 800ac4a:	bfa6      	itte	ge
 800ac4c:	461c      	movge	r4, r3
 800ac4e:	2500      	movge	r5, #0
 800ac50:	2501      	movlt	r5, #1
 800ac52:	f7ff fd3f 	bl	800a6d4 <_Balloc>
 800ac56:	b920      	cbnz	r0, 800ac62 <__mdiff+0x5a>
 800ac58:	4b2d      	ldr	r3, [pc, #180]	; (800ad10 <__mdiff+0x108>)
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ac60:	e7e6      	b.n	800ac30 <__mdiff+0x28>
 800ac62:	693e      	ldr	r6, [r7, #16]
 800ac64:	60c5      	str	r5, [r0, #12]
 800ac66:	6925      	ldr	r5, [r4, #16]
 800ac68:	f107 0114 	add.w	r1, r7, #20
 800ac6c:	f104 0914 	add.w	r9, r4, #20
 800ac70:	f100 0e14 	add.w	lr, r0, #20
 800ac74:	f107 0210 	add.w	r2, r7, #16
 800ac78:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ac7c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ac80:	46f2      	mov	sl, lr
 800ac82:	2700      	movs	r7, #0
 800ac84:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ac8c:	fa1f f883 	uxth.w	r8, r3
 800ac90:	fa17 f78b 	uxtah	r7, r7, fp
 800ac94:	0c1b      	lsrs	r3, r3, #16
 800ac96:	eba7 0808 	sub.w	r8, r7, r8
 800ac9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ac9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aca2:	fa1f f888 	uxth.w	r8, r8
 800aca6:	141f      	asrs	r7, r3, #16
 800aca8:	454d      	cmp	r5, r9
 800acaa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800acae:	f84a 3b04 	str.w	r3, [sl], #4
 800acb2:	d8e7      	bhi.n	800ac84 <__mdiff+0x7c>
 800acb4:	1b2b      	subs	r3, r5, r4
 800acb6:	3b15      	subs	r3, #21
 800acb8:	f023 0303 	bic.w	r3, r3, #3
 800acbc:	3304      	adds	r3, #4
 800acbe:	3415      	adds	r4, #21
 800acc0:	42a5      	cmp	r5, r4
 800acc2:	bf38      	it	cc
 800acc4:	2304      	movcc	r3, #4
 800acc6:	4419      	add	r1, r3
 800acc8:	4473      	add	r3, lr
 800acca:	469e      	mov	lr, r3
 800accc:	460d      	mov	r5, r1
 800acce:	4565      	cmp	r5, ip
 800acd0:	d30e      	bcc.n	800acf0 <__mdiff+0xe8>
 800acd2:	f10c 0203 	add.w	r2, ip, #3
 800acd6:	1a52      	subs	r2, r2, r1
 800acd8:	f022 0203 	bic.w	r2, r2, #3
 800acdc:	3903      	subs	r1, #3
 800acde:	458c      	cmp	ip, r1
 800ace0:	bf38      	it	cc
 800ace2:	2200      	movcc	r2, #0
 800ace4:	441a      	add	r2, r3
 800ace6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800acea:	b17b      	cbz	r3, 800ad0c <__mdiff+0x104>
 800acec:	6106      	str	r6, [r0, #16]
 800acee:	e7a5      	b.n	800ac3c <__mdiff+0x34>
 800acf0:	f855 8b04 	ldr.w	r8, [r5], #4
 800acf4:	fa17 f488 	uxtah	r4, r7, r8
 800acf8:	1422      	asrs	r2, r4, #16
 800acfa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800acfe:	b2a4      	uxth	r4, r4
 800ad00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ad04:	f84e 4b04 	str.w	r4, [lr], #4
 800ad08:	1417      	asrs	r7, r2, #16
 800ad0a:	e7e0      	b.n	800acce <__mdiff+0xc6>
 800ad0c:	3e01      	subs	r6, #1
 800ad0e:	e7ea      	b.n	800ace6 <__mdiff+0xde>
 800ad10:	0800be27 	.word	0x0800be27
 800ad14:	0800be98 	.word	0x0800be98

0800ad18 <__d2b>:
 800ad18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad1c:	4689      	mov	r9, r1
 800ad1e:	2101      	movs	r1, #1
 800ad20:	ec57 6b10 	vmov	r6, r7, d0
 800ad24:	4690      	mov	r8, r2
 800ad26:	f7ff fcd5 	bl	800a6d4 <_Balloc>
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	b930      	cbnz	r0, 800ad3c <__d2b+0x24>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	4b25      	ldr	r3, [pc, #148]	; (800adc8 <__d2b+0xb0>)
 800ad32:	4826      	ldr	r0, [pc, #152]	; (800adcc <__d2b+0xb4>)
 800ad34:	f240 310a 	movw	r1, #778	; 0x30a
 800ad38:	f000 fb84 	bl	800b444 <__assert_func>
 800ad3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ad40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad44:	bb35      	cbnz	r5, 800ad94 <__d2b+0x7c>
 800ad46:	2e00      	cmp	r6, #0
 800ad48:	9301      	str	r3, [sp, #4]
 800ad4a:	d028      	beq.n	800ad9e <__d2b+0x86>
 800ad4c:	4668      	mov	r0, sp
 800ad4e:	9600      	str	r6, [sp, #0]
 800ad50:	f7ff fd8c 	bl	800a86c <__lo0bits>
 800ad54:	9900      	ldr	r1, [sp, #0]
 800ad56:	b300      	cbz	r0, 800ad9a <__d2b+0x82>
 800ad58:	9a01      	ldr	r2, [sp, #4]
 800ad5a:	f1c0 0320 	rsb	r3, r0, #32
 800ad5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad62:	430b      	orrs	r3, r1
 800ad64:	40c2      	lsrs	r2, r0
 800ad66:	6163      	str	r3, [r4, #20]
 800ad68:	9201      	str	r2, [sp, #4]
 800ad6a:	9b01      	ldr	r3, [sp, #4]
 800ad6c:	61a3      	str	r3, [r4, #24]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	bf14      	ite	ne
 800ad72:	2202      	movne	r2, #2
 800ad74:	2201      	moveq	r2, #1
 800ad76:	6122      	str	r2, [r4, #16]
 800ad78:	b1d5      	cbz	r5, 800adb0 <__d2b+0x98>
 800ad7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ad7e:	4405      	add	r5, r0
 800ad80:	f8c9 5000 	str.w	r5, [r9]
 800ad84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad88:	f8c8 0000 	str.w	r0, [r8]
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	b003      	add	sp, #12
 800ad90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad98:	e7d5      	b.n	800ad46 <__d2b+0x2e>
 800ad9a:	6161      	str	r1, [r4, #20]
 800ad9c:	e7e5      	b.n	800ad6a <__d2b+0x52>
 800ad9e:	a801      	add	r0, sp, #4
 800ada0:	f7ff fd64 	bl	800a86c <__lo0bits>
 800ada4:	9b01      	ldr	r3, [sp, #4]
 800ada6:	6163      	str	r3, [r4, #20]
 800ada8:	2201      	movs	r2, #1
 800adaa:	6122      	str	r2, [r4, #16]
 800adac:	3020      	adds	r0, #32
 800adae:	e7e3      	b.n	800ad78 <__d2b+0x60>
 800adb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800adb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800adb8:	f8c9 0000 	str.w	r0, [r9]
 800adbc:	6918      	ldr	r0, [r3, #16]
 800adbe:	f7ff fd35 	bl	800a82c <__hi0bits>
 800adc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800adc6:	e7df      	b.n	800ad88 <__d2b+0x70>
 800adc8:	0800be27 	.word	0x0800be27
 800adcc:	0800be98 	.word	0x0800be98

0800add0 <_calloc_r>:
 800add0:	b513      	push	{r0, r1, r4, lr}
 800add2:	434a      	muls	r2, r1
 800add4:	4611      	mov	r1, r2
 800add6:	9201      	str	r2, [sp, #4]
 800add8:	f000 f85a 	bl	800ae90 <_malloc_r>
 800addc:	4604      	mov	r4, r0
 800adde:	b118      	cbz	r0, 800ade8 <_calloc_r+0x18>
 800ade0:	9a01      	ldr	r2, [sp, #4]
 800ade2:	2100      	movs	r1, #0
 800ade4:	f7fe f866 	bl	8008eb4 <memset>
 800ade8:	4620      	mov	r0, r4
 800adea:	b002      	add	sp, #8
 800adec:	bd10      	pop	{r4, pc}
	...

0800adf0 <_free_r>:
 800adf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adf2:	2900      	cmp	r1, #0
 800adf4:	d048      	beq.n	800ae88 <_free_r+0x98>
 800adf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adfa:	9001      	str	r0, [sp, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f1a1 0404 	sub.w	r4, r1, #4
 800ae02:	bfb8      	it	lt
 800ae04:	18e4      	addlt	r4, r4, r3
 800ae06:	f000 fca7 	bl	800b758 <__malloc_lock>
 800ae0a:	4a20      	ldr	r2, [pc, #128]	; (800ae8c <_free_r+0x9c>)
 800ae0c:	9801      	ldr	r0, [sp, #4]
 800ae0e:	6813      	ldr	r3, [r2, #0]
 800ae10:	4615      	mov	r5, r2
 800ae12:	b933      	cbnz	r3, 800ae22 <_free_r+0x32>
 800ae14:	6063      	str	r3, [r4, #4]
 800ae16:	6014      	str	r4, [r2, #0]
 800ae18:	b003      	add	sp, #12
 800ae1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae1e:	f000 bca1 	b.w	800b764 <__malloc_unlock>
 800ae22:	42a3      	cmp	r3, r4
 800ae24:	d90b      	bls.n	800ae3e <_free_r+0x4e>
 800ae26:	6821      	ldr	r1, [r4, #0]
 800ae28:	1862      	adds	r2, r4, r1
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	bf04      	itt	eq
 800ae2e:	681a      	ldreq	r2, [r3, #0]
 800ae30:	685b      	ldreq	r3, [r3, #4]
 800ae32:	6063      	str	r3, [r4, #4]
 800ae34:	bf04      	itt	eq
 800ae36:	1852      	addeq	r2, r2, r1
 800ae38:	6022      	streq	r2, [r4, #0]
 800ae3a:	602c      	str	r4, [r5, #0]
 800ae3c:	e7ec      	b.n	800ae18 <_free_r+0x28>
 800ae3e:	461a      	mov	r2, r3
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	b10b      	cbz	r3, 800ae48 <_free_r+0x58>
 800ae44:	42a3      	cmp	r3, r4
 800ae46:	d9fa      	bls.n	800ae3e <_free_r+0x4e>
 800ae48:	6811      	ldr	r1, [r2, #0]
 800ae4a:	1855      	adds	r5, r2, r1
 800ae4c:	42a5      	cmp	r5, r4
 800ae4e:	d10b      	bne.n	800ae68 <_free_r+0x78>
 800ae50:	6824      	ldr	r4, [r4, #0]
 800ae52:	4421      	add	r1, r4
 800ae54:	1854      	adds	r4, r2, r1
 800ae56:	42a3      	cmp	r3, r4
 800ae58:	6011      	str	r1, [r2, #0]
 800ae5a:	d1dd      	bne.n	800ae18 <_free_r+0x28>
 800ae5c:	681c      	ldr	r4, [r3, #0]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	6053      	str	r3, [r2, #4]
 800ae62:	4421      	add	r1, r4
 800ae64:	6011      	str	r1, [r2, #0]
 800ae66:	e7d7      	b.n	800ae18 <_free_r+0x28>
 800ae68:	d902      	bls.n	800ae70 <_free_r+0x80>
 800ae6a:	230c      	movs	r3, #12
 800ae6c:	6003      	str	r3, [r0, #0]
 800ae6e:	e7d3      	b.n	800ae18 <_free_r+0x28>
 800ae70:	6825      	ldr	r5, [r4, #0]
 800ae72:	1961      	adds	r1, r4, r5
 800ae74:	428b      	cmp	r3, r1
 800ae76:	bf04      	itt	eq
 800ae78:	6819      	ldreq	r1, [r3, #0]
 800ae7a:	685b      	ldreq	r3, [r3, #4]
 800ae7c:	6063      	str	r3, [r4, #4]
 800ae7e:	bf04      	itt	eq
 800ae80:	1949      	addeq	r1, r1, r5
 800ae82:	6021      	streq	r1, [r4, #0]
 800ae84:	6054      	str	r4, [r2, #4]
 800ae86:	e7c7      	b.n	800ae18 <_free_r+0x28>
 800ae88:	b003      	add	sp, #12
 800ae8a:	bd30      	pop	{r4, r5, pc}
 800ae8c:	200004fc 	.word	0x200004fc

0800ae90 <_malloc_r>:
 800ae90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae92:	1ccd      	adds	r5, r1, #3
 800ae94:	f025 0503 	bic.w	r5, r5, #3
 800ae98:	3508      	adds	r5, #8
 800ae9a:	2d0c      	cmp	r5, #12
 800ae9c:	bf38      	it	cc
 800ae9e:	250c      	movcc	r5, #12
 800aea0:	2d00      	cmp	r5, #0
 800aea2:	4606      	mov	r6, r0
 800aea4:	db01      	blt.n	800aeaa <_malloc_r+0x1a>
 800aea6:	42a9      	cmp	r1, r5
 800aea8:	d903      	bls.n	800aeb2 <_malloc_r+0x22>
 800aeaa:	230c      	movs	r3, #12
 800aeac:	6033      	str	r3, [r6, #0]
 800aeae:	2000      	movs	r0, #0
 800aeb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeb2:	f000 fc51 	bl	800b758 <__malloc_lock>
 800aeb6:	4921      	ldr	r1, [pc, #132]	; (800af3c <_malloc_r+0xac>)
 800aeb8:	680a      	ldr	r2, [r1, #0]
 800aeba:	4614      	mov	r4, r2
 800aebc:	b99c      	cbnz	r4, 800aee6 <_malloc_r+0x56>
 800aebe:	4f20      	ldr	r7, [pc, #128]	; (800af40 <_malloc_r+0xb0>)
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	b923      	cbnz	r3, 800aece <_malloc_r+0x3e>
 800aec4:	4621      	mov	r1, r4
 800aec6:	4630      	mov	r0, r6
 800aec8:	f000 f996 	bl	800b1f8 <_sbrk_r>
 800aecc:	6038      	str	r0, [r7, #0]
 800aece:	4629      	mov	r1, r5
 800aed0:	4630      	mov	r0, r6
 800aed2:	f000 f991 	bl	800b1f8 <_sbrk_r>
 800aed6:	1c43      	adds	r3, r0, #1
 800aed8:	d123      	bne.n	800af22 <_malloc_r+0x92>
 800aeda:	230c      	movs	r3, #12
 800aedc:	6033      	str	r3, [r6, #0]
 800aede:	4630      	mov	r0, r6
 800aee0:	f000 fc40 	bl	800b764 <__malloc_unlock>
 800aee4:	e7e3      	b.n	800aeae <_malloc_r+0x1e>
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	1b5b      	subs	r3, r3, r5
 800aeea:	d417      	bmi.n	800af1c <_malloc_r+0x8c>
 800aeec:	2b0b      	cmp	r3, #11
 800aeee:	d903      	bls.n	800aef8 <_malloc_r+0x68>
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	441c      	add	r4, r3
 800aef4:	6025      	str	r5, [r4, #0]
 800aef6:	e004      	b.n	800af02 <_malloc_r+0x72>
 800aef8:	6863      	ldr	r3, [r4, #4]
 800aefa:	42a2      	cmp	r2, r4
 800aefc:	bf0c      	ite	eq
 800aefe:	600b      	streq	r3, [r1, #0]
 800af00:	6053      	strne	r3, [r2, #4]
 800af02:	4630      	mov	r0, r6
 800af04:	f000 fc2e 	bl	800b764 <__malloc_unlock>
 800af08:	f104 000b 	add.w	r0, r4, #11
 800af0c:	1d23      	adds	r3, r4, #4
 800af0e:	f020 0007 	bic.w	r0, r0, #7
 800af12:	1ac2      	subs	r2, r0, r3
 800af14:	d0cc      	beq.n	800aeb0 <_malloc_r+0x20>
 800af16:	1a1b      	subs	r3, r3, r0
 800af18:	50a3      	str	r3, [r4, r2]
 800af1a:	e7c9      	b.n	800aeb0 <_malloc_r+0x20>
 800af1c:	4622      	mov	r2, r4
 800af1e:	6864      	ldr	r4, [r4, #4]
 800af20:	e7cc      	b.n	800aebc <_malloc_r+0x2c>
 800af22:	1cc4      	adds	r4, r0, #3
 800af24:	f024 0403 	bic.w	r4, r4, #3
 800af28:	42a0      	cmp	r0, r4
 800af2a:	d0e3      	beq.n	800aef4 <_malloc_r+0x64>
 800af2c:	1a21      	subs	r1, r4, r0
 800af2e:	4630      	mov	r0, r6
 800af30:	f000 f962 	bl	800b1f8 <_sbrk_r>
 800af34:	3001      	adds	r0, #1
 800af36:	d1dd      	bne.n	800aef4 <_malloc_r+0x64>
 800af38:	e7cf      	b.n	800aeda <_malloc_r+0x4a>
 800af3a:	bf00      	nop
 800af3c:	200004fc 	.word	0x200004fc
 800af40:	20000500 	.word	0x20000500

0800af44 <__sfputc_r>:
 800af44:	6893      	ldr	r3, [r2, #8]
 800af46:	3b01      	subs	r3, #1
 800af48:	2b00      	cmp	r3, #0
 800af4a:	b410      	push	{r4}
 800af4c:	6093      	str	r3, [r2, #8]
 800af4e:	da08      	bge.n	800af62 <__sfputc_r+0x1e>
 800af50:	6994      	ldr	r4, [r2, #24]
 800af52:	42a3      	cmp	r3, r4
 800af54:	db01      	blt.n	800af5a <__sfputc_r+0x16>
 800af56:	290a      	cmp	r1, #10
 800af58:	d103      	bne.n	800af62 <__sfputc_r+0x1e>
 800af5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af5e:	f000 b99f 	b.w	800b2a0 <__swbuf_r>
 800af62:	6813      	ldr	r3, [r2, #0]
 800af64:	1c58      	adds	r0, r3, #1
 800af66:	6010      	str	r0, [r2, #0]
 800af68:	7019      	strb	r1, [r3, #0]
 800af6a:	4608      	mov	r0, r1
 800af6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af70:	4770      	bx	lr

0800af72 <__sfputs_r>:
 800af72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af74:	4606      	mov	r6, r0
 800af76:	460f      	mov	r7, r1
 800af78:	4614      	mov	r4, r2
 800af7a:	18d5      	adds	r5, r2, r3
 800af7c:	42ac      	cmp	r4, r5
 800af7e:	d101      	bne.n	800af84 <__sfputs_r+0x12>
 800af80:	2000      	movs	r0, #0
 800af82:	e007      	b.n	800af94 <__sfputs_r+0x22>
 800af84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af88:	463a      	mov	r2, r7
 800af8a:	4630      	mov	r0, r6
 800af8c:	f7ff ffda 	bl	800af44 <__sfputc_r>
 800af90:	1c43      	adds	r3, r0, #1
 800af92:	d1f3      	bne.n	800af7c <__sfputs_r+0xa>
 800af94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af98 <_vfiprintf_r>:
 800af98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af9c:	460d      	mov	r5, r1
 800af9e:	b09d      	sub	sp, #116	; 0x74
 800afa0:	4614      	mov	r4, r2
 800afa2:	4698      	mov	r8, r3
 800afa4:	4606      	mov	r6, r0
 800afa6:	b118      	cbz	r0, 800afb0 <_vfiprintf_r+0x18>
 800afa8:	6983      	ldr	r3, [r0, #24]
 800afaa:	b90b      	cbnz	r3, 800afb0 <_vfiprintf_r+0x18>
 800afac:	f7ff fae4 	bl	800a578 <__sinit>
 800afb0:	4b89      	ldr	r3, [pc, #548]	; (800b1d8 <_vfiprintf_r+0x240>)
 800afb2:	429d      	cmp	r5, r3
 800afb4:	d11b      	bne.n	800afee <_vfiprintf_r+0x56>
 800afb6:	6875      	ldr	r5, [r6, #4]
 800afb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afba:	07d9      	lsls	r1, r3, #31
 800afbc:	d405      	bmi.n	800afca <_vfiprintf_r+0x32>
 800afbe:	89ab      	ldrh	r3, [r5, #12]
 800afc0:	059a      	lsls	r2, r3, #22
 800afc2:	d402      	bmi.n	800afca <_vfiprintf_r+0x32>
 800afc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afc6:	f7ff fb7a 	bl	800a6be <__retarget_lock_acquire_recursive>
 800afca:	89ab      	ldrh	r3, [r5, #12]
 800afcc:	071b      	lsls	r3, r3, #28
 800afce:	d501      	bpl.n	800afd4 <_vfiprintf_r+0x3c>
 800afd0:	692b      	ldr	r3, [r5, #16]
 800afd2:	b9eb      	cbnz	r3, 800b010 <_vfiprintf_r+0x78>
 800afd4:	4629      	mov	r1, r5
 800afd6:	4630      	mov	r0, r6
 800afd8:	f000 f9c6 	bl	800b368 <__swsetup_r>
 800afdc:	b1c0      	cbz	r0, 800b010 <_vfiprintf_r+0x78>
 800afde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afe0:	07dc      	lsls	r4, r3, #31
 800afe2:	d50e      	bpl.n	800b002 <_vfiprintf_r+0x6a>
 800afe4:	f04f 30ff 	mov.w	r0, #4294967295
 800afe8:	b01d      	add	sp, #116	; 0x74
 800afea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afee:	4b7b      	ldr	r3, [pc, #492]	; (800b1dc <_vfiprintf_r+0x244>)
 800aff0:	429d      	cmp	r5, r3
 800aff2:	d101      	bne.n	800aff8 <_vfiprintf_r+0x60>
 800aff4:	68b5      	ldr	r5, [r6, #8]
 800aff6:	e7df      	b.n	800afb8 <_vfiprintf_r+0x20>
 800aff8:	4b79      	ldr	r3, [pc, #484]	; (800b1e0 <_vfiprintf_r+0x248>)
 800affa:	429d      	cmp	r5, r3
 800affc:	bf08      	it	eq
 800affe:	68f5      	ldreq	r5, [r6, #12]
 800b000:	e7da      	b.n	800afb8 <_vfiprintf_r+0x20>
 800b002:	89ab      	ldrh	r3, [r5, #12]
 800b004:	0598      	lsls	r0, r3, #22
 800b006:	d4ed      	bmi.n	800afe4 <_vfiprintf_r+0x4c>
 800b008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b00a:	f7ff fb59 	bl	800a6c0 <__retarget_lock_release_recursive>
 800b00e:	e7e9      	b.n	800afe4 <_vfiprintf_r+0x4c>
 800b010:	2300      	movs	r3, #0
 800b012:	9309      	str	r3, [sp, #36]	; 0x24
 800b014:	2320      	movs	r3, #32
 800b016:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b01a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b01e:	2330      	movs	r3, #48	; 0x30
 800b020:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b1e4 <_vfiprintf_r+0x24c>
 800b024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b028:	f04f 0901 	mov.w	r9, #1
 800b02c:	4623      	mov	r3, r4
 800b02e:	469a      	mov	sl, r3
 800b030:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b034:	b10a      	cbz	r2, 800b03a <_vfiprintf_r+0xa2>
 800b036:	2a25      	cmp	r2, #37	; 0x25
 800b038:	d1f9      	bne.n	800b02e <_vfiprintf_r+0x96>
 800b03a:	ebba 0b04 	subs.w	fp, sl, r4
 800b03e:	d00b      	beq.n	800b058 <_vfiprintf_r+0xc0>
 800b040:	465b      	mov	r3, fp
 800b042:	4622      	mov	r2, r4
 800b044:	4629      	mov	r1, r5
 800b046:	4630      	mov	r0, r6
 800b048:	f7ff ff93 	bl	800af72 <__sfputs_r>
 800b04c:	3001      	adds	r0, #1
 800b04e:	f000 80aa 	beq.w	800b1a6 <_vfiprintf_r+0x20e>
 800b052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b054:	445a      	add	r2, fp
 800b056:	9209      	str	r2, [sp, #36]	; 0x24
 800b058:	f89a 3000 	ldrb.w	r3, [sl]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f000 80a2 	beq.w	800b1a6 <_vfiprintf_r+0x20e>
 800b062:	2300      	movs	r3, #0
 800b064:	f04f 32ff 	mov.w	r2, #4294967295
 800b068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b06c:	f10a 0a01 	add.w	sl, sl, #1
 800b070:	9304      	str	r3, [sp, #16]
 800b072:	9307      	str	r3, [sp, #28]
 800b074:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b078:	931a      	str	r3, [sp, #104]	; 0x68
 800b07a:	4654      	mov	r4, sl
 800b07c:	2205      	movs	r2, #5
 800b07e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b082:	4858      	ldr	r0, [pc, #352]	; (800b1e4 <_vfiprintf_r+0x24c>)
 800b084:	f7f5 f8ac 	bl	80001e0 <memchr>
 800b088:	9a04      	ldr	r2, [sp, #16]
 800b08a:	b9d8      	cbnz	r0, 800b0c4 <_vfiprintf_r+0x12c>
 800b08c:	06d1      	lsls	r1, r2, #27
 800b08e:	bf44      	itt	mi
 800b090:	2320      	movmi	r3, #32
 800b092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b096:	0713      	lsls	r3, r2, #28
 800b098:	bf44      	itt	mi
 800b09a:	232b      	movmi	r3, #43	; 0x2b
 800b09c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b0a4:	2b2a      	cmp	r3, #42	; 0x2a
 800b0a6:	d015      	beq.n	800b0d4 <_vfiprintf_r+0x13c>
 800b0a8:	9a07      	ldr	r2, [sp, #28]
 800b0aa:	4654      	mov	r4, sl
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	f04f 0c0a 	mov.w	ip, #10
 800b0b2:	4621      	mov	r1, r4
 800b0b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0b8:	3b30      	subs	r3, #48	; 0x30
 800b0ba:	2b09      	cmp	r3, #9
 800b0bc:	d94e      	bls.n	800b15c <_vfiprintf_r+0x1c4>
 800b0be:	b1b0      	cbz	r0, 800b0ee <_vfiprintf_r+0x156>
 800b0c0:	9207      	str	r2, [sp, #28]
 800b0c2:	e014      	b.n	800b0ee <_vfiprintf_r+0x156>
 800b0c4:	eba0 0308 	sub.w	r3, r0, r8
 800b0c8:	fa09 f303 	lsl.w	r3, r9, r3
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	9304      	str	r3, [sp, #16]
 800b0d0:	46a2      	mov	sl, r4
 800b0d2:	e7d2      	b.n	800b07a <_vfiprintf_r+0xe2>
 800b0d4:	9b03      	ldr	r3, [sp, #12]
 800b0d6:	1d19      	adds	r1, r3, #4
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	9103      	str	r1, [sp, #12]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	bfbb      	ittet	lt
 800b0e0:	425b      	neglt	r3, r3
 800b0e2:	f042 0202 	orrlt.w	r2, r2, #2
 800b0e6:	9307      	strge	r3, [sp, #28]
 800b0e8:	9307      	strlt	r3, [sp, #28]
 800b0ea:	bfb8      	it	lt
 800b0ec:	9204      	strlt	r2, [sp, #16]
 800b0ee:	7823      	ldrb	r3, [r4, #0]
 800b0f0:	2b2e      	cmp	r3, #46	; 0x2e
 800b0f2:	d10c      	bne.n	800b10e <_vfiprintf_r+0x176>
 800b0f4:	7863      	ldrb	r3, [r4, #1]
 800b0f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b0f8:	d135      	bne.n	800b166 <_vfiprintf_r+0x1ce>
 800b0fa:	9b03      	ldr	r3, [sp, #12]
 800b0fc:	1d1a      	adds	r2, r3, #4
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	9203      	str	r2, [sp, #12]
 800b102:	2b00      	cmp	r3, #0
 800b104:	bfb8      	it	lt
 800b106:	f04f 33ff 	movlt.w	r3, #4294967295
 800b10a:	3402      	adds	r4, #2
 800b10c:	9305      	str	r3, [sp, #20]
 800b10e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b1f4 <_vfiprintf_r+0x25c>
 800b112:	7821      	ldrb	r1, [r4, #0]
 800b114:	2203      	movs	r2, #3
 800b116:	4650      	mov	r0, sl
 800b118:	f7f5 f862 	bl	80001e0 <memchr>
 800b11c:	b140      	cbz	r0, 800b130 <_vfiprintf_r+0x198>
 800b11e:	2340      	movs	r3, #64	; 0x40
 800b120:	eba0 000a 	sub.w	r0, r0, sl
 800b124:	fa03 f000 	lsl.w	r0, r3, r0
 800b128:	9b04      	ldr	r3, [sp, #16]
 800b12a:	4303      	orrs	r3, r0
 800b12c:	3401      	adds	r4, #1
 800b12e:	9304      	str	r3, [sp, #16]
 800b130:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b134:	482c      	ldr	r0, [pc, #176]	; (800b1e8 <_vfiprintf_r+0x250>)
 800b136:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b13a:	2206      	movs	r2, #6
 800b13c:	f7f5 f850 	bl	80001e0 <memchr>
 800b140:	2800      	cmp	r0, #0
 800b142:	d03f      	beq.n	800b1c4 <_vfiprintf_r+0x22c>
 800b144:	4b29      	ldr	r3, [pc, #164]	; (800b1ec <_vfiprintf_r+0x254>)
 800b146:	bb1b      	cbnz	r3, 800b190 <_vfiprintf_r+0x1f8>
 800b148:	9b03      	ldr	r3, [sp, #12]
 800b14a:	3307      	adds	r3, #7
 800b14c:	f023 0307 	bic.w	r3, r3, #7
 800b150:	3308      	adds	r3, #8
 800b152:	9303      	str	r3, [sp, #12]
 800b154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b156:	443b      	add	r3, r7
 800b158:	9309      	str	r3, [sp, #36]	; 0x24
 800b15a:	e767      	b.n	800b02c <_vfiprintf_r+0x94>
 800b15c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b160:	460c      	mov	r4, r1
 800b162:	2001      	movs	r0, #1
 800b164:	e7a5      	b.n	800b0b2 <_vfiprintf_r+0x11a>
 800b166:	2300      	movs	r3, #0
 800b168:	3401      	adds	r4, #1
 800b16a:	9305      	str	r3, [sp, #20]
 800b16c:	4619      	mov	r1, r3
 800b16e:	f04f 0c0a 	mov.w	ip, #10
 800b172:	4620      	mov	r0, r4
 800b174:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b178:	3a30      	subs	r2, #48	; 0x30
 800b17a:	2a09      	cmp	r2, #9
 800b17c:	d903      	bls.n	800b186 <_vfiprintf_r+0x1ee>
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d0c5      	beq.n	800b10e <_vfiprintf_r+0x176>
 800b182:	9105      	str	r1, [sp, #20]
 800b184:	e7c3      	b.n	800b10e <_vfiprintf_r+0x176>
 800b186:	fb0c 2101 	mla	r1, ip, r1, r2
 800b18a:	4604      	mov	r4, r0
 800b18c:	2301      	movs	r3, #1
 800b18e:	e7f0      	b.n	800b172 <_vfiprintf_r+0x1da>
 800b190:	ab03      	add	r3, sp, #12
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	462a      	mov	r2, r5
 800b196:	4b16      	ldr	r3, [pc, #88]	; (800b1f0 <_vfiprintf_r+0x258>)
 800b198:	a904      	add	r1, sp, #16
 800b19a:	4630      	mov	r0, r6
 800b19c:	f7fd ff32 	bl	8009004 <_printf_float>
 800b1a0:	4607      	mov	r7, r0
 800b1a2:	1c78      	adds	r0, r7, #1
 800b1a4:	d1d6      	bne.n	800b154 <_vfiprintf_r+0x1bc>
 800b1a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1a8:	07d9      	lsls	r1, r3, #31
 800b1aa:	d405      	bmi.n	800b1b8 <_vfiprintf_r+0x220>
 800b1ac:	89ab      	ldrh	r3, [r5, #12]
 800b1ae:	059a      	lsls	r2, r3, #22
 800b1b0:	d402      	bmi.n	800b1b8 <_vfiprintf_r+0x220>
 800b1b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1b4:	f7ff fa84 	bl	800a6c0 <__retarget_lock_release_recursive>
 800b1b8:	89ab      	ldrh	r3, [r5, #12]
 800b1ba:	065b      	lsls	r3, r3, #25
 800b1bc:	f53f af12 	bmi.w	800afe4 <_vfiprintf_r+0x4c>
 800b1c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1c2:	e711      	b.n	800afe8 <_vfiprintf_r+0x50>
 800b1c4:	ab03      	add	r3, sp, #12
 800b1c6:	9300      	str	r3, [sp, #0]
 800b1c8:	462a      	mov	r2, r5
 800b1ca:	4b09      	ldr	r3, [pc, #36]	; (800b1f0 <_vfiprintf_r+0x258>)
 800b1cc:	a904      	add	r1, sp, #16
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	f7fe f9bc 	bl	800954c <_printf_i>
 800b1d4:	e7e4      	b.n	800b1a0 <_vfiprintf_r+0x208>
 800b1d6:	bf00      	nop
 800b1d8:	0800be58 	.word	0x0800be58
 800b1dc:	0800be78 	.word	0x0800be78
 800b1e0:	0800be38 	.word	0x0800be38
 800b1e4:	0800bff4 	.word	0x0800bff4
 800b1e8:	0800bffe 	.word	0x0800bffe
 800b1ec:	08009005 	.word	0x08009005
 800b1f0:	0800af73 	.word	0x0800af73
 800b1f4:	0800bffa 	.word	0x0800bffa

0800b1f8 <_sbrk_r>:
 800b1f8:	b538      	push	{r3, r4, r5, lr}
 800b1fa:	4d06      	ldr	r5, [pc, #24]	; (800b214 <_sbrk_r+0x1c>)
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	4604      	mov	r4, r0
 800b200:	4608      	mov	r0, r1
 800b202:	602b      	str	r3, [r5, #0]
 800b204:	f7fb fbce 	bl	80069a4 <_sbrk>
 800b208:	1c43      	adds	r3, r0, #1
 800b20a:	d102      	bne.n	800b212 <_sbrk_r+0x1a>
 800b20c:	682b      	ldr	r3, [r5, #0]
 800b20e:	b103      	cbz	r3, 800b212 <_sbrk_r+0x1a>
 800b210:	6023      	str	r3, [r4, #0]
 800b212:	bd38      	pop	{r3, r4, r5, pc}
 800b214:	20000810 	.word	0x20000810

0800b218 <__sread>:
 800b218:	b510      	push	{r4, lr}
 800b21a:	460c      	mov	r4, r1
 800b21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b220:	f000 faa6 	bl	800b770 <_read_r>
 800b224:	2800      	cmp	r0, #0
 800b226:	bfab      	itete	ge
 800b228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b22a:	89a3      	ldrhlt	r3, [r4, #12]
 800b22c:	181b      	addge	r3, r3, r0
 800b22e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b232:	bfac      	ite	ge
 800b234:	6563      	strge	r3, [r4, #84]	; 0x54
 800b236:	81a3      	strhlt	r3, [r4, #12]
 800b238:	bd10      	pop	{r4, pc}

0800b23a <__swrite>:
 800b23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b23e:	461f      	mov	r7, r3
 800b240:	898b      	ldrh	r3, [r1, #12]
 800b242:	05db      	lsls	r3, r3, #23
 800b244:	4605      	mov	r5, r0
 800b246:	460c      	mov	r4, r1
 800b248:	4616      	mov	r6, r2
 800b24a:	d505      	bpl.n	800b258 <__swrite+0x1e>
 800b24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b250:	2302      	movs	r3, #2
 800b252:	2200      	movs	r2, #0
 800b254:	f000 f9f8 	bl	800b648 <_lseek_r>
 800b258:	89a3      	ldrh	r3, [r4, #12]
 800b25a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b25e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b262:	81a3      	strh	r3, [r4, #12]
 800b264:	4632      	mov	r2, r6
 800b266:	463b      	mov	r3, r7
 800b268:	4628      	mov	r0, r5
 800b26a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b26e:	f000 b869 	b.w	800b344 <_write_r>

0800b272 <__sseek>:
 800b272:	b510      	push	{r4, lr}
 800b274:	460c      	mov	r4, r1
 800b276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b27a:	f000 f9e5 	bl	800b648 <_lseek_r>
 800b27e:	1c43      	adds	r3, r0, #1
 800b280:	89a3      	ldrh	r3, [r4, #12]
 800b282:	bf15      	itete	ne
 800b284:	6560      	strne	r0, [r4, #84]	; 0x54
 800b286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b28a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b28e:	81a3      	strheq	r3, [r4, #12]
 800b290:	bf18      	it	ne
 800b292:	81a3      	strhne	r3, [r4, #12]
 800b294:	bd10      	pop	{r4, pc}

0800b296 <__sclose>:
 800b296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b29a:	f000 b8f1 	b.w	800b480 <_close_r>
	...

0800b2a0 <__swbuf_r>:
 800b2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a2:	460e      	mov	r6, r1
 800b2a4:	4614      	mov	r4, r2
 800b2a6:	4605      	mov	r5, r0
 800b2a8:	b118      	cbz	r0, 800b2b2 <__swbuf_r+0x12>
 800b2aa:	6983      	ldr	r3, [r0, #24]
 800b2ac:	b90b      	cbnz	r3, 800b2b2 <__swbuf_r+0x12>
 800b2ae:	f7ff f963 	bl	800a578 <__sinit>
 800b2b2:	4b21      	ldr	r3, [pc, #132]	; (800b338 <__swbuf_r+0x98>)
 800b2b4:	429c      	cmp	r4, r3
 800b2b6:	d12b      	bne.n	800b310 <__swbuf_r+0x70>
 800b2b8:	686c      	ldr	r4, [r5, #4]
 800b2ba:	69a3      	ldr	r3, [r4, #24]
 800b2bc:	60a3      	str	r3, [r4, #8]
 800b2be:	89a3      	ldrh	r3, [r4, #12]
 800b2c0:	071a      	lsls	r2, r3, #28
 800b2c2:	d52f      	bpl.n	800b324 <__swbuf_r+0x84>
 800b2c4:	6923      	ldr	r3, [r4, #16]
 800b2c6:	b36b      	cbz	r3, 800b324 <__swbuf_r+0x84>
 800b2c8:	6923      	ldr	r3, [r4, #16]
 800b2ca:	6820      	ldr	r0, [r4, #0]
 800b2cc:	1ac0      	subs	r0, r0, r3
 800b2ce:	6963      	ldr	r3, [r4, #20]
 800b2d0:	b2f6      	uxtb	r6, r6
 800b2d2:	4283      	cmp	r3, r0
 800b2d4:	4637      	mov	r7, r6
 800b2d6:	dc04      	bgt.n	800b2e2 <__swbuf_r+0x42>
 800b2d8:	4621      	mov	r1, r4
 800b2da:	4628      	mov	r0, r5
 800b2dc:	f000 f966 	bl	800b5ac <_fflush_r>
 800b2e0:	bb30      	cbnz	r0, 800b330 <__swbuf_r+0x90>
 800b2e2:	68a3      	ldr	r3, [r4, #8]
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	60a3      	str	r3, [r4, #8]
 800b2e8:	6823      	ldr	r3, [r4, #0]
 800b2ea:	1c5a      	adds	r2, r3, #1
 800b2ec:	6022      	str	r2, [r4, #0]
 800b2ee:	701e      	strb	r6, [r3, #0]
 800b2f0:	6963      	ldr	r3, [r4, #20]
 800b2f2:	3001      	adds	r0, #1
 800b2f4:	4283      	cmp	r3, r0
 800b2f6:	d004      	beq.n	800b302 <__swbuf_r+0x62>
 800b2f8:	89a3      	ldrh	r3, [r4, #12]
 800b2fa:	07db      	lsls	r3, r3, #31
 800b2fc:	d506      	bpl.n	800b30c <__swbuf_r+0x6c>
 800b2fe:	2e0a      	cmp	r6, #10
 800b300:	d104      	bne.n	800b30c <__swbuf_r+0x6c>
 800b302:	4621      	mov	r1, r4
 800b304:	4628      	mov	r0, r5
 800b306:	f000 f951 	bl	800b5ac <_fflush_r>
 800b30a:	b988      	cbnz	r0, 800b330 <__swbuf_r+0x90>
 800b30c:	4638      	mov	r0, r7
 800b30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b310:	4b0a      	ldr	r3, [pc, #40]	; (800b33c <__swbuf_r+0x9c>)
 800b312:	429c      	cmp	r4, r3
 800b314:	d101      	bne.n	800b31a <__swbuf_r+0x7a>
 800b316:	68ac      	ldr	r4, [r5, #8]
 800b318:	e7cf      	b.n	800b2ba <__swbuf_r+0x1a>
 800b31a:	4b09      	ldr	r3, [pc, #36]	; (800b340 <__swbuf_r+0xa0>)
 800b31c:	429c      	cmp	r4, r3
 800b31e:	bf08      	it	eq
 800b320:	68ec      	ldreq	r4, [r5, #12]
 800b322:	e7ca      	b.n	800b2ba <__swbuf_r+0x1a>
 800b324:	4621      	mov	r1, r4
 800b326:	4628      	mov	r0, r5
 800b328:	f000 f81e 	bl	800b368 <__swsetup_r>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d0cb      	beq.n	800b2c8 <__swbuf_r+0x28>
 800b330:	f04f 37ff 	mov.w	r7, #4294967295
 800b334:	e7ea      	b.n	800b30c <__swbuf_r+0x6c>
 800b336:	bf00      	nop
 800b338:	0800be58 	.word	0x0800be58
 800b33c:	0800be78 	.word	0x0800be78
 800b340:	0800be38 	.word	0x0800be38

0800b344 <_write_r>:
 800b344:	b538      	push	{r3, r4, r5, lr}
 800b346:	4d07      	ldr	r5, [pc, #28]	; (800b364 <_write_r+0x20>)
 800b348:	4604      	mov	r4, r0
 800b34a:	4608      	mov	r0, r1
 800b34c:	4611      	mov	r1, r2
 800b34e:	2200      	movs	r2, #0
 800b350:	602a      	str	r2, [r5, #0]
 800b352:	461a      	mov	r2, r3
 800b354:	f7fb fad5 	bl	8006902 <_write>
 800b358:	1c43      	adds	r3, r0, #1
 800b35a:	d102      	bne.n	800b362 <_write_r+0x1e>
 800b35c:	682b      	ldr	r3, [r5, #0]
 800b35e:	b103      	cbz	r3, 800b362 <_write_r+0x1e>
 800b360:	6023      	str	r3, [r4, #0]
 800b362:	bd38      	pop	{r3, r4, r5, pc}
 800b364:	20000810 	.word	0x20000810

0800b368 <__swsetup_r>:
 800b368:	4b32      	ldr	r3, [pc, #200]	; (800b434 <__swsetup_r+0xcc>)
 800b36a:	b570      	push	{r4, r5, r6, lr}
 800b36c:	681d      	ldr	r5, [r3, #0]
 800b36e:	4606      	mov	r6, r0
 800b370:	460c      	mov	r4, r1
 800b372:	b125      	cbz	r5, 800b37e <__swsetup_r+0x16>
 800b374:	69ab      	ldr	r3, [r5, #24]
 800b376:	b913      	cbnz	r3, 800b37e <__swsetup_r+0x16>
 800b378:	4628      	mov	r0, r5
 800b37a:	f7ff f8fd 	bl	800a578 <__sinit>
 800b37e:	4b2e      	ldr	r3, [pc, #184]	; (800b438 <__swsetup_r+0xd0>)
 800b380:	429c      	cmp	r4, r3
 800b382:	d10f      	bne.n	800b3a4 <__swsetup_r+0x3c>
 800b384:	686c      	ldr	r4, [r5, #4]
 800b386:	89a3      	ldrh	r3, [r4, #12]
 800b388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b38c:	0719      	lsls	r1, r3, #28
 800b38e:	d42c      	bmi.n	800b3ea <__swsetup_r+0x82>
 800b390:	06dd      	lsls	r5, r3, #27
 800b392:	d411      	bmi.n	800b3b8 <__swsetup_r+0x50>
 800b394:	2309      	movs	r3, #9
 800b396:	6033      	str	r3, [r6, #0]
 800b398:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b39c:	81a3      	strh	r3, [r4, #12]
 800b39e:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a2:	e03e      	b.n	800b422 <__swsetup_r+0xba>
 800b3a4:	4b25      	ldr	r3, [pc, #148]	; (800b43c <__swsetup_r+0xd4>)
 800b3a6:	429c      	cmp	r4, r3
 800b3a8:	d101      	bne.n	800b3ae <__swsetup_r+0x46>
 800b3aa:	68ac      	ldr	r4, [r5, #8]
 800b3ac:	e7eb      	b.n	800b386 <__swsetup_r+0x1e>
 800b3ae:	4b24      	ldr	r3, [pc, #144]	; (800b440 <__swsetup_r+0xd8>)
 800b3b0:	429c      	cmp	r4, r3
 800b3b2:	bf08      	it	eq
 800b3b4:	68ec      	ldreq	r4, [r5, #12]
 800b3b6:	e7e6      	b.n	800b386 <__swsetup_r+0x1e>
 800b3b8:	0758      	lsls	r0, r3, #29
 800b3ba:	d512      	bpl.n	800b3e2 <__swsetup_r+0x7a>
 800b3bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3be:	b141      	cbz	r1, 800b3d2 <__swsetup_r+0x6a>
 800b3c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3c4:	4299      	cmp	r1, r3
 800b3c6:	d002      	beq.n	800b3ce <__swsetup_r+0x66>
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	f7ff fd11 	bl	800adf0 <_free_r>
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	6363      	str	r3, [r4, #52]	; 0x34
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3d8:	81a3      	strh	r3, [r4, #12]
 800b3da:	2300      	movs	r3, #0
 800b3dc:	6063      	str	r3, [r4, #4]
 800b3de:	6923      	ldr	r3, [r4, #16]
 800b3e0:	6023      	str	r3, [r4, #0]
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	f043 0308 	orr.w	r3, r3, #8
 800b3e8:	81a3      	strh	r3, [r4, #12]
 800b3ea:	6923      	ldr	r3, [r4, #16]
 800b3ec:	b94b      	cbnz	r3, 800b402 <__swsetup_r+0x9a>
 800b3ee:	89a3      	ldrh	r3, [r4, #12]
 800b3f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3f8:	d003      	beq.n	800b402 <__swsetup_r+0x9a>
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	f000 f959 	bl	800b6b4 <__smakebuf_r>
 800b402:	89a0      	ldrh	r0, [r4, #12]
 800b404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b408:	f010 0301 	ands.w	r3, r0, #1
 800b40c:	d00a      	beq.n	800b424 <__swsetup_r+0xbc>
 800b40e:	2300      	movs	r3, #0
 800b410:	60a3      	str	r3, [r4, #8]
 800b412:	6963      	ldr	r3, [r4, #20]
 800b414:	425b      	negs	r3, r3
 800b416:	61a3      	str	r3, [r4, #24]
 800b418:	6923      	ldr	r3, [r4, #16]
 800b41a:	b943      	cbnz	r3, 800b42e <__swsetup_r+0xc6>
 800b41c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b420:	d1ba      	bne.n	800b398 <__swsetup_r+0x30>
 800b422:	bd70      	pop	{r4, r5, r6, pc}
 800b424:	0781      	lsls	r1, r0, #30
 800b426:	bf58      	it	pl
 800b428:	6963      	ldrpl	r3, [r4, #20]
 800b42a:	60a3      	str	r3, [r4, #8]
 800b42c:	e7f4      	b.n	800b418 <__swsetup_r+0xb0>
 800b42e:	2000      	movs	r0, #0
 800b430:	e7f7      	b.n	800b422 <__swsetup_r+0xba>
 800b432:	bf00      	nop
 800b434:	200002cc 	.word	0x200002cc
 800b438:	0800be58 	.word	0x0800be58
 800b43c:	0800be78 	.word	0x0800be78
 800b440:	0800be38 	.word	0x0800be38

0800b444 <__assert_func>:
 800b444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b446:	4614      	mov	r4, r2
 800b448:	461a      	mov	r2, r3
 800b44a:	4b09      	ldr	r3, [pc, #36]	; (800b470 <__assert_func+0x2c>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4605      	mov	r5, r0
 800b450:	68d8      	ldr	r0, [r3, #12]
 800b452:	b14c      	cbz	r4, 800b468 <__assert_func+0x24>
 800b454:	4b07      	ldr	r3, [pc, #28]	; (800b474 <__assert_func+0x30>)
 800b456:	9100      	str	r1, [sp, #0]
 800b458:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b45c:	4906      	ldr	r1, [pc, #24]	; (800b478 <__assert_func+0x34>)
 800b45e:	462b      	mov	r3, r5
 800b460:	f000 f8e0 	bl	800b624 <fiprintf>
 800b464:	f000 f9a3 	bl	800b7ae <abort>
 800b468:	4b04      	ldr	r3, [pc, #16]	; (800b47c <__assert_func+0x38>)
 800b46a:	461c      	mov	r4, r3
 800b46c:	e7f3      	b.n	800b456 <__assert_func+0x12>
 800b46e:	bf00      	nop
 800b470:	200002cc 	.word	0x200002cc
 800b474:	0800c005 	.word	0x0800c005
 800b478:	0800c012 	.word	0x0800c012
 800b47c:	0800c040 	.word	0x0800c040

0800b480 <_close_r>:
 800b480:	b538      	push	{r3, r4, r5, lr}
 800b482:	4d06      	ldr	r5, [pc, #24]	; (800b49c <_close_r+0x1c>)
 800b484:	2300      	movs	r3, #0
 800b486:	4604      	mov	r4, r0
 800b488:	4608      	mov	r0, r1
 800b48a:	602b      	str	r3, [r5, #0]
 800b48c:	f7fb fa55 	bl	800693a <_close>
 800b490:	1c43      	adds	r3, r0, #1
 800b492:	d102      	bne.n	800b49a <_close_r+0x1a>
 800b494:	682b      	ldr	r3, [r5, #0]
 800b496:	b103      	cbz	r3, 800b49a <_close_r+0x1a>
 800b498:	6023      	str	r3, [r4, #0]
 800b49a:	bd38      	pop	{r3, r4, r5, pc}
 800b49c:	20000810 	.word	0x20000810

0800b4a0 <__sflush_r>:
 800b4a0:	898a      	ldrh	r2, [r1, #12]
 800b4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a6:	4605      	mov	r5, r0
 800b4a8:	0710      	lsls	r0, r2, #28
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	d458      	bmi.n	800b560 <__sflush_r+0xc0>
 800b4ae:	684b      	ldr	r3, [r1, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	dc05      	bgt.n	800b4c0 <__sflush_r+0x20>
 800b4b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	dc02      	bgt.n	800b4c0 <__sflush_r+0x20>
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4c2:	2e00      	cmp	r6, #0
 800b4c4:	d0f9      	beq.n	800b4ba <__sflush_r+0x1a>
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4cc:	682f      	ldr	r7, [r5, #0]
 800b4ce:	602b      	str	r3, [r5, #0]
 800b4d0:	d032      	beq.n	800b538 <__sflush_r+0x98>
 800b4d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4d4:	89a3      	ldrh	r3, [r4, #12]
 800b4d6:	075a      	lsls	r2, r3, #29
 800b4d8:	d505      	bpl.n	800b4e6 <__sflush_r+0x46>
 800b4da:	6863      	ldr	r3, [r4, #4]
 800b4dc:	1ac0      	subs	r0, r0, r3
 800b4de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4e0:	b10b      	cbz	r3, 800b4e6 <__sflush_r+0x46>
 800b4e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4e4:	1ac0      	subs	r0, r0, r3
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4ec:	6a21      	ldr	r1, [r4, #32]
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	47b0      	blx	r6
 800b4f2:	1c43      	adds	r3, r0, #1
 800b4f4:	89a3      	ldrh	r3, [r4, #12]
 800b4f6:	d106      	bne.n	800b506 <__sflush_r+0x66>
 800b4f8:	6829      	ldr	r1, [r5, #0]
 800b4fa:	291d      	cmp	r1, #29
 800b4fc:	d82c      	bhi.n	800b558 <__sflush_r+0xb8>
 800b4fe:	4a2a      	ldr	r2, [pc, #168]	; (800b5a8 <__sflush_r+0x108>)
 800b500:	40ca      	lsrs	r2, r1
 800b502:	07d6      	lsls	r6, r2, #31
 800b504:	d528      	bpl.n	800b558 <__sflush_r+0xb8>
 800b506:	2200      	movs	r2, #0
 800b508:	6062      	str	r2, [r4, #4]
 800b50a:	04d9      	lsls	r1, r3, #19
 800b50c:	6922      	ldr	r2, [r4, #16]
 800b50e:	6022      	str	r2, [r4, #0]
 800b510:	d504      	bpl.n	800b51c <__sflush_r+0x7c>
 800b512:	1c42      	adds	r2, r0, #1
 800b514:	d101      	bne.n	800b51a <__sflush_r+0x7a>
 800b516:	682b      	ldr	r3, [r5, #0]
 800b518:	b903      	cbnz	r3, 800b51c <__sflush_r+0x7c>
 800b51a:	6560      	str	r0, [r4, #84]	; 0x54
 800b51c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b51e:	602f      	str	r7, [r5, #0]
 800b520:	2900      	cmp	r1, #0
 800b522:	d0ca      	beq.n	800b4ba <__sflush_r+0x1a>
 800b524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b528:	4299      	cmp	r1, r3
 800b52a:	d002      	beq.n	800b532 <__sflush_r+0x92>
 800b52c:	4628      	mov	r0, r5
 800b52e:	f7ff fc5f 	bl	800adf0 <_free_r>
 800b532:	2000      	movs	r0, #0
 800b534:	6360      	str	r0, [r4, #52]	; 0x34
 800b536:	e7c1      	b.n	800b4bc <__sflush_r+0x1c>
 800b538:	6a21      	ldr	r1, [r4, #32]
 800b53a:	2301      	movs	r3, #1
 800b53c:	4628      	mov	r0, r5
 800b53e:	47b0      	blx	r6
 800b540:	1c41      	adds	r1, r0, #1
 800b542:	d1c7      	bne.n	800b4d4 <__sflush_r+0x34>
 800b544:	682b      	ldr	r3, [r5, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d0c4      	beq.n	800b4d4 <__sflush_r+0x34>
 800b54a:	2b1d      	cmp	r3, #29
 800b54c:	d001      	beq.n	800b552 <__sflush_r+0xb2>
 800b54e:	2b16      	cmp	r3, #22
 800b550:	d101      	bne.n	800b556 <__sflush_r+0xb6>
 800b552:	602f      	str	r7, [r5, #0]
 800b554:	e7b1      	b.n	800b4ba <__sflush_r+0x1a>
 800b556:	89a3      	ldrh	r3, [r4, #12]
 800b558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b55c:	81a3      	strh	r3, [r4, #12]
 800b55e:	e7ad      	b.n	800b4bc <__sflush_r+0x1c>
 800b560:	690f      	ldr	r7, [r1, #16]
 800b562:	2f00      	cmp	r7, #0
 800b564:	d0a9      	beq.n	800b4ba <__sflush_r+0x1a>
 800b566:	0793      	lsls	r3, r2, #30
 800b568:	680e      	ldr	r6, [r1, #0]
 800b56a:	bf08      	it	eq
 800b56c:	694b      	ldreq	r3, [r1, #20]
 800b56e:	600f      	str	r7, [r1, #0]
 800b570:	bf18      	it	ne
 800b572:	2300      	movne	r3, #0
 800b574:	eba6 0807 	sub.w	r8, r6, r7
 800b578:	608b      	str	r3, [r1, #8]
 800b57a:	f1b8 0f00 	cmp.w	r8, #0
 800b57e:	dd9c      	ble.n	800b4ba <__sflush_r+0x1a>
 800b580:	6a21      	ldr	r1, [r4, #32]
 800b582:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b584:	4643      	mov	r3, r8
 800b586:	463a      	mov	r2, r7
 800b588:	4628      	mov	r0, r5
 800b58a:	47b0      	blx	r6
 800b58c:	2800      	cmp	r0, #0
 800b58e:	dc06      	bgt.n	800b59e <__sflush_r+0xfe>
 800b590:	89a3      	ldrh	r3, [r4, #12]
 800b592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b596:	81a3      	strh	r3, [r4, #12]
 800b598:	f04f 30ff 	mov.w	r0, #4294967295
 800b59c:	e78e      	b.n	800b4bc <__sflush_r+0x1c>
 800b59e:	4407      	add	r7, r0
 800b5a0:	eba8 0800 	sub.w	r8, r8, r0
 800b5a4:	e7e9      	b.n	800b57a <__sflush_r+0xda>
 800b5a6:	bf00      	nop
 800b5a8:	20400001 	.word	0x20400001

0800b5ac <_fflush_r>:
 800b5ac:	b538      	push	{r3, r4, r5, lr}
 800b5ae:	690b      	ldr	r3, [r1, #16]
 800b5b0:	4605      	mov	r5, r0
 800b5b2:	460c      	mov	r4, r1
 800b5b4:	b913      	cbnz	r3, 800b5bc <_fflush_r+0x10>
 800b5b6:	2500      	movs	r5, #0
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	bd38      	pop	{r3, r4, r5, pc}
 800b5bc:	b118      	cbz	r0, 800b5c6 <_fflush_r+0x1a>
 800b5be:	6983      	ldr	r3, [r0, #24]
 800b5c0:	b90b      	cbnz	r3, 800b5c6 <_fflush_r+0x1a>
 800b5c2:	f7fe ffd9 	bl	800a578 <__sinit>
 800b5c6:	4b14      	ldr	r3, [pc, #80]	; (800b618 <_fflush_r+0x6c>)
 800b5c8:	429c      	cmp	r4, r3
 800b5ca:	d11b      	bne.n	800b604 <_fflush_r+0x58>
 800b5cc:	686c      	ldr	r4, [r5, #4]
 800b5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d0ef      	beq.n	800b5b6 <_fflush_r+0xa>
 800b5d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5d8:	07d0      	lsls	r0, r2, #31
 800b5da:	d404      	bmi.n	800b5e6 <_fflush_r+0x3a>
 800b5dc:	0599      	lsls	r1, r3, #22
 800b5de:	d402      	bmi.n	800b5e6 <_fflush_r+0x3a>
 800b5e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5e2:	f7ff f86c 	bl	800a6be <__retarget_lock_acquire_recursive>
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	4621      	mov	r1, r4
 800b5ea:	f7ff ff59 	bl	800b4a0 <__sflush_r>
 800b5ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5f0:	07da      	lsls	r2, r3, #31
 800b5f2:	4605      	mov	r5, r0
 800b5f4:	d4e0      	bmi.n	800b5b8 <_fflush_r+0xc>
 800b5f6:	89a3      	ldrh	r3, [r4, #12]
 800b5f8:	059b      	lsls	r3, r3, #22
 800b5fa:	d4dd      	bmi.n	800b5b8 <_fflush_r+0xc>
 800b5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5fe:	f7ff f85f 	bl	800a6c0 <__retarget_lock_release_recursive>
 800b602:	e7d9      	b.n	800b5b8 <_fflush_r+0xc>
 800b604:	4b05      	ldr	r3, [pc, #20]	; (800b61c <_fflush_r+0x70>)
 800b606:	429c      	cmp	r4, r3
 800b608:	d101      	bne.n	800b60e <_fflush_r+0x62>
 800b60a:	68ac      	ldr	r4, [r5, #8]
 800b60c:	e7df      	b.n	800b5ce <_fflush_r+0x22>
 800b60e:	4b04      	ldr	r3, [pc, #16]	; (800b620 <_fflush_r+0x74>)
 800b610:	429c      	cmp	r4, r3
 800b612:	bf08      	it	eq
 800b614:	68ec      	ldreq	r4, [r5, #12]
 800b616:	e7da      	b.n	800b5ce <_fflush_r+0x22>
 800b618:	0800be58 	.word	0x0800be58
 800b61c:	0800be78 	.word	0x0800be78
 800b620:	0800be38 	.word	0x0800be38

0800b624 <fiprintf>:
 800b624:	b40e      	push	{r1, r2, r3}
 800b626:	b503      	push	{r0, r1, lr}
 800b628:	4601      	mov	r1, r0
 800b62a:	ab03      	add	r3, sp, #12
 800b62c:	4805      	ldr	r0, [pc, #20]	; (800b644 <fiprintf+0x20>)
 800b62e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b632:	6800      	ldr	r0, [r0, #0]
 800b634:	9301      	str	r3, [sp, #4]
 800b636:	f7ff fcaf 	bl	800af98 <_vfiprintf_r>
 800b63a:	b002      	add	sp, #8
 800b63c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b640:	b003      	add	sp, #12
 800b642:	4770      	bx	lr
 800b644:	200002cc 	.word	0x200002cc

0800b648 <_lseek_r>:
 800b648:	b538      	push	{r3, r4, r5, lr}
 800b64a:	4d07      	ldr	r5, [pc, #28]	; (800b668 <_lseek_r+0x20>)
 800b64c:	4604      	mov	r4, r0
 800b64e:	4608      	mov	r0, r1
 800b650:	4611      	mov	r1, r2
 800b652:	2200      	movs	r2, #0
 800b654:	602a      	str	r2, [r5, #0]
 800b656:	461a      	mov	r2, r3
 800b658:	f7fb f996 	bl	8006988 <_lseek>
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	d102      	bne.n	800b666 <_lseek_r+0x1e>
 800b660:	682b      	ldr	r3, [r5, #0]
 800b662:	b103      	cbz	r3, 800b666 <_lseek_r+0x1e>
 800b664:	6023      	str	r3, [r4, #0]
 800b666:	bd38      	pop	{r3, r4, r5, pc}
 800b668:	20000810 	.word	0x20000810

0800b66c <__swhatbuf_r>:
 800b66c:	b570      	push	{r4, r5, r6, lr}
 800b66e:	460e      	mov	r6, r1
 800b670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b674:	2900      	cmp	r1, #0
 800b676:	b096      	sub	sp, #88	; 0x58
 800b678:	4614      	mov	r4, r2
 800b67a:	461d      	mov	r5, r3
 800b67c:	da07      	bge.n	800b68e <__swhatbuf_r+0x22>
 800b67e:	2300      	movs	r3, #0
 800b680:	602b      	str	r3, [r5, #0]
 800b682:	89b3      	ldrh	r3, [r6, #12]
 800b684:	061a      	lsls	r2, r3, #24
 800b686:	d410      	bmi.n	800b6aa <__swhatbuf_r+0x3e>
 800b688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b68c:	e00e      	b.n	800b6ac <__swhatbuf_r+0x40>
 800b68e:	466a      	mov	r2, sp
 800b690:	f000 f894 	bl	800b7bc <_fstat_r>
 800b694:	2800      	cmp	r0, #0
 800b696:	dbf2      	blt.n	800b67e <__swhatbuf_r+0x12>
 800b698:	9a01      	ldr	r2, [sp, #4]
 800b69a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b69e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b6a2:	425a      	negs	r2, r3
 800b6a4:	415a      	adcs	r2, r3
 800b6a6:	602a      	str	r2, [r5, #0]
 800b6a8:	e7ee      	b.n	800b688 <__swhatbuf_r+0x1c>
 800b6aa:	2340      	movs	r3, #64	; 0x40
 800b6ac:	2000      	movs	r0, #0
 800b6ae:	6023      	str	r3, [r4, #0]
 800b6b0:	b016      	add	sp, #88	; 0x58
 800b6b2:	bd70      	pop	{r4, r5, r6, pc}

0800b6b4 <__smakebuf_r>:
 800b6b4:	898b      	ldrh	r3, [r1, #12]
 800b6b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6b8:	079d      	lsls	r5, r3, #30
 800b6ba:	4606      	mov	r6, r0
 800b6bc:	460c      	mov	r4, r1
 800b6be:	d507      	bpl.n	800b6d0 <__smakebuf_r+0x1c>
 800b6c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b6c4:	6023      	str	r3, [r4, #0]
 800b6c6:	6123      	str	r3, [r4, #16]
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	6163      	str	r3, [r4, #20]
 800b6cc:	b002      	add	sp, #8
 800b6ce:	bd70      	pop	{r4, r5, r6, pc}
 800b6d0:	ab01      	add	r3, sp, #4
 800b6d2:	466a      	mov	r2, sp
 800b6d4:	f7ff ffca 	bl	800b66c <__swhatbuf_r>
 800b6d8:	9900      	ldr	r1, [sp, #0]
 800b6da:	4605      	mov	r5, r0
 800b6dc:	4630      	mov	r0, r6
 800b6de:	f7ff fbd7 	bl	800ae90 <_malloc_r>
 800b6e2:	b948      	cbnz	r0, 800b6f8 <__smakebuf_r+0x44>
 800b6e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6e8:	059a      	lsls	r2, r3, #22
 800b6ea:	d4ef      	bmi.n	800b6cc <__smakebuf_r+0x18>
 800b6ec:	f023 0303 	bic.w	r3, r3, #3
 800b6f0:	f043 0302 	orr.w	r3, r3, #2
 800b6f4:	81a3      	strh	r3, [r4, #12]
 800b6f6:	e7e3      	b.n	800b6c0 <__smakebuf_r+0xc>
 800b6f8:	4b0d      	ldr	r3, [pc, #52]	; (800b730 <__smakebuf_r+0x7c>)
 800b6fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800b6fc:	89a3      	ldrh	r3, [r4, #12]
 800b6fe:	6020      	str	r0, [r4, #0]
 800b700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b704:	81a3      	strh	r3, [r4, #12]
 800b706:	9b00      	ldr	r3, [sp, #0]
 800b708:	6163      	str	r3, [r4, #20]
 800b70a:	9b01      	ldr	r3, [sp, #4]
 800b70c:	6120      	str	r0, [r4, #16]
 800b70e:	b15b      	cbz	r3, 800b728 <__smakebuf_r+0x74>
 800b710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b714:	4630      	mov	r0, r6
 800b716:	f000 f863 	bl	800b7e0 <_isatty_r>
 800b71a:	b128      	cbz	r0, 800b728 <__smakebuf_r+0x74>
 800b71c:	89a3      	ldrh	r3, [r4, #12]
 800b71e:	f023 0303 	bic.w	r3, r3, #3
 800b722:	f043 0301 	orr.w	r3, r3, #1
 800b726:	81a3      	strh	r3, [r4, #12]
 800b728:	89a0      	ldrh	r0, [r4, #12]
 800b72a:	4305      	orrs	r5, r0
 800b72c:	81a5      	strh	r5, [r4, #12]
 800b72e:	e7cd      	b.n	800b6cc <__smakebuf_r+0x18>
 800b730:	0800a511 	.word	0x0800a511

0800b734 <__ascii_mbtowc>:
 800b734:	b082      	sub	sp, #8
 800b736:	b901      	cbnz	r1, 800b73a <__ascii_mbtowc+0x6>
 800b738:	a901      	add	r1, sp, #4
 800b73a:	b142      	cbz	r2, 800b74e <__ascii_mbtowc+0x1a>
 800b73c:	b14b      	cbz	r3, 800b752 <__ascii_mbtowc+0x1e>
 800b73e:	7813      	ldrb	r3, [r2, #0]
 800b740:	600b      	str	r3, [r1, #0]
 800b742:	7812      	ldrb	r2, [r2, #0]
 800b744:	1e10      	subs	r0, r2, #0
 800b746:	bf18      	it	ne
 800b748:	2001      	movne	r0, #1
 800b74a:	b002      	add	sp, #8
 800b74c:	4770      	bx	lr
 800b74e:	4610      	mov	r0, r2
 800b750:	e7fb      	b.n	800b74a <__ascii_mbtowc+0x16>
 800b752:	f06f 0001 	mvn.w	r0, #1
 800b756:	e7f8      	b.n	800b74a <__ascii_mbtowc+0x16>

0800b758 <__malloc_lock>:
 800b758:	4801      	ldr	r0, [pc, #4]	; (800b760 <__malloc_lock+0x8>)
 800b75a:	f7fe bfb0 	b.w	800a6be <__retarget_lock_acquire_recursive>
 800b75e:	bf00      	nop
 800b760:	20000808 	.word	0x20000808

0800b764 <__malloc_unlock>:
 800b764:	4801      	ldr	r0, [pc, #4]	; (800b76c <__malloc_unlock+0x8>)
 800b766:	f7fe bfab 	b.w	800a6c0 <__retarget_lock_release_recursive>
 800b76a:	bf00      	nop
 800b76c:	20000808 	.word	0x20000808

0800b770 <_read_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	4d07      	ldr	r5, [pc, #28]	; (800b790 <_read_r+0x20>)
 800b774:	4604      	mov	r4, r0
 800b776:	4608      	mov	r0, r1
 800b778:	4611      	mov	r1, r2
 800b77a:	2200      	movs	r2, #0
 800b77c:	602a      	str	r2, [r5, #0]
 800b77e:	461a      	mov	r2, r3
 800b780:	f7fb f8a2 	bl	80068c8 <_read>
 800b784:	1c43      	adds	r3, r0, #1
 800b786:	d102      	bne.n	800b78e <_read_r+0x1e>
 800b788:	682b      	ldr	r3, [r5, #0]
 800b78a:	b103      	cbz	r3, 800b78e <_read_r+0x1e>
 800b78c:	6023      	str	r3, [r4, #0]
 800b78e:	bd38      	pop	{r3, r4, r5, pc}
 800b790:	20000810 	.word	0x20000810

0800b794 <__ascii_wctomb>:
 800b794:	b149      	cbz	r1, 800b7aa <__ascii_wctomb+0x16>
 800b796:	2aff      	cmp	r2, #255	; 0xff
 800b798:	bf85      	ittet	hi
 800b79a:	238a      	movhi	r3, #138	; 0x8a
 800b79c:	6003      	strhi	r3, [r0, #0]
 800b79e:	700a      	strbls	r2, [r1, #0]
 800b7a0:	f04f 30ff 	movhi.w	r0, #4294967295
 800b7a4:	bf98      	it	ls
 800b7a6:	2001      	movls	r0, #1
 800b7a8:	4770      	bx	lr
 800b7aa:	4608      	mov	r0, r1
 800b7ac:	4770      	bx	lr

0800b7ae <abort>:
 800b7ae:	b508      	push	{r3, lr}
 800b7b0:	2006      	movs	r0, #6
 800b7b2:	f000 f84d 	bl	800b850 <raise>
 800b7b6:	2001      	movs	r0, #1
 800b7b8:	f7fb f87c 	bl	80068b4 <_exit>

0800b7bc <_fstat_r>:
 800b7bc:	b538      	push	{r3, r4, r5, lr}
 800b7be:	4d07      	ldr	r5, [pc, #28]	; (800b7dc <_fstat_r+0x20>)
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	4608      	mov	r0, r1
 800b7c6:	4611      	mov	r1, r2
 800b7c8:	602b      	str	r3, [r5, #0]
 800b7ca:	f7fb f8c2 	bl	8006952 <_fstat>
 800b7ce:	1c43      	adds	r3, r0, #1
 800b7d0:	d102      	bne.n	800b7d8 <_fstat_r+0x1c>
 800b7d2:	682b      	ldr	r3, [r5, #0]
 800b7d4:	b103      	cbz	r3, 800b7d8 <_fstat_r+0x1c>
 800b7d6:	6023      	str	r3, [r4, #0]
 800b7d8:	bd38      	pop	{r3, r4, r5, pc}
 800b7da:	bf00      	nop
 800b7dc:	20000810 	.word	0x20000810

0800b7e0 <_isatty_r>:
 800b7e0:	b538      	push	{r3, r4, r5, lr}
 800b7e2:	4d06      	ldr	r5, [pc, #24]	; (800b7fc <_isatty_r+0x1c>)
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	4608      	mov	r0, r1
 800b7ea:	602b      	str	r3, [r5, #0]
 800b7ec:	f7fb f8c1 	bl	8006972 <_isatty>
 800b7f0:	1c43      	adds	r3, r0, #1
 800b7f2:	d102      	bne.n	800b7fa <_isatty_r+0x1a>
 800b7f4:	682b      	ldr	r3, [r5, #0]
 800b7f6:	b103      	cbz	r3, 800b7fa <_isatty_r+0x1a>
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	bd38      	pop	{r3, r4, r5, pc}
 800b7fc:	20000810 	.word	0x20000810

0800b800 <_raise_r>:
 800b800:	291f      	cmp	r1, #31
 800b802:	b538      	push	{r3, r4, r5, lr}
 800b804:	4604      	mov	r4, r0
 800b806:	460d      	mov	r5, r1
 800b808:	d904      	bls.n	800b814 <_raise_r+0x14>
 800b80a:	2316      	movs	r3, #22
 800b80c:	6003      	str	r3, [r0, #0]
 800b80e:	f04f 30ff 	mov.w	r0, #4294967295
 800b812:	bd38      	pop	{r3, r4, r5, pc}
 800b814:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b816:	b112      	cbz	r2, 800b81e <_raise_r+0x1e>
 800b818:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b81c:	b94b      	cbnz	r3, 800b832 <_raise_r+0x32>
 800b81e:	4620      	mov	r0, r4
 800b820:	f000 f830 	bl	800b884 <_getpid_r>
 800b824:	462a      	mov	r2, r5
 800b826:	4601      	mov	r1, r0
 800b828:	4620      	mov	r0, r4
 800b82a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b82e:	f000 b817 	b.w	800b860 <_kill_r>
 800b832:	2b01      	cmp	r3, #1
 800b834:	d00a      	beq.n	800b84c <_raise_r+0x4c>
 800b836:	1c59      	adds	r1, r3, #1
 800b838:	d103      	bne.n	800b842 <_raise_r+0x42>
 800b83a:	2316      	movs	r3, #22
 800b83c:	6003      	str	r3, [r0, #0]
 800b83e:	2001      	movs	r0, #1
 800b840:	e7e7      	b.n	800b812 <_raise_r+0x12>
 800b842:	2400      	movs	r4, #0
 800b844:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b848:	4628      	mov	r0, r5
 800b84a:	4798      	blx	r3
 800b84c:	2000      	movs	r0, #0
 800b84e:	e7e0      	b.n	800b812 <_raise_r+0x12>

0800b850 <raise>:
 800b850:	4b02      	ldr	r3, [pc, #8]	; (800b85c <raise+0xc>)
 800b852:	4601      	mov	r1, r0
 800b854:	6818      	ldr	r0, [r3, #0]
 800b856:	f7ff bfd3 	b.w	800b800 <_raise_r>
 800b85a:	bf00      	nop
 800b85c:	200002cc 	.word	0x200002cc

0800b860 <_kill_r>:
 800b860:	b538      	push	{r3, r4, r5, lr}
 800b862:	4d07      	ldr	r5, [pc, #28]	; (800b880 <_kill_r+0x20>)
 800b864:	2300      	movs	r3, #0
 800b866:	4604      	mov	r4, r0
 800b868:	4608      	mov	r0, r1
 800b86a:	4611      	mov	r1, r2
 800b86c:	602b      	str	r3, [r5, #0]
 800b86e:	f7fb f811 	bl	8006894 <_kill>
 800b872:	1c43      	adds	r3, r0, #1
 800b874:	d102      	bne.n	800b87c <_kill_r+0x1c>
 800b876:	682b      	ldr	r3, [r5, #0]
 800b878:	b103      	cbz	r3, 800b87c <_kill_r+0x1c>
 800b87a:	6023      	str	r3, [r4, #0]
 800b87c:	bd38      	pop	{r3, r4, r5, pc}
 800b87e:	bf00      	nop
 800b880:	20000810 	.word	0x20000810

0800b884 <_getpid_r>:
 800b884:	f7fa bffe 	b.w	8006884 <_getpid>

0800b888 <_init>:
 800b888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b88a:	bf00      	nop
 800b88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b88e:	bc08      	pop	{r3}
 800b890:	469e      	mov	lr, r3
 800b892:	4770      	bx	lr

0800b894 <_fini>:
 800b894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b896:	bf00      	nop
 800b898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b89a:	bc08      	pop	{r3}
 800b89c:	469e      	mov	lr, r3
 800b89e:	4770      	bx	lr
