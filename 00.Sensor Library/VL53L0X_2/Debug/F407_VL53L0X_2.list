
F407_VL53L0X_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800afb0  0800afb0  0001afb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3d4  0800b3d4  00020498  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3d4  0800b3d4  0001b3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3dc  0800b3dc  00020498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3dc  0800b3dc  0001b3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3e0  0800b3e0  0001b3e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000498  20000000  0800b3e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000498  0800b87c  00020498  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000768  0800b87c  00020768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019718  00000000  00000000  000204c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd5  00000000  00000000  00039be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  0003c9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  0003d970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c62  00000000  00000000  0003e828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013115  00000000  00000000  0006248a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccb31  00000000  00000000  0007559f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001420d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051d4  00000000  00000000  00142124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000498 	.word	0x20000498
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af98 	.word	0x0800af98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000049c 	.word	0x2000049c
 80001cc:	0800af98 	.word	0x0800af98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8000eae:	6839      	ldr	r1, [r7, #0]
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f001 fcd3 	bl	800285c <VL53L0X_get_offset_calibration_data_micro_meter>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8000eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8000ed6:	78fb      	ldrb	r3, [r7, #3]
 8000ed8:	085b      	lsrs	r3, r3, #1
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	461a      	mov	r2, r3
 8000ede:	218a      	movs	r1, #138	; 0x8a
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f004 fc55 	bl	8005790 <VL53L0X_WrByte>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8000ef8:	b5b0      	push	{r4, r5, r7, lr}
 8000efa:	b096      	sub	sp, #88	; 0x58
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8000f06:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d107      	bne.n	8000f1e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2188      	movs	r1, #136	; 0x88
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f004 fc3c 	bl	8005790 <VL53L0X_WrByte>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f2c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000f36:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a9e      	ldr	r2, [pc, #632]	; (80011b8 <VL53L0X_DataInit+0x2c0>)
 8000f3e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a9d      	ldr	r2, [pc, #628]	; (80011bc <VL53L0X_DataInit+0x2c4>)
 8000f46:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	4619      	mov	r1, r3
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 fab4 	bl	80014c4 <VL53L0X_GetDeviceParameters>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8000f62:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d112      	bne.n	8000f90 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f103 0410 	add.w	r4, r3, #16
 8000f78:	f107 0510 	add.w	r5, r7, #16
 8000f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2264      	movs	r2, #100	; 0x64
 8000f94:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000f9e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fa8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8000fb2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f004 fbe4 	bl	8005790 <VL53L0X_WrByte>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	21ff      	movs	r1, #255	; 0xff
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f004 fbd8 	bl	8005790 <VL53L0X_WrByte>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f004 fbcc 	bl	8005790 <VL53L0X_WrByte>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001000:	4313      	orrs	r3, r2
 8001002:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8001006:	f107 030f 	add.w	r3, r7, #15
 800100a:	461a      	mov	r2, r3
 800100c:	2191      	movs	r1, #145	; 0x91
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f004 fc40 	bl	8005894 <VL53L0X_RdByte>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800101c:	4313      	orrs	r3, r2
 800101e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800102a:	2201      	movs	r2, #1
 800102c:	2100      	movs	r1, #0
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f004 fbae 	bl	8005790 <VL53L0X_WrByte>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800103c:	4313      	orrs	r3, r2
 800103e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001042:	2200      	movs	r2, #0
 8001044:	21ff      	movs	r1, #255	; 0xff
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f004 fba2 	bl	8005790 <VL53L0X_WrByte>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001054:	4313      	orrs	r3, r2
 8001056:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800105a:	2200      	movs	r2, #0
 800105c:	2180      	movs	r1, #128	; 0x80
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f004 fb96 	bl	8005790 <VL53L0X_WrByte>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800106c:	4313      	orrs	r3, r2
 800106e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001072:	2300      	movs	r3, #0
 8001074:	653b      	str	r3, [r7, #80]	; 0x50
 8001076:	e014      	b.n	80010a2 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8001078:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800107c:	2b00      	cmp	r3, #0
 800107e:	d114      	bne.n	80010aa <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8001080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001082:	b29b      	uxth	r3, r3
 8001084:	2201      	movs	r2, #1
 8001086:	4619      	mov	r1, r3
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 fd27 	bl	8001adc <VL53L0X_SetLimitCheckEnable>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001096:	4313      	orrs	r3, r2
 8001098:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800109c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800109e:	3301      	adds	r3, #1
 80010a0:	653b      	str	r3, [r7, #80]	; 0x50
 80010a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	dde7      	ble.n	8001078 <VL53L0X_DataInit+0x180>
 80010a8:	e000      	b.n	80010ac <VL53L0X_DataInit+0x1b4>
		else
			break;
 80010aa:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80010ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d107      	bne.n	80010c4 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80010b4:	2200      	movs	r2, #0
 80010b6:	2102      	movs	r1, #2
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 fd0f 	bl	8001adc <VL53L0X_SetLimitCheckEnable>
 80010be:	4603      	mov	r3, r0
 80010c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80010c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d107      	bne.n	80010dc <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80010cc:	2200      	movs	r2, #0
 80010ce:	2103      	movs	r1, #3
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 fd03 	bl	8001adc <VL53L0X_SetLimitCheckEnable>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80010dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d107      	bne.n	80010f4 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80010e4:	2200      	movs	r2, #0
 80010e6:	2104      	movs	r1, #4
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 fcf7 	bl	8001adc <VL53L0X_SetLimitCheckEnable>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80010f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d107      	bne.n	800110c <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80010fc:	2200      	movs	r2, #0
 80010fe:	2105      	movs	r1, #5
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 fceb 	bl	8001adc <VL53L0X_SetLimitCheckEnable>
 8001106:	4603      	mov	r3, r0
 8001108:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800110c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001110:	2b00      	cmp	r3, #0
 8001112:	d108      	bne.n	8001126 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001114:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8001118:	2100      	movs	r1, #0
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 fd8e 	bl	8001c3c <VL53L0X_SetLimitCheckValue>
 8001120:	4603      	mov	r3, r0
 8001122:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001126:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800112a:	2b00      	cmp	r3, #0
 800112c:	d108      	bne.n	8001140 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800112e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001132:	2101      	movs	r1, #1
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 fd81 	bl	8001c3c <VL53L0X_SetLimitCheckValue>
 800113a:	4603      	mov	r3, r0
 800113c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001140:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001144:	2b00      	cmp	r3, #0
 8001146:	d108      	bne.n	800115a <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001148:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800114c:	2102      	movs	r1, #2
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 fd74 	bl	8001c3c <VL53L0X_SetLimitCheckValue>
 8001154:	4603      	mov	r3, r0
 8001156:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800115a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800115e:	2b00      	cmp	r3, #0
 8001160:	d107      	bne.n	8001172 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001162:	2200      	movs	r2, #0
 8001164:	2103      	movs	r1, #3
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 fd68 	bl	8001c3c <VL53L0X_SetLimitCheckValue>
 800116c:	4603      	mov	r3, r0
 800116e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001172:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10f      	bne.n	800119a <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	22ff      	movs	r2, #255	; 0xff
 800117e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001182:	22ff      	movs	r2, #255	; 0xff
 8001184:	2101      	movs	r1, #1
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f004 fb02 	bl	8005790 <VL53L0X_WrByte>
 800118c:	4603      	mov	r3, r0
 800118e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800119a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d103      	bne.n	80011aa <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80011aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3758      	adds	r7, #88	; 0x58
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bdb0      	pop	{r4, r5, r7, pc}
 80011b6:	bf00      	nop
 80011b8:	00016b85 	.word	0x00016b85
 80011bc:	000970a4 	.word	0x000970a4

080011c0 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	b09e      	sub	sp, #120	; 0x78
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	2240      	movs	r2, #64	; 0x40
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f007 f97c 	bl	80084d4 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80011fc:	2101      	movs	r1, #1
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f002 fa93 	bl	800372a <VL53L0X_get_info_from_device>
 8001204:	4603      	mov	r3, r0
 8001206:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8001210:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001218:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800121c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001220:	2b01      	cmp	r3, #1
 8001222:	d80d      	bhi.n	8001240 <VL53L0X_StaticInit+0x80>
 8001224:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001228:	2b01      	cmp	r3, #1
 800122a:	d102      	bne.n	8001232 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800122c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800122e:	2b20      	cmp	r3, #32
 8001230:	d806      	bhi.n	8001240 <VL53L0X_StaticInit+0x80>
 8001232:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10e      	bne.n	8001258 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800123a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800123c:	2b0c      	cmp	r3, #12
 800123e:	d90b      	bls.n	8001258 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8001240:	f107 0218 	add.w	r2, r7, #24
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f001 fd02 	bl	8002c54 <VL53L0X_perform_ref_spad_management>
 8001250:	4603      	mov	r3, r0
 8001252:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001256:	e009      	b.n	800126c <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8001258:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800125c:	461a      	mov	r2, r3
 800125e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f001 ff03 	bl	800306c <VL53L0X_set_reference_spads>
 8001266:	4603      	mov	r3, r0
 8001268:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800126c:	4b94      	ldr	r3, [pc, #592]	; (80014c0 <VL53L0X_StaticInit+0x300>)
 800126e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8001270:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10f      	bne.n	8001298 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800127e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8001282:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001286:	2b00      	cmp	r3, #0
 8001288:	d104      	bne.n	8001294 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001290:	66bb      	str	r3, [r7, #104]	; 0x68
 8001292:	e001      	b.n	8001298 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8001294:	4b8a      	ldr	r3, [pc, #552]	; (80014c0 <VL53L0X_StaticInit+0x300>)
 8001296:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8001298:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800129c:	2b00      	cmp	r3, #0
 800129e:	d106      	bne.n	80012ae <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80012a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f003 fb5e 	bl	8004964 <VL53L0X_load_tuning_settings>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80012ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10a      	bne.n	80012cc <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80012b6:	2300      	movs	r3, #0
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2304      	movs	r3, #4
 80012bc:	2200      	movs	r2, #0
 80012be:	2100      	movs	r1, #0
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f001 f8e3 	bl	800248c <VL53L0X_SetGpioConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80012cc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d121      	bne.n	8001318 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80012d4:	2201      	movs	r2, #1
 80012d6:	21ff      	movs	r1, #255	; 0xff
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f004 fa59 	bl	8005790 <VL53L0X_WrByte>
 80012de:	4603      	mov	r3, r0
 80012e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80012e4:	f107 031a 	add.w	r3, r7, #26
 80012e8:	461a      	mov	r2, r3
 80012ea:	2184      	movs	r1, #132	; 0x84
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f004 fafb 	bl	80058e8 <VL53L0X_RdWord>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012fa:	4313      	orrs	r3, r2
 80012fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001300:	2200      	movs	r2, #0
 8001302:	21ff      	movs	r1, #255	; 0xff
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f004 fa43 	bl	8005790 <VL53L0X_WrByte>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001312:	4313      	orrs	r3, r2
 8001314:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001318:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800131c:	2b00      	cmp	r3, #0
 800131e:	d105      	bne.n	800132c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8001320:	8b7b      	ldrh	r3, [r7, #26]
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	461a      	mov	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800132c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001330:	2b00      	cmp	r3, #0
 8001332:	d108      	bne.n	8001346 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f8c2 	bl	80014c4 <VL53L0X_GetDeviceParameters>
 8001340:	4603      	mov	r3, r0
 8001342:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8001346:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800134a:	2b00      	cmp	r3, #0
 800134c:	d110      	bne.n	8001370 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800134e:	f107 0319 	add.w	r3, r7, #25
 8001352:	4619      	mov	r1, r3
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 f984 	bl	8001662 <VL53L0X_GetFractionEnable>
 800135a:	4603      	mov	r3, r0
 800135c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8001360:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001364:	2b00      	cmp	r3, #0
 8001366:	d103      	bne.n	8001370 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8001368:	7e7a      	ldrb	r2, [r7, #25]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8001370:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001374:	2b00      	cmp	r3, #0
 8001376:	d10e      	bne.n	8001396 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f103 0410 	add.w	r4, r3, #16
 800137e:	f107 051c 	add.w	r5, r7, #28
 8001382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001392:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8001396:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800139a:	2b00      	cmp	r3, #0
 800139c:	d111      	bne.n	80013c2 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800139e:	f107 0319 	add.w	r3, r7, #25
 80013a2:	461a      	mov	r2, r3
 80013a4:	2101      	movs	r1, #1
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f004 fa74 	bl	8005894 <VL53L0X_RdByte>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80013b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d103      	bne.n	80013c2 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80013ba:	7e7a      	ldrb	r2, [r7, #25]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80013c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d107      	bne.n	80013da <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f9a4 	bl	800171c <VL53L0X_SetSequenceStepEnable>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80013da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d107      	bne.n	80013f2 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80013e2:	2200      	movs	r2, #0
 80013e4:	2102      	movs	r1, #2
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f998 	bl	800171c <VL53L0X_SetSequenceStepEnable>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80013f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d103      	bne.n	8001402 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2203      	movs	r2, #3
 80013fe:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8001402:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001406:	2b00      	cmp	r3, #0
 8001408:	d109      	bne.n	800141e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800140a:	f107 0313 	add.w	r3, r7, #19
 800140e:	461a      	mov	r2, r3
 8001410:	2100      	movs	r1, #0
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f96a 	bl	80016ec <VL53L0X_GetVcselPulsePeriod>
 8001418:	4603      	mov	r3, r0
 800141a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800141e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001422:	2b00      	cmp	r3, #0
 8001424:	d103      	bne.n	800142e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001426:	7cfa      	ldrb	r2, [r7, #19]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800142e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001432:	2b00      	cmp	r3, #0
 8001434:	d109      	bne.n	800144a <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8001436:	f107 0313 	add.w	r3, r7, #19
 800143a:	461a      	mov	r2, r3
 800143c:	2101      	movs	r1, #1
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f954 	bl	80016ec <VL53L0X_GetVcselPulsePeriod>
 8001444:	4603      	mov	r3, r0
 8001446:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800144a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800144e:	2b00      	cmp	r3, #0
 8001450:	d103      	bne.n	800145a <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001452:	7cfa      	ldrb	r2, [r7, #19]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800145a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800145e:	2b00      	cmp	r3, #0
 8001460:	d109      	bne.n	8001476 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	461a      	mov	r2, r3
 8001468:	2103      	movs	r1, #3
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f002 fede 	bl	800422c <get_sequence_step_timeout>
 8001470:	4603      	mov	r3, r0
 8001472:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001476:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800147a:	2b00      	cmp	r3, #0
 800147c:	d103      	bne.n	8001486 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8001486:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800148a:	2b00      	cmp	r3, #0
 800148c:	d109      	bne.n	80014a2 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	461a      	mov	r2, r3
 8001494:	2104      	movs	r1, #4
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f002 fec8 	bl	800422c <get_sequence_step_timeout>
 800149c:	4603      	mov	r3, r0
 800149e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80014a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d103      	bne.n	80014b2 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80014b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3770      	adds	r7, #112	; 0x70
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bdb0      	pop	{r4, r5, r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000000 	.word	0x20000000

080014c4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f8b0 	bl	800163c <VL53L0X_GetDeviceMode>
 80014dc:	4603      	mov	r3, r0
 80014de:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80014e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d107      	bne.n	80014f8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	3308      	adds	r3, #8
 80014ec:	4619      	mov	r1, r3
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fa60 	bl	80019b4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80014f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	2200      	movs	r2, #0
 8001504:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d107      	bne.n	800151e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	3310      	adds	r3, #16
 8001512:	4619      	mov	r1, r3
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 fa96 	bl	8001a46 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800151a:	4603      	mov	r3, r0
 800151c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d107      	bne.n	8001536 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	3314      	adds	r3, #20
 800152a:	4619      	mov	r1, r3
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff fcb7 	bl	8000ea0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8001532:	4603      	mov	r3, r0
 8001534:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8001536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d134      	bne.n	80015a8 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	e02a      	b.n	800159a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8001544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d12a      	bne.n	80015a2 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	b299      	uxth	r1, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	3308      	adds	r3, #8
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	4413      	add	r3, r2
 800155a:	3304      	adds	r3, #4
 800155c:	461a      	mov	r2, r3
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 fbce 	bl	8001d00 <VL53L0X_GetLimitCheckValue>
 8001564:	4603      	mov	r3, r0
 8001566:	461a      	mov	r2, r3
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	4313      	orrs	r3, r2
 800156c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d117      	bne.n	80015a6 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	b299      	uxth	r1, r3
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3318      	adds	r3, #24
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	4413      	add	r3, r2
 8001582:	461a      	mov	r2, r3
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fb35 	bl	8001bf4 <VL53L0X_GetLimitCheckEnable>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	4313      	orrs	r3, r2
 8001592:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	3301      	adds	r3, #1
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2b05      	cmp	r3, #5
 800159e:	ddd1      	ble.n	8001544 <VL53L0X_GetDeviceParameters+0x80>
 80015a0:	e002      	b.n	80015a8 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80015a2:	bf00      	nop
 80015a4:	e000      	b.n	80015a8 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80015a6:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80015a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d107      	bne.n	80015c0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	333c      	adds	r3, #60	; 0x3c
 80015b4:	4619      	mov	r1, r3
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 fc30 	bl	8001e1c <VL53L0X_GetWrapAroundCheckEnable>
 80015bc:	4603      	mov	r3, r0
 80015be:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80015c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d107      	bne.n	80015d8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	3304      	adds	r3, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f879 	bl	80016c6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80015d4:	4603      	mov	r3, r0
 80015d6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80015d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	2b15      	cmp	r3, #21
 80015f8:	bf8c      	ite	hi
 80015fa:	2201      	movhi	r2, #1
 80015fc:	2200      	movls	r2, #0
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	2a00      	cmp	r2, #0
 8001602:	d10e      	bne.n	8001622 <VL53L0X_SetDeviceMode+0x3e>
 8001604:	2201      	movs	r2, #1
 8001606:	409a      	lsls	r2, r3
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <VL53L0X_SetDeviceMode+0x54>)
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	bf14      	ite	ne
 8001610:	2301      	movne	r3, #1
 8001612:	2300      	moveq	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	78fa      	ldrb	r2, [r7, #3]
 800161e:	741a      	strb	r2, [r3, #16]
		break;
 8001620:	e001      	b.n	8001626 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8001622:	23f8      	movs	r3, #248	; 0xf8
 8001624:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	0030000b 	.word	0x0030000b

0800163c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001646:	2300      	movs	r3, #0
 8001648:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7c1a      	ldrb	r2, [r3, #16]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b084      	sub	sp, #16
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800166c:	2300      	movs	r3, #0
 800166e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	2109      	movs	r1, #9
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f004 f90d 	bl	8005894 <VL53L0X_RdByte>
 800167a:	4603      	mov	r3, r0
 800167c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d106      	bne.n	8001694 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	b2da      	uxtb	r2, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001694:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80016ae:	6839      	ldr	r1, [r7, #0]
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f002 ffc5 	bl	8004640 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80016b6:	4603      	mov	r3, r0
 80016b8:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80016d4:	6839      	ldr	r1, [r7, #0]
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f003 f892 	bl	8004800 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80016dc:	4603      	mov	r3, r0
 80016de:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80016e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	460b      	mov	r3, r1
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80016fe:	7afb      	ldrb	r3, [r7, #11]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	4619      	mov	r1, r3
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f002 ff64 	bl	80045d2 <VL53L0X_get_vcsel_pulse_period>
 800170a:	4603      	mov	r3, r0
 800170c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800170e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	70fb      	strb	r3, [r7, #3]
 8001728:	4613      	mov	r3, r2
 800172a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800172c:	2300      	movs	r3, #0
 800172e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001738:	f107 030f 	add.w	r3, r7, #15
 800173c:	461a      	mov	r2, r3
 800173e:	2101      	movs	r1, #1
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f004 f8a7 	bl	8005894 <VL53L0X_RdByte>
 8001746:	4603      	mov	r3, r0
 8001748:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800174e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d15a      	bne.n	800180c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8001756:	78bb      	ldrb	r3, [r7, #2]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d12b      	bne.n	80017b4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	2b04      	cmp	r3, #4
 8001760:	d825      	bhi.n	80017ae <VL53L0X_SetSequenceStepEnable+0x92>
 8001762:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	0800177d 	.word	0x0800177d
 800176c:	08001787 	.word	0x08001787
 8001770:	08001791 	.word	0x08001791
 8001774:	0800179b 	.word	0x0800179b
 8001778:	080017a5 	.word	0x080017a5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800177c:	7dbb      	ldrb	r3, [r7, #22]
 800177e:	f043 0310 	orr.w	r3, r3, #16
 8001782:	75bb      	strb	r3, [r7, #22]
				break;
 8001784:	e043      	b.n	800180e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8001786:	7dbb      	ldrb	r3, [r7, #22]
 8001788:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800178c:	75bb      	strb	r3, [r7, #22]
				break;
 800178e:	e03e      	b.n	800180e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8001790:	7dbb      	ldrb	r3, [r7, #22]
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	75bb      	strb	r3, [r7, #22]
				break;
 8001798:	e039      	b.n	800180e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800179a:	7dbb      	ldrb	r3, [r7, #22]
 800179c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a0:	75bb      	strb	r3, [r7, #22]
				break;
 80017a2:	e034      	b.n	800180e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80017a4:	7dbb      	ldrb	r3, [r7, #22]
 80017a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017aa:	75bb      	strb	r3, [r7, #22]
				break;
 80017ac:	e02f      	b.n	800180e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80017ae:	23fc      	movs	r3, #252	; 0xfc
 80017b0:	75fb      	strb	r3, [r7, #23]
 80017b2:	e02c      	b.n	800180e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d825      	bhi.n	8001806 <VL53L0X_SetSequenceStepEnable+0xea>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	080017d5 	.word	0x080017d5
 80017c4:	080017df 	.word	0x080017df
 80017c8:	080017e9 	.word	0x080017e9
 80017cc:	080017f3 	.word	0x080017f3
 80017d0:	080017fd 	.word	0x080017fd
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80017d4:	7dbb      	ldrb	r3, [r7, #22]
 80017d6:	f023 0310 	bic.w	r3, r3, #16
 80017da:	75bb      	strb	r3, [r7, #22]
				break;
 80017dc:	e017      	b.n	800180e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80017de:	7dbb      	ldrb	r3, [r7, #22]
 80017e0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80017e4:	75bb      	strb	r3, [r7, #22]
				break;
 80017e6:	e012      	b.n	800180e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80017e8:	7dbb      	ldrb	r3, [r7, #22]
 80017ea:	f023 0304 	bic.w	r3, r3, #4
 80017ee:	75bb      	strb	r3, [r7, #22]
				break;
 80017f0:	e00d      	b.n	800180e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80017f2:	7dbb      	ldrb	r3, [r7, #22]
 80017f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017f8:	75bb      	strb	r3, [r7, #22]
				break;
 80017fa:	e008      	b.n	800180e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80017fc:	7dbb      	ldrb	r3, [r7, #22]
 80017fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001802:	75bb      	strb	r3, [r7, #22]
				break;
 8001804:	e003      	b.n	800180e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001806:	23fc      	movs	r3, #252	; 0xfc
 8001808:	75fb      	strb	r3, [r7, #23]
 800180a:	e000      	b.n	800180e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800180c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	7dba      	ldrb	r2, [r7, #22]
 8001812:	429a      	cmp	r2, r3
 8001814:	d01e      	beq.n	8001854 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8001816:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d107      	bne.n	800182e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800181e:	7dbb      	ldrb	r3, [r7, #22]
 8001820:	461a      	mov	r2, r3
 8001822:	2101      	movs	r1, #1
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f003 ffb3 	bl	8005790 <VL53L0X_WrByte>
 800182a:	4603      	mov	r3, r0
 800182c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800182e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d103      	bne.n	800183e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7dba      	ldrb	r2, [r7, #22]
 800183a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800183e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d106      	bne.n	8001854 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800184c:	6939      	ldr	r1, [r7, #16]
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ff26 	bl	80016a0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8001854:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	460b      	mov	r3, r1
 800186c:	72fb      	strb	r3, [r7, #11]
 800186e:	4613      	mov	r3, r2
 8001870:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001872:	2300      	movs	r3, #0
 8001874:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800187c:	7afb      	ldrb	r3, [r7, #11]
 800187e:	2b04      	cmp	r3, #4
 8001880:	d836      	bhi.n	80018f0 <sequence_step_enabled+0x90>
 8001882:	a201      	add	r2, pc, #4	; (adr r2, 8001888 <sequence_step_enabled+0x28>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	0800189d 	.word	0x0800189d
 800188c:	080018af 	.word	0x080018af
 8001890:	080018c1 	.word	0x080018c1
 8001894:	080018d3 	.word	0x080018d3
 8001898:	080018e5 	.word	0x080018e5
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800189c:	7abb      	ldrb	r3, [r7, #10]
 800189e:	111b      	asrs	r3, r3, #4
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	701a      	strb	r2, [r3, #0]
		break;
 80018ac:	e022      	b.n	80018f4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80018ae:	7abb      	ldrb	r3, [r7, #10]
 80018b0:	10db      	asrs	r3, r3, #3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	701a      	strb	r2, [r3, #0]
		break;
 80018be:	e019      	b.n	80018f4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80018c0:	7abb      	ldrb	r3, [r7, #10]
 80018c2:	109b      	asrs	r3, r3, #2
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	701a      	strb	r2, [r3, #0]
		break;
 80018d0:	e010      	b.n	80018f4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80018d2:	7abb      	ldrb	r3, [r7, #10]
 80018d4:	119b      	asrs	r3, r3, #6
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	701a      	strb	r2, [r3, #0]
		break;
 80018e2:	e007      	b.n	80018f4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80018e4:	7abb      	ldrb	r3, [r7, #10]
 80018e6:	09db      	lsrs	r3, r3, #7
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	701a      	strb	r2, [r3, #0]
		break;
 80018ee:	e001      	b.n	80018f4 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80018f0:	23fc      	movs	r3, #252	; 0xfc
 80018f2:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80018f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	371c      	adds	r7, #28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001916:	f107 030e 	add.w	r3, r7, #14
 800191a:	461a      	mov	r2, r3
 800191c:	2101      	movs	r1, #1
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f003 ffb8 	bl	8005894 <VL53L0X_RdByte>
 8001924:	4603      	mov	r3, r0
 8001926:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8001928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d107      	bne.n	8001940 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8001930:	7bba      	ldrb	r2, [r7, #14]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2100      	movs	r1, #0
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ff92 	bl	8001860 <sequence_step_enabled>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d108      	bne.n	800195a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8001948:	7bba      	ldrb	r2, [r7, #14]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	3302      	adds	r3, #2
 800194e:	2101      	movs	r1, #1
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff85 	bl	8001860 <sequence_step_enabled>
 8001956:	4603      	mov	r3, r0
 8001958:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800195a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d108      	bne.n	8001974 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8001962:	7bba      	ldrb	r2, [r7, #14]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	2102      	movs	r1, #2
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ff78 	bl	8001860 <sequence_step_enabled>
 8001970:	4603      	mov	r3, r0
 8001972:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d108      	bne.n	800198e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800197c:	7bba      	ldrb	r2, [r7, #14]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	3303      	adds	r3, #3
 8001982:	2103      	movs	r1, #3
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff6b 	bl	8001860 <sequence_step_enabled>
 800198a:	4603      	mov	r3, r0
 800198c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800198e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d108      	bne.n	80019a8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8001996:	7bba      	ldrb	r2, [r7, #14]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	3304      	adds	r3, #4
 800199c:	2104      	movs	r1, #4
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ff5e 	bl	8001860 <sequence_step_enabled>
 80019a4:	4603      	mov	r3, r0
 80019a6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80019a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80019be:	2300      	movs	r3, #0
 80019c0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	461a      	mov	r2, r3
 80019c8:	21f8      	movs	r1, #248	; 0xf8
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f003 ff8c 	bl	80058e8 <VL53L0X_RdWord>
 80019d0:	4603      	mov	r3, r0
 80019d2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80019d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d108      	bne.n	80019ee <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80019dc:	f107 0308 	add.w	r3, r7, #8
 80019e0:	461a      	mov	r2, r3
 80019e2:	2104      	movs	r1, #4
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f003 ffb7 	bl	8005958 <VL53L0X_RdDWord>
 80019ea:	4603      	mov	r3, r0
 80019ec:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10c      	bne.n	8001a10 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80019f6:	89bb      	ldrh	r3, [r7, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	89ba      	ldrh	r2, [r7, #12]
 8001a00:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7f1b      	ldrb	r3, [r3, #28]
 8001a2e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	7bba      	ldrb	r2, [r7, #14]
 8001a34:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8001a54:	f107 030e 	add.w	r3, r7, #14
 8001a58:	461a      	mov	r2, r3
 8001a5a:	2120      	movs	r1, #32
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f003 ff43 	bl	80058e8 <VL53L0X_RdWord>
 8001a62:	4603      	mov	r3, r0
 8001a64:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8001a66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d118      	bne.n	8001aa0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8001a6e:	89fb      	ldrh	r3, [r7, #14]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d109      	bne.n	8001a88 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	771a      	strb	r2, [r3, #28]
 8001a86:	e00b      	b.n	8001aa0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8001a88:	89fb      	ldrh	r3, [r7, #14]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001aa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <VL53L0X_SetRefCalibration>:

VL53L0X_Error VL53L0X_SetRefCalibration(VL53L0X_DEV Dev, uint8_t VhvSettings,
	uint8_t PhaseCal)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	70fb      	strb	r3, [r7, #3]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_ref_calibration(Dev, VhvSettings, PhaseCal);
 8001ac0:	78ba      	ldrb	r2, [r7, #2]
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f001 fd52 	bl	8003570 <VL53L0X_set_ref_calibration>
 8001acc:	4603      	mov	r3, r0
 8001ace:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001afc:	887b      	ldrh	r3, [r7, #2]
 8001afe:	2b05      	cmp	r3, #5
 8001b00:	d902      	bls.n	8001b08 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001b02:	23fc      	movs	r3, #252	; 0xfc
 8001b04:	75fb      	strb	r3, [r7, #23]
 8001b06:	e05b      	b.n	8001bc0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8001b08:	787b      	ldrb	r3, [r7, #1]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8001b16:	2301      	movs	r3, #1
 8001b18:	73bb      	strb	r3, [r7, #14]
 8001b1a:	e00a      	b.n	8001b32 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001b1c:	887b      	ldrh	r3, [r7, #2]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	330c      	adds	r3, #12
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8001b32:	887b      	ldrh	r3, [r7, #2]
 8001b34:	2b05      	cmp	r3, #5
 8001b36:	d841      	bhi.n	8001bbc <VL53L0X_SetLimitCheckEnable+0xe0>
 8001b38:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <VL53L0X_SetLimitCheckEnable+0x64>)
 8001b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3e:	bf00      	nop
 8001b40:	08001b59 	.word	0x08001b59
 8001b44:	08001b63 	.word	0x08001b63
 8001b48:	08001b79 	.word	0x08001b79
 8001b4c:	08001b83 	.word	0x08001b83
 8001b50:	08001b8d 	.word	0x08001b8d
 8001b54:	08001ba5 	.word	0x08001ba5

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8001b60:	e02e      	b.n	8001bc0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	2144      	movs	r1, #68	; 0x44
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f003 fe33 	bl	80057d8 <VL53L0X_WrWord>
 8001b72:	4603      	mov	r3, r0
 8001b74:	75fb      	strb	r3, [r7, #23]

			break;
 8001b76:	e023      	b.n	8001bc0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	7bfa      	ldrb	r2, [r7, #15]
 8001b7c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8001b80:	e01e      	b.n	8001bc0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8001b8a:	e019      	b.n	8001bc0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8001b8c:	7bbb      	ldrb	r3, [r7, #14]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8001b92:	7b7b      	ldrb	r3, [r7, #13]
 8001b94:	22fe      	movs	r2, #254	; 0xfe
 8001b96:	2160      	movs	r1, #96	; 0x60
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f003 fe47 	bl	800582c <VL53L0X_UpdateByte>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8001ba2:	e00d      	b.n	8001bc0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8001ba4:	7bbb      	ldrb	r3, [r7, #14]
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8001baa:	7b7b      	ldrb	r3, [r7, #13]
 8001bac:	22ef      	movs	r2, #239	; 0xef
 8001bae:	2160      	movs	r1, #96	; 0x60
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f003 fe3b 	bl	800582c <VL53L0X_UpdateByte>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8001bba:	e001      	b.n	8001bc0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001bbc:	23fc      	movs	r3, #252	; 0xfc
 8001bbe:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001bc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10f      	bne.n	8001be8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8001bc8:	787b      	ldrb	r3, [r7, #1]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d106      	bne.n	8001bdc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001bce:	887b      	ldrh	r3, [r7, #2]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001bda:	e005      	b.n	8001be8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001be8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001c06:	897b      	ldrh	r3, [r7, #10]
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	d905      	bls.n	8001c18 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001c0c:	23fc      	movs	r3, #252	; 0xfc
 8001c0e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
 8001c16:	e008      	b.n	8001c2a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001c18:	897b      	ldrh	r3, [r7, #10]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c22:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7dba      	ldrb	r2, [r7, #22]
 8001c28:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001c2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	460b      	mov	r3, r1
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8001c4e:	897b      	ldrh	r3, [r7, #10]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c58:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8001c5a:	7dbb      	ldrb	r3, [r7, #22]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d107      	bne.n	8001c70 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001c60:	897b      	ldrh	r3, [r7, #10]
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	330c      	adds	r3, #12
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	e040      	b.n	8001cf2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8001c70:	897b      	ldrh	r3, [r7, #10]
 8001c72:	2b05      	cmp	r3, #5
 8001c74:	d830      	bhi.n	8001cd8 <VL53L0X_SetLimitCheckValue+0x9c>
 8001c76:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <VL53L0X_SetLimitCheckValue+0x40>)
 8001c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7c:	08001c95 	.word	0x08001c95
 8001c80:	08001c9d 	.word	0x08001c9d
 8001c84:	08001cb3 	.word	0x08001cb3
 8001c88:	08001cbb 	.word	0x08001cbb
 8001c8c:	08001cc3 	.word	0x08001cc3
 8001c90:	08001cc3 	.word	0x08001cc3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8001c9a:	e01f      	b.n	8001cdc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	2144      	movs	r1, #68	; 0x44
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f003 fd96 	bl	80057d8 <VL53L0X_WrWord>
 8001cac:	4603      	mov	r3, r0
 8001cae:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8001cb0:	e014      	b.n	8001cdc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8001cb8:	e010      	b.n	8001cdc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8001cc0:	e00c      	b.n	8001cdc <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2164      	movs	r1, #100	; 0x64
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f003 fd83 	bl	80057d8 <VL53L0X_WrWord>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8001cd6:	e001      	b.n	8001cdc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001cd8:	23fc      	movs	r3, #252	; 0xfc
 8001cda:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8001cdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d106      	bne.n	8001cf2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001ce4:	897b      	ldrh	r3, [r7, #10]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	330c      	adds	r3, #12
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001cf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop

08001d00 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8001d16:	897b      	ldrh	r3, [r7, #10]
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d847      	bhi.n	8001dac <VL53L0X_GetLimitCheckValue+0xac>
 8001d1c:	a201      	add	r2, pc, #4	; (adr r2, 8001d24 <VL53L0X_GetLimitCheckValue+0x24>)
 8001d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d22:	bf00      	nop
 8001d24:	08001d3d 	.word	0x08001d3d
 8001d28:	08001d49 	.word	0x08001d49
 8001d2c:	08001d6f 	.word	0x08001d6f
 8001d30:	08001d7b 	.word	0x08001d7b
 8001d34:	08001d87 	.word	0x08001d87
 8001d38:	08001d87 	.word	0x08001d87

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d40:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	77bb      	strb	r3, [r7, #30]
		break;
 8001d46:	e033      	b.n	8001db0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8001d48:	f107 0316 	add.w	r3, r7, #22
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2144      	movs	r1, #68	; 0x44
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f003 fdc9 	bl	80058e8 <VL53L0X_RdWord>
 8001d56:	4603      	mov	r3, r0
 8001d58:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8001d5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001d62:	8afb      	ldrh	r3, [r7, #22]
 8001d64:	025b      	lsls	r3, r3, #9
 8001d66:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	77bb      	strb	r3, [r7, #30]
		break;
 8001d6c:	e020      	b.n	8001db0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d72:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	77bb      	strb	r3, [r7, #30]
		break;
 8001d78:	e01a      	b.n	8001db0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	77bb      	strb	r3, [r7, #30]
		break;
 8001d84:	e014      	b.n	8001db0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8001d86:	f107 0316 	add.w	r3, r7, #22
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	2164      	movs	r1, #100	; 0x64
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f003 fdaa 	bl	80058e8 <VL53L0X_RdWord>
 8001d94:	4603      	mov	r3, r0
 8001d96:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8001d98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001da0:	8afb      	ldrh	r3, [r7, #22]
 8001da2:	025b      	lsls	r3, r3, #9
 8001da4:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	77bb      	strb	r3, [r7, #30]
		break;
 8001daa:	e001      	b.n	8001db0 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001dac:	23fc      	movs	r3, #252	; 0xfc
 8001dae:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001db0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d12a      	bne.n	8001e0e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8001db8:	7fbb      	ldrb	r3, [r7, #30]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d124      	bne.n	8001e08 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d110      	bne.n	8001de6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8001dc4:	897b      	ldrh	r3, [r7, #10]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	330c      	adds	r3, #12
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001dd8:	897b      	ldrh	r3, [r7, #10]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4413      	add	r3, r2
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001de4:	e013      	b.n	8001e0e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001dec:	897b      	ldrh	r3, [r7, #10]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	330c      	adds	r3, #12
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001dfa:	897b      	ldrh	r3, [r7, #10]
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001e06:	e002      	b.n	8001e0e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001e0e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3720      	adds	r7, #32
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop

08001e1c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8001e2a:	f107 030e 	add.w	r3, r7, #14
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2101      	movs	r1, #1
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f003 fd2e 	bl	8005894 <VL53L0X_RdByte>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8001e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10e      	bne.n	8001e62 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8001e44:	7bba      	ldrb	r2, [r7, #14]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8001e4c:	7bbb      	ldrb	r3, [r7, #14]
 8001e4e:	b25b      	sxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	da03      	bge.n	8001e5c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	e002      	b.n	8001e62 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d104      	bne.n	8001e74 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	781a      	ldrb	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8001e8c:	f107 030e 	add.w	r3, r7, #14
 8001e90:	4619      	mov	r1, r3
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff fbd2 	bl	800163c <VL53L0X_GetDeviceMode>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8001e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d107      	bne.n	8001eb4 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8001ea4:	7bbb      	ldrb	r3, [r7, #14]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d104      	bne.n	8001eb4 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f898 	bl	8001fe0 <VL53L0X_StartMeasurement>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8001eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d104      	bne.n	8001ec6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f001 fb7a 	bl	80035b6 <VL53L0X_measurement_poll_for_completion>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8001ece:	7bbb      	ldrb	r3, [r7, #14]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d103      	bne.n	8001edc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8001edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8001ef8:	2301      	movs	r3, #1
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f001 faf9 	bl	80034f6 <VL53L0X_perform_ref_calibration>
 8001f04:	4603      	mov	r3, r0
 8001f06:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8001f08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8001f2a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8001f2c:	7dbb      	ldrb	r3, [r7, #22]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d005      	beq.n	8001f3e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8001f32:	7dbb      	ldrb	r3, [r7, #22]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d002      	beq.n	8001f3e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8001f38:	7dbb      	ldrb	r3, [r7, #22]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d147      	bne.n	8001fce <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8001f3e:	f107 030c 	add.w	r3, r7, #12
 8001f42:	f107 0210 	add.w	r2, r7, #16
 8001f46:	2101      	movs	r1, #1
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 fbc3 	bl	80026d4 <VL53L0X_GetInterruptThresholds>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8001f58:	d803      	bhi.n	8001f62 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8001f5a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8001f5c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8001f60:	d935      	bls.n	8001fce <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8001f62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d131      	bne.n	8001fce <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d006      	beq.n	8001f7e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8001f70:	491a      	ldr	r1, [pc, #104]	; (8001fdc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f002 fcf6 	bl	8004964 <VL53L0X_load_tuning_settings>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	75fb      	strb	r3, [r7, #23]
 8001f7c:	e027      	b.n	8001fce <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8001f7e:	2204      	movs	r2, #4
 8001f80:	21ff      	movs	r1, #255	; 0xff
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f003 fc04 	bl	8005790 <VL53L0X_WrByte>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2170      	movs	r1, #112	; 0x70
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f003 fbfa 	bl	8005790 <VL53L0X_WrByte>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	21ff      	movs	r1, #255	; 0xff
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f003 fbf0 	bl	8005790 <VL53L0X_WrByte>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2180      	movs	r1, #128	; 0x80
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f003 fbe6 	bl	8005790 <VL53L0X_WrByte>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8001fce:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200000f4 	.word	0x200000f4

08001fe0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8001ff0:	f107 030e 	add.w	r3, r7, #14
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fb20 	bl	800163c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2180      	movs	r1, #128	; 0x80
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f003 fbc5 	bl	8005790 <VL53L0X_WrByte>
 8002006:	4603      	mov	r3, r0
 8002008:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800200a:	2201      	movs	r2, #1
 800200c:	21ff      	movs	r1, #255	; 0xff
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f003 fbbe 	bl	8005790 <VL53L0X_WrByte>
 8002014:	4603      	mov	r3, r0
 8002016:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002018:	2200      	movs	r2, #0
 800201a:	2100      	movs	r1, #0
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f003 fbb7 	bl	8005790 <VL53L0X_WrByte>
 8002022:	4603      	mov	r3, r0
 8002024:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800202c:	461a      	mov	r2, r3
 800202e:	2191      	movs	r1, #145	; 0x91
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f003 fbad 	bl	8005790 <VL53L0X_WrByte>
 8002036:	4603      	mov	r3, r0
 8002038:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800203a:	2201      	movs	r2, #1
 800203c:	2100      	movs	r1, #0
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f003 fba6 	bl	8005790 <VL53L0X_WrByte>
 8002044:	4603      	mov	r3, r0
 8002046:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002048:	2200      	movs	r2, #0
 800204a:	21ff      	movs	r1, #255	; 0xff
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f003 fb9f 	bl	8005790 <VL53L0X_WrByte>
 8002052:	4603      	mov	r3, r0
 8002054:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002056:	2200      	movs	r2, #0
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f003 fb98 	bl	8005790 <VL53L0X_WrByte>
 8002060:	4603      	mov	r3, r0
 8002062:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8002064:	7bbb      	ldrb	r3, [r7, #14]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d054      	beq.n	8002114 <VL53L0X_StartMeasurement+0x134>
 800206a:	2b03      	cmp	r3, #3
 800206c:	dc6c      	bgt.n	8002148 <VL53L0X_StartMeasurement+0x168>
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <VL53L0X_StartMeasurement+0x98>
 8002072:	2b01      	cmp	r3, #1
 8002074:	d034      	beq.n	80020e0 <VL53L0X_StartMeasurement+0x100>
 8002076:	e067      	b.n	8002148 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8002078:	2201      	movs	r2, #1
 800207a:	2100      	movs	r1, #0
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f003 fb87 	bl	8005790 <VL53L0X_WrByte>
 8002082:	4603      	mov	r3, r0
 8002084:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800208a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d15d      	bne.n	800214e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800209c:	f107 030d 	add.w	r3, r7, #13
 80020a0:	461a      	mov	r2, r3
 80020a2:	2100      	movs	r1, #0
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f003 fbf5 	bl	8005894 <VL53L0X_RdByte>
 80020aa:	4603      	mov	r3, r0
 80020ac:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	3301      	adds	r3, #1
 80020b2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80020b4:	7b7a      	ldrb	r2, [r7, #13]
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	4013      	ands	r3, r2
 80020ba:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d107      	bne.n	80020d2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80020c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d103      	bne.n	80020d2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80020d0:	d3e1      	bcc.n	8002096 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80020d8:	d339      	bcc.n	800214e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80020da:	23f9      	movs	r3, #249	; 0xf9
 80020dc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80020de:	e036      	b.n	800214e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80020e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d105      	bne.n	80020f4 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80020e8:	2101      	movs	r1, #1
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ff12 	bl	8001f14 <VL53L0X_CheckAndLoadInterruptSettings>
 80020f0:	4603      	mov	r3, r0
 80020f2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80020f4:	2202      	movs	r2, #2
 80020f6:	2100      	movs	r1, #0
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f003 fb49 	bl	8005790 <VL53L0X_WrByte>
 80020fe:	4603      	mov	r3, r0
 8002100:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8002102:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d123      	bne.n	8002152 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2204      	movs	r2, #4
 800210e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8002112:	e01e      	b.n	8002152 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8002114:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d105      	bne.n	8002128 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800211c:	2101      	movs	r1, #1
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff fef8 	bl	8001f14 <VL53L0X_CheckAndLoadInterruptSettings>
 8002124:	4603      	mov	r3, r0
 8002126:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8002128:	2204      	movs	r2, #4
 800212a:	2100      	movs	r1, #0
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f003 fb2f 	bl	8005790 <VL53L0X_WrByte>
 8002132:	4603      	mov	r3, r0
 8002134:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8002136:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10b      	bne.n	8002156 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2204      	movs	r2, #4
 8002142:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8002146:	e006      	b.n	8002156 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002148:	23f8      	movs	r3, #248	; 0xf8
 800214a:	75fb      	strb	r3, [r7, #23]
 800214c:	e004      	b.n	8002158 <VL53L0X_StartMeasurement+0x178>
		break;
 800214e:	bf00      	nop
 8002150:	e002      	b.n	8002158 <VL53L0X_StartMeasurement+0x178>
		break;
 8002152:	bf00      	nop
 8002154:	e000      	b.n	8002158 <VL53L0X_StartMeasurement+0x178>
		break;
 8002156:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8002158:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800216e:	2300      	movs	r3, #0
 8002170:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8002178:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800217a:	7bbb      	ldrb	r3, [r7, #14]
 800217c:	2b04      	cmp	r3, #4
 800217e:	d112      	bne.n	80021a6 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8002180:	f107 0308 	add.w	r3, r7, #8
 8002184:	4619      	mov	r1, r3
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fb1a 	bl	80027c0 <VL53L0X_GetInterruptMaskStatus>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b04      	cmp	r3, #4
 8002194:	d103      	bne.n	800219e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
 800219c:	e01c      	b.n	80021d8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e018      	b.n	80021d8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80021a6:	f107 030d 	add.w	r3, r7, #13
 80021aa:	461a      	mov	r2, r3
 80021ac:	2114      	movs	r1, #20
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f003 fb70 	bl	8005894 <VL53L0X_RdByte>
 80021b4:	4603      	mov	r3, r0
 80021b6:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80021b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10b      	bne.n	80021d8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80021c0:	7b7b      	ldrb	r3, [r7, #13]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e002      	b.n	80021d8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80021d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80021e4:	b5b0      	push	{r4, r5, r7, lr}
 80021e6:	b096      	sub	sp, #88	; 0x58
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80021f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021f8:	230c      	movs	r3, #12
 80021fa:	2114      	movs	r1, #20
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f003 fa9b 	bl	8005738 <VL53L0X_ReadMulti>
 8002202:	4603      	mov	r3, r0
 8002204:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8002208:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800220c:	2b00      	cmp	r3, #0
 800220e:	f040 80d1 	bne.w	80023b4 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2200      	movs	r2, #0
 8002216:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800221e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002222:	b29b      	uxth	r3, r3
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	b29a      	uxth	r2, r3
 8002228:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800222c:	b29b      	uxth	r3, r3
 800222e:	4413      	add	r3, r2
 8002230:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2200      	movs	r2, #0
 8002238:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800223a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800223e:	b29b      	uxth	r3, r3
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	b29a      	uxth	r2, r3
 8002244:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002248:	b29b      	uxth	r3, r3
 800224a:	4413      	add	r3, r2
 800224c:	b29b      	uxth	r3, r3
 800224e:	025b      	lsls	r3, r3, #9
 8002250:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002256:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8002258:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800225c:	b29b      	uxth	r3, r3
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	b29a      	uxth	r2, r3
 8002262:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002266:	b29b      	uxth	r3, r3
 8002268:	4413      	add	r3, r2
 800226a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800226e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002272:	025b      	lsls	r3, r3, #9
 8002274:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800227a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800227e:	b29b      	uxth	r3, r3
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	b29a      	uxth	r2, r3
 8002284:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002288:	b29b      	uxth	r3, r3
 800228a:	4413      	add	r3, r2
 800228c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002296:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8002298:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800229c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80022a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80022ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80022b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80022b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022b8:	d046      	beq.n	8002348 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80022ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80022bc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80022c0:	fb02 f303 	mul.w	r3, r2, r3
 80022c4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80022c8:	4a57      	ldr	r2, [pc, #348]	; (8002428 <VL53L0X_GetRangingMeasurementData+0x244>)
 80022ca:	fb82 1203 	smull	r1, r2, r2, r3
 80022ce:	1192      	asrs	r2, r2, #6
 80022d0:	17db      	asrs	r3, r3, #31
 80022d2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80022d4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	7f1b      	ldrb	r3, [r3, #28]
 80022e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80022e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d02c      	beq.n	8002348 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80022ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80022f0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	121a      	asrs	r2, r3, #8
					<= 0) {
 80022fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d10d      	bne.n	800231c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8002300:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002304:	2b00      	cmp	r3, #0
 8002306:	d004      	beq.n	8002312 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8002308:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800230c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002310:	e016      	b.n	8002340 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8002312:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8002316:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800231a:	e011      	b.n	8002340 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800231c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002320:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002322:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8002326:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002328:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800232c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8002330:	121b      	asrs	r3, r3, #8
 8002332:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8002334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002336:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8002338:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800233c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8002340:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002344:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8002348:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00d      	beq.n	800236c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8002350:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800235c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002360:	b2db      	uxtb	r3, r3
 8002362:	019b      	lsls	r3, r3, #6
 8002364:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	75da      	strb	r2, [r3, #23]
 800236a:	e006      	b.n	800237a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002372:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2200      	movs	r2, #0
 8002378:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800237a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800237e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8002382:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f002 ff85 	bl	80052a0 <VL53L0X_get_pal_range_status>
 8002396:	4603      	mov	r3, r0
 8002398:	461a      	mov	r2, r3
 800239a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800239e:	4313      	orrs	r3, r2
 80023a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80023a4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d103      	bne.n	80023b4 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80023ac:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80023b4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d12f      	bne.n	800241c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f107 040c 	add.w	r4, r7, #12
 80023c2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80023c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80023d6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80023dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80023e4:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80023ea:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80023f0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80023f6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80023fc:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8002402:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800240c:	f107 050c 	add.w	r5, r7, #12
 8002410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002414:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002418:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800241c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8002420:	4618      	mov	r0, r3
 8002422:	3750      	adds	r7, #80	; 0x50
 8002424:	46bd      	mov	sp, r7
 8002426:	bdb0      	pop	{r4, r5, r7, pc}
 8002428:	10624dd3 	.word	0x10624dd3

0800242c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800243a:	2100      	movs	r1, #0
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff f8d1 	bl	80015e4 <VL53L0X_SetDeviceMode>
 8002442:	4603      	mov	r3, r0
 8002444:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8002446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d104      	bne.n	8002458 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff fd16 	bl	8001e80 <VL53L0X_PerformSingleMeasurement>
 8002454:	4603      	mov	r3, r0
 8002456:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8002458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d105      	bne.n	800246c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8002460:	6839      	ldr	r1, [r7, #0]
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff febe 	bl	80021e4 <VL53L0X_GetRangingMeasurementData>
 8002468:	4603      	mov	r3, r0
 800246a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800246c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d105      	bne.n	8002480 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002474:	2100      	movs	r1, #0
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f962 	bl	8002740 <VL53L0X_ClearInterruptMask>
 800247c:	4603      	mov	r3, r0
 800247e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8002480:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	4608      	mov	r0, r1
 8002496:	4611      	mov	r1, r2
 8002498:	461a      	mov	r2, r3
 800249a:	4603      	mov	r3, r0
 800249c:	70fb      	strb	r3, [r7, #3]
 800249e:	460b      	mov	r3, r1
 80024a0:	70bb      	strb	r3, [r7, #2]
 80024a2:	4613      	mov	r3, r2
 80024a4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80024b0:	23f6      	movs	r3, #246	; 0xf6
 80024b2:	73fb      	strb	r3, [r7, #15]
 80024b4:	e107      	b.n	80026c6 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80024b6:	78bb      	ldrb	r3, [r7, #2]
 80024b8:	2b14      	cmp	r3, #20
 80024ba:	d110      	bne.n	80024de <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80024bc:	7e3b      	ldrb	r3, [r7, #24]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d102      	bne.n	80024c8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80024c2:	2310      	movs	r3, #16
 80024c4:	73bb      	strb	r3, [r7, #14]
 80024c6:	e001      	b.n	80024cc <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80024cc:	7bbb      	ldrb	r3, [r7, #14]
 80024ce:	461a      	mov	r2, r3
 80024d0:	2184      	movs	r1, #132	; 0x84
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f003 f95c 	bl	8005790 <VL53L0X_WrByte>
 80024d8:	4603      	mov	r3, r0
 80024da:	73fb      	strb	r3, [r7, #15]
 80024dc:	e0f3      	b.n	80026c6 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80024de:	78bb      	ldrb	r3, [r7, #2]
 80024e0:	2b15      	cmp	r3, #21
 80024e2:	f040 8097 	bne.w	8002614 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80024e6:	2201      	movs	r2, #1
 80024e8:	21ff      	movs	r1, #255	; 0xff
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f003 f950 	bl	8005790 <VL53L0X_WrByte>
 80024f0:	4603      	mov	r3, r0
 80024f2:	461a      	mov	r2, r3
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2100      	movs	r1, #0
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f003 f946 	bl	8005790 <VL53L0X_WrByte>
 8002504:	4603      	mov	r3, r0
 8002506:	461a      	mov	r2, r3
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	4313      	orrs	r3, r2
 800250c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800250e:	2200      	movs	r2, #0
 8002510:	21ff      	movs	r1, #255	; 0xff
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f003 f93c 	bl	8005790 <VL53L0X_WrByte>
 8002518:	4603      	mov	r3, r0
 800251a:	461a      	mov	r2, r3
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	4313      	orrs	r3, r2
 8002520:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002522:	2201      	movs	r2, #1
 8002524:	2180      	movs	r1, #128	; 0x80
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f003 f932 	bl	8005790 <VL53L0X_WrByte>
 800252c:	4603      	mov	r3, r0
 800252e:	461a      	mov	r2, r3
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	4313      	orrs	r3, r2
 8002534:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8002536:	2202      	movs	r2, #2
 8002538:	2185      	movs	r1, #133	; 0x85
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f003 f928 	bl	8005790 <VL53L0X_WrByte>
 8002540:	4603      	mov	r3, r0
 8002542:	461a      	mov	r2, r3
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	4313      	orrs	r3, r2
 8002548:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800254a:	2204      	movs	r2, #4
 800254c:	21ff      	movs	r1, #255	; 0xff
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f003 f91e 	bl	8005790 <VL53L0X_WrByte>
 8002554:	4603      	mov	r3, r0
 8002556:	461a      	mov	r2, r3
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	4313      	orrs	r3, r2
 800255c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800255e:	2200      	movs	r2, #0
 8002560:	21cd      	movs	r1, #205	; 0xcd
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f003 f914 	bl	8005790 <VL53L0X_WrByte>
 8002568:	4603      	mov	r3, r0
 800256a:	461a      	mov	r2, r3
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	4313      	orrs	r3, r2
 8002570:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8002572:	2211      	movs	r2, #17
 8002574:	21cc      	movs	r1, #204	; 0xcc
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f003 f90a 	bl	8005790 <VL53L0X_WrByte>
 800257c:	4603      	mov	r3, r0
 800257e:	461a      	mov	r2, r3
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	4313      	orrs	r3, r2
 8002584:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8002586:	2207      	movs	r2, #7
 8002588:	21ff      	movs	r1, #255	; 0xff
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f003 f900 	bl	8005790 <VL53L0X_WrByte>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	4313      	orrs	r3, r2
 8002598:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800259a:	2200      	movs	r2, #0
 800259c:	21be      	movs	r1, #190	; 0xbe
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f003 f8f6 	bl	8005790 <VL53L0X_WrByte>
 80025a4:	4603      	mov	r3, r0
 80025a6:	461a      	mov	r2, r3
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80025ae:	2206      	movs	r2, #6
 80025b0:	21ff      	movs	r1, #255	; 0xff
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f003 f8ec 	bl	8005790 <VL53L0X_WrByte>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461a      	mov	r2, r3
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	4313      	orrs	r3, r2
 80025c0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80025c2:	2209      	movs	r2, #9
 80025c4:	21cc      	movs	r1, #204	; 0xcc
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f003 f8e2 	bl	8005790 <VL53L0X_WrByte>
 80025cc:	4603      	mov	r3, r0
 80025ce:	461a      	mov	r2, r3
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80025d6:	2200      	movs	r2, #0
 80025d8:	21ff      	movs	r1, #255	; 0xff
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f003 f8d8 	bl	8005790 <VL53L0X_WrByte>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80025ea:	2201      	movs	r2, #1
 80025ec:	21ff      	movs	r1, #255	; 0xff
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f003 f8ce 	bl	8005790 <VL53L0X_WrByte>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f003 f8c4 	bl	8005790 <VL53L0X_WrByte>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	4313      	orrs	r3, r2
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	e058      	b.n	80026c6 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8002614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d121      	bne.n	8002660 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800261c:	787b      	ldrb	r3, [r7, #1]
 800261e:	2b04      	cmp	r3, #4
 8002620:	d81b      	bhi.n	800265a <VL53L0X_SetGpioConfig+0x1ce>
 8002622:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <VL53L0X_SetGpioConfig+0x19c>)
 8002624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002628:	0800263d 	.word	0x0800263d
 800262c:	08002643 	.word	0x08002643
 8002630:	08002649 	.word	0x08002649
 8002634:	0800264f 	.word	0x0800264f
 8002638:	08002655 	.word	0x08002655
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800263c:	2300      	movs	r3, #0
 800263e:	73bb      	strb	r3, [r7, #14]
				break;
 8002640:	e00f      	b.n	8002662 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8002642:	2301      	movs	r3, #1
 8002644:	73bb      	strb	r3, [r7, #14]
				break;
 8002646:	e00c      	b.n	8002662 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8002648:	2302      	movs	r3, #2
 800264a:	73bb      	strb	r3, [r7, #14]
				break;
 800264c:	e009      	b.n	8002662 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800264e:	2303      	movs	r3, #3
 8002650:	73bb      	strb	r3, [r7, #14]
				break;
 8002652:	e006      	b.n	8002662 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8002654:	2304      	movs	r3, #4
 8002656:	73bb      	strb	r3, [r7, #14]
				break;
 8002658:	e003      	b.n	8002662 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800265a:	23f5      	movs	r3, #245	; 0xf5
 800265c:	73fb      	strb	r3, [r7, #15]
 800265e:	e000      	b.n	8002662 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8002660:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d107      	bne.n	800267a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800266a:	7bbb      	ldrb	r3, [r7, #14]
 800266c:	461a      	mov	r2, r3
 800266e:	210a      	movs	r1, #10
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f003 f88d 	bl	8005790 <VL53L0X_WrByte>
 8002676:	4603      	mov	r3, r0
 8002678:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800267a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10f      	bne.n	80026a2 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8002682:	7e3b      	ldrb	r3, [r7, #24]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d102      	bne.n	800268e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	73bb      	strb	r3, [r7, #14]
 800268c:	e001      	b.n	8002692 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800268e:	2310      	movs	r3, #16
 8002690:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8002692:	7bbb      	ldrb	r3, [r7, #14]
 8002694:	22ef      	movs	r2, #239	; 0xef
 8002696:	2184      	movs	r1, #132	; 0x84
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f003 f8c7 	bl	800582c <VL53L0X_UpdateByte>
 800269e:	4603      	mov	r3, r0
 80026a0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80026a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d103      	bne.n	80026b2 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	787a      	ldrb	r2, [r7, #1]
 80026ae:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80026b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d105      	bne.n	80026c6 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80026ba:	2100      	movs	r1, #0
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f83f 	bl	8002740 <VL53L0X_ClearInterruptMask>
 80026c2:	4603      	mov	r3, r0
 80026c4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80026c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop

080026d4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	460b      	mov	r3, r1
 80026e2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	461a      	mov	r2, r3
 80026ee:	210e      	movs	r1, #14
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f003 f8f9 	bl	80058e8 <VL53L0X_RdWord>
 80026f6:	4603      	mov	r3, r0
 80026f8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80026fa:	8abb      	ldrh	r3, [r7, #20]
 80026fc:	045b      	lsls	r3, r3, #17
 80026fe:	461a      	mov	r2, r3
 8002700:	4b0e      	ldr	r3, [pc, #56]	; (800273c <VL53L0X_GetInterruptThresholds+0x68>)
 8002702:	4013      	ands	r3, r2
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8002708:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10f      	bne.n	8002730 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	461a      	mov	r2, r3
 8002716:	210c      	movs	r1, #12
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f003 f8e5 	bl	80058e8 <VL53L0X_RdWord>
 800271e:	4603      	mov	r3, r0
 8002720:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8002722:	8abb      	ldrh	r3, [r7, #20]
 8002724:	045b      	lsls	r3, r3, #17
 8002726:	461a      	mov	r2, r3
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <VL53L0X_GetInterruptThresholds+0x68>)
 800272a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002730:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	1ffe0000 	.word	0x1ffe0000

08002740 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8002752:	2201      	movs	r2, #1
 8002754:	210b      	movs	r1, #11
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f003 f81a 	bl	8005790 <VL53L0X_WrByte>
 800275c:	4603      	mov	r3, r0
 800275e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8002760:	2200      	movs	r2, #0
 8002762:	210b      	movs	r1, #11
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f003 f813 	bl	8005790 <VL53L0X_WrByte>
 800276a:	4603      	mov	r3, r0
 800276c:	461a      	mov	r2, r3
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	4313      	orrs	r3, r2
 8002772:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8002774:	f107 030d 	add.w	r3, r7, #13
 8002778:	461a      	mov	r2, r3
 800277a:	2113      	movs	r1, #19
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f003 f889 	bl	8005894 <VL53L0X_RdByte>
 8002782:	4603      	mov	r3, r0
 8002784:	461a      	mov	r2, r3
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	4313      	orrs	r3, r2
 800278a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800278c:	7bbb      	ldrb	r3, [r7, #14]
 800278e:	3301      	adds	r3, #1
 8002790:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8002792:	7b7b      	ldrb	r3, [r7, #13]
 8002794:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8002798:	2b00      	cmp	r3, #0
 800279a:	d006      	beq.n	80027aa <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800279c:	7bbb      	ldrb	r3, [r7, #14]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d803      	bhi.n	80027aa <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80027a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0d3      	beq.n	8002752 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80027aa:	7bbb      	ldrb	r3, [r7, #14]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80027b0:	23f4      	movs	r3, #244	; 0xf4
 80027b2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80027b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80027ce:	f107 030e 	add.w	r3, r7, #14
 80027d2:	461a      	mov	r2, r3
 80027d4:	2113      	movs	r1, #19
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f003 f85c 	bl	8005894 <VL53L0X_RdByte>
 80027dc:	4603      	mov	r3, r0
 80027de:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80027e0:	7bbb      	ldrb	r3, [r7, #14]
 80027e2:	f003 0207 	and.w	r2, r3, #7
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80027ea:	7bbb      	ldrb	r3, [r7, #14]
 80027ec:	f003 0318 	and.w	r3, r3, #24
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80027f4:	23fa      	movs	r3, #250	; 0xfa
 80027f6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80027f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <VL53L0X_SetReferenceSpads>:
 * Internal functions
 *****************************************************************************/

VL53L0X_Error VL53L0X_SetReferenceSpads(VL53L0X_DEV Dev, uint32_t count,
	uint8_t isApertureSpads)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	4613      	mov	r3, r2
 8002810:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002812:	2300      	movs	r3, #0
 8002814:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_reference_spads(Dev, count, isApertureSpads);
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	461a      	mov	r2, r3
 800281a:	68b9      	ldr	r1, [r7, #8]
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 fc25 	bl	800306c <VL53L0X_set_reference_spads>
 8002822:	4603      	mov	r3, r0
 8002824:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);

	return Status;
 8002826:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800283e:	2300      	movs	r3, #0
 8002840:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68b9      	ldr	r1, [r7, #8]
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fa04 	bl	8002c54 <VL53L0X_perform_ref_spad_management>
 800284c:	4603      	mov	r3, r0
 800284e:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8002850:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002866:	2300      	movs	r3, #0
 8002868:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800286a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800286e:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8002870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002874:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8002876:	f107 0308 	add.w	r3, r7, #8
 800287a:	461a      	mov	r2, r3
 800287c:	2128      	movs	r1, #40	; 0x28
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f003 f832 	bl	80058e8 <VL53L0X_RdWord>
 8002884:	4603      	mov	r3, r0
 8002886:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8002888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d11e      	bne.n	80028ce <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8002890:	893b      	ldrh	r3, [r7, #8]
 8002892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002896:	b29b      	uxth	r3, r3
 8002898:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800289a:	893b      	ldrh	r3, [r7, #8]
 800289c:	461a      	mov	r2, r3
 800289e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	dd0b      	ble.n	80028be <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80028a6:	893a      	ldrh	r2, [r7, #8]
 80028a8:	897b      	ldrh	r3, [r7, #10]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	b21b      	sxth	r3, r3
 80028b0:	461a      	mov	r2, r3
					* 250;
 80028b2:	23fa      	movs	r3, #250	; 0xfa
 80028b4:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e007      	b.n	80028ce <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80028be:	893b      	ldrh	r3, [r7, #8]
 80028c0:	b21b      	sxth	r3, r3
 80028c2:	461a      	mov	r2, r3
 80028c4:	23fa      	movs	r3, #250	; 0xfa
 80028c6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80028ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80028da:	b480      	push	{r7}
 80028dc:	b08b      	sub	sp, #44	; 0x2c
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80028e8:	2308      	movs	r3, #8
 80028ea:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	f04f 32ff 	mov.w	r2, #4294967295
 80028f6:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	fbb3 f2f2 	udiv	r2, r3, r2
 800290a:	69b9      	ldr	r1, [r7, #24]
 800290c:	fb01 f202 	mul.w	r2, r1, r2
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
 8002918:	e030      	b.n	800297c <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	4413      	add	r3, r2
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8002928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	429a      	cmp	r2, r3
 800292e:	d11e      	bne.n	800296e <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8002930:	7ffa      	ldrb	r2, [r7, #31]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	fa42 f303 	asr.w	r3, r2, r3
 8002938:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800293e:	e016      	b.n	800296e <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8002940:	7ffb      	ldrb	r3, [r7, #31]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00b      	beq.n	8002962 <get_next_good_spad+0x88>
				success = 1;
 800294a:	2301      	movs	r3, #1
 800294c:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	fb02 f203 	mul.w	r2, r2, r3
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	4413      	add	r3, r2
 800295a:	461a      	mov	r2, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	601a      	str	r2, [r3, #0]
				break;
 8002960:	e009      	b.n	8002976 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8002962:	7ffb      	ldrb	r3, [r7, #31]
 8002964:	085b      	lsrs	r3, r3, #1
 8002966:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	3301      	adds	r3, #1
 800296c:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800296e:	6a3a      	ldr	r2, [r7, #32]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	429a      	cmp	r2, r3
 8002974:	d3e4      	bcc.n	8002940 <get_next_good_spad+0x66>
				coarseIndex++) {
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	3301      	adds	r3, #1
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800297c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	429a      	cmp	r2, r3
 8002982:	d202      	bcs.n	800298a <get_next_good_spad+0xb0>
 8002984:	7fbb      	ldrb	r3, [r7, #30]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0c7      	beq.n	800291a <get_next_good_spad+0x40>
		}
	}
}
 800298a:	bf00      	nop
 800298c:	372c      	adds	r7, #44	; 0x2c
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	099b      	lsrs	r3, r3, #6
 80029a8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80029aa:	4a07      	ldr	r2, [pc, #28]	; (80029c8 <is_aperture+0x30>)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <is_aperture+0x22>
		isAperture = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	200002ac 	.word	0x200002ac

080029cc <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80029d8:	2300      	movs	r3, #0
 80029da:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80029dc:	2308      	movs	r3, #8
 80029de:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e8:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80029f2:	69b9      	ldr	r1, [r7, #24]
 80029f4:	fb01 f202 	mul.w	r2, r1, r2
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d302      	bcc.n	8002a0a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002a04:	23ce      	movs	r3, #206	; 0xce
 8002a06:	77fb      	strb	r3, [r7, #31]
 8002a08:	e010      	b.n	8002a2c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	4413      	add	r3, r2
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	b25a      	sxtb	r2, r3
 8002a14:	2101      	movs	r1, #1
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	b259      	sxtb	r1, r3
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	4413      	add	r3, r2
 8002a28:	b2ca      	uxtb	r2, r1
 8002a2a:	701a      	strb	r2, [r3, #0]

	return status;
 8002a2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3724      	adds	r7, #36	; 0x24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8002a46:	2306      	movs	r3, #6
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	21b0      	movs	r1, #176	; 0xb0
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f002 fe43 	bl	80056d8 <VL53L0X_WriteMulti>
 8002a52:	4603      	mov	r3, r0
 8002a54:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8002a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8002a6c:	2306      	movs	r3, #6
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	21b0      	movs	r1, #176	; 0xb0
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f002 fe60 	bl	8005738 <VL53L0X_ReadMulti>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8002a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08c      	sub	sp, #48	; 0x30
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	460b      	mov	r3, r1
 8002a96:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8002a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa0:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8002aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aaa:	e02b      	b.n	8002b04 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8002aac:	f107 031c 	add.w	r3, r7, #28
 8002ab0:	6a3a      	ldr	r2, [r7, #32]
 8002ab2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ff10 	bl	80028da <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d103      	bne.n	8002aca <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002ac2:	23ce      	movs	r3, #206	; 0xce
 8002ac4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002ac8:	e020      	b.n	8002b0c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	461a      	mov	r2, r3
 8002ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad0:	4413      	add	r3, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff ff60 	bl	8002998 <is_aperture>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461a      	mov	r2, r3
 8002adc:	7afb      	ldrb	r3, [r7, #11]
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d003      	beq.n	8002aea <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002ae2:	23ce      	movs	r3, #206	; 0xce
 8002ae4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002ae8:	e010      	b.n	8002b0c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8002aee:	6a3a      	ldr	r2, [r7, #32]
 8002af0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002af2:	6838      	ldr	r0, [r7, #0]
 8002af4:	f7ff ff6a 	bl	80029cc <enable_spad_bit>
		currentSpad++;
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	3301      	adds	r3, #1
 8002afc:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8002afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b00:	3301      	adds	r3, #1
 8002b02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d3cf      	bcc.n	8002aac <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8002b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b0e:	6a3a      	ldr	r2, [r7, #32]
 8002b10:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8002b12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8002b1a:	6839      	ldr	r1, [r7, #0]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f7ff ff8d 	bl	8002a3c <set_ref_spad_map>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8002b28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d121      	bne.n	8002b74 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	4619      	mov	r1, r3
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f7ff ff93 	bl	8002a62 <get_ref_spad_map>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8002b46:	e011      	b.n	8002b6c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	4413      	add	r3, r2
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	f107 0114 	add.w	r1, r7, #20
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	440b      	add	r3, r1
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d003      	beq.n	8002b66 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002b5e:	23ce      	movs	r3, #206	; 0xce
 8002b60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8002b64:	e006      	b.n	8002b74 <enable_ref_spads+0xec>
			}
			i++;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	3301      	adds	r3, #1
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8002b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d3e9      	bcc.n	8002b48 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8002b74:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3730      	adds	r7, #48	; 0x30
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002b9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8002ba0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d107      	bne.n	8002bb8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8002ba8:	22c0      	movs	r2, #192	; 0xc0
 8002baa:	2101      	movs	r1, #1
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f002 fdef 	bl	8005790 <VL53L0X_WrByte>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8002bb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d108      	bne.n	8002bd2 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8002bc0:	f107 0308 	add.w	r3, r7, #8
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff fc30 	bl	800242c <VL53L0X_PerformSingleRangingMeasurement>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8002bd2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d107      	bne.n	8002bea <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002bda:	2201      	movs	r2, #1
 8002bdc:	21ff      	movs	r1, #255	; 0xff
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f002 fdd6 	bl	8005790 <VL53L0X_WrByte>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8002bea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d107      	bne.n	8002c02 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	21b6      	movs	r1, #182	; 0xb6
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f002 fe76 	bl	80058e8 <VL53L0X_RdWord>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8002c02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d107      	bne.n	8002c1a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	21ff      	movs	r1, #255	; 0xff
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f002 fdbe 	bl	8005790 <VL53L0X_WrByte>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8002c1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d112      	bne.n	8002c48 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002c22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c26:	461a      	mov	r2, r3
 8002c28:	2101      	movs	r1, #1
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f002 fdb0 	bl	8005790 <VL53L0X_WrByte>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8002c36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d104      	bne.n	8002c48 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002c44:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8002c48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3728      	adds	r7, #40	; 0x28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8002c54:	b590      	push	{r4, r7, lr}
 8002c56:	b09d      	sub	sp, #116	; 0x74
 8002c58:	af06      	add	r7, sp, #24
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8002c66:	23b4      	movs	r3, #180	; 0xb4
 8002c68:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8002c70:	232c      	movs	r3, #44	; 0x2c
 8002c72:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8002c80:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002c84:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8002c8e:	2306      	movs	r3, #6
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8002cb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cbe:	e009      	b.n	8002cd4 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8002cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d3f1      	bcc.n	8002cc0 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002cdc:	2201      	movs	r2, #1
 8002cde:	21ff      	movs	r1, #255	; 0xff
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f002 fd55 	bl	8005790 <VL53L0X_WrByte>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8002cec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	214f      	movs	r1, #79	; 0x4f
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f002 fd49 	bl	8005790 <VL53L0X_WrByte>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8002d04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d107      	bne.n	8002d1c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8002d0c:	222c      	movs	r2, #44	; 0x2c
 8002d0e:	214e      	movs	r1, #78	; 0x4e
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f002 fd3d 	bl	8005790 <VL53L0X_WrByte>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8002d1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d107      	bne.n	8002d34 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002d24:	2200      	movs	r2, #0
 8002d26:	21ff      	movs	r1, #255	; 0xff
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f002 fd31 	bl	8005790 <VL53L0X_WrByte>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8002d34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8002d3c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002d40:	461a      	mov	r2, r3
 8002d42:	21b6      	movs	r1, #182	; 0xb6
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f002 fd23 	bl	8005790 <VL53L0X_WrByte>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8002d50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d107      	bne.n	8002d68 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2180      	movs	r1, #128	; 0x80
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f002 fd17 	bl	8005790 <VL53L0X_WrByte>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8002d68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10a      	bne.n	8002d86 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8002d70:	f107 0210 	add.w	r2, r7, #16
 8002d74:	f107 0111 	add.w	r1, r7, #17
 8002d78:	2300      	movs	r3, #0
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fbbb 	bl	80034f6 <VL53L0X_perform_ref_calibration>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8002d86:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d121      	bne.n	8002dd2 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8002d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d94:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8002d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d9c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8002daa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002dae:	f107 0218 	add.w	r2, r7, #24
 8002db2:	9204      	str	r2, [sp, #16]
 8002db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002db6:	9203      	str	r2, [sp, #12]
 8002db8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002dba:	9202      	str	r2, [sp, #8]
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	4623      	mov	r3, r4
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f7ff fe5e 	bl	8002a88 <enable_ref_spads>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002dd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d174      	bne.n	8002ec4 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8002dde:	f107 0312 	add.w	r3, r7, #18
 8002de2:	4619      	mov	r1, r3
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f7ff fecb 	bl	8002b80 <perform_ref_signal_measurement>
 8002dea:	4603      	mov	r3, r0
 8002dec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8002df0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d161      	bne.n	8002ebc <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8002df8:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8002dfa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d25d      	bcs.n	8002ebc <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8002e00:	2300      	movs	r3, #0
 8002e02:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e04:	e009      	b.n	8002e1a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8002e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e16:	3301      	adds	r3, #1
 8002e18:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d3f1      	bcc.n	8002e06 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8002e22:	e002      	b.n	8002e2a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8002e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e26:	3301      	adds	r3, #1
 8002e28:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8002e2a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8002e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e30:	4413      	add	r3, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fdb0 	bl	8002998 <is_aperture>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d103      	bne.n	8002e46 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8002e3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d3ee      	bcc.n	8002e24 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8002e46:	2301      	movs	r3, #1
 8002e48:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8002e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e4c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8002e5a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002e5e:	f107 0218 	add.w	r2, r7, #24
 8002e62:	9204      	str	r2, [sp, #16]
 8002e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e66:	9203      	str	r2, [sp, #12]
 8002e68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e6a:	9202      	str	r2, [sp, #8]
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	4623      	mov	r3, r4
 8002e74:	4602      	mov	r2, r0
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7ff fe06 	bl	8002a88 <enable_ref_spads>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8002e82:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d11b      	bne.n	8002ec2 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8002e8e:	f107 0312 	add.w	r3, r7, #18
 8002e92:	4619      	mov	r1, r3
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f7ff fe73 	bl	8002b80 <perform_ref_signal_measurement>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8002ea0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10c      	bne.n	8002ec2 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8002ea8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8002eaa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d208      	bcs.n	8002ec2 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8002eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8002eba:	e002      	b.n	8002ec2 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ec0:	e000      	b.n	8002ec4 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8002ec2:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8002ec4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f040 80af 	bne.w	800302c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8002ece:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8002ed0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	f240 80aa 	bls.w	800302c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8002ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8002ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee0:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8002ee8:	f107 031c 	add.w	r3, r7, #28
 8002eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f005 fae2 	bl	80084b8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8002ef4:	8a7b      	ldrh	r3, [r7, #18]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bfb8      	it	lt
 8002f00:	425b      	neglt	r3, r3
 8002f02:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8002f0a:	e086      	b.n	800301a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8002f12:	f107 0314 	add.w	r3, r7, #20
 8002f16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f1a:	f7ff fcde 	bl	80028da <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d103      	bne.n	8002f2e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002f26:	23ce      	movs	r3, #206	; 0xce
 8002f28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8002f2c:	e07e      	b.n	800302c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8002f2e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4413      	add	r3, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fd2e 	bl	8002998 <is_aperture>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d003      	beq.n	8002f4e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8002f4c:	e06e      	b.n	800302c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8002f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f50:	3301      	adds	r3, #1
 8002f52:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8002f5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fd32 	bl	80029cc <enable_spad_bit>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8002f6e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10c      	bne.n	8002f90 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8002f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f78:	3301      	adds	r3, #1
 8002f7a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8002f82:	4619      	mov	r1, r3
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f7ff fd59 	bl	8002a3c <set_ref_spad_map>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8002f90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d146      	bne.n	8003026 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8002f98:	f107 0312 	add.w	r3, r7, #18
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f7ff fdee 	bl	8002b80 <perform_ref_signal_measurement>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8002faa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d13b      	bne.n	800302a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8002fb2:	8a7b      	ldrh	r3, [r7, #18]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bfb8      	it	lt
 8002fbe:	425b      	neglt	r3, r3
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8002fc2:	8a7b      	ldrh	r3, [r7, #18]
 8002fc4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d21c      	bcs.n	8003004 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8002fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d914      	bls.n	8002ffc <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8002fd2:	f107 031c 	add.w	r3, r7, #28
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f7ff fd2f 	bl	8002a3c <set_ref_spad_map>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8002fea:	f107 011c 	add.w	r1, r7, #28
 8002fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f005 fa61 	bl	80084b8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8002ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003002:	e00a      	b.n	800301a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800300e:	f107 031c 	add.w	r3, r7, #28
 8003012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003014:	4618      	mov	r0, r3
 8003016:	f005 fa4f 	bl	80084b8 <memcpy>
		while (!complete) {
 800301a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800301e:	2b00      	cmp	r3, #0
 8003020:	f43f af74 	beq.w	8002f0c <VL53L0X_perform_ref_spad_management+0x2b8>
 8003024:	e002      	b.n	800302c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003026:	bf00      	nop
 8003028:	e000      	b.n	800302c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800302a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800302c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003030:	2b00      	cmp	r3, #0
 8003032:	d115      	bne.n	8003060 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003038:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003040:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	b2da      	uxtb	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	781a      	ldrb	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8003060:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003064:	4618      	mov	r0, r3
 8003066:	375c      	adds	r7, #92	; 0x5c
 8003068:	46bd      	mov	sp, r7
 800306a:	bd90      	pop	{r4, r7, pc}

0800306c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b093      	sub	sp, #76	; 0x4c
 8003070:	af06      	add	r7, sp, #24
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	4613      	mov	r3, r2
 8003078:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800307a:	2300      	movs	r3, #0
 800307c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8003084:	23b4      	movs	r3, #180	; 0xb4
 8003086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800308a:	2306      	movs	r3, #6
 800308c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800308e:	232c      	movs	r3, #44	; 0x2c
 8003090:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003092:	2201      	movs	r2, #1
 8003094:	21ff      	movs	r1, #255	; 0xff
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f002 fb7a 	bl	8005790 <VL53L0X_WrByte>
 800309c:	4603      	mov	r3, r0
 800309e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80030a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d107      	bne.n	80030ba <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80030aa:	2200      	movs	r2, #0
 80030ac:	214f      	movs	r1, #79	; 0x4f
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f002 fb6e 	bl	8005790 <VL53L0X_WrByte>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80030ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d107      	bne.n	80030d2 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80030c2:	222c      	movs	r2, #44	; 0x2c
 80030c4:	214e      	movs	r1, #78	; 0x4e
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f002 fb62 	bl	8005790 <VL53L0X_WrByte>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80030d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d107      	bne.n	80030ea <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80030da:	2200      	movs	r2, #0
 80030dc:	21ff      	movs	r1, #255	; 0xff
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f002 fb56 	bl	8005790 <VL53L0X_WrByte>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80030ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80030f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f6:	461a      	mov	r2, r3
 80030f8:	21b6      	movs	r1, #182	; 0xb6
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f002 fb48 	bl	8005790 <VL53L0X_WrByte>
 8003100:	4603      	mov	r3, r0
 8003102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8003106:	2300      	movs	r3, #0
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
 800310a:	e009      	b.n	8003120 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	4413      	add	r3, r2
 8003112:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	3301      	adds	r3, #1
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
 8003120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	429a      	cmp	r2, r3
 8003126:	d3f1      	bcc.n	800310c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d011      	beq.n	8003152 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800312e:	e002      	b.n	8003136 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8003130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003132:	3301      	adds	r3, #1
 8003134:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8003136:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	4413      	add	r3, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fc2a 	bl	8002998 <is_aperture>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d103      	bne.n	8003152 <VL53L0X_set_reference_spads+0xe6>
 800314a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	429a      	cmp	r2, r3
 8003150:	d3ee      	bcc.n	8003130 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800315e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003162:	79f9      	ldrb	r1, [r7, #7]
 8003164:	f107 0214 	add.w	r2, r7, #20
 8003168:	9204      	str	r2, [sp, #16]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	9203      	str	r2, [sp, #12]
 800316e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003170:	9202      	str	r2, [sp, #8]
 8003172:	9301      	str	r3, [sp, #4]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	4623      	mov	r3, r4
 800317a:	4602      	mov	r2, r0
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f7ff fc83 	bl	8002a88 <enable_ref_spads>
 8003182:	4603      	mov	r3, r0
 8003184:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8003188:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10c      	bne.n	80031aa <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	79fa      	ldrb	r2, [r7, #7]
 80031a6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80031aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3734      	adds	r7, #52	; 0x34
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd90      	pop	{r4, r7, pc}

080031b6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80031c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	2100      	movs	r1, #0
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f002 fad8 	bl	8005790 <VL53L0X_WrByte>
 80031e0:	4603      	mov	r3, r0
 80031e2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80031e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d104      	bne.n	80031f6 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f9e2 	bl	80035b6 <VL53L0X_measurement_poll_for_completion>
 80031f2:	4603      	mov	r3, r0
 80031f4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80031f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d105      	bne.n	800320a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80031fe:	2100      	movs	r1, #0
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff fa9d 	bl	8002740 <VL53L0X_ClearInterruptMask>
 8003206:	4603      	mov	r3, r0
 8003208:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800320a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8003212:	2200      	movs	r2, #0
 8003214:	2100      	movs	r1, #0
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f002 faba 	bl	8005790 <VL53L0X_WrByte>
 800321c:	4603      	mov	r3, r0
 800321e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8003220:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	4608      	mov	r0, r1
 8003236:	4611      	mov	r1, r2
 8003238:	461a      	mov	r2, r3
 800323a:	4603      	mov	r3, r0
 800323c:	70fb      	strb	r3, [r7, #3]
 800323e:	460b      	mov	r3, r1
 8003240:	70bb      	strb	r3, [r7, #2]
 8003242:	4613      	mov	r3, r2
 8003244:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800324e:	2201      	movs	r2, #1
 8003250:	21ff      	movs	r1, #255	; 0xff
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f002 fa9c 	bl	8005790 <VL53L0X_WrByte>
 8003258:	4603      	mov	r3, r0
 800325a:	461a      	mov	r2, r3
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	4313      	orrs	r3, r2
 8003260:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003262:	2200      	movs	r2, #0
 8003264:	2100      	movs	r1, #0
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f002 fa92 	bl	8005790 <VL53L0X_WrByte>
 800326c:	4603      	mov	r3, r0
 800326e:	461a      	mov	r2, r3
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	4313      	orrs	r3, r2
 8003274:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003276:	2200      	movs	r2, #0
 8003278:	21ff      	movs	r1, #255	; 0xff
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f002 fa88 	bl	8005790 <VL53L0X_WrByte>
 8003280:	4603      	mov	r3, r0
 8003282:	461a      	mov	r2, r3
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	4313      	orrs	r3, r2
 8003288:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01e      	beq.n	80032ce <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8003290:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	21cb      	movs	r1, #203	; 0xcb
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f002 faf9 	bl	8005894 <VL53L0X_RdByte>
 80032a2:	4603      	mov	r3, r0
 80032a4:	461a      	mov	r2, r3
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80032ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d02a      	beq.n	800330a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80032b4:	f107 030e 	add.w	r3, r7, #14
 80032b8:	461a      	mov	r2, r3
 80032ba:	21ee      	movs	r1, #238	; 0xee
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f002 fae9 	bl	8005894 <VL53L0X_RdByte>
 80032c2:	4603      	mov	r3, r0
 80032c4:	461a      	mov	r2, r3
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	73fb      	strb	r3, [r7, #15]
 80032cc:	e01d      	b.n	800330a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80032ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80032d6:	78bb      	ldrb	r3, [r7, #2]
 80032d8:	461a      	mov	r2, r3
 80032da:	21cb      	movs	r1, #203	; 0xcb
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f002 fa57 	bl	8005790 <VL53L0X_WrByte>
 80032e2:	4603      	mov	r3, r0
 80032e4:	461a      	mov	r2, r3
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80032ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80032f4:	787b      	ldrb	r3, [r7, #1]
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	21ee      	movs	r1, #238	; 0xee
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f002 fa96 	bl	800582c <VL53L0X_UpdateByte>
 8003300:	4603      	mov	r3, r0
 8003302:	461a      	mov	r2, r3
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	4313      	orrs	r3, r2
 8003308:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800330a:	2201      	movs	r2, #1
 800330c:	21ff      	movs	r1, #255	; 0xff
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f002 fa3e 	bl	8005790 <VL53L0X_WrByte>
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	4313      	orrs	r3, r2
 800331c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800331e:	2201      	movs	r2, #1
 8003320:	2100      	movs	r1, #0
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f002 fa34 	bl	8005790 <VL53L0X_WrByte>
 8003328:	4603      	mov	r3, r0
 800332a:	461a      	mov	r2, r3
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	4313      	orrs	r3, r2
 8003330:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003332:	2200      	movs	r2, #0
 8003334:	21ff      	movs	r1, #255	; 0xff
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f002 fa2a 	bl	8005790 <VL53L0X_WrByte>
 800333c:	4603      	mov	r3, r0
 800333e:	461a      	mov	r2, r3
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	4313      	orrs	r3, r2
 8003344:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8003346:	7bbb      	ldrb	r3, [r7, #14]
 8003348:	f023 0310 	bic.w	r3, r3, #16
 800334c:	b2da      	uxtb	r2, r3
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	701a      	strb	r2, [r3, #0]

	return Status;
 8003352:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b08a      	sub	sp, #40	; 0x28
 8003362:	af04      	add	r7, sp, #16
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	4611      	mov	r1, r2
 800336a:	461a      	mov	r2, r3
 800336c:	460b      	mov	r3, r1
 800336e:	71fb      	strb	r3, [r7, #7]
 8003370:	4613      	mov	r3, r2
 8003372:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003374:	2300      	movs	r3, #0
 8003376:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800337c:	2300      	movs	r3, #0
 800337e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8003380:	2300      	movs	r3, #0
 8003382:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8003388:	79bb      	ldrb	r3, [r7, #6]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003394:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8003396:	2201      	movs	r2, #1
 8003398:	2101      	movs	r1, #1
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f002 f9f8 	bl	8005790 <VL53L0X_WrByte>
 80033a0:	4603      	mov	r3, r0
 80033a2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80033a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d105      	bne.n	80033b8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80033ac:	2140      	movs	r1, #64	; 0x40
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f7ff ff01 	bl	80031b6 <VL53L0X_perform_single_ref_calibration>
 80033b4:	4603      	mov	r3, r0
 80033b6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80033b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d115      	bne.n	80033ec <VL53L0X_perform_vhv_calibration+0x8e>
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d112      	bne.n	80033ec <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80033c6:	7d39      	ldrb	r1, [r7, #20]
 80033c8:	7d7a      	ldrb	r2, [r7, #21]
 80033ca:	2300      	movs	r3, #0
 80033cc:	9303      	str	r3, [sp, #12]
 80033ce:	2301      	movs	r3, #1
 80033d0:	9302      	str	r3, [sp, #8]
 80033d2:	f107 0313 	add.w	r3, r7, #19
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	460b      	mov	r3, r1
 80033de:	2101      	movs	r1, #1
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f7ff ff23 	bl	800322c <VL53L0X_ref_calibration_io>
 80033e6:	4603      	mov	r3, r0
 80033e8:	75fb      	strb	r3, [r7, #23]
 80033ea:	e002      	b.n	80033f2 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80033f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d112      	bne.n	8003420 <VL53L0X_perform_vhv_calibration+0xc2>
 80033fa:	79bb      	ldrb	r3, [r7, #6]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00f      	beq.n	8003420 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003400:	7dbb      	ldrb	r3, [r7, #22]
 8003402:	461a      	mov	r2, r3
 8003404:	2101      	movs	r1, #1
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f002 f9c2 	bl	8005790 <VL53L0X_WrByte>
 800340c:	4603      	mov	r3, r0
 800340e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8003410:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d103      	bne.n	8003420 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	7dba      	ldrb	r2, [r7, #22]
 800341c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8003420:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08a      	sub	sp, #40	; 0x28
 8003430:	af04      	add	r7, sp, #16
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	4611      	mov	r1, r2
 8003438:	461a      	mov	r2, r3
 800343a:	460b      	mov	r3, r1
 800343c:	71fb      	strb	r3, [r7, #7]
 800343e:	4613      	mov	r3, r2
 8003440:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003442:	2300      	movs	r3, #0
 8003444:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800344e:	2300      	movs	r3, #0
 8003450:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8003452:	79bb      	ldrb	r3, [r7, #6]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800345e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8003460:	2202      	movs	r2, #2
 8003462:	2101      	movs	r1, #1
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f002 f993 	bl	8005790 <VL53L0X_WrByte>
 800346a:	4603      	mov	r3, r0
 800346c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800346e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d105      	bne.n	8003482 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8003476:	2100      	movs	r1, #0
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f7ff fe9c 	bl	80031b6 <VL53L0X_perform_single_ref_calibration>
 800347e:	4603      	mov	r3, r0
 8003480:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8003482:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d115      	bne.n	80034b6 <VL53L0X_perform_phase_calibration+0x8a>
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d112      	bne.n	80034b6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8003490:	7d39      	ldrb	r1, [r7, #20]
 8003492:	7d7a      	ldrb	r2, [r7, #21]
 8003494:	2301      	movs	r3, #1
 8003496:	9303      	str	r3, [sp, #12]
 8003498:	2300      	movs	r3, #0
 800349a:	9302      	str	r3, [sp, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	f107 0313 	add.w	r3, r7, #19
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	460b      	mov	r3, r1
 80034a8:	2101      	movs	r1, #1
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f7ff febe 	bl	800322c <VL53L0X_ref_calibration_io>
 80034b0:	4603      	mov	r3, r0
 80034b2:	75fb      	strb	r3, [r7, #23]
 80034b4:	e002      	b.n	80034bc <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80034bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d112      	bne.n	80034ea <VL53L0X_perform_phase_calibration+0xbe>
 80034c4:	79bb      	ldrb	r3, [r7, #6]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00f      	beq.n	80034ea <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80034ca:	7dbb      	ldrb	r3, [r7, #22]
 80034cc:	461a      	mov	r2, r3
 80034ce:	2101      	movs	r1, #1
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f002 f95d 	bl	8005790 <VL53L0X_WrByte>
 80034d6:	4603      	mov	r3, r0
 80034d8:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80034da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d103      	bne.n	80034ea <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	7dba      	ldrb	r2, [r7, #22]
 80034e6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80034ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b086      	sub	sp, #24
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003504:	2300      	movs	r3, #0
 8003506:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003512:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	2300      	movs	r3, #0
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f7ff ff1f 	bl	800335e <VL53L0X_perform_vhv_calibration>
 8003520:	4603      	mov	r3, r0
 8003522:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003524:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d107      	bne.n	800353c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	2300      	movs	r3, #0
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff ff7a 	bl	800342c <VL53L0X_perform_phase_calibration>
 8003538:	4603      	mov	r3, r0
 800353a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800353c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10f      	bne.n	8003564 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003544:	7dbb      	ldrb	r3, [r7, #22]
 8003546:	461a      	mov	r2, r3
 8003548:	2101      	movs	r1, #1
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f002 f920 	bl	8005790 <VL53L0X_WrByte>
 8003550:	4603      	mov	r3, r0
 8003552:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8003554:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d103      	bne.n	8003564 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	7dba      	ldrb	r2, [r7, #22]
 8003560:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8003564:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <VL53L0X_set_ref_calibration>:

VL53L0X_Error VL53L0X_set_ref_calibration(VL53L0X_DEV Dev,
		uint8_t VhvSettings, uint8_t PhaseCal)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af04      	add	r7, sp, #16
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	70fb      	strb	r3, [r7, #3]
 800357c:	4613      	mov	r3, r2
 800357e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003580:	2300      	movs	r3, #0
 8003582:	73fb      	strb	r3, [r7, #15]
	uint8_t pVhvSettings;
	uint8_t pPhaseCal;

	Status = VL53L0X_ref_calibration_io(Dev, 0,
 8003584:	78b9      	ldrb	r1, [r7, #2]
 8003586:	78fa      	ldrb	r2, [r7, #3]
 8003588:	2301      	movs	r3, #1
 800358a:	9303      	str	r3, [sp, #12]
 800358c:	2301      	movs	r3, #1
 800358e:	9302      	str	r3, [sp, #8]
 8003590:	f107 030d 	add.w	r3, r7, #13
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	f107 030e 	add.w	r3, r7, #14
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	460b      	mov	r3, r1
 800359e:	2100      	movs	r1, #0
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff fe43 	bl	800322c <VL53L0X_ref_calibration_io>
 80035a6:	4603      	mov	r3, r0
 80035a8:	73fb      	strb	r3, [r7, #15]
		VhvSettings, PhaseCal,
		&pVhvSettings, &pPhaseCal,
		1, 1);

	return Status;
 80035aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035be:	2300      	movs	r3, #0
 80035c0:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80035ca:	f107 030f 	add.w	r3, r7, #15
 80035ce:	4619      	mov	r1, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7fe fdc7 	bl	8002164 <VL53L0X_GetMeasurementDataReady>
 80035d6:	4603      	mov	r3, r0
 80035d8:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80035da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d110      	bne.n	8003604 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d00f      	beq.n	8003608 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	3301      	adds	r3, #1
 80035ec:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80035f4:	d302      	bcc.n	80035fc <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80035f6:	23f9      	movs	r3, #249	; 0xf9
 80035f8:	75fb      	strb	r3, [r7, #23]
			break;
 80035fa:	e006      	b.n	800360a <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f002 f9e7 	bl	80059d0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8003602:	e7e2      	b.n	80035ca <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8003604:	bf00      	nop
 8003606:	e000      	b.n	800360a <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8003608:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800360a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8003616:	b480      	push	{r7}
 8003618:	b085      	sub	sp, #20
 800361a:	af00      	add	r7, sp, #0
 800361c:	4603      	mov	r3, r0
 800361e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	3301      	adds	r3, #1
 8003628:	b2db      	uxtb	r3, r3
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800362e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8003648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800364c:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800364e:	e002      	b.n	8003656 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	089b      	lsrs	r3, r3, #2
 8003654:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	d8f8      	bhi.n	8003650 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800365e:	e017      	b.n	8003690 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	4413      	add	r3, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	d30b      	bcc.n	8003684 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	4413      	add	r3, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	4413      	add	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	e002      	b.n	800368a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	089b      	lsrs	r3, r3, #2
 800368e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1e4      	bne.n	8003660 <VL53L0X_isqrt+0x24>
	}

	return res;
 8003696:	68fb      	ldr	r3, [r7, #12]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80036b0:	2200      	movs	r2, #0
 80036b2:	2183      	movs	r1, #131	; 0x83
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f002 f86b 	bl	8005790 <VL53L0X_WrByte>
 80036ba:	4603      	mov	r3, r0
 80036bc:	461a      	mov	r2, r3
 80036be:	7dfb      	ldrb	r3, [r7, #23]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80036c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d11e      	bne.n	800370a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80036d0:	f107 030f 	add.w	r3, r7, #15
 80036d4:	461a      	mov	r2, r3
 80036d6:	2183      	movs	r1, #131	; 0x83
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f002 f8db 	bl	8005894 <VL53L0X_RdByte>
 80036de:	4603      	mov	r3, r0
 80036e0:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10a      	bne.n	80036fe <VL53L0X_device_read_strobe+0x5a>
 80036e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	3301      	adds	r3, #1
 80036f4:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80036fc:	d3e8      	bcc.n	80036d0 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003704:	d301      	bcc.n	800370a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8003706:	23f9      	movs	r3, #249	; 0xf9
 8003708:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800370a:	2201      	movs	r2, #1
 800370c:	2183      	movs	r1, #131	; 0x83
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f002 f83e 	bl	8005790 <VL53L0X_WrByte>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	4313      	orrs	r3, r2
 800371c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800371e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b098      	sub	sp, #96	; 0x60
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	460b      	mov	r3, r1
 8003734:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003736:	2300      	movs	r3, #0
 8003738:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800373c:	2300      	movs	r3, #0
 800373e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8003742:	2300      	movs	r3, #0
 8003744:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800375a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800375e:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8003760:	2300      	movs	r3, #0
 8003762:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8003772:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8003776:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800377a:	2b07      	cmp	r3, #7
 800377c:	f000 8408 	beq.w	8003f90 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003780:	2201      	movs	r2, #1
 8003782:	2180      	movs	r1, #128	; 0x80
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f002 f803 	bl	8005790 <VL53L0X_WrByte>
 800378a:	4603      	mov	r3, r0
 800378c:	461a      	mov	r2, r3
 800378e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003792:	4313      	orrs	r3, r2
 8003794:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003798:	2201      	movs	r2, #1
 800379a:	21ff      	movs	r1, #255	; 0xff
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f001 fff7 	bl	8005790 <VL53L0X_WrByte>
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80037b0:	2200      	movs	r2, #0
 80037b2:	2100      	movs	r1, #0
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f001 ffeb 	bl	8005790 <VL53L0X_WrByte>
 80037ba:	4603      	mov	r3, r0
 80037bc:	461a      	mov	r2, r3
 80037be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80037c8:	2206      	movs	r2, #6
 80037ca:	21ff      	movs	r1, #255	; 0xff
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f001 ffdf 	bl	8005790 <VL53L0X_WrByte>
 80037d2:	4603      	mov	r3, r0
 80037d4:	461a      	mov	r2, r3
 80037d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037da:	4313      	orrs	r3, r2
 80037dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80037e0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80037e4:	461a      	mov	r2, r3
 80037e6:	2183      	movs	r1, #131	; 0x83
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f002 f853 	bl	8005894 <VL53L0X_RdByte>
 80037ee:	4603      	mov	r3, r0
 80037f0:	461a      	mov	r2, r3
 80037f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80037fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003800:	f043 0304 	orr.w	r3, r3, #4
 8003804:	b2db      	uxtb	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	2183      	movs	r1, #131	; 0x83
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f001 ffc0 	bl	8005790 <VL53L0X_WrByte>
 8003810:	4603      	mov	r3, r0
 8003812:	461a      	mov	r2, r3
 8003814:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003818:	4313      	orrs	r3, r2
 800381a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800381e:	2207      	movs	r2, #7
 8003820:	21ff      	movs	r1, #255	; 0xff
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f001 ffb4 	bl	8005790 <VL53L0X_WrByte>
 8003828:	4603      	mov	r3, r0
 800382a:	461a      	mov	r2, r3
 800382c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003830:	4313      	orrs	r3, r2
 8003832:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8003836:	2201      	movs	r2, #1
 8003838:	2181      	movs	r1, #129	; 0x81
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f001 ffa8 	bl	8005790 <VL53L0X_WrByte>
 8003840:	4603      	mov	r3, r0
 8003842:	461a      	mov	r2, r3
 8003844:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003848:	4313      	orrs	r3, r2
 800384a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f002 f8be 	bl	80059d0 <VL53L0X_PollingDelay>
 8003854:	4603      	mov	r3, r0
 8003856:	461a      	mov	r2, r3
 8003858:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800385c:	4313      	orrs	r3, r2
 800385e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003862:	2201      	movs	r2, #1
 8003864:	2180      	movs	r1, #128	; 0x80
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f001 ff92 	bl	8005790 <VL53L0X_WrByte>
 800386c:	4603      	mov	r3, r0
 800386e:	461a      	mov	r2, r3
 8003870:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003874:	4313      	orrs	r3, r2
 8003876:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8098 	beq.w	80039b6 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8003886:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800388a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800388e:	2b00      	cmp	r3, #0
 8003890:	f040 8091 	bne.w	80039b6 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8003894:	226b      	movs	r2, #107	; 0x6b
 8003896:	2194      	movs	r1, #148	; 0x94
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f001 ff79 	bl	8005790 <VL53L0X_WrByte>
 800389e:	4603      	mov	r3, r0
 80038a0:	461a      	mov	r2, r3
 80038a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff fef9 	bl	80036a4 <VL53L0X_device_read_strobe>
 80038b2:	4603      	mov	r3, r0
 80038b4:	461a      	mov	r2, r3
 80038b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80038c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038c4:	461a      	mov	r2, r3
 80038c6:	2190      	movs	r1, #144	; 0x90
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f002 f845 	bl	8005958 <VL53L0X_RdDWord>
 80038ce:	4603      	mov	r3, r0
 80038d0:	461a      	mov	r2, r3
 80038d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	0a1b      	lsrs	r3, r3, #8
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038e6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80038ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ec:	0bdb      	lsrs	r3, r3, #15
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80038f8:	2224      	movs	r2, #36	; 0x24
 80038fa:	2194      	movs	r1, #148	; 0x94
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f001 ff47 	bl	8005790 <VL53L0X_WrByte>
 8003902:	4603      	mov	r3, r0
 8003904:	461a      	mov	r2, r3
 8003906:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800390a:	4313      	orrs	r3, r2
 800390c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff fec7 	bl	80036a4 <VL53L0X_device_read_strobe>
 8003916:	4603      	mov	r3, r0
 8003918:	461a      	mov	r2, r3
 800391a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800391e:	4313      	orrs	r3, r2
 8003920:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003924:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003928:	461a      	mov	r2, r3
 800392a:	2190      	movs	r1, #144	; 0x90
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f002 f813 	bl	8005958 <VL53L0X_RdDWord>
 8003932:	4603      	mov	r3, r0
 8003934:	461a      	mov	r2, r3
 8003936:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800393a:	4313      	orrs	r3, r2
 800393c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	0e1b      	lsrs	r3, r3, #24
 8003944:	b2db      	uxtb	r3, r3
 8003946:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	0c1b      	lsrs	r3, r3, #16
 800394c:	b2db      	uxtb	r3, r3
 800394e:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	0a1b      	lsrs	r3, r3, #8
 8003954:	b2db      	uxtb	r3, r3
 8003956:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8003958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395a:	b2db      	uxtb	r3, r3
 800395c:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800395e:	2225      	movs	r2, #37	; 0x25
 8003960:	2194      	movs	r1, #148	; 0x94
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f001 ff14 	bl	8005790 <VL53L0X_WrByte>
 8003968:	4603      	mov	r3, r0
 800396a:	461a      	mov	r2, r3
 800396c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003970:	4313      	orrs	r3, r2
 8003972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fe94 	bl	80036a4 <VL53L0X_device_read_strobe>
 800397c:	4603      	mov	r3, r0
 800397e:	461a      	mov	r2, r3
 8003980:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003984:	4313      	orrs	r3, r2
 8003986:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800398a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800398e:	461a      	mov	r2, r3
 8003990:	2190      	movs	r1, #144	; 0x90
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f001 ffe0 	bl	8005958 <VL53L0X_RdDWord>
 8003998:	4603      	mov	r3, r0
 800399a:	461a      	mov	r2, r3
 800399c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	0e1b      	lsrs	r3, r3, #24
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 8189 	beq.w	8003cd4 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80039c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80039c6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f040 8182 	bne.w	8003cd4 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80039d0:	2202      	movs	r2, #2
 80039d2:	2194      	movs	r1, #148	; 0x94
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f001 fedb 	bl	8005790 <VL53L0X_WrByte>
 80039da:	4603      	mov	r3, r0
 80039dc:	461a      	mov	r2, r3
 80039de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff fe5b 	bl	80036a4 <VL53L0X_device_read_strobe>
 80039ee:	4603      	mov	r3, r0
 80039f0:	461a      	mov	r2, r3
 80039f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80039fc:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8003a00:	461a      	mov	r2, r3
 8003a02:	2190      	movs	r1, #144	; 0x90
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f001 ff45 	bl	8005894 <VL53L0X_RdByte>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003a18:	227b      	movs	r2, #123	; 0x7b
 8003a1a:	2194      	movs	r1, #148	; 0x94
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f001 feb7 	bl	8005790 <VL53L0X_WrByte>
 8003a22:	4603      	mov	r3, r0
 8003a24:	461a      	mov	r2, r3
 8003a26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff fe37 	bl	80036a4 <VL53L0X_device_read_strobe>
 8003a36:	4603      	mov	r3, r0
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8003a44:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2190      	movs	r1, #144	; 0x90
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f001 ff21 	bl	8005894 <VL53L0X_RdByte>
 8003a52:	4603      	mov	r3, r0
 8003a54:	461a      	mov	r2, r3
 8003a56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8003a60:	2277      	movs	r2, #119	; 0x77
 8003a62:	2194      	movs	r1, #148	; 0x94
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f001 fe93 	bl	8005790 <VL53L0X_WrByte>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff fe13 	bl	80036a4 <VL53L0X_device_read_strobe>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	461a      	mov	r2, r3
 8003a82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003a8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a90:	461a      	mov	r2, r3
 8003a92:	2190      	movs	r1, #144	; 0x90
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f001 ff5f 	bl	8005958 <VL53L0X_RdDWord>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aaa:	0e5b      	lsrs	r3, r3, #25
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	0c9b      	lsrs	r3, r3, #18
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	0adb      	lsrs	r3, r3, #11
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8003af2:	2278      	movs	r2, #120	; 0x78
 8003af4:	2194      	movs	r1, #148	; 0x94
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f001 fe4a 	bl	8005790 <VL53L0X_WrByte>
 8003afc:	4603      	mov	r3, r0
 8003afe:	461a      	mov	r2, r3
 8003b00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff fdca 	bl	80036a4 <VL53L0X_device_read_strobe>
 8003b10:	4603      	mov	r3, r0
 8003b12:	461a      	mov	r2, r3
 8003b14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003b1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b22:	461a      	mov	r2, r3
 8003b24:	2190      	movs	r1, #144	; 0x90
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f001 ff16 	bl	8005958 <VL53L0X_RdDWord>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	0f5b      	lsrs	r3, r3, #29
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b44:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8003b46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003b4a:	4413      	add	r3, r2
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	0d9b      	lsrs	r3, r3, #22
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	0bdb      	lsrs	r3, r3, #15
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	019b      	lsls	r3, r3, #6
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003b9a:	2279      	movs	r2, #121	; 0x79
 8003b9c:	2194      	movs	r1, #148	; 0x94
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f001 fdf6 	bl	8005790 <VL53L0X_WrByte>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff fd76 	bl	80036a4 <VL53L0X_device_read_strobe>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003bc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bca:	461a      	mov	r2, r3
 8003bcc:	2190      	movs	r1, #144	; 0x90
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f001 fec2 	bl	8005958 <VL53L0X_RdDWord>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8003be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be4:	0e9b      	lsrs	r3, r3, #26
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bec:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8003bee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003bf2:	4413      	add	r3, r2
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	0cdb      	lsrs	r3, r3, #19
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	0b1b      	lsrs	r3, r3, #12
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8003c34:	227a      	movs	r2, #122	; 0x7a
 8003c36:	2194      	movs	r1, #148	; 0x94
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f001 fda9 	bl	8005790 <VL53L0X_WrByte>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	461a      	mov	r2, r3
 8003c42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff fd29 	bl	80036a4 <VL53L0X_device_read_strobe>
 8003c52:	4603      	mov	r3, r0
 8003c54:	461a      	mov	r2, r3
 8003c56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003c60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c64:	461a      	mov	r2, r3
 8003c66:	2190      	movs	r1, #144	; 0x90
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f001 fe75 	bl	8005958 <VL53L0X_RdDWord>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	461a      	mov	r2, r3
 8003c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7e:	0f9b      	lsrs	r3, r3, #30
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c86:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8003c88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c8c:	4413      	add	r3, r2
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8003c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c94:	0ddb      	lsrs	r3, r3, #23
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	0c1b      	lsrs	r3, r3, #16
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	0a5b      	lsrs	r3, r3, #9
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	089b      	lsrs	r3, r3, #2
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 80f1 	beq.w	8003ec2 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8003ce0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ce4:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f040 80ea 	bne.w	8003ec2 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003cee:	227b      	movs	r2, #123	; 0x7b
 8003cf0:	2194      	movs	r1, #148	; 0x94
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f001 fd4c 	bl	8005790 <VL53L0X_WrByte>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff fccc 	bl	80036a4 <VL53L0X_device_read_strobe>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8003d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d1e:	461a      	mov	r2, r3
 8003d20:	2190      	movs	r1, #144	; 0x90
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f001 fe18 	bl	8005958 <VL53L0X_RdDWord>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8003d36:	227c      	movs	r2, #124	; 0x7c
 8003d38:	2194      	movs	r1, #148	; 0x94
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f001 fd28 	bl	8005790 <VL53L0X_WrByte>
 8003d40:	4603      	mov	r3, r0
 8003d42:	461a      	mov	r2, r3
 8003d44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff fca8 	bl	80036a4 <VL53L0X_device_read_strobe>
 8003d54:	4603      	mov	r3, r0
 8003d56:	461a      	mov	r2, r3
 8003d58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8003d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d66:	461a      	mov	r2, r3
 8003d68:	2190      	movs	r1, #144	; 0x90
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f001 fdf4 	bl	8005958 <VL53L0X_RdDWord>
 8003d70:	4603      	mov	r3, r0
 8003d72:	461a      	mov	r2, r3
 8003d74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8003d7e:	2273      	movs	r2, #115	; 0x73
 8003d80:	2194      	movs	r1, #148	; 0x94
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f001 fd04 	bl	8005790 <VL53L0X_WrByte>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff fc84 	bl	80036a4 <VL53L0X_device_read_strobe>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003daa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dae:	461a      	mov	r2, r3
 8003db0:	2190      	movs	r1, #144	; 0x90
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f001 fdd0 	bl	8005958 <VL53L0X_RdDWord>
 8003db8:	4603      	mov	r3, r0
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003dce:	2274      	movs	r2, #116	; 0x74
 8003dd0:	2194      	movs	r1, #148	; 0x94
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f001 fcdc 	bl	8005790 <VL53L0X_WrByte>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff fc5c 	bl	80036a4 <VL53L0X_device_read_strobe>
 8003dec:	4603      	mov	r3, r0
 8003dee:	461a      	mov	r2, r3
 8003df0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003dfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dfe:	461a      	mov	r2, r3
 8003e00:	2190      	movs	r1, #144	; 0x90
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f001 fda8 	bl	8005958 <VL53L0X_RdDWord>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8003e1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8003e20:	2275      	movs	r2, #117	; 0x75
 8003e22:	2194      	movs	r1, #148	; 0x94
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f001 fcb3 	bl	8005790 <VL53L0X_WrByte>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff fc33 	bl	80036a4 <VL53L0X_device_read_strobe>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	461a      	mov	r2, r3
 8003e42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003e4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e50:	461a      	mov	r2, r3
 8003e52:	2190      	movs	r1, #144	; 0x90
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f001 fd7f 	bl	8005958 <VL53L0X_RdDWord>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003e70:	2276      	movs	r2, #118	; 0x76
 8003e72:	2194      	movs	r1, #148	; 0x94
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f001 fc8b 	bl	8005790 <VL53L0X_WrByte>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff fc0b 	bl	80036a4 <VL53L0X_device_read_strobe>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	461a      	mov	r2, r3
 8003e92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003e9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2190      	movs	r1, #144	; 0x90
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f001 fd57 	bl	8005958 <VL53L0X_RdDWord>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	461a      	mov	r2, r3
 8003eae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eba:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8003ebc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2181      	movs	r1, #129	; 0x81
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f001 fc62 	bl	8005790 <VL53L0X_WrByte>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003eda:	2206      	movs	r2, #6
 8003edc:	21ff      	movs	r1, #255	; 0xff
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f001 fc56 	bl	8005790 <VL53L0X_WrByte>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003ef2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	2183      	movs	r1, #131	; 0x83
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f001 fcca 	bl	8005894 <VL53L0X_RdByte>
 8003f00:	4603      	mov	r3, r0
 8003f02:	461a      	mov	r2, r3
 8003f04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8003f0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f12:	f023 0304 	bic.w	r3, r3, #4
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2183      	movs	r1, #131	; 0x83
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f001 fc37 	bl	8005790 <VL53L0X_WrByte>
 8003f22:	4603      	mov	r3, r0
 8003f24:	461a      	mov	r2, r3
 8003f26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003f30:	2201      	movs	r2, #1
 8003f32:	21ff      	movs	r1, #255	; 0xff
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f001 fc2b 	bl	8005790 <VL53L0X_WrByte>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003f48:	2201      	movs	r2, #1
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f001 fc1f 	bl	8005790 <VL53L0X_WrByte>
 8003f52:	4603      	mov	r3, r0
 8003f54:	461a      	mov	r2, r3
 8003f56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003f60:	2200      	movs	r2, #0
 8003f62:	21ff      	movs	r1, #255	; 0xff
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f001 fc13 	bl	8005790 <VL53L0X_WrByte>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2180      	movs	r1, #128	; 0x80
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f001 fc07 	bl	8005790 <VL53L0X_WrByte>
 8003f82:	4603      	mov	r3, r0
 8003f84:	461a      	mov	r2, r3
 8003f86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8003f90:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f040 808f 	bne.w	80040b8 <VL53L0X_get_info_from_device+0x98e>
 8003f9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f9e:	2b07      	cmp	r3, #7
 8003fa0:	f000 808a 	beq.w	80040b8 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d024      	beq.n	8003ff8 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8003fae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003fb2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d11e      	bne.n	8003ff8 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8003fc0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8003fca:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003fce:	2300      	movs	r3, #0
 8003fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd2:	e00e      	b.n	8003ff2 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8003fd4:	f107 0208 	add.w	r2, r7, #8
 8003fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fda:	4413      	add	r3, r2
 8003fdc:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8003fe8:	460a      	mov	r2, r1
 8003fea:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fee:	3301      	adds	r3, #1
 8003ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff4:	2b05      	cmp	r3, #5
 8003ff6:	dded      	ble.n	8003fd4 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d018      	beq.n	8004034 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8004002:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004006:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800400a:	2b00      	cmp	r3, #0
 800400c:	d112      	bne.n	8004034 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800400e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004018:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	33f3      	adds	r3, #243	; 0xf3
 8004026:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8004028:	f107 0310 	add.w	r3, r7, #16
 800402c:	4619      	mov	r1, r3
 800402e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004030:	f004 ff50 	bl	8008ed4 <strcpy>

		}

		if (((option & 4) == 4) &&
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	d030      	beq.n	80040a0 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800403e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004042:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004046:	2b00      	cmp	r3, #0
 8004048:	d12a      	bne.n	80040a0 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800404a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800405a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800405c:	025b      	lsls	r3, r3, #9
 800405e:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004064:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800406e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004070:	2b00      	cmp	r3, #0
 8004072:	d011      	beq.n	8004098 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8004074:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800407c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800407e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8004088:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800408c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004090:	425b      	negs	r3, r3
 8004092:	b29b      	uxth	r3, r3
 8004094:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8004098:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80040a0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80040ae:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80040b8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3760      	adds	r7, #96	; 0x60
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 80040d0:	f240 6277 	movw	r2, #1655	; 0x677
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 80040dc:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80040e0:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	fb02 f303 	mul.w	r3, r2, r3
 80040f0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 80040f2:	68bb      	ldr	r3, [r7, #8]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8004108:	2300      	movs	r3, #0
 800410a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800410c:	2300      	movs	r3, #0
 800410e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d017      	beq.n	800414a <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3b01      	subs	r3, #1
 800411e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8004120:	e005      	b.n	800412e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	085b      	lsrs	r3, r3, #1
 8004126:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8004128:	89fb      	ldrh	r3, [r7, #14]
 800412a:	3301      	adds	r3, #1
 800412c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1f4      	bne.n	8004122 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8004138:	89fb      	ldrh	r3, [r7, #14]
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	b29b      	uxth	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8004146:	4413      	add	r3, r2
 8004148:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800414a:	8afb      	ldrh	r3, [r7, #22]

}
 800414c:	4618      	mov	r0, r3
 800414e:	371c      	adds	r7, #28
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800416a:	88fa      	ldrh	r2, [r7, #6]
 800416c:	0a12      	lsrs	r2, r2, #8
 800416e:	b292      	uxth	r2, r2
 8004170:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8004172:	3301      	adds	r3, #1
 8004174:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8004176:	68fb      	ldr	r3, [r7, #12]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	4613      	mov	r3, r2
 8004190:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	4619      	mov	r1, r3
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f7ff ff92 	bl	80040c4 <VL53L0X_calc_macro_period_ps>
 80041a0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80041a8:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <VL53L0X_calc_timeout_mclks+0x50>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	099b      	lsrs	r3, r3, #6
 80041b0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041b8:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	441a      	add	r2, r3
	timeout_period_mclks =
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 80041ca:	69fb      	ldr	r3, [r7, #28]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3720      	adds	r7, #32
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	10624dd3 	.word	0x10624dd3

080041d8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	807b      	strh	r3, [r7, #2]
 80041e4:	4613      	mov	r3, r2
 80041e6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80041ec:	787b      	ldrb	r3, [r7, #1]
 80041ee:	4619      	mov	r1, r3
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff ff67 	bl	80040c4 <VL53L0X_calc_macro_period_ps>
 80041f6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80041fe:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <VL53L0X_calc_timeout_us+0x50>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	099b      	lsrs	r3, r3, #6
 8004206:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8004208:	887b      	ldrh	r3, [r7, #2]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	fb02 f303 	mul.w	r3, r2, r3
 8004210:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8004214:	4a04      	ldr	r2, [pc, #16]	; (8004228 <VL53L0X_calc_timeout_us+0x50>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	099b      	lsrs	r3, r3, #6
 800421c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800421e:	697b      	ldr	r3, [r7, #20]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	10624dd3 	.word	0x10624dd3

0800422c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08c      	sub	sp, #48	; 0x30
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	460b      	mov	r3, r1
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800423a:	2300      	movs	r3, #0
 800423c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800424e:	2300      	movs	r3, #0
 8004250:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8004252:	7afb      	ldrb	r3, [r7, #11]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <get_sequence_step_timeout+0x38>
 8004258:	7afb      	ldrb	r3, [r7, #11]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d002      	beq.n	8004264 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800425e:	7afb      	ldrb	r3, [r7, #11]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d128      	bne.n	80042b6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004264:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004268:	461a      	mov	r2, r3
 800426a:	2100      	movs	r1, #0
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f7fd fa3d 	bl	80016ec <VL53L0X_GetVcselPulsePeriod>
 8004272:	4603      	mov	r3, r0
 8004274:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8004278:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800427c:	2b00      	cmp	r3, #0
 800427e:	d109      	bne.n	8004294 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8004280:	f107 0320 	add.w	r3, r7, #32
 8004284:	461a      	mov	r2, r3
 8004286:	2146      	movs	r1, #70	; 0x46
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f001 fb03 	bl	8005894 <VL53L0X_RdByte>
 800428e:	4603      	mov	r3, r0
 8004290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8004294:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004298:	b29b      	uxth	r3, r3
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff ff5c 	bl	8004158 <VL53L0X_decode_timeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80042a4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80042a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80042aa:	4619      	mov	r1, r3
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7ff ff93 	bl	80041d8 <VL53L0X_calc_timeout_us>
 80042b2:	62b8      	str	r0, [r7, #40]	; 0x28
 80042b4:	e092      	b.n	80043dc <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80042b6:	7afb      	ldrb	r3, [r7, #11]
 80042b8:	2b03      	cmp	r3, #3
 80042ba:	d135      	bne.n	8004328 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80042bc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80042c0:	461a      	mov	r2, r3
 80042c2:	2100      	movs	r1, #0
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f7fd fa11 	bl	80016ec <VL53L0X_GetVcselPulsePeriod>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80042d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f040 8081 	bne.w	80043dc <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80042da:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80042de:	461a      	mov	r2, r3
 80042e0:	2100      	movs	r1, #0
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f7fd fa02 	bl	80016ec <VL53L0X_GetVcselPulsePeriod>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80042ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80042f6:	f107 031e 	add.w	r3, r7, #30
 80042fa:	461a      	mov	r2, r3
 80042fc:	2151      	movs	r1, #81	; 0x51
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f001 faf2 	bl	80058e8 <VL53L0X_RdWord>
 8004304:	4603      	mov	r3, r0
 8004306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800430a:	8bfb      	ldrh	r3, [r7, #30]
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ff23 	bl	8004158 <VL53L0X_decode_timeout>
 8004312:	4603      	mov	r3, r0
 8004314:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8004316:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800431a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800431c:	4619      	mov	r1, r3
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f7ff ff5a 	bl	80041d8 <VL53L0X_calc_timeout_us>
 8004324:	62b8      	str	r0, [r7, #40]	; 0x28
 8004326:	e059      	b.n	80043dc <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8004328:	7afb      	ldrb	r3, [r7, #11]
 800432a:	2b04      	cmp	r3, #4
 800432c:	d156      	bne.n	80043dc <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800432e:	f107 0314 	add.w	r3, r7, #20
 8004332:	4619      	mov	r1, r3
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f7fd fae5 	bl	8001904 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800433e:	7dfb      	ldrb	r3, [r7, #23]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01d      	beq.n	8004380 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004344:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004348:	461a      	mov	r2, r3
 800434a:	2100      	movs	r1, #0
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f7fd f9cd 	bl	80016ec <VL53L0X_GetVcselPulsePeriod>
 8004352:	4603      	mov	r3, r0
 8004354:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8004358:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10f      	bne.n	8004380 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8004360:	f107 031e 	add.w	r3, r7, #30
 8004364:	461a      	mov	r2, r3
 8004366:	2151      	movs	r1, #81	; 0x51
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f001 fabd 	bl	80058e8 <VL53L0X_RdWord>
 800436e:	4603      	mov	r3, r0
 8004370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8004374:	8bfb      	ldrh	r3, [r7, #30]
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff feee 	bl	8004158 <VL53L0X_decode_timeout>
 800437c:	4603      	mov	r3, r0
 800437e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004380:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004384:	2b00      	cmp	r3, #0
 8004386:	d109      	bne.n	800439c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004388:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800438c:	461a      	mov	r2, r3
 800438e:	2101      	movs	r1, #1
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f7fd f9ab 	bl	80016ec <VL53L0X_GetVcselPulsePeriod>
 8004396:	4603      	mov	r3, r0
 8004398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800439c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10f      	bne.n	80043c4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80043a4:	f107 031c 	add.w	r3, r7, #28
 80043a8:	461a      	mov	r2, r3
 80043aa:	2171      	movs	r1, #113	; 0x71
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f001 fa9b 	bl	80058e8 <VL53L0X_RdWord>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80043b8:	8bbb      	ldrh	r3, [r7, #28]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff fecc 	bl	8004158 <VL53L0X_decode_timeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80043c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80043cc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80043d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043d2:	4619      	mov	r1, r3
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7ff feff 	bl	80041d8 <VL53L0X_calc_timeout_us>
 80043da:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043e0:	601a      	str	r2, [r3, #0]

	return Status;
 80043e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3730      	adds	r7, #48	; 0x30
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b08a      	sub	sp, #40	; 0x28
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	460b      	mov	r3, r1
 80043f8:	607a      	str	r2, [r7, #4]
 80043fa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043fc:	2300      	movs	r3, #0
 80043fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8004402:	7afb      	ldrb	r3, [r7, #11]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <set_sequence_step_timeout+0x26>
 8004408:	7afb      	ldrb	r3, [r7, #11]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d002      	beq.n	8004414 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800440e:	7afb      	ldrb	r3, [r7, #11]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d138      	bne.n	8004486 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004414:	f107 031b 	add.w	r3, r7, #27
 8004418:	461a      	mov	r2, r3
 800441a:	2100      	movs	r1, #0
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f7fd f965 	bl	80016ec <VL53L0X_GetVcselPulsePeriod>
 8004422:	4603      	mov	r3, r0
 8004424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8004428:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800442c:	2b00      	cmp	r3, #0
 800442e:	d11a      	bne.n	8004466 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8004430:	7efb      	ldrb	r3, [r7, #27]
 8004432:	461a      	mov	r2, r3
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7ff fea4 	bl	8004184 <VL53L0X_calc_timeout_mclks>
 800443c:	4603      	mov	r3, r0
 800443e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8004440:	8bbb      	ldrh	r3, [r7, #28]
 8004442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004446:	d903      	bls.n	8004450 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8004448:	23ff      	movs	r3, #255	; 0xff
 800444a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800444e:	e004      	b.n	800445a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8004450:	8bbb      	ldrh	r3, [r7, #28]
 8004452:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8004454:	3b01      	subs	r3, #1
 8004456:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800445a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004466:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800446a:	2b00      	cmp	r3, #0
 800446c:	f040 80ab 	bne.w	80045c6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8004470:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004474:	461a      	mov	r2, r3
 8004476:	2146      	movs	r1, #70	; 0x46
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f001 f989 	bl	8005790 <VL53L0X_WrByte>
 800447e:	4603      	mov	r3, r0
 8004480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8004484:	e09f      	b.n	80045c6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8004486:	7afb      	ldrb	r3, [r7, #11]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d135      	bne.n	80044f8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800448c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004490:	2b00      	cmp	r3, #0
 8004492:	d11b      	bne.n	80044cc <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004494:	f107 031b 	add.w	r3, r7, #27
 8004498:	461a      	mov	r2, r3
 800449a:	2100      	movs	r1, #0
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7fd f925 	bl	80016ec <VL53L0X_GetVcselPulsePeriod>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80044a8:	7efb      	ldrb	r3, [r7, #27]
 80044aa:	461a      	mov	r2, r3
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f7ff fe68 	bl	8004184 <VL53L0X_calc_timeout_mclks>
 80044b4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80044b6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80044b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff fe20 	bl	8004100 <VL53L0X_encode_timeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80044c4:	8b3a      	ldrh	r2, [r7, #24]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80044cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d108      	bne.n	80044e6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80044d4:	8b3b      	ldrh	r3, [r7, #24]
 80044d6:	461a      	mov	r2, r3
 80044d8:	2151      	movs	r1, #81	; 0x51
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f001 f97c 	bl	80057d8 <VL53L0X_WrWord>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80044e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d16b      	bne.n	80045c6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80044f6:	e066      	b.n	80045c6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80044f8:	7afb      	ldrb	r3, [r7, #11]
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d160      	bne.n	80045c0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80044fe:	f107 0310 	add.w	r3, r7, #16
 8004502:	4619      	mov	r1, r3
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7fd f9fd 	bl	8001904 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800450e:	7cfb      	ldrb	r3, [r7, #19]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01d      	beq.n	8004550 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004514:	f107 031b 	add.w	r3, r7, #27
 8004518:	461a      	mov	r2, r3
 800451a:	2100      	movs	r1, #0
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f7fd f8e5 	bl	80016ec <VL53L0X_GetVcselPulsePeriod>
 8004522:	4603      	mov	r3, r0
 8004524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8004528:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10f      	bne.n	8004550 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8004530:	f107 0318 	add.w	r3, r7, #24
 8004534:	461a      	mov	r2, r3
 8004536:	2151      	movs	r1, #81	; 0x51
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f001 f9d5 	bl	80058e8 <VL53L0X_RdWord>
 800453e:	4603      	mov	r3, r0
 8004540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8004544:	8b3b      	ldrh	r3, [r7, #24]
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff fe06 	bl	8004158 <VL53L0X_decode_timeout>
 800454c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800454e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8004550:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004554:	2b00      	cmp	r3, #0
 8004556:	d109      	bne.n	800456c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004558:	f107 031b 	add.w	r3, r7, #27
 800455c:	461a      	mov	r2, r3
 800455e:	2101      	movs	r1, #1
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f7fd f8c3 	bl	80016ec <VL53L0X_GetVcselPulsePeriod>
 8004566:	4603      	mov	r3, r0
 8004568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800456c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004570:	2b00      	cmp	r3, #0
 8004572:	d128      	bne.n	80045c6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8004574:	7efb      	ldrb	r3, [r7, #27]
 8004576:	461a      	mov	r2, r3
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f7ff fe02 	bl	8004184 <VL53L0X_calc_timeout_mclks>
 8004580:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8004582:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004584:	6a3a      	ldr	r2, [r7, #32]
 8004586:	4413      	add	r3, r2
 8004588:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800458a:	6a38      	ldr	r0, [r7, #32]
 800458c:	f7ff fdb8 	bl	8004100 <VL53L0X_encode_timeout>
 8004590:	4603      	mov	r3, r0
 8004592:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8004594:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004598:	2b00      	cmp	r3, #0
 800459a:	d108      	bne.n	80045ae <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800459c:	8bfb      	ldrh	r3, [r7, #30]
 800459e:	461a      	mov	r2, r3
 80045a0:	2171      	movs	r1, #113	; 0x71
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f001 f918 	bl	80057d8 <VL53L0X_WrWord>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80045ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d107      	bne.n	80045c6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80045be:	e002      	b.n	80045c6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80045c0:	23fc      	movs	r3, #252	; 0xfc
 80045c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80045c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3728      	adds	r7, #40	; 0x28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b086      	sub	sp, #24
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	460b      	mov	r3, r1
 80045dc:	607a      	str	r2, [r7, #4]
 80045de:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045e0:	2300      	movs	r3, #0
 80045e2:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80045e4:	7afb      	ldrb	r3, [r7, #11]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <VL53L0X_get_vcsel_pulse_period+0x1e>
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d00a      	beq.n	8004604 <VL53L0X_get_vcsel_pulse_period+0x32>
 80045ee:	e013      	b.n	8004618 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80045f0:	f107 0316 	add.w	r3, r7, #22
 80045f4:	461a      	mov	r2, r3
 80045f6:	2150      	movs	r1, #80	; 0x50
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f001 f94b 	bl	8005894 <VL53L0X_RdByte>
 80045fe:	4603      	mov	r3, r0
 8004600:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8004602:	e00b      	b.n	800461c <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8004604:	f107 0316 	add.w	r3, r7, #22
 8004608:	461a      	mov	r2, r3
 800460a:	2170      	movs	r1, #112	; 0x70
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f001 f941 	bl	8005894 <VL53L0X_RdByte>
 8004612:	4603      	mov	r3, r0
 8004614:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8004616:	e001      	b.n	800461c <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004618:	23fc      	movs	r3, #252	; 0xfc
 800461a:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800461c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d107      	bne.n	8004634 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8004624:	7dbb      	ldrb	r3, [r7, #22]
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe fff5 	bl	8003616 <VL53L0X_decode_vcsel_period>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	701a      	strb	r2, [r3, #0]

	return Status;
 8004634:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b092      	sub	sp, #72	; 0x48
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800464a:	2300      	movs	r3, #0
 800464c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8004650:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004654:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8004656:	f240 7376 	movw	r3, #1910	; 0x776
 800465a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800465c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004660:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8004662:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004666:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8004668:	f240 234e 	movw	r3, #590	; 0x24e
 800466c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800466e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8004674:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004678:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800467a:	f240 2326 	movw	r3, #550	; 0x226
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8004684:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004688:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	429a      	cmp	r2, r3
 8004694:	d205      	bcs.n	80046a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004696:	23fc      	movs	r3, #252	; 0xfc
 8004698:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800469c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80046a0:	e0aa      	b.n	80047f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80046a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a6:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80046ae:	f107 0314 	add.w	r3, r7, #20
 80046b2:	4619      	mov	r1, r3
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7fd f925 	bl	8001904 <VL53L0X_GetSequenceStepEnables>
 80046ba:	4603      	mov	r3, r0
 80046bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80046c0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d15b      	bne.n	8004780 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80046c8:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d105      	bne.n	80046da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80046ce:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d102      	bne.n	80046da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80046d4:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d052      	beq.n	8004780 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80046da:	f107 0310 	add.w	r3, r7, #16
 80046de:	461a      	mov	r2, r3
 80046e0:	2102      	movs	r1, #2
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff fda2 	bl	800422c <get_sequence_step_timeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 80046ee:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 80046f6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80046fa:	e07d      	b.n	80047f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80046fc:	7d3b      	ldrb	r3, [r7, #20]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00f      	beq.n	8004722 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8004702:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8004704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004706:	4413      	add	r3, r2
 8004708:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470e:	429a      	cmp	r2, r3
 8004710:	d204      	bcs.n	800471c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8004712:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	643b      	str	r3, [r7, #64]	; 0x40
 800471a:	e002      	b.n	8004722 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800471c:	23fc      	movs	r3, #252	; 0xfc
 800471e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8004722:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800472a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800472e:	e063      	b.n	80047f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8004730:	7dbb      	ldrb	r3, [r7, #22]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d011      	beq.n	800475a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473a:	4413      	add	r3, r2
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004744:	429a      	cmp	r2, r3
 8004746:	d204      	bcs.n	8004752 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8004748:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	643b      	str	r3, [r7, #64]	; 0x40
 8004750:	e016      	b.n	8004780 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004752:	23fc      	movs	r3, #252	; 0xfc
 8004754:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004758:	e012      	b.n	8004780 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800475a:	7d7b      	ldrb	r3, [r7, #21]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00f      	beq.n	8004780 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004764:	4413      	add	r3, r2
 8004766:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800476c:	429a      	cmp	r2, r3
 800476e:	d204      	bcs.n	800477a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8004770:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	643b      	str	r3, [r7, #64]	; 0x40
 8004778:	e002      	b.n	8004780 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800477a:	23fc      	movs	r3, #252	; 0xfc
 800477c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8004780:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8004788:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800478c:	e034      	b.n	80047f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800478e:	7dfb      	ldrb	r3, [r7, #23]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d019      	beq.n	80047c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8004794:	f107 030c 	add.w	r3, r7, #12
 8004798:	461a      	mov	r2, r3
 800479a:	2103      	movs	r1, #3
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff fd45 	bl	800422c <get_sequence_step_timeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ac:	4413      	add	r3, r2
 80047ae:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80047b0:	69fa      	ldr	r2, [r7, #28]
 80047b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d204      	bcs.n	80047c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80047b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	643b      	str	r3, [r7, #64]	; 0x40
 80047c0:	e002      	b.n	80047c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80047c2:	23fc      	movs	r3, #252	; 0xfc
 80047c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80047c8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d111      	bne.n	80047f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 80047d0:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00e      	beq.n	80047f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 80047d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80047de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047e0:	2104      	movs	r1, #4
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff fe03 	bl	80043ee <set_sequence_step_timeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80047f4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3748      	adds	r7, #72	; 0x48
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b090      	sub	sp, #64	; 0x40
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800480a:	2300      	movs	r3, #0
 800480c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8004810:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004814:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8004816:	f240 7376 	movw	r3, #1910	; 0x776
 800481a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800481c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004820:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8004822:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004826:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8004828:	f240 234e 	movw	r3, #590	; 0x24e
 800482c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800482e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8004832:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8004834:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800483a:	f240 2326 	movw	r3, #550	; 0x226
 800483e:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8004844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004848:	441a      	add	r2, r3
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800484e:	f107 0318 	add.w	r3, r7, #24
 8004852:	4619      	mov	r1, r3
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7fd f855 	bl	8001904 <VL53L0X_GetSequenceStepEnables>
 800485a:	4603      	mov	r3, r0
 800485c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8004860:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8004868:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800486c:	e075      	b.n	800495a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800486e:	7e3b      	ldrb	r3, [r7, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d105      	bne.n	8004880 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8004874:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8004876:	2b00      	cmp	r3, #0
 8004878:	d102      	bne.n	8004880 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800487a:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800487c:	2b00      	cmp	r3, #0
 800487e:	d030      	beq.n	80048e2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8004880:	f107 0310 	add.w	r3, r7, #16
 8004884:	461a      	mov	r2, r3
 8004886:	2102      	movs	r1, #2
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff fccf 	bl	800422c <get_sequence_step_timeout>
 800488e:	4603      	mov	r3, r0
 8004890:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8004894:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004898:	2b00      	cmp	r3, #0
 800489a:	d122      	bne.n	80048e2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800489c:	7e3b      	ldrb	r3, [r7, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d007      	beq.n	80048b2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80048a6:	6939      	ldr	r1, [r7, #16]
 80048a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048aa:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80048ac:	441a      	add	r2, r3
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80048b2:	7ebb      	ldrb	r3, [r7, #26]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d009      	beq.n	80048cc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80048bc:	6939      	ldr	r1, [r7, #16]
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	440b      	add	r3, r1
 80048c2:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80048c4:	441a      	add	r2, r3
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	e00a      	b.n	80048e2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80048cc:	7e7b      	ldrb	r3, [r7, #25]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80048d6:	6939      	ldr	r1, [r7, #16]
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80048dc:	441a      	add	r2, r3
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80048e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d114      	bne.n	8004914 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80048ea:	7efb      	ldrb	r3, [r7, #27]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d011      	beq.n	8004914 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80048f0:	f107 030c 	add.w	r3, r7, #12
 80048f4:	461a      	mov	r2, r3
 80048f6:	2103      	movs	r1, #3
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff fc97 	bl	800422c <get_sequence_step_timeout>
 80048fe:	4603      	mov	r3, r0
 8004900:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8004908:	68f9      	ldr	r1, [r7, #12]
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800490e:	441a      	add	r2, r3
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004914:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004918:	2b00      	cmp	r3, #0
 800491a:	d114      	bne.n	8004946 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800491c:	7f3b      	ldrb	r3, [r7, #28]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d011      	beq.n	8004946 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8004922:	f107 0314 	add.w	r3, r7, #20
 8004926:	461a      	mov	r2, r3
 8004928:	2104      	movs	r1, #4
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff fc7e 	bl	800422c <get_sequence_step_timeout>
 8004930:	4603      	mov	r3, r0
 8004932:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800493a:	6979      	ldr	r1, [r7, #20]
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8004940:	441a      	add	r2, r3
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004946:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800494a:	2b00      	cmp	r3, #0
 800494c:	d103      	bne.n	8004956 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004956:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800495a:	4618      	mov	r0, r3
 800495c:	3740      	adds	r7, #64	; 0x40
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800496e:	2300      	movs	r3, #0
 8004970:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8004976:	e0c6      	b.n	8004b06 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	4413      	add	r3, r2
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	74fb      	strb	r3, [r7, #19]
		Index++;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	3301      	adds	r3, #1
 8004986:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8004988:	7cfb      	ldrb	r3, [r7, #19]
 800498a:	2bff      	cmp	r3, #255	; 0xff
 800498c:	f040 808d 	bne.w	8004aaa <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	4413      	add	r3, r2
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	747b      	strb	r3, [r7, #17]
			Index++;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	3301      	adds	r3, #1
 800499e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80049a0:	7c7b      	ldrb	r3, [r7, #17]
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d87e      	bhi.n	8004aa4 <VL53L0X_load_tuning_settings+0x140>
 80049a6:	a201      	add	r2, pc, #4	; (adr r2, 80049ac <VL53L0X_load_tuning_settings+0x48>)
 80049a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ac:	080049bd 	.word	0x080049bd
 80049b0:	080049f7 	.word	0x080049f7
 80049b4:	08004a31 	.word	0x08004a31
 80049b8:	08004a6b 	.word	0x08004a6b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	4413      	add	r3, r2
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	743b      	strb	r3, [r7, #16]
				Index++;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	3301      	adds	r3, #1
 80049ca:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	4413      	add	r3, r2
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	73fb      	strb	r3, [r7, #15]
				Index++;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	3301      	adds	r3, #1
 80049da:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80049dc:	7c3b      	ldrb	r3, [r7, #16]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	4413      	add	r3, r2
 80049ea:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	89ba      	ldrh	r2, [r7, #12]
 80049f0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 80049f4:	e087      	b.n	8004b06 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	4413      	add	r3, r2
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	743b      	strb	r3, [r7, #16]
				Index++;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	3301      	adds	r3, #1
 8004a04:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	3301      	adds	r3, #1
 8004a14:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004a16:	7c3b      	ldrb	r3, [r7, #16]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	4413      	add	r3, r2
 8004a24:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	89ba      	ldrh	r2, [r7, #12]
 8004a2a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8004a2e:	e06a      	b.n	8004b06 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	4413      	add	r3, r2
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	743b      	strb	r3, [r7, #16]
				Index++;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	4413      	add	r3, r2
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004a50:	7c3b      	ldrb	r3, [r7, #16]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	89ba      	ldrh	r2, [r7, #12]
 8004a64:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8004a68:	e04d      	b.n	8004b06 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	4413      	add	r3, r2
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	743b      	strb	r3, [r7, #16]
				Index++;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	3301      	adds	r3, #1
 8004a78:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	4413      	add	r3, r2
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	3301      	adds	r3, #1
 8004a88:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004a8a:	7c3b      	ldrb	r3, [r7, #16]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	4413      	add	r3, r2
 8004a98:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	89ba      	ldrh	r2, [r7, #12]
 8004a9e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8004aa2:	e030      	b.n	8004b06 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004aa4:	23fc      	movs	r3, #252	; 0xfc
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e02d      	b.n	8004b06 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8004aaa:	7cfb      	ldrb	r3, [r7, #19]
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d828      	bhi.n	8004b02 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	74bb      	strb	r3, [r7, #18]
			Index++;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	3301      	adds	r3, #1
 8004abe:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61bb      	str	r3, [r7, #24]
 8004ac4:	e00f      	b.n	8004ae6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	4413      	add	r3, r2
 8004acc:	7819      	ldrb	r1, [r3, #0]
 8004ace:	f107 0208 	add.w	r2, r7, #8
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	460a      	mov	r2, r1
 8004ad8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	3301      	adds	r3, #1
 8004ade:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	61bb      	str	r3, [r7, #24]
 8004ae6:	7cfb      	ldrb	r3, [r7, #19]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	dbeb      	blt.n	8004ac6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8004aee:	7cfb      	ldrb	r3, [r7, #19]
 8004af0:	f107 0208 	add.w	r2, r7, #8
 8004af4:	7cb9      	ldrb	r1, [r7, #18]
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fdee 	bl	80056d8 <VL53L0X_WriteMulti>
 8004afc:	4603      	mov	r3, r0
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e001      	b.n	8004b06 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004b02:	23fc      	movs	r3, #252	; 0xfc
 8004b04:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d004      	beq.n	8004b1c <VL53L0X_load_tuning_settings+0x1b8>
 8004b12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f43f af2e 	beq.w	8004978 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004b1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3720      	adds	r7, #32
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b34:	2300      	movs	r3, #0
 8004b36:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8004b3e:	f107 0313 	add.w	r3, r7, #19
 8004b42:	4619      	mov	r1, r3
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f7fc ff69 	bl	8001a1c <VL53L0X_GetXTalkCompensationEnable>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8004b4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d111      	bne.n	8004b7a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8004b56:	7cfb      	ldrb	r3, [r7, #19]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00e      	beq.n	8004b7a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	8a9b      	ldrh	r3, [r3, #20]
 8004b66:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	fb02 f303 	mul.w	r3, r2, r3
 8004b6e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	3380      	adds	r3, #128	; 0x80
 8004b74:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8004b7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3720      	adds	r7, #32
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b086      	sub	sp, #24
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8004b9e:	f107 0310 	add.w	r3, r7, #16
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f7ff ffbe 	bl	8004b28 <VL53L0X_get_total_xtalk_rate>
 8004bac:	4603      	mov	r3, r0
 8004bae:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8004bb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d105      	bne.n	8004bc4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	441a      	add	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	601a      	str	r2, [r3, #0]

	return Status;
 8004bc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b09a      	sub	sp, #104	; 0x68
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8004bde:	2312      	movs	r3, #18
 8004be0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8004be2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004be6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8004be8:	2342      	movs	r3, #66	; 0x42
 8004bea:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8004bec:	2306      	movs	r3, #6
 8004bee:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8004bf0:	2307      	movs	r3, #7
 8004bf2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8004c00:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8004c08:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8004c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c0e:	fb02 f303 	mul.w	r3, r2, r3
 8004c12:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8004c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c16:	3380      	adds	r3, #128	; 0x80
 8004c18:	0a1b      	lsrs	r3, r3, #8
 8004c1a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c20:	fb02 f303 	mul.w	r3, r2, r3
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8004c26:	2300      	movs	r3, #0
 8004c28:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01a      	beq.n	8004c66 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	029b      	lsls	r3, r3, #10
 8004c34:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8004c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c3c:	4413      	add	r3, r2
 8004c3e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8004c40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c48:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8004c4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	4413      	add	r3, r2
 8004c52:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8004c54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c56:	fb03 f303 	mul.w	r3, r3, r3
 8004c5a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8004c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c5e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004c62:	0c1b      	lsrs	r3, r3, #16
 8004c64:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004c6a:	fb02 f303 	mul.w	r3, r2, r3
 8004c6e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8004c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c72:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004c76:	0c1b      	lsrs	r3, r3, #16
 8004c78:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8004c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7c:	fb03 f303 	mul.w	r3, r3, r3
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8004c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004c88:	0c1b      	lsrs	r3, r3, #16
 8004c8a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8004c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c8e:	085a      	lsrs	r2, r3, #1
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	441a      	add	r2, r3
 8004c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ca0:	fb02 f303 	mul.w	r3, r2, r3
 8004ca4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cac:	d302      	bcc.n	8004cb4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8004cae:	4b54      	ldr	r3, [pc, #336]	; (8004e00 <VL53L0X_calc_dmax+0x230>)
 8004cb0:	663b      	str	r3, [r7, #96]	; 0x60
 8004cb2:	e015      	b.n	8004ce0 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8004cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb6:	085a      	lsrs	r2, r3, #1
 8004cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cba:	441a      	add	r2, r3
 8004cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8004cc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cc8:	fb02 f303 	mul.w	r3, r2, r3
 8004ccc:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8004cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004cd4:	0c1b      	lsrs	r3, r3, #16
 8004cd6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8004cd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cda:	fb03 f303 	mul.w	r3, r3, r3
 8004cde:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8004ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce2:	039b      	lsls	r3, r3, #14
 8004ce4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004ce8:	4a46      	ldr	r2, [pc, #280]	; (8004e04 <VL53L0X_calc_dmax+0x234>)
 8004cea:	fba2 2303 	umull	r2, r3, r2, r3
 8004cee:	099b      	lsrs	r3, r3, #6
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	fb03 f303 	mul.w	r3, r3, r3
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8004cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cfc:	fb03 f303 	mul.w	r3, r3, r3
 8004d00:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	3308      	adds	r3, #8
 8004d06:	091b      	lsrs	r3, r3, #4
 8004d08:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8004d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8004d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d14:	4613      	mov	r3, r2
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	4413      	add	r3, r2
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004d24:	0b9b      	lsrs	r3, r3, #14
 8004d26:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8004d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d2c:	4413      	add	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8004d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d32:	085b      	lsrs	r3, r3, #1
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	4413      	add	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d42:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	039b      	lsls	r3, r3, #14
 8004d48:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4413      	add	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d62:	fb02 f303 	mul.w	r3, r2, r3
 8004d66:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004d6e:	4a25      	ldr	r2, [pc, #148]	; (8004e04 <VL53L0X_calc_dmax+0x234>)
 8004d70:	fba2 2303 	umull	r2, r3, r2, r3
 8004d74:	099b      	lsrs	r3, r3, #6
 8004d76:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004d84:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <VL53L0X_calc_dmax+0x234>)
 8004d86:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8a:	099b      	lsrs	r3, r3, #6
 8004d8c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8004d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d90:	3380      	adds	r3, #128	; 0x80
 8004d92:	0a1b      	lsrs	r3, r3, #8
 8004d94:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d008      	beq.n	8004dae <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	085a      	lsrs	r2, r3, #1
 8004da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da2:	441a      	add	r2, r3
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004daa:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dac:	e001      	b.n	8004db2 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8004db2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004db4:	f7fe fc42 	bl	800363c <VL53L0X_isqrt>
 8004db8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	085a      	lsrs	r2, r3, #1
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc6:	441a      	add	r2, r3
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dd0:	e001      	b.n	8004dd6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8004dd6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004dd8:	f7fe fc30 	bl	800363c <VL53L0X_isqrt>
 8004ddc:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8004dde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d902      	bls.n	8004df2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8004dec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004df0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8004df2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3768      	adds	r7, #104	; 0x68
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	fff00000 	.word	0xfff00000
 8004e04:	10624dd3 	.word	0x10624dd3

08004e08 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b0b4      	sub	sp, #208	; 0xd0
 8004e0c:	af04      	add	r7, sp, #16
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8004e16:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8004e1e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8004e22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8004e26:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8004e2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8004e2e:	f241 235c 	movw	r3, #4700	; 0x125c
 8004e32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8004e36:	4b9e      	ldr	r3, [pc, #632]	; (80050b0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8004e38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8004e3c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004e40:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8004e42:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8004e46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8004e50:	4b98      	ldr	r3, [pc, #608]	; (80050b4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8004e52:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8004e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e58:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8004e5a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8004e5e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8004e60:	f240 6377 	movw	r3, #1655	; 0x677
 8004e64:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e7a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8004e7e:	0c1b      	lsrs	r3, r3, #16
 8004e80:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8004e88:	f107 0310 	add.w	r3, r7, #16
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	68b9      	ldr	r1, [r7, #8]
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f7ff fe78 	bl	8004b86 <VL53L0X_get_total_signal_rate>
 8004e96:	4603      	mov	r3, r0
 8004e98:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8004e9c:	f107 0314 	add.w	r3, r7, #20
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f7ff fe3f 	bl	8004b28 <VL53L0X_get_total_xtalk_rate>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8004ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ebe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004ec2:	0c1b      	lsrs	r3, r3, #16
 8004ec4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ecc:	fb02 f303 	mul.w	r3, r2, r3
 8004ed0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8004ed4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d902      	bls.n	8004ee4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8004ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8004ee4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d168      	bne.n	8004fbe <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004ef2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004efc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8004f00:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004f04:	461a      	mov	r2, r3
 8004f06:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f7ff f93a 	bl	8004184 <VL53L0X_calc_timeout_mclks>
 8004f10:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8004f22:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8004f26:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff f927 	bl	8004184 <VL53L0X_calc_timeout_mclks>
 8004f36:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8004f3e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d102      	bne.n	8004f4c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8004f46:	2302      	movs	r3, #2
 8004f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8004f4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f50:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8004f52:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004f56:	fb02 f303 	mul.w	r3, r2, r3
 8004f5a:	02db      	lsls	r3, r3, #11
 8004f5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8004f60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f64:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004f68:	4a53      	ldr	r2, [pc, #332]	; (80050b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8004f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6e:	099b      	lsrs	r3, r3, #6
 8004f70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8004f74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f7a:	fb02 f303 	mul.w	r3, r2, r3
 8004f7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8004f82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f86:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004f8a:	4a4b      	ldr	r2, [pc, #300]	; (80050b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8004f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f90:	099b      	lsrs	r3, r3, #6
 8004f92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	3380      	adds	r3, #128	; 0x80
 8004f9a:	0a1b      	lsrs	r3, r3, #8
 8004f9c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004fa4:	fb02 f303 	mul.w	r3, r2, r3
 8004fa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8004fac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004fb0:	3380      	adds	r3, #128	; 0x80
 8004fb2:	0a1b      	lsrs	r3, r3, #8
 8004fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8004fbe:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8004fc6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8004fca:	e15e      	b.n	800528a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8004fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10c      	bne.n	8004fec <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fd8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fe0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	e14c      	b.n	8005286 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8004fec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d102      	bne.n	8004ffa <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8004ffa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ffe:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8005000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005002:	041a      	lsls	r2, r3, #16
 8005004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005006:	fbb2 f3f3 	udiv	r3, r2, r3
 800500a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800500e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005012:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005014:	429a      	cmp	r2, r3
 8005016:	d902      	bls.n	800501e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8005018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800501a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800501e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005022:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005026:	fb02 f303 	mul.w	r3, r2, r3
 800502a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800502e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005032:	4613      	mov	r3, r2
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	4413      	add	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4618      	mov	r0, r3
 800503c:	f7fe fafe 	bl	800363c <VL53L0X_isqrt>
 8005040:	4603      	mov	r3, r0
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	891b      	ldrh	r3, [r3, #8]
 800504a:	461a      	mov	r2, r3
 800504c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800504e:	fb02 f303 	mul.w	r3, r2, r3
 8005052:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005056:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8005058:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800505c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800505e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8005060:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005064:	4a14      	ldr	r2, [pc, #80]	; (80050b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005066:	fba2 2303 	umull	r2, r3, r2, r3
 800506a:	099b      	lsrs	r3, r3, #6
 800506c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800506e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005070:	041b      	lsls	r3, r3, #16
 8005072:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005076:	4a10      	ldr	r2, [pc, #64]	; (80050b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005078:	fba2 2303 	umull	r2, r3, r2, r3
 800507c:	099b      	lsrs	r3, r3, #6
 800507e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8005080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005082:	021b      	lsls	r3, r3, #8
 8005084:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8005086:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	fbb2 f3f3 	udiv	r3, r2, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	bfb8      	it	lt
 8005092:	425b      	neglt	r3, r3
 8005094:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8005096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005098:	021b      	lsls	r3, r3, #8
 800509a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	7e1b      	ldrb	r3, [r3, #24]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00b      	beq.n	80050bc <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 80050a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050ac:	e033      	b.n	8005116 <VL53L0X_calc_sigma_estimate+0x30e>
 80050ae:	bf00      	nop
 80050b0:	028f87ae 	.word	0x028f87ae
 80050b4:	0006999a 	.word	0x0006999a
 80050b8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80050bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80050ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050cc:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 80050d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050d4:	fb02 f303 	mul.w	r3, r2, r3
 80050d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 80050dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80050e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050e2:	4413      	add	r3, r2
 80050e4:	0c1b      	lsrs	r3, r3, #16
 80050e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 80050ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050ee:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80050f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 80050f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050fa:	085b      	lsrs	r3, r3, #1
 80050fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8005100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005104:	fb03 f303 	mul.w	r3, r3, r3
 8005108:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800510c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005110:	0b9b      	lsrs	r3, r3, #14
 8005112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8005116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800511a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800511c:	fb02 f303 	mul.w	r3, r2, r3
 8005120:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512e:	fb03 f303 	mul.w	r3, r3, r3
 8005132:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8005134:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005138:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800513a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005140:	0c1b      	lsrs	r3, r3, #16
 8005142:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8005144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005146:	fb03 f303 	mul.w	r3, r3, r3
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800514c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005150:	4413      	add	r3, r2
 8005152:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8005154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005156:	f7fe fa71 	bl	800363c <VL53L0X_isqrt>
 800515a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	041b      	lsls	r3, r3, #16
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	3332      	adds	r3, #50	; 0x32
 8005166:	4a4b      	ldr	r2, [pc, #300]	; (8005294 <VL53L0X_calc_sigma_estimate+0x48c>)
 8005168:	fba2 2303 	umull	r2, r3, r2, r3
 800516c:	095a      	lsrs	r2, r3, #5
 800516e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005170:	fbb2 f3f3 	udiv	r3, r2, r3
 8005174:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8005178:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800517c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8005180:	fb02 f303 	mul.w	r3, r2, r3
 8005184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8005188:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800518c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005190:	3308      	adds	r3, #8
 8005192:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8005196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800519a:	4a3f      	ldr	r2, [pc, #252]	; (8005298 <VL53L0X_calc_sigma_estimate+0x490>)
 800519c:	fba2 2303 	umull	r2, r3, r2, r3
 80051a0:	0b5b      	lsrs	r3, r3, #13
 80051a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80051a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d902      	bls.n	80051b6 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80051b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80051b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80051be:	4413      	add	r3, r2
 80051c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80051c4:	4a35      	ldr	r2, [pc, #212]	; (800529c <VL53L0X_calc_sigma_estimate+0x494>)
 80051c6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ca:	099b      	lsrs	r3, r3, #6
 80051cc:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80051d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051d6:	441a      	add	r2, r3
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	fbb2 f3f3 	udiv	r3, r2, r3
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fe fa2c 	bl	800363c <VL53L0X_isqrt>
 80051e4:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	021b      	lsls	r3, r3, #8
 80051ea:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80051f2:	4a2a      	ldr	r2, [pc, #168]	; (800529c <VL53L0X_calc_sigma_estimate+0x494>)
 80051f4:	fba2 2303 	umull	r2, r3, r2, r3
 80051f8:	099b      	lsrs	r3, r3, #6
 80051fa:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 80051fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005200:	fb03 f303 	mul.w	r3, r3, r3
 8005204:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	fb03 f303 	mul.w	r3, r3, r3
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800520e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005212:	4413      	add	r3, r2
 8005214:	4618      	mov	r0, r3
 8005216:	f7fe fa11 	bl	800363c <VL53L0X_isqrt>
 800521a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005222:	fb02 f303 	mul.w	r3, r2, r3
 8005226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800522a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800522c:	2b00      	cmp	r3, #0
 800522e:	d009      	beq.n	8005244 <VL53L0X_calc_sigma_estimate+0x43c>
 8005230:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <VL53L0X_calc_sigma_estimate+0x43c>
 8005238:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800523c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005240:	429a      	cmp	r2, r3
 8005242:	d903      	bls.n	800524c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8005244:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005248:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005252:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800525e:	6939      	ldr	r1, [r7, #16]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	9303      	str	r3, [sp, #12]
 8005264:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005268:	9302      	str	r3, [sp, #8]
 800526a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800526e:	9301      	str	r3, [sp, #4]
 8005270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005278:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f7ff fca8 	bl	8004bd0 <VL53L0X_calc_dmax>
 8005280:	4603      	mov	r3, r0
 8005282:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005286:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800528a:	4618      	mov	r0, r3
 800528c:	37c0      	adds	r7, #192	; 0xc0
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	51eb851f 	.word	0x51eb851f
 8005298:	d1b71759 	.word	0xd1b71759
 800529c:	10624dd3 	.word	0x10624dd3

080052a0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b090      	sub	sp, #64	; 0x40
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	461a      	mov	r2, r3
 80052ac:	460b      	mov	r3, r1
 80052ae:	72fb      	strb	r3, [r7, #11]
 80052b0:	4613      	mov	r3, r2
 80052b2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80052d8:	2300      	movs	r3, #0
 80052da:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 80052e4:	2300      	movs	r3, #0
 80052e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 80052f2:	7afb      	ldrb	r3, [r7, #11]
 80052f4:	10db      	asrs	r3, r3, #3
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f003 030f 	and.w	r3, r3, #15
 80052fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8005300:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005304:	2b00      	cmp	r3, #0
 8005306:	d017      	beq.n	8005338 <VL53L0X_get_pal_range_status+0x98>
 8005308:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800530c:	2b05      	cmp	r3, #5
 800530e:	d013      	beq.n	8005338 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8005310:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005314:	2b07      	cmp	r3, #7
 8005316:	d00f      	beq.n	8005338 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8005318:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800531c:	2b0c      	cmp	r3, #12
 800531e:	d00b      	beq.n	8005338 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8005320:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005324:	2b0d      	cmp	r3, #13
 8005326:	d007      	beq.n	8005338 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8005328:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800532c:	2b0e      	cmp	r3, #14
 800532e:	d003      	beq.n	8005338 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8005330:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005334:	2b0f      	cmp	r3, #15
 8005336:	d103      	bne.n	8005340 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8005338:	2301      	movs	r3, #1
 800533a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800533e:	e002      	b.n	8005346 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8005346:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800534a:	2b00      	cmp	r3, #0
 800534c:	d109      	bne.n	8005362 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800534e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005352:	461a      	mov	r2, r3
 8005354:	2100      	movs	r1, #0
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f7fc fc4c 	bl	8001bf4 <VL53L0X_GetLimitCheckEnable>
 800535c:	4603      	mov	r3, r0
 800535e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8005362:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005366:	2b00      	cmp	r3, #0
 8005368:	d02e      	beq.n	80053c8 <VL53L0X_get_pal_range_status+0x128>
 800536a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800536e:	2b00      	cmp	r3, #0
 8005370:	d12a      	bne.n	80053c8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8005372:	f107 0310 	add.w	r3, r7, #16
 8005376:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800537a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f7ff fd43 	bl	8004e08 <VL53L0X_calc_sigma_estimate>
 8005382:	4603      	mov	r3, r0
 8005384:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8005388:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800538c:	2b00      	cmp	r3, #0
 800538e:	d103      	bne.n	8005398 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	b29a      	uxth	r2, r3
 8005394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005396:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8005398:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800539c:	2b00      	cmp	r3, #0
 800539e:	d113      	bne.n	80053c8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80053a0:	f107 0320 	add.w	r3, r7, #32
 80053a4:	461a      	mov	r2, r3
 80053a6:	2100      	movs	r1, #0
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7fc fca9 	bl	8001d00 <VL53L0X_GetLimitCheckValue>
 80053ae:	4603      	mov	r3, r0
 80053b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d006      	beq.n	80053c8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 80053ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053bc:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80053be:	429a      	cmp	r2, r3
 80053c0:	d902      	bls.n	80053c8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80053c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d109      	bne.n	80053e4 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80053d0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 80053d4:	461a      	mov	r2, r3
 80053d6:	2102      	movs	r1, #2
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f7fc fc0b 	bl	8001bf4 <VL53L0X_GetLimitCheckEnable>
 80053de:	4603      	mov	r3, r0
 80053e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80053e4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d044      	beq.n	8005476 <VL53L0X_get_pal_range_status+0x1d6>
 80053ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d140      	bne.n	8005476 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80053f4:	f107 031c 	add.w	r3, r7, #28
 80053f8:	461a      	mov	r2, r3
 80053fa:	2102      	movs	r1, #2
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f7fc fc7f 	bl	8001d00 <VL53L0X_GetLimitCheckValue>
 8005402:	4603      	mov	r3, r0
 8005404:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8005408:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800540c:	2b00      	cmp	r3, #0
 800540e:	d107      	bne.n	8005420 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005410:	2201      	movs	r2, #1
 8005412:	21ff      	movs	r1, #255	; 0xff
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f9bb 	bl	8005790 <VL53L0X_WrByte>
 800541a:	4603      	mov	r3, r0
 800541c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8005420:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005424:	2b00      	cmp	r3, #0
 8005426:	d109      	bne.n	800543c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8005428:	f107 0316 	add.w	r3, r7, #22
 800542c:	461a      	mov	r2, r3
 800542e:	21b6      	movs	r1, #182	; 0xb6
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f000 fa59 	bl	80058e8 <VL53L0X_RdWord>
 8005436:	4603      	mov	r3, r0
 8005438:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800543c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005440:	2b00      	cmp	r3, #0
 8005442:	d107      	bne.n	8005454 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005444:	2200      	movs	r2, #0
 8005446:	21ff      	movs	r1, #255	; 0xff
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 f9a1 	bl	8005790 <VL53L0X_WrByte>
 800544e:	4603      	mov	r3, r0
 8005450:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8005454:	8afb      	ldrh	r3, [r7, #22]
 8005456:	025b      	lsls	r3, r3, #9
 8005458:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800545e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d006      	beq.n	8005476 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8005468:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800546a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800546c:	429a      	cmp	r2, r3
 800546e:	d902      	bls.n	8005476 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8005470:	2301      	movs	r3, #1
 8005472:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8005476:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800547a:	2b00      	cmp	r3, #0
 800547c:	d109      	bne.n	8005492 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800547e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005482:	461a      	mov	r2, r3
 8005484:	2103      	movs	r1, #3
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f7fc fbb4 	bl	8001bf4 <VL53L0X_GetLimitCheckEnable>
 800548c:	4603      	mov	r3, r0
 800548e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8005492:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005496:	2b00      	cmp	r3, #0
 8005498:	d023      	beq.n	80054e2 <VL53L0X_get_pal_range_status+0x242>
 800549a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d11f      	bne.n	80054e2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80054a2:	893b      	ldrh	r3, [r7, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	637b      	str	r3, [r7, #52]	; 0x34
 80054ac:	e005      	b.n	80054ba <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	021a      	lsls	r2, r3, #8
 80054b2:	893b      	ldrh	r3, [r7, #8]
 80054b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80054ba:	f107 0318 	add.w	r3, r7, #24
 80054be:	461a      	mov	r2, r3
 80054c0:	2103      	movs	r1, #3
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f7fc fc1c 	bl	8001d00 <VL53L0X_GetLimitCheckValue>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d006      	beq.n	80054e2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 80054d4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 80054d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054d8:	429a      	cmp	r2, r3
 80054da:	d202      	bcs.n	80054e2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 80054dc:	2301      	movs	r3, #1
 80054de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80054e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d14a      	bne.n	8005580 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 80054ea:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d103      	bne.n	80054fa <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 80054f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f4:	22ff      	movs	r2, #255	; 0xff
 80054f6:	701a      	strb	r2, [r3, #0]
 80054f8:	e042      	b.n	8005580 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 80054fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d007      	beq.n	8005512 <VL53L0X_get_pal_range_status+0x272>
 8005502:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005506:	2b02      	cmp	r3, #2
 8005508:	d003      	beq.n	8005512 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800550a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800550e:	2b03      	cmp	r3, #3
 8005510:	d103      	bne.n	800551a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8005512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005514:	2205      	movs	r2, #5
 8005516:	701a      	strb	r2, [r3, #0]
 8005518:	e032      	b.n	8005580 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800551a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800551e:	2b06      	cmp	r3, #6
 8005520:	d003      	beq.n	800552a <VL53L0X_get_pal_range_status+0x28a>
 8005522:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005526:	2b09      	cmp	r3, #9
 8005528:	d103      	bne.n	8005532 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800552a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800552c:	2204      	movs	r2, #4
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	e026      	b.n	8005580 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8005532:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005536:	2b08      	cmp	r3, #8
 8005538:	d007      	beq.n	800554a <VL53L0X_get_pal_range_status+0x2aa>
 800553a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800553e:	2b0a      	cmp	r3, #10
 8005540:	d003      	beq.n	800554a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8005542:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005546:	2b01      	cmp	r3, #1
 8005548:	d103      	bne.n	8005552 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800554a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554c:	2203      	movs	r2, #3
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	e016      	b.n	8005580 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8005552:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005556:	2b04      	cmp	r3, #4
 8005558:	d003      	beq.n	8005562 <VL53L0X_get_pal_range_status+0x2c2>
 800555a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800555e:	2b01      	cmp	r3, #1
 8005560:	d103      	bne.n	800556a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8005562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005564:	2202      	movs	r2, #2
 8005566:	701a      	strb	r2, [r3, #0]
 8005568:	e00a      	b.n	8005580 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800556a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800556e:	2b01      	cmp	r3, #1
 8005570:	d103      	bne.n	800557a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8005572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005574:	2201      	movs	r2, #1
 8005576:	701a      	strb	r2, [r3, #0]
 8005578:	e002      	b.n	8005580 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800557a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557c:	2200      	movs	r2, #0
 800557e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8005580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d102      	bne.n	800558e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8005588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800558a:	2200      	movs	r2, #0
 800558c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800558e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8005592:	461a      	mov	r2, r3
 8005594:	2101      	movs	r1, #1
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f7fc fb2c 	bl	8001bf4 <VL53L0X_GetLimitCheckEnable>
 800559c:	4603      	mov	r3, r0
 800559e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80055a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d14f      	bne.n	800564a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80055aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <VL53L0X_get_pal_range_status+0x31a>
 80055b2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d103      	bne.n	80055c2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80055ba:	2301      	movs	r3, #1
 80055bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055c0:	e002      	b.n	80055c8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80055ce:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80055d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d003      	beq.n	80055e2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80055da:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d103      	bne.n	80055ea <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055e8:	e002      	b.n	80055f0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80055f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 80055fa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <VL53L0X_get_pal_range_status+0x36a>
 8005602:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005606:	2b01      	cmp	r3, #1
 8005608:	d103      	bne.n	8005612 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800560a:	2301      	movs	r3, #1
 800560c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005610:	e002      	b.n	8005618 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800561e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8005622:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <VL53L0X_get_pal_range_status+0x392>
 800562a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800562e:	2b01      	cmp	r3, #1
 8005630:	d103      	bne.n	800563a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8005632:	2301      	movs	r3, #1
 8005634:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005638:	e002      	b.n	8005640 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800563a:	2300      	movs	r3, #0
 800563c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005646:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800564a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800564e:	4618      	mov	r0, r3
 8005650:	3740      	adds	r7, #64	; 0x40
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8005656:	b580      	push	{r7, lr}
 8005658:	b088      	sub	sp, #32
 800565a:	af02      	add	r7, sp, #8
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	330a      	adds	r3, #10
 8005666:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8005674:	b299      	uxth	r1, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	b29a      	uxth	r2, r3
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	4613      	mov	r3, r2
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	f001 fa13 	bl	8006aac <HAL_I2C_Master_Transmit>
 8005686:	4603      	mov	r3, r0
 8005688:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800568a:	693b      	ldr	r3, [r7, #16]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af02      	add	r7, sp, #8
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	330a      	adds	r3, #10
 80056a4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80056b2:	f043 0301 	orr.w	r3, r3, #1
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	b299      	uxth	r1, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	b29a      	uxth	r2, r3
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	4613      	mov	r3, r2
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	f001 faef 	bl	8006ca8 <HAL_I2C_Master_Receive>
 80056ca:	4603      	mov	r3, r0
 80056cc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80056ce:	693b      	ldr	r3, [r7, #16]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	607a      	str	r2, [r7, #4]
 80056e2:	603b      	str	r3, [r7, #0]
 80056e4:	460b      	mov	r3, r1
 80056e6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056e8:	2300      	movs	r3, #0
 80056ea:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b3f      	cmp	r3, #63	; 0x3f
 80056f0:	d902      	bls.n	80056f8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 80056f2:	f06f 0303 	mvn.w	r3, #3
 80056f6:	e016      	b.n	8005726 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 80056f8:	4a0d      	ldr	r2, [pc, #52]	; (8005730 <VL53L0X_WriteMulti+0x58>)
 80056fa:	7afb      	ldrb	r3, [r7, #11]
 80056fc:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	480c      	ldr	r0, [pc, #48]	; (8005734 <VL53L0X_WriteMulti+0x5c>)
 8005704:	f002 fed8 	bl	80084b8 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	3301      	adds	r3, #1
 800570c:	461a      	mov	r2, r3
 800570e:	4908      	ldr	r1, [pc, #32]	; (8005730 <VL53L0X_WriteMulti+0x58>)
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7ff ffa0 	bl	8005656 <_I2CWrite>
 8005716:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800571e:	23ec      	movs	r3, #236	; 0xec
 8005720:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8005722:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	2000067c 	.word	0x2000067c
 8005734:	2000067d 	.word	0x2000067d

08005738 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	607a      	str	r2, [r7, #4]
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	460b      	mov	r3, r1
 8005746:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005748:	2300      	movs	r3, #0
 800574a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800574c:	f107 030b 	add.w	r3, r7, #11
 8005750:	2201      	movs	r2, #1
 8005752:	4619      	mov	r1, r3
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff ff7e 	bl	8005656 <_I2CWrite>
 800575a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005762:	23ec      	movs	r3, #236	; 0xec
 8005764:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005766:	e00c      	b.n	8005782 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f7ff ff91 	bl	8005694 <_I2CRead>
 8005772:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800577a:	23ec      	movs	r3, #236	; 0xec
 800577c:	75fb      	strb	r3, [r7, #23]
 800577e:	e000      	b.n	8005782 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8005780:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8005782:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	70fb      	strb	r3, [r7, #3]
 800579c:	4613      	mov	r3, r2
 800579e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057a0:	2300      	movs	r3, #0
 80057a2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80057a4:	4a0b      	ldr	r2, [pc, #44]	; (80057d4 <VL53L0X_WrByte+0x44>)
 80057a6:	78fb      	ldrb	r3, [r7, #3]
 80057a8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 80057aa:	4a0a      	ldr	r2, [pc, #40]	; (80057d4 <VL53L0X_WrByte+0x44>)
 80057ac:	78bb      	ldrb	r3, [r7, #2]
 80057ae:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80057b0:	2202      	movs	r2, #2
 80057b2:	4908      	ldr	r1, [pc, #32]	; (80057d4 <VL53L0X_WrByte+0x44>)
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7ff ff4e 	bl	8005656 <_I2CWrite>
 80057ba:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80057c2:	23ec      	movs	r3, #236	; 0xec
 80057c4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80057c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	2000067c 	.word	0x2000067c

080057d8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	70fb      	strb	r3, [r7, #3]
 80057e4:	4613      	mov	r3, r2
 80057e6:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80057ec:	4a0e      	ldr	r2, [pc, #56]	; (8005828 <VL53L0X_WrWord+0x50>)
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 80057f2:	883b      	ldrh	r3, [r7, #0]
 80057f4:	0a1b      	lsrs	r3, r3, #8
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <VL53L0X_WrWord+0x50>)
 80057fc:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 80057fe:	883b      	ldrh	r3, [r7, #0]
 8005800:	b2da      	uxtb	r2, r3
 8005802:	4b09      	ldr	r3, [pc, #36]	; (8005828 <VL53L0X_WrWord+0x50>)
 8005804:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8005806:	2203      	movs	r2, #3
 8005808:	4907      	ldr	r1, [pc, #28]	; (8005828 <VL53L0X_WrWord+0x50>)
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff ff23 	bl	8005656 <_I2CWrite>
 8005810:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005818:	23ec      	movs	r3, #236	; 0xec
 800581a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800581c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	2000067c 	.word	0x2000067c

0800582c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	4608      	mov	r0, r1
 8005836:	4611      	mov	r1, r2
 8005838:	461a      	mov	r2, r3
 800583a:	4603      	mov	r3, r0
 800583c:	70fb      	strb	r3, [r7, #3]
 800583e:	460b      	mov	r3, r1
 8005840:	70bb      	strb	r3, [r7, #2]
 8005842:	4613      	mov	r3, r2
 8005844:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005846:	2300      	movs	r3, #0
 8005848:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800584a:	f107 020e 	add.w	r2, r7, #14
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	4619      	mov	r1, r3
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f81e 	bl	8005894 <VL53L0X_RdByte>
 8005858:	4603      	mov	r3, r0
 800585a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800585c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d110      	bne.n	8005886 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8005864:	7bba      	ldrb	r2, [r7, #14]
 8005866:	78bb      	ldrb	r3, [r7, #2]
 8005868:	4013      	ands	r3, r2
 800586a:	b2da      	uxtb	r2, r3
 800586c:	787b      	ldrb	r3, [r7, #1]
 800586e:	4313      	orrs	r3, r2
 8005870:	b2db      	uxtb	r3, r3
 8005872:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8005874:	7bba      	ldrb	r2, [r7, #14]
 8005876:	78fb      	ldrb	r3, [r7, #3]
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff ff88 	bl	8005790 <VL53L0X_WrByte>
 8005880:	4603      	mov	r3, r0
 8005882:	73fb      	strb	r3, [r7, #15]
 8005884:	e000      	b.n	8005888 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8005886:	bf00      	nop
done:
    return Status;
 8005888:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	460b      	mov	r3, r1
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058a2:	2300      	movs	r3, #0
 80058a4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80058a6:	f107 030b 	add.w	r3, r7, #11
 80058aa:	2201      	movs	r2, #1
 80058ac:	4619      	mov	r1, r3
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f7ff fed1 	bl	8005656 <_I2CWrite>
 80058b4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80058bc:	23ec      	movs	r3, #236	; 0xec
 80058be:	75fb      	strb	r3, [r7, #23]
        goto done;
 80058c0:	e00c      	b.n	80058dc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 80058c2:	2201      	movs	r2, #1
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f7ff fee4 	bl	8005694 <_I2CRead>
 80058cc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80058d4:	23ec      	movs	r3, #236	; 0xec
 80058d6:	75fb      	strb	r3, [r7, #23]
 80058d8:	e000      	b.n	80058dc <VL53L0X_RdByte+0x48>
    }
done:
 80058da:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80058dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	460b      	mov	r3, r1
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058f6:	2300      	movs	r3, #0
 80058f8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80058fa:	f107 030b 	add.w	r3, r7, #11
 80058fe:	2201      	movs	r2, #1
 8005900:	4619      	mov	r1, r3
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f7ff fea7 	bl	8005656 <_I2CWrite>
 8005908:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005910:	23ec      	movs	r3, #236	; 0xec
 8005912:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005914:	e017      	b.n	8005946 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8005916:	2202      	movs	r2, #2
 8005918:	490e      	ldr	r1, [pc, #56]	; (8005954 <VL53L0X_RdWord+0x6c>)
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f7ff feba 	bl	8005694 <_I2CRead>
 8005920:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005928:	23ec      	movs	r3, #236	; 0xec
 800592a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800592c:	e00b      	b.n	8005946 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800592e:	4b09      	ldr	r3, [pc, #36]	; (8005954 <VL53L0X_RdWord+0x6c>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	b29b      	uxth	r3, r3
 8005934:	021b      	lsls	r3, r3, #8
 8005936:	b29a      	uxth	r2, r3
 8005938:	4b06      	ldr	r3, [pc, #24]	; (8005954 <VL53L0X_RdWord+0x6c>)
 800593a:	785b      	ldrb	r3, [r3, #1]
 800593c:	b29b      	uxth	r3, r3
 800593e:	4413      	add	r3, r2
 8005940:	b29a      	uxth	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8005946:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	2000067c 	.word	0x2000067c

08005958 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	460b      	mov	r3, r1
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005966:	2300      	movs	r3, #0
 8005968:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800596a:	f107 030b 	add.w	r3, r7, #11
 800596e:	2201      	movs	r2, #1
 8005970:	4619      	mov	r1, r3
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f7ff fe6f 	bl	8005656 <_I2CWrite>
 8005978:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005980:	23ec      	movs	r3, #236	; 0xec
 8005982:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005984:	e01b      	b.n	80059be <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8005986:	2204      	movs	r2, #4
 8005988:	4910      	ldr	r1, [pc, #64]	; (80059cc <VL53L0X_RdDWord+0x74>)
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7ff fe82 	bl	8005694 <_I2CRead>
 8005990:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005998:	23ec      	movs	r3, #236	; 0xec
 800599a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800599c:	e00f      	b.n	80059be <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800599e:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <VL53L0X_RdDWord+0x74>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	061a      	lsls	r2, r3, #24
 80059a4:	4b09      	ldr	r3, [pc, #36]	; (80059cc <VL53L0X_RdDWord+0x74>)
 80059a6:	785b      	ldrb	r3, [r3, #1]
 80059a8:	041b      	lsls	r3, r3, #16
 80059aa:	441a      	add	r2, r3
 80059ac:	4b07      	ldr	r3, [pc, #28]	; (80059cc <VL53L0X_RdDWord+0x74>)
 80059ae:	789b      	ldrb	r3, [r3, #2]
 80059b0:	021b      	lsls	r3, r3, #8
 80059b2:	4413      	add	r3, r2
 80059b4:	4a05      	ldr	r2, [pc, #20]	; (80059cc <VL53L0X_RdDWord+0x74>)
 80059b6:	78d2      	ldrb	r2, [r2, #3]
 80059b8:	441a      	add	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 80059be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	2000067c 	.word	0x2000067c

080059d0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80059d8:	2300      	movs	r3, #0
 80059da:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80059dc:	2002      	movs	r0, #2
 80059de:	f000 fc7b 	bl	80062d8 <HAL_Delay>
    return status;
 80059e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <initSensor>:
    }
    IR_device_errors[count]=Status; 
    return IR_IfErrorsOccured();    
}

VL53L0X_Error initSensor(VL53L0X_Dev_t *device) {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059f8:	2300      	movs	r3, #0
 80059fa:	73fb      	strb	r3, [r7, #15]
	static uint32_t refSpadCount = 0;       //для процесса конфигурации датчиков
	static uint8_t isApertureSpads = 0;     //для процесса конфигурации датчиков
	static uint8_t VhvSettings = 0;         //для процесса конфигурации датчиков
	static uint8_t PhaseCal = 0;            //для процесса конфигурации датчиков

	device->I2cHandle = &hi2c1;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a4e      	ldr	r2, [pc, #312]	; (8005b38 <initSensor+0x148>)
 8005a00:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	device->I2cDevAddr = 0x52;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2252      	movs	r2, #82	; 0x52
 8005a08:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	device->Present = 0;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	device->Id = 0;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

	if (Status == VL53L0X_ERROR_NONE) {
 8005a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d109      	bne.n	8005a38 <initSensor+0x48>
		Status = VL53L0X_SetDeviceAddress(device, 0x51);
 8005a24:	2151      	movs	r1, #81	; 0x51
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fb fa4d 	bl	8000ec6 <VL53L0X_SetDeviceAddress>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	73fb      	strb	r3, [r7, #15]
		device->I2cDevAddr = 0x51;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2251      	movs	r2, #81	; 0x51
 8005a34:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d104      	bne.n	8005a4a <initSensor+0x5a>
		Status = VL53L0X_DataInit(device);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7fb fa59 	bl	8000ef8 <VL53L0X_DataInit>
 8005a46:	4603      	mov	r3, r0
 8005a48:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d104      	bne.n	8005a5c <initSensor+0x6c>
		Status = VL53L0X_StaticInit(device);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fb fbb4 	bl	80011c0 <VL53L0X_StaticInit>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d106      	bne.n	8005a72 <initSensor+0x82>
		Status = VL53L0X_PerformRefSpadManagement(device, &refSpadCount,
 8005a64:	4a35      	ldr	r2, [pc, #212]	; (8005b3c <initSensor+0x14c>)
 8005a66:	4936      	ldr	r1, [pc, #216]	; (8005b40 <initSensor+0x150>)
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7fc fee2 	bl	8002832 <VL53L0X_PerformRefSpadManagement>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	73fb      	strb	r3, [r7, #15]
				&isApertureSpads);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <initSensor+0x98>
		Status = VL53L0X_PerformRefCalibration(device, &VhvSettings, &PhaseCal);
 8005a7a:	4a32      	ldr	r2, [pc, #200]	; (8005b44 <initSensor+0x154>)
 8005a7c:	4932      	ldr	r1, [pc, #200]	; (8005b48 <initSensor+0x158>)
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fc fa32 	bl	8001ee8 <VL53L0X_PerformRefCalibration>
 8005a84:	4603      	mov	r3, r0
 8005a86:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d109      	bne.n	8005aa4 <initSensor+0xb4>
		Status = VL53L0X_SetReferenceSpads(device, refSpadCount,
 8005a90:	4b2b      	ldr	r3, [pc, #172]	; (8005b40 <initSensor+0x150>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a29      	ldr	r2, [pc, #164]	; (8005b3c <initSensor+0x14c>)
 8005a96:	7812      	ldrb	r2, [r2, #0]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fc feb2 	bl	8002804 <VL53L0X_SetReferenceSpads>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	73fb      	strb	r3, [r7, #15]
				isApertureSpads);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d109      	bne.n	8005ac0 <initSensor+0xd0>
		Status = VL53L0X_SetRefCalibration(device, VhvSettings, PhaseCal);
 8005aac:	4b26      	ldr	r3, [pc, #152]	; (8005b48 <initSensor+0x158>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	4a24      	ldr	r2, [pc, #144]	; (8005b44 <initSensor+0x154>)
 8005ab2:	7812      	ldrb	r2, [r2, #0]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fb fff8 	bl	8001aac <VL53L0X_SetRefCalibration>
 8005abc:	4603      	mov	r3, r0
 8005abe:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d105      	bne.n	8005ad4 <initSensor+0xe4>
		Status = VL53L0X_SetDeviceMode(device,
 8005ac8:	2101      	movs	r1, #1
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fb fd8a 	bl	80015e4 <VL53L0X_SetDeviceMode>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d107      	bne.n	8005aec <initSensor+0xfc>
		Status = VL53L0X_SetLimitCheckValue(device,
 8005adc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fc f8aa 	bl	8001c3c <VL53L0X_SetLimitCheckValue>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	73fb      	strb	r3, [r7, #15]
		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t) (0.25 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d107      	bne.n	8005b04 <initSensor+0x114>
		Status = VL53L0X_SetLimitCheckValue(device,
 8005af4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005af8:	2100      	movs	r1, #0
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fc f89e 	bl	8001c3c <VL53L0X_SetLimitCheckValue>
 8005b00:	4603      	mov	r3, r0
 8005b02:	73fb      	strb	r3, [r7, #15]
		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t) (32 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d106      	bne.n	8005b1a <initSensor+0x12a>
		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(device, 20000);
 8005b0c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7fb fdc5 	bl	80016a0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8005b16:	4603      	mov	r3, r0
 8005b18:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d104      	bne.n	8005b2c <initSensor+0x13c>
		Status = VL53L0X_StartMeasurement(device);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fc fa5c 	bl	8001fe0 <VL53L0X_StartMeasurement>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	73fb      	strb	r3, [r7, #15]
	}

	return Status;
 8005b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	200006bc 	.word	0x200006bc
 8005b3c:	200004b8 	.word	0x200004b8
 8005b40:	200004b4 	.word	0x200004b4
 8005b44:	200004ba 	.word	0x200004ba
 8005b48:	200004b9 	.word	0x200004b9

08005b4c <app_main_init>:
static uint8_t data_ready;
static VL53L0X_RangingMeasurementData_t result;
static VL53L0X_Error Status;

//初始化函数
void app_main_init(void) {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
	initSensor(&device);
 8005b50:	4807      	ldr	r0, [pc, #28]	; (8005b70 <app_main_init+0x24>)
 8005b52:	f7ff ff4d 	bl	80059f0 <initSensor>
	Status = VL53L0X_GetMeasurementDataReady(&device, &data_ready);
 8005b56:	4907      	ldr	r1, [pc, #28]	; (8005b74 <app_main_init+0x28>)
 8005b58:	4805      	ldr	r0, [pc, #20]	; (8005b70 <app_main_init+0x24>)
 8005b5a:	f7fc fb03 	bl	8002164 <VL53L0X_GetMeasurementDataReady>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	461a      	mov	r2, r3
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <app_main_init+0x2c>)
 8005b64:	701a      	strb	r2, [r3, #0]
	printf("starting....\r\n");
 8005b66:	4805      	ldr	r0, [pc, #20]	; (8005b7c <app_main_init+0x30>)
 8005b68:	f003 f9ac 	bl	8008ec4 <puts>
}
 8005b6c:	bf00      	nop
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	200004bc 	.word	0x200004bc
 8005b74:	2000064c 	.word	0x2000064c
 8005b78:	2000066c 	.word	0x2000066c
 8005b7c:	0800afb0 	.word	0x0800afb0

08005b80 <app_main>:

//主程序函数
void app_main(void) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
	if (Status == VL53L0X_ERROR_NONE) {
 8005b84:	4b10      	ldr	r3, [pc, #64]	; (8005bc8 <app_main+0x48>)
 8005b86:	f993 3000 	ldrsb.w	r3, [r3]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d116      	bne.n	8005bbc <app_main+0x3c>
		Status = VL53L0X_GetRangingMeasurementData(&device, &result);
 8005b8e:	490f      	ldr	r1, [pc, #60]	; (8005bcc <app_main+0x4c>)
 8005b90:	480f      	ldr	r0, [pc, #60]	; (8005bd0 <app_main+0x50>)
 8005b92:	f7fc fb27 	bl	80021e4 <VL53L0X_GetRangingMeasurementData>
 8005b96:	4603      	mov	r3, r0
 8005b98:	461a      	mov	r2, r3
 8005b9a:	4b0b      	ldr	r3, [pc, #44]	; (8005bc8 <app_main+0x48>)
 8005b9c:	701a      	strb	r2, [r3, #0]
		printf("distance = %.2f cm\r\n", result.RangeMilliMeter*1.0/10);
 8005b9e:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <app_main+0x4c>)
 8005ba0:	891b      	ldrh	r3, [r3, #8]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fa fcbe 	bl	8000524 <__aeabi_i2d>
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	4b09      	ldr	r3, [pc, #36]	; (8005bd4 <app_main+0x54>)
 8005bae:	f7fa fe4d 	bl	800084c <__aeabi_ddiv>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4808      	ldr	r0, [pc, #32]	; (8005bd8 <app_main+0x58>)
 8005bb8:	f003 f8fe 	bl	8008db8 <iprintf>
	}

	HAL_Delay(1000);
 8005bbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bc0:	f000 fb8a 	bl	80062d8 <HAL_Delay>
}
 8005bc4:	bf00      	nop
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	2000066c 	.word	0x2000066c
 8005bcc:	20000650 	.word	0x20000650
 8005bd0:	200004bc 	.word	0x200004bc
 8005bd4:	40240000 	.word	0x40240000
 8005bd8:	0800afc0 	.word	0x0800afc0

08005bdc <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 8005be4:	bf00      	nop
 8005be6:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <__io_putchar+0x2c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0f9      	beq.n	8005be6 <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	4b04      	ldr	r3, [pc, #16]	; (8005c08 <__io_putchar+0x2c>)
 8005bf8:	605a      	str	r2, [r3, #4]

	//  while ((USART2->SR & 0X40) == 0) {
	//  }; //循环发送,直到发送完毕
	//  USART2->DR = (uint8_t) ch;

	return ch;
 8005bfa:	687b      	ldr	r3, [r7, #4]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40011000 	.word	0x40011000

08005c0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	4b17      	ldr	r3, [pc, #92]	; (8005c74 <MX_GPIO_Init+0x68>)
 8005c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1a:	4a16      	ldr	r2, [pc, #88]	; (8005c74 <MX_GPIO_Init+0x68>)
 8005c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c20:	6313      	str	r3, [r2, #48]	; 0x30
 8005c22:	4b14      	ldr	r3, [pc, #80]	; (8005c74 <MX_GPIO_Init+0x68>)
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60bb      	str	r3, [r7, #8]
 8005c32:	4b10      	ldr	r3, [pc, #64]	; (8005c74 <MX_GPIO_Init+0x68>)
 8005c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c36:	4a0f      	ldr	r2, [pc, #60]	; (8005c74 <MX_GPIO_Init+0x68>)
 8005c38:	f043 0301 	orr.w	r3, r3, #1
 8005c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <MX_GPIO_Init+0x68>)
 8005c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	60bb      	str	r3, [r7, #8]
 8005c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	607b      	str	r3, [r7, #4]
 8005c4e:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <MX_GPIO_Init+0x68>)
 8005c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c52:	4a08      	ldr	r2, [pc, #32]	; (8005c74 <MX_GPIO_Init+0x68>)
 8005c54:	f043 0302 	orr.w	r3, r3, #2
 8005c58:	6313      	str	r3, [r2, #48]	; 0x30
 8005c5a:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <MX_GPIO_Init+0x68>)
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	607b      	str	r3, [r7, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]

}
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	40023800 	.word	0x40023800

08005c78 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005c7c:	4b12      	ldr	r3, [pc, #72]	; (8005cc8 <MX_I2C1_Init+0x50>)
 8005c7e:	4a13      	ldr	r2, [pc, #76]	; (8005ccc <MX_I2C1_Init+0x54>)
 8005c80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005c82:	4b11      	ldr	r3, [pc, #68]	; (8005cc8 <MX_I2C1_Init+0x50>)
 8005c84:	4a12      	ldr	r2, [pc, #72]	; (8005cd0 <MX_I2C1_Init+0x58>)
 8005c86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005c88:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <MX_I2C1_Init+0x50>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005c8e:	4b0e      	ldr	r3, [pc, #56]	; (8005cc8 <MX_I2C1_Init+0x50>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c94:	4b0c      	ldr	r3, [pc, #48]	; (8005cc8 <MX_I2C1_Init+0x50>)
 8005c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <MX_I2C1_Init+0x50>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005ca2:	4b09      	ldr	r3, [pc, #36]	; (8005cc8 <MX_I2C1_Init+0x50>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005ca8:	4b07      	ldr	r3, [pc, #28]	; (8005cc8 <MX_I2C1_Init+0x50>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005cae:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <MX_I2C1_Init+0x50>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005cb4:	4804      	ldr	r0, [pc, #16]	; (8005cc8 <MX_I2C1_Init+0x50>)
 8005cb6:	f000 fdb5 	bl	8006824 <HAL_I2C_Init>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005cc0:	f000 f8cc 	bl	8005e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005cc4:	bf00      	nop
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	200006bc 	.word	0x200006bc
 8005ccc:	40005400 	.word	0x40005400
 8005cd0:	00061a80 	.word	0x00061a80

08005cd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08a      	sub	sp, #40	; 0x28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cdc:	f107 0314 	add.w	r3, r7, #20
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	605a      	str	r2, [r3, #4]
 8005ce6:	609a      	str	r2, [r3, #8]
 8005ce8:	60da      	str	r2, [r3, #12]
 8005cea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a19      	ldr	r2, [pc, #100]	; (8005d58 <HAL_I2C_MspInit+0x84>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d12b      	bne.n	8005d4e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	613b      	str	r3, [r7, #16]
 8005cfa:	4b18      	ldr	r3, [pc, #96]	; (8005d5c <HAL_I2C_MspInit+0x88>)
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	4a17      	ldr	r2, [pc, #92]	; (8005d5c <HAL_I2C_MspInit+0x88>)
 8005d00:	f043 0302 	orr.w	r3, r3, #2
 8005d04:	6313      	str	r3, [r2, #48]	; 0x30
 8005d06:	4b15      	ldr	r3, [pc, #84]	; (8005d5c <HAL_I2C_MspInit+0x88>)
 8005d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	613b      	str	r3, [r7, #16]
 8005d10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d12:	23c0      	movs	r3, #192	; 0xc0
 8005d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d16:	2312      	movs	r3, #18
 8005d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005d22:	2304      	movs	r3, #4
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d26:	f107 0314 	add.w	r3, r7, #20
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	480c      	ldr	r0, [pc, #48]	; (8005d60 <HAL_I2C_MspInit+0x8c>)
 8005d2e:	f000 fbdd 	bl	80064ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <HAL_I2C_MspInit+0x88>)
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	4a08      	ldr	r2, [pc, #32]	; (8005d5c <HAL_I2C_MspInit+0x88>)
 8005d3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d40:	6413      	str	r3, [r2, #64]	; 0x40
 8005d42:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <HAL_I2C_MspInit+0x88>)
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005d4e:	bf00      	nop
 8005d50:	3728      	adds	r7, #40	; 0x28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40005400 	.word	0x40005400
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	40020400 	.word	0x40020400

08005d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d68:	f000 fa44 	bl	80061f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d6c:	f000 f80c 	bl	8005d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005d70:	f7ff ff4c 	bl	8005c0c <MX_GPIO_Init>
  MX_I2C1_Init();
 8005d74:	f7ff ff80 	bl	8005c78 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8005d78:	f000 f9a0 	bl	80060bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 8005d7c:	f7ff fee6 	bl	8005b4c <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_main();
 8005d80:	f7ff fefe 	bl	8005b80 <app_main>
 8005d84:	e7fc      	b.n	8005d80 <main+0x1c>
	...

08005d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b094      	sub	sp, #80	; 0x50
 8005d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d8e:	f107 0320 	add.w	r3, r7, #32
 8005d92:	2230      	movs	r2, #48	; 0x30
 8005d94:	2100      	movs	r1, #0
 8005d96:	4618      	mov	r0, r3
 8005d98:	f002 fb9c 	bl	80084d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d9c:	f107 030c 	add.w	r3, r7, #12
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	605a      	str	r2, [r3, #4]
 8005da6:	609a      	str	r2, [r3, #8]
 8005da8:	60da      	str	r2, [r3, #12]
 8005daa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005dac:	2300      	movs	r3, #0
 8005dae:	60bb      	str	r3, [r7, #8]
 8005db0:	4b28      	ldr	r3, [pc, #160]	; (8005e54 <SystemClock_Config+0xcc>)
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	4a27      	ldr	r2, [pc, #156]	; (8005e54 <SystemClock_Config+0xcc>)
 8005db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dba:	6413      	str	r3, [r2, #64]	; 0x40
 8005dbc:	4b25      	ldr	r3, [pc, #148]	; (8005e54 <SystemClock_Config+0xcc>)
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc4:	60bb      	str	r3, [r7, #8]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005dc8:	2300      	movs	r3, #0
 8005dca:	607b      	str	r3, [r7, #4]
 8005dcc:	4b22      	ldr	r3, [pc, #136]	; (8005e58 <SystemClock_Config+0xd0>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a21      	ldr	r2, [pc, #132]	; (8005e58 <SystemClock_Config+0xd0>)
 8005dd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	4b1f      	ldr	r3, [pc, #124]	; (8005e58 <SystemClock_Config+0xd0>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005de0:	607b      	str	r3, [r7, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005de4:	2301      	movs	r3, #1
 8005de6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005de8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005dee:	2302      	movs	r3, #2
 8005df0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005df2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005df8:	2304      	movs	r3, #4
 8005dfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005dfc:	23a8      	movs	r3, #168	; 0xa8
 8005dfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005e00:	2302      	movs	r3, #2
 8005e02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005e04:	2304      	movs	r3, #4
 8005e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e08:	f107 0320 	add.w	r3, r7, #32
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f001 fc9f 	bl	8007750 <HAL_RCC_OscConfig>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005e18:	f000 f820 	bl	8005e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e1c:	230f      	movs	r3, #15
 8005e1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e20:	2302      	movs	r3, #2
 8005e22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005e28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005e2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005e34:	f107 030c 	add.w	r3, r7, #12
 8005e38:	2105      	movs	r1, #5
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f001 ff00 	bl	8007c40 <HAL_RCC_ClockConfig>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005e46:	f000 f809 	bl	8005e5c <Error_Handler>
  }
}
 8005e4a:	bf00      	nop
 8005e4c:	3750      	adds	r7, #80	; 0x50
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	40023800 	.word	0x40023800
 8005e58:	40007000 	.word	0x40007000

08005e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005e60:	b672      	cpsid	i
}
 8005e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005e64:	e7fe      	b.n	8005e64 <Error_Handler+0x8>
	...

08005e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e6e:	2300      	movs	r3, #0
 8005e70:	607b      	str	r3, [r7, #4]
 8005e72:	4b10      	ldr	r3, [pc, #64]	; (8005eb4 <HAL_MspInit+0x4c>)
 8005e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e76:	4a0f      	ldr	r2, [pc, #60]	; (8005eb4 <HAL_MspInit+0x4c>)
 8005e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8005e7e:	4b0d      	ldr	r3, [pc, #52]	; (8005eb4 <HAL_MspInit+0x4c>)
 8005e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e86:	607b      	str	r3, [r7, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	603b      	str	r3, [r7, #0]
 8005e8e:	4b09      	ldr	r3, [pc, #36]	; (8005eb4 <HAL_MspInit+0x4c>)
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	4a08      	ldr	r2, [pc, #32]	; (8005eb4 <HAL_MspInit+0x4c>)
 8005e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e98:	6413      	str	r3, [r2, #64]	; 0x40
 8005e9a:	4b06      	ldr	r3, [pc, #24]	; (8005eb4 <HAL_MspInit+0x4c>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	40023800 	.word	0x40023800

08005eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005ebc:	e7fe      	b.n	8005ebc <NMI_Handler+0x4>

08005ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ec2:	e7fe      	b.n	8005ec2 <HardFault_Handler+0x4>

08005ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ec8:	e7fe      	b.n	8005ec8 <MemManage_Handler+0x4>

08005eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ece:	e7fe      	b.n	8005ece <BusFault_Handler+0x4>

08005ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ed4:	e7fe      	b.n	8005ed4 <UsageFault_Handler+0x4>

08005ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005eda:	bf00      	nop
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ee8:	bf00      	nop
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ef6:	bf00      	nop
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f04:	f000 f9c8 	bl	8006298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f08:	bf00      	nop
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
	return 1;
 8005f10:	2301      	movs	r3, #1
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <_kill>:

int _kill(int pid, int sig)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005f26:	f002 fa9d 	bl	8008464 <__errno>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2216      	movs	r2, #22
 8005f2e:	601a      	str	r2, [r3, #0]
	return -1;
 8005f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <_exit>:

void _exit (int status)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005f44:	f04f 31ff 	mov.w	r1, #4294967295
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7ff ffe7 	bl	8005f1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8005f4e:	e7fe      	b.n	8005f4e <_exit+0x12>

08005f50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	e00a      	b.n	8005f78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005f62:	f3af 8000 	nop.w
 8005f66:	4601      	mov	r1, r0
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	60ba      	str	r2, [r7, #8]
 8005f6e:	b2ca      	uxtb	r2, r1
 8005f70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	3301      	adds	r3, #1
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	dbf0      	blt.n	8005f62 <_read+0x12>
	}

return len;
 8005f80:	687b      	ldr	r3, [r7, #4]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b086      	sub	sp, #24
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	e009      	b.n	8005fb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	60ba      	str	r2, [r7, #8]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7ff fe19 	bl	8005bdc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	3301      	adds	r3, #1
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	dbf1      	blt.n	8005f9c <_write+0x12>
	}
	return len;
 8005fb8:	687b      	ldr	r3, [r7, #4]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <_close>:

int _close(int file)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
	return -1;
 8005fca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005fea:	605a      	str	r2, [r3, #4]
	return 0;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <_isatty>:

int _isatty(int file)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
	return 1;
 8006002:	2301      	movs	r3, #1
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
	return 0;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
	...

0800602c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006034:	4a14      	ldr	r2, [pc, #80]	; (8006088 <_sbrk+0x5c>)
 8006036:	4b15      	ldr	r3, [pc, #84]	; (800608c <_sbrk+0x60>)
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006040:	4b13      	ldr	r3, [pc, #76]	; (8006090 <_sbrk+0x64>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d102      	bne.n	800604e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006048:	4b11      	ldr	r3, [pc, #68]	; (8006090 <_sbrk+0x64>)
 800604a:	4a12      	ldr	r2, [pc, #72]	; (8006094 <_sbrk+0x68>)
 800604c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800604e:	4b10      	ldr	r3, [pc, #64]	; (8006090 <_sbrk+0x64>)
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4413      	add	r3, r2
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	429a      	cmp	r2, r3
 800605a:	d207      	bcs.n	800606c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800605c:	f002 fa02 	bl	8008464 <__errno>
 8006060:	4603      	mov	r3, r0
 8006062:	220c      	movs	r2, #12
 8006064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006066:	f04f 33ff 	mov.w	r3, #4294967295
 800606a:	e009      	b.n	8006080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800606c:	4b08      	ldr	r3, [pc, #32]	; (8006090 <_sbrk+0x64>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006072:	4b07      	ldr	r3, [pc, #28]	; (8006090 <_sbrk+0x64>)
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4413      	add	r3, r2
 800607a:	4a05      	ldr	r2, [pc, #20]	; (8006090 <_sbrk+0x64>)
 800607c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800607e:	68fb      	ldr	r3, [r7, #12]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	20020000 	.word	0x20020000
 800608c:	00000400 	.word	0x00000400
 8006090:	20000670 	.word	0x20000670
 8006094:	20000768 	.word	0x20000768

08006098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800609c:	4b06      	ldr	r3, [pc, #24]	; (80060b8 <SystemInit+0x20>)
 800609e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a2:	4a05      	ldr	r2, [pc, #20]	; (80060b8 <SystemInit+0x20>)
 80060a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80060ac:	bf00      	nop
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	e000ed00 	.word	0xe000ed00

080060bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80060c0:	4b11      	ldr	r3, [pc, #68]	; (8006108 <MX_USART1_UART_Init+0x4c>)
 80060c2:	4a12      	ldr	r2, [pc, #72]	; (800610c <MX_USART1_UART_Init+0x50>)
 80060c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80060c6:	4b10      	ldr	r3, [pc, #64]	; (8006108 <MX_USART1_UART_Init+0x4c>)
 80060c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80060cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80060ce:	4b0e      	ldr	r3, [pc, #56]	; (8006108 <MX_USART1_UART_Init+0x4c>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80060d4:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <MX_USART1_UART_Init+0x4c>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80060da:	4b0b      	ldr	r3, [pc, #44]	; (8006108 <MX_USART1_UART_Init+0x4c>)
 80060dc:	2200      	movs	r2, #0
 80060de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80060e0:	4b09      	ldr	r3, [pc, #36]	; (8006108 <MX_USART1_UART_Init+0x4c>)
 80060e2:	220c      	movs	r2, #12
 80060e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060e6:	4b08      	ldr	r3, [pc, #32]	; (8006108 <MX_USART1_UART_Init+0x4c>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80060ec:	4b06      	ldr	r3, [pc, #24]	; (8006108 <MX_USART1_UART_Init+0x4c>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80060f2:	4805      	ldr	r0, [pc, #20]	; (8006108 <MX_USART1_UART_Init+0x4c>)
 80060f4:	f001 ffa0 	bl	8008038 <HAL_UART_Init>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80060fe:	f7ff fead 	bl	8005e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006102:	bf00      	nop
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20000710 	.word	0x20000710
 800610c:	40011000 	.word	0x40011000

08006110 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08a      	sub	sp, #40	; 0x28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006118:	f107 0314 	add.w	r3, r7, #20
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	605a      	str	r2, [r3, #4]
 8006122:	609a      	str	r2, [r3, #8]
 8006124:	60da      	str	r2, [r3, #12]
 8006126:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a19      	ldr	r2, [pc, #100]	; (8006194 <HAL_UART_MspInit+0x84>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d12c      	bne.n	800618c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006132:	2300      	movs	r3, #0
 8006134:	613b      	str	r3, [r7, #16]
 8006136:	4b18      	ldr	r3, [pc, #96]	; (8006198 <HAL_UART_MspInit+0x88>)
 8006138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613a:	4a17      	ldr	r2, [pc, #92]	; (8006198 <HAL_UART_MspInit+0x88>)
 800613c:	f043 0310 	orr.w	r3, r3, #16
 8006140:	6453      	str	r3, [r2, #68]	; 0x44
 8006142:	4b15      	ldr	r3, [pc, #84]	; (8006198 <HAL_UART_MspInit+0x88>)
 8006144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	613b      	str	r3, [r7, #16]
 800614c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	4b11      	ldr	r3, [pc, #68]	; (8006198 <HAL_UART_MspInit+0x88>)
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	4a10      	ldr	r2, [pc, #64]	; (8006198 <HAL_UART_MspInit+0x88>)
 8006158:	f043 0301 	orr.w	r3, r3, #1
 800615c:	6313      	str	r3, [r2, #48]	; 0x30
 800615e:	4b0e      	ldr	r3, [pc, #56]	; (8006198 <HAL_UART_MspInit+0x88>)
 8006160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800616a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800616e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006170:	2302      	movs	r3, #2
 8006172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006174:	2300      	movs	r3, #0
 8006176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006178:	2303      	movs	r3, #3
 800617a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800617c:	2307      	movs	r3, #7
 800617e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006180:	f107 0314 	add.w	r3, r7, #20
 8006184:	4619      	mov	r1, r3
 8006186:	4805      	ldr	r0, [pc, #20]	; (800619c <HAL_UART_MspInit+0x8c>)
 8006188:	f000 f9b0 	bl	80064ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800618c:	bf00      	nop
 800618e:	3728      	adds	r7, #40	; 0x28
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40011000 	.word	0x40011000
 8006198:	40023800 	.word	0x40023800
 800619c:	40020000 	.word	0x40020000

080061a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80061a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80061d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80061a4:	480d      	ldr	r0, [pc, #52]	; (80061dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80061a6:	490e      	ldr	r1, [pc, #56]	; (80061e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80061a8:	4a0e      	ldr	r2, [pc, #56]	; (80061e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80061aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80061ac:	e002      	b.n	80061b4 <LoopCopyDataInit>

080061ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80061ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80061b2:	3304      	adds	r3, #4

080061b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80061b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80061b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80061b8:	d3f9      	bcc.n	80061ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80061ba:	4a0b      	ldr	r2, [pc, #44]	; (80061e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80061bc:	4c0b      	ldr	r4, [pc, #44]	; (80061ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80061be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80061c0:	e001      	b.n	80061c6 <LoopFillZerobss>

080061c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80061c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80061c4:	3204      	adds	r2, #4

080061c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80061c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80061c8:	d3fb      	bcc.n	80061c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80061ca:	f7ff ff65 	bl	8006098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80061ce:	f002 f94f 	bl	8008470 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80061d2:	f7ff fdc7 	bl	8005d64 <main>
  bx  lr    
 80061d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80061d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80061dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80061e0:	20000498 	.word	0x20000498
  ldr r2, =_sidata
 80061e4:	0800b3e4 	.word	0x0800b3e4
  ldr r2, =_sbss
 80061e8:	20000498 	.word	0x20000498
  ldr r4, =_ebss
 80061ec:	20000768 	.word	0x20000768

080061f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80061f0:	e7fe      	b.n	80061f0 <ADC_IRQHandler>
	...

080061f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80061f8:	4b0e      	ldr	r3, [pc, #56]	; (8006234 <HAL_Init+0x40>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a0d      	ldr	r2, [pc, #52]	; (8006234 <HAL_Init+0x40>)
 80061fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006204:	4b0b      	ldr	r3, [pc, #44]	; (8006234 <HAL_Init+0x40>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a0a      	ldr	r2, [pc, #40]	; (8006234 <HAL_Init+0x40>)
 800620a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800620e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006210:	4b08      	ldr	r3, [pc, #32]	; (8006234 <HAL_Init+0x40>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a07      	ldr	r2, [pc, #28]	; (8006234 <HAL_Init+0x40>)
 8006216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800621a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800621c:	2003      	movs	r0, #3
 800621e:	f000 f931 	bl	8006484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006222:	2000      	movs	r0, #0
 8006224:	f000 f808 	bl	8006238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006228:	f7ff fe1e 	bl	8005e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	40023c00 	.word	0x40023c00

08006238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006240:	4b12      	ldr	r3, [pc, #72]	; (800628c <HAL_InitTick+0x54>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	4b12      	ldr	r3, [pc, #72]	; (8006290 <HAL_InitTick+0x58>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	4619      	mov	r1, r3
 800624a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800624e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006252:	fbb2 f3f3 	udiv	r3, r2, r3
 8006256:	4618      	mov	r0, r3
 8006258:	f000 f93b 	bl	80064d2 <HAL_SYSTICK_Config>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e00e      	b.n	8006284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b0f      	cmp	r3, #15
 800626a:	d80a      	bhi.n	8006282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800626c:	2200      	movs	r2, #0
 800626e:	6879      	ldr	r1, [r7, #4]
 8006270:	f04f 30ff 	mov.w	r0, #4294967295
 8006274:	f000 f911 	bl	800649a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006278:	4a06      	ldr	r2, [pc, #24]	; (8006294 <HAL_InitTick+0x5c>)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	e000      	b.n	8006284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
}
 8006284:	4618      	mov	r0, r3
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	200002bc 	.word	0x200002bc
 8006290:	200002c4 	.word	0x200002c4
 8006294:	200002c0 	.word	0x200002c0

08006298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006298:	b480      	push	{r7}
 800629a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800629c:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <HAL_IncTick+0x20>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	461a      	mov	r2, r3
 80062a2:	4b06      	ldr	r3, [pc, #24]	; (80062bc <HAL_IncTick+0x24>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4413      	add	r3, r2
 80062a8:	4a04      	ldr	r2, [pc, #16]	; (80062bc <HAL_IncTick+0x24>)
 80062aa:	6013      	str	r3, [r2, #0]
}
 80062ac:	bf00      	nop
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	200002c4 	.word	0x200002c4
 80062bc:	20000754 	.word	0x20000754

080062c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  return uwTick;
 80062c4:	4b03      	ldr	r3, [pc, #12]	; (80062d4 <HAL_GetTick+0x14>)
 80062c6:	681b      	ldr	r3, [r3, #0]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	20000754 	.word	0x20000754

080062d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062e0:	f7ff ffee 	bl	80062c0 <HAL_GetTick>
 80062e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f0:	d005      	beq.n	80062fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80062f2:	4b0a      	ldr	r3, [pc, #40]	; (800631c <HAL_Delay+0x44>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80062fe:	bf00      	nop
 8006300:	f7ff ffde 	bl	80062c0 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	429a      	cmp	r2, r3
 800630e:	d8f7      	bhi.n	8006300 <HAL_Delay+0x28>
  {
  }
}
 8006310:	bf00      	nop
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	200002c4 	.word	0x200002c4

08006320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006330:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <__NVIC_SetPriorityGrouping+0x44>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800633c:	4013      	ands	r3, r2
 800633e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800634c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006352:	4a04      	ldr	r2, [pc, #16]	; (8006364 <__NVIC_SetPriorityGrouping+0x44>)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	60d3      	str	r3, [r2, #12]
}
 8006358:	bf00      	nop
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	e000ed00 	.word	0xe000ed00

08006368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800636c:	4b04      	ldr	r3, [pc, #16]	; (8006380 <__NVIC_GetPriorityGrouping+0x18>)
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	0a1b      	lsrs	r3, r3, #8
 8006372:	f003 0307 	and.w	r3, r3, #7
}
 8006376:	4618      	mov	r0, r3
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	e000ed00 	.word	0xe000ed00

08006384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	4603      	mov	r3, r0
 800638c:	6039      	str	r1, [r7, #0]
 800638e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006394:	2b00      	cmp	r3, #0
 8006396:	db0a      	blt.n	80063ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	b2da      	uxtb	r2, r3
 800639c:	490c      	ldr	r1, [pc, #48]	; (80063d0 <__NVIC_SetPriority+0x4c>)
 800639e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a2:	0112      	lsls	r2, r2, #4
 80063a4:	b2d2      	uxtb	r2, r2
 80063a6:	440b      	add	r3, r1
 80063a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063ac:	e00a      	b.n	80063c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	4908      	ldr	r1, [pc, #32]	; (80063d4 <__NVIC_SetPriority+0x50>)
 80063b4:	79fb      	ldrb	r3, [r7, #7]
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	3b04      	subs	r3, #4
 80063bc:	0112      	lsls	r2, r2, #4
 80063be:	b2d2      	uxtb	r2, r2
 80063c0:	440b      	add	r3, r1
 80063c2:	761a      	strb	r2, [r3, #24]
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	e000e100 	.word	0xe000e100
 80063d4:	e000ed00 	.word	0xe000ed00

080063d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063d8:	b480      	push	{r7}
 80063da:	b089      	sub	sp, #36	; 0x24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	f1c3 0307 	rsb	r3, r3, #7
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	bf28      	it	cs
 80063f6:	2304      	movcs	r3, #4
 80063f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	3304      	adds	r3, #4
 80063fe:	2b06      	cmp	r3, #6
 8006400:	d902      	bls.n	8006408 <NVIC_EncodePriority+0x30>
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	3b03      	subs	r3, #3
 8006406:	e000      	b.n	800640a <NVIC_EncodePriority+0x32>
 8006408:	2300      	movs	r3, #0
 800640a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800640c:	f04f 32ff 	mov.w	r2, #4294967295
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	43da      	mvns	r2, r3
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	401a      	ands	r2, r3
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006420:	f04f 31ff 	mov.w	r1, #4294967295
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	fa01 f303 	lsl.w	r3, r1, r3
 800642a:	43d9      	mvns	r1, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006430:	4313      	orrs	r3, r2
         );
}
 8006432:	4618      	mov	r0, r3
 8006434:	3724      	adds	r7, #36	; 0x24
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
	...

08006440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3b01      	subs	r3, #1
 800644c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006450:	d301      	bcc.n	8006456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006452:	2301      	movs	r3, #1
 8006454:	e00f      	b.n	8006476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006456:	4a0a      	ldr	r2, [pc, #40]	; (8006480 <SysTick_Config+0x40>)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3b01      	subs	r3, #1
 800645c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800645e:	210f      	movs	r1, #15
 8006460:	f04f 30ff 	mov.w	r0, #4294967295
 8006464:	f7ff ff8e 	bl	8006384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006468:	4b05      	ldr	r3, [pc, #20]	; (8006480 <SysTick_Config+0x40>)
 800646a:	2200      	movs	r2, #0
 800646c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800646e:	4b04      	ldr	r3, [pc, #16]	; (8006480 <SysTick_Config+0x40>)
 8006470:	2207      	movs	r2, #7
 8006472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	e000e010 	.word	0xe000e010

08006484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff ff47 	bl	8006320 <__NVIC_SetPriorityGrouping>
}
 8006492:	bf00      	nop
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800649a:	b580      	push	{r7, lr}
 800649c:	b086      	sub	sp, #24
 800649e:	af00      	add	r7, sp, #0
 80064a0:	4603      	mov	r3, r0
 80064a2:	60b9      	str	r1, [r7, #8]
 80064a4:	607a      	str	r2, [r7, #4]
 80064a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80064ac:	f7ff ff5c 	bl	8006368 <__NVIC_GetPriorityGrouping>
 80064b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	68b9      	ldr	r1, [r7, #8]
 80064b6:	6978      	ldr	r0, [r7, #20]
 80064b8:	f7ff ff8e 	bl	80063d8 <NVIC_EncodePriority>
 80064bc:	4602      	mov	r2, r0
 80064be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064c2:	4611      	mov	r1, r2
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7ff ff5d 	bl	8006384 <__NVIC_SetPriority>
}
 80064ca:	bf00      	nop
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b082      	sub	sp, #8
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7ff ffb0 	bl	8006440 <SysTick_Config>
 80064e0:	4603      	mov	r3, r0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b089      	sub	sp, #36	; 0x24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80064fe:	2300      	movs	r3, #0
 8006500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006502:	2300      	movs	r3, #0
 8006504:	61fb      	str	r3, [r7, #28]
 8006506:	e16b      	b.n	80067e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006508:	2201      	movs	r2, #1
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	4013      	ands	r3, r2
 800651a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	429a      	cmp	r2, r3
 8006522:	f040 815a 	bne.w	80067da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	2b01      	cmp	r3, #1
 8006530:	d005      	beq.n	800653e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800653a:	2b02      	cmp	r3, #2
 800653c:	d130      	bne.n	80065a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	005b      	lsls	r3, r3, #1
 8006548:	2203      	movs	r2, #3
 800654a:	fa02 f303 	lsl.w	r3, r2, r3
 800654e:	43db      	mvns	r3, r3
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	4013      	ands	r3, r2
 8006554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	005b      	lsls	r3, r3, #1
 800655e:	fa02 f303 	lsl.w	r3, r2, r3
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	4313      	orrs	r3, r2
 8006566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006574:	2201      	movs	r2, #1
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	fa02 f303 	lsl.w	r3, r2, r3
 800657c:	43db      	mvns	r3, r3
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	4013      	ands	r3, r2
 8006582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	091b      	lsrs	r3, r3, #4
 800658a:	f003 0201 	and.w	r2, r3, #1
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	4313      	orrs	r3, r2
 8006598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f003 0303 	and.w	r3, r3, #3
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d017      	beq.n	80065dc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	2203      	movs	r2, #3
 80065b8:	fa02 f303 	lsl.w	r3, r2, r3
 80065bc:	43db      	mvns	r3, r3
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	4013      	ands	r3, r2
 80065c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	fa02 f303 	lsl.w	r3, r2, r3
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f003 0303 	and.w	r3, r3, #3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d123      	bne.n	8006630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	08da      	lsrs	r2, r3, #3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3208      	adds	r2, #8
 80065f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	220f      	movs	r2, #15
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
 8006604:	43db      	mvns	r3, r3
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	4013      	ands	r3, r2
 800660a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	691a      	ldr	r2, [r3, #16]
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	fa02 f303 	lsl.w	r3, r2, r3
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	4313      	orrs	r3, r2
 8006620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	08da      	lsrs	r2, r3, #3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	3208      	adds	r2, #8
 800662a:	69b9      	ldr	r1, [r7, #24]
 800662c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	2203      	movs	r2, #3
 800663c:	fa02 f303 	lsl.w	r3, r2, r3
 8006640:	43db      	mvns	r3, r3
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	4013      	ands	r3, r2
 8006646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f003 0203 	and.w	r2, r3, #3
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	fa02 f303 	lsl.w	r3, r2, r3
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	4313      	orrs	r3, r2
 800665c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 80b4 	beq.w	80067da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	4b60      	ldr	r3, [pc, #384]	; (80067f8 <HAL_GPIO_Init+0x30c>)
 8006678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667a:	4a5f      	ldr	r2, [pc, #380]	; (80067f8 <HAL_GPIO_Init+0x30c>)
 800667c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006680:	6453      	str	r3, [r2, #68]	; 0x44
 8006682:	4b5d      	ldr	r3, [pc, #372]	; (80067f8 <HAL_GPIO_Init+0x30c>)
 8006684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800668e:	4a5b      	ldr	r2, [pc, #364]	; (80067fc <HAL_GPIO_Init+0x310>)
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	089b      	lsrs	r3, r3, #2
 8006694:	3302      	adds	r3, #2
 8006696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800669a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	220f      	movs	r2, #15
 80066a6:	fa02 f303 	lsl.w	r3, r2, r3
 80066aa:	43db      	mvns	r3, r3
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	4013      	ands	r3, r2
 80066b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a52      	ldr	r2, [pc, #328]	; (8006800 <HAL_GPIO_Init+0x314>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d02b      	beq.n	8006712 <HAL_GPIO_Init+0x226>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a51      	ldr	r2, [pc, #324]	; (8006804 <HAL_GPIO_Init+0x318>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d025      	beq.n	800670e <HAL_GPIO_Init+0x222>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a50      	ldr	r2, [pc, #320]	; (8006808 <HAL_GPIO_Init+0x31c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d01f      	beq.n	800670a <HAL_GPIO_Init+0x21e>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a4f      	ldr	r2, [pc, #316]	; (800680c <HAL_GPIO_Init+0x320>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d019      	beq.n	8006706 <HAL_GPIO_Init+0x21a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a4e      	ldr	r2, [pc, #312]	; (8006810 <HAL_GPIO_Init+0x324>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d013      	beq.n	8006702 <HAL_GPIO_Init+0x216>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a4d      	ldr	r2, [pc, #308]	; (8006814 <HAL_GPIO_Init+0x328>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00d      	beq.n	80066fe <HAL_GPIO_Init+0x212>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a4c      	ldr	r2, [pc, #304]	; (8006818 <HAL_GPIO_Init+0x32c>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d007      	beq.n	80066fa <HAL_GPIO_Init+0x20e>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a4b      	ldr	r2, [pc, #300]	; (800681c <HAL_GPIO_Init+0x330>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d101      	bne.n	80066f6 <HAL_GPIO_Init+0x20a>
 80066f2:	2307      	movs	r3, #7
 80066f4:	e00e      	b.n	8006714 <HAL_GPIO_Init+0x228>
 80066f6:	2308      	movs	r3, #8
 80066f8:	e00c      	b.n	8006714 <HAL_GPIO_Init+0x228>
 80066fa:	2306      	movs	r3, #6
 80066fc:	e00a      	b.n	8006714 <HAL_GPIO_Init+0x228>
 80066fe:	2305      	movs	r3, #5
 8006700:	e008      	b.n	8006714 <HAL_GPIO_Init+0x228>
 8006702:	2304      	movs	r3, #4
 8006704:	e006      	b.n	8006714 <HAL_GPIO_Init+0x228>
 8006706:	2303      	movs	r3, #3
 8006708:	e004      	b.n	8006714 <HAL_GPIO_Init+0x228>
 800670a:	2302      	movs	r3, #2
 800670c:	e002      	b.n	8006714 <HAL_GPIO_Init+0x228>
 800670e:	2301      	movs	r3, #1
 8006710:	e000      	b.n	8006714 <HAL_GPIO_Init+0x228>
 8006712:	2300      	movs	r3, #0
 8006714:	69fa      	ldr	r2, [r7, #28]
 8006716:	f002 0203 	and.w	r2, r2, #3
 800671a:	0092      	lsls	r2, r2, #2
 800671c:	4093      	lsls	r3, r2
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	4313      	orrs	r3, r2
 8006722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006724:	4935      	ldr	r1, [pc, #212]	; (80067fc <HAL_GPIO_Init+0x310>)
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	089b      	lsrs	r3, r3, #2
 800672a:	3302      	adds	r3, #2
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006732:	4b3b      	ldr	r3, [pc, #236]	; (8006820 <HAL_GPIO_Init+0x334>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	43db      	mvns	r3, r3
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	4013      	ands	r3, r2
 8006740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800674e:	69ba      	ldr	r2, [r7, #24]
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	4313      	orrs	r3, r2
 8006754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006756:	4a32      	ldr	r2, [pc, #200]	; (8006820 <HAL_GPIO_Init+0x334>)
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800675c:	4b30      	ldr	r3, [pc, #192]	; (8006820 <HAL_GPIO_Init+0x334>)
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	43db      	mvns	r3, r3
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	4013      	ands	r3, r2
 800676a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006780:	4a27      	ldr	r2, [pc, #156]	; (8006820 <HAL_GPIO_Init+0x334>)
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006786:	4b26      	ldr	r3, [pc, #152]	; (8006820 <HAL_GPIO_Init+0x334>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	43db      	mvns	r3, r3
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	4013      	ands	r3, r2
 8006794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80067aa:	4a1d      	ldr	r2, [pc, #116]	; (8006820 <HAL_GPIO_Init+0x334>)
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80067b0:	4b1b      	ldr	r3, [pc, #108]	; (8006820 <HAL_GPIO_Init+0x334>)
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	43db      	mvns	r3, r3
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	4013      	ands	r3, r2
 80067be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067d4:	4a12      	ldr	r2, [pc, #72]	; (8006820 <HAL_GPIO_Init+0x334>)
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	3301      	adds	r3, #1
 80067de:	61fb      	str	r3, [r7, #28]
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	2b0f      	cmp	r3, #15
 80067e4:	f67f ae90 	bls.w	8006508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80067e8:	bf00      	nop
 80067ea:	bf00      	nop
 80067ec:	3724      	adds	r7, #36	; 0x24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	40023800 	.word	0x40023800
 80067fc:	40013800 	.word	0x40013800
 8006800:	40020000 	.word	0x40020000
 8006804:	40020400 	.word	0x40020400
 8006808:	40020800 	.word	0x40020800
 800680c:	40020c00 	.word	0x40020c00
 8006810:	40021000 	.word	0x40021000
 8006814:	40021400 	.word	0x40021400
 8006818:	40021800 	.word	0x40021800
 800681c:	40021c00 	.word	0x40021c00
 8006820:	40013c00 	.word	0x40013c00

08006824 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e12b      	b.n	8006a8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d106      	bne.n	8006850 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7ff fa42 	bl	8005cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2224      	movs	r2, #36	; 0x24
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0201 	bic.w	r2, r2, #1
 8006866:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006876:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006886:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006888:	f001 fbae 	bl	8007fe8 <HAL_RCC_GetPCLK1Freq>
 800688c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	4a81      	ldr	r2, [pc, #516]	; (8006a98 <HAL_I2C_Init+0x274>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d807      	bhi.n	80068a8 <HAL_I2C_Init+0x84>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4a80      	ldr	r2, [pc, #512]	; (8006a9c <HAL_I2C_Init+0x278>)
 800689c:	4293      	cmp	r3, r2
 800689e:	bf94      	ite	ls
 80068a0:	2301      	movls	r3, #1
 80068a2:	2300      	movhi	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	e006      	b.n	80068b6 <HAL_I2C_Init+0x92>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4a7d      	ldr	r2, [pc, #500]	; (8006aa0 <HAL_I2C_Init+0x27c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	bf94      	ite	ls
 80068b0:	2301      	movls	r3, #1
 80068b2:	2300      	movhi	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e0e7      	b.n	8006a8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	4a78      	ldr	r2, [pc, #480]	; (8006aa4 <HAL_I2C_Init+0x280>)
 80068c2:	fba2 2303 	umull	r2, r3, r2, r3
 80068c6:	0c9b      	lsrs	r3, r3, #18
 80068c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	430a      	orrs	r2, r1
 80068dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	4a6a      	ldr	r2, [pc, #424]	; (8006a98 <HAL_I2C_Init+0x274>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d802      	bhi.n	80068f8 <HAL_I2C_Init+0xd4>
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	3301      	adds	r3, #1
 80068f6:	e009      	b.n	800690c <HAL_I2C_Init+0xe8>
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80068fe:	fb02 f303 	mul.w	r3, r2, r3
 8006902:	4a69      	ldr	r2, [pc, #420]	; (8006aa8 <HAL_I2C_Init+0x284>)
 8006904:	fba2 2303 	umull	r2, r3, r2, r3
 8006908:	099b      	lsrs	r3, r3, #6
 800690a:	3301      	adds	r3, #1
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6812      	ldr	r2, [r2, #0]
 8006910:	430b      	orrs	r3, r1
 8006912:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800691e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	495c      	ldr	r1, [pc, #368]	; (8006a98 <HAL_I2C_Init+0x274>)
 8006928:	428b      	cmp	r3, r1
 800692a:	d819      	bhi.n	8006960 <HAL_I2C_Init+0x13c>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	1e59      	subs	r1, r3, #1
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	fbb1 f3f3 	udiv	r3, r1, r3
 800693a:	1c59      	adds	r1, r3, #1
 800693c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006940:	400b      	ands	r3, r1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <HAL_I2C_Init+0x138>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1e59      	subs	r1, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	fbb1 f3f3 	udiv	r3, r1, r3
 8006954:	3301      	adds	r3, #1
 8006956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800695a:	e051      	b.n	8006a00 <HAL_I2C_Init+0x1dc>
 800695c:	2304      	movs	r3, #4
 800695e:	e04f      	b.n	8006a00 <HAL_I2C_Init+0x1dc>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d111      	bne.n	800698c <HAL_I2C_Init+0x168>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	1e58      	subs	r0, r3, #1
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6859      	ldr	r1, [r3, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	440b      	add	r3, r1
 8006976:	fbb0 f3f3 	udiv	r3, r0, r3
 800697a:	3301      	adds	r3, #1
 800697c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006980:	2b00      	cmp	r3, #0
 8006982:	bf0c      	ite	eq
 8006984:	2301      	moveq	r3, #1
 8006986:	2300      	movne	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	e012      	b.n	80069b2 <HAL_I2C_Init+0x18e>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	1e58      	subs	r0, r3, #1
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6859      	ldr	r1, [r3, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	0099      	lsls	r1, r3, #2
 800699c:	440b      	add	r3, r1
 800699e:	fbb0 f3f3 	udiv	r3, r0, r3
 80069a2:	3301      	adds	r3, #1
 80069a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	bf0c      	ite	eq
 80069ac:	2301      	moveq	r3, #1
 80069ae:	2300      	movne	r3, #0
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <HAL_I2C_Init+0x196>
 80069b6:	2301      	movs	r3, #1
 80069b8:	e022      	b.n	8006a00 <HAL_I2C_Init+0x1dc>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10e      	bne.n	80069e0 <HAL_I2C_Init+0x1bc>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	1e58      	subs	r0, r3, #1
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6859      	ldr	r1, [r3, #4]
 80069ca:	460b      	mov	r3, r1
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	440b      	add	r3, r1
 80069d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80069d4:	3301      	adds	r3, #1
 80069d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069de:	e00f      	b.n	8006a00 <HAL_I2C_Init+0x1dc>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	1e58      	subs	r0, r3, #1
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6859      	ldr	r1, [r3, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	0099      	lsls	r1, r3, #2
 80069f0:	440b      	add	r3, r1
 80069f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80069f6:	3301      	adds	r3, #1
 80069f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	6809      	ldr	r1, [r1, #0]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	69da      	ldr	r2, [r3, #28]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6911      	ldr	r1, [r2, #16]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	68d2      	ldr	r2, [r2, #12]
 8006a3a:	4311      	orrs	r1, r2
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6812      	ldr	r2, [r2, #0]
 8006a40:	430b      	orrs	r3, r1
 8006a42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	695a      	ldr	r2, [r3, #20]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0201 	orr.w	r2, r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	000186a0 	.word	0x000186a0
 8006a9c:	001e847f 	.word	0x001e847f
 8006aa0:	003d08ff 	.word	0x003d08ff
 8006aa4:	431bde83 	.word	0x431bde83
 8006aa8:	10624dd3 	.word	0x10624dd3

08006aac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b088      	sub	sp, #32
 8006ab0:	af02      	add	r7, sp, #8
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	607a      	str	r2, [r7, #4]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	460b      	mov	r3, r1
 8006aba:	817b      	strh	r3, [r7, #10]
 8006abc:	4613      	mov	r3, r2
 8006abe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ac0:	f7ff fbfe 	bl	80062c0 <HAL_GetTick>
 8006ac4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	f040 80e0 	bne.w	8006c94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	2319      	movs	r3, #25
 8006ada:	2201      	movs	r2, #1
 8006adc:	4970      	ldr	r1, [pc, #448]	; (8006ca0 <HAL_I2C_Master_Transmit+0x1f4>)
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 fc58 	bl	8007394 <I2C_WaitOnFlagUntilTimeout>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006aea:	2302      	movs	r3, #2
 8006aec:	e0d3      	b.n	8006c96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d101      	bne.n	8006afc <HAL_I2C_Master_Transmit+0x50>
 8006af8:	2302      	movs	r3, #2
 8006afa:	e0cc      	b.n	8006c96 <HAL_I2C_Master_Transmit+0x1ea>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d007      	beq.n	8006b22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f042 0201 	orr.w	r2, r2, #1
 8006b20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2221      	movs	r2, #33	; 0x21
 8006b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2210      	movs	r2, #16
 8006b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	893a      	ldrh	r2, [r7, #8]
 8006b52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4a50      	ldr	r2, [pc, #320]	; (8006ca4 <HAL_I2C_Master_Transmit+0x1f8>)
 8006b62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006b64:	8979      	ldrh	r1, [r7, #10]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	6a3a      	ldr	r2, [r7, #32]
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 fac2 	bl	80070f4 <I2C_MasterRequestWrite>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e08d      	b.n	8006c96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	613b      	str	r3, [r7, #16]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	613b      	str	r3, [r7, #16]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	613b      	str	r3, [r7, #16]
 8006b8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006b90:	e066      	b.n	8006c60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	6a39      	ldr	r1, [r7, #32]
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f000 fcd2 	bl	8007540 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00d      	beq.n	8006bbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	d107      	bne.n	8006bba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e06b      	b.n	8006c96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	781a      	ldrb	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be6:	3b01      	subs	r3, #1
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	d11b      	bne.n	8006c34 <HAL_I2C_Master_Transmit+0x188>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d017      	beq.n	8006c34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	781a      	ldrb	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	6a39      	ldr	r1, [r7, #32]
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 fcc2 	bl	80075c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00d      	beq.n	8006c60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d107      	bne.n	8006c5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e01a      	b.n	8006c96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d194      	bne.n	8006b92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	e000      	b.n	8006c96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006c94:	2302      	movs	r3, #2
  }
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	00100002 	.word	0x00100002
 8006ca4:	ffff0000 	.word	0xffff0000

08006ca8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b08c      	sub	sp, #48	; 0x30
 8006cac:	af02      	add	r7, sp, #8
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	607a      	str	r2, [r7, #4]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	817b      	strh	r3, [r7, #10]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006cbc:	f7ff fb00 	bl	80062c0 <HAL_GetTick>
 8006cc0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	f040 820b 	bne.w	80070e6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	2319      	movs	r3, #25
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	497c      	ldr	r1, [pc, #496]	; (8006ecc <HAL_I2C_Master_Receive+0x224>)
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 fb5a 	bl	8007394 <I2C_WaitOnFlagUntilTimeout>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	e1fe      	b.n	80070e8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d101      	bne.n	8006cf8 <HAL_I2C_Master_Receive+0x50>
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	e1f7      	b.n	80070e8 <HAL_I2C_Master_Receive+0x440>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d007      	beq.n	8006d1e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f042 0201 	orr.w	r2, r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2222      	movs	r2, #34	; 0x22
 8006d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2210      	movs	r2, #16
 8006d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	893a      	ldrh	r2, [r7, #8]
 8006d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4a5c      	ldr	r2, [pc, #368]	; (8006ed0 <HAL_I2C_Master_Receive+0x228>)
 8006d5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006d60:	8979      	ldrh	r1, [r7, #10]
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 fa46 	bl	80071f8 <I2C_MasterRequestRead>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e1b8      	b.n	80070e8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d113      	bne.n	8006da6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d7e:	2300      	movs	r3, #0
 8006d80:	623b      	str	r3, [r7, #32]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	623b      	str	r3, [r7, #32]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	623b      	str	r3, [r7, #32]
 8006d92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	e18c      	b.n	80070c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d11b      	bne.n	8006de6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	61fb      	str	r3, [r7, #28]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	61fb      	str	r3, [r7, #28]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	61fb      	str	r3, [r7, #28]
 8006dd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	e16c      	b.n	80070c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d11b      	bne.n	8006e26 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dfc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e0e:	2300      	movs	r3, #0
 8006e10:	61bb      	str	r3, [r7, #24]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	61bb      	str	r3, [r7, #24]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	61bb      	str	r3, [r7, #24]
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	e14c      	b.n	80070c0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e36:	2300      	movs	r3, #0
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	617b      	str	r3, [r7, #20]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	617b      	str	r3, [r7, #20]
 8006e4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006e4c:	e138      	b.n	80070c0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	f200 80f1 	bhi.w	800703a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d123      	bne.n	8006ea8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 fbed 	bl	8007644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e139      	b.n	80070e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	691a      	ldr	r2, [r3, #16]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e90:	3b01      	subs	r3, #1
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ea6:	e10b      	b.n	80070c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d14e      	bne.n	8006f4e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	4906      	ldr	r1, [pc, #24]	; (8006ed4 <HAL_I2C_Master_Receive+0x22c>)
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 fa6a 	bl	8007394 <I2C_WaitOnFlagUntilTimeout>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d008      	beq.n	8006ed8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e10e      	b.n	80070e8 <HAL_I2C_Master_Receive+0x440>
 8006eca:	bf00      	nop
 8006ecc:	00100002 	.word	0x00100002
 8006ed0:	ffff0000 	.word	0xffff0000
 8006ed4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691a      	ldr	r2, [r3, #16]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	3b01      	subs	r3, #1
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f4c:	e0b8      	b.n	80070c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	2200      	movs	r2, #0
 8006f56:	4966      	ldr	r1, [pc, #408]	; (80070f0 <HAL_I2C_Master_Receive+0x448>)
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 fa1b 	bl	8007394 <I2C_WaitOnFlagUntilTimeout>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e0bf      	b.n	80070e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	691a      	ldr	r2, [r3, #16]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f94:	3b01      	subs	r3, #1
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	494f      	ldr	r1, [pc, #316]	; (80070f0 <HAL_I2C_Master_Receive+0x448>)
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f000 f9ed 	bl	8007394 <I2C_WaitOnFlagUntilTimeout>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e091      	b.n	80070e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	691a      	ldr	r2, [r3, #16]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	b2d2      	uxtb	r2, r2
 8006fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	3b01      	subs	r3, #1
 8007000:	b29a      	uxth	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	691a      	ldr	r2, [r3, #16]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	b2d2      	uxtb	r2, r2
 8007012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007022:	3b01      	subs	r3, #1
 8007024:	b29a      	uxth	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007038:	e042      	b.n	80070c0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800703a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800703c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 fb00 	bl	8007644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e04c      	b.n	80070e8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	691a      	ldr	r2, [r3, #16]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	b2d2      	uxtb	r2, r2
 800705a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800706a:	3b01      	subs	r3, #1
 800706c:	b29a      	uxth	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007076:	b29b      	uxth	r3, r3
 8007078:	3b01      	subs	r3, #1
 800707a:	b29a      	uxth	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	f003 0304 	and.w	r3, r3, #4
 800708a:	2b04      	cmp	r3, #4
 800708c:	d118      	bne.n	80070c0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691a      	ldr	r2, [r3, #16]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	b2d2      	uxtb	r2, r2
 800709a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070aa:	3b01      	subs	r3, #1
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f47f aec2 	bne.w	8006e4e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	e000      	b.n	80070e8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80070e6:	2302      	movs	r3, #2
  }
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3728      	adds	r7, #40	; 0x28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	00010004 	.word	0x00010004

080070f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af02      	add	r7, sp, #8
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	607a      	str	r2, [r7, #4]
 80070fe:	603b      	str	r3, [r7, #0]
 8007100:	460b      	mov	r3, r1
 8007102:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007108:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b08      	cmp	r3, #8
 800710e:	d006      	beq.n	800711e <I2C_MasterRequestWrite+0x2a>
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d003      	beq.n	800711e <I2C_MasterRequestWrite+0x2a>
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800711c:	d108      	bne.n	8007130 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	e00b      	b.n	8007148 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007134:	2b12      	cmp	r3, #18
 8007136:	d107      	bne.n	8007148 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007146:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 f91d 	bl	8007394 <I2C_WaitOnFlagUntilTimeout>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00d      	beq.n	800717c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800716e:	d103      	bne.n	8007178 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007176:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e035      	b.n	80071e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007184:	d108      	bne.n	8007198 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007186:	897b      	ldrh	r3, [r7, #10]
 8007188:	b2db      	uxtb	r3, r3
 800718a:	461a      	mov	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007194:	611a      	str	r2, [r3, #16]
 8007196:	e01b      	b.n	80071d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007198:	897b      	ldrh	r3, [r7, #10]
 800719a:	11db      	asrs	r3, r3, #7
 800719c:	b2db      	uxtb	r3, r3
 800719e:	f003 0306 	and.w	r3, r3, #6
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	f063 030f 	orn	r3, r3, #15
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	490e      	ldr	r1, [pc, #56]	; (80071f0 <I2C_MasterRequestWrite+0xfc>)
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 f943 	bl	8007442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e010      	b.n	80071e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80071c6:	897b      	ldrh	r3, [r7, #10]
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	4907      	ldr	r1, [pc, #28]	; (80071f4 <I2C_MasterRequestWrite+0x100>)
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f000 f933 	bl	8007442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e000      	b.n	80071e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	00010008 	.word	0x00010008
 80071f4:	00010002 	.word	0x00010002

080071f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	607a      	str	r2, [r7, #4]
 8007202:	603b      	str	r3, [r7, #0]
 8007204:	460b      	mov	r3, r1
 8007206:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800721c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2b08      	cmp	r3, #8
 8007222:	d006      	beq.n	8007232 <I2C_MasterRequestRead+0x3a>
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d003      	beq.n	8007232 <I2C_MasterRequestRead+0x3a>
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007230:	d108      	bne.n	8007244 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	e00b      	b.n	800725c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007248:	2b11      	cmp	r3, #17
 800724a:	d107      	bne.n	800725c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800725a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 f893 	bl	8007394 <I2C_WaitOnFlagUntilTimeout>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00d      	beq.n	8007290 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800727e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007282:	d103      	bne.n	800728c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800728a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e079      	b.n	8007384 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007298:	d108      	bne.n	80072ac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800729a:	897b      	ldrh	r3, [r7, #10]
 800729c:	b2db      	uxtb	r3, r3
 800729e:	f043 0301 	orr.w	r3, r3, #1
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	611a      	str	r2, [r3, #16]
 80072aa:	e05f      	b.n	800736c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80072ac:	897b      	ldrh	r3, [r7, #10]
 80072ae:	11db      	asrs	r3, r3, #7
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	f003 0306 	and.w	r3, r3, #6
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	f063 030f 	orn	r3, r3, #15
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	4930      	ldr	r1, [pc, #192]	; (800738c <I2C_MasterRequestRead+0x194>)
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 f8b9 	bl	8007442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e054      	b.n	8007384 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80072da:	897b      	ldrh	r3, [r7, #10]
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	4929      	ldr	r1, [pc, #164]	; (8007390 <I2C_MasterRequestRead+0x198>)
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 f8a9 	bl	8007442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e044      	b.n	8007384 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072fa:	2300      	movs	r3, #0
 80072fc:	613b      	str	r3, [r7, #16]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	613b      	str	r3, [r7, #16]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	613b      	str	r3, [r7, #16]
 800730e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800731e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 f831 	bl	8007394 <I2C_WaitOnFlagUntilTimeout>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00d      	beq.n	8007354 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007346:	d103      	bne.n	8007350 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800734e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e017      	b.n	8007384 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007354:	897b      	ldrh	r3, [r7, #10]
 8007356:	11db      	asrs	r3, r3, #7
 8007358:	b2db      	uxtb	r3, r3
 800735a:	f003 0306 	and.w	r3, r3, #6
 800735e:	b2db      	uxtb	r3, r3
 8007360:	f063 030e 	orn	r3, r3, #14
 8007364:	b2da      	uxtb	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	4907      	ldr	r1, [pc, #28]	; (8007390 <I2C_MasterRequestRead+0x198>)
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 f865 	bl	8007442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e000      	b.n	8007384 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	00010008 	.word	0x00010008
 8007390:	00010002 	.word	0x00010002

08007394 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	4613      	mov	r3, r2
 80073a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073a4:	e025      	b.n	80073f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ac:	d021      	beq.n	80073f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ae:	f7fe ff87 	bl	80062c0 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d302      	bcc.n	80073c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d116      	bne.n	80073f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2220      	movs	r2, #32
 80073ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	f043 0220 	orr.w	r2, r3, #32
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e023      	b.n	800743a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	0c1b      	lsrs	r3, r3, #16
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d10d      	bne.n	8007418 <I2C_WaitOnFlagUntilTimeout+0x84>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	43da      	mvns	r2, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	4013      	ands	r3, r2
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	bf0c      	ite	eq
 800740e:	2301      	moveq	r3, #1
 8007410:	2300      	movne	r3, #0
 8007412:	b2db      	uxtb	r3, r3
 8007414:	461a      	mov	r2, r3
 8007416:	e00c      	b.n	8007432 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	43da      	mvns	r2, r3
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	4013      	ands	r3, r2
 8007424:	b29b      	uxth	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	bf0c      	ite	eq
 800742a:	2301      	moveq	r3, #1
 800742c:	2300      	movne	r3, #0
 800742e:	b2db      	uxtb	r3, r3
 8007430:	461a      	mov	r2, r3
 8007432:	79fb      	ldrb	r3, [r7, #7]
 8007434:	429a      	cmp	r2, r3
 8007436:	d0b6      	beq.n	80073a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b084      	sub	sp, #16
 8007446:	af00      	add	r7, sp, #0
 8007448:	60f8      	str	r0, [r7, #12]
 800744a:	60b9      	str	r1, [r7, #8]
 800744c:	607a      	str	r2, [r7, #4]
 800744e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007450:	e051      	b.n	80074f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800745c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007460:	d123      	bne.n	80074aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007470:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800747a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2220      	movs	r2, #32
 8007486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007496:	f043 0204 	orr.w	r2, r3, #4
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e046      	b.n	8007538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b0:	d021      	beq.n	80074f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074b2:	f7fe ff05 	bl	80062c0 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d302      	bcc.n	80074c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d116      	bne.n	80074f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2220      	movs	r2, #32
 80074d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	f043 0220 	orr.w	r2, r3, #32
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e020      	b.n	8007538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	0c1b      	lsrs	r3, r3, #16
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d10c      	bne.n	800751a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	43da      	mvns	r2, r3
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	4013      	ands	r3, r2
 800750c:	b29b      	uxth	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	bf14      	ite	ne
 8007512:	2301      	movne	r3, #1
 8007514:	2300      	moveq	r3, #0
 8007516:	b2db      	uxtb	r3, r3
 8007518:	e00b      	b.n	8007532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	43da      	mvns	r2, r3
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	4013      	ands	r3, r2
 8007526:	b29b      	uxth	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	bf14      	ite	ne
 800752c:	2301      	movne	r3, #1
 800752e:	2300      	moveq	r3, #0
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d18d      	bne.n	8007452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800754c:	e02d      	b.n	80075aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 f8ce 	bl	80076f0 <I2C_IsAcknowledgeFailed>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e02d      	b.n	80075ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007564:	d021      	beq.n	80075aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007566:	f7fe feab 	bl	80062c0 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	429a      	cmp	r2, r3
 8007574:	d302      	bcc.n	800757c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d116      	bne.n	80075aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2220      	movs	r2, #32
 8007586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	f043 0220 	orr.w	r2, r3, #32
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e007      	b.n	80075ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b4:	2b80      	cmp	r3, #128	; 0x80
 80075b6:	d1ca      	bne.n	800754e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075ce:	e02d      	b.n	800762c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 f88d 	bl	80076f0 <I2C_IsAcknowledgeFailed>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d001      	beq.n	80075e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e02d      	b.n	800763c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e6:	d021      	beq.n	800762c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075e8:	f7fe fe6a 	bl	80062c0 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d302      	bcc.n	80075fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d116      	bne.n	800762c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2220      	movs	r2, #32
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	f043 0220 	orr.w	r2, r3, #32
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e007      	b.n	800763c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	f003 0304 	and.w	r3, r3, #4
 8007636:	2b04      	cmp	r3, #4
 8007638:	d1ca      	bne.n	80075d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007650:	e042      	b.n	80076d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	f003 0310 	and.w	r3, r3, #16
 800765c:	2b10      	cmp	r3, #16
 800765e:	d119      	bne.n	8007694 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f06f 0210 	mvn.w	r2, #16
 8007668:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e029      	b.n	80076e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007694:	f7fe fe14 	bl	80062c0 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d302      	bcc.n	80076aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d116      	bne.n	80076d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2220      	movs	r2, #32
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c4:	f043 0220 	orr.w	r2, r3, #32
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e007      	b.n	80076e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e2:	2b40      	cmp	r3, #64	; 0x40
 80076e4:	d1b5      	bne.n	8007652 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007706:	d11b      	bne.n	8007740 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007710:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2220      	movs	r2, #32
 800771c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772c:	f043 0204 	orr.w	r2, r3, #4
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e000      	b.n	8007742 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
	...

08007750 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e264      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	2b00      	cmp	r3, #0
 800776c:	d075      	beq.n	800785a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800776e:	4ba3      	ldr	r3, [pc, #652]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f003 030c 	and.w	r3, r3, #12
 8007776:	2b04      	cmp	r3, #4
 8007778:	d00c      	beq.n	8007794 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800777a:	4ba0      	ldr	r3, [pc, #640]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007782:	2b08      	cmp	r3, #8
 8007784:	d112      	bne.n	80077ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007786:	4b9d      	ldr	r3, [pc, #628]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800778e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007792:	d10b      	bne.n	80077ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007794:	4b99      	ldr	r3, [pc, #612]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d05b      	beq.n	8007858 <HAL_RCC_OscConfig+0x108>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d157      	bne.n	8007858 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e23f      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b4:	d106      	bne.n	80077c4 <HAL_RCC_OscConfig+0x74>
 80077b6:	4b91      	ldr	r3, [pc, #580]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a90      	ldr	r2, [pc, #576]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	e01d      	b.n	8007800 <HAL_RCC_OscConfig+0xb0>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077cc:	d10c      	bne.n	80077e8 <HAL_RCC_OscConfig+0x98>
 80077ce:	4b8b      	ldr	r3, [pc, #556]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a8a      	ldr	r2, [pc, #552]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	4b88      	ldr	r3, [pc, #544]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a87      	ldr	r2, [pc, #540]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	e00b      	b.n	8007800 <HAL_RCC_OscConfig+0xb0>
 80077e8:	4b84      	ldr	r3, [pc, #528]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a83      	ldr	r2, [pc, #524]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	4b81      	ldr	r3, [pc, #516]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a80      	ldr	r2, [pc, #512]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d013      	beq.n	8007830 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007808:	f7fe fd5a 	bl	80062c0 <HAL_GetTick>
 800780c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800780e:	e008      	b.n	8007822 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007810:	f7fe fd56 	bl	80062c0 <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	2b64      	cmp	r3, #100	; 0x64
 800781c:	d901      	bls.n	8007822 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e204      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007822:	4b76      	ldr	r3, [pc, #472]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0f0      	beq.n	8007810 <HAL_RCC_OscConfig+0xc0>
 800782e:	e014      	b.n	800785a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007830:	f7fe fd46 	bl	80062c0 <HAL_GetTick>
 8007834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007836:	e008      	b.n	800784a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007838:	f7fe fd42 	bl	80062c0 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	2b64      	cmp	r3, #100	; 0x64
 8007844:	d901      	bls.n	800784a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e1f0      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800784a:	4b6c      	ldr	r3, [pc, #432]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1f0      	bne.n	8007838 <HAL_RCC_OscConfig+0xe8>
 8007856:	e000      	b.n	800785a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d063      	beq.n	800792e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007866:	4b65      	ldr	r3, [pc, #404]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 030c 	and.w	r3, r3, #12
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00b      	beq.n	800788a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007872:	4b62      	ldr	r3, [pc, #392]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800787a:	2b08      	cmp	r3, #8
 800787c:	d11c      	bne.n	80078b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800787e:	4b5f      	ldr	r3, [pc, #380]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d116      	bne.n	80078b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800788a:	4b5c      	ldr	r3, [pc, #368]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	2b00      	cmp	r3, #0
 8007894:	d005      	beq.n	80078a2 <HAL_RCC_OscConfig+0x152>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d001      	beq.n	80078a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e1c4      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078a2:	4b56      	ldr	r3, [pc, #344]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	4952      	ldr	r1, [pc, #328]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078b6:	e03a      	b.n	800792e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d020      	beq.n	8007902 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078c0:	4b4f      	ldr	r3, [pc, #316]	; (8007a00 <HAL_RCC_OscConfig+0x2b0>)
 80078c2:	2201      	movs	r2, #1
 80078c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c6:	f7fe fcfb 	bl	80062c0 <HAL_GetTick>
 80078ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078cc:	e008      	b.n	80078e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078ce:	f7fe fcf7 	bl	80062c0 <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d901      	bls.n	80078e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e1a5      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078e0:	4b46      	ldr	r3, [pc, #280]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d0f0      	beq.n	80078ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078ec:	4b43      	ldr	r3, [pc, #268]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	4940      	ldr	r1, [pc, #256]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	600b      	str	r3, [r1, #0]
 8007900:	e015      	b.n	800792e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007902:	4b3f      	ldr	r3, [pc, #252]	; (8007a00 <HAL_RCC_OscConfig+0x2b0>)
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007908:	f7fe fcda 	bl	80062c0 <HAL_GetTick>
 800790c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800790e:	e008      	b.n	8007922 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007910:	f7fe fcd6 	bl	80062c0 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e184      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007922:	4b36      	ldr	r3, [pc, #216]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f0      	bne.n	8007910 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0308 	and.w	r3, r3, #8
 8007936:	2b00      	cmp	r3, #0
 8007938:	d030      	beq.n	800799c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d016      	beq.n	8007970 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007942:	4b30      	ldr	r3, [pc, #192]	; (8007a04 <HAL_RCC_OscConfig+0x2b4>)
 8007944:	2201      	movs	r2, #1
 8007946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007948:	f7fe fcba 	bl	80062c0 <HAL_GetTick>
 800794c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800794e:	e008      	b.n	8007962 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007950:	f7fe fcb6 	bl	80062c0 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	2b02      	cmp	r3, #2
 800795c:	d901      	bls.n	8007962 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e164      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007962:	4b26      	ldr	r3, [pc, #152]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d0f0      	beq.n	8007950 <HAL_RCC_OscConfig+0x200>
 800796e:	e015      	b.n	800799c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007970:	4b24      	ldr	r3, [pc, #144]	; (8007a04 <HAL_RCC_OscConfig+0x2b4>)
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007976:	f7fe fca3 	bl	80062c0 <HAL_GetTick>
 800797a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800797c:	e008      	b.n	8007990 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800797e:	f7fe fc9f 	bl	80062c0 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	2b02      	cmp	r3, #2
 800798a:	d901      	bls.n	8007990 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e14d      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007990:	4b1a      	ldr	r3, [pc, #104]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1f0      	bne.n	800797e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0304 	and.w	r3, r3, #4
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 80a0 	beq.w	8007aea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079aa:	2300      	movs	r3, #0
 80079ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079ae:	4b13      	ldr	r3, [pc, #76]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80079b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10f      	bne.n	80079da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079ba:	2300      	movs	r3, #0
 80079bc:	60bb      	str	r3, [r7, #8]
 80079be:	4b0f      	ldr	r3, [pc, #60]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80079c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c2:	4a0e      	ldr	r2, [pc, #56]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80079c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079c8:	6413      	str	r3, [r2, #64]	; 0x40
 80079ca:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079d2:	60bb      	str	r3, [r7, #8]
 80079d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079d6:	2301      	movs	r3, #1
 80079d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079da:	4b0b      	ldr	r3, [pc, #44]	; (8007a08 <HAL_RCC_OscConfig+0x2b8>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d121      	bne.n	8007a2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079e6:	4b08      	ldr	r3, [pc, #32]	; (8007a08 <HAL_RCC_OscConfig+0x2b8>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a07      	ldr	r2, [pc, #28]	; (8007a08 <HAL_RCC_OscConfig+0x2b8>)
 80079ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079f2:	f7fe fc65 	bl	80062c0 <HAL_GetTick>
 80079f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079f8:	e011      	b.n	8007a1e <HAL_RCC_OscConfig+0x2ce>
 80079fa:	bf00      	nop
 80079fc:	40023800 	.word	0x40023800
 8007a00:	42470000 	.word	0x42470000
 8007a04:	42470e80 	.word	0x42470e80
 8007a08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a0c:	f7fe fc58 	bl	80062c0 <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d901      	bls.n	8007a1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e106      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a1e:	4b85      	ldr	r3, [pc, #532]	; (8007c34 <HAL_RCC_OscConfig+0x4e4>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d0f0      	beq.n	8007a0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d106      	bne.n	8007a40 <HAL_RCC_OscConfig+0x2f0>
 8007a32:	4b81      	ldr	r3, [pc, #516]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a36:	4a80      	ldr	r2, [pc, #512]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a38:	f043 0301 	orr.w	r3, r3, #1
 8007a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a3e:	e01c      	b.n	8007a7a <HAL_RCC_OscConfig+0x32a>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	2b05      	cmp	r3, #5
 8007a46:	d10c      	bne.n	8007a62 <HAL_RCC_OscConfig+0x312>
 8007a48:	4b7b      	ldr	r3, [pc, #492]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4c:	4a7a      	ldr	r2, [pc, #488]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a4e:	f043 0304 	orr.w	r3, r3, #4
 8007a52:	6713      	str	r3, [r2, #112]	; 0x70
 8007a54:	4b78      	ldr	r3, [pc, #480]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a58:	4a77      	ldr	r2, [pc, #476]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a5a:	f043 0301 	orr.w	r3, r3, #1
 8007a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a60:	e00b      	b.n	8007a7a <HAL_RCC_OscConfig+0x32a>
 8007a62:	4b75      	ldr	r3, [pc, #468]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a66:	4a74      	ldr	r2, [pc, #464]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a68:	f023 0301 	bic.w	r3, r3, #1
 8007a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a6e:	4b72      	ldr	r3, [pc, #456]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a72:	4a71      	ldr	r2, [pc, #452]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a74:	f023 0304 	bic.w	r3, r3, #4
 8007a78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d015      	beq.n	8007aae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a82:	f7fe fc1d 	bl	80062c0 <HAL_GetTick>
 8007a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a88:	e00a      	b.n	8007aa0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a8a:	f7fe fc19 	bl	80062c0 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d901      	bls.n	8007aa0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e0c5      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aa0:	4b65      	ldr	r3, [pc, #404]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d0ee      	beq.n	8007a8a <HAL_RCC_OscConfig+0x33a>
 8007aac:	e014      	b.n	8007ad8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007aae:	f7fe fc07 	bl	80062c0 <HAL_GetTick>
 8007ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ab4:	e00a      	b.n	8007acc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ab6:	f7fe fc03 	bl	80062c0 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d901      	bls.n	8007acc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e0af      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007acc:	4b5a      	ldr	r3, [pc, #360]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1ee      	bne.n	8007ab6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d105      	bne.n	8007aea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ade:	4b56      	ldr	r3, [pc, #344]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	4a55      	ldr	r2, [pc, #340]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ae8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 809b 	beq.w	8007c2a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007af4:	4b50      	ldr	r3, [pc, #320]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f003 030c 	and.w	r3, r3, #12
 8007afc:	2b08      	cmp	r3, #8
 8007afe:	d05c      	beq.n	8007bba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d141      	bne.n	8007b8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b08:	4b4c      	ldr	r3, [pc, #304]	; (8007c3c <HAL_RCC_OscConfig+0x4ec>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b0e:	f7fe fbd7 	bl	80062c0 <HAL_GetTick>
 8007b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b14:	e008      	b.n	8007b28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b16:	f7fe fbd3 	bl	80062c0 <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d901      	bls.n	8007b28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e081      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b28:	4b43      	ldr	r3, [pc, #268]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1f0      	bne.n	8007b16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	69da      	ldr	r2, [r3, #28]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b42:	019b      	lsls	r3, r3, #6
 8007b44:	431a      	orrs	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4a:	085b      	lsrs	r3, r3, #1
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	041b      	lsls	r3, r3, #16
 8007b50:	431a      	orrs	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b56:	061b      	lsls	r3, r3, #24
 8007b58:	4937      	ldr	r1, [pc, #220]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b5e:	4b37      	ldr	r3, [pc, #220]	; (8007c3c <HAL_RCC_OscConfig+0x4ec>)
 8007b60:	2201      	movs	r2, #1
 8007b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b64:	f7fe fbac 	bl	80062c0 <HAL_GetTick>
 8007b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b6a:	e008      	b.n	8007b7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b6c:	f7fe fba8 	bl	80062c0 <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d901      	bls.n	8007b7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e056      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b7e:	4b2e      	ldr	r3, [pc, #184]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d0f0      	beq.n	8007b6c <HAL_RCC_OscConfig+0x41c>
 8007b8a:	e04e      	b.n	8007c2a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b8c:	4b2b      	ldr	r3, [pc, #172]	; (8007c3c <HAL_RCC_OscConfig+0x4ec>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b92:	f7fe fb95 	bl	80062c0 <HAL_GetTick>
 8007b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b98:	e008      	b.n	8007bac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b9a:	f7fe fb91 	bl	80062c0 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d901      	bls.n	8007bac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e03f      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bac:	4b22      	ldr	r3, [pc, #136]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1f0      	bne.n	8007b9a <HAL_RCC_OscConfig+0x44a>
 8007bb8:	e037      	b.n	8007c2a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d101      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e032      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007bc6:	4b1c      	ldr	r3, [pc, #112]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d028      	beq.n	8007c26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d121      	bne.n	8007c26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d11a      	bne.n	8007c26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007bfc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d111      	bne.n	8007c26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0c:	085b      	lsrs	r3, r3, #1
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d107      	bne.n	8007c26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c20:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d001      	beq.n	8007c2a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e000      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	40007000 	.word	0x40007000
 8007c38:	40023800 	.word	0x40023800
 8007c3c:	42470060 	.word	0x42470060

08007c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e0cc      	b.n	8007dee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c54:	4b68      	ldr	r3, [pc, #416]	; (8007df8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0307 	and.w	r3, r3, #7
 8007c5c:	683a      	ldr	r2, [r7, #0]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d90c      	bls.n	8007c7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c62:	4b65      	ldr	r3, [pc, #404]	; (8007df8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c6a:	4b63      	ldr	r3, [pc, #396]	; (8007df8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d001      	beq.n	8007c7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e0b8      	b.n	8007dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d020      	beq.n	8007cca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c94:	4b59      	ldr	r3, [pc, #356]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	4a58      	ldr	r2, [pc, #352]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007c9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0308 	and.w	r3, r3, #8
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cac:	4b53      	ldr	r3, [pc, #332]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	4a52      	ldr	r2, [pc, #328]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007cb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007cb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cb8:	4b50      	ldr	r3, [pc, #320]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	494d      	ldr	r1, [pc, #308]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d044      	beq.n	8007d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d107      	bne.n	8007cee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cde:	4b47      	ldr	r3, [pc, #284]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d119      	bne.n	8007d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e07f      	b.n	8007dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d003      	beq.n	8007cfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d107      	bne.n	8007d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cfe:	4b3f      	ldr	r3, [pc, #252]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d109      	bne.n	8007d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e06f      	b.n	8007dee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d0e:	4b3b      	ldr	r3, [pc, #236]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e067      	b.n	8007dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d1e:	4b37      	ldr	r3, [pc, #220]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f023 0203 	bic.w	r2, r3, #3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	4934      	ldr	r1, [pc, #208]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d30:	f7fe fac6 	bl	80062c0 <HAL_GetTick>
 8007d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d36:	e00a      	b.n	8007d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d38:	f7fe fac2 	bl	80062c0 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d901      	bls.n	8007d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e04f      	b.n	8007dee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d4e:	4b2b      	ldr	r3, [pc, #172]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f003 020c 	and.w	r2, r3, #12
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d1eb      	bne.n	8007d38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d60:	4b25      	ldr	r3, [pc, #148]	; (8007df8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0307 	and.w	r3, r3, #7
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d20c      	bcs.n	8007d88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d6e:	4b22      	ldr	r3, [pc, #136]	; (8007df8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	b2d2      	uxtb	r2, r2
 8007d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d76:	4b20      	ldr	r3, [pc, #128]	; (8007df8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0307 	and.w	r3, r3, #7
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d001      	beq.n	8007d88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e032      	b.n	8007dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0304 	and.w	r3, r3, #4
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d008      	beq.n	8007da6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d94:	4b19      	ldr	r3, [pc, #100]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	4916      	ldr	r1, [pc, #88]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0308 	and.w	r3, r3, #8
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d009      	beq.n	8007dc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007db2:	4b12      	ldr	r3, [pc, #72]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	00db      	lsls	r3, r3, #3
 8007dc0:	490e      	ldr	r1, [pc, #56]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007dc6:	f000 f821 	bl	8007e0c <HAL_RCC_GetSysClockFreq>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	4b0b      	ldr	r3, [pc, #44]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	091b      	lsrs	r3, r3, #4
 8007dd2:	f003 030f 	and.w	r3, r3, #15
 8007dd6:	490a      	ldr	r1, [pc, #40]	; (8007e00 <HAL_RCC_ClockConfig+0x1c0>)
 8007dd8:	5ccb      	ldrb	r3, [r1, r3]
 8007dda:	fa22 f303 	lsr.w	r3, r2, r3
 8007dde:	4a09      	ldr	r2, [pc, #36]	; (8007e04 <HAL_RCC_ClockConfig+0x1c4>)
 8007de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007de2:	4b09      	ldr	r3, [pc, #36]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fe fa26 	bl	8006238 <HAL_InitTick>

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	40023c00 	.word	0x40023c00
 8007dfc:	40023800 	.word	0x40023800
 8007e00:	0800afd8 	.word	0x0800afd8
 8007e04:	200002bc 	.word	0x200002bc
 8007e08:	200002c0 	.word	0x200002c0

08007e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	607b      	str	r3, [r7, #4]
 8007e18:	2300      	movs	r3, #0
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e24:	4b67      	ldr	r3, [pc, #412]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f003 030c 	and.w	r3, r3, #12
 8007e2c:	2b08      	cmp	r3, #8
 8007e2e:	d00d      	beq.n	8007e4c <HAL_RCC_GetSysClockFreq+0x40>
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	f200 80bd 	bhi.w	8007fb0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <HAL_RCC_GetSysClockFreq+0x34>
 8007e3a:	2b04      	cmp	r3, #4
 8007e3c:	d003      	beq.n	8007e46 <HAL_RCC_GetSysClockFreq+0x3a>
 8007e3e:	e0b7      	b.n	8007fb0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e40:	4b61      	ldr	r3, [pc, #388]	; (8007fc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007e42:	60bb      	str	r3, [r7, #8]
       break;
 8007e44:	e0b7      	b.n	8007fb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e46:	4b61      	ldr	r3, [pc, #388]	; (8007fcc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007e48:	60bb      	str	r3, [r7, #8]
      break;
 8007e4a:	e0b4      	b.n	8007fb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e4c:	4b5d      	ldr	r3, [pc, #372]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e56:	4b5b      	ldr	r3, [pc, #364]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d04d      	beq.n	8007efe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e62:	4b58      	ldr	r3, [pc, #352]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	099b      	lsrs	r3, r3, #6
 8007e68:	461a      	mov	r2, r3
 8007e6a:	f04f 0300 	mov.w	r3, #0
 8007e6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007e72:	f04f 0100 	mov.w	r1, #0
 8007e76:	ea02 0800 	and.w	r8, r2, r0
 8007e7a:	ea03 0901 	and.w	r9, r3, r1
 8007e7e:	4640      	mov	r0, r8
 8007e80:	4649      	mov	r1, r9
 8007e82:	f04f 0200 	mov.w	r2, #0
 8007e86:	f04f 0300 	mov.w	r3, #0
 8007e8a:	014b      	lsls	r3, r1, #5
 8007e8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007e90:	0142      	lsls	r2, r0, #5
 8007e92:	4610      	mov	r0, r2
 8007e94:	4619      	mov	r1, r3
 8007e96:	ebb0 0008 	subs.w	r0, r0, r8
 8007e9a:	eb61 0109 	sbc.w	r1, r1, r9
 8007e9e:	f04f 0200 	mov.w	r2, #0
 8007ea2:	f04f 0300 	mov.w	r3, #0
 8007ea6:	018b      	lsls	r3, r1, #6
 8007ea8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007eac:	0182      	lsls	r2, r0, #6
 8007eae:	1a12      	subs	r2, r2, r0
 8007eb0:	eb63 0301 	sbc.w	r3, r3, r1
 8007eb4:	f04f 0000 	mov.w	r0, #0
 8007eb8:	f04f 0100 	mov.w	r1, #0
 8007ebc:	00d9      	lsls	r1, r3, #3
 8007ebe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ec2:	00d0      	lsls	r0, r2, #3
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	eb12 0208 	adds.w	r2, r2, r8
 8007ecc:	eb43 0309 	adc.w	r3, r3, r9
 8007ed0:	f04f 0000 	mov.w	r0, #0
 8007ed4:	f04f 0100 	mov.w	r1, #0
 8007ed8:	0259      	lsls	r1, r3, #9
 8007eda:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007ede:	0250      	lsls	r0, r2, #9
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	461a      	mov	r2, r3
 8007eec:	f04f 0300 	mov.w	r3, #0
 8007ef0:	f7f8 fe5a 	bl	8000ba8 <__aeabi_uldivmod>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	4613      	mov	r3, r2
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	e04a      	b.n	8007f94 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007efe:	4b31      	ldr	r3, [pc, #196]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	099b      	lsrs	r3, r3, #6
 8007f04:	461a      	mov	r2, r3
 8007f06:	f04f 0300 	mov.w	r3, #0
 8007f0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007f0e:	f04f 0100 	mov.w	r1, #0
 8007f12:	ea02 0400 	and.w	r4, r2, r0
 8007f16:	ea03 0501 	and.w	r5, r3, r1
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	f04f 0200 	mov.w	r2, #0
 8007f22:	f04f 0300 	mov.w	r3, #0
 8007f26:	014b      	lsls	r3, r1, #5
 8007f28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007f2c:	0142      	lsls	r2, r0, #5
 8007f2e:	4610      	mov	r0, r2
 8007f30:	4619      	mov	r1, r3
 8007f32:	1b00      	subs	r0, r0, r4
 8007f34:	eb61 0105 	sbc.w	r1, r1, r5
 8007f38:	f04f 0200 	mov.w	r2, #0
 8007f3c:	f04f 0300 	mov.w	r3, #0
 8007f40:	018b      	lsls	r3, r1, #6
 8007f42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007f46:	0182      	lsls	r2, r0, #6
 8007f48:	1a12      	subs	r2, r2, r0
 8007f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8007f4e:	f04f 0000 	mov.w	r0, #0
 8007f52:	f04f 0100 	mov.w	r1, #0
 8007f56:	00d9      	lsls	r1, r3, #3
 8007f58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f5c:	00d0      	lsls	r0, r2, #3
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	1912      	adds	r2, r2, r4
 8007f64:	eb45 0303 	adc.w	r3, r5, r3
 8007f68:	f04f 0000 	mov.w	r0, #0
 8007f6c:	f04f 0100 	mov.w	r1, #0
 8007f70:	0299      	lsls	r1, r3, #10
 8007f72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007f76:	0290      	lsls	r0, r2, #10
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	4619      	mov	r1, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	461a      	mov	r2, r3
 8007f84:	f04f 0300 	mov.w	r3, #0
 8007f88:	f7f8 fe0e 	bl	8000ba8 <__aeabi_uldivmod>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4613      	mov	r3, r2
 8007f92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f94:	4b0b      	ldr	r3, [pc, #44]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	0c1b      	lsrs	r3, r3, #16
 8007f9a:	f003 0303 	and.w	r3, r3, #3
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	005b      	lsls	r3, r3, #1
 8007fa2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fac:	60bb      	str	r3, [r7, #8]
      break;
 8007fae:	e002      	b.n	8007fb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fb0:	4b05      	ldr	r3, [pc, #20]	; (8007fc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007fb2:	60bb      	str	r3, [r7, #8]
      break;
 8007fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007fc2:	bf00      	nop
 8007fc4:	40023800 	.word	0x40023800
 8007fc8:	00f42400 	.word	0x00f42400
 8007fcc:	007a1200 	.word	0x007a1200

08007fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fd4:	4b03      	ldr	r3, [pc, #12]	; (8007fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	200002bc 	.word	0x200002bc

08007fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007fec:	f7ff fff0 	bl	8007fd0 <HAL_RCC_GetHCLKFreq>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	4b05      	ldr	r3, [pc, #20]	; (8008008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	0a9b      	lsrs	r3, r3, #10
 8007ff8:	f003 0307 	and.w	r3, r3, #7
 8007ffc:	4903      	ldr	r1, [pc, #12]	; (800800c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ffe:	5ccb      	ldrb	r3, [r1, r3]
 8008000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008004:	4618      	mov	r0, r3
 8008006:	bd80      	pop	{r7, pc}
 8008008:	40023800 	.word	0x40023800
 800800c:	0800afe8 	.word	0x0800afe8

08008010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008014:	f7ff ffdc 	bl	8007fd0 <HAL_RCC_GetHCLKFreq>
 8008018:	4602      	mov	r2, r0
 800801a:	4b05      	ldr	r3, [pc, #20]	; (8008030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	0b5b      	lsrs	r3, r3, #13
 8008020:	f003 0307 	and.w	r3, r3, #7
 8008024:	4903      	ldr	r1, [pc, #12]	; (8008034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008026:	5ccb      	ldrb	r3, [r1, r3]
 8008028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800802c:	4618      	mov	r0, r3
 800802e:	bd80      	pop	{r7, pc}
 8008030:	40023800 	.word	0x40023800
 8008034:	0800afe8 	.word	0x0800afe8

08008038 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e03f      	b.n	80080ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d106      	bne.n	8008064 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f7fe f856 	bl	8006110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2224      	movs	r2, #36	; 0x24
 8008068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68da      	ldr	r2, [r3, #12]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800807a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f829 	bl	80080d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	691a      	ldr	r2, [r3, #16]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008090:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	695a      	ldr	r2, [r3, #20]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68da      	ldr	r2, [r3, #12]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2220      	movs	r2, #32
 80080bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2220      	movs	r2, #32
 80080c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
	...

080080d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d8:	b09f      	sub	sp, #124	; 0x7c
 80080da:	af00      	add	r7, sp, #0
 80080dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ea:	68d9      	ldr	r1, [r3, #12]
 80080ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	ea40 0301 	orr.w	r3, r0, r1
 80080f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f8:	689a      	ldr	r2, [r3, #8]
 80080fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	431a      	orrs	r2, r3
 8008100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	431a      	orrs	r2, r3
 8008106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	4313      	orrs	r3, r2
 800810c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800810e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008118:	f021 010c 	bic.w	r1, r1, #12
 800811c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008122:	430b      	orrs	r3, r1
 8008124:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008132:	6999      	ldr	r1, [r3, #24]
 8008134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	ea40 0301 	orr.w	r3, r0, r1
 800813c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800813e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	4bc5      	ldr	r3, [pc, #788]	; (8008458 <UART_SetConfig+0x384>)
 8008144:	429a      	cmp	r2, r3
 8008146:	d004      	beq.n	8008152 <UART_SetConfig+0x7e>
 8008148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	4bc3      	ldr	r3, [pc, #780]	; (800845c <UART_SetConfig+0x388>)
 800814e:	429a      	cmp	r2, r3
 8008150:	d103      	bne.n	800815a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008152:	f7ff ff5d 	bl	8008010 <HAL_RCC_GetPCLK2Freq>
 8008156:	6778      	str	r0, [r7, #116]	; 0x74
 8008158:	e002      	b.n	8008160 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800815a:	f7ff ff45 	bl	8007fe8 <HAL_RCC_GetPCLK1Freq>
 800815e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008168:	f040 80b6 	bne.w	80082d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800816c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800816e:	461c      	mov	r4, r3
 8008170:	f04f 0500 	mov.w	r5, #0
 8008174:	4622      	mov	r2, r4
 8008176:	462b      	mov	r3, r5
 8008178:	1891      	adds	r1, r2, r2
 800817a:	6439      	str	r1, [r7, #64]	; 0x40
 800817c:	415b      	adcs	r3, r3
 800817e:	647b      	str	r3, [r7, #68]	; 0x44
 8008180:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008184:	1912      	adds	r2, r2, r4
 8008186:	eb45 0303 	adc.w	r3, r5, r3
 800818a:	f04f 0000 	mov.w	r0, #0
 800818e:	f04f 0100 	mov.w	r1, #0
 8008192:	00d9      	lsls	r1, r3, #3
 8008194:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008198:	00d0      	lsls	r0, r2, #3
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	1911      	adds	r1, r2, r4
 80081a0:	6639      	str	r1, [r7, #96]	; 0x60
 80081a2:	416b      	adcs	r3, r5
 80081a4:	667b      	str	r3, [r7, #100]	; 0x64
 80081a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	461a      	mov	r2, r3
 80081ac:	f04f 0300 	mov.w	r3, #0
 80081b0:	1891      	adds	r1, r2, r2
 80081b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80081b4:	415b      	adcs	r3, r3
 80081b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80081c0:	f7f8 fcf2 	bl	8000ba8 <__aeabi_uldivmod>
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	4ba5      	ldr	r3, [pc, #660]	; (8008460 <UART_SetConfig+0x38c>)
 80081ca:	fba3 2302 	umull	r2, r3, r3, r2
 80081ce:	095b      	lsrs	r3, r3, #5
 80081d0:	011e      	lsls	r6, r3, #4
 80081d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081d4:	461c      	mov	r4, r3
 80081d6:	f04f 0500 	mov.w	r5, #0
 80081da:	4622      	mov	r2, r4
 80081dc:	462b      	mov	r3, r5
 80081de:	1891      	adds	r1, r2, r2
 80081e0:	6339      	str	r1, [r7, #48]	; 0x30
 80081e2:	415b      	adcs	r3, r3
 80081e4:	637b      	str	r3, [r7, #52]	; 0x34
 80081e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80081ea:	1912      	adds	r2, r2, r4
 80081ec:	eb45 0303 	adc.w	r3, r5, r3
 80081f0:	f04f 0000 	mov.w	r0, #0
 80081f4:	f04f 0100 	mov.w	r1, #0
 80081f8:	00d9      	lsls	r1, r3, #3
 80081fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081fe:	00d0      	lsls	r0, r2, #3
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	1911      	adds	r1, r2, r4
 8008206:	65b9      	str	r1, [r7, #88]	; 0x58
 8008208:	416b      	adcs	r3, r5
 800820a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800820c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	461a      	mov	r2, r3
 8008212:	f04f 0300 	mov.w	r3, #0
 8008216:	1891      	adds	r1, r2, r2
 8008218:	62b9      	str	r1, [r7, #40]	; 0x28
 800821a:	415b      	adcs	r3, r3
 800821c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800821e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008222:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008226:	f7f8 fcbf 	bl	8000ba8 <__aeabi_uldivmod>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4b8c      	ldr	r3, [pc, #560]	; (8008460 <UART_SetConfig+0x38c>)
 8008230:	fba3 1302 	umull	r1, r3, r3, r2
 8008234:	095b      	lsrs	r3, r3, #5
 8008236:	2164      	movs	r1, #100	; 0x64
 8008238:	fb01 f303 	mul.w	r3, r1, r3
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	00db      	lsls	r3, r3, #3
 8008240:	3332      	adds	r3, #50	; 0x32
 8008242:	4a87      	ldr	r2, [pc, #540]	; (8008460 <UART_SetConfig+0x38c>)
 8008244:	fba2 2303 	umull	r2, r3, r2, r3
 8008248:	095b      	lsrs	r3, r3, #5
 800824a:	005b      	lsls	r3, r3, #1
 800824c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008250:	441e      	add	r6, r3
 8008252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008254:	4618      	mov	r0, r3
 8008256:	f04f 0100 	mov.w	r1, #0
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	1894      	adds	r4, r2, r2
 8008260:	623c      	str	r4, [r7, #32]
 8008262:	415b      	adcs	r3, r3
 8008264:	627b      	str	r3, [r7, #36]	; 0x24
 8008266:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800826a:	1812      	adds	r2, r2, r0
 800826c:	eb41 0303 	adc.w	r3, r1, r3
 8008270:	f04f 0400 	mov.w	r4, #0
 8008274:	f04f 0500 	mov.w	r5, #0
 8008278:	00dd      	lsls	r5, r3, #3
 800827a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800827e:	00d4      	lsls	r4, r2, #3
 8008280:	4622      	mov	r2, r4
 8008282:	462b      	mov	r3, r5
 8008284:	1814      	adds	r4, r2, r0
 8008286:	653c      	str	r4, [r7, #80]	; 0x50
 8008288:	414b      	adcs	r3, r1
 800828a:	657b      	str	r3, [r7, #84]	; 0x54
 800828c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	461a      	mov	r2, r3
 8008292:	f04f 0300 	mov.w	r3, #0
 8008296:	1891      	adds	r1, r2, r2
 8008298:	61b9      	str	r1, [r7, #24]
 800829a:	415b      	adcs	r3, r3
 800829c:	61fb      	str	r3, [r7, #28]
 800829e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80082a6:	f7f8 fc7f 	bl	8000ba8 <__aeabi_uldivmod>
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	4b6c      	ldr	r3, [pc, #432]	; (8008460 <UART_SetConfig+0x38c>)
 80082b0:	fba3 1302 	umull	r1, r3, r3, r2
 80082b4:	095b      	lsrs	r3, r3, #5
 80082b6:	2164      	movs	r1, #100	; 0x64
 80082b8:	fb01 f303 	mul.w	r3, r1, r3
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	00db      	lsls	r3, r3, #3
 80082c0:	3332      	adds	r3, #50	; 0x32
 80082c2:	4a67      	ldr	r2, [pc, #412]	; (8008460 <UART_SetConfig+0x38c>)
 80082c4:	fba2 2303 	umull	r2, r3, r2, r3
 80082c8:	095b      	lsrs	r3, r3, #5
 80082ca:	f003 0207 	and.w	r2, r3, #7
 80082ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4432      	add	r2, r6
 80082d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80082d6:	e0b9      	b.n	800844c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082da:	461c      	mov	r4, r3
 80082dc:	f04f 0500 	mov.w	r5, #0
 80082e0:	4622      	mov	r2, r4
 80082e2:	462b      	mov	r3, r5
 80082e4:	1891      	adds	r1, r2, r2
 80082e6:	6139      	str	r1, [r7, #16]
 80082e8:	415b      	adcs	r3, r3
 80082ea:	617b      	str	r3, [r7, #20]
 80082ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80082f0:	1912      	adds	r2, r2, r4
 80082f2:	eb45 0303 	adc.w	r3, r5, r3
 80082f6:	f04f 0000 	mov.w	r0, #0
 80082fa:	f04f 0100 	mov.w	r1, #0
 80082fe:	00d9      	lsls	r1, r3, #3
 8008300:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008304:	00d0      	lsls	r0, r2, #3
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	eb12 0804 	adds.w	r8, r2, r4
 800830e:	eb43 0905 	adc.w	r9, r3, r5
 8008312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	4618      	mov	r0, r3
 8008318:	f04f 0100 	mov.w	r1, #0
 800831c:	f04f 0200 	mov.w	r2, #0
 8008320:	f04f 0300 	mov.w	r3, #0
 8008324:	008b      	lsls	r3, r1, #2
 8008326:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800832a:	0082      	lsls	r2, r0, #2
 800832c:	4640      	mov	r0, r8
 800832e:	4649      	mov	r1, r9
 8008330:	f7f8 fc3a 	bl	8000ba8 <__aeabi_uldivmod>
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	4b49      	ldr	r3, [pc, #292]	; (8008460 <UART_SetConfig+0x38c>)
 800833a:	fba3 2302 	umull	r2, r3, r3, r2
 800833e:	095b      	lsrs	r3, r3, #5
 8008340:	011e      	lsls	r6, r3, #4
 8008342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008344:	4618      	mov	r0, r3
 8008346:	f04f 0100 	mov.w	r1, #0
 800834a:	4602      	mov	r2, r0
 800834c:	460b      	mov	r3, r1
 800834e:	1894      	adds	r4, r2, r2
 8008350:	60bc      	str	r4, [r7, #8]
 8008352:	415b      	adcs	r3, r3
 8008354:	60fb      	str	r3, [r7, #12]
 8008356:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800835a:	1812      	adds	r2, r2, r0
 800835c:	eb41 0303 	adc.w	r3, r1, r3
 8008360:	f04f 0400 	mov.w	r4, #0
 8008364:	f04f 0500 	mov.w	r5, #0
 8008368:	00dd      	lsls	r5, r3, #3
 800836a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800836e:	00d4      	lsls	r4, r2, #3
 8008370:	4622      	mov	r2, r4
 8008372:	462b      	mov	r3, r5
 8008374:	1814      	adds	r4, r2, r0
 8008376:	64bc      	str	r4, [r7, #72]	; 0x48
 8008378:	414b      	adcs	r3, r1
 800837a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800837c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	4618      	mov	r0, r3
 8008382:	f04f 0100 	mov.w	r1, #0
 8008386:	f04f 0200 	mov.w	r2, #0
 800838a:	f04f 0300 	mov.w	r3, #0
 800838e:	008b      	lsls	r3, r1, #2
 8008390:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008394:	0082      	lsls	r2, r0, #2
 8008396:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800839a:	f7f8 fc05 	bl	8000ba8 <__aeabi_uldivmod>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4b2f      	ldr	r3, [pc, #188]	; (8008460 <UART_SetConfig+0x38c>)
 80083a4:	fba3 1302 	umull	r1, r3, r3, r2
 80083a8:	095b      	lsrs	r3, r3, #5
 80083aa:	2164      	movs	r1, #100	; 0x64
 80083ac:	fb01 f303 	mul.w	r3, r1, r3
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	011b      	lsls	r3, r3, #4
 80083b4:	3332      	adds	r3, #50	; 0x32
 80083b6:	4a2a      	ldr	r2, [pc, #168]	; (8008460 <UART_SetConfig+0x38c>)
 80083b8:	fba2 2303 	umull	r2, r3, r2, r3
 80083bc:	095b      	lsrs	r3, r3, #5
 80083be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083c2:	441e      	add	r6, r3
 80083c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083c6:	4618      	mov	r0, r3
 80083c8:	f04f 0100 	mov.w	r1, #0
 80083cc:	4602      	mov	r2, r0
 80083ce:	460b      	mov	r3, r1
 80083d0:	1894      	adds	r4, r2, r2
 80083d2:	603c      	str	r4, [r7, #0]
 80083d4:	415b      	adcs	r3, r3
 80083d6:	607b      	str	r3, [r7, #4]
 80083d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083dc:	1812      	adds	r2, r2, r0
 80083de:	eb41 0303 	adc.w	r3, r1, r3
 80083e2:	f04f 0400 	mov.w	r4, #0
 80083e6:	f04f 0500 	mov.w	r5, #0
 80083ea:	00dd      	lsls	r5, r3, #3
 80083ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80083f0:	00d4      	lsls	r4, r2, #3
 80083f2:	4622      	mov	r2, r4
 80083f4:	462b      	mov	r3, r5
 80083f6:	eb12 0a00 	adds.w	sl, r2, r0
 80083fa:	eb43 0b01 	adc.w	fp, r3, r1
 80083fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	4618      	mov	r0, r3
 8008404:	f04f 0100 	mov.w	r1, #0
 8008408:	f04f 0200 	mov.w	r2, #0
 800840c:	f04f 0300 	mov.w	r3, #0
 8008410:	008b      	lsls	r3, r1, #2
 8008412:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008416:	0082      	lsls	r2, r0, #2
 8008418:	4650      	mov	r0, sl
 800841a:	4659      	mov	r1, fp
 800841c:	f7f8 fbc4 	bl	8000ba8 <__aeabi_uldivmod>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	4b0e      	ldr	r3, [pc, #56]	; (8008460 <UART_SetConfig+0x38c>)
 8008426:	fba3 1302 	umull	r1, r3, r3, r2
 800842a:	095b      	lsrs	r3, r3, #5
 800842c:	2164      	movs	r1, #100	; 0x64
 800842e:	fb01 f303 	mul.w	r3, r1, r3
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	011b      	lsls	r3, r3, #4
 8008436:	3332      	adds	r3, #50	; 0x32
 8008438:	4a09      	ldr	r2, [pc, #36]	; (8008460 <UART_SetConfig+0x38c>)
 800843a:	fba2 2303 	umull	r2, r3, r2, r3
 800843e:	095b      	lsrs	r3, r3, #5
 8008440:	f003 020f 	and.w	r2, r3, #15
 8008444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4432      	add	r2, r6
 800844a:	609a      	str	r2, [r3, #8]
}
 800844c:	bf00      	nop
 800844e:	377c      	adds	r7, #124	; 0x7c
 8008450:	46bd      	mov	sp, r7
 8008452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008456:	bf00      	nop
 8008458:	40011000 	.word	0x40011000
 800845c:	40011400 	.word	0x40011400
 8008460:	51eb851f 	.word	0x51eb851f

08008464 <__errno>:
 8008464:	4b01      	ldr	r3, [pc, #4]	; (800846c <__errno+0x8>)
 8008466:	6818      	ldr	r0, [r3, #0]
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	200002c8 	.word	0x200002c8

08008470 <__libc_init_array>:
 8008470:	b570      	push	{r4, r5, r6, lr}
 8008472:	4d0d      	ldr	r5, [pc, #52]	; (80084a8 <__libc_init_array+0x38>)
 8008474:	4c0d      	ldr	r4, [pc, #52]	; (80084ac <__libc_init_array+0x3c>)
 8008476:	1b64      	subs	r4, r4, r5
 8008478:	10a4      	asrs	r4, r4, #2
 800847a:	2600      	movs	r6, #0
 800847c:	42a6      	cmp	r6, r4
 800847e:	d109      	bne.n	8008494 <__libc_init_array+0x24>
 8008480:	4d0b      	ldr	r5, [pc, #44]	; (80084b0 <__libc_init_array+0x40>)
 8008482:	4c0c      	ldr	r4, [pc, #48]	; (80084b4 <__libc_init_array+0x44>)
 8008484:	f002 fd88 	bl	800af98 <_init>
 8008488:	1b64      	subs	r4, r4, r5
 800848a:	10a4      	asrs	r4, r4, #2
 800848c:	2600      	movs	r6, #0
 800848e:	42a6      	cmp	r6, r4
 8008490:	d105      	bne.n	800849e <__libc_init_array+0x2e>
 8008492:	bd70      	pop	{r4, r5, r6, pc}
 8008494:	f855 3b04 	ldr.w	r3, [r5], #4
 8008498:	4798      	blx	r3
 800849a:	3601      	adds	r6, #1
 800849c:	e7ee      	b.n	800847c <__libc_init_array+0xc>
 800849e:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a2:	4798      	blx	r3
 80084a4:	3601      	adds	r6, #1
 80084a6:	e7f2      	b.n	800848e <__libc_init_array+0x1e>
 80084a8:	0800b3dc 	.word	0x0800b3dc
 80084ac:	0800b3dc 	.word	0x0800b3dc
 80084b0:	0800b3dc 	.word	0x0800b3dc
 80084b4:	0800b3e0 	.word	0x0800b3e0

080084b8 <memcpy>:
 80084b8:	440a      	add	r2, r1
 80084ba:	4291      	cmp	r1, r2
 80084bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80084c0:	d100      	bne.n	80084c4 <memcpy+0xc>
 80084c2:	4770      	bx	lr
 80084c4:	b510      	push	{r4, lr}
 80084c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ce:	4291      	cmp	r1, r2
 80084d0:	d1f9      	bne.n	80084c6 <memcpy+0xe>
 80084d2:	bd10      	pop	{r4, pc}

080084d4 <memset>:
 80084d4:	4402      	add	r2, r0
 80084d6:	4603      	mov	r3, r0
 80084d8:	4293      	cmp	r3, r2
 80084da:	d100      	bne.n	80084de <memset+0xa>
 80084dc:	4770      	bx	lr
 80084de:	f803 1b01 	strb.w	r1, [r3], #1
 80084e2:	e7f9      	b.n	80084d8 <memset+0x4>

080084e4 <__cvt>:
 80084e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084e8:	ec55 4b10 	vmov	r4, r5, d0
 80084ec:	2d00      	cmp	r5, #0
 80084ee:	460e      	mov	r6, r1
 80084f0:	4619      	mov	r1, r3
 80084f2:	462b      	mov	r3, r5
 80084f4:	bfbb      	ittet	lt
 80084f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80084fa:	461d      	movlt	r5, r3
 80084fc:	2300      	movge	r3, #0
 80084fe:	232d      	movlt	r3, #45	; 0x2d
 8008500:	700b      	strb	r3, [r1, #0]
 8008502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008504:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008508:	4691      	mov	r9, r2
 800850a:	f023 0820 	bic.w	r8, r3, #32
 800850e:	bfbc      	itt	lt
 8008510:	4622      	movlt	r2, r4
 8008512:	4614      	movlt	r4, r2
 8008514:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008518:	d005      	beq.n	8008526 <__cvt+0x42>
 800851a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800851e:	d100      	bne.n	8008522 <__cvt+0x3e>
 8008520:	3601      	adds	r6, #1
 8008522:	2102      	movs	r1, #2
 8008524:	e000      	b.n	8008528 <__cvt+0x44>
 8008526:	2103      	movs	r1, #3
 8008528:	ab03      	add	r3, sp, #12
 800852a:	9301      	str	r3, [sp, #4]
 800852c:	ab02      	add	r3, sp, #8
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	ec45 4b10 	vmov	d0, r4, r5
 8008534:	4653      	mov	r3, sl
 8008536:	4632      	mov	r2, r6
 8008538:	f000 fe22 	bl	8009180 <_dtoa_r>
 800853c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008540:	4607      	mov	r7, r0
 8008542:	d102      	bne.n	800854a <__cvt+0x66>
 8008544:	f019 0f01 	tst.w	r9, #1
 8008548:	d022      	beq.n	8008590 <__cvt+0xac>
 800854a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800854e:	eb07 0906 	add.w	r9, r7, r6
 8008552:	d110      	bne.n	8008576 <__cvt+0x92>
 8008554:	783b      	ldrb	r3, [r7, #0]
 8008556:	2b30      	cmp	r3, #48	; 0x30
 8008558:	d10a      	bne.n	8008570 <__cvt+0x8c>
 800855a:	2200      	movs	r2, #0
 800855c:	2300      	movs	r3, #0
 800855e:	4620      	mov	r0, r4
 8008560:	4629      	mov	r1, r5
 8008562:	f7f8 fab1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008566:	b918      	cbnz	r0, 8008570 <__cvt+0x8c>
 8008568:	f1c6 0601 	rsb	r6, r6, #1
 800856c:	f8ca 6000 	str.w	r6, [sl]
 8008570:	f8da 3000 	ldr.w	r3, [sl]
 8008574:	4499      	add	r9, r3
 8008576:	2200      	movs	r2, #0
 8008578:	2300      	movs	r3, #0
 800857a:	4620      	mov	r0, r4
 800857c:	4629      	mov	r1, r5
 800857e:	f7f8 faa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008582:	b108      	cbz	r0, 8008588 <__cvt+0xa4>
 8008584:	f8cd 900c 	str.w	r9, [sp, #12]
 8008588:	2230      	movs	r2, #48	; 0x30
 800858a:	9b03      	ldr	r3, [sp, #12]
 800858c:	454b      	cmp	r3, r9
 800858e:	d307      	bcc.n	80085a0 <__cvt+0xbc>
 8008590:	9b03      	ldr	r3, [sp, #12]
 8008592:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008594:	1bdb      	subs	r3, r3, r7
 8008596:	4638      	mov	r0, r7
 8008598:	6013      	str	r3, [r2, #0]
 800859a:	b004      	add	sp, #16
 800859c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a0:	1c59      	adds	r1, r3, #1
 80085a2:	9103      	str	r1, [sp, #12]
 80085a4:	701a      	strb	r2, [r3, #0]
 80085a6:	e7f0      	b.n	800858a <__cvt+0xa6>

080085a8 <__exponent>:
 80085a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085aa:	4603      	mov	r3, r0
 80085ac:	2900      	cmp	r1, #0
 80085ae:	bfb8      	it	lt
 80085b0:	4249      	neglt	r1, r1
 80085b2:	f803 2b02 	strb.w	r2, [r3], #2
 80085b6:	bfb4      	ite	lt
 80085b8:	222d      	movlt	r2, #45	; 0x2d
 80085ba:	222b      	movge	r2, #43	; 0x2b
 80085bc:	2909      	cmp	r1, #9
 80085be:	7042      	strb	r2, [r0, #1]
 80085c0:	dd2a      	ble.n	8008618 <__exponent+0x70>
 80085c2:	f10d 0407 	add.w	r4, sp, #7
 80085c6:	46a4      	mov	ip, r4
 80085c8:	270a      	movs	r7, #10
 80085ca:	46a6      	mov	lr, r4
 80085cc:	460a      	mov	r2, r1
 80085ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80085d2:	fb07 1516 	mls	r5, r7, r6, r1
 80085d6:	3530      	adds	r5, #48	; 0x30
 80085d8:	2a63      	cmp	r2, #99	; 0x63
 80085da:	f104 34ff 	add.w	r4, r4, #4294967295
 80085de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80085e2:	4631      	mov	r1, r6
 80085e4:	dcf1      	bgt.n	80085ca <__exponent+0x22>
 80085e6:	3130      	adds	r1, #48	; 0x30
 80085e8:	f1ae 0502 	sub.w	r5, lr, #2
 80085ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80085f0:	1c44      	adds	r4, r0, #1
 80085f2:	4629      	mov	r1, r5
 80085f4:	4561      	cmp	r1, ip
 80085f6:	d30a      	bcc.n	800860e <__exponent+0x66>
 80085f8:	f10d 0209 	add.w	r2, sp, #9
 80085fc:	eba2 020e 	sub.w	r2, r2, lr
 8008600:	4565      	cmp	r5, ip
 8008602:	bf88      	it	hi
 8008604:	2200      	movhi	r2, #0
 8008606:	4413      	add	r3, r2
 8008608:	1a18      	subs	r0, r3, r0
 800860a:	b003      	add	sp, #12
 800860c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800860e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008612:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008616:	e7ed      	b.n	80085f4 <__exponent+0x4c>
 8008618:	2330      	movs	r3, #48	; 0x30
 800861a:	3130      	adds	r1, #48	; 0x30
 800861c:	7083      	strb	r3, [r0, #2]
 800861e:	70c1      	strb	r1, [r0, #3]
 8008620:	1d03      	adds	r3, r0, #4
 8008622:	e7f1      	b.n	8008608 <__exponent+0x60>

08008624 <_printf_float>:
 8008624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008628:	ed2d 8b02 	vpush	{d8}
 800862c:	b08d      	sub	sp, #52	; 0x34
 800862e:	460c      	mov	r4, r1
 8008630:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008634:	4616      	mov	r6, r2
 8008636:	461f      	mov	r7, r3
 8008638:	4605      	mov	r5, r0
 800863a:	f001 fd45 	bl	800a0c8 <_localeconv_r>
 800863e:	f8d0 a000 	ldr.w	sl, [r0]
 8008642:	4650      	mov	r0, sl
 8008644:	f7f7 fdc4 	bl	80001d0 <strlen>
 8008648:	2300      	movs	r3, #0
 800864a:	930a      	str	r3, [sp, #40]	; 0x28
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	9305      	str	r3, [sp, #20]
 8008650:	f8d8 3000 	ldr.w	r3, [r8]
 8008654:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008658:	3307      	adds	r3, #7
 800865a:	f023 0307 	bic.w	r3, r3, #7
 800865e:	f103 0208 	add.w	r2, r3, #8
 8008662:	f8c8 2000 	str.w	r2, [r8]
 8008666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800866e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008672:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008676:	9307      	str	r3, [sp, #28]
 8008678:	f8cd 8018 	str.w	r8, [sp, #24]
 800867c:	ee08 0a10 	vmov	s16, r0
 8008680:	4b9f      	ldr	r3, [pc, #636]	; (8008900 <_printf_float+0x2dc>)
 8008682:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008686:	f04f 32ff 	mov.w	r2, #4294967295
 800868a:	f7f8 fa4f 	bl	8000b2c <__aeabi_dcmpun>
 800868e:	bb88      	cbnz	r0, 80086f4 <_printf_float+0xd0>
 8008690:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008694:	4b9a      	ldr	r3, [pc, #616]	; (8008900 <_printf_float+0x2dc>)
 8008696:	f04f 32ff 	mov.w	r2, #4294967295
 800869a:	f7f8 fa29 	bl	8000af0 <__aeabi_dcmple>
 800869e:	bb48      	cbnz	r0, 80086f4 <_printf_float+0xd0>
 80086a0:	2200      	movs	r2, #0
 80086a2:	2300      	movs	r3, #0
 80086a4:	4640      	mov	r0, r8
 80086a6:	4649      	mov	r1, r9
 80086a8:	f7f8 fa18 	bl	8000adc <__aeabi_dcmplt>
 80086ac:	b110      	cbz	r0, 80086b4 <_printf_float+0x90>
 80086ae:	232d      	movs	r3, #45	; 0x2d
 80086b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086b4:	4b93      	ldr	r3, [pc, #588]	; (8008904 <_printf_float+0x2e0>)
 80086b6:	4894      	ldr	r0, [pc, #592]	; (8008908 <_printf_float+0x2e4>)
 80086b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80086bc:	bf94      	ite	ls
 80086be:	4698      	movls	r8, r3
 80086c0:	4680      	movhi	r8, r0
 80086c2:	2303      	movs	r3, #3
 80086c4:	6123      	str	r3, [r4, #16]
 80086c6:	9b05      	ldr	r3, [sp, #20]
 80086c8:	f023 0204 	bic.w	r2, r3, #4
 80086cc:	6022      	str	r2, [r4, #0]
 80086ce:	f04f 0900 	mov.w	r9, #0
 80086d2:	9700      	str	r7, [sp, #0]
 80086d4:	4633      	mov	r3, r6
 80086d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80086d8:	4621      	mov	r1, r4
 80086da:	4628      	mov	r0, r5
 80086dc:	f000 f9d8 	bl	8008a90 <_printf_common>
 80086e0:	3001      	adds	r0, #1
 80086e2:	f040 8090 	bne.w	8008806 <_printf_float+0x1e2>
 80086e6:	f04f 30ff 	mov.w	r0, #4294967295
 80086ea:	b00d      	add	sp, #52	; 0x34
 80086ec:	ecbd 8b02 	vpop	{d8}
 80086f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f4:	4642      	mov	r2, r8
 80086f6:	464b      	mov	r3, r9
 80086f8:	4640      	mov	r0, r8
 80086fa:	4649      	mov	r1, r9
 80086fc:	f7f8 fa16 	bl	8000b2c <__aeabi_dcmpun>
 8008700:	b140      	cbz	r0, 8008714 <_printf_float+0xf0>
 8008702:	464b      	mov	r3, r9
 8008704:	2b00      	cmp	r3, #0
 8008706:	bfbc      	itt	lt
 8008708:	232d      	movlt	r3, #45	; 0x2d
 800870a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800870e:	487f      	ldr	r0, [pc, #508]	; (800890c <_printf_float+0x2e8>)
 8008710:	4b7f      	ldr	r3, [pc, #508]	; (8008910 <_printf_float+0x2ec>)
 8008712:	e7d1      	b.n	80086b8 <_printf_float+0x94>
 8008714:	6863      	ldr	r3, [r4, #4]
 8008716:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800871a:	9206      	str	r2, [sp, #24]
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	d13f      	bne.n	80087a0 <_printf_float+0x17c>
 8008720:	2306      	movs	r3, #6
 8008722:	6063      	str	r3, [r4, #4]
 8008724:	9b05      	ldr	r3, [sp, #20]
 8008726:	6861      	ldr	r1, [r4, #4]
 8008728:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800872c:	2300      	movs	r3, #0
 800872e:	9303      	str	r3, [sp, #12]
 8008730:	ab0a      	add	r3, sp, #40	; 0x28
 8008732:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008736:	ab09      	add	r3, sp, #36	; 0x24
 8008738:	ec49 8b10 	vmov	d0, r8, r9
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	6022      	str	r2, [r4, #0]
 8008740:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008744:	4628      	mov	r0, r5
 8008746:	f7ff fecd 	bl	80084e4 <__cvt>
 800874a:	9b06      	ldr	r3, [sp, #24]
 800874c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800874e:	2b47      	cmp	r3, #71	; 0x47
 8008750:	4680      	mov	r8, r0
 8008752:	d108      	bne.n	8008766 <_printf_float+0x142>
 8008754:	1cc8      	adds	r0, r1, #3
 8008756:	db02      	blt.n	800875e <_printf_float+0x13a>
 8008758:	6863      	ldr	r3, [r4, #4]
 800875a:	4299      	cmp	r1, r3
 800875c:	dd41      	ble.n	80087e2 <_printf_float+0x1be>
 800875e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008762:	fa5f fb8b 	uxtb.w	fp, fp
 8008766:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800876a:	d820      	bhi.n	80087ae <_printf_float+0x18a>
 800876c:	3901      	subs	r1, #1
 800876e:	465a      	mov	r2, fp
 8008770:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008774:	9109      	str	r1, [sp, #36]	; 0x24
 8008776:	f7ff ff17 	bl	80085a8 <__exponent>
 800877a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800877c:	1813      	adds	r3, r2, r0
 800877e:	2a01      	cmp	r2, #1
 8008780:	4681      	mov	r9, r0
 8008782:	6123      	str	r3, [r4, #16]
 8008784:	dc02      	bgt.n	800878c <_printf_float+0x168>
 8008786:	6822      	ldr	r2, [r4, #0]
 8008788:	07d2      	lsls	r2, r2, #31
 800878a:	d501      	bpl.n	8008790 <_printf_float+0x16c>
 800878c:	3301      	adds	r3, #1
 800878e:	6123      	str	r3, [r4, #16]
 8008790:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008794:	2b00      	cmp	r3, #0
 8008796:	d09c      	beq.n	80086d2 <_printf_float+0xae>
 8008798:	232d      	movs	r3, #45	; 0x2d
 800879a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800879e:	e798      	b.n	80086d2 <_printf_float+0xae>
 80087a0:	9a06      	ldr	r2, [sp, #24]
 80087a2:	2a47      	cmp	r2, #71	; 0x47
 80087a4:	d1be      	bne.n	8008724 <_printf_float+0x100>
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1bc      	bne.n	8008724 <_printf_float+0x100>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e7b9      	b.n	8008722 <_printf_float+0xfe>
 80087ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80087b2:	d118      	bne.n	80087e6 <_printf_float+0x1c2>
 80087b4:	2900      	cmp	r1, #0
 80087b6:	6863      	ldr	r3, [r4, #4]
 80087b8:	dd0b      	ble.n	80087d2 <_printf_float+0x1ae>
 80087ba:	6121      	str	r1, [r4, #16]
 80087bc:	b913      	cbnz	r3, 80087c4 <_printf_float+0x1a0>
 80087be:	6822      	ldr	r2, [r4, #0]
 80087c0:	07d0      	lsls	r0, r2, #31
 80087c2:	d502      	bpl.n	80087ca <_printf_float+0x1a6>
 80087c4:	3301      	adds	r3, #1
 80087c6:	440b      	add	r3, r1
 80087c8:	6123      	str	r3, [r4, #16]
 80087ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80087cc:	f04f 0900 	mov.w	r9, #0
 80087d0:	e7de      	b.n	8008790 <_printf_float+0x16c>
 80087d2:	b913      	cbnz	r3, 80087da <_printf_float+0x1b6>
 80087d4:	6822      	ldr	r2, [r4, #0]
 80087d6:	07d2      	lsls	r2, r2, #31
 80087d8:	d501      	bpl.n	80087de <_printf_float+0x1ba>
 80087da:	3302      	adds	r3, #2
 80087dc:	e7f4      	b.n	80087c8 <_printf_float+0x1a4>
 80087de:	2301      	movs	r3, #1
 80087e0:	e7f2      	b.n	80087c8 <_printf_float+0x1a4>
 80087e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80087e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e8:	4299      	cmp	r1, r3
 80087ea:	db05      	blt.n	80087f8 <_printf_float+0x1d4>
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	6121      	str	r1, [r4, #16]
 80087f0:	07d8      	lsls	r0, r3, #31
 80087f2:	d5ea      	bpl.n	80087ca <_printf_float+0x1a6>
 80087f4:	1c4b      	adds	r3, r1, #1
 80087f6:	e7e7      	b.n	80087c8 <_printf_float+0x1a4>
 80087f8:	2900      	cmp	r1, #0
 80087fa:	bfd4      	ite	le
 80087fc:	f1c1 0202 	rsble	r2, r1, #2
 8008800:	2201      	movgt	r2, #1
 8008802:	4413      	add	r3, r2
 8008804:	e7e0      	b.n	80087c8 <_printf_float+0x1a4>
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	055a      	lsls	r2, r3, #21
 800880a:	d407      	bmi.n	800881c <_printf_float+0x1f8>
 800880c:	6923      	ldr	r3, [r4, #16]
 800880e:	4642      	mov	r2, r8
 8008810:	4631      	mov	r1, r6
 8008812:	4628      	mov	r0, r5
 8008814:	47b8      	blx	r7
 8008816:	3001      	adds	r0, #1
 8008818:	d12c      	bne.n	8008874 <_printf_float+0x250>
 800881a:	e764      	b.n	80086e6 <_printf_float+0xc2>
 800881c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008820:	f240 80e0 	bls.w	80089e4 <_printf_float+0x3c0>
 8008824:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008828:	2200      	movs	r2, #0
 800882a:	2300      	movs	r3, #0
 800882c:	f7f8 f94c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008830:	2800      	cmp	r0, #0
 8008832:	d034      	beq.n	800889e <_printf_float+0x27a>
 8008834:	4a37      	ldr	r2, [pc, #220]	; (8008914 <_printf_float+0x2f0>)
 8008836:	2301      	movs	r3, #1
 8008838:	4631      	mov	r1, r6
 800883a:	4628      	mov	r0, r5
 800883c:	47b8      	blx	r7
 800883e:	3001      	adds	r0, #1
 8008840:	f43f af51 	beq.w	80086e6 <_printf_float+0xc2>
 8008844:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008848:	429a      	cmp	r2, r3
 800884a:	db02      	blt.n	8008852 <_printf_float+0x22e>
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	07d8      	lsls	r0, r3, #31
 8008850:	d510      	bpl.n	8008874 <_printf_float+0x250>
 8008852:	ee18 3a10 	vmov	r3, s16
 8008856:	4652      	mov	r2, sl
 8008858:	4631      	mov	r1, r6
 800885a:	4628      	mov	r0, r5
 800885c:	47b8      	blx	r7
 800885e:	3001      	adds	r0, #1
 8008860:	f43f af41 	beq.w	80086e6 <_printf_float+0xc2>
 8008864:	f04f 0800 	mov.w	r8, #0
 8008868:	f104 091a 	add.w	r9, r4, #26
 800886c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800886e:	3b01      	subs	r3, #1
 8008870:	4543      	cmp	r3, r8
 8008872:	dc09      	bgt.n	8008888 <_printf_float+0x264>
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	079b      	lsls	r3, r3, #30
 8008878:	f100 8105 	bmi.w	8008a86 <_printf_float+0x462>
 800887c:	68e0      	ldr	r0, [r4, #12]
 800887e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008880:	4298      	cmp	r0, r3
 8008882:	bfb8      	it	lt
 8008884:	4618      	movlt	r0, r3
 8008886:	e730      	b.n	80086ea <_printf_float+0xc6>
 8008888:	2301      	movs	r3, #1
 800888a:	464a      	mov	r2, r9
 800888c:	4631      	mov	r1, r6
 800888e:	4628      	mov	r0, r5
 8008890:	47b8      	blx	r7
 8008892:	3001      	adds	r0, #1
 8008894:	f43f af27 	beq.w	80086e6 <_printf_float+0xc2>
 8008898:	f108 0801 	add.w	r8, r8, #1
 800889c:	e7e6      	b.n	800886c <_printf_float+0x248>
 800889e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	dc39      	bgt.n	8008918 <_printf_float+0x2f4>
 80088a4:	4a1b      	ldr	r2, [pc, #108]	; (8008914 <_printf_float+0x2f0>)
 80088a6:	2301      	movs	r3, #1
 80088a8:	4631      	mov	r1, r6
 80088aa:	4628      	mov	r0, r5
 80088ac:	47b8      	blx	r7
 80088ae:	3001      	adds	r0, #1
 80088b0:	f43f af19 	beq.w	80086e6 <_printf_float+0xc2>
 80088b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088b8:	4313      	orrs	r3, r2
 80088ba:	d102      	bne.n	80088c2 <_printf_float+0x29e>
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	07d9      	lsls	r1, r3, #31
 80088c0:	d5d8      	bpl.n	8008874 <_printf_float+0x250>
 80088c2:	ee18 3a10 	vmov	r3, s16
 80088c6:	4652      	mov	r2, sl
 80088c8:	4631      	mov	r1, r6
 80088ca:	4628      	mov	r0, r5
 80088cc:	47b8      	blx	r7
 80088ce:	3001      	adds	r0, #1
 80088d0:	f43f af09 	beq.w	80086e6 <_printf_float+0xc2>
 80088d4:	f04f 0900 	mov.w	r9, #0
 80088d8:	f104 0a1a 	add.w	sl, r4, #26
 80088dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088de:	425b      	negs	r3, r3
 80088e0:	454b      	cmp	r3, r9
 80088e2:	dc01      	bgt.n	80088e8 <_printf_float+0x2c4>
 80088e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088e6:	e792      	b.n	800880e <_printf_float+0x1ea>
 80088e8:	2301      	movs	r3, #1
 80088ea:	4652      	mov	r2, sl
 80088ec:	4631      	mov	r1, r6
 80088ee:	4628      	mov	r0, r5
 80088f0:	47b8      	blx	r7
 80088f2:	3001      	adds	r0, #1
 80088f4:	f43f aef7 	beq.w	80086e6 <_printf_float+0xc2>
 80088f8:	f109 0901 	add.w	r9, r9, #1
 80088fc:	e7ee      	b.n	80088dc <_printf_float+0x2b8>
 80088fe:	bf00      	nop
 8008900:	7fefffff 	.word	0x7fefffff
 8008904:	0800aff4 	.word	0x0800aff4
 8008908:	0800aff8 	.word	0x0800aff8
 800890c:	0800b000 	.word	0x0800b000
 8008910:	0800affc 	.word	0x0800affc
 8008914:	0800b004 	.word	0x0800b004
 8008918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800891a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800891c:	429a      	cmp	r2, r3
 800891e:	bfa8      	it	ge
 8008920:	461a      	movge	r2, r3
 8008922:	2a00      	cmp	r2, #0
 8008924:	4691      	mov	r9, r2
 8008926:	dc37      	bgt.n	8008998 <_printf_float+0x374>
 8008928:	f04f 0b00 	mov.w	fp, #0
 800892c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008930:	f104 021a 	add.w	r2, r4, #26
 8008934:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008936:	9305      	str	r3, [sp, #20]
 8008938:	eba3 0309 	sub.w	r3, r3, r9
 800893c:	455b      	cmp	r3, fp
 800893e:	dc33      	bgt.n	80089a8 <_printf_float+0x384>
 8008940:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008944:	429a      	cmp	r2, r3
 8008946:	db3b      	blt.n	80089c0 <_printf_float+0x39c>
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	07da      	lsls	r2, r3, #31
 800894c:	d438      	bmi.n	80089c0 <_printf_float+0x39c>
 800894e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008950:	9b05      	ldr	r3, [sp, #20]
 8008952:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	eba2 0901 	sub.w	r9, r2, r1
 800895a:	4599      	cmp	r9, r3
 800895c:	bfa8      	it	ge
 800895e:	4699      	movge	r9, r3
 8008960:	f1b9 0f00 	cmp.w	r9, #0
 8008964:	dc35      	bgt.n	80089d2 <_printf_float+0x3ae>
 8008966:	f04f 0800 	mov.w	r8, #0
 800896a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800896e:	f104 0a1a 	add.w	sl, r4, #26
 8008972:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008976:	1a9b      	subs	r3, r3, r2
 8008978:	eba3 0309 	sub.w	r3, r3, r9
 800897c:	4543      	cmp	r3, r8
 800897e:	f77f af79 	ble.w	8008874 <_printf_float+0x250>
 8008982:	2301      	movs	r3, #1
 8008984:	4652      	mov	r2, sl
 8008986:	4631      	mov	r1, r6
 8008988:	4628      	mov	r0, r5
 800898a:	47b8      	blx	r7
 800898c:	3001      	adds	r0, #1
 800898e:	f43f aeaa 	beq.w	80086e6 <_printf_float+0xc2>
 8008992:	f108 0801 	add.w	r8, r8, #1
 8008996:	e7ec      	b.n	8008972 <_printf_float+0x34e>
 8008998:	4613      	mov	r3, r2
 800899a:	4631      	mov	r1, r6
 800899c:	4642      	mov	r2, r8
 800899e:	4628      	mov	r0, r5
 80089a0:	47b8      	blx	r7
 80089a2:	3001      	adds	r0, #1
 80089a4:	d1c0      	bne.n	8008928 <_printf_float+0x304>
 80089a6:	e69e      	b.n	80086e6 <_printf_float+0xc2>
 80089a8:	2301      	movs	r3, #1
 80089aa:	4631      	mov	r1, r6
 80089ac:	4628      	mov	r0, r5
 80089ae:	9205      	str	r2, [sp, #20]
 80089b0:	47b8      	blx	r7
 80089b2:	3001      	adds	r0, #1
 80089b4:	f43f ae97 	beq.w	80086e6 <_printf_float+0xc2>
 80089b8:	9a05      	ldr	r2, [sp, #20]
 80089ba:	f10b 0b01 	add.w	fp, fp, #1
 80089be:	e7b9      	b.n	8008934 <_printf_float+0x310>
 80089c0:	ee18 3a10 	vmov	r3, s16
 80089c4:	4652      	mov	r2, sl
 80089c6:	4631      	mov	r1, r6
 80089c8:	4628      	mov	r0, r5
 80089ca:	47b8      	blx	r7
 80089cc:	3001      	adds	r0, #1
 80089ce:	d1be      	bne.n	800894e <_printf_float+0x32a>
 80089d0:	e689      	b.n	80086e6 <_printf_float+0xc2>
 80089d2:	9a05      	ldr	r2, [sp, #20]
 80089d4:	464b      	mov	r3, r9
 80089d6:	4442      	add	r2, r8
 80089d8:	4631      	mov	r1, r6
 80089da:	4628      	mov	r0, r5
 80089dc:	47b8      	blx	r7
 80089de:	3001      	adds	r0, #1
 80089e0:	d1c1      	bne.n	8008966 <_printf_float+0x342>
 80089e2:	e680      	b.n	80086e6 <_printf_float+0xc2>
 80089e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089e6:	2a01      	cmp	r2, #1
 80089e8:	dc01      	bgt.n	80089ee <_printf_float+0x3ca>
 80089ea:	07db      	lsls	r3, r3, #31
 80089ec:	d538      	bpl.n	8008a60 <_printf_float+0x43c>
 80089ee:	2301      	movs	r3, #1
 80089f0:	4642      	mov	r2, r8
 80089f2:	4631      	mov	r1, r6
 80089f4:	4628      	mov	r0, r5
 80089f6:	47b8      	blx	r7
 80089f8:	3001      	adds	r0, #1
 80089fa:	f43f ae74 	beq.w	80086e6 <_printf_float+0xc2>
 80089fe:	ee18 3a10 	vmov	r3, s16
 8008a02:	4652      	mov	r2, sl
 8008a04:	4631      	mov	r1, r6
 8008a06:	4628      	mov	r0, r5
 8008a08:	47b8      	blx	r7
 8008a0a:	3001      	adds	r0, #1
 8008a0c:	f43f ae6b 	beq.w	80086e6 <_printf_float+0xc2>
 8008a10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a14:	2200      	movs	r2, #0
 8008a16:	2300      	movs	r3, #0
 8008a18:	f7f8 f856 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a1c:	b9d8      	cbnz	r0, 8008a56 <_printf_float+0x432>
 8008a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a20:	f108 0201 	add.w	r2, r8, #1
 8008a24:	3b01      	subs	r3, #1
 8008a26:	4631      	mov	r1, r6
 8008a28:	4628      	mov	r0, r5
 8008a2a:	47b8      	blx	r7
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	d10e      	bne.n	8008a4e <_printf_float+0x42a>
 8008a30:	e659      	b.n	80086e6 <_printf_float+0xc2>
 8008a32:	2301      	movs	r3, #1
 8008a34:	4652      	mov	r2, sl
 8008a36:	4631      	mov	r1, r6
 8008a38:	4628      	mov	r0, r5
 8008a3a:	47b8      	blx	r7
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	f43f ae52 	beq.w	80086e6 <_printf_float+0xc2>
 8008a42:	f108 0801 	add.w	r8, r8, #1
 8008a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	4543      	cmp	r3, r8
 8008a4c:	dcf1      	bgt.n	8008a32 <_printf_float+0x40e>
 8008a4e:	464b      	mov	r3, r9
 8008a50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a54:	e6dc      	b.n	8008810 <_printf_float+0x1ec>
 8008a56:	f04f 0800 	mov.w	r8, #0
 8008a5a:	f104 0a1a 	add.w	sl, r4, #26
 8008a5e:	e7f2      	b.n	8008a46 <_printf_float+0x422>
 8008a60:	2301      	movs	r3, #1
 8008a62:	4642      	mov	r2, r8
 8008a64:	e7df      	b.n	8008a26 <_printf_float+0x402>
 8008a66:	2301      	movs	r3, #1
 8008a68:	464a      	mov	r2, r9
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	47b8      	blx	r7
 8008a70:	3001      	adds	r0, #1
 8008a72:	f43f ae38 	beq.w	80086e6 <_printf_float+0xc2>
 8008a76:	f108 0801 	add.w	r8, r8, #1
 8008a7a:	68e3      	ldr	r3, [r4, #12]
 8008a7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a7e:	1a5b      	subs	r3, r3, r1
 8008a80:	4543      	cmp	r3, r8
 8008a82:	dcf0      	bgt.n	8008a66 <_printf_float+0x442>
 8008a84:	e6fa      	b.n	800887c <_printf_float+0x258>
 8008a86:	f04f 0800 	mov.w	r8, #0
 8008a8a:	f104 0919 	add.w	r9, r4, #25
 8008a8e:	e7f4      	b.n	8008a7a <_printf_float+0x456>

08008a90 <_printf_common>:
 8008a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a94:	4616      	mov	r6, r2
 8008a96:	4699      	mov	r9, r3
 8008a98:	688a      	ldr	r2, [r1, #8]
 8008a9a:	690b      	ldr	r3, [r1, #16]
 8008a9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	bfb8      	it	lt
 8008aa4:	4613      	movlt	r3, r2
 8008aa6:	6033      	str	r3, [r6, #0]
 8008aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008aac:	4607      	mov	r7, r0
 8008aae:	460c      	mov	r4, r1
 8008ab0:	b10a      	cbz	r2, 8008ab6 <_printf_common+0x26>
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	6033      	str	r3, [r6, #0]
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	0699      	lsls	r1, r3, #26
 8008aba:	bf42      	ittt	mi
 8008abc:	6833      	ldrmi	r3, [r6, #0]
 8008abe:	3302      	addmi	r3, #2
 8008ac0:	6033      	strmi	r3, [r6, #0]
 8008ac2:	6825      	ldr	r5, [r4, #0]
 8008ac4:	f015 0506 	ands.w	r5, r5, #6
 8008ac8:	d106      	bne.n	8008ad8 <_printf_common+0x48>
 8008aca:	f104 0a19 	add.w	sl, r4, #25
 8008ace:	68e3      	ldr	r3, [r4, #12]
 8008ad0:	6832      	ldr	r2, [r6, #0]
 8008ad2:	1a9b      	subs	r3, r3, r2
 8008ad4:	42ab      	cmp	r3, r5
 8008ad6:	dc26      	bgt.n	8008b26 <_printf_common+0x96>
 8008ad8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008adc:	1e13      	subs	r3, r2, #0
 8008ade:	6822      	ldr	r2, [r4, #0]
 8008ae0:	bf18      	it	ne
 8008ae2:	2301      	movne	r3, #1
 8008ae4:	0692      	lsls	r2, r2, #26
 8008ae6:	d42b      	bmi.n	8008b40 <_printf_common+0xb0>
 8008ae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008aec:	4649      	mov	r1, r9
 8008aee:	4638      	mov	r0, r7
 8008af0:	47c0      	blx	r8
 8008af2:	3001      	adds	r0, #1
 8008af4:	d01e      	beq.n	8008b34 <_printf_common+0xa4>
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	68e5      	ldr	r5, [r4, #12]
 8008afa:	6832      	ldr	r2, [r6, #0]
 8008afc:	f003 0306 	and.w	r3, r3, #6
 8008b00:	2b04      	cmp	r3, #4
 8008b02:	bf08      	it	eq
 8008b04:	1aad      	subeq	r5, r5, r2
 8008b06:	68a3      	ldr	r3, [r4, #8]
 8008b08:	6922      	ldr	r2, [r4, #16]
 8008b0a:	bf0c      	ite	eq
 8008b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b10:	2500      	movne	r5, #0
 8008b12:	4293      	cmp	r3, r2
 8008b14:	bfc4      	itt	gt
 8008b16:	1a9b      	subgt	r3, r3, r2
 8008b18:	18ed      	addgt	r5, r5, r3
 8008b1a:	2600      	movs	r6, #0
 8008b1c:	341a      	adds	r4, #26
 8008b1e:	42b5      	cmp	r5, r6
 8008b20:	d11a      	bne.n	8008b58 <_printf_common+0xc8>
 8008b22:	2000      	movs	r0, #0
 8008b24:	e008      	b.n	8008b38 <_printf_common+0xa8>
 8008b26:	2301      	movs	r3, #1
 8008b28:	4652      	mov	r2, sl
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	4638      	mov	r0, r7
 8008b2e:	47c0      	blx	r8
 8008b30:	3001      	adds	r0, #1
 8008b32:	d103      	bne.n	8008b3c <_printf_common+0xac>
 8008b34:	f04f 30ff 	mov.w	r0, #4294967295
 8008b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b3c:	3501      	adds	r5, #1
 8008b3e:	e7c6      	b.n	8008ace <_printf_common+0x3e>
 8008b40:	18e1      	adds	r1, r4, r3
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	2030      	movs	r0, #48	; 0x30
 8008b46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b4a:	4422      	add	r2, r4
 8008b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b54:	3302      	adds	r3, #2
 8008b56:	e7c7      	b.n	8008ae8 <_printf_common+0x58>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	4622      	mov	r2, r4
 8008b5c:	4649      	mov	r1, r9
 8008b5e:	4638      	mov	r0, r7
 8008b60:	47c0      	blx	r8
 8008b62:	3001      	adds	r0, #1
 8008b64:	d0e6      	beq.n	8008b34 <_printf_common+0xa4>
 8008b66:	3601      	adds	r6, #1
 8008b68:	e7d9      	b.n	8008b1e <_printf_common+0x8e>
	...

08008b6c <_printf_i>:
 8008b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b70:	460c      	mov	r4, r1
 8008b72:	4691      	mov	r9, r2
 8008b74:	7e27      	ldrb	r7, [r4, #24]
 8008b76:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b78:	2f78      	cmp	r7, #120	; 0x78
 8008b7a:	4680      	mov	r8, r0
 8008b7c:	469a      	mov	sl, r3
 8008b7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b82:	d807      	bhi.n	8008b94 <_printf_i+0x28>
 8008b84:	2f62      	cmp	r7, #98	; 0x62
 8008b86:	d80a      	bhi.n	8008b9e <_printf_i+0x32>
 8008b88:	2f00      	cmp	r7, #0
 8008b8a:	f000 80d8 	beq.w	8008d3e <_printf_i+0x1d2>
 8008b8e:	2f58      	cmp	r7, #88	; 0x58
 8008b90:	f000 80a3 	beq.w	8008cda <_printf_i+0x16e>
 8008b94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b9c:	e03a      	b.n	8008c14 <_printf_i+0xa8>
 8008b9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ba2:	2b15      	cmp	r3, #21
 8008ba4:	d8f6      	bhi.n	8008b94 <_printf_i+0x28>
 8008ba6:	a001      	add	r0, pc, #4	; (adr r0, 8008bac <_printf_i+0x40>)
 8008ba8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008bac:	08008c05 	.word	0x08008c05
 8008bb0:	08008c19 	.word	0x08008c19
 8008bb4:	08008b95 	.word	0x08008b95
 8008bb8:	08008b95 	.word	0x08008b95
 8008bbc:	08008b95 	.word	0x08008b95
 8008bc0:	08008b95 	.word	0x08008b95
 8008bc4:	08008c19 	.word	0x08008c19
 8008bc8:	08008b95 	.word	0x08008b95
 8008bcc:	08008b95 	.word	0x08008b95
 8008bd0:	08008b95 	.word	0x08008b95
 8008bd4:	08008b95 	.word	0x08008b95
 8008bd8:	08008d25 	.word	0x08008d25
 8008bdc:	08008c49 	.word	0x08008c49
 8008be0:	08008d07 	.word	0x08008d07
 8008be4:	08008b95 	.word	0x08008b95
 8008be8:	08008b95 	.word	0x08008b95
 8008bec:	08008d47 	.word	0x08008d47
 8008bf0:	08008b95 	.word	0x08008b95
 8008bf4:	08008c49 	.word	0x08008c49
 8008bf8:	08008b95 	.word	0x08008b95
 8008bfc:	08008b95 	.word	0x08008b95
 8008c00:	08008d0f 	.word	0x08008d0f
 8008c04:	680b      	ldr	r3, [r1, #0]
 8008c06:	1d1a      	adds	r2, r3, #4
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	600a      	str	r2, [r1, #0]
 8008c0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c14:	2301      	movs	r3, #1
 8008c16:	e0a3      	b.n	8008d60 <_printf_i+0x1f4>
 8008c18:	6825      	ldr	r5, [r4, #0]
 8008c1a:	6808      	ldr	r0, [r1, #0]
 8008c1c:	062e      	lsls	r6, r5, #24
 8008c1e:	f100 0304 	add.w	r3, r0, #4
 8008c22:	d50a      	bpl.n	8008c3a <_printf_i+0xce>
 8008c24:	6805      	ldr	r5, [r0, #0]
 8008c26:	600b      	str	r3, [r1, #0]
 8008c28:	2d00      	cmp	r5, #0
 8008c2a:	da03      	bge.n	8008c34 <_printf_i+0xc8>
 8008c2c:	232d      	movs	r3, #45	; 0x2d
 8008c2e:	426d      	negs	r5, r5
 8008c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c34:	485e      	ldr	r0, [pc, #376]	; (8008db0 <_printf_i+0x244>)
 8008c36:	230a      	movs	r3, #10
 8008c38:	e019      	b.n	8008c6e <_printf_i+0x102>
 8008c3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008c3e:	6805      	ldr	r5, [r0, #0]
 8008c40:	600b      	str	r3, [r1, #0]
 8008c42:	bf18      	it	ne
 8008c44:	b22d      	sxthne	r5, r5
 8008c46:	e7ef      	b.n	8008c28 <_printf_i+0xbc>
 8008c48:	680b      	ldr	r3, [r1, #0]
 8008c4a:	6825      	ldr	r5, [r4, #0]
 8008c4c:	1d18      	adds	r0, r3, #4
 8008c4e:	6008      	str	r0, [r1, #0]
 8008c50:	0628      	lsls	r0, r5, #24
 8008c52:	d501      	bpl.n	8008c58 <_printf_i+0xec>
 8008c54:	681d      	ldr	r5, [r3, #0]
 8008c56:	e002      	b.n	8008c5e <_printf_i+0xf2>
 8008c58:	0669      	lsls	r1, r5, #25
 8008c5a:	d5fb      	bpl.n	8008c54 <_printf_i+0xe8>
 8008c5c:	881d      	ldrh	r5, [r3, #0]
 8008c5e:	4854      	ldr	r0, [pc, #336]	; (8008db0 <_printf_i+0x244>)
 8008c60:	2f6f      	cmp	r7, #111	; 0x6f
 8008c62:	bf0c      	ite	eq
 8008c64:	2308      	moveq	r3, #8
 8008c66:	230a      	movne	r3, #10
 8008c68:	2100      	movs	r1, #0
 8008c6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c6e:	6866      	ldr	r6, [r4, #4]
 8008c70:	60a6      	str	r6, [r4, #8]
 8008c72:	2e00      	cmp	r6, #0
 8008c74:	bfa2      	ittt	ge
 8008c76:	6821      	ldrge	r1, [r4, #0]
 8008c78:	f021 0104 	bicge.w	r1, r1, #4
 8008c7c:	6021      	strge	r1, [r4, #0]
 8008c7e:	b90d      	cbnz	r5, 8008c84 <_printf_i+0x118>
 8008c80:	2e00      	cmp	r6, #0
 8008c82:	d04d      	beq.n	8008d20 <_printf_i+0x1b4>
 8008c84:	4616      	mov	r6, r2
 8008c86:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c8a:	fb03 5711 	mls	r7, r3, r1, r5
 8008c8e:	5dc7      	ldrb	r7, [r0, r7]
 8008c90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c94:	462f      	mov	r7, r5
 8008c96:	42bb      	cmp	r3, r7
 8008c98:	460d      	mov	r5, r1
 8008c9a:	d9f4      	bls.n	8008c86 <_printf_i+0x11a>
 8008c9c:	2b08      	cmp	r3, #8
 8008c9e:	d10b      	bne.n	8008cb8 <_printf_i+0x14c>
 8008ca0:	6823      	ldr	r3, [r4, #0]
 8008ca2:	07df      	lsls	r7, r3, #31
 8008ca4:	d508      	bpl.n	8008cb8 <_printf_i+0x14c>
 8008ca6:	6923      	ldr	r3, [r4, #16]
 8008ca8:	6861      	ldr	r1, [r4, #4]
 8008caa:	4299      	cmp	r1, r3
 8008cac:	bfde      	ittt	le
 8008cae:	2330      	movle	r3, #48	; 0x30
 8008cb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008cb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008cb8:	1b92      	subs	r2, r2, r6
 8008cba:	6122      	str	r2, [r4, #16]
 8008cbc:	f8cd a000 	str.w	sl, [sp]
 8008cc0:	464b      	mov	r3, r9
 8008cc2:	aa03      	add	r2, sp, #12
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	4640      	mov	r0, r8
 8008cc8:	f7ff fee2 	bl	8008a90 <_printf_common>
 8008ccc:	3001      	adds	r0, #1
 8008cce:	d14c      	bne.n	8008d6a <_printf_i+0x1fe>
 8008cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd4:	b004      	add	sp, #16
 8008cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cda:	4835      	ldr	r0, [pc, #212]	; (8008db0 <_printf_i+0x244>)
 8008cdc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ce0:	6823      	ldr	r3, [r4, #0]
 8008ce2:	680e      	ldr	r6, [r1, #0]
 8008ce4:	061f      	lsls	r7, r3, #24
 8008ce6:	f856 5b04 	ldr.w	r5, [r6], #4
 8008cea:	600e      	str	r6, [r1, #0]
 8008cec:	d514      	bpl.n	8008d18 <_printf_i+0x1ac>
 8008cee:	07d9      	lsls	r1, r3, #31
 8008cf0:	bf44      	itt	mi
 8008cf2:	f043 0320 	orrmi.w	r3, r3, #32
 8008cf6:	6023      	strmi	r3, [r4, #0]
 8008cf8:	b91d      	cbnz	r5, 8008d02 <_printf_i+0x196>
 8008cfa:	6823      	ldr	r3, [r4, #0]
 8008cfc:	f023 0320 	bic.w	r3, r3, #32
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	2310      	movs	r3, #16
 8008d04:	e7b0      	b.n	8008c68 <_printf_i+0xfc>
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	f043 0320 	orr.w	r3, r3, #32
 8008d0c:	6023      	str	r3, [r4, #0]
 8008d0e:	2378      	movs	r3, #120	; 0x78
 8008d10:	4828      	ldr	r0, [pc, #160]	; (8008db4 <_printf_i+0x248>)
 8008d12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d16:	e7e3      	b.n	8008ce0 <_printf_i+0x174>
 8008d18:	065e      	lsls	r6, r3, #25
 8008d1a:	bf48      	it	mi
 8008d1c:	b2ad      	uxthmi	r5, r5
 8008d1e:	e7e6      	b.n	8008cee <_printf_i+0x182>
 8008d20:	4616      	mov	r6, r2
 8008d22:	e7bb      	b.n	8008c9c <_printf_i+0x130>
 8008d24:	680b      	ldr	r3, [r1, #0]
 8008d26:	6826      	ldr	r6, [r4, #0]
 8008d28:	6960      	ldr	r0, [r4, #20]
 8008d2a:	1d1d      	adds	r5, r3, #4
 8008d2c:	600d      	str	r5, [r1, #0]
 8008d2e:	0635      	lsls	r5, r6, #24
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	d501      	bpl.n	8008d38 <_printf_i+0x1cc>
 8008d34:	6018      	str	r0, [r3, #0]
 8008d36:	e002      	b.n	8008d3e <_printf_i+0x1d2>
 8008d38:	0671      	lsls	r1, r6, #25
 8008d3a:	d5fb      	bpl.n	8008d34 <_printf_i+0x1c8>
 8008d3c:	8018      	strh	r0, [r3, #0]
 8008d3e:	2300      	movs	r3, #0
 8008d40:	6123      	str	r3, [r4, #16]
 8008d42:	4616      	mov	r6, r2
 8008d44:	e7ba      	b.n	8008cbc <_printf_i+0x150>
 8008d46:	680b      	ldr	r3, [r1, #0]
 8008d48:	1d1a      	adds	r2, r3, #4
 8008d4a:	600a      	str	r2, [r1, #0]
 8008d4c:	681e      	ldr	r6, [r3, #0]
 8008d4e:	6862      	ldr	r2, [r4, #4]
 8008d50:	2100      	movs	r1, #0
 8008d52:	4630      	mov	r0, r6
 8008d54:	f7f7 fa44 	bl	80001e0 <memchr>
 8008d58:	b108      	cbz	r0, 8008d5e <_printf_i+0x1f2>
 8008d5a:	1b80      	subs	r0, r0, r6
 8008d5c:	6060      	str	r0, [r4, #4]
 8008d5e:	6863      	ldr	r3, [r4, #4]
 8008d60:	6123      	str	r3, [r4, #16]
 8008d62:	2300      	movs	r3, #0
 8008d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d68:	e7a8      	b.n	8008cbc <_printf_i+0x150>
 8008d6a:	6923      	ldr	r3, [r4, #16]
 8008d6c:	4632      	mov	r2, r6
 8008d6e:	4649      	mov	r1, r9
 8008d70:	4640      	mov	r0, r8
 8008d72:	47d0      	blx	sl
 8008d74:	3001      	adds	r0, #1
 8008d76:	d0ab      	beq.n	8008cd0 <_printf_i+0x164>
 8008d78:	6823      	ldr	r3, [r4, #0]
 8008d7a:	079b      	lsls	r3, r3, #30
 8008d7c:	d413      	bmi.n	8008da6 <_printf_i+0x23a>
 8008d7e:	68e0      	ldr	r0, [r4, #12]
 8008d80:	9b03      	ldr	r3, [sp, #12]
 8008d82:	4298      	cmp	r0, r3
 8008d84:	bfb8      	it	lt
 8008d86:	4618      	movlt	r0, r3
 8008d88:	e7a4      	b.n	8008cd4 <_printf_i+0x168>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	4632      	mov	r2, r6
 8008d8e:	4649      	mov	r1, r9
 8008d90:	4640      	mov	r0, r8
 8008d92:	47d0      	blx	sl
 8008d94:	3001      	adds	r0, #1
 8008d96:	d09b      	beq.n	8008cd0 <_printf_i+0x164>
 8008d98:	3501      	adds	r5, #1
 8008d9a:	68e3      	ldr	r3, [r4, #12]
 8008d9c:	9903      	ldr	r1, [sp, #12]
 8008d9e:	1a5b      	subs	r3, r3, r1
 8008da0:	42ab      	cmp	r3, r5
 8008da2:	dcf2      	bgt.n	8008d8a <_printf_i+0x21e>
 8008da4:	e7eb      	b.n	8008d7e <_printf_i+0x212>
 8008da6:	2500      	movs	r5, #0
 8008da8:	f104 0619 	add.w	r6, r4, #25
 8008dac:	e7f5      	b.n	8008d9a <_printf_i+0x22e>
 8008dae:	bf00      	nop
 8008db0:	0800b006 	.word	0x0800b006
 8008db4:	0800b017 	.word	0x0800b017

08008db8 <iprintf>:
 8008db8:	b40f      	push	{r0, r1, r2, r3}
 8008dba:	4b0a      	ldr	r3, [pc, #40]	; (8008de4 <iprintf+0x2c>)
 8008dbc:	b513      	push	{r0, r1, r4, lr}
 8008dbe:	681c      	ldr	r4, [r3, #0]
 8008dc0:	b124      	cbz	r4, 8008dcc <iprintf+0x14>
 8008dc2:	69a3      	ldr	r3, [r4, #24]
 8008dc4:	b913      	cbnz	r3, 8008dcc <iprintf+0x14>
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f001 f8e0 	bl	8009f8c <__sinit>
 8008dcc:	ab05      	add	r3, sp, #20
 8008dce:	9a04      	ldr	r2, [sp, #16]
 8008dd0:	68a1      	ldr	r1, [r4, #8]
 8008dd2:	9301      	str	r3, [sp, #4]
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f001 fe4d 	bl	800aa74 <_vfiprintf_r>
 8008dda:	b002      	add	sp, #8
 8008ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008de0:	b004      	add	sp, #16
 8008de2:	4770      	bx	lr
 8008de4:	200002c8 	.word	0x200002c8

08008de8 <_puts_r>:
 8008de8:	b570      	push	{r4, r5, r6, lr}
 8008dea:	460e      	mov	r6, r1
 8008dec:	4605      	mov	r5, r0
 8008dee:	b118      	cbz	r0, 8008df8 <_puts_r+0x10>
 8008df0:	6983      	ldr	r3, [r0, #24]
 8008df2:	b90b      	cbnz	r3, 8008df8 <_puts_r+0x10>
 8008df4:	f001 f8ca 	bl	8009f8c <__sinit>
 8008df8:	69ab      	ldr	r3, [r5, #24]
 8008dfa:	68ac      	ldr	r4, [r5, #8]
 8008dfc:	b913      	cbnz	r3, 8008e04 <_puts_r+0x1c>
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f001 f8c4 	bl	8009f8c <__sinit>
 8008e04:	4b2c      	ldr	r3, [pc, #176]	; (8008eb8 <_puts_r+0xd0>)
 8008e06:	429c      	cmp	r4, r3
 8008e08:	d120      	bne.n	8008e4c <_puts_r+0x64>
 8008e0a:	686c      	ldr	r4, [r5, #4]
 8008e0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e0e:	07db      	lsls	r3, r3, #31
 8008e10:	d405      	bmi.n	8008e1e <_puts_r+0x36>
 8008e12:	89a3      	ldrh	r3, [r4, #12]
 8008e14:	0598      	lsls	r0, r3, #22
 8008e16:	d402      	bmi.n	8008e1e <_puts_r+0x36>
 8008e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e1a:	f001 f95a 	bl	800a0d2 <__retarget_lock_acquire_recursive>
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	0719      	lsls	r1, r3, #28
 8008e22:	d51d      	bpl.n	8008e60 <_puts_r+0x78>
 8008e24:	6923      	ldr	r3, [r4, #16]
 8008e26:	b1db      	cbz	r3, 8008e60 <_puts_r+0x78>
 8008e28:	3e01      	subs	r6, #1
 8008e2a:	68a3      	ldr	r3, [r4, #8]
 8008e2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e30:	3b01      	subs	r3, #1
 8008e32:	60a3      	str	r3, [r4, #8]
 8008e34:	bb39      	cbnz	r1, 8008e86 <_puts_r+0x9e>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	da38      	bge.n	8008eac <_puts_r+0xc4>
 8008e3a:	4622      	mov	r2, r4
 8008e3c:	210a      	movs	r1, #10
 8008e3e:	4628      	mov	r0, r5
 8008e40:	f000 f850 	bl	8008ee4 <__swbuf_r>
 8008e44:	3001      	adds	r0, #1
 8008e46:	d011      	beq.n	8008e6c <_puts_r+0x84>
 8008e48:	250a      	movs	r5, #10
 8008e4a:	e011      	b.n	8008e70 <_puts_r+0x88>
 8008e4c:	4b1b      	ldr	r3, [pc, #108]	; (8008ebc <_puts_r+0xd4>)
 8008e4e:	429c      	cmp	r4, r3
 8008e50:	d101      	bne.n	8008e56 <_puts_r+0x6e>
 8008e52:	68ac      	ldr	r4, [r5, #8]
 8008e54:	e7da      	b.n	8008e0c <_puts_r+0x24>
 8008e56:	4b1a      	ldr	r3, [pc, #104]	; (8008ec0 <_puts_r+0xd8>)
 8008e58:	429c      	cmp	r4, r3
 8008e5a:	bf08      	it	eq
 8008e5c:	68ec      	ldreq	r4, [r5, #12]
 8008e5e:	e7d5      	b.n	8008e0c <_puts_r+0x24>
 8008e60:	4621      	mov	r1, r4
 8008e62:	4628      	mov	r0, r5
 8008e64:	f000 f890 	bl	8008f88 <__swsetup_r>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d0dd      	beq.n	8008e28 <_puts_r+0x40>
 8008e6c:	f04f 35ff 	mov.w	r5, #4294967295
 8008e70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e72:	07da      	lsls	r2, r3, #31
 8008e74:	d405      	bmi.n	8008e82 <_puts_r+0x9a>
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	059b      	lsls	r3, r3, #22
 8008e7a:	d402      	bmi.n	8008e82 <_puts_r+0x9a>
 8008e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e7e:	f001 f929 	bl	800a0d4 <__retarget_lock_release_recursive>
 8008e82:	4628      	mov	r0, r5
 8008e84:	bd70      	pop	{r4, r5, r6, pc}
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	da04      	bge.n	8008e94 <_puts_r+0xac>
 8008e8a:	69a2      	ldr	r2, [r4, #24]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	dc06      	bgt.n	8008e9e <_puts_r+0xb6>
 8008e90:	290a      	cmp	r1, #10
 8008e92:	d004      	beq.n	8008e9e <_puts_r+0xb6>
 8008e94:	6823      	ldr	r3, [r4, #0]
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	6022      	str	r2, [r4, #0]
 8008e9a:	7019      	strb	r1, [r3, #0]
 8008e9c:	e7c5      	b.n	8008e2a <_puts_r+0x42>
 8008e9e:	4622      	mov	r2, r4
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	f000 f81f 	bl	8008ee4 <__swbuf_r>
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	d1bf      	bne.n	8008e2a <_puts_r+0x42>
 8008eaa:	e7df      	b.n	8008e6c <_puts_r+0x84>
 8008eac:	6823      	ldr	r3, [r4, #0]
 8008eae:	250a      	movs	r5, #10
 8008eb0:	1c5a      	adds	r2, r3, #1
 8008eb2:	6022      	str	r2, [r4, #0]
 8008eb4:	701d      	strb	r5, [r3, #0]
 8008eb6:	e7db      	b.n	8008e70 <_puts_r+0x88>
 8008eb8:	0800b0dc 	.word	0x0800b0dc
 8008ebc:	0800b0fc 	.word	0x0800b0fc
 8008ec0:	0800b0bc 	.word	0x0800b0bc

08008ec4 <puts>:
 8008ec4:	4b02      	ldr	r3, [pc, #8]	; (8008ed0 <puts+0xc>)
 8008ec6:	4601      	mov	r1, r0
 8008ec8:	6818      	ldr	r0, [r3, #0]
 8008eca:	f7ff bf8d 	b.w	8008de8 <_puts_r>
 8008ece:	bf00      	nop
 8008ed0:	200002c8 	.word	0x200002c8

08008ed4 <strcpy>:
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eda:	f803 2b01 	strb.w	r2, [r3], #1
 8008ede:	2a00      	cmp	r2, #0
 8008ee0:	d1f9      	bne.n	8008ed6 <strcpy+0x2>
 8008ee2:	4770      	bx	lr

08008ee4 <__swbuf_r>:
 8008ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee6:	460e      	mov	r6, r1
 8008ee8:	4614      	mov	r4, r2
 8008eea:	4605      	mov	r5, r0
 8008eec:	b118      	cbz	r0, 8008ef6 <__swbuf_r+0x12>
 8008eee:	6983      	ldr	r3, [r0, #24]
 8008ef0:	b90b      	cbnz	r3, 8008ef6 <__swbuf_r+0x12>
 8008ef2:	f001 f84b 	bl	8009f8c <__sinit>
 8008ef6:	4b21      	ldr	r3, [pc, #132]	; (8008f7c <__swbuf_r+0x98>)
 8008ef8:	429c      	cmp	r4, r3
 8008efa:	d12b      	bne.n	8008f54 <__swbuf_r+0x70>
 8008efc:	686c      	ldr	r4, [r5, #4]
 8008efe:	69a3      	ldr	r3, [r4, #24]
 8008f00:	60a3      	str	r3, [r4, #8]
 8008f02:	89a3      	ldrh	r3, [r4, #12]
 8008f04:	071a      	lsls	r2, r3, #28
 8008f06:	d52f      	bpl.n	8008f68 <__swbuf_r+0x84>
 8008f08:	6923      	ldr	r3, [r4, #16]
 8008f0a:	b36b      	cbz	r3, 8008f68 <__swbuf_r+0x84>
 8008f0c:	6923      	ldr	r3, [r4, #16]
 8008f0e:	6820      	ldr	r0, [r4, #0]
 8008f10:	1ac0      	subs	r0, r0, r3
 8008f12:	6963      	ldr	r3, [r4, #20]
 8008f14:	b2f6      	uxtb	r6, r6
 8008f16:	4283      	cmp	r3, r0
 8008f18:	4637      	mov	r7, r6
 8008f1a:	dc04      	bgt.n	8008f26 <__swbuf_r+0x42>
 8008f1c:	4621      	mov	r1, r4
 8008f1e:	4628      	mov	r0, r5
 8008f20:	f000 ffa0 	bl	8009e64 <_fflush_r>
 8008f24:	bb30      	cbnz	r0, 8008f74 <__swbuf_r+0x90>
 8008f26:	68a3      	ldr	r3, [r4, #8]
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	60a3      	str	r3, [r4, #8]
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	1c5a      	adds	r2, r3, #1
 8008f30:	6022      	str	r2, [r4, #0]
 8008f32:	701e      	strb	r6, [r3, #0]
 8008f34:	6963      	ldr	r3, [r4, #20]
 8008f36:	3001      	adds	r0, #1
 8008f38:	4283      	cmp	r3, r0
 8008f3a:	d004      	beq.n	8008f46 <__swbuf_r+0x62>
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	07db      	lsls	r3, r3, #31
 8008f40:	d506      	bpl.n	8008f50 <__swbuf_r+0x6c>
 8008f42:	2e0a      	cmp	r6, #10
 8008f44:	d104      	bne.n	8008f50 <__swbuf_r+0x6c>
 8008f46:	4621      	mov	r1, r4
 8008f48:	4628      	mov	r0, r5
 8008f4a:	f000 ff8b 	bl	8009e64 <_fflush_r>
 8008f4e:	b988      	cbnz	r0, 8008f74 <__swbuf_r+0x90>
 8008f50:	4638      	mov	r0, r7
 8008f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f54:	4b0a      	ldr	r3, [pc, #40]	; (8008f80 <__swbuf_r+0x9c>)
 8008f56:	429c      	cmp	r4, r3
 8008f58:	d101      	bne.n	8008f5e <__swbuf_r+0x7a>
 8008f5a:	68ac      	ldr	r4, [r5, #8]
 8008f5c:	e7cf      	b.n	8008efe <__swbuf_r+0x1a>
 8008f5e:	4b09      	ldr	r3, [pc, #36]	; (8008f84 <__swbuf_r+0xa0>)
 8008f60:	429c      	cmp	r4, r3
 8008f62:	bf08      	it	eq
 8008f64:	68ec      	ldreq	r4, [r5, #12]
 8008f66:	e7ca      	b.n	8008efe <__swbuf_r+0x1a>
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f000 f80c 	bl	8008f88 <__swsetup_r>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	d0cb      	beq.n	8008f0c <__swbuf_r+0x28>
 8008f74:	f04f 37ff 	mov.w	r7, #4294967295
 8008f78:	e7ea      	b.n	8008f50 <__swbuf_r+0x6c>
 8008f7a:	bf00      	nop
 8008f7c:	0800b0dc 	.word	0x0800b0dc
 8008f80:	0800b0fc 	.word	0x0800b0fc
 8008f84:	0800b0bc 	.word	0x0800b0bc

08008f88 <__swsetup_r>:
 8008f88:	4b32      	ldr	r3, [pc, #200]	; (8009054 <__swsetup_r+0xcc>)
 8008f8a:	b570      	push	{r4, r5, r6, lr}
 8008f8c:	681d      	ldr	r5, [r3, #0]
 8008f8e:	4606      	mov	r6, r0
 8008f90:	460c      	mov	r4, r1
 8008f92:	b125      	cbz	r5, 8008f9e <__swsetup_r+0x16>
 8008f94:	69ab      	ldr	r3, [r5, #24]
 8008f96:	b913      	cbnz	r3, 8008f9e <__swsetup_r+0x16>
 8008f98:	4628      	mov	r0, r5
 8008f9a:	f000 fff7 	bl	8009f8c <__sinit>
 8008f9e:	4b2e      	ldr	r3, [pc, #184]	; (8009058 <__swsetup_r+0xd0>)
 8008fa0:	429c      	cmp	r4, r3
 8008fa2:	d10f      	bne.n	8008fc4 <__swsetup_r+0x3c>
 8008fa4:	686c      	ldr	r4, [r5, #4]
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fac:	0719      	lsls	r1, r3, #28
 8008fae:	d42c      	bmi.n	800900a <__swsetup_r+0x82>
 8008fb0:	06dd      	lsls	r5, r3, #27
 8008fb2:	d411      	bmi.n	8008fd8 <__swsetup_r+0x50>
 8008fb4:	2309      	movs	r3, #9
 8008fb6:	6033      	str	r3, [r6, #0]
 8008fb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008fbc:	81a3      	strh	r3, [r4, #12]
 8008fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc2:	e03e      	b.n	8009042 <__swsetup_r+0xba>
 8008fc4:	4b25      	ldr	r3, [pc, #148]	; (800905c <__swsetup_r+0xd4>)
 8008fc6:	429c      	cmp	r4, r3
 8008fc8:	d101      	bne.n	8008fce <__swsetup_r+0x46>
 8008fca:	68ac      	ldr	r4, [r5, #8]
 8008fcc:	e7eb      	b.n	8008fa6 <__swsetup_r+0x1e>
 8008fce:	4b24      	ldr	r3, [pc, #144]	; (8009060 <__swsetup_r+0xd8>)
 8008fd0:	429c      	cmp	r4, r3
 8008fd2:	bf08      	it	eq
 8008fd4:	68ec      	ldreq	r4, [r5, #12]
 8008fd6:	e7e6      	b.n	8008fa6 <__swsetup_r+0x1e>
 8008fd8:	0758      	lsls	r0, r3, #29
 8008fda:	d512      	bpl.n	8009002 <__swsetup_r+0x7a>
 8008fdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fde:	b141      	cbz	r1, 8008ff2 <__swsetup_r+0x6a>
 8008fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fe4:	4299      	cmp	r1, r3
 8008fe6:	d002      	beq.n	8008fee <__swsetup_r+0x66>
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f001 fc6f 	bl	800a8cc <_free_r>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	6363      	str	r3, [r4, #52]	; 0x34
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ff8:	81a3      	strh	r3, [r4, #12]
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	6063      	str	r3, [r4, #4]
 8008ffe:	6923      	ldr	r3, [r4, #16]
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	89a3      	ldrh	r3, [r4, #12]
 8009004:	f043 0308 	orr.w	r3, r3, #8
 8009008:	81a3      	strh	r3, [r4, #12]
 800900a:	6923      	ldr	r3, [r4, #16]
 800900c:	b94b      	cbnz	r3, 8009022 <__swsetup_r+0x9a>
 800900e:	89a3      	ldrh	r3, [r4, #12]
 8009010:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009018:	d003      	beq.n	8009022 <__swsetup_r+0x9a>
 800901a:	4621      	mov	r1, r4
 800901c:	4630      	mov	r0, r6
 800901e:	f001 f87f 	bl	800a120 <__smakebuf_r>
 8009022:	89a0      	ldrh	r0, [r4, #12]
 8009024:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009028:	f010 0301 	ands.w	r3, r0, #1
 800902c:	d00a      	beq.n	8009044 <__swsetup_r+0xbc>
 800902e:	2300      	movs	r3, #0
 8009030:	60a3      	str	r3, [r4, #8]
 8009032:	6963      	ldr	r3, [r4, #20]
 8009034:	425b      	negs	r3, r3
 8009036:	61a3      	str	r3, [r4, #24]
 8009038:	6923      	ldr	r3, [r4, #16]
 800903a:	b943      	cbnz	r3, 800904e <__swsetup_r+0xc6>
 800903c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009040:	d1ba      	bne.n	8008fb8 <__swsetup_r+0x30>
 8009042:	bd70      	pop	{r4, r5, r6, pc}
 8009044:	0781      	lsls	r1, r0, #30
 8009046:	bf58      	it	pl
 8009048:	6963      	ldrpl	r3, [r4, #20]
 800904a:	60a3      	str	r3, [r4, #8]
 800904c:	e7f4      	b.n	8009038 <__swsetup_r+0xb0>
 800904e:	2000      	movs	r0, #0
 8009050:	e7f7      	b.n	8009042 <__swsetup_r+0xba>
 8009052:	bf00      	nop
 8009054:	200002c8 	.word	0x200002c8
 8009058:	0800b0dc 	.word	0x0800b0dc
 800905c:	0800b0fc 	.word	0x0800b0fc
 8009060:	0800b0bc 	.word	0x0800b0bc

08009064 <quorem>:
 8009064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009068:	6903      	ldr	r3, [r0, #16]
 800906a:	690c      	ldr	r4, [r1, #16]
 800906c:	42a3      	cmp	r3, r4
 800906e:	4607      	mov	r7, r0
 8009070:	f2c0 8081 	blt.w	8009176 <quorem+0x112>
 8009074:	3c01      	subs	r4, #1
 8009076:	f101 0814 	add.w	r8, r1, #20
 800907a:	f100 0514 	add.w	r5, r0, #20
 800907e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009082:	9301      	str	r3, [sp, #4]
 8009084:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009088:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800908c:	3301      	adds	r3, #1
 800908e:	429a      	cmp	r2, r3
 8009090:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009094:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009098:	fbb2 f6f3 	udiv	r6, r2, r3
 800909c:	d331      	bcc.n	8009102 <quorem+0x9e>
 800909e:	f04f 0e00 	mov.w	lr, #0
 80090a2:	4640      	mov	r0, r8
 80090a4:	46ac      	mov	ip, r5
 80090a6:	46f2      	mov	sl, lr
 80090a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80090ac:	b293      	uxth	r3, r2
 80090ae:	fb06 e303 	mla	r3, r6, r3, lr
 80090b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	ebaa 0303 	sub.w	r3, sl, r3
 80090bc:	0c12      	lsrs	r2, r2, #16
 80090be:	f8dc a000 	ldr.w	sl, [ip]
 80090c2:	fb06 e202 	mla	r2, r6, r2, lr
 80090c6:	fa13 f38a 	uxtah	r3, r3, sl
 80090ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80090ce:	fa1f fa82 	uxth.w	sl, r2
 80090d2:	f8dc 2000 	ldr.w	r2, [ip]
 80090d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80090da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090de:	b29b      	uxth	r3, r3
 80090e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090e4:	4581      	cmp	r9, r0
 80090e6:	f84c 3b04 	str.w	r3, [ip], #4
 80090ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80090ee:	d2db      	bcs.n	80090a8 <quorem+0x44>
 80090f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80090f4:	b92b      	cbnz	r3, 8009102 <quorem+0x9e>
 80090f6:	9b01      	ldr	r3, [sp, #4]
 80090f8:	3b04      	subs	r3, #4
 80090fa:	429d      	cmp	r5, r3
 80090fc:	461a      	mov	r2, r3
 80090fe:	d32e      	bcc.n	800915e <quorem+0xfa>
 8009100:	613c      	str	r4, [r7, #16]
 8009102:	4638      	mov	r0, r7
 8009104:	f001 fad2 	bl	800a6ac <__mcmp>
 8009108:	2800      	cmp	r0, #0
 800910a:	db24      	blt.n	8009156 <quorem+0xf2>
 800910c:	3601      	adds	r6, #1
 800910e:	4628      	mov	r0, r5
 8009110:	f04f 0c00 	mov.w	ip, #0
 8009114:	f858 2b04 	ldr.w	r2, [r8], #4
 8009118:	f8d0 e000 	ldr.w	lr, [r0]
 800911c:	b293      	uxth	r3, r2
 800911e:	ebac 0303 	sub.w	r3, ip, r3
 8009122:	0c12      	lsrs	r2, r2, #16
 8009124:	fa13 f38e 	uxtah	r3, r3, lr
 8009128:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800912c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009130:	b29b      	uxth	r3, r3
 8009132:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009136:	45c1      	cmp	r9, r8
 8009138:	f840 3b04 	str.w	r3, [r0], #4
 800913c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009140:	d2e8      	bcs.n	8009114 <quorem+0xb0>
 8009142:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800914a:	b922      	cbnz	r2, 8009156 <quorem+0xf2>
 800914c:	3b04      	subs	r3, #4
 800914e:	429d      	cmp	r5, r3
 8009150:	461a      	mov	r2, r3
 8009152:	d30a      	bcc.n	800916a <quorem+0x106>
 8009154:	613c      	str	r4, [r7, #16]
 8009156:	4630      	mov	r0, r6
 8009158:	b003      	add	sp, #12
 800915a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800915e:	6812      	ldr	r2, [r2, #0]
 8009160:	3b04      	subs	r3, #4
 8009162:	2a00      	cmp	r2, #0
 8009164:	d1cc      	bne.n	8009100 <quorem+0x9c>
 8009166:	3c01      	subs	r4, #1
 8009168:	e7c7      	b.n	80090fa <quorem+0x96>
 800916a:	6812      	ldr	r2, [r2, #0]
 800916c:	3b04      	subs	r3, #4
 800916e:	2a00      	cmp	r2, #0
 8009170:	d1f0      	bne.n	8009154 <quorem+0xf0>
 8009172:	3c01      	subs	r4, #1
 8009174:	e7eb      	b.n	800914e <quorem+0xea>
 8009176:	2000      	movs	r0, #0
 8009178:	e7ee      	b.n	8009158 <quorem+0xf4>
 800917a:	0000      	movs	r0, r0
 800917c:	0000      	movs	r0, r0
	...

08009180 <_dtoa_r>:
 8009180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009184:	ed2d 8b02 	vpush	{d8}
 8009188:	ec57 6b10 	vmov	r6, r7, d0
 800918c:	b095      	sub	sp, #84	; 0x54
 800918e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009190:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009194:	9105      	str	r1, [sp, #20]
 8009196:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800919a:	4604      	mov	r4, r0
 800919c:	9209      	str	r2, [sp, #36]	; 0x24
 800919e:	930f      	str	r3, [sp, #60]	; 0x3c
 80091a0:	b975      	cbnz	r5, 80091c0 <_dtoa_r+0x40>
 80091a2:	2010      	movs	r0, #16
 80091a4:	f000 fffc 	bl	800a1a0 <malloc>
 80091a8:	4602      	mov	r2, r0
 80091aa:	6260      	str	r0, [r4, #36]	; 0x24
 80091ac:	b920      	cbnz	r0, 80091b8 <_dtoa_r+0x38>
 80091ae:	4bb2      	ldr	r3, [pc, #712]	; (8009478 <_dtoa_r+0x2f8>)
 80091b0:	21ea      	movs	r1, #234	; 0xea
 80091b2:	48b2      	ldr	r0, [pc, #712]	; (800947c <_dtoa_r+0x2fc>)
 80091b4:	f001 fdf4 	bl	800ada0 <__assert_func>
 80091b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80091bc:	6005      	str	r5, [r0, #0]
 80091be:	60c5      	str	r5, [r0, #12]
 80091c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091c2:	6819      	ldr	r1, [r3, #0]
 80091c4:	b151      	cbz	r1, 80091dc <_dtoa_r+0x5c>
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	604a      	str	r2, [r1, #4]
 80091ca:	2301      	movs	r3, #1
 80091cc:	4093      	lsls	r3, r2
 80091ce:	608b      	str	r3, [r1, #8]
 80091d0:	4620      	mov	r0, r4
 80091d2:	f001 f82d 	bl	800a230 <_Bfree>
 80091d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	1e3b      	subs	r3, r7, #0
 80091de:	bfb9      	ittee	lt
 80091e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80091e4:	9303      	strlt	r3, [sp, #12]
 80091e6:	2300      	movge	r3, #0
 80091e8:	f8c8 3000 	strge.w	r3, [r8]
 80091ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80091f0:	4ba3      	ldr	r3, [pc, #652]	; (8009480 <_dtoa_r+0x300>)
 80091f2:	bfbc      	itt	lt
 80091f4:	2201      	movlt	r2, #1
 80091f6:	f8c8 2000 	strlt.w	r2, [r8]
 80091fa:	ea33 0309 	bics.w	r3, r3, r9
 80091fe:	d11b      	bne.n	8009238 <_dtoa_r+0xb8>
 8009200:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009202:	f242 730f 	movw	r3, #9999	; 0x270f
 8009206:	6013      	str	r3, [r2, #0]
 8009208:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800920c:	4333      	orrs	r3, r6
 800920e:	f000 857a 	beq.w	8009d06 <_dtoa_r+0xb86>
 8009212:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009214:	b963      	cbnz	r3, 8009230 <_dtoa_r+0xb0>
 8009216:	4b9b      	ldr	r3, [pc, #620]	; (8009484 <_dtoa_r+0x304>)
 8009218:	e024      	b.n	8009264 <_dtoa_r+0xe4>
 800921a:	4b9b      	ldr	r3, [pc, #620]	; (8009488 <_dtoa_r+0x308>)
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	3308      	adds	r3, #8
 8009220:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009222:	6013      	str	r3, [r2, #0]
 8009224:	9800      	ldr	r0, [sp, #0]
 8009226:	b015      	add	sp, #84	; 0x54
 8009228:	ecbd 8b02 	vpop	{d8}
 800922c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009230:	4b94      	ldr	r3, [pc, #592]	; (8009484 <_dtoa_r+0x304>)
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	3303      	adds	r3, #3
 8009236:	e7f3      	b.n	8009220 <_dtoa_r+0xa0>
 8009238:	ed9d 7b02 	vldr	d7, [sp, #8]
 800923c:	2200      	movs	r2, #0
 800923e:	ec51 0b17 	vmov	r0, r1, d7
 8009242:	2300      	movs	r3, #0
 8009244:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009248:	f7f7 fc3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800924c:	4680      	mov	r8, r0
 800924e:	b158      	cbz	r0, 8009268 <_dtoa_r+0xe8>
 8009250:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009252:	2301      	movs	r3, #1
 8009254:	6013      	str	r3, [r2, #0]
 8009256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009258:	2b00      	cmp	r3, #0
 800925a:	f000 8551 	beq.w	8009d00 <_dtoa_r+0xb80>
 800925e:	488b      	ldr	r0, [pc, #556]	; (800948c <_dtoa_r+0x30c>)
 8009260:	6018      	str	r0, [r3, #0]
 8009262:	1e43      	subs	r3, r0, #1
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	e7dd      	b.n	8009224 <_dtoa_r+0xa4>
 8009268:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800926c:	aa12      	add	r2, sp, #72	; 0x48
 800926e:	a913      	add	r1, sp, #76	; 0x4c
 8009270:	4620      	mov	r0, r4
 8009272:	f001 fabf 	bl	800a7f4 <__d2b>
 8009276:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800927a:	4683      	mov	fp, r0
 800927c:	2d00      	cmp	r5, #0
 800927e:	d07c      	beq.n	800937a <_dtoa_r+0x1fa>
 8009280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009282:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009286:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800928a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800928e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009292:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009296:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800929a:	4b7d      	ldr	r3, [pc, #500]	; (8009490 <_dtoa_r+0x310>)
 800929c:	2200      	movs	r2, #0
 800929e:	4630      	mov	r0, r6
 80092a0:	4639      	mov	r1, r7
 80092a2:	f7f6 fff1 	bl	8000288 <__aeabi_dsub>
 80092a6:	a36e      	add	r3, pc, #440	; (adr r3, 8009460 <_dtoa_r+0x2e0>)
 80092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ac:	f7f7 f9a4 	bl	80005f8 <__aeabi_dmul>
 80092b0:	a36d      	add	r3, pc, #436	; (adr r3, 8009468 <_dtoa_r+0x2e8>)
 80092b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b6:	f7f6 ffe9 	bl	800028c <__adddf3>
 80092ba:	4606      	mov	r6, r0
 80092bc:	4628      	mov	r0, r5
 80092be:	460f      	mov	r7, r1
 80092c0:	f7f7 f930 	bl	8000524 <__aeabi_i2d>
 80092c4:	a36a      	add	r3, pc, #424	; (adr r3, 8009470 <_dtoa_r+0x2f0>)
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	f7f7 f995 	bl	80005f8 <__aeabi_dmul>
 80092ce:	4602      	mov	r2, r0
 80092d0:	460b      	mov	r3, r1
 80092d2:	4630      	mov	r0, r6
 80092d4:	4639      	mov	r1, r7
 80092d6:	f7f6 ffd9 	bl	800028c <__adddf3>
 80092da:	4606      	mov	r6, r0
 80092dc:	460f      	mov	r7, r1
 80092de:	f7f7 fc3b 	bl	8000b58 <__aeabi_d2iz>
 80092e2:	2200      	movs	r2, #0
 80092e4:	4682      	mov	sl, r0
 80092e6:	2300      	movs	r3, #0
 80092e8:	4630      	mov	r0, r6
 80092ea:	4639      	mov	r1, r7
 80092ec:	f7f7 fbf6 	bl	8000adc <__aeabi_dcmplt>
 80092f0:	b148      	cbz	r0, 8009306 <_dtoa_r+0x186>
 80092f2:	4650      	mov	r0, sl
 80092f4:	f7f7 f916 	bl	8000524 <__aeabi_i2d>
 80092f8:	4632      	mov	r2, r6
 80092fa:	463b      	mov	r3, r7
 80092fc:	f7f7 fbe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009300:	b908      	cbnz	r0, 8009306 <_dtoa_r+0x186>
 8009302:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009306:	f1ba 0f16 	cmp.w	sl, #22
 800930a:	d854      	bhi.n	80093b6 <_dtoa_r+0x236>
 800930c:	4b61      	ldr	r3, [pc, #388]	; (8009494 <_dtoa_r+0x314>)
 800930e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800931a:	f7f7 fbdf 	bl	8000adc <__aeabi_dcmplt>
 800931e:	2800      	cmp	r0, #0
 8009320:	d04b      	beq.n	80093ba <_dtoa_r+0x23a>
 8009322:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009326:	2300      	movs	r3, #0
 8009328:	930e      	str	r3, [sp, #56]	; 0x38
 800932a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800932c:	1b5d      	subs	r5, r3, r5
 800932e:	1e6b      	subs	r3, r5, #1
 8009330:	9304      	str	r3, [sp, #16]
 8009332:	bf43      	ittte	mi
 8009334:	2300      	movmi	r3, #0
 8009336:	f1c5 0801 	rsbmi	r8, r5, #1
 800933a:	9304      	strmi	r3, [sp, #16]
 800933c:	f04f 0800 	movpl.w	r8, #0
 8009340:	f1ba 0f00 	cmp.w	sl, #0
 8009344:	db3b      	blt.n	80093be <_dtoa_r+0x23e>
 8009346:	9b04      	ldr	r3, [sp, #16]
 8009348:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800934c:	4453      	add	r3, sl
 800934e:	9304      	str	r3, [sp, #16]
 8009350:	2300      	movs	r3, #0
 8009352:	9306      	str	r3, [sp, #24]
 8009354:	9b05      	ldr	r3, [sp, #20]
 8009356:	2b09      	cmp	r3, #9
 8009358:	d869      	bhi.n	800942e <_dtoa_r+0x2ae>
 800935a:	2b05      	cmp	r3, #5
 800935c:	bfc4      	itt	gt
 800935e:	3b04      	subgt	r3, #4
 8009360:	9305      	strgt	r3, [sp, #20]
 8009362:	9b05      	ldr	r3, [sp, #20]
 8009364:	f1a3 0302 	sub.w	r3, r3, #2
 8009368:	bfcc      	ite	gt
 800936a:	2500      	movgt	r5, #0
 800936c:	2501      	movle	r5, #1
 800936e:	2b03      	cmp	r3, #3
 8009370:	d869      	bhi.n	8009446 <_dtoa_r+0x2c6>
 8009372:	e8df f003 	tbb	[pc, r3]
 8009376:	4e2c      	.short	0x4e2c
 8009378:	5a4c      	.short	0x5a4c
 800937a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800937e:	441d      	add	r5, r3
 8009380:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009384:	2b20      	cmp	r3, #32
 8009386:	bfc1      	itttt	gt
 8009388:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800938c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009390:	fa09 f303 	lslgt.w	r3, r9, r3
 8009394:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009398:	bfda      	itte	le
 800939a:	f1c3 0320 	rsble	r3, r3, #32
 800939e:	fa06 f003 	lslle.w	r0, r6, r3
 80093a2:	4318      	orrgt	r0, r3
 80093a4:	f7f7 f8ae 	bl	8000504 <__aeabi_ui2d>
 80093a8:	2301      	movs	r3, #1
 80093aa:	4606      	mov	r6, r0
 80093ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80093b0:	3d01      	subs	r5, #1
 80093b2:	9310      	str	r3, [sp, #64]	; 0x40
 80093b4:	e771      	b.n	800929a <_dtoa_r+0x11a>
 80093b6:	2301      	movs	r3, #1
 80093b8:	e7b6      	b.n	8009328 <_dtoa_r+0x1a8>
 80093ba:	900e      	str	r0, [sp, #56]	; 0x38
 80093bc:	e7b5      	b.n	800932a <_dtoa_r+0x1aa>
 80093be:	f1ca 0300 	rsb	r3, sl, #0
 80093c2:	9306      	str	r3, [sp, #24]
 80093c4:	2300      	movs	r3, #0
 80093c6:	eba8 080a 	sub.w	r8, r8, sl
 80093ca:	930d      	str	r3, [sp, #52]	; 0x34
 80093cc:	e7c2      	b.n	8009354 <_dtoa_r+0x1d4>
 80093ce:	2300      	movs	r3, #0
 80093d0:	9308      	str	r3, [sp, #32]
 80093d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	dc39      	bgt.n	800944c <_dtoa_r+0x2cc>
 80093d8:	f04f 0901 	mov.w	r9, #1
 80093dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80093e0:	464b      	mov	r3, r9
 80093e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80093e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80093e8:	2200      	movs	r2, #0
 80093ea:	6042      	str	r2, [r0, #4]
 80093ec:	2204      	movs	r2, #4
 80093ee:	f102 0614 	add.w	r6, r2, #20
 80093f2:	429e      	cmp	r6, r3
 80093f4:	6841      	ldr	r1, [r0, #4]
 80093f6:	d92f      	bls.n	8009458 <_dtoa_r+0x2d8>
 80093f8:	4620      	mov	r0, r4
 80093fa:	f000 fed9 	bl	800a1b0 <_Balloc>
 80093fe:	9000      	str	r0, [sp, #0]
 8009400:	2800      	cmp	r0, #0
 8009402:	d14b      	bne.n	800949c <_dtoa_r+0x31c>
 8009404:	4b24      	ldr	r3, [pc, #144]	; (8009498 <_dtoa_r+0x318>)
 8009406:	4602      	mov	r2, r0
 8009408:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800940c:	e6d1      	b.n	80091b2 <_dtoa_r+0x32>
 800940e:	2301      	movs	r3, #1
 8009410:	e7de      	b.n	80093d0 <_dtoa_r+0x250>
 8009412:	2300      	movs	r3, #0
 8009414:	9308      	str	r3, [sp, #32]
 8009416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009418:	eb0a 0903 	add.w	r9, sl, r3
 800941c:	f109 0301 	add.w	r3, r9, #1
 8009420:	2b01      	cmp	r3, #1
 8009422:	9301      	str	r3, [sp, #4]
 8009424:	bfb8      	it	lt
 8009426:	2301      	movlt	r3, #1
 8009428:	e7dd      	b.n	80093e6 <_dtoa_r+0x266>
 800942a:	2301      	movs	r3, #1
 800942c:	e7f2      	b.n	8009414 <_dtoa_r+0x294>
 800942e:	2501      	movs	r5, #1
 8009430:	2300      	movs	r3, #0
 8009432:	9305      	str	r3, [sp, #20]
 8009434:	9508      	str	r5, [sp, #32]
 8009436:	f04f 39ff 	mov.w	r9, #4294967295
 800943a:	2200      	movs	r2, #0
 800943c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009440:	2312      	movs	r3, #18
 8009442:	9209      	str	r2, [sp, #36]	; 0x24
 8009444:	e7cf      	b.n	80093e6 <_dtoa_r+0x266>
 8009446:	2301      	movs	r3, #1
 8009448:	9308      	str	r3, [sp, #32]
 800944a:	e7f4      	b.n	8009436 <_dtoa_r+0x2b6>
 800944c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009450:	f8cd 9004 	str.w	r9, [sp, #4]
 8009454:	464b      	mov	r3, r9
 8009456:	e7c6      	b.n	80093e6 <_dtoa_r+0x266>
 8009458:	3101      	adds	r1, #1
 800945a:	6041      	str	r1, [r0, #4]
 800945c:	0052      	lsls	r2, r2, #1
 800945e:	e7c6      	b.n	80093ee <_dtoa_r+0x26e>
 8009460:	636f4361 	.word	0x636f4361
 8009464:	3fd287a7 	.word	0x3fd287a7
 8009468:	8b60c8b3 	.word	0x8b60c8b3
 800946c:	3fc68a28 	.word	0x3fc68a28
 8009470:	509f79fb 	.word	0x509f79fb
 8009474:	3fd34413 	.word	0x3fd34413
 8009478:	0800b035 	.word	0x0800b035
 800947c:	0800b04c 	.word	0x0800b04c
 8009480:	7ff00000 	.word	0x7ff00000
 8009484:	0800b031 	.word	0x0800b031
 8009488:	0800b028 	.word	0x0800b028
 800948c:	0800b005 	.word	0x0800b005
 8009490:	3ff80000 	.word	0x3ff80000
 8009494:	0800b1a8 	.word	0x0800b1a8
 8009498:	0800b0ab 	.word	0x0800b0ab
 800949c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800949e:	9a00      	ldr	r2, [sp, #0]
 80094a0:	601a      	str	r2, [r3, #0]
 80094a2:	9b01      	ldr	r3, [sp, #4]
 80094a4:	2b0e      	cmp	r3, #14
 80094a6:	f200 80ad 	bhi.w	8009604 <_dtoa_r+0x484>
 80094aa:	2d00      	cmp	r5, #0
 80094ac:	f000 80aa 	beq.w	8009604 <_dtoa_r+0x484>
 80094b0:	f1ba 0f00 	cmp.w	sl, #0
 80094b4:	dd36      	ble.n	8009524 <_dtoa_r+0x3a4>
 80094b6:	4ac3      	ldr	r2, [pc, #780]	; (80097c4 <_dtoa_r+0x644>)
 80094b8:	f00a 030f 	and.w	r3, sl, #15
 80094bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80094c0:	ed93 7b00 	vldr	d7, [r3]
 80094c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80094c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80094cc:	eeb0 8a47 	vmov.f32	s16, s14
 80094d0:	eef0 8a67 	vmov.f32	s17, s15
 80094d4:	d016      	beq.n	8009504 <_dtoa_r+0x384>
 80094d6:	4bbc      	ldr	r3, [pc, #752]	; (80097c8 <_dtoa_r+0x648>)
 80094d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80094dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094e0:	f7f7 f9b4 	bl	800084c <__aeabi_ddiv>
 80094e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094e8:	f007 070f 	and.w	r7, r7, #15
 80094ec:	2503      	movs	r5, #3
 80094ee:	4eb6      	ldr	r6, [pc, #728]	; (80097c8 <_dtoa_r+0x648>)
 80094f0:	b957      	cbnz	r7, 8009508 <_dtoa_r+0x388>
 80094f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094f6:	ec53 2b18 	vmov	r2, r3, d8
 80094fa:	f7f7 f9a7 	bl	800084c <__aeabi_ddiv>
 80094fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009502:	e029      	b.n	8009558 <_dtoa_r+0x3d8>
 8009504:	2502      	movs	r5, #2
 8009506:	e7f2      	b.n	80094ee <_dtoa_r+0x36e>
 8009508:	07f9      	lsls	r1, r7, #31
 800950a:	d508      	bpl.n	800951e <_dtoa_r+0x39e>
 800950c:	ec51 0b18 	vmov	r0, r1, d8
 8009510:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009514:	f7f7 f870 	bl	80005f8 <__aeabi_dmul>
 8009518:	ec41 0b18 	vmov	d8, r0, r1
 800951c:	3501      	adds	r5, #1
 800951e:	107f      	asrs	r7, r7, #1
 8009520:	3608      	adds	r6, #8
 8009522:	e7e5      	b.n	80094f0 <_dtoa_r+0x370>
 8009524:	f000 80a6 	beq.w	8009674 <_dtoa_r+0x4f4>
 8009528:	f1ca 0600 	rsb	r6, sl, #0
 800952c:	4ba5      	ldr	r3, [pc, #660]	; (80097c4 <_dtoa_r+0x644>)
 800952e:	4fa6      	ldr	r7, [pc, #664]	; (80097c8 <_dtoa_r+0x648>)
 8009530:	f006 020f 	and.w	r2, r6, #15
 8009534:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009540:	f7f7 f85a 	bl	80005f8 <__aeabi_dmul>
 8009544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009548:	1136      	asrs	r6, r6, #4
 800954a:	2300      	movs	r3, #0
 800954c:	2502      	movs	r5, #2
 800954e:	2e00      	cmp	r6, #0
 8009550:	f040 8085 	bne.w	800965e <_dtoa_r+0x4de>
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1d2      	bne.n	80094fe <_dtoa_r+0x37e>
 8009558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800955a:	2b00      	cmp	r3, #0
 800955c:	f000 808c 	beq.w	8009678 <_dtoa_r+0x4f8>
 8009560:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009564:	4b99      	ldr	r3, [pc, #612]	; (80097cc <_dtoa_r+0x64c>)
 8009566:	2200      	movs	r2, #0
 8009568:	4630      	mov	r0, r6
 800956a:	4639      	mov	r1, r7
 800956c:	f7f7 fab6 	bl	8000adc <__aeabi_dcmplt>
 8009570:	2800      	cmp	r0, #0
 8009572:	f000 8081 	beq.w	8009678 <_dtoa_r+0x4f8>
 8009576:	9b01      	ldr	r3, [sp, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d07d      	beq.n	8009678 <_dtoa_r+0x4f8>
 800957c:	f1b9 0f00 	cmp.w	r9, #0
 8009580:	dd3c      	ble.n	80095fc <_dtoa_r+0x47c>
 8009582:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009586:	9307      	str	r3, [sp, #28]
 8009588:	2200      	movs	r2, #0
 800958a:	4b91      	ldr	r3, [pc, #580]	; (80097d0 <_dtoa_r+0x650>)
 800958c:	4630      	mov	r0, r6
 800958e:	4639      	mov	r1, r7
 8009590:	f7f7 f832 	bl	80005f8 <__aeabi_dmul>
 8009594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009598:	3501      	adds	r5, #1
 800959a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800959e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80095a2:	4628      	mov	r0, r5
 80095a4:	f7f6 ffbe 	bl	8000524 <__aeabi_i2d>
 80095a8:	4632      	mov	r2, r6
 80095aa:	463b      	mov	r3, r7
 80095ac:	f7f7 f824 	bl	80005f8 <__aeabi_dmul>
 80095b0:	4b88      	ldr	r3, [pc, #544]	; (80097d4 <_dtoa_r+0x654>)
 80095b2:	2200      	movs	r2, #0
 80095b4:	f7f6 fe6a 	bl	800028c <__adddf3>
 80095b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80095bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095c0:	9303      	str	r3, [sp, #12]
 80095c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d15c      	bne.n	8009682 <_dtoa_r+0x502>
 80095c8:	4b83      	ldr	r3, [pc, #524]	; (80097d8 <_dtoa_r+0x658>)
 80095ca:	2200      	movs	r2, #0
 80095cc:	4630      	mov	r0, r6
 80095ce:	4639      	mov	r1, r7
 80095d0:	f7f6 fe5a 	bl	8000288 <__aeabi_dsub>
 80095d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095d8:	4606      	mov	r6, r0
 80095da:	460f      	mov	r7, r1
 80095dc:	f7f7 fa9c 	bl	8000b18 <__aeabi_dcmpgt>
 80095e0:	2800      	cmp	r0, #0
 80095e2:	f040 8296 	bne.w	8009b12 <_dtoa_r+0x992>
 80095e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80095ea:	4630      	mov	r0, r6
 80095ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095f0:	4639      	mov	r1, r7
 80095f2:	f7f7 fa73 	bl	8000adc <__aeabi_dcmplt>
 80095f6:	2800      	cmp	r0, #0
 80095f8:	f040 8288 	bne.w	8009b0c <_dtoa_r+0x98c>
 80095fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009600:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009604:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009606:	2b00      	cmp	r3, #0
 8009608:	f2c0 8158 	blt.w	80098bc <_dtoa_r+0x73c>
 800960c:	f1ba 0f0e 	cmp.w	sl, #14
 8009610:	f300 8154 	bgt.w	80098bc <_dtoa_r+0x73c>
 8009614:	4b6b      	ldr	r3, [pc, #428]	; (80097c4 <_dtoa_r+0x644>)
 8009616:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800961a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800961e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009620:	2b00      	cmp	r3, #0
 8009622:	f280 80e3 	bge.w	80097ec <_dtoa_r+0x66c>
 8009626:	9b01      	ldr	r3, [sp, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	f300 80df 	bgt.w	80097ec <_dtoa_r+0x66c>
 800962e:	f040 826d 	bne.w	8009b0c <_dtoa_r+0x98c>
 8009632:	4b69      	ldr	r3, [pc, #420]	; (80097d8 <_dtoa_r+0x658>)
 8009634:	2200      	movs	r2, #0
 8009636:	4640      	mov	r0, r8
 8009638:	4649      	mov	r1, r9
 800963a:	f7f6 ffdd 	bl	80005f8 <__aeabi_dmul>
 800963e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009642:	f7f7 fa5f 	bl	8000b04 <__aeabi_dcmpge>
 8009646:	9e01      	ldr	r6, [sp, #4]
 8009648:	4637      	mov	r7, r6
 800964a:	2800      	cmp	r0, #0
 800964c:	f040 8243 	bne.w	8009ad6 <_dtoa_r+0x956>
 8009650:	9d00      	ldr	r5, [sp, #0]
 8009652:	2331      	movs	r3, #49	; 0x31
 8009654:	f805 3b01 	strb.w	r3, [r5], #1
 8009658:	f10a 0a01 	add.w	sl, sl, #1
 800965c:	e23f      	b.n	8009ade <_dtoa_r+0x95e>
 800965e:	07f2      	lsls	r2, r6, #31
 8009660:	d505      	bpl.n	800966e <_dtoa_r+0x4ee>
 8009662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009666:	f7f6 ffc7 	bl	80005f8 <__aeabi_dmul>
 800966a:	3501      	adds	r5, #1
 800966c:	2301      	movs	r3, #1
 800966e:	1076      	asrs	r6, r6, #1
 8009670:	3708      	adds	r7, #8
 8009672:	e76c      	b.n	800954e <_dtoa_r+0x3ce>
 8009674:	2502      	movs	r5, #2
 8009676:	e76f      	b.n	8009558 <_dtoa_r+0x3d8>
 8009678:	9b01      	ldr	r3, [sp, #4]
 800967a:	f8cd a01c 	str.w	sl, [sp, #28]
 800967e:	930c      	str	r3, [sp, #48]	; 0x30
 8009680:	e78d      	b.n	800959e <_dtoa_r+0x41e>
 8009682:	9900      	ldr	r1, [sp, #0]
 8009684:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009686:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009688:	4b4e      	ldr	r3, [pc, #312]	; (80097c4 <_dtoa_r+0x644>)
 800968a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800968e:	4401      	add	r1, r0
 8009690:	9102      	str	r1, [sp, #8]
 8009692:	9908      	ldr	r1, [sp, #32]
 8009694:	eeb0 8a47 	vmov.f32	s16, s14
 8009698:	eef0 8a67 	vmov.f32	s17, s15
 800969c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80096a4:	2900      	cmp	r1, #0
 80096a6:	d045      	beq.n	8009734 <_dtoa_r+0x5b4>
 80096a8:	494c      	ldr	r1, [pc, #304]	; (80097dc <_dtoa_r+0x65c>)
 80096aa:	2000      	movs	r0, #0
 80096ac:	f7f7 f8ce 	bl	800084c <__aeabi_ddiv>
 80096b0:	ec53 2b18 	vmov	r2, r3, d8
 80096b4:	f7f6 fde8 	bl	8000288 <__aeabi_dsub>
 80096b8:	9d00      	ldr	r5, [sp, #0]
 80096ba:	ec41 0b18 	vmov	d8, r0, r1
 80096be:	4639      	mov	r1, r7
 80096c0:	4630      	mov	r0, r6
 80096c2:	f7f7 fa49 	bl	8000b58 <__aeabi_d2iz>
 80096c6:	900c      	str	r0, [sp, #48]	; 0x30
 80096c8:	f7f6 ff2c 	bl	8000524 <__aeabi_i2d>
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	4630      	mov	r0, r6
 80096d2:	4639      	mov	r1, r7
 80096d4:	f7f6 fdd8 	bl	8000288 <__aeabi_dsub>
 80096d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096da:	3330      	adds	r3, #48	; 0x30
 80096dc:	f805 3b01 	strb.w	r3, [r5], #1
 80096e0:	ec53 2b18 	vmov	r2, r3, d8
 80096e4:	4606      	mov	r6, r0
 80096e6:	460f      	mov	r7, r1
 80096e8:	f7f7 f9f8 	bl	8000adc <__aeabi_dcmplt>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d165      	bne.n	80097bc <_dtoa_r+0x63c>
 80096f0:	4632      	mov	r2, r6
 80096f2:	463b      	mov	r3, r7
 80096f4:	4935      	ldr	r1, [pc, #212]	; (80097cc <_dtoa_r+0x64c>)
 80096f6:	2000      	movs	r0, #0
 80096f8:	f7f6 fdc6 	bl	8000288 <__aeabi_dsub>
 80096fc:	ec53 2b18 	vmov	r2, r3, d8
 8009700:	f7f7 f9ec 	bl	8000adc <__aeabi_dcmplt>
 8009704:	2800      	cmp	r0, #0
 8009706:	f040 80b9 	bne.w	800987c <_dtoa_r+0x6fc>
 800970a:	9b02      	ldr	r3, [sp, #8]
 800970c:	429d      	cmp	r5, r3
 800970e:	f43f af75 	beq.w	80095fc <_dtoa_r+0x47c>
 8009712:	4b2f      	ldr	r3, [pc, #188]	; (80097d0 <_dtoa_r+0x650>)
 8009714:	ec51 0b18 	vmov	r0, r1, d8
 8009718:	2200      	movs	r2, #0
 800971a:	f7f6 ff6d 	bl	80005f8 <__aeabi_dmul>
 800971e:	4b2c      	ldr	r3, [pc, #176]	; (80097d0 <_dtoa_r+0x650>)
 8009720:	ec41 0b18 	vmov	d8, r0, r1
 8009724:	2200      	movs	r2, #0
 8009726:	4630      	mov	r0, r6
 8009728:	4639      	mov	r1, r7
 800972a:	f7f6 ff65 	bl	80005f8 <__aeabi_dmul>
 800972e:	4606      	mov	r6, r0
 8009730:	460f      	mov	r7, r1
 8009732:	e7c4      	b.n	80096be <_dtoa_r+0x53e>
 8009734:	ec51 0b17 	vmov	r0, r1, d7
 8009738:	f7f6 ff5e 	bl	80005f8 <__aeabi_dmul>
 800973c:	9b02      	ldr	r3, [sp, #8]
 800973e:	9d00      	ldr	r5, [sp, #0]
 8009740:	930c      	str	r3, [sp, #48]	; 0x30
 8009742:	ec41 0b18 	vmov	d8, r0, r1
 8009746:	4639      	mov	r1, r7
 8009748:	4630      	mov	r0, r6
 800974a:	f7f7 fa05 	bl	8000b58 <__aeabi_d2iz>
 800974e:	9011      	str	r0, [sp, #68]	; 0x44
 8009750:	f7f6 fee8 	bl	8000524 <__aeabi_i2d>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	4630      	mov	r0, r6
 800975a:	4639      	mov	r1, r7
 800975c:	f7f6 fd94 	bl	8000288 <__aeabi_dsub>
 8009760:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009762:	3330      	adds	r3, #48	; 0x30
 8009764:	f805 3b01 	strb.w	r3, [r5], #1
 8009768:	9b02      	ldr	r3, [sp, #8]
 800976a:	429d      	cmp	r5, r3
 800976c:	4606      	mov	r6, r0
 800976e:	460f      	mov	r7, r1
 8009770:	f04f 0200 	mov.w	r2, #0
 8009774:	d134      	bne.n	80097e0 <_dtoa_r+0x660>
 8009776:	4b19      	ldr	r3, [pc, #100]	; (80097dc <_dtoa_r+0x65c>)
 8009778:	ec51 0b18 	vmov	r0, r1, d8
 800977c:	f7f6 fd86 	bl	800028c <__adddf3>
 8009780:	4602      	mov	r2, r0
 8009782:	460b      	mov	r3, r1
 8009784:	4630      	mov	r0, r6
 8009786:	4639      	mov	r1, r7
 8009788:	f7f7 f9c6 	bl	8000b18 <__aeabi_dcmpgt>
 800978c:	2800      	cmp	r0, #0
 800978e:	d175      	bne.n	800987c <_dtoa_r+0x6fc>
 8009790:	ec53 2b18 	vmov	r2, r3, d8
 8009794:	4911      	ldr	r1, [pc, #68]	; (80097dc <_dtoa_r+0x65c>)
 8009796:	2000      	movs	r0, #0
 8009798:	f7f6 fd76 	bl	8000288 <__aeabi_dsub>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	4630      	mov	r0, r6
 80097a2:	4639      	mov	r1, r7
 80097a4:	f7f7 f99a 	bl	8000adc <__aeabi_dcmplt>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	f43f af27 	beq.w	80095fc <_dtoa_r+0x47c>
 80097ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80097b0:	1e6b      	subs	r3, r5, #1
 80097b2:	930c      	str	r3, [sp, #48]	; 0x30
 80097b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80097b8:	2b30      	cmp	r3, #48	; 0x30
 80097ba:	d0f8      	beq.n	80097ae <_dtoa_r+0x62e>
 80097bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80097c0:	e04a      	b.n	8009858 <_dtoa_r+0x6d8>
 80097c2:	bf00      	nop
 80097c4:	0800b1a8 	.word	0x0800b1a8
 80097c8:	0800b180 	.word	0x0800b180
 80097cc:	3ff00000 	.word	0x3ff00000
 80097d0:	40240000 	.word	0x40240000
 80097d4:	401c0000 	.word	0x401c0000
 80097d8:	40140000 	.word	0x40140000
 80097dc:	3fe00000 	.word	0x3fe00000
 80097e0:	4baf      	ldr	r3, [pc, #700]	; (8009aa0 <_dtoa_r+0x920>)
 80097e2:	f7f6 ff09 	bl	80005f8 <__aeabi_dmul>
 80097e6:	4606      	mov	r6, r0
 80097e8:	460f      	mov	r7, r1
 80097ea:	e7ac      	b.n	8009746 <_dtoa_r+0x5c6>
 80097ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80097f0:	9d00      	ldr	r5, [sp, #0]
 80097f2:	4642      	mov	r2, r8
 80097f4:	464b      	mov	r3, r9
 80097f6:	4630      	mov	r0, r6
 80097f8:	4639      	mov	r1, r7
 80097fa:	f7f7 f827 	bl	800084c <__aeabi_ddiv>
 80097fe:	f7f7 f9ab 	bl	8000b58 <__aeabi_d2iz>
 8009802:	9002      	str	r0, [sp, #8]
 8009804:	f7f6 fe8e 	bl	8000524 <__aeabi_i2d>
 8009808:	4642      	mov	r2, r8
 800980a:	464b      	mov	r3, r9
 800980c:	f7f6 fef4 	bl	80005f8 <__aeabi_dmul>
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	4630      	mov	r0, r6
 8009816:	4639      	mov	r1, r7
 8009818:	f7f6 fd36 	bl	8000288 <__aeabi_dsub>
 800981c:	9e02      	ldr	r6, [sp, #8]
 800981e:	9f01      	ldr	r7, [sp, #4]
 8009820:	3630      	adds	r6, #48	; 0x30
 8009822:	f805 6b01 	strb.w	r6, [r5], #1
 8009826:	9e00      	ldr	r6, [sp, #0]
 8009828:	1bae      	subs	r6, r5, r6
 800982a:	42b7      	cmp	r7, r6
 800982c:	4602      	mov	r2, r0
 800982e:	460b      	mov	r3, r1
 8009830:	d137      	bne.n	80098a2 <_dtoa_r+0x722>
 8009832:	f7f6 fd2b 	bl	800028c <__adddf3>
 8009836:	4642      	mov	r2, r8
 8009838:	464b      	mov	r3, r9
 800983a:	4606      	mov	r6, r0
 800983c:	460f      	mov	r7, r1
 800983e:	f7f7 f96b 	bl	8000b18 <__aeabi_dcmpgt>
 8009842:	b9c8      	cbnz	r0, 8009878 <_dtoa_r+0x6f8>
 8009844:	4642      	mov	r2, r8
 8009846:	464b      	mov	r3, r9
 8009848:	4630      	mov	r0, r6
 800984a:	4639      	mov	r1, r7
 800984c:	f7f7 f93c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009850:	b110      	cbz	r0, 8009858 <_dtoa_r+0x6d8>
 8009852:	9b02      	ldr	r3, [sp, #8]
 8009854:	07d9      	lsls	r1, r3, #31
 8009856:	d40f      	bmi.n	8009878 <_dtoa_r+0x6f8>
 8009858:	4620      	mov	r0, r4
 800985a:	4659      	mov	r1, fp
 800985c:	f000 fce8 	bl	800a230 <_Bfree>
 8009860:	2300      	movs	r3, #0
 8009862:	702b      	strb	r3, [r5, #0]
 8009864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009866:	f10a 0001 	add.w	r0, sl, #1
 800986a:	6018      	str	r0, [r3, #0]
 800986c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800986e:	2b00      	cmp	r3, #0
 8009870:	f43f acd8 	beq.w	8009224 <_dtoa_r+0xa4>
 8009874:	601d      	str	r5, [r3, #0]
 8009876:	e4d5      	b.n	8009224 <_dtoa_r+0xa4>
 8009878:	f8cd a01c 	str.w	sl, [sp, #28]
 800987c:	462b      	mov	r3, r5
 800987e:	461d      	mov	r5, r3
 8009880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009884:	2a39      	cmp	r2, #57	; 0x39
 8009886:	d108      	bne.n	800989a <_dtoa_r+0x71a>
 8009888:	9a00      	ldr	r2, [sp, #0]
 800988a:	429a      	cmp	r2, r3
 800988c:	d1f7      	bne.n	800987e <_dtoa_r+0x6fe>
 800988e:	9a07      	ldr	r2, [sp, #28]
 8009890:	9900      	ldr	r1, [sp, #0]
 8009892:	3201      	adds	r2, #1
 8009894:	9207      	str	r2, [sp, #28]
 8009896:	2230      	movs	r2, #48	; 0x30
 8009898:	700a      	strb	r2, [r1, #0]
 800989a:	781a      	ldrb	r2, [r3, #0]
 800989c:	3201      	adds	r2, #1
 800989e:	701a      	strb	r2, [r3, #0]
 80098a0:	e78c      	b.n	80097bc <_dtoa_r+0x63c>
 80098a2:	4b7f      	ldr	r3, [pc, #508]	; (8009aa0 <_dtoa_r+0x920>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	f7f6 fea7 	bl	80005f8 <__aeabi_dmul>
 80098aa:	2200      	movs	r2, #0
 80098ac:	2300      	movs	r3, #0
 80098ae:	4606      	mov	r6, r0
 80098b0:	460f      	mov	r7, r1
 80098b2:	f7f7 f909 	bl	8000ac8 <__aeabi_dcmpeq>
 80098b6:	2800      	cmp	r0, #0
 80098b8:	d09b      	beq.n	80097f2 <_dtoa_r+0x672>
 80098ba:	e7cd      	b.n	8009858 <_dtoa_r+0x6d8>
 80098bc:	9a08      	ldr	r2, [sp, #32]
 80098be:	2a00      	cmp	r2, #0
 80098c0:	f000 80c4 	beq.w	8009a4c <_dtoa_r+0x8cc>
 80098c4:	9a05      	ldr	r2, [sp, #20]
 80098c6:	2a01      	cmp	r2, #1
 80098c8:	f300 80a8 	bgt.w	8009a1c <_dtoa_r+0x89c>
 80098cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80098ce:	2a00      	cmp	r2, #0
 80098d0:	f000 80a0 	beq.w	8009a14 <_dtoa_r+0x894>
 80098d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80098d8:	9e06      	ldr	r6, [sp, #24]
 80098da:	4645      	mov	r5, r8
 80098dc:	9a04      	ldr	r2, [sp, #16]
 80098de:	2101      	movs	r1, #1
 80098e0:	441a      	add	r2, r3
 80098e2:	4620      	mov	r0, r4
 80098e4:	4498      	add	r8, r3
 80098e6:	9204      	str	r2, [sp, #16]
 80098e8:	f000 fd5e 	bl	800a3a8 <__i2b>
 80098ec:	4607      	mov	r7, r0
 80098ee:	2d00      	cmp	r5, #0
 80098f0:	dd0b      	ble.n	800990a <_dtoa_r+0x78a>
 80098f2:	9b04      	ldr	r3, [sp, #16]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	dd08      	ble.n	800990a <_dtoa_r+0x78a>
 80098f8:	42ab      	cmp	r3, r5
 80098fa:	9a04      	ldr	r2, [sp, #16]
 80098fc:	bfa8      	it	ge
 80098fe:	462b      	movge	r3, r5
 8009900:	eba8 0803 	sub.w	r8, r8, r3
 8009904:	1aed      	subs	r5, r5, r3
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	9304      	str	r3, [sp, #16]
 800990a:	9b06      	ldr	r3, [sp, #24]
 800990c:	b1fb      	cbz	r3, 800994e <_dtoa_r+0x7ce>
 800990e:	9b08      	ldr	r3, [sp, #32]
 8009910:	2b00      	cmp	r3, #0
 8009912:	f000 809f 	beq.w	8009a54 <_dtoa_r+0x8d4>
 8009916:	2e00      	cmp	r6, #0
 8009918:	dd11      	ble.n	800993e <_dtoa_r+0x7be>
 800991a:	4639      	mov	r1, r7
 800991c:	4632      	mov	r2, r6
 800991e:	4620      	mov	r0, r4
 8009920:	f000 fdfe 	bl	800a520 <__pow5mult>
 8009924:	465a      	mov	r2, fp
 8009926:	4601      	mov	r1, r0
 8009928:	4607      	mov	r7, r0
 800992a:	4620      	mov	r0, r4
 800992c:	f000 fd52 	bl	800a3d4 <__multiply>
 8009930:	4659      	mov	r1, fp
 8009932:	9007      	str	r0, [sp, #28]
 8009934:	4620      	mov	r0, r4
 8009936:	f000 fc7b 	bl	800a230 <_Bfree>
 800993a:	9b07      	ldr	r3, [sp, #28]
 800993c:	469b      	mov	fp, r3
 800993e:	9b06      	ldr	r3, [sp, #24]
 8009940:	1b9a      	subs	r2, r3, r6
 8009942:	d004      	beq.n	800994e <_dtoa_r+0x7ce>
 8009944:	4659      	mov	r1, fp
 8009946:	4620      	mov	r0, r4
 8009948:	f000 fdea 	bl	800a520 <__pow5mult>
 800994c:	4683      	mov	fp, r0
 800994e:	2101      	movs	r1, #1
 8009950:	4620      	mov	r0, r4
 8009952:	f000 fd29 	bl	800a3a8 <__i2b>
 8009956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009958:	2b00      	cmp	r3, #0
 800995a:	4606      	mov	r6, r0
 800995c:	dd7c      	ble.n	8009a58 <_dtoa_r+0x8d8>
 800995e:	461a      	mov	r2, r3
 8009960:	4601      	mov	r1, r0
 8009962:	4620      	mov	r0, r4
 8009964:	f000 fddc 	bl	800a520 <__pow5mult>
 8009968:	9b05      	ldr	r3, [sp, #20]
 800996a:	2b01      	cmp	r3, #1
 800996c:	4606      	mov	r6, r0
 800996e:	dd76      	ble.n	8009a5e <_dtoa_r+0x8de>
 8009970:	2300      	movs	r3, #0
 8009972:	9306      	str	r3, [sp, #24]
 8009974:	6933      	ldr	r3, [r6, #16]
 8009976:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800997a:	6918      	ldr	r0, [r3, #16]
 800997c:	f000 fcc4 	bl	800a308 <__hi0bits>
 8009980:	f1c0 0020 	rsb	r0, r0, #32
 8009984:	9b04      	ldr	r3, [sp, #16]
 8009986:	4418      	add	r0, r3
 8009988:	f010 001f 	ands.w	r0, r0, #31
 800998c:	f000 8086 	beq.w	8009a9c <_dtoa_r+0x91c>
 8009990:	f1c0 0320 	rsb	r3, r0, #32
 8009994:	2b04      	cmp	r3, #4
 8009996:	dd7f      	ble.n	8009a98 <_dtoa_r+0x918>
 8009998:	f1c0 001c 	rsb	r0, r0, #28
 800999c:	9b04      	ldr	r3, [sp, #16]
 800999e:	4403      	add	r3, r0
 80099a0:	4480      	add	r8, r0
 80099a2:	4405      	add	r5, r0
 80099a4:	9304      	str	r3, [sp, #16]
 80099a6:	f1b8 0f00 	cmp.w	r8, #0
 80099aa:	dd05      	ble.n	80099b8 <_dtoa_r+0x838>
 80099ac:	4659      	mov	r1, fp
 80099ae:	4642      	mov	r2, r8
 80099b0:	4620      	mov	r0, r4
 80099b2:	f000 fe0f 	bl	800a5d4 <__lshift>
 80099b6:	4683      	mov	fp, r0
 80099b8:	9b04      	ldr	r3, [sp, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	dd05      	ble.n	80099ca <_dtoa_r+0x84a>
 80099be:	4631      	mov	r1, r6
 80099c0:	461a      	mov	r2, r3
 80099c2:	4620      	mov	r0, r4
 80099c4:	f000 fe06 	bl	800a5d4 <__lshift>
 80099c8:	4606      	mov	r6, r0
 80099ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d069      	beq.n	8009aa4 <_dtoa_r+0x924>
 80099d0:	4631      	mov	r1, r6
 80099d2:	4658      	mov	r0, fp
 80099d4:	f000 fe6a 	bl	800a6ac <__mcmp>
 80099d8:	2800      	cmp	r0, #0
 80099da:	da63      	bge.n	8009aa4 <_dtoa_r+0x924>
 80099dc:	2300      	movs	r3, #0
 80099de:	4659      	mov	r1, fp
 80099e0:	220a      	movs	r2, #10
 80099e2:	4620      	mov	r0, r4
 80099e4:	f000 fc46 	bl	800a274 <__multadd>
 80099e8:	9b08      	ldr	r3, [sp, #32]
 80099ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099ee:	4683      	mov	fp, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f000 818f 	beq.w	8009d14 <_dtoa_r+0xb94>
 80099f6:	4639      	mov	r1, r7
 80099f8:	2300      	movs	r3, #0
 80099fa:	220a      	movs	r2, #10
 80099fc:	4620      	mov	r0, r4
 80099fe:	f000 fc39 	bl	800a274 <__multadd>
 8009a02:	f1b9 0f00 	cmp.w	r9, #0
 8009a06:	4607      	mov	r7, r0
 8009a08:	f300 808e 	bgt.w	8009b28 <_dtoa_r+0x9a8>
 8009a0c:	9b05      	ldr	r3, [sp, #20]
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	dc50      	bgt.n	8009ab4 <_dtoa_r+0x934>
 8009a12:	e089      	b.n	8009b28 <_dtoa_r+0x9a8>
 8009a14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009a1a:	e75d      	b.n	80098d8 <_dtoa_r+0x758>
 8009a1c:	9b01      	ldr	r3, [sp, #4]
 8009a1e:	1e5e      	subs	r6, r3, #1
 8009a20:	9b06      	ldr	r3, [sp, #24]
 8009a22:	42b3      	cmp	r3, r6
 8009a24:	bfbf      	itttt	lt
 8009a26:	9b06      	ldrlt	r3, [sp, #24]
 8009a28:	9606      	strlt	r6, [sp, #24]
 8009a2a:	1af2      	sublt	r2, r6, r3
 8009a2c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009a2e:	bfb6      	itet	lt
 8009a30:	189b      	addlt	r3, r3, r2
 8009a32:	1b9e      	subge	r6, r3, r6
 8009a34:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009a36:	9b01      	ldr	r3, [sp, #4]
 8009a38:	bfb8      	it	lt
 8009a3a:	2600      	movlt	r6, #0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	bfb5      	itete	lt
 8009a40:	eba8 0503 	sublt.w	r5, r8, r3
 8009a44:	9b01      	ldrge	r3, [sp, #4]
 8009a46:	2300      	movlt	r3, #0
 8009a48:	4645      	movge	r5, r8
 8009a4a:	e747      	b.n	80098dc <_dtoa_r+0x75c>
 8009a4c:	9e06      	ldr	r6, [sp, #24]
 8009a4e:	9f08      	ldr	r7, [sp, #32]
 8009a50:	4645      	mov	r5, r8
 8009a52:	e74c      	b.n	80098ee <_dtoa_r+0x76e>
 8009a54:	9a06      	ldr	r2, [sp, #24]
 8009a56:	e775      	b.n	8009944 <_dtoa_r+0x7c4>
 8009a58:	9b05      	ldr	r3, [sp, #20]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	dc18      	bgt.n	8009a90 <_dtoa_r+0x910>
 8009a5e:	9b02      	ldr	r3, [sp, #8]
 8009a60:	b9b3      	cbnz	r3, 8009a90 <_dtoa_r+0x910>
 8009a62:	9b03      	ldr	r3, [sp, #12]
 8009a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a68:	b9a3      	cbnz	r3, 8009a94 <_dtoa_r+0x914>
 8009a6a:	9b03      	ldr	r3, [sp, #12]
 8009a6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a70:	0d1b      	lsrs	r3, r3, #20
 8009a72:	051b      	lsls	r3, r3, #20
 8009a74:	b12b      	cbz	r3, 8009a82 <_dtoa_r+0x902>
 8009a76:	9b04      	ldr	r3, [sp, #16]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	9304      	str	r3, [sp, #16]
 8009a7c:	f108 0801 	add.w	r8, r8, #1
 8009a80:	2301      	movs	r3, #1
 8009a82:	9306      	str	r3, [sp, #24]
 8009a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f47f af74 	bne.w	8009974 <_dtoa_r+0x7f4>
 8009a8c:	2001      	movs	r0, #1
 8009a8e:	e779      	b.n	8009984 <_dtoa_r+0x804>
 8009a90:	2300      	movs	r3, #0
 8009a92:	e7f6      	b.n	8009a82 <_dtoa_r+0x902>
 8009a94:	9b02      	ldr	r3, [sp, #8]
 8009a96:	e7f4      	b.n	8009a82 <_dtoa_r+0x902>
 8009a98:	d085      	beq.n	80099a6 <_dtoa_r+0x826>
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	301c      	adds	r0, #28
 8009a9e:	e77d      	b.n	800999c <_dtoa_r+0x81c>
 8009aa0:	40240000 	.word	0x40240000
 8009aa4:	9b01      	ldr	r3, [sp, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	dc38      	bgt.n	8009b1c <_dtoa_r+0x99c>
 8009aaa:	9b05      	ldr	r3, [sp, #20]
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	dd35      	ble.n	8009b1c <_dtoa_r+0x99c>
 8009ab0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009ab4:	f1b9 0f00 	cmp.w	r9, #0
 8009ab8:	d10d      	bne.n	8009ad6 <_dtoa_r+0x956>
 8009aba:	4631      	mov	r1, r6
 8009abc:	464b      	mov	r3, r9
 8009abe:	2205      	movs	r2, #5
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f000 fbd7 	bl	800a274 <__multadd>
 8009ac6:	4601      	mov	r1, r0
 8009ac8:	4606      	mov	r6, r0
 8009aca:	4658      	mov	r0, fp
 8009acc:	f000 fdee 	bl	800a6ac <__mcmp>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	f73f adbd 	bgt.w	8009650 <_dtoa_r+0x4d0>
 8009ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad8:	9d00      	ldr	r5, [sp, #0]
 8009ada:	ea6f 0a03 	mvn.w	sl, r3
 8009ade:	f04f 0800 	mov.w	r8, #0
 8009ae2:	4631      	mov	r1, r6
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f000 fba3 	bl	800a230 <_Bfree>
 8009aea:	2f00      	cmp	r7, #0
 8009aec:	f43f aeb4 	beq.w	8009858 <_dtoa_r+0x6d8>
 8009af0:	f1b8 0f00 	cmp.w	r8, #0
 8009af4:	d005      	beq.n	8009b02 <_dtoa_r+0x982>
 8009af6:	45b8      	cmp	r8, r7
 8009af8:	d003      	beq.n	8009b02 <_dtoa_r+0x982>
 8009afa:	4641      	mov	r1, r8
 8009afc:	4620      	mov	r0, r4
 8009afe:	f000 fb97 	bl	800a230 <_Bfree>
 8009b02:	4639      	mov	r1, r7
 8009b04:	4620      	mov	r0, r4
 8009b06:	f000 fb93 	bl	800a230 <_Bfree>
 8009b0a:	e6a5      	b.n	8009858 <_dtoa_r+0x6d8>
 8009b0c:	2600      	movs	r6, #0
 8009b0e:	4637      	mov	r7, r6
 8009b10:	e7e1      	b.n	8009ad6 <_dtoa_r+0x956>
 8009b12:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009b14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009b18:	4637      	mov	r7, r6
 8009b1a:	e599      	b.n	8009650 <_dtoa_r+0x4d0>
 8009b1c:	9b08      	ldr	r3, [sp, #32]
 8009b1e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f000 80fd 	beq.w	8009d22 <_dtoa_r+0xba2>
 8009b28:	2d00      	cmp	r5, #0
 8009b2a:	dd05      	ble.n	8009b38 <_dtoa_r+0x9b8>
 8009b2c:	4639      	mov	r1, r7
 8009b2e:	462a      	mov	r2, r5
 8009b30:	4620      	mov	r0, r4
 8009b32:	f000 fd4f 	bl	800a5d4 <__lshift>
 8009b36:	4607      	mov	r7, r0
 8009b38:	9b06      	ldr	r3, [sp, #24]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d05c      	beq.n	8009bf8 <_dtoa_r+0xa78>
 8009b3e:	6879      	ldr	r1, [r7, #4]
 8009b40:	4620      	mov	r0, r4
 8009b42:	f000 fb35 	bl	800a1b0 <_Balloc>
 8009b46:	4605      	mov	r5, r0
 8009b48:	b928      	cbnz	r0, 8009b56 <_dtoa_r+0x9d6>
 8009b4a:	4b80      	ldr	r3, [pc, #512]	; (8009d4c <_dtoa_r+0xbcc>)
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009b52:	f7ff bb2e 	b.w	80091b2 <_dtoa_r+0x32>
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	3202      	adds	r2, #2
 8009b5a:	0092      	lsls	r2, r2, #2
 8009b5c:	f107 010c 	add.w	r1, r7, #12
 8009b60:	300c      	adds	r0, #12
 8009b62:	f7fe fca9 	bl	80084b8 <memcpy>
 8009b66:	2201      	movs	r2, #1
 8009b68:	4629      	mov	r1, r5
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f000 fd32 	bl	800a5d4 <__lshift>
 8009b70:	9b00      	ldr	r3, [sp, #0]
 8009b72:	3301      	adds	r3, #1
 8009b74:	9301      	str	r3, [sp, #4]
 8009b76:	9b00      	ldr	r3, [sp, #0]
 8009b78:	444b      	add	r3, r9
 8009b7a:	9307      	str	r3, [sp, #28]
 8009b7c:	9b02      	ldr	r3, [sp, #8]
 8009b7e:	f003 0301 	and.w	r3, r3, #1
 8009b82:	46b8      	mov	r8, r7
 8009b84:	9306      	str	r3, [sp, #24]
 8009b86:	4607      	mov	r7, r0
 8009b88:	9b01      	ldr	r3, [sp, #4]
 8009b8a:	4631      	mov	r1, r6
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	4658      	mov	r0, fp
 8009b90:	9302      	str	r3, [sp, #8]
 8009b92:	f7ff fa67 	bl	8009064 <quorem>
 8009b96:	4603      	mov	r3, r0
 8009b98:	3330      	adds	r3, #48	; 0x30
 8009b9a:	9004      	str	r0, [sp, #16]
 8009b9c:	4641      	mov	r1, r8
 8009b9e:	4658      	mov	r0, fp
 8009ba0:	9308      	str	r3, [sp, #32]
 8009ba2:	f000 fd83 	bl	800a6ac <__mcmp>
 8009ba6:	463a      	mov	r2, r7
 8009ba8:	4681      	mov	r9, r0
 8009baa:	4631      	mov	r1, r6
 8009bac:	4620      	mov	r0, r4
 8009bae:	f000 fd99 	bl	800a6e4 <__mdiff>
 8009bb2:	68c2      	ldr	r2, [r0, #12]
 8009bb4:	9b08      	ldr	r3, [sp, #32]
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	bb02      	cbnz	r2, 8009bfc <_dtoa_r+0xa7c>
 8009bba:	4601      	mov	r1, r0
 8009bbc:	4658      	mov	r0, fp
 8009bbe:	f000 fd75 	bl	800a6ac <__mcmp>
 8009bc2:	9b08      	ldr	r3, [sp, #32]
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	4629      	mov	r1, r5
 8009bc8:	4620      	mov	r0, r4
 8009bca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009bce:	f000 fb2f 	bl	800a230 <_Bfree>
 8009bd2:	9b05      	ldr	r3, [sp, #20]
 8009bd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bd6:	9d01      	ldr	r5, [sp, #4]
 8009bd8:	ea43 0102 	orr.w	r1, r3, r2
 8009bdc:	9b06      	ldr	r3, [sp, #24]
 8009bde:	430b      	orrs	r3, r1
 8009be0:	9b08      	ldr	r3, [sp, #32]
 8009be2:	d10d      	bne.n	8009c00 <_dtoa_r+0xa80>
 8009be4:	2b39      	cmp	r3, #57	; 0x39
 8009be6:	d029      	beq.n	8009c3c <_dtoa_r+0xabc>
 8009be8:	f1b9 0f00 	cmp.w	r9, #0
 8009bec:	dd01      	ble.n	8009bf2 <_dtoa_r+0xa72>
 8009bee:	9b04      	ldr	r3, [sp, #16]
 8009bf0:	3331      	adds	r3, #49	; 0x31
 8009bf2:	9a02      	ldr	r2, [sp, #8]
 8009bf4:	7013      	strb	r3, [r2, #0]
 8009bf6:	e774      	b.n	8009ae2 <_dtoa_r+0x962>
 8009bf8:	4638      	mov	r0, r7
 8009bfa:	e7b9      	b.n	8009b70 <_dtoa_r+0x9f0>
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	e7e2      	b.n	8009bc6 <_dtoa_r+0xa46>
 8009c00:	f1b9 0f00 	cmp.w	r9, #0
 8009c04:	db06      	blt.n	8009c14 <_dtoa_r+0xa94>
 8009c06:	9905      	ldr	r1, [sp, #20]
 8009c08:	ea41 0909 	orr.w	r9, r1, r9
 8009c0c:	9906      	ldr	r1, [sp, #24]
 8009c0e:	ea59 0101 	orrs.w	r1, r9, r1
 8009c12:	d120      	bne.n	8009c56 <_dtoa_r+0xad6>
 8009c14:	2a00      	cmp	r2, #0
 8009c16:	ddec      	ble.n	8009bf2 <_dtoa_r+0xa72>
 8009c18:	4659      	mov	r1, fp
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	9301      	str	r3, [sp, #4]
 8009c20:	f000 fcd8 	bl	800a5d4 <__lshift>
 8009c24:	4631      	mov	r1, r6
 8009c26:	4683      	mov	fp, r0
 8009c28:	f000 fd40 	bl	800a6ac <__mcmp>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	9b01      	ldr	r3, [sp, #4]
 8009c30:	dc02      	bgt.n	8009c38 <_dtoa_r+0xab8>
 8009c32:	d1de      	bne.n	8009bf2 <_dtoa_r+0xa72>
 8009c34:	07da      	lsls	r2, r3, #31
 8009c36:	d5dc      	bpl.n	8009bf2 <_dtoa_r+0xa72>
 8009c38:	2b39      	cmp	r3, #57	; 0x39
 8009c3a:	d1d8      	bne.n	8009bee <_dtoa_r+0xa6e>
 8009c3c:	9a02      	ldr	r2, [sp, #8]
 8009c3e:	2339      	movs	r3, #57	; 0x39
 8009c40:	7013      	strb	r3, [r2, #0]
 8009c42:	462b      	mov	r3, r5
 8009c44:	461d      	mov	r5, r3
 8009c46:	3b01      	subs	r3, #1
 8009c48:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009c4c:	2a39      	cmp	r2, #57	; 0x39
 8009c4e:	d050      	beq.n	8009cf2 <_dtoa_r+0xb72>
 8009c50:	3201      	adds	r2, #1
 8009c52:	701a      	strb	r2, [r3, #0]
 8009c54:	e745      	b.n	8009ae2 <_dtoa_r+0x962>
 8009c56:	2a00      	cmp	r2, #0
 8009c58:	dd03      	ble.n	8009c62 <_dtoa_r+0xae2>
 8009c5a:	2b39      	cmp	r3, #57	; 0x39
 8009c5c:	d0ee      	beq.n	8009c3c <_dtoa_r+0xabc>
 8009c5e:	3301      	adds	r3, #1
 8009c60:	e7c7      	b.n	8009bf2 <_dtoa_r+0xa72>
 8009c62:	9a01      	ldr	r2, [sp, #4]
 8009c64:	9907      	ldr	r1, [sp, #28]
 8009c66:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009c6a:	428a      	cmp	r2, r1
 8009c6c:	d02a      	beq.n	8009cc4 <_dtoa_r+0xb44>
 8009c6e:	4659      	mov	r1, fp
 8009c70:	2300      	movs	r3, #0
 8009c72:	220a      	movs	r2, #10
 8009c74:	4620      	mov	r0, r4
 8009c76:	f000 fafd 	bl	800a274 <__multadd>
 8009c7a:	45b8      	cmp	r8, r7
 8009c7c:	4683      	mov	fp, r0
 8009c7e:	f04f 0300 	mov.w	r3, #0
 8009c82:	f04f 020a 	mov.w	r2, #10
 8009c86:	4641      	mov	r1, r8
 8009c88:	4620      	mov	r0, r4
 8009c8a:	d107      	bne.n	8009c9c <_dtoa_r+0xb1c>
 8009c8c:	f000 faf2 	bl	800a274 <__multadd>
 8009c90:	4680      	mov	r8, r0
 8009c92:	4607      	mov	r7, r0
 8009c94:	9b01      	ldr	r3, [sp, #4]
 8009c96:	3301      	adds	r3, #1
 8009c98:	9301      	str	r3, [sp, #4]
 8009c9a:	e775      	b.n	8009b88 <_dtoa_r+0xa08>
 8009c9c:	f000 faea 	bl	800a274 <__multadd>
 8009ca0:	4639      	mov	r1, r7
 8009ca2:	4680      	mov	r8, r0
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	220a      	movs	r2, #10
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f000 fae3 	bl	800a274 <__multadd>
 8009cae:	4607      	mov	r7, r0
 8009cb0:	e7f0      	b.n	8009c94 <_dtoa_r+0xb14>
 8009cb2:	f1b9 0f00 	cmp.w	r9, #0
 8009cb6:	9a00      	ldr	r2, [sp, #0]
 8009cb8:	bfcc      	ite	gt
 8009cba:	464d      	movgt	r5, r9
 8009cbc:	2501      	movle	r5, #1
 8009cbe:	4415      	add	r5, r2
 8009cc0:	f04f 0800 	mov.w	r8, #0
 8009cc4:	4659      	mov	r1, fp
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	4620      	mov	r0, r4
 8009cca:	9301      	str	r3, [sp, #4]
 8009ccc:	f000 fc82 	bl	800a5d4 <__lshift>
 8009cd0:	4631      	mov	r1, r6
 8009cd2:	4683      	mov	fp, r0
 8009cd4:	f000 fcea 	bl	800a6ac <__mcmp>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	dcb2      	bgt.n	8009c42 <_dtoa_r+0xac2>
 8009cdc:	d102      	bne.n	8009ce4 <_dtoa_r+0xb64>
 8009cde:	9b01      	ldr	r3, [sp, #4]
 8009ce0:	07db      	lsls	r3, r3, #31
 8009ce2:	d4ae      	bmi.n	8009c42 <_dtoa_r+0xac2>
 8009ce4:	462b      	mov	r3, r5
 8009ce6:	461d      	mov	r5, r3
 8009ce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cec:	2a30      	cmp	r2, #48	; 0x30
 8009cee:	d0fa      	beq.n	8009ce6 <_dtoa_r+0xb66>
 8009cf0:	e6f7      	b.n	8009ae2 <_dtoa_r+0x962>
 8009cf2:	9a00      	ldr	r2, [sp, #0]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d1a5      	bne.n	8009c44 <_dtoa_r+0xac4>
 8009cf8:	f10a 0a01 	add.w	sl, sl, #1
 8009cfc:	2331      	movs	r3, #49	; 0x31
 8009cfe:	e779      	b.n	8009bf4 <_dtoa_r+0xa74>
 8009d00:	4b13      	ldr	r3, [pc, #76]	; (8009d50 <_dtoa_r+0xbd0>)
 8009d02:	f7ff baaf 	b.w	8009264 <_dtoa_r+0xe4>
 8009d06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f47f aa86 	bne.w	800921a <_dtoa_r+0x9a>
 8009d0e:	4b11      	ldr	r3, [pc, #68]	; (8009d54 <_dtoa_r+0xbd4>)
 8009d10:	f7ff baa8 	b.w	8009264 <_dtoa_r+0xe4>
 8009d14:	f1b9 0f00 	cmp.w	r9, #0
 8009d18:	dc03      	bgt.n	8009d22 <_dtoa_r+0xba2>
 8009d1a:	9b05      	ldr	r3, [sp, #20]
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	f73f aec9 	bgt.w	8009ab4 <_dtoa_r+0x934>
 8009d22:	9d00      	ldr	r5, [sp, #0]
 8009d24:	4631      	mov	r1, r6
 8009d26:	4658      	mov	r0, fp
 8009d28:	f7ff f99c 	bl	8009064 <quorem>
 8009d2c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009d30:	f805 3b01 	strb.w	r3, [r5], #1
 8009d34:	9a00      	ldr	r2, [sp, #0]
 8009d36:	1aaa      	subs	r2, r5, r2
 8009d38:	4591      	cmp	r9, r2
 8009d3a:	ddba      	ble.n	8009cb2 <_dtoa_r+0xb32>
 8009d3c:	4659      	mov	r1, fp
 8009d3e:	2300      	movs	r3, #0
 8009d40:	220a      	movs	r2, #10
 8009d42:	4620      	mov	r0, r4
 8009d44:	f000 fa96 	bl	800a274 <__multadd>
 8009d48:	4683      	mov	fp, r0
 8009d4a:	e7eb      	b.n	8009d24 <_dtoa_r+0xba4>
 8009d4c:	0800b0ab 	.word	0x0800b0ab
 8009d50:	0800b004 	.word	0x0800b004
 8009d54:	0800b028 	.word	0x0800b028

08009d58 <__sflush_r>:
 8009d58:	898a      	ldrh	r2, [r1, #12]
 8009d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d5e:	4605      	mov	r5, r0
 8009d60:	0710      	lsls	r0, r2, #28
 8009d62:	460c      	mov	r4, r1
 8009d64:	d458      	bmi.n	8009e18 <__sflush_r+0xc0>
 8009d66:	684b      	ldr	r3, [r1, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	dc05      	bgt.n	8009d78 <__sflush_r+0x20>
 8009d6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	dc02      	bgt.n	8009d78 <__sflush_r+0x20>
 8009d72:	2000      	movs	r0, #0
 8009d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d7a:	2e00      	cmp	r6, #0
 8009d7c:	d0f9      	beq.n	8009d72 <__sflush_r+0x1a>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d84:	682f      	ldr	r7, [r5, #0]
 8009d86:	602b      	str	r3, [r5, #0]
 8009d88:	d032      	beq.n	8009df0 <__sflush_r+0x98>
 8009d8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d8c:	89a3      	ldrh	r3, [r4, #12]
 8009d8e:	075a      	lsls	r2, r3, #29
 8009d90:	d505      	bpl.n	8009d9e <__sflush_r+0x46>
 8009d92:	6863      	ldr	r3, [r4, #4]
 8009d94:	1ac0      	subs	r0, r0, r3
 8009d96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d98:	b10b      	cbz	r3, 8009d9e <__sflush_r+0x46>
 8009d9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d9c:	1ac0      	subs	r0, r0, r3
 8009d9e:	2300      	movs	r3, #0
 8009da0:	4602      	mov	r2, r0
 8009da2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009da4:	6a21      	ldr	r1, [r4, #32]
 8009da6:	4628      	mov	r0, r5
 8009da8:	47b0      	blx	r6
 8009daa:	1c43      	adds	r3, r0, #1
 8009dac:	89a3      	ldrh	r3, [r4, #12]
 8009dae:	d106      	bne.n	8009dbe <__sflush_r+0x66>
 8009db0:	6829      	ldr	r1, [r5, #0]
 8009db2:	291d      	cmp	r1, #29
 8009db4:	d82c      	bhi.n	8009e10 <__sflush_r+0xb8>
 8009db6:	4a2a      	ldr	r2, [pc, #168]	; (8009e60 <__sflush_r+0x108>)
 8009db8:	40ca      	lsrs	r2, r1
 8009dba:	07d6      	lsls	r6, r2, #31
 8009dbc:	d528      	bpl.n	8009e10 <__sflush_r+0xb8>
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	6062      	str	r2, [r4, #4]
 8009dc2:	04d9      	lsls	r1, r3, #19
 8009dc4:	6922      	ldr	r2, [r4, #16]
 8009dc6:	6022      	str	r2, [r4, #0]
 8009dc8:	d504      	bpl.n	8009dd4 <__sflush_r+0x7c>
 8009dca:	1c42      	adds	r2, r0, #1
 8009dcc:	d101      	bne.n	8009dd2 <__sflush_r+0x7a>
 8009dce:	682b      	ldr	r3, [r5, #0]
 8009dd0:	b903      	cbnz	r3, 8009dd4 <__sflush_r+0x7c>
 8009dd2:	6560      	str	r0, [r4, #84]	; 0x54
 8009dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dd6:	602f      	str	r7, [r5, #0]
 8009dd8:	2900      	cmp	r1, #0
 8009dda:	d0ca      	beq.n	8009d72 <__sflush_r+0x1a>
 8009ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009de0:	4299      	cmp	r1, r3
 8009de2:	d002      	beq.n	8009dea <__sflush_r+0x92>
 8009de4:	4628      	mov	r0, r5
 8009de6:	f000 fd71 	bl	800a8cc <_free_r>
 8009dea:	2000      	movs	r0, #0
 8009dec:	6360      	str	r0, [r4, #52]	; 0x34
 8009dee:	e7c1      	b.n	8009d74 <__sflush_r+0x1c>
 8009df0:	6a21      	ldr	r1, [r4, #32]
 8009df2:	2301      	movs	r3, #1
 8009df4:	4628      	mov	r0, r5
 8009df6:	47b0      	blx	r6
 8009df8:	1c41      	adds	r1, r0, #1
 8009dfa:	d1c7      	bne.n	8009d8c <__sflush_r+0x34>
 8009dfc:	682b      	ldr	r3, [r5, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0c4      	beq.n	8009d8c <__sflush_r+0x34>
 8009e02:	2b1d      	cmp	r3, #29
 8009e04:	d001      	beq.n	8009e0a <__sflush_r+0xb2>
 8009e06:	2b16      	cmp	r3, #22
 8009e08:	d101      	bne.n	8009e0e <__sflush_r+0xb6>
 8009e0a:	602f      	str	r7, [r5, #0]
 8009e0c:	e7b1      	b.n	8009d72 <__sflush_r+0x1a>
 8009e0e:	89a3      	ldrh	r3, [r4, #12]
 8009e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e14:	81a3      	strh	r3, [r4, #12]
 8009e16:	e7ad      	b.n	8009d74 <__sflush_r+0x1c>
 8009e18:	690f      	ldr	r7, [r1, #16]
 8009e1a:	2f00      	cmp	r7, #0
 8009e1c:	d0a9      	beq.n	8009d72 <__sflush_r+0x1a>
 8009e1e:	0793      	lsls	r3, r2, #30
 8009e20:	680e      	ldr	r6, [r1, #0]
 8009e22:	bf08      	it	eq
 8009e24:	694b      	ldreq	r3, [r1, #20]
 8009e26:	600f      	str	r7, [r1, #0]
 8009e28:	bf18      	it	ne
 8009e2a:	2300      	movne	r3, #0
 8009e2c:	eba6 0807 	sub.w	r8, r6, r7
 8009e30:	608b      	str	r3, [r1, #8]
 8009e32:	f1b8 0f00 	cmp.w	r8, #0
 8009e36:	dd9c      	ble.n	8009d72 <__sflush_r+0x1a>
 8009e38:	6a21      	ldr	r1, [r4, #32]
 8009e3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e3c:	4643      	mov	r3, r8
 8009e3e:	463a      	mov	r2, r7
 8009e40:	4628      	mov	r0, r5
 8009e42:	47b0      	blx	r6
 8009e44:	2800      	cmp	r0, #0
 8009e46:	dc06      	bgt.n	8009e56 <__sflush_r+0xfe>
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e4e:	81a3      	strh	r3, [r4, #12]
 8009e50:	f04f 30ff 	mov.w	r0, #4294967295
 8009e54:	e78e      	b.n	8009d74 <__sflush_r+0x1c>
 8009e56:	4407      	add	r7, r0
 8009e58:	eba8 0800 	sub.w	r8, r8, r0
 8009e5c:	e7e9      	b.n	8009e32 <__sflush_r+0xda>
 8009e5e:	bf00      	nop
 8009e60:	20400001 	.word	0x20400001

08009e64 <_fflush_r>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	690b      	ldr	r3, [r1, #16]
 8009e68:	4605      	mov	r5, r0
 8009e6a:	460c      	mov	r4, r1
 8009e6c:	b913      	cbnz	r3, 8009e74 <_fflush_r+0x10>
 8009e6e:	2500      	movs	r5, #0
 8009e70:	4628      	mov	r0, r5
 8009e72:	bd38      	pop	{r3, r4, r5, pc}
 8009e74:	b118      	cbz	r0, 8009e7e <_fflush_r+0x1a>
 8009e76:	6983      	ldr	r3, [r0, #24]
 8009e78:	b90b      	cbnz	r3, 8009e7e <_fflush_r+0x1a>
 8009e7a:	f000 f887 	bl	8009f8c <__sinit>
 8009e7e:	4b14      	ldr	r3, [pc, #80]	; (8009ed0 <_fflush_r+0x6c>)
 8009e80:	429c      	cmp	r4, r3
 8009e82:	d11b      	bne.n	8009ebc <_fflush_r+0x58>
 8009e84:	686c      	ldr	r4, [r5, #4]
 8009e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d0ef      	beq.n	8009e6e <_fflush_r+0xa>
 8009e8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e90:	07d0      	lsls	r0, r2, #31
 8009e92:	d404      	bmi.n	8009e9e <_fflush_r+0x3a>
 8009e94:	0599      	lsls	r1, r3, #22
 8009e96:	d402      	bmi.n	8009e9e <_fflush_r+0x3a>
 8009e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e9a:	f000 f91a 	bl	800a0d2 <__retarget_lock_acquire_recursive>
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	f7ff ff59 	bl	8009d58 <__sflush_r>
 8009ea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ea8:	07da      	lsls	r2, r3, #31
 8009eaa:	4605      	mov	r5, r0
 8009eac:	d4e0      	bmi.n	8009e70 <_fflush_r+0xc>
 8009eae:	89a3      	ldrh	r3, [r4, #12]
 8009eb0:	059b      	lsls	r3, r3, #22
 8009eb2:	d4dd      	bmi.n	8009e70 <_fflush_r+0xc>
 8009eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eb6:	f000 f90d 	bl	800a0d4 <__retarget_lock_release_recursive>
 8009eba:	e7d9      	b.n	8009e70 <_fflush_r+0xc>
 8009ebc:	4b05      	ldr	r3, [pc, #20]	; (8009ed4 <_fflush_r+0x70>)
 8009ebe:	429c      	cmp	r4, r3
 8009ec0:	d101      	bne.n	8009ec6 <_fflush_r+0x62>
 8009ec2:	68ac      	ldr	r4, [r5, #8]
 8009ec4:	e7df      	b.n	8009e86 <_fflush_r+0x22>
 8009ec6:	4b04      	ldr	r3, [pc, #16]	; (8009ed8 <_fflush_r+0x74>)
 8009ec8:	429c      	cmp	r4, r3
 8009eca:	bf08      	it	eq
 8009ecc:	68ec      	ldreq	r4, [r5, #12]
 8009ece:	e7da      	b.n	8009e86 <_fflush_r+0x22>
 8009ed0:	0800b0dc 	.word	0x0800b0dc
 8009ed4:	0800b0fc 	.word	0x0800b0fc
 8009ed8:	0800b0bc 	.word	0x0800b0bc

08009edc <std>:
 8009edc:	2300      	movs	r3, #0
 8009ede:	b510      	push	{r4, lr}
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8009ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009eea:	6083      	str	r3, [r0, #8]
 8009eec:	8181      	strh	r1, [r0, #12]
 8009eee:	6643      	str	r3, [r0, #100]	; 0x64
 8009ef0:	81c2      	strh	r2, [r0, #14]
 8009ef2:	6183      	str	r3, [r0, #24]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	2208      	movs	r2, #8
 8009ef8:	305c      	adds	r0, #92	; 0x5c
 8009efa:	f7fe faeb 	bl	80084d4 <memset>
 8009efe:	4b05      	ldr	r3, [pc, #20]	; (8009f14 <std+0x38>)
 8009f00:	6263      	str	r3, [r4, #36]	; 0x24
 8009f02:	4b05      	ldr	r3, [pc, #20]	; (8009f18 <std+0x3c>)
 8009f04:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f06:	4b05      	ldr	r3, [pc, #20]	; (8009f1c <std+0x40>)
 8009f08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f0a:	4b05      	ldr	r3, [pc, #20]	; (8009f20 <std+0x44>)
 8009f0c:	6224      	str	r4, [r4, #32]
 8009f0e:	6323      	str	r3, [r4, #48]	; 0x30
 8009f10:	bd10      	pop	{r4, pc}
 8009f12:	bf00      	nop
 8009f14:	0800acf5 	.word	0x0800acf5
 8009f18:	0800ad17 	.word	0x0800ad17
 8009f1c:	0800ad4f 	.word	0x0800ad4f
 8009f20:	0800ad73 	.word	0x0800ad73

08009f24 <_cleanup_r>:
 8009f24:	4901      	ldr	r1, [pc, #4]	; (8009f2c <_cleanup_r+0x8>)
 8009f26:	f000 b8af 	b.w	800a088 <_fwalk_reent>
 8009f2a:	bf00      	nop
 8009f2c:	08009e65 	.word	0x08009e65

08009f30 <__sfmoreglue>:
 8009f30:	b570      	push	{r4, r5, r6, lr}
 8009f32:	1e4a      	subs	r2, r1, #1
 8009f34:	2568      	movs	r5, #104	; 0x68
 8009f36:	4355      	muls	r5, r2
 8009f38:	460e      	mov	r6, r1
 8009f3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f3e:	f000 fd15 	bl	800a96c <_malloc_r>
 8009f42:	4604      	mov	r4, r0
 8009f44:	b140      	cbz	r0, 8009f58 <__sfmoreglue+0x28>
 8009f46:	2100      	movs	r1, #0
 8009f48:	e9c0 1600 	strd	r1, r6, [r0]
 8009f4c:	300c      	adds	r0, #12
 8009f4e:	60a0      	str	r0, [r4, #8]
 8009f50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f54:	f7fe fabe 	bl	80084d4 <memset>
 8009f58:	4620      	mov	r0, r4
 8009f5a:	bd70      	pop	{r4, r5, r6, pc}

08009f5c <__sfp_lock_acquire>:
 8009f5c:	4801      	ldr	r0, [pc, #4]	; (8009f64 <__sfp_lock_acquire+0x8>)
 8009f5e:	f000 b8b8 	b.w	800a0d2 <__retarget_lock_acquire_recursive>
 8009f62:	bf00      	nop
 8009f64:	20000760 	.word	0x20000760

08009f68 <__sfp_lock_release>:
 8009f68:	4801      	ldr	r0, [pc, #4]	; (8009f70 <__sfp_lock_release+0x8>)
 8009f6a:	f000 b8b3 	b.w	800a0d4 <__retarget_lock_release_recursive>
 8009f6e:	bf00      	nop
 8009f70:	20000760 	.word	0x20000760

08009f74 <__sinit_lock_acquire>:
 8009f74:	4801      	ldr	r0, [pc, #4]	; (8009f7c <__sinit_lock_acquire+0x8>)
 8009f76:	f000 b8ac 	b.w	800a0d2 <__retarget_lock_acquire_recursive>
 8009f7a:	bf00      	nop
 8009f7c:	2000075b 	.word	0x2000075b

08009f80 <__sinit_lock_release>:
 8009f80:	4801      	ldr	r0, [pc, #4]	; (8009f88 <__sinit_lock_release+0x8>)
 8009f82:	f000 b8a7 	b.w	800a0d4 <__retarget_lock_release_recursive>
 8009f86:	bf00      	nop
 8009f88:	2000075b 	.word	0x2000075b

08009f8c <__sinit>:
 8009f8c:	b510      	push	{r4, lr}
 8009f8e:	4604      	mov	r4, r0
 8009f90:	f7ff fff0 	bl	8009f74 <__sinit_lock_acquire>
 8009f94:	69a3      	ldr	r3, [r4, #24]
 8009f96:	b11b      	cbz	r3, 8009fa0 <__sinit+0x14>
 8009f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f9c:	f7ff bff0 	b.w	8009f80 <__sinit_lock_release>
 8009fa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009fa4:	6523      	str	r3, [r4, #80]	; 0x50
 8009fa6:	4b13      	ldr	r3, [pc, #76]	; (8009ff4 <__sinit+0x68>)
 8009fa8:	4a13      	ldr	r2, [pc, #76]	; (8009ff8 <__sinit+0x6c>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	62a2      	str	r2, [r4, #40]	; 0x28
 8009fae:	42a3      	cmp	r3, r4
 8009fb0:	bf04      	itt	eq
 8009fb2:	2301      	moveq	r3, #1
 8009fb4:	61a3      	streq	r3, [r4, #24]
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f000 f820 	bl	8009ffc <__sfp>
 8009fbc:	6060      	str	r0, [r4, #4]
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f000 f81c 	bl	8009ffc <__sfp>
 8009fc4:	60a0      	str	r0, [r4, #8]
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f000 f818 	bl	8009ffc <__sfp>
 8009fcc:	2200      	movs	r2, #0
 8009fce:	60e0      	str	r0, [r4, #12]
 8009fd0:	2104      	movs	r1, #4
 8009fd2:	6860      	ldr	r0, [r4, #4]
 8009fd4:	f7ff ff82 	bl	8009edc <std>
 8009fd8:	68a0      	ldr	r0, [r4, #8]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	2109      	movs	r1, #9
 8009fde:	f7ff ff7d 	bl	8009edc <std>
 8009fe2:	68e0      	ldr	r0, [r4, #12]
 8009fe4:	2202      	movs	r2, #2
 8009fe6:	2112      	movs	r1, #18
 8009fe8:	f7ff ff78 	bl	8009edc <std>
 8009fec:	2301      	movs	r3, #1
 8009fee:	61a3      	str	r3, [r4, #24]
 8009ff0:	e7d2      	b.n	8009f98 <__sinit+0xc>
 8009ff2:	bf00      	nop
 8009ff4:	0800aff0 	.word	0x0800aff0
 8009ff8:	08009f25 	.word	0x08009f25

08009ffc <__sfp>:
 8009ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffe:	4607      	mov	r7, r0
 800a000:	f7ff ffac 	bl	8009f5c <__sfp_lock_acquire>
 800a004:	4b1e      	ldr	r3, [pc, #120]	; (800a080 <__sfp+0x84>)
 800a006:	681e      	ldr	r6, [r3, #0]
 800a008:	69b3      	ldr	r3, [r6, #24]
 800a00a:	b913      	cbnz	r3, 800a012 <__sfp+0x16>
 800a00c:	4630      	mov	r0, r6
 800a00e:	f7ff ffbd 	bl	8009f8c <__sinit>
 800a012:	3648      	adds	r6, #72	; 0x48
 800a014:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a018:	3b01      	subs	r3, #1
 800a01a:	d503      	bpl.n	800a024 <__sfp+0x28>
 800a01c:	6833      	ldr	r3, [r6, #0]
 800a01e:	b30b      	cbz	r3, 800a064 <__sfp+0x68>
 800a020:	6836      	ldr	r6, [r6, #0]
 800a022:	e7f7      	b.n	800a014 <__sfp+0x18>
 800a024:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a028:	b9d5      	cbnz	r5, 800a060 <__sfp+0x64>
 800a02a:	4b16      	ldr	r3, [pc, #88]	; (800a084 <__sfp+0x88>)
 800a02c:	60e3      	str	r3, [r4, #12]
 800a02e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a032:	6665      	str	r5, [r4, #100]	; 0x64
 800a034:	f000 f84c 	bl	800a0d0 <__retarget_lock_init_recursive>
 800a038:	f7ff ff96 	bl	8009f68 <__sfp_lock_release>
 800a03c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a040:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a044:	6025      	str	r5, [r4, #0]
 800a046:	61a5      	str	r5, [r4, #24]
 800a048:	2208      	movs	r2, #8
 800a04a:	4629      	mov	r1, r5
 800a04c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a050:	f7fe fa40 	bl	80084d4 <memset>
 800a054:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a058:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a05c:	4620      	mov	r0, r4
 800a05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a060:	3468      	adds	r4, #104	; 0x68
 800a062:	e7d9      	b.n	800a018 <__sfp+0x1c>
 800a064:	2104      	movs	r1, #4
 800a066:	4638      	mov	r0, r7
 800a068:	f7ff ff62 	bl	8009f30 <__sfmoreglue>
 800a06c:	4604      	mov	r4, r0
 800a06e:	6030      	str	r0, [r6, #0]
 800a070:	2800      	cmp	r0, #0
 800a072:	d1d5      	bne.n	800a020 <__sfp+0x24>
 800a074:	f7ff ff78 	bl	8009f68 <__sfp_lock_release>
 800a078:	230c      	movs	r3, #12
 800a07a:	603b      	str	r3, [r7, #0]
 800a07c:	e7ee      	b.n	800a05c <__sfp+0x60>
 800a07e:	bf00      	nop
 800a080:	0800aff0 	.word	0x0800aff0
 800a084:	ffff0001 	.word	0xffff0001

0800a088 <_fwalk_reent>:
 800a088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a08c:	4606      	mov	r6, r0
 800a08e:	4688      	mov	r8, r1
 800a090:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a094:	2700      	movs	r7, #0
 800a096:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a09a:	f1b9 0901 	subs.w	r9, r9, #1
 800a09e:	d505      	bpl.n	800a0ac <_fwalk_reent+0x24>
 800a0a0:	6824      	ldr	r4, [r4, #0]
 800a0a2:	2c00      	cmp	r4, #0
 800a0a4:	d1f7      	bne.n	800a096 <_fwalk_reent+0xe>
 800a0a6:	4638      	mov	r0, r7
 800a0a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ac:	89ab      	ldrh	r3, [r5, #12]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d907      	bls.n	800a0c2 <_fwalk_reent+0x3a>
 800a0b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	d003      	beq.n	800a0c2 <_fwalk_reent+0x3a>
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	4630      	mov	r0, r6
 800a0be:	47c0      	blx	r8
 800a0c0:	4307      	orrs	r7, r0
 800a0c2:	3568      	adds	r5, #104	; 0x68
 800a0c4:	e7e9      	b.n	800a09a <_fwalk_reent+0x12>
	...

0800a0c8 <_localeconv_r>:
 800a0c8:	4800      	ldr	r0, [pc, #0]	; (800a0cc <_localeconv_r+0x4>)
 800a0ca:	4770      	bx	lr
 800a0cc:	2000041c 	.word	0x2000041c

0800a0d0 <__retarget_lock_init_recursive>:
 800a0d0:	4770      	bx	lr

0800a0d2 <__retarget_lock_acquire_recursive>:
 800a0d2:	4770      	bx	lr

0800a0d4 <__retarget_lock_release_recursive>:
 800a0d4:	4770      	bx	lr

0800a0d6 <__swhatbuf_r>:
 800a0d6:	b570      	push	{r4, r5, r6, lr}
 800a0d8:	460e      	mov	r6, r1
 800a0da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0de:	2900      	cmp	r1, #0
 800a0e0:	b096      	sub	sp, #88	; 0x58
 800a0e2:	4614      	mov	r4, r2
 800a0e4:	461d      	mov	r5, r3
 800a0e6:	da07      	bge.n	800a0f8 <__swhatbuf_r+0x22>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	602b      	str	r3, [r5, #0]
 800a0ec:	89b3      	ldrh	r3, [r6, #12]
 800a0ee:	061a      	lsls	r2, r3, #24
 800a0f0:	d410      	bmi.n	800a114 <__swhatbuf_r+0x3e>
 800a0f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0f6:	e00e      	b.n	800a116 <__swhatbuf_r+0x40>
 800a0f8:	466a      	mov	r2, sp
 800a0fa:	f000 fe91 	bl	800ae20 <_fstat_r>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	dbf2      	blt.n	800a0e8 <__swhatbuf_r+0x12>
 800a102:	9a01      	ldr	r2, [sp, #4]
 800a104:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a108:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a10c:	425a      	negs	r2, r3
 800a10e:	415a      	adcs	r2, r3
 800a110:	602a      	str	r2, [r5, #0]
 800a112:	e7ee      	b.n	800a0f2 <__swhatbuf_r+0x1c>
 800a114:	2340      	movs	r3, #64	; 0x40
 800a116:	2000      	movs	r0, #0
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	b016      	add	sp, #88	; 0x58
 800a11c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a120 <__smakebuf_r>:
 800a120:	898b      	ldrh	r3, [r1, #12]
 800a122:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a124:	079d      	lsls	r5, r3, #30
 800a126:	4606      	mov	r6, r0
 800a128:	460c      	mov	r4, r1
 800a12a:	d507      	bpl.n	800a13c <__smakebuf_r+0x1c>
 800a12c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	6123      	str	r3, [r4, #16]
 800a134:	2301      	movs	r3, #1
 800a136:	6163      	str	r3, [r4, #20]
 800a138:	b002      	add	sp, #8
 800a13a:	bd70      	pop	{r4, r5, r6, pc}
 800a13c:	ab01      	add	r3, sp, #4
 800a13e:	466a      	mov	r2, sp
 800a140:	f7ff ffc9 	bl	800a0d6 <__swhatbuf_r>
 800a144:	9900      	ldr	r1, [sp, #0]
 800a146:	4605      	mov	r5, r0
 800a148:	4630      	mov	r0, r6
 800a14a:	f000 fc0f 	bl	800a96c <_malloc_r>
 800a14e:	b948      	cbnz	r0, 800a164 <__smakebuf_r+0x44>
 800a150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a154:	059a      	lsls	r2, r3, #22
 800a156:	d4ef      	bmi.n	800a138 <__smakebuf_r+0x18>
 800a158:	f023 0303 	bic.w	r3, r3, #3
 800a15c:	f043 0302 	orr.w	r3, r3, #2
 800a160:	81a3      	strh	r3, [r4, #12]
 800a162:	e7e3      	b.n	800a12c <__smakebuf_r+0xc>
 800a164:	4b0d      	ldr	r3, [pc, #52]	; (800a19c <__smakebuf_r+0x7c>)
 800a166:	62b3      	str	r3, [r6, #40]	; 0x28
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	6020      	str	r0, [r4, #0]
 800a16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a170:	81a3      	strh	r3, [r4, #12]
 800a172:	9b00      	ldr	r3, [sp, #0]
 800a174:	6163      	str	r3, [r4, #20]
 800a176:	9b01      	ldr	r3, [sp, #4]
 800a178:	6120      	str	r0, [r4, #16]
 800a17a:	b15b      	cbz	r3, 800a194 <__smakebuf_r+0x74>
 800a17c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a180:	4630      	mov	r0, r6
 800a182:	f000 fe5f 	bl	800ae44 <_isatty_r>
 800a186:	b128      	cbz	r0, 800a194 <__smakebuf_r+0x74>
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	f023 0303 	bic.w	r3, r3, #3
 800a18e:	f043 0301 	orr.w	r3, r3, #1
 800a192:	81a3      	strh	r3, [r4, #12]
 800a194:	89a0      	ldrh	r0, [r4, #12]
 800a196:	4305      	orrs	r5, r0
 800a198:	81a5      	strh	r5, [r4, #12]
 800a19a:	e7cd      	b.n	800a138 <__smakebuf_r+0x18>
 800a19c:	08009f25 	.word	0x08009f25

0800a1a0 <malloc>:
 800a1a0:	4b02      	ldr	r3, [pc, #8]	; (800a1ac <malloc+0xc>)
 800a1a2:	4601      	mov	r1, r0
 800a1a4:	6818      	ldr	r0, [r3, #0]
 800a1a6:	f000 bbe1 	b.w	800a96c <_malloc_r>
 800a1aa:	bf00      	nop
 800a1ac:	200002c8 	.word	0x200002c8

0800a1b0 <_Balloc>:
 800a1b0:	b570      	push	{r4, r5, r6, lr}
 800a1b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	460d      	mov	r5, r1
 800a1b8:	b976      	cbnz	r6, 800a1d8 <_Balloc+0x28>
 800a1ba:	2010      	movs	r0, #16
 800a1bc:	f7ff fff0 	bl	800a1a0 <malloc>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	6260      	str	r0, [r4, #36]	; 0x24
 800a1c4:	b920      	cbnz	r0, 800a1d0 <_Balloc+0x20>
 800a1c6:	4b18      	ldr	r3, [pc, #96]	; (800a228 <_Balloc+0x78>)
 800a1c8:	4818      	ldr	r0, [pc, #96]	; (800a22c <_Balloc+0x7c>)
 800a1ca:	2166      	movs	r1, #102	; 0x66
 800a1cc:	f000 fde8 	bl	800ada0 <__assert_func>
 800a1d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1d4:	6006      	str	r6, [r0, #0]
 800a1d6:	60c6      	str	r6, [r0, #12]
 800a1d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1da:	68f3      	ldr	r3, [r6, #12]
 800a1dc:	b183      	cbz	r3, 800a200 <_Balloc+0x50>
 800a1de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1e6:	b9b8      	cbnz	r0, 800a218 <_Balloc+0x68>
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	fa01 f605 	lsl.w	r6, r1, r5
 800a1ee:	1d72      	adds	r2, r6, #5
 800a1f0:	0092      	lsls	r2, r2, #2
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f000 fb5a 	bl	800a8ac <_calloc_r>
 800a1f8:	b160      	cbz	r0, 800a214 <_Balloc+0x64>
 800a1fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1fe:	e00e      	b.n	800a21e <_Balloc+0x6e>
 800a200:	2221      	movs	r2, #33	; 0x21
 800a202:	2104      	movs	r1, #4
 800a204:	4620      	mov	r0, r4
 800a206:	f000 fb51 	bl	800a8ac <_calloc_r>
 800a20a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a20c:	60f0      	str	r0, [r6, #12]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1e4      	bne.n	800a1de <_Balloc+0x2e>
 800a214:	2000      	movs	r0, #0
 800a216:	bd70      	pop	{r4, r5, r6, pc}
 800a218:	6802      	ldr	r2, [r0, #0]
 800a21a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a21e:	2300      	movs	r3, #0
 800a220:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a224:	e7f7      	b.n	800a216 <_Balloc+0x66>
 800a226:	bf00      	nop
 800a228:	0800b035 	.word	0x0800b035
 800a22c:	0800b11c 	.word	0x0800b11c

0800a230 <_Bfree>:
 800a230:	b570      	push	{r4, r5, r6, lr}
 800a232:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a234:	4605      	mov	r5, r0
 800a236:	460c      	mov	r4, r1
 800a238:	b976      	cbnz	r6, 800a258 <_Bfree+0x28>
 800a23a:	2010      	movs	r0, #16
 800a23c:	f7ff ffb0 	bl	800a1a0 <malloc>
 800a240:	4602      	mov	r2, r0
 800a242:	6268      	str	r0, [r5, #36]	; 0x24
 800a244:	b920      	cbnz	r0, 800a250 <_Bfree+0x20>
 800a246:	4b09      	ldr	r3, [pc, #36]	; (800a26c <_Bfree+0x3c>)
 800a248:	4809      	ldr	r0, [pc, #36]	; (800a270 <_Bfree+0x40>)
 800a24a:	218a      	movs	r1, #138	; 0x8a
 800a24c:	f000 fda8 	bl	800ada0 <__assert_func>
 800a250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a254:	6006      	str	r6, [r0, #0]
 800a256:	60c6      	str	r6, [r0, #12]
 800a258:	b13c      	cbz	r4, 800a26a <_Bfree+0x3a>
 800a25a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a25c:	6862      	ldr	r2, [r4, #4]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a264:	6021      	str	r1, [r4, #0]
 800a266:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a26a:	bd70      	pop	{r4, r5, r6, pc}
 800a26c:	0800b035 	.word	0x0800b035
 800a270:	0800b11c 	.word	0x0800b11c

0800a274 <__multadd>:
 800a274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a278:	690e      	ldr	r6, [r1, #16]
 800a27a:	4607      	mov	r7, r0
 800a27c:	4698      	mov	r8, r3
 800a27e:	460c      	mov	r4, r1
 800a280:	f101 0014 	add.w	r0, r1, #20
 800a284:	2300      	movs	r3, #0
 800a286:	6805      	ldr	r5, [r0, #0]
 800a288:	b2a9      	uxth	r1, r5
 800a28a:	fb02 8101 	mla	r1, r2, r1, r8
 800a28e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a292:	0c2d      	lsrs	r5, r5, #16
 800a294:	fb02 c505 	mla	r5, r2, r5, ip
 800a298:	b289      	uxth	r1, r1
 800a29a:	3301      	adds	r3, #1
 800a29c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a2a0:	429e      	cmp	r6, r3
 800a2a2:	f840 1b04 	str.w	r1, [r0], #4
 800a2a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a2aa:	dcec      	bgt.n	800a286 <__multadd+0x12>
 800a2ac:	f1b8 0f00 	cmp.w	r8, #0
 800a2b0:	d022      	beq.n	800a2f8 <__multadd+0x84>
 800a2b2:	68a3      	ldr	r3, [r4, #8]
 800a2b4:	42b3      	cmp	r3, r6
 800a2b6:	dc19      	bgt.n	800a2ec <__multadd+0x78>
 800a2b8:	6861      	ldr	r1, [r4, #4]
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	3101      	adds	r1, #1
 800a2be:	f7ff ff77 	bl	800a1b0 <_Balloc>
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	b928      	cbnz	r0, 800a2d2 <__multadd+0x5e>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	4b0d      	ldr	r3, [pc, #52]	; (800a300 <__multadd+0x8c>)
 800a2ca:	480e      	ldr	r0, [pc, #56]	; (800a304 <__multadd+0x90>)
 800a2cc:	21b5      	movs	r1, #181	; 0xb5
 800a2ce:	f000 fd67 	bl	800ada0 <__assert_func>
 800a2d2:	6922      	ldr	r2, [r4, #16]
 800a2d4:	3202      	adds	r2, #2
 800a2d6:	f104 010c 	add.w	r1, r4, #12
 800a2da:	0092      	lsls	r2, r2, #2
 800a2dc:	300c      	adds	r0, #12
 800a2de:	f7fe f8eb 	bl	80084b8 <memcpy>
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	4638      	mov	r0, r7
 800a2e6:	f7ff ffa3 	bl	800a230 <_Bfree>
 800a2ea:	462c      	mov	r4, r5
 800a2ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a2f0:	3601      	adds	r6, #1
 800a2f2:	f8c3 8014 	str.w	r8, [r3, #20]
 800a2f6:	6126      	str	r6, [r4, #16]
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2fe:	bf00      	nop
 800a300:	0800b0ab 	.word	0x0800b0ab
 800a304:	0800b11c 	.word	0x0800b11c

0800a308 <__hi0bits>:
 800a308:	0c03      	lsrs	r3, r0, #16
 800a30a:	041b      	lsls	r3, r3, #16
 800a30c:	b9d3      	cbnz	r3, 800a344 <__hi0bits+0x3c>
 800a30e:	0400      	lsls	r0, r0, #16
 800a310:	2310      	movs	r3, #16
 800a312:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a316:	bf04      	itt	eq
 800a318:	0200      	lsleq	r0, r0, #8
 800a31a:	3308      	addeq	r3, #8
 800a31c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a320:	bf04      	itt	eq
 800a322:	0100      	lsleq	r0, r0, #4
 800a324:	3304      	addeq	r3, #4
 800a326:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a32a:	bf04      	itt	eq
 800a32c:	0080      	lsleq	r0, r0, #2
 800a32e:	3302      	addeq	r3, #2
 800a330:	2800      	cmp	r0, #0
 800a332:	db05      	blt.n	800a340 <__hi0bits+0x38>
 800a334:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a338:	f103 0301 	add.w	r3, r3, #1
 800a33c:	bf08      	it	eq
 800a33e:	2320      	moveq	r3, #32
 800a340:	4618      	mov	r0, r3
 800a342:	4770      	bx	lr
 800a344:	2300      	movs	r3, #0
 800a346:	e7e4      	b.n	800a312 <__hi0bits+0xa>

0800a348 <__lo0bits>:
 800a348:	6803      	ldr	r3, [r0, #0]
 800a34a:	f013 0207 	ands.w	r2, r3, #7
 800a34e:	4601      	mov	r1, r0
 800a350:	d00b      	beq.n	800a36a <__lo0bits+0x22>
 800a352:	07da      	lsls	r2, r3, #31
 800a354:	d424      	bmi.n	800a3a0 <__lo0bits+0x58>
 800a356:	0798      	lsls	r0, r3, #30
 800a358:	bf49      	itett	mi
 800a35a:	085b      	lsrmi	r3, r3, #1
 800a35c:	089b      	lsrpl	r3, r3, #2
 800a35e:	2001      	movmi	r0, #1
 800a360:	600b      	strmi	r3, [r1, #0]
 800a362:	bf5c      	itt	pl
 800a364:	600b      	strpl	r3, [r1, #0]
 800a366:	2002      	movpl	r0, #2
 800a368:	4770      	bx	lr
 800a36a:	b298      	uxth	r0, r3
 800a36c:	b9b0      	cbnz	r0, 800a39c <__lo0bits+0x54>
 800a36e:	0c1b      	lsrs	r3, r3, #16
 800a370:	2010      	movs	r0, #16
 800a372:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a376:	bf04      	itt	eq
 800a378:	0a1b      	lsreq	r3, r3, #8
 800a37a:	3008      	addeq	r0, #8
 800a37c:	071a      	lsls	r2, r3, #28
 800a37e:	bf04      	itt	eq
 800a380:	091b      	lsreq	r3, r3, #4
 800a382:	3004      	addeq	r0, #4
 800a384:	079a      	lsls	r2, r3, #30
 800a386:	bf04      	itt	eq
 800a388:	089b      	lsreq	r3, r3, #2
 800a38a:	3002      	addeq	r0, #2
 800a38c:	07da      	lsls	r2, r3, #31
 800a38e:	d403      	bmi.n	800a398 <__lo0bits+0x50>
 800a390:	085b      	lsrs	r3, r3, #1
 800a392:	f100 0001 	add.w	r0, r0, #1
 800a396:	d005      	beq.n	800a3a4 <__lo0bits+0x5c>
 800a398:	600b      	str	r3, [r1, #0]
 800a39a:	4770      	bx	lr
 800a39c:	4610      	mov	r0, r2
 800a39e:	e7e8      	b.n	800a372 <__lo0bits+0x2a>
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	4770      	bx	lr
 800a3a4:	2020      	movs	r0, #32
 800a3a6:	4770      	bx	lr

0800a3a8 <__i2b>:
 800a3a8:	b510      	push	{r4, lr}
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	2101      	movs	r1, #1
 800a3ae:	f7ff feff 	bl	800a1b0 <_Balloc>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	b928      	cbnz	r0, 800a3c2 <__i2b+0x1a>
 800a3b6:	4b05      	ldr	r3, [pc, #20]	; (800a3cc <__i2b+0x24>)
 800a3b8:	4805      	ldr	r0, [pc, #20]	; (800a3d0 <__i2b+0x28>)
 800a3ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a3be:	f000 fcef 	bl	800ada0 <__assert_func>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	6144      	str	r4, [r0, #20]
 800a3c6:	6103      	str	r3, [r0, #16]
 800a3c8:	bd10      	pop	{r4, pc}
 800a3ca:	bf00      	nop
 800a3cc:	0800b0ab 	.word	0x0800b0ab
 800a3d0:	0800b11c 	.word	0x0800b11c

0800a3d4 <__multiply>:
 800a3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d8:	4614      	mov	r4, r2
 800a3da:	690a      	ldr	r2, [r1, #16]
 800a3dc:	6923      	ldr	r3, [r4, #16]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	bfb8      	it	lt
 800a3e2:	460b      	movlt	r3, r1
 800a3e4:	460d      	mov	r5, r1
 800a3e6:	bfbc      	itt	lt
 800a3e8:	4625      	movlt	r5, r4
 800a3ea:	461c      	movlt	r4, r3
 800a3ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a3f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a3f4:	68ab      	ldr	r3, [r5, #8]
 800a3f6:	6869      	ldr	r1, [r5, #4]
 800a3f8:	eb0a 0709 	add.w	r7, sl, r9
 800a3fc:	42bb      	cmp	r3, r7
 800a3fe:	b085      	sub	sp, #20
 800a400:	bfb8      	it	lt
 800a402:	3101      	addlt	r1, #1
 800a404:	f7ff fed4 	bl	800a1b0 <_Balloc>
 800a408:	b930      	cbnz	r0, 800a418 <__multiply+0x44>
 800a40a:	4602      	mov	r2, r0
 800a40c:	4b42      	ldr	r3, [pc, #264]	; (800a518 <__multiply+0x144>)
 800a40e:	4843      	ldr	r0, [pc, #268]	; (800a51c <__multiply+0x148>)
 800a410:	f240 115d 	movw	r1, #349	; 0x15d
 800a414:	f000 fcc4 	bl	800ada0 <__assert_func>
 800a418:	f100 0614 	add.w	r6, r0, #20
 800a41c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a420:	4633      	mov	r3, r6
 800a422:	2200      	movs	r2, #0
 800a424:	4543      	cmp	r3, r8
 800a426:	d31e      	bcc.n	800a466 <__multiply+0x92>
 800a428:	f105 0c14 	add.w	ip, r5, #20
 800a42c:	f104 0314 	add.w	r3, r4, #20
 800a430:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a434:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a438:	9202      	str	r2, [sp, #8]
 800a43a:	ebac 0205 	sub.w	r2, ip, r5
 800a43e:	3a15      	subs	r2, #21
 800a440:	f022 0203 	bic.w	r2, r2, #3
 800a444:	3204      	adds	r2, #4
 800a446:	f105 0115 	add.w	r1, r5, #21
 800a44a:	458c      	cmp	ip, r1
 800a44c:	bf38      	it	cc
 800a44e:	2204      	movcc	r2, #4
 800a450:	9201      	str	r2, [sp, #4]
 800a452:	9a02      	ldr	r2, [sp, #8]
 800a454:	9303      	str	r3, [sp, #12]
 800a456:	429a      	cmp	r2, r3
 800a458:	d808      	bhi.n	800a46c <__multiply+0x98>
 800a45a:	2f00      	cmp	r7, #0
 800a45c:	dc55      	bgt.n	800a50a <__multiply+0x136>
 800a45e:	6107      	str	r7, [r0, #16]
 800a460:	b005      	add	sp, #20
 800a462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a466:	f843 2b04 	str.w	r2, [r3], #4
 800a46a:	e7db      	b.n	800a424 <__multiply+0x50>
 800a46c:	f8b3 a000 	ldrh.w	sl, [r3]
 800a470:	f1ba 0f00 	cmp.w	sl, #0
 800a474:	d020      	beq.n	800a4b8 <__multiply+0xe4>
 800a476:	f105 0e14 	add.w	lr, r5, #20
 800a47a:	46b1      	mov	r9, r6
 800a47c:	2200      	movs	r2, #0
 800a47e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a482:	f8d9 b000 	ldr.w	fp, [r9]
 800a486:	b2a1      	uxth	r1, r4
 800a488:	fa1f fb8b 	uxth.w	fp, fp
 800a48c:	fb0a b101 	mla	r1, sl, r1, fp
 800a490:	4411      	add	r1, r2
 800a492:	f8d9 2000 	ldr.w	r2, [r9]
 800a496:	0c24      	lsrs	r4, r4, #16
 800a498:	0c12      	lsrs	r2, r2, #16
 800a49a:	fb0a 2404 	mla	r4, sl, r4, r2
 800a49e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a4a2:	b289      	uxth	r1, r1
 800a4a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a4a8:	45f4      	cmp	ip, lr
 800a4aa:	f849 1b04 	str.w	r1, [r9], #4
 800a4ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a4b2:	d8e4      	bhi.n	800a47e <__multiply+0xaa>
 800a4b4:	9901      	ldr	r1, [sp, #4]
 800a4b6:	5072      	str	r2, [r6, r1]
 800a4b8:	9a03      	ldr	r2, [sp, #12]
 800a4ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a4be:	3304      	adds	r3, #4
 800a4c0:	f1b9 0f00 	cmp.w	r9, #0
 800a4c4:	d01f      	beq.n	800a506 <__multiply+0x132>
 800a4c6:	6834      	ldr	r4, [r6, #0]
 800a4c8:	f105 0114 	add.w	r1, r5, #20
 800a4cc:	46b6      	mov	lr, r6
 800a4ce:	f04f 0a00 	mov.w	sl, #0
 800a4d2:	880a      	ldrh	r2, [r1, #0]
 800a4d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a4d8:	fb09 b202 	mla	r2, r9, r2, fp
 800a4dc:	4492      	add	sl, r2
 800a4de:	b2a4      	uxth	r4, r4
 800a4e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a4e4:	f84e 4b04 	str.w	r4, [lr], #4
 800a4e8:	f851 4b04 	ldr.w	r4, [r1], #4
 800a4ec:	f8be 2000 	ldrh.w	r2, [lr]
 800a4f0:	0c24      	lsrs	r4, r4, #16
 800a4f2:	fb09 2404 	mla	r4, r9, r4, r2
 800a4f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a4fa:	458c      	cmp	ip, r1
 800a4fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a500:	d8e7      	bhi.n	800a4d2 <__multiply+0xfe>
 800a502:	9a01      	ldr	r2, [sp, #4]
 800a504:	50b4      	str	r4, [r6, r2]
 800a506:	3604      	adds	r6, #4
 800a508:	e7a3      	b.n	800a452 <__multiply+0x7e>
 800a50a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1a5      	bne.n	800a45e <__multiply+0x8a>
 800a512:	3f01      	subs	r7, #1
 800a514:	e7a1      	b.n	800a45a <__multiply+0x86>
 800a516:	bf00      	nop
 800a518:	0800b0ab 	.word	0x0800b0ab
 800a51c:	0800b11c 	.word	0x0800b11c

0800a520 <__pow5mult>:
 800a520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a524:	4615      	mov	r5, r2
 800a526:	f012 0203 	ands.w	r2, r2, #3
 800a52a:	4606      	mov	r6, r0
 800a52c:	460f      	mov	r7, r1
 800a52e:	d007      	beq.n	800a540 <__pow5mult+0x20>
 800a530:	4c25      	ldr	r4, [pc, #148]	; (800a5c8 <__pow5mult+0xa8>)
 800a532:	3a01      	subs	r2, #1
 800a534:	2300      	movs	r3, #0
 800a536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a53a:	f7ff fe9b 	bl	800a274 <__multadd>
 800a53e:	4607      	mov	r7, r0
 800a540:	10ad      	asrs	r5, r5, #2
 800a542:	d03d      	beq.n	800a5c0 <__pow5mult+0xa0>
 800a544:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a546:	b97c      	cbnz	r4, 800a568 <__pow5mult+0x48>
 800a548:	2010      	movs	r0, #16
 800a54a:	f7ff fe29 	bl	800a1a0 <malloc>
 800a54e:	4602      	mov	r2, r0
 800a550:	6270      	str	r0, [r6, #36]	; 0x24
 800a552:	b928      	cbnz	r0, 800a560 <__pow5mult+0x40>
 800a554:	4b1d      	ldr	r3, [pc, #116]	; (800a5cc <__pow5mult+0xac>)
 800a556:	481e      	ldr	r0, [pc, #120]	; (800a5d0 <__pow5mult+0xb0>)
 800a558:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a55c:	f000 fc20 	bl	800ada0 <__assert_func>
 800a560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a564:	6004      	str	r4, [r0, #0]
 800a566:	60c4      	str	r4, [r0, #12]
 800a568:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a56c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a570:	b94c      	cbnz	r4, 800a586 <__pow5mult+0x66>
 800a572:	f240 2171 	movw	r1, #625	; 0x271
 800a576:	4630      	mov	r0, r6
 800a578:	f7ff ff16 	bl	800a3a8 <__i2b>
 800a57c:	2300      	movs	r3, #0
 800a57e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a582:	4604      	mov	r4, r0
 800a584:	6003      	str	r3, [r0, #0]
 800a586:	f04f 0900 	mov.w	r9, #0
 800a58a:	07eb      	lsls	r3, r5, #31
 800a58c:	d50a      	bpl.n	800a5a4 <__pow5mult+0x84>
 800a58e:	4639      	mov	r1, r7
 800a590:	4622      	mov	r2, r4
 800a592:	4630      	mov	r0, r6
 800a594:	f7ff ff1e 	bl	800a3d4 <__multiply>
 800a598:	4639      	mov	r1, r7
 800a59a:	4680      	mov	r8, r0
 800a59c:	4630      	mov	r0, r6
 800a59e:	f7ff fe47 	bl	800a230 <_Bfree>
 800a5a2:	4647      	mov	r7, r8
 800a5a4:	106d      	asrs	r5, r5, #1
 800a5a6:	d00b      	beq.n	800a5c0 <__pow5mult+0xa0>
 800a5a8:	6820      	ldr	r0, [r4, #0]
 800a5aa:	b938      	cbnz	r0, 800a5bc <__pow5mult+0x9c>
 800a5ac:	4622      	mov	r2, r4
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f7ff ff0f 	bl	800a3d4 <__multiply>
 800a5b6:	6020      	str	r0, [r4, #0]
 800a5b8:	f8c0 9000 	str.w	r9, [r0]
 800a5bc:	4604      	mov	r4, r0
 800a5be:	e7e4      	b.n	800a58a <__pow5mult+0x6a>
 800a5c0:	4638      	mov	r0, r7
 800a5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5c6:	bf00      	nop
 800a5c8:	0800b270 	.word	0x0800b270
 800a5cc:	0800b035 	.word	0x0800b035
 800a5d0:	0800b11c 	.word	0x0800b11c

0800a5d4 <__lshift>:
 800a5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d8:	460c      	mov	r4, r1
 800a5da:	6849      	ldr	r1, [r1, #4]
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5e2:	68a3      	ldr	r3, [r4, #8]
 800a5e4:	4607      	mov	r7, r0
 800a5e6:	4691      	mov	r9, r2
 800a5e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5ec:	f108 0601 	add.w	r6, r8, #1
 800a5f0:	42b3      	cmp	r3, r6
 800a5f2:	db0b      	blt.n	800a60c <__lshift+0x38>
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	f7ff fddb 	bl	800a1b0 <_Balloc>
 800a5fa:	4605      	mov	r5, r0
 800a5fc:	b948      	cbnz	r0, 800a612 <__lshift+0x3e>
 800a5fe:	4602      	mov	r2, r0
 800a600:	4b28      	ldr	r3, [pc, #160]	; (800a6a4 <__lshift+0xd0>)
 800a602:	4829      	ldr	r0, [pc, #164]	; (800a6a8 <__lshift+0xd4>)
 800a604:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a608:	f000 fbca 	bl	800ada0 <__assert_func>
 800a60c:	3101      	adds	r1, #1
 800a60e:	005b      	lsls	r3, r3, #1
 800a610:	e7ee      	b.n	800a5f0 <__lshift+0x1c>
 800a612:	2300      	movs	r3, #0
 800a614:	f100 0114 	add.w	r1, r0, #20
 800a618:	f100 0210 	add.w	r2, r0, #16
 800a61c:	4618      	mov	r0, r3
 800a61e:	4553      	cmp	r3, sl
 800a620:	db33      	blt.n	800a68a <__lshift+0xb6>
 800a622:	6920      	ldr	r0, [r4, #16]
 800a624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a628:	f104 0314 	add.w	r3, r4, #20
 800a62c:	f019 091f 	ands.w	r9, r9, #31
 800a630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a634:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a638:	d02b      	beq.n	800a692 <__lshift+0xbe>
 800a63a:	f1c9 0e20 	rsb	lr, r9, #32
 800a63e:	468a      	mov	sl, r1
 800a640:	2200      	movs	r2, #0
 800a642:	6818      	ldr	r0, [r3, #0]
 800a644:	fa00 f009 	lsl.w	r0, r0, r9
 800a648:	4302      	orrs	r2, r0
 800a64a:	f84a 2b04 	str.w	r2, [sl], #4
 800a64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a652:	459c      	cmp	ip, r3
 800a654:	fa22 f20e 	lsr.w	r2, r2, lr
 800a658:	d8f3      	bhi.n	800a642 <__lshift+0x6e>
 800a65a:	ebac 0304 	sub.w	r3, ip, r4
 800a65e:	3b15      	subs	r3, #21
 800a660:	f023 0303 	bic.w	r3, r3, #3
 800a664:	3304      	adds	r3, #4
 800a666:	f104 0015 	add.w	r0, r4, #21
 800a66a:	4584      	cmp	ip, r0
 800a66c:	bf38      	it	cc
 800a66e:	2304      	movcc	r3, #4
 800a670:	50ca      	str	r2, [r1, r3]
 800a672:	b10a      	cbz	r2, 800a678 <__lshift+0xa4>
 800a674:	f108 0602 	add.w	r6, r8, #2
 800a678:	3e01      	subs	r6, #1
 800a67a:	4638      	mov	r0, r7
 800a67c:	612e      	str	r6, [r5, #16]
 800a67e:	4621      	mov	r1, r4
 800a680:	f7ff fdd6 	bl	800a230 <_Bfree>
 800a684:	4628      	mov	r0, r5
 800a686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a68a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a68e:	3301      	adds	r3, #1
 800a690:	e7c5      	b.n	800a61e <__lshift+0x4a>
 800a692:	3904      	subs	r1, #4
 800a694:	f853 2b04 	ldr.w	r2, [r3], #4
 800a698:	f841 2f04 	str.w	r2, [r1, #4]!
 800a69c:	459c      	cmp	ip, r3
 800a69e:	d8f9      	bhi.n	800a694 <__lshift+0xc0>
 800a6a0:	e7ea      	b.n	800a678 <__lshift+0xa4>
 800a6a2:	bf00      	nop
 800a6a4:	0800b0ab 	.word	0x0800b0ab
 800a6a8:	0800b11c 	.word	0x0800b11c

0800a6ac <__mcmp>:
 800a6ac:	b530      	push	{r4, r5, lr}
 800a6ae:	6902      	ldr	r2, [r0, #16]
 800a6b0:	690c      	ldr	r4, [r1, #16]
 800a6b2:	1b12      	subs	r2, r2, r4
 800a6b4:	d10e      	bne.n	800a6d4 <__mcmp+0x28>
 800a6b6:	f100 0314 	add.w	r3, r0, #20
 800a6ba:	3114      	adds	r1, #20
 800a6bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a6c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a6c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a6cc:	42a5      	cmp	r5, r4
 800a6ce:	d003      	beq.n	800a6d8 <__mcmp+0x2c>
 800a6d0:	d305      	bcc.n	800a6de <__mcmp+0x32>
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	4610      	mov	r0, r2
 800a6d6:	bd30      	pop	{r4, r5, pc}
 800a6d8:	4283      	cmp	r3, r0
 800a6da:	d3f3      	bcc.n	800a6c4 <__mcmp+0x18>
 800a6dc:	e7fa      	b.n	800a6d4 <__mcmp+0x28>
 800a6de:	f04f 32ff 	mov.w	r2, #4294967295
 800a6e2:	e7f7      	b.n	800a6d4 <__mcmp+0x28>

0800a6e4 <__mdiff>:
 800a6e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e8:	460c      	mov	r4, r1
 800a6ea:	4606      	mov	r6, r0
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	4617      	mov	r7, r2
 800a6f2:	f7ff ffdb 	bl	800a6ac <__mcmp>
 800a6f6:	1e05      	subs	r5, r0, #0
 800a6f8:	d110      	bne.n	800a71c <__mdiff+0x38>
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	f7ff fd57 	bl	800a1b0 <_Balloc>
 800a702:	b930      	cbnz	r0, 800a712 <__mdiff+0x2e>
 800a704:	4b39      	ldr	r3, [pc, #228]	; (800a7ec <__mdiff+0x108>)
 800a706:	4602      	mov	r2, r0
 800a708:	f240 2132 	movw	r1, #562	; 0x232
 800a70c:	4838      	ldr	r0, [pc, #224]	; (800a7f0 <__mdiff+0x10c>)
 800a70e:	f000 fb47 	bl	800ada0 <__assert_func>
 800a712:	2301      	movs	r3, #1
 800a714:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a718:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a71c:	bfa4      	itt	ge
 800a71e:	463b      	movge	r3, r7
 800a720:	4627      	movge	r7, r4
 800a722:	4630      	mov	r0, r6
 800a724:	6879      	ldr	r1, [r7, #4]
 800a726:	bfa6      	itte	ge
 800a728:	461c      	movge	r4, r3
 800a72a:	2500      	movge	r5, #0
 800a72c:	2501      	movlt	r5, #1
 800a72e:	f7ff fd3f 	bl	800a1b0 <_Balloc>
 800a732:	b920      	cbnz	r0, 800a73e <__mdiff+0x5a>
 800a734:	4b2d      	ldr	r3, [pc, #180]	; (800a7ec <__mdiff+0x108>)
 800a736:	4602      	mov	r2, r0
 800a738:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a73c:	e7e6      	b.n	800a70c <__mdiff+0x28>
 800a73e:	693e      	ldr	r6, [r7, #16]
 800a740:	60c5      	str	r5, [r0, #12]
 800a742:	6925      	ldr	r5, [r4, #16]
 800a744:	f107 0114 	add.w	r1, r7, #20
 800a748:	f104 0914 	add.w	r9, r4, #20
 800a74c:	f100 0e14 	add.w	lr, r0, #20
 800a750:	f107 0210 	add.w	r2, r7, #16
 800a754:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a758:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a75c:	46f2      	mov	sl, lr
 800a75e:	2700      	movs	r7, #0
 800a760:	f859 3b04 	ldr.w	r3, [r9], #4
 800a764:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a768:	fa1f f883 	uxth.w	r8, r3
 800a76c:	fa17 f78b 	uxtah	r7, r7, fp
 800a770:	0c1b      	lsrs	r3, r3, #16
 800a772:	eba7 0808 	sub.w	r8, r7, r8
 800a776:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a77a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a77e:	fa1f f888 	uxth.w	r8, r8
 800a782:	141f      	asrs	r7, r3, #16
 800a784:	454d      	cmp	r5, r9
 800a786:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a78a:	f84a 3b04 	str.w	r3, [sl], #4
 800a78e:	d8e7      	bhi.n	800a760 <__mdiff+0x7c>
 800a790:	1b2b      	subs	r3, r5, r4
 800a792:	3b15      	subs	r3, #21
 800a794:	f023 0303 	bic.w	r3, r3, #3
 800a798:	3304      	adds	r3, #4
 800a79a:	3415      	adds	r4, #21
 800a79c:	42a5      	cmp	r5, r4
 800a79e:	bf38      	it	cc
 800a7a0:	2304      	movcc	r3, #4
 800a7a2:	4419      	add	r1, r3
 800a7a4:	4473      	add	r3, lr
 800a7a6:	469e      	mov	lr, r3
 800a7a8:	460d      	mov	r5, r1
 800a7aa:	4565      	cmp	r5, ip
 800a7ac:	d30e      	bcc.n	800a7cc <__mdiff+0xe8>
 800a7ae:	f10c 0203 	add.w	r2, ip, #3
 800a7b2:	1a52      	subs	r2, r2, r1
 800a7b4:	f022 0203 	bic.w	r2, r2, #3
 800a7b8:	3903      	subs	r1, #3
 800a7ba:	458c      	cmp	ip, r1
 800a7bc:	bf38      	it	cc
 800a7be:	2200      	movcc	r2, #0
 800a7c0:	441a      	add	r2, r3
 800a7c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a7c6:	b17b      	cbz	r3, 800a7e8 <__mdiff+0x104>
 800a7c8:	6106      	str	r6, [r0, #16]
 800a7ca:	e7a5      	b.n	800a718 <__mdiff+0x34>
 800a7cc:	f855 8b04 	ldr.w	r8, [r5], #4
 800a7d0:	fa17 f488 	uxtah	r4, r7, r8
 800a7d4:	1422      	asrs	r2, r4, #16
 800a7d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a7da:	b2a4      	uxth	r4, r4
 800a7dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a7e0:	f84e 4b04 	str.w	r4, [lr], #4
 800a7e4:	1417      	asrs	r7, r2, #16
 800a7e6:	e7e0      	b.n	800a7aa <__mdiff+0xc6>
 800a7e8:	3e01      	subs	r6, #1
 800a7ea:	e7ea      	b.n	800a7c2 <__mdiff+0xde>
 800a7ec:	0800b0ab 	.word	0x0800b0ab
 800a7f0:	0800b11c 	.word	0x0800b11c

0800a7f4 <__d2b>:
 800a7f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7f8:	4689      	mov	r9, r1
 800a7fa:	2101      	movs	r1, #1
 800a7fc:	ec57 6b10 	vmov	r6, r7, d0
 800a800:	4690      	mov	r8, r2
 800a802:	f7ff fcd5 	bl	800a1b0 <_Balloc>
 800a806:	4604      	mov	r4, r0
 800a808:	b930      	cbnz	r0, 800a818 <__d2b+0x24>
 800a80a:	4602      	mov	r2, r0
 800a80c:	4b25      	ldr	r3, [pc, #148]	; (800a8a4 <__d2b+0xb0>)
 800a80e:	4826      	ldr	r0, [pc, #152]	; (800a8a8 <__d2b+0xb4>)
 800a810:	f240 310a 	movw	r1, #778	; 0x30a
 800a814:	f000 fac4 	bl	800ada0 <__assert_func>
 800a818:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a81c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a820:	bb35      	cbnz	r5, 800a870 <__d2b+0x7c>
 800a822:	2e00      	cmp	r6, #0
 800a824:	9301      	str	r3, [sp, #4]
 800a826:	d028      	beq.n	800a87a <__d2b+0x86>
 800a828:	4668      	mov	r0, sp
 800a82a:	9600      	str	r6, [sp, #0]
 800a82c:	f7ff fd8c 	bl	800a348 <__lo0bits>
 800a830:	9900      	ldr	r1, [sp, #0]
 800a832:	b300      	cbz	r0, 800a876 <__d2b+0x82>
 800a834:	9a01      	ldr	r2, [sp, #4]
 800a836:	f1c0 0320 	rsb	r3, r0, #32
 800a83a:	fa02 f303 	lsl.w	r3, r2, r3
 800a83e:	430b      	orrs	r3, r1
 800a840:	40c2      	lsrs	r2, r0
 800a842:	6163      	str	r3, [r4, #20]
 800a844:	9201      	str	r2, [sp, #4]
 800a846:	9b01      	ldr	r3, [sp, #4]
 800a848:	61a3      	str	r3, [r4, #24]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	bf14      	ite	ne
 800a84e:	2202      	movne	r2, #2
 800a850:	2201      	moveq	r2, #1
 800a852:	6122      	str	r2, [r4, #16]
 800a854:	b1d5      	cbz	r5, 800a88c <__d2b+0x98>
 800a856:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a85a:	4405      	add	r5, r0
 800a85c:	f8c9 5000 	str.w	r5, [r9]
 800a860:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a864:	f8c8 0000 	str.w	r0, [r8]
 800a868:	4620      	mov	r0, r4
 800a86a:	b003      	add	sp, #12
 800a86c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a874:	e7d5      	b.n	800a822 <__d2b+0x2e>
 800a876:	6161      	str	r1, [r4, #20]
 800a878:	e7e5      	b.n	800a846 <__d2b+0x52>
 800a87a:	a801      	add	r0, sp, #4
 800a87c:	f7ff fd64 	bl	800a348 <__lo0bits>
 800a880:	9b01      	ldr	r3, [sp, #4]
 800a882:	6163      	str	r3, [r4, #20]
 800a884:	2201      	movs	r2, #1
 800a886:	6122      	str	r2, [r4, #16]
 800a888:	3020      	adds	r0, #32
 800a88a:	e7e3      	b.n	800a854 <__d2b+0x60>
 800a88c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a890:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a894:	f8c9 0000 	str.w	r0, [r9]
 800a898:	6918      	ldr	r0, [r3, #16]
 800a89a:	f7ff fd35 	bl	800a308 <__hi0bits>
 800a89e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8a2:	e7df      	b.n	800a864 <__d2b+0x70>
 800a8a4:	0800b0ab 	.word	0x0800b0ab
 800a8a8:	0800b11c 	.word	0x0800b11c

0800a8ac <_calloc_r>:
 800a8ac:	b513      	push	{r0, r1, r4, lr}
 800a8ae:	434a      	muls	r2, r1
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	9201      	str	r2, [sp, #4]
 800a8b4:	f000 f85a 	bl	800a96c <_malloc_r>
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	b118      	cbz	r0, 800a8c4 <_calloc_r+0x18>
 800a8bc:	9a01      	ldr	r2, [sp, #4]
 800a8be:	2100      	movs	r1, #0
 800a8c0:	f7fd fe08 	bl	80084d4 <memset>
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	b002      	add	sp, #8
 800a8c8:	bd10      	pop	{r4, pc}
	...

0800a8cc <_free_r>:
 800a8cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8ce:	2900      	cmp	r1, #0
 800a8d0:	d048      	beq.n	800a964 <_free_r+0x98>
 800a8d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8d6:	9001      	str	r0, [sp, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f1a1 0404 	sub.w	r4, r1, #4
 800a8de:	bfb8      	it	lt
 800a8e0:	18e4      	addlt	r4, r4, r3
 800a8e2:	f000 fae3 	bl	800aeac <__malloc_lock>
 800a8e6:	4a20      	ldr	r2, [pc, #128]	; (800a968 <_free_r+0x9c>)
 800a8e8:	9801      	ldr	r0, [sp, #4]
 800a8ea:	6813      	ldr	r3, [r2, #0]
 800a8ec:	4615      	mov	r5, r2
 800a8ee:	b933      	cbnz	r3, 800a8fe <_free_r+0x32>
 800a8f0:	6063      	str	r3, [r4, #4]
 800a8f2:	6014      	str	r4, [r2, #0]
 800a8f4:	b003      	add	sp, #12
 800a8f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8fa:	f000 badd 	b.w	800aeb8 <__malloc_unlock>
 800a8fe:	42a3      	cmp	r3, r4
 800a900:	d90b      	bls.n	800a91a <_free_r+0x4e>
 800a902:	6821      	ldr	r1, [r4, #0]
 800a904:	1862      	adds	r2, r4, r1
 800a906:	4293      	cmp	r3, r2
 800a908:	bf04      	itt	eq
 800a90a:	681a      	ldreq	r2, [r3, #0]
 800a90c:	685b      	ldreq	r3, [r3, #4]
 800a90e:	6063      	str	r3, [r4, #4]
 800a910:	bf04      	itt	eq
 800a912:	1852      	addeq	r2, r2, r1
 800a914:	6022      	streq	r2, [r4, #0]
 800a916:	602c      	str	r4, [r5, #0]
 800a918:	e7ec      	b.n	800a8f4 <_free_r+0x28>
 800a91a:	461a      	mov	r2, r3
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	b10b      	cbz	r3, 800a924 <_free_r+0x58>
 800a920:	42a3      	cmp	r3, r4
 800a922:	d9fa      	bls.n	800a91a <_free_r+0x4e>
 800a924:	6811      	ldr	r1, [r2, #0]
 800a926:	1855      	adds	r5, r2, r1
 800a928:	42a5      	cmp	r5, r4
 800a92a:	d10b      	bne.n	800a944 <_free_r+0x78>
 800a92c:	6824      	ldr	r4, [r4, #0]
 800a92e:	4421      	add	r1, r4
 800a930:	1854      	adds	r4, r2, r1
 800a932:	42a3      	cmp	r3, r4
 800a934:	6011      	str	r1, [r2, #0]
 800a936:	d1dd      	bne.n	800a8f4 <_free_r+0x28>
 800a938:	681c      	ldr	r4, [r3, #0]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	6053      	str	r3, [r2, #4]
 800a93e:	4421      	add	r1, r4
 800a940:	6011      	str	r1, [r2, #0]
 800a942:	e7d7      	b.n	800a8f4 <_free_r+0x28>
 800a944:	d902      	bls.n	800a94c <_free_r+0x80>
 800a946:	230c      	movs	r3, #12
 800a948:	6003      	str	r3, [r0, #0]
 800a94a:	e7d3      	b.n	800a8f4 <_free_r+0x28>
 800a94c:	6825      	ldr	r5, [r4, #0]
 800a94e:	1961      	adds	r1, r4, r5
 800a950:	428b      	cmp	r3, r1
 800a952:	bf04      	itt	eq
 800a954:	6819      	ldreq	r1, [r3, #0]
 800a956:	685b      	ldreq	r3, [r3, #4]
 800a958:	6063      	str	r3, [r4, #4]
 800a95a:	bf04      	itt	eq
 800a95c:	1949      	addeq	r1, r1, r5
 800a95e:	6021      	streq	r1, [r4, #0]
 800a960:	6054      	str	r4, [r2, #4]
 800a962:	e7c7      	b.n	800a8f4 <_free_r+0x28>
 800a964:	b003      	add	sp, #12
 800a966:	bd30      	pop	{r4, r5, pc}
 800a968:	20000674 	.word	0x20000674

0800a96c <_malloc_r>:
 800a96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96e:	1ccd      	adds	r5, r1, #3
 800a970:	f025 0503 	bic.w	r5, r5, #3
 800a974:	3508      	adds	r5, #8
 800a976:	2d0c      	cmp	r5, #12
 800a978:	bf38      	it	cc
 800a97a:	250c      	movcc	r5, #12
 800a97c:	2d00      	cmp	r5, #0
 800a97e:	4606      	mov	r6, r0
 800a980:	db01      	blt.n	800a986 <_malloc_r+0x1a>
 800a982:	42a9      	cmp	r1, r5
 800a984:	d903      	bls.n	800a98e <_malloc_r+0x22>
 800a986:	230c      	movs	r3, #12
 800a988:	6033      	str	r3, [r6, #0]
 800a98a:	2000      	movs	r0, #0
 800a98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a98e:	f000 fa8d 	bl	800aeac <__malloc_lock>
 800a992:	4921      	ldr	r1, [pc, #132]	; (800aa18 <_malloc_r+0xac>)
 800a994:	680a      	ldr	r2, [r1, #0]
 800a996:	4614      	mov	r4, r2
 800a998:	b99c      	cbnz	r4, 800a9c2 <_malloc_r+0x56>
 800a99a:	4f20      	ldr	r7, [pc, #128]	; (800aa1c <_malloc_r+0xb0>)
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	b923      	cbnz	r3, 800a9aa <_malloc_r+0x3e>
 800a9a0:	4621      	mov	r1, r4
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	f000 f996 	bl	800acd4 <_sbrk_r>
 800a9a8:	6038      	str	r0, [r7, #0]
 800a9aa:	4629      	mov	r1, r5
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	f000 f991 	bl	800acd4 <_sbrk_r>
 800a9b2:	1c43      	adds	r3, r0, #1
 800a9b4:	d123      	bne.n	800a9fe <_malloc_r+0x92>
 800a9b6:	230c      	movs	r3, #12
 800a9b8:	6033      	str	r3, [r6, #0]
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f000 fa7c 	bl	800aeb8 <__malloc_unlock>
 800a9c0:	e7e3      	b.n	800a98a <_malloc_r+0x1e>
 800a9c2:	6823      	ldr	r3, [r4, #0]
 800a9c4:	1b5b      	subs	r3, r3, r5
 800a9c6:	d417      	bmi.n	800a9f8 <_malloc_r+0x8c>
 800a9c8:	2b0b      	cmp	r3, #11
 800a9ca:	d903      	bls.n	800a9d4 <_malloc_r+0x68>
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	441c      	add	r4, r3
 800a9d0:	6025      	str	r5, [r4, #0]
 800a9d2:	e004      	b.n	800a9de <_malloc_r+0x72>
 800a9d4:	6863      	ldr	r3, [r4, #4]
 800a9d6:	42a2      	cmp	r2, r4
 800a9d8:	bf0c      	ite	eq
 800a9da:	600b      	streq	r3, [r1, #0]
 800a9dc:	6053      	strne	r3, [r2, #4]
 800a9de:	4630      	mov	r0, r6
 800a9e0:	f000 fa6a 	bl	800aeb8 <__malloc_unlock>
 800a9e4:	f104 000b 	add.w	r0, r4, #11
 800a9e8:	1d23      	adds	r3, r4, #4
 800a9ea:	f020 0007 	bic.w	r0, r0, #7
 800a9ee:	1ac2      	subs	r2, r0, r3
 800a9f0:	d0cc      	beq.n	800a98c <_malloc_r+0x20>
 800a9f2:	1a1b      	subs	r3, r3, r0
 800a9f4:	50a3      	str	r3, [r4, r2]
 800a9f6:	e7c9      	b.n	800a98c <_malloc_r+0x20>
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	6864      	ldr	r4, [r4, #4]
 800a9fc:	e7cc      	b.n	800a998 <_malloc_r+0x2c>
 800a9fe:	1cc4      	adds	r4, r0, #3
 800aa00:	f024 0403 	bic.w	r4, r4, #3
 800aa04:	42a0      	cmp	r0, r4
 800aa06:	d0e3      	beq.n	800a9d0 <_malloc_r+0x64>
 800aa08:	1a21      	subs	r1, r4, r0
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f000 f962 	bl	800acd4 <_sbrk_r>
 800aa10:	3001      	adds	r0, #1
 800aa12:	d1dd      	bne.n	800a9d0 <_malloc_r+0x64>
 800aa14:	e7cf      	b.n	800a9b6 <_malloc_r+0x4a>
 800aa16:	bf00      	nop
 800aa18:	20000674 	.word	0x20000674
 800aa1c:	20000678 	.word	0x20000678

0800aa20 <__sfputc_r>:
 800aa20:	6893      	ldr	r3, [r2, #8]
 800aa22:	3b01      	subs	r3, #1
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	b410      	push	{r4}
 800aa28:	6093      	str	r3, [r2, #8]
 800aa2a:	da08      	bge.n	800aa3e <__sfputc_r+0x1e>
 800aa2c:	6994      	ldr	r4, [r2, #24]
 800aa2e:	42a3      	cmp	r3, r4
 800aa30:	db01      	blt.n	800aa36 <__sfputc_r+0x16>
 800aa32:	290a      	cmp	r1, #10
 800aa34:	d103      	bne.n	800aa3e <__sfputc_r+0x1e>
 800aa36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa3a:	f7fe ba53 	b.w	8008ee4 <__swbuf_r>
 800aa3e:	6813      	ldr	r3, [r2, #0]
 800aa40:	1c58      	adds	r0, r3, #1
 800aa42:	6010      	str	r0, [r2, #0]
 800aa44:	7019      	strb	r1, [r3, #0]
 800aa46:	4608      	mov	r0, r1
 800aa48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa4c:	4770      	bx	lr

0800aa4e <__sfputs_r>:
 800aa4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa50:	4606      	mov	r6, r0
 800aa52:	460f      	mov	r7, r1
 800aa54:	4614      	mov	r4, r2
 800aa56:	18d5      	adds	r5, r2, r3
 800aa58:	42ac      	cmp	r4, r5
 800aa5a:	d101      	bne.n	800aa60 <__sfputs_r+0x12>
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	e007      	b.n	800aa70 <__sfputs_r+0x22>
 800aa60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa64:	463a      	mov	r2, r7
 800aa66:	4630      	mov	r0, r6
 800aa68:	f7ff ffda 	bl	800aa20 <__sfputc_r>
 800aa6c:	1c43      	adds	r3, r0, #1
 800aa6e:	d1f3      	bne.n	800aa58 <__sfputs_r+0xa>
 800aa70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa74 <_vfiprintf_r>:
 800aa74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa78:	460d      	mov	r5, r1
 800aa7a:	b09d      	sub	sp, #116	; 0x74
 800aa7c:	4614      	mov	r4, r2
 800aa7e:	4698      	mov	r8, r3
 800aa80:	4606      	mov	r6, r0
 800aa82:	b118      	cbz	r0, 800aa8c <_vfiprintf_r+0x18>
 800aa84:	6983      	ldr	r3, [r0, #24]
 800aa86:	b90b      	cbnz	r3, 800aa8c <_vfiprintf_r+0x18>
 800aa88:	f7ff fa80 	bl	8009f8c <__sinit>
 800aa8c:	4b89      	ldr	r3, [pc, #548]	; (800acb4 <_vfiprintf_r+0x240>)
 800aa8e:	429d      	cmp	r5, r3
 800aa90:	d11b      	bne.n	800aaca <_vfiprintf_r+0x56>
 800aa92:	6875      	ldr	r5, [r6, #4]
 800aa94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa96:	07d9      	lsls	r1, r3, #31
 800aa98:	d405      	bmi.n	800aaa6 <_vfiprintf_r+0x32>
 800aa9a:	89ab      	ldrh	r3, [r5, #12]
 800aa9c:	059a      	lsls	r2, r3, #22
 800aa9e:	d402      	bmi.n	800aaa6 <_vfiprintf_r+0x32>
 800aaa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaa2:	f7ff fb16 	bl	800a0d2 <__retarget_lock_acquire_recursive>
 800aaa6:	89ab      	ldrh	r3, [r5, #12]
 800aaa8:	071b      	lsls	r3, r3, #28
 800aaaa:	d501      	bpl.n	800aab0 <_vfiprintf_r+0x3c>
 800aaac:	692b      	ldr	r3, [r5, #16]
 800aaae:	b9eb      	cbnz	r3, 800aaec <_vfiprintf_r+0x78>
 800aab0:	4629      	mov	r1, r5
 800aab2:	4630      	mov	r0, r6
 800aab4:	f7fe fa68 	bl	8008f88 <__swsetup_r>
 800aab8:	b1c0      	cbz	r0, 800aaec <_vfiprintf_r+0x78>
 800aaba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aabc:	07dc      	lsls	r4, r3, #31
 800aabe:	d50e      	bpl.n	800aade <_vfiprintf_r+0x6a>
 800aac0:	f04f 30ff 	mov.w	r0, #4294967295
 800aac4:	b01d      	add	sp, #116	; 0x74
 800aac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaca:	4b7b      	ldr	r3, [pc, #492]	; (800acb8 <_vfiprintf_r+0x244>)
 800aacc:	429d      	cmp	r5, r3
 800aace:	d101      	bne.n	800aad4 <_vfiprintf_r+0x60>
 800aad0:	68b5      	ldr	r5, [r6, #8]
 800aad2:	e7df      	b.n	800aa94 <_vfiprintf_r+0x20>
 800aad4:	4b79      	ldr	r3, [pc, #484]	; (800acbc <_vfiprintf_r+0x248>)
 800aad6:	429d      	cmp	r5, r3
 800aad8:	bf08      	it	eq
 800aada:	68f5      	ldreq	r5, [r6, #12]
 800aadc:	e7da      	b.n	800aa94 <_vfiprintf_r+0x20>
 800aade:	89ab      	ldrh	r3, [r5, #12]
 800aae0:	0598      	lsls	r0, r3, #22
 800aae2:	d4ed      	bmi.n	800aac0 <_vfiprintf_r+0x4c>
 800aae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aae6:	f7ff faf5 	bl	800a0d4 <__retarget_lock_release_recursive>
 800aaea:	e7e9      	b.n	800aac0 <_vfiprintf_r+0x4c>
 800aaec:	2300      	movs	r3, #0
 800aaee:	9309      	str	r3, [sp, #36]	; 0x24
 800aaf0:	2320      	movs	r3, #32
 800aaf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aaf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800aafa:	2330      	movs	r3, #48	; 0x30
 800aafc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800acc0 <_vfiprintf_r+0x24c>
 800ab00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab04:	f04f 0901 	mov.w	r9, #1
 800ab08:	4623      	mov	r3, r4
 800ab0a:	469a      	mov	sl, r3
 800ab0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab10:	b10a      	cbz	r2, 800ab16 <_vfiprintf_r+0xa2>
 800ab12:	2a25      	cmp	r2, #37	; 0x25
 800ab14:	d1f9      	bne.n	800ab0a <_vfiprintf_r+0x96>
 800ab16:	ebba 0b04 	subs.w	fp, sl, r4
 800ab1a:	d00b      	beq.n	800ab34 <_vfiprintf_r+0xc0>
 800ab1c:	465b      	mov	r3, fp
 800ab1e:	4622      	mov	r2, r4
 800ab20:	4629      	mov	r1, r5
 800ab22:	4630      	mov	r0, r6
 800ab24:	f7ff ff93 	bl	800aa4e <__sfputs_r>
 800ab28:	3001      	adds	r0, #1
 800ab2a:	f000 80aa 	beq.w	800ac82 <_vfiprintf_r+0x20e>
 800ab2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab30:	445a      	add	r2, fp
 800ab32:	9209      	str	r2, [sp, #36]	; 0x24
 800ab34:	f89a 3000 	ldrb.w	r3, [sl]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f000 80a2 	beq.w	800ac82 <_vfiprintf_r+0x20e>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	f04f 32ff 	mov.w	r2, #4294967295
 800ab44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab48:	f10a 0a01 	add.w	sl, sl, #1
 800ab4c:	9304      	str	r3, [sp, #16]
 800ab4e:	9307      	str	r3, [sp, #28]
 800ab50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab54:	931a      	str	r3, [sp, #104]	; 0x68
 800ab56:	4654      	mov	r4, sl
 800ab58:	2205      	movs	r2, #5
 800ab5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab5e:	4858      	ldr	r0, [pc, #352]	; (800acc0 <_vfiprintf_r+0x24c>)
 800ab60:	f7f5 fb3e 	bl	80001e0 <memchr>
 800ab64:	9a04      	ldr	r2, [sp, #16]
 800ab66:	b9d8      	cbnz	r0, 800aba0 <_vfiprintf_r+0x12c>
 800ab68:	06d1      	lsls	r1, r2, #27
 800ab6a:	bf44      	itt	mi
 800ab6c:	2320      	movmi	r3, #32
 800ab6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab72:	0713      	lsls	r3, r2, #28
 800ab74:	bf44      	itt	mi
 800ab76:	232b      	movmi	r3, #43	; 0x2b
 800ab78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab80:	2b2a      	cmp	r3, #42	; 0x2a
 800ab82:	d015      	beq.n	800abb0 <_vfiprintf_r+0x13c>
 800ab84:	9a07      	ldr	r2, [sp, #28]
 800ab86:	4654      	mov	r4, sl
 800ab88:	2000      	movs	r0, #0
 800ab8a:	f04f 0c0a 	mov.w	ip, #10
 800ab8e:	4621      	mov	r1, r4
 800ab90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab94:	3b30      	subs	r3, #48	; 0x30
 800ab96:	2b09      	cmp	r3, #9
 800ab98:	d94e      	bls.n	800ac38 <_vfiprintf_r+0x1c4>
 800ab9a:	b1b0      	cbz	r0, 800abca <_vfiprintf_r+0x156>
 800ab9c:	9207      	str	r2, [sp, #28]
 800ab9e:	e014      	b.n	800abca <_vfiprintf_r+0x156>
 800aba0:	eba0 0308 	sub.w	r3, r0, r8
 800aba4:	fa09 f303 	lsl.w	r3, r9, r3
 800aba8:	4313      	orrs	r3, r2
 800abaa:	9304      	str	r3, [sp, #16]
 800abac:	46a2      	mov	sl, r4
 800abae:	e7d2      	b.n	800ab56 <_vfiprintf_r+0xe2>
 800abb0:	9b03      	ldr	r3, [sp, #12]
 800abb2:	1d19      	adds	r1, r3, #4
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	9103      	str	r1, [sp, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	bfbb      	ittet	lt
 800abbc:	425b      	neglt	r3, r3
 800abbe:	f042 0202 	orrlt.w	r2, r2, #2
 800abc2:	9307      	strge	r3, [sp, #28]
 800abc4:	9307      	strlt	r3, [sp, #28]
 800abc6:	bfb8      	it	lt
 800abc8:	9204      	strlt	r2, [sp, #16]
 800abca:	7823      	ldrb	r3, [r4, #0]
 800abcc:	2b2e      	cmp	r3, #46	; 0x2e
 800abce:	d10c      	bne.n	800abea <_vfiprintf_r+0x176>
 800abd0:	7863      	ldrb	r3, [r4, #1]
 800abd2:	2b2a      	cmp	r3, #42	; 0x2a
 800abd4:	d135      	bne.n	800ac42 <_vfiprintf_r+0x1ce>
 800abd6:	9b03      	ldr	r3, [sp, #12]
 800abd8:	1d1a      	adds	r2, r3, #4
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	9203      	str	r2, [sp, #12]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	bfb8      	it	lt
 800abe2:	f04f 33ff 	movlt.w	r3, #4294967295
 800abe6:	3402      	adds	r4, #2
 800abe8:	9305      	str	r3, [sp, #20]
 800abea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800acd0 <_vfiprintf_r+0x25c>
 800abee:	7821      	ldrb	r1, [r4, #0]
 800abf0:	2203      	movs	r2, #3
 800abf2:	4650      	mov	r0, sl
 800abf4:	f7f5 faf4 	bl	80001e0 <memchr>
 800abf8:	b140      	cbz	r0, 800ac0c <_vfiprintf_r+0x198>
 800abfa:	2340      	movs	r3, #64	; 0x40
 800abfc:	eba0 000a 	sub.w	r0, r0, sl
 800ac00:	fa03 f000 	lsl.w	r0, r3, r0
 800ac04:	9b04      	ldr	r3, [sp, #16]
 800ac06:	4303      	orrs	r3, r0
 800ac08:	3401      	adds	r4, #1
 800ac0a:	9304      	str	r3, [sp, #16]
 800ac0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac10:	482c      	ldr	r0, [pc, #176]	; (800acc4 <_vfiprintf_r+0x250>)
 800ac12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac16:	2206      	movs	r2, #6
 800ac18:	f7f5 fae2 	bl	80001e0 <memchr>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d03f      	beq.n	800aca0 <_vfiprintf_r+0x22c>
 800ac20:	4b29      	ldr	r3, [pc, #164]	; (800acc8 <_vfiprintf_r+0x254>)
 800ac22:	bb1b      	cbnz	r3, 800ac6c <_vfiprintf_r+0x1f8>
 800ac24:	9b03      	ldr	r3, [sp, #12]
 800ac26:	3307      	adds	r3, #7
 800ac28:	f023 0307 	bic.w	r3, r3, #7
 800ac2c:	3308      	adds	r3, #8
 800ac2e:	9303      	str	r3, [sp, #12]
 800ac30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac32:	443b      	add	r3, r7
 800ac34:	9309      	str	r3, [sp, #36]	; 0x24
 800ac36:	e767      	b.n	800ab08 <_vfiprintf_r+0x94>
 800ac38:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	2001      	movs	r0, #1
 800ac40:	e7a5      	b.n	800ab8e <_vfiprintf_r+0x11a>
 800ac42:	2300      	movs	r3, #0
 800ac44:	3401      	adds	r4, #1
 800ac46:	9305      	str	r3, [sp, #20]
 800ac48:	4619      	mov	r1, r3
 800ac4a:	f04f 0c0a 	mov.w	ip, #10
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac54:	3a30      	subs	r2, #48	; 0x30
 800ac56:	2a09      	cmp	r2, #9
 800ac58:	d903      	bls.n	800ac62 <_vfiprintf_r+0x1ee>
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d0c5      	beq.n	800abea <_vfiprintf_r+0x176>
 800ac5e:	9105      	str	r1, [sp, #20]
 800ac60:	e7c3      	b.n	800abea <_vfiprintf_r+0x176>
 800ac62:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac66:	4604      	mov	r4, r0
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e7f0      	b.n	800ac4e <_vfiprintf_r+0x1da>
 800ac6c:	ab03      	add	r3, sp, #12
 800ac6e:	9300      	str	r3, [sp, #0]
 800ac70:	462a      	mov	r2, r5
 800ac72:	4b16      	ldr	r3, [pc, #88]	; (800accc <_vfiprintf_r+0x258>)
 800ac74:	a904      	add	r1, sp, #16
 800ac76:	4630      	mov	r0, r6
 800ac78:	f7fd fcd4 	bl	8008624 <_printf_float>
 800ac7c:	4607      	mov	r7, r0
 800ac7e:	1c78      	adds	r0, r7, #1
 800ac80:	d1d6      	bne.n	800ac30 <_vfiprintf_r+0x1bc>
 800ac82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac84:	07d9      	lsls	r1, r3, #31
 800ac86:	d405      	bmi.n	800ac94 <_vfiprintf_r+0x220>
 800ac88:	89ab      	ldrh	r3, [r5, #12]
 800ac8a:	059a      	lsls	r2, r3, #22
 800ac8c:	d402      	bmi.n	800ac94 <_vfiprintf_r+0x220>
 800ac8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac90:	f7ff fa20 	bl	800a0d4 <__retarget_lock_release_recursive>
 800ac94:	89ab      	ldrh	r3, [r5, #12]
 800ac96:	065b      	lsls	r3, r3, #25
 800ac98:	f53f af12 	bmi.w	800aac0 <_vfiprintf_r+0x4c>
 800ac9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac9e:	e711      	b.n	800aac4 <_vfiprintf_r+0x50>
 800aca0:	ab03      	add	r3, sp, #12
 800aca2:	9300      	str	r3, [sp, #0]
 800aca4:	462a      	mov	r2, r5
 800aca6:	4b09      	ldr	r3, [pc, #36]	; (800accc <_vfiprintf_r+0x258>)
 800aca8:	a904      	add	r1, sp, #16
 800acaa:	4630      	mov	r0, r6
 800acac:	f7fd ff5e 	bl	8008b6c <_printf_i>
 800acb0:	e7e4      	b.n	800ac7c <_vfiprintf_r+0x208>
 800acb2:	bf00      	nop
 800acb4:	0800b0dc 	.word	0x0800b0dc
 800acb8:	0800b0fc 	.word	0x0800b0fc
 800acbc:	0800b0bc 	.word	0x0800b0bc
 800acc0:	0800b27c 	.word	0x0800b27c
 800acc4:	0800b286 	.word	0x0800b286
 800acc8:	08008625 	.word	0x08008625
 800accc:	0800aa4f 	.word	0x0800aa4f
 800acd0:	0800b282 	.word	0x0800b282

0800acd4 <_sbrk_r>:
 800acd4:	b538      	push	{r3, r4, r5, lr}
 800acd6:	4d06      	ldr	r5, [pc, #24]	; (800acf0 <_sbrk_r+0x1c>)
 800acd8:	2300      	movs	r3, #0
 800acda:	4604      	mov	r4, r0
 800acdc:	4608      	mov	r0, r1
 800acde:	602b      	str	r3, [r5, #0]
 800ace0:	f7fb f9a4 	bl	800602c <_sbrk>
 800ace4:	1c43      	adds	r3, r0, #1
 800ace6:	d102      	bne.n	800acee <_sbrk_r+0x1a>
 800ace8:	682b      	ldr	r3, [r5, #0]
 800acea:	b103      	cbz	r3, 800acee <_sbrk_r+0x1a>
 800acec:	6023      	str	r3, [r4, #0]
 800acee:	bd38      	pop	{r3, r4, r5, pc}
 800acf0:	20000764 	.word	0x20000764

0800acf4 <__sread>:
 800acf4:	b510      	push	{r4, lr}
 800acf6:	460c      	mov	r4, r1
 800acf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acfc:	f000 f8e2 	bl	800aec4 <_read_r>
 800ad00:	2800      	cmp	r0, #0
 800ad02:	bfab      	itete	ge
 800ad04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad06:	89a3      	ldrhlt	r3, [r4, #12]
 800ad08:	181b      	addge	r3, r3, r0
 800ad0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad0e:	bfac      	ite	ge
 800ad10:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad12:	81a3      	strhlt	r3, [r4, #12]
 800ad14:	bd10      	pop	{r4, pc}

0800ad16 <__swrite>:
 800ad16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad1a:	461f      	mov	r7, r3
 800ad1c:	898b      	ldrh	r3, [r1, #12]
 800ad1e:	05db      	lsls	r3, r3, #23
 800ad20:	4605      	mov	r5, r0
 800ad22:	460c      	mov	r4, r1
 800ad24:	4616      	mov	r6, r2
 800ad26:	d505      	bpl.n	800ad34 <__swrite+0x1e>
 800ad28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad2c:	2302      	movs	r3, #2
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f000 f898 	bl	800ae64 <_lseek_r>
 800ad34:	89a3      	ldrh	r3, [r4, #12]
 800ad36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad3e:	81a3      	strh	r3, [r4, #12]
 800ad40:	4632      	mov	r2, r6
 800ad42:	463b      	mov	r3, r7
 800ad44:	4628      	mov	r0, r5
 800ad46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad4a:	f000 b817 	b.w	800ad7c <_write_r>

0800ad4e <__sseek>:
 800ad4e:	b510      	push	{r4, lr}
 800ad50:	460c      	mov	r4, r1
 800ad52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad56:	f000 f885 	bl	800ae64 <_lseek_r>
 800ad5a:	1c43      	adds	r3, r0, #1
 800ad5c:	89a3      	ldrh	r3, [r4, #12]
 800ad5e:	bf15      	itete	ne
 800ad60:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad6a:	81a3      	strheq	r3, [r4, #12]
 800ad6c:	bf18      	it	ne
 800ad6e:	81a3      	strhne	r3, [r4, #12]
 800ad70:	bd10      	pop	{r4, pc}

0800ad72 <__sclose>:
 800ad72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad76:	f000 b831 	b.w	800addc <_close_r>
	...

0800ad7c <_write_r>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	4d07      	ldr	r5, [pc, #28]	; (800ad9c <_write_r+0x20>)
 800ad80:	4604      	mov	r4, r0
 800ad82:	4608      	mov	r0, r1
 800ad84:	4611      	mov	r1, r2
 800ad86:	2200      	movs	r2, #0
 800ad88:	602a      	str	r2, [r5, #0]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	f7fb f8fd 	bl	8005f8a <_write>
 800ad90:	1c43      	adds	r3, r0, #1
 800ad92:	d102      	bne.n	800ad9a <_write_r+0x1e>
 800ad94:	682b      	ldr	r3, [r5, #0]
 800ad96:	b103      	cbz	r3, 800ad9a <_write_r+0x1e>
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	bd38      	pop	{r3, r4, r5, pc}
 800ad9c:	20000764 	.word	0x20000764

0800ada0 <__assert_func>:
 800ada0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ada2:	4614      	mov	r4, r2
 800ada4:	461a      	mov	r2, r3
 800ada6:	4b09      	ldr	r3, [pc, #36]	; (800adcc <__assert_func+0x2c>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4605      	mov	r5, r0
 800adac:	68d8      	ldr	r0, [r3, #12]
 800adae:	b14c      	cbz	r4, 800adc4 <__assert_func+0x24>
 800adb0:	4b07      	ldr	r3, [pc, #28]	; (800add0 <__assert_func+0x30>)
 800adb2:	9100      	str	r1, [sp, #0]
 800adb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adb8:	4906      	ldr	r1, [pc, #24]	; (800add4 <__assert_func+0x34>)
 800adba:	462b      	mov	r3, r5
 800adbc:	f000 f81e 	bl	800adfc <fiprintf>
 800adc0:	f000 f89f 	bl	800af02 <abort>
 800adc4:	4b04      	ldr	r3, [pc, #16]	; (800add8 <__assert_func+0x38>)
 800adc6:	461c      	mov	r4, r3
 800adc8:	e7f3      	b.n	800adb2 <__assert_func+0x12>
 800adca:	bf00      	nop
 800adcc:	200002c8 	.word	0x200002c8
 800add0:	0800b28d 	.word	0x0800b28d
 800add4:	0800b29a 	.word	0x0800b29a
 800add8:	0800b2c8 	.word	0x0800b2c8

0800addc <_close_r>:
 800addc:	b538      	push	{r3, r4, r5, lr}
 800adde:	4d06      	ldr	r5, [pc, #24]	; (800adf8 <_close_r+0x1c>)
 800ade0:	2300      	movs	r3, #0
 800ade2:	4604      	mov	r4, r0
 800ade4:	4608      	mov	r0, r1
 800ade6:	602b      	str	r3, [r5, #0]
 800ade8:	f7fb f8eb 	bl	8005fc2 <_close>
 800adec:	1c43      	adds	r3, r0, #1
 800adee:	d102      	bne.n	800adf6 <_close_r+0x1a>
 800adf0:	682b      	ldr	r3, [r5, #0]
 800adf2:	b103      	cbz	r3, 800adf6 <_close_r+0x1a>
 800adf4:	6023      	str	r3, [r4, #0]
 800adf6:	bd38      	pop	{r3, r4, r5, pc}
 800adf8:	20000764 	.word	0x20000764

0800adfc <fiprintf>:
 800adfc:	b40e      	push	{r1, r2, r3}
 800adfe:	b503      	push	{r0, r1, lr}
 800ae00:	4601      	mov	r1, r0
 800ae02:	ab03      	add	r3, sp, #12
 800ae04:	4805      	ldr	r0, [pc, #20]	; (800ae1c <fiprintf+0x20>)
 800ae06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae0a:	6800      	ldr	r0, [r0, #0]
 800ae0c:	9301      	str	r3, [sp, #4]
 800ae0e:	f7ff fe31 	bl	800aa74 <_vfiprintf_r>
 800ae12:	b002      	add	sp, #8
 800ae14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae18:	b003      	add	sp, #12
 800ae1a:	4770      	bx	lr
 800ae1c:	200002c8 	.word	0x200002c8

0800ae20 <_fstat_r>:
 800ae20:	b538      	push	{r3, r4, r5, lr}
 800ae22:	4d07      	ldr	r5, [pc, #28]	; (800ae40 <_fstat_r+0x20>)
 800ae24:	2300      	movs	r3, #0
 800ae26:	4604      	mov	r4, r0
 800ae28:	4608      	mov	r0, r1
 800ae2a:	4611      	mov	r1, r2
 800ae2c:	602b      	str	r3, [r5, #0]
 800ae2e:	f7fb f8d4 	bl	8005fda <_fstat>
 800ae32:	1c43      	adds	r3, r0, #1
 800ae34:	d102      	bne.n	800ae3c <_fstat_r+0x1c>
 800ae36:	682b      	ldr	r3, [r5, #0]
 800ae38:	b103      	cbz	r3, 800ae3c <_fstat_r+0x1c>
 800ae3a:	6023      	str	r3, [r4, #0]
 800ae3c:	bd38      	pop	{r3, r4, r5, pc}
 800ae3e:	bf00      	nop
 800ae40:	20000764 	.word	0x20000764

0800ae44 <_isatty_r>:
 800ae44:	b538      	push	{r3, r4, r5, lr}
 800ae46:	4d06      	ldr	r5, [pc, #24]	; (800ae60 <_isatty_r+0x1c>)
 800ae48:	2300      	movs	r3, #0
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	4608      	mov	r0, r1
 800ae4e:	602b      	str	r3, [r5, #0]
 800ae50:	f7fb f8d3 	bl	8005ffa <_isatty>
 800ae54:	1c43      	adds	r3, r0, #1
 800ae56:	d102      	bne.n	800ae5e <_isatty_r+0x1a>
 800ae58:	682b      	ldr	r3, [r5, #0]
 800ae5a:	b103      	cbz	r3, 800ae5e <_isatty_r+0x1a>
 800ae5c:	6023      	str	r3, [r4, #0]
 800ae5e:	bd38      	pop	{r3, r4, r5, pc}
 800ae60:	20000764 	.word	0x20000764

0800ae64 <_lseek_r>:
 800ae64:	b538      	push	{r3, r4, r5, lr}
 800ae66:	4d07      	ldr	r5, [pc, #28]	; (800ae84 <_lseek_r+0x20>)
 800ae68:	4604      	mov	r4, r0
 800ae6a:	4608      	mov	r0, r1
 800ae6c:	4611      	mov	r1, r2
 800ae6e:	2200      	movs	r2, #0
 800ae70:	602a      	str	r2, [r5, #0]
 800ae72:	461a      	mov	r2, r3
 800ae74:	f7fb f8cc 	bl	8006010 <_lseek>
 800ae78:	1c43      	adds	r3, r0, #1
 800ae7a:	d102      	bne.n	800ae82 <_lseek_r+0x1e>
 800ae7c:	682b      	ldr	r3, [r5, #0]
 800ae7e:	b103      	cbz	r3, 800ae82 <_lseek_r+0x1e>
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	bd38      	pop	{r3, r4, r5, pc}
 800ae84:	20000764 	.word	0x20000764

0800ae88 <__ascii_mbtowc>:
 800ae88:	b082      	sub	sp, #8
 800ae8a:	b901      	cbnz	r1, 800ae8e <__ascii_mbtowc+0x6>
 800ae8c:	a901      	add	r1, sp, #4
 800ae8e:	b142      	cbz	r2, 800aea2 <__ascii_mbtowc+0x1a>
 800ae90:	b14b      	cbz	r3, 800aea6 <__ascii_mbtowc+0x1e>
 800ae92:	7813      	ldrb	r3, [r2, #0]
 800ae94:	600b      	str	r3, [r1, #0]
 800ae96:	7812      	ldrb	r2, [r2, #0]
 800ae98:	1e10      	subs	r0, r2, #0
 800ae9a:	bf18      	it	ne
 800ae9c:	2001      	movne	r0, #1
 800ae9e:	b002      	add	sp, #8
 800aea0:	4770      	bx	lr
 800aea2:	4610      	mov	r0, r2
 800aea4:	e7fb      	b.n	800ae9e <__ascii_mbtowc+0x16>
 800aea6:	f06f 0001 	mvn.w	r0, #1
 800aeaa:	e7f8      	b.n	800ae9e <__ascii_mbtowc+0x16>

0800aeac <__malloc_lock>:
 800aeac:	4801      	ldr	r0, [pc, #4]	; (800aeb4 <__malloc_lock+0x8>)
 800aeae:	f7ff b910 	b.w	800a0d2 <__retarget_lock_acquire_recursive>
 800aeb2:	bf00      	nop
 800aeb4:	2000075c 	.word	0x2000075c

0800aeb8 <__malloc_unlock>:
 800aeb8:	4801      	ldr	r0, [pc, #4]	; (800aec0 <__malloc_unlock+0x8>)
 800aeba:	f7ff b90b 	b.w	800a0d4 <__retarget_lock_release_recursive>
 800aebe:	bf00      	nop
 800aec0:	2000075c 	.word	0x2000075c

0800aec4 <_read_r>:
 800aec4:	b538      	push	{r3, r4, r5, lr}
 800aec6:	4d07      	ldr	r5, [pc, #28]	; (800aee4 <_read_r+0x20>)
 800aec8:	4604      	mov	r4, r0
 800aeca:	4608      	mov	r0, r1
 800aecc:	4611      	mov	r1, r2
 800aece:	2200      	movs	r2, #0
 800aed0:	602a      	str	r2, [r5, #0]
 800aed2:	461a      	mov	r2, r3
 800aed4:	f7fb f83c 	bl	8005f50 <_read>
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	d102      	bne.n	800aee2 <_read_r+0x1e>
 800aedc:	682b      	ldr	r3, [r5, #0]
 800aede:	b103      	cbz	r3, 800aee2 <_read_r+0x1e>
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	bd38      	pop	{r3, r4, r5, pc}
 800aee4:	20000764 	.word	0x20000764

0800aee8 <__ascii_wctomb>:
 800aee8:	b149      	cbz	r1, 800aefe <__ascii_wctomb+0x16>
 800aeea:	2aff      	cmp	r2, #255	; 0xff
 800aeec:	bf85      	ittet	hi
 800aeee:	238a      	movhi	r3, #138	; 0x8a
 800aef0:	6003      	strhi	r3, [r0, #0]
 800aef2:	700a      	strbls	r2, [r1, #0]
 800aef4:	f04f 30ff 	movhi.w	r0, #4294967295
 800aef8:	bf98      	it	ls
 800aefa:	2001      	movls	r0, #1
 800aefc:	4770      	bx	lr
 800aefe:	4608      	mov	r0, r1
 800af00:	4770      	bx	lr

0800af02 <abort>:
 800af02:	b508      	push	{r3, lr}
 800af04:	2006      	movs	r0, #6
 800af06:	f000 f82b 	bl	800af60 <raise>
 800af0a:	2001      	movs	r0, #1
 800af0c:	f7fb f816 	bl	8005f3c <_exit>

0800af10 <_raise_r>:
 800af10:	291f      	cmp	r1, #31
 800af12:	b538      	push	{r3, r4, r5, lr}
 800af14:	4604      	mov	r4, r0
 800af16:	460d      	mov	r5, r1
 800af18:	d904      	bls.n	800af24 <_raise_r+0x14>
 800af1a:	2316      	movs	r3, #22
 800af1c:	6003      	str	r3, [r0, #0]
 800af1e:	f04f 30ff 	mov.w	r0, #4294967295
 800af22:	bd38      	pop	{r3, r4, r5, pc}
 800af24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af26:	b112      	cbz	r2, 800af2e <_raise_r+0x1e>
 800af28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af2c:	b94b      	cbnz	r3, 800af42 <_raise_r+0x32>
 800af2e:	4620      	mov	r0, r4
 800af30:	f000 f830 	bl	800af94 <_getpid_r>
 800af34:	462a      	mov	r2, r5
 800af36:	4601      	mov	r1, r0
 800af38:	4620      	mov	r0, r4
 800af3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af3e:	f000 b817 	b.w	800af70 <_kill_r>
 800af42:	2b01      	cmp	r3, #1
 800af44:	d00a      	beq.n	800af5c <_raise_r+0x4c>
 800af46:	1c59      	adds	r1, r3, #1
 800af48:	d103      	bne.n	800af52 <_raise_r+0x42>
 800af4a:	2316      	movs	r3, #22
 800af4c:	6003      	str	r3, [r0, #0]
 800af4e:	2001      	movs	r0, #1
 800af50:	e7e7      	b.n	800af22 <_raise_r+0x12>
 800af52:	2400      	movs	r4, #0
 800af54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af58:	4628      	mov	r0, r5
 800af5a:	4798      	blx	r3
 800af5c:	2000      	movs	r0, #0
 800af5e:	e7e0      	b.n	800af22 <_raise_r+0x12>

0800af60 <raise>:
 800af60:	4b02      	ldr	r3, [pc, #8]	; (800af6c <raise+0xc>)
 800af62:	4601      	mov	r1, r0
 800af64:	6818      	ldr	r0, [r3, #0]
 800af66:	f7ff bfd3 	b.w	800af10 <_raise_r>
 800af6a:	bf00      	nop
 800af6c:	200002c8 	.word	0x200002c8

0800af70 <_kill_r>:
 800af70:	b538      	push	{r3, r4, r5, lr}
 800af72:	4d07      	ldr	r5, [pc, #28]	; (800af90 <_kill_r+0x20>)
 800af74:	2300      	movs	r3, #0
 800af76:	4604      	mov	r4, r0
 800af78:	4608      	mov	r0, r1
 800af7a:	4611      	mov	r1, r2
 800af7c:	602b      	str	r3, [r5, #0]
 800af7e:	f7fa ffcd 	bl	8005f1c <_kill>
 800af82:	1c43      	adds	r3, r0, #1
 800af84:	d102      	bne.n	800af8c <_kill_r+0x1c>
 800af86:	682b      	ldr	r3, [r5, #0]
 800af88:	b103      	cbz	r3, 800af8c <_kill_r+0x1c>
 800af8a:	6023      	str	r3, [r4, #0]
 800af8c:	bd38      	pop	{r3, r4, r5, pc}
 800af8e:	bf00      	nop
 800af90:	20000764 	.word	0x20000764

0800af94 <_getpid_r>:
 800af94:	f7fa bfba 	b.w	8005f0c <_getpid>

0800af98 <_init>:
 800af98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9a:	bf00      	nop
 800af9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af9e:	bc08      	pop	{r3}
 800afa0:	469e      	mov	lr, r3
 800afa2:	4770      	bx	lr

0800afa4 <_fini>:
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	bf00      	nop
 800afa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afaa:	bc08      	pop	{r3}
 800afac:	469e      	mov	lr, r3
 800afae:	4770      	bx	lr
