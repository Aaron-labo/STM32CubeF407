
F407_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ada4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d1f0  0800af38  0800af38  0001af38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018128  08018128  00030278  2**0
                  CONTENTS
  4 .ARM          00000008  08018128  08018128  00028128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018130  08018130  00030278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018130  08018130  00028130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018134  08018134  00028134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  08018138  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000278  080183b0  00030278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  080183b0  000304c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001302d  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cba  00000000  00000000  000432d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00045f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00046cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002384f  00000000  00000000  000478d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b6c  00000000  00000000  0006b11f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca35a  00000000  00000000  0007cc8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00146fe5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000485c  00000000  00000000  00147038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000278 	.word	0x20000278
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af1c 	.word	0x0800af1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	0800af1c 	.word	0x0800af1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <LCD_WR_REG>:
_lcd_dev lcddev;

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(__IO uint16_t regval)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	80fb      	strh	r3, [r7, #6]
	regval=regval;		//使用-O2优化的时候,必须插入的延时
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	80fb      	strh	r3, [r7, #6]
	TFT_LCD->LCD_REG=regval;//写入要写的寄存器序号
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <LCD_WR_REG+0x24>)
 8000f92:	88fa      	ldrh	r2, [r7, #6]
 8000f94:	b292      	uxth	r2, r2
 8000f96:	801a      	strh	r2, [r3, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	6c00007e 	.word	0x6c00007e

08000fa8 <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(__IO uint16_t data)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	80fb      	strh	r3, [r7, #6]
	data=data;			//使用-O2优化的时候,必须插入的延时
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	80fb      	strh	r3, [r7, #6]
	TFT_LCD->LCD_RAM=data;
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <LCD_WR_DATA+0x24>)
 8000fba:	88fa      	ldrh	r2, [r7, #6]
 8000fbc:	b292      	uxth	r2, r2
 8000fbe:	805a      	strh	r2, [r3, #2]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	6c00007e 	.word	0x6c00007e

08000fd0 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//防止被优化
	ram=TFT_LCD->LCD_RAM;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <LCD_RD_DATA+0x20>)
 8000fd8:	885b      	ldrh	r3, [r3, #2]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	b29b      	uxth	r3, r3
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	6c00007e 	.word	0x6c00007e

08000ff4 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	460a      	mov	r2, r1
 8000ffe:	80fb      	strh	r3, [r7, #6]
 8001000:	4613      	mov	r3, r2
 8001002:	80bb      	strh	r3, [r7, #4]
	TFT_LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 8001004:	4a05      	ldr	r2, [pc, #20]	; (800101c <LCD_WriteReg+0x28>)
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	8013      	strh	r3, [r2, #0]
	TFT_LCD->LCD_RAM = LCD_RegValue;//写入数据
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <LCD_WriteReg+0x28>)
 800100c:	88bb      	ldrh	r3, [r7, #4]
 800100e:	8053      	strh	r3, [r2, #2]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	6c00007e 	.word	0x6c00007e

08001020 <opt_delay>:

//当mdk -O1时间优化时需要设置
//延时i
void opt_delay(uint8_t i)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	while(i--);
 800102a:	bf00      	nop
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	1e5a      	subs	r2, r3, #1
 8001030:	71fa      	strb	r2, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1fa      	bne.n	800102c <opt_delay+0xc>
}
 8001036:	bf00      	nop
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <LCD_WriteRAM_Prepare>:
	opt_delay(5);
	return LCD_RD_DATA();		//返回读到的值
}
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
 	TFT_LCD->LCD_REG=lcddev.wramcmd;
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <LCD_WriteRAM_Prepare+0x18>)
 800104a:	4a05      	ldr	r2, [pc, #20]	; (8001060 <LCD_WriteRAM_Prepare+0x1c>)
 800104c:	8912      	ldrh	r2, [r2, #8]
 800104e:	801a      	strh	r2, [r3, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	6c00007e 	.word	0x6c00007e
 8001060:	200002f4 	.word	0x200002f4

08001064 <LCD_SetCursor>:
}
//设置光标位置(对RGB屏无效)
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	460a      	mov	r2, r1
 800106e:	80fb      	strh	r3, [r7, #6]
 8001070:	4613      	mov	r3, r2
 8001072:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001074:	4b6b      	ldr	r3, [pc, #428]	; (8001224 <LCD_SetCursor+0x1c0>)
 8001076:	889b      	ldrh	r3, [r3, #4]
 8001078:	f249 3241 	movw	r2, #37697	; 0x9341
 800107c:	4293      	cmp	r3, r2
 800107e:	d005      	beq.n	800108c <LCD_SetCursor+0x28>
 8001080:	4b68      	ldr	r3, [pc, #416]	; (8001224 <LCD_SetCursor+0x1c0>)
 8001082:	889b      	ldrh	r3, [r3, #4]
 8001084:	f245 3210 	movw	r2, #21264	; 0x5310
 8001088:	4293      	cmp	r3, r2
 800108a:	d122      	bne.n	80010d2 <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 800108c:	4b65      	ldr	r3, [pc, #404]	; (8001224 <LCD_SetCursor+0x1c0>)
 800108e:	895b      	ldrh	r3, [r3, #10]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff75 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	b29b      	uxth	r3, r3
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff83 	bl	8000fa8 <LCD_WR_DATA>
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff7d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80010ae:	4b5d      	ldr	r3, [pc, #372]	; (8001224 <LCD_SetCursor+0x1c0>)
 80010b0:	899b      	ldrh	r3, [r3, #12]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff64 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 80010b8:	88bb      	ldrh	r3, [r7, #4]
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	b29b      	uxth	r3, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff72 	bl	8000fa8 <LCD_WR_DATA>
 80010c4:	88bb      	ldrh	r3, [r7, #4]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff6c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
	}
}
 80010d0:	e0a3      	b.n	800121a <LCD_SetCursor+0x1b6>
	}else if(lcddev.id==0X1963)
 80010d2:	4b54      	ldr	r3, [pc, #336]	; (8001224 <LCD_SetCursor+0x1c0>)
 80010d4:	889b      	ldrh	r3, [r3, #4]
 80010d6:	f641 1263 	movw	r2, #6499	; 0x1963
 80010da:	4293      	cmp	r3, r2
 80010dc:	d167      	bne.n	80011ae <LCD_SetCursor+0x14a>
		if(lcddev.dir==0)//x坐标需要变换
 80010de:	4b51      	ldr	r3, [pc, #324]	; (8001224 <LCD_SetCursor+0x1c0>)
 80010e0:	799b      	ldrb	r3, [r3, #6]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d11e      	bne.n	8001124 <LCD_SetCursor+0xc0>
			Xpos=lcddev.width-1-Xpos;
 80010e6:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <LCD_SetCursor+0x1c0>)
 80010e8:	881a      	ldrh	r2, [r3, #0]
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	3b01      	subs	r3, #1
 80010f2:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 80010f4:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <LCD_SetCursor+0x1c0>)
 80010f6:	895b      	ldrh	r3, [r3, #10]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff41 	bl	8000f80 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff ff52 	bl	8000fa8 <LCD_WR_DATA>
 8001104:	2000      	movs	r0, #0
 8001106:	f7ff ff4f 	bl	8000fa8 <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	b29b      	uxth	r3, r3
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff49 	bl	8000fa8 <LCD_WR_DATA>
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	b29b      	uxth	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff43 	bl	8000fa8 <LCD_WR_DATA>
 8001122:	e021      	b.n	8001168 <LCD_SetCursor+0x104>
			LCD_WR_REG(lcddev.setxcmd);
 8001124:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <LCD_SetCursor+0x1c0>)
 8001126:	895b      	ldrh	r3, [r3, #10]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff29 	bl	8000f80 <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	b29b      	uxth	r3, r3
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff37 	bl	8000fa8 <LCD_WR_DATA>
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	b29b      	uxth	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff31 	bl	8000fa8 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001146:	4b37      	ldr	r3, [pc, #220]	; (8001224 <LCD_SetCursor+0x1c0>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	3b01      	subs	r3, #1
 800114c:	121b      	asrs	r3, r3, #8
 800114e:	b29b      	uxth	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff29 	bl	8000fa8 <LCD_WR_DATA>
 8001156:	4b33      	ldr	r3, [pc, #204]	; (8001224 <LCD_SetCursor+0x1c0>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	3b01      	subs	r3, #1
 800115c:	b29b      	uxth	r3, r3
 800115e:	b2db      	uxtb	r3, r3
 8001160:	b29b      	uxth	r3, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff20 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001168:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <LCD_SetCursor+0x1c0>)
 800116a:	899b      	ldrh	r3, [r3, #12]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff07 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8001172:	88bb      	ldrh	r3, [r7, #4]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	b29b      	uxth	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff15 	bl	8000fa8 <LCD_WR_DATA>
 800117e:	88bb      	ldrh	r3, [r7, #4]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	b29b      	uxth	r3, r3
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff0f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <LCD_SetCursor+0x1c0>)
 800118c:	885b      	ldrh	r3, [r3, #2]
 800118e:	3b01      	subs	r3, #1
 8001190:	121b      	asrs	r3, r3, #8
 8001192:	b29b      	uxth	r3, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff07 	bl	8000fa8 <LCD_WR_DATA>
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <LCD_SetCursor+0x1c0>)
 800119c:	885b      	ldrh	r3, [r3, #2]
 800119e:	3b01      	subs	r3, #1
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fefe 	bl	8000fa8 <LCD_WR_DATA>
}
 80011ac:	e035      	b.n	800121a <LCD_SetCursor+0x1b6>
	}else if(lcddev.id==0X5510)
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <LCD_SetCursor+0x1c0>)
 80011b0:	889b      	ldrh	r3, [r3, #4]
 80011b2:	f245 5210 	movw	r2, #21776	; 0x5510
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d12f      	bne.n	800121a <LCD_SetCursor+0x1b6>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <LCD_SetCursor+0x1c0>)
 80011bc:	895b      	ldrh	r3, [r3, #10]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fede 	bl	8000f80 <LCD_WR_REG>
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	0a1b      	lsrs	r3, r3, #8
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff feec 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <LCD_SetCursor+0x1c0>)
 80011d2:	895b      	ldrh	r3, [r3, #10]
 80011d4:	3301      	adds	r3, #1
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fed1 	bl	8000f80 <LCD_WR_REG>
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fedf 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <LCD_SetCursor+0x1c0>)
 80011ec:	899b      	ldrh	r3, [r3, #12]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fec6 	bl	8000f80 <LCD_WR_REG>
 80011f4:	88bb      	ldrh	r3, [r7, #4]
 80011f6:	0a1b      	lsrs	r3, r3, #8
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fed4 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <LCD_SetCursor+0x1c0>)
 8001202:	899b      	ldrh	r3, [r3, #12]
 8001204:	3301      	adds	r3, #1
 8001206:	b29b      	uxth	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff feb9 	bl	8000f80 <LCD_WR_REG>
 800120e:	88bb      	ldrh	r3, [r7, #4]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	b29b      	uxth	r3, r3
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fec7 	bl	8000fa8 <LCD_WR_DATA>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200002f4 	.word	0x200002f4

08001228 <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	uint16_t regval=0;
 8001232:	2300      	movs	r3, #0
 8001234:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg=0;
 8001236:	2300      	movs	r3, #0
 8001238:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if((lcddev.dir==1&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对1963不改变扫描方向！竖屏时1963改变方向
 800123a:	4ba9      	ldr	r3, [pc, #676]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 800123c:	799b      	ldrb	r3, [r3, #6]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d105      	bne.n	800124e <LCD_Scan_Dir+0x26>
 8001242:	4ba7      	ldr	r3, [pc, #668]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 8001244:	889b      	ldrh	r3, [r3, #4]
 8001246:	f641 1263 	movw	r2, #6499	; 0x1963
 800124a:	4293      	cmp	r3, r2
 800124c:	d109      	bne.n	8001262 <LCD_Scan_Dir+0x3a>
 800124e:	4ba4      	ldr	r3, [pc, #656]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 8001250:	799b      	ldrb	r3, [r3, #6]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d134      	bne.n	80012c0 <LCD_Scan_Dir+0x98>
 8001256:	4ba2      	ldr	r3, [pc, #648]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 8001258:	889b      	ldrh	r3, [r3, #4]
 800125a:	f641 1263 	movw	r2, #6499	; 0x1963
 800125e:	4293      	cmp	r3, r2
 8001260:	d12e      	bne.n	80012c0 <LCD_Scan_Dir+0x98>
	{
		switch(dir)//方向转换
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b07      	cmp	r3, #7
 8001266:	d82c      	bhi.n	80012c2 <LCD_Scan_Dir+0x9a>
 8001268:	a201      	add	r2, pc, #4	; (adr r2, 8001270 <LCD_Scan_Dir+0x48>)
 800126a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126e:	bf00      	nop
 8001270:	08001291 	.word	0x08001291
 8001274:	08001297 	.word	0x08001297
 8001278:	0800129d 	.word	0x0800129d
 800127c:	080012a3 	.word	0x080012a3
 8001280:	080012a9 	.word	0x080012a9
 8001284:	080012af 	.word	0x080012af
 8001288:	080012b5 	.word	0x080012b5
 800128c:	080012bb 	.word	0x080012bb
		{
			case 0:dir=6;break;
 8001290:	2306      	movs	r3, #6
 8001292:	71fb      	strb	r3, [r7, #7]
 8001294:	e015      	b.n	80012c2 <LCD_Scan_Dir+0x9a>
			case 1:dir=7;break;
 8001296:	2307      	movs	r3, #7
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	e012      	b.n	80012c2 <LCD_Scan_Dir+0x9a>
			case 2:dir=4;break;
 800129c:	2304      	movs	r3, #4
 800129e:	71fb      	strb	r3, [r7, #7]
 80012a0:	e00f      	b.n	80012c2 <LCD_Scan_Dir+0x9a>
			case 3:dir=5;break;
 80012a2:	2305      	movs	r3, #5
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	e00c      	b.n	80012c2 <LCD_Scan_Dir+0x9a>
			case 4:dir=1;break;
 80012a8:	2301      	movs	r3, #1
 80012aa:	71fb      	strb	r3, [r7, #7]
 80012ac:	e009      	b.n	80012c2 <LCD_Scan_Dir+0x9a>
			case 5:dir=0;break;
 80012ae:	2300      	movs	r3, #0
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	e006      	b.n	80012c2 <LCD_Scan_Dir+0x9a>
			case 6:dir=3;break;
 80012b4:	2303      	movs	r3, #3
 80012b6:	71fb      	strb	r3, [r7, #7]
 80012b8:	e003      	b.n	80012c2 <LCD_Scan_Dir+0x9a>
			case 7:dir=2;break;
 80012ba:	2302      	movs	r3, #2
 80012bc:	71fb      	strb	r3, [r7, #7]
 80012be:	e000      	b.n	80012c2 <LCD_Scan_Dir+0x9a>
		}
	}
 80012c0:	bf00      	nop
	if(lcddev.id==0x9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/5310/5510/1963,特殊处理
 80012c2:	4b87      	ldr	r3, [pc, #540]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 80012c4:	889b      	ldrh	r3, [r3, #4]
 80012c6:	f249 3241 	movw	r2, #37697	; 0x9341
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d012      	beq.n	80012f4 <LCD_Scan_Dir+0xcc>
 80012ce:	4b84      	ldr	r3, [pc, #528]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 80012d0:	889b      	ldrh	r3, [r3, #4]
 80012d2:	f245 3210 	movw	r2, #21264	; 0x5310
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d00c      	beq.n	80012f4 <LCD_Scan_Dir+0xcc>
 80012da:	4b81      	ldr	r3, [pc, #516]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 80012dc:	889b      	ldrh	r3, [r3, #4]
 80012de:	f245 5210 	movw	r2, #21776	; 0x5510
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d006      	beq.n	80012f4 <LCD_Scan_Dir+0xcc>
 80012e6:	4b7e      	ldr	r3, [pc, #504]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 80012e8:	889b      	ldrh	r3, [r3, #4]
 80012ea:	f641 1263 	movw	r2, #6499	; 0x1963
 80012ee:	4293      	cmp	r3, r2
 80012f0:	f040 8130 	bne.w	8001554 <LCD_Scan_Dir+0x32c>
	{
		switch(dir)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b07      	cmp	r3, #7
 80012f8:	d835      	bhi.n	8001366 <LCD_Scan_Dir+0x13e>
 80012fa:	a201      	add	r2, pc, #4	; (adr r2, 8001300 <LCD_Scan_Dir+0xd8>)
 80012fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001300:	08001367 	.word	0x08001367
 8001304:	08001321 	.word	0x08001321
 8001308:	0800132b 	.word	0x0800132b
 800130c:	08001335 	.word	0x08001335
 8001310:	0800133f 	.word	0x0800133f
 8001314:	08001349 	.word	0x08001349
 8001318:	08001353 	.word	0x08001353
 800131c:	0800135d 	.word	0x0800135d
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 8001320:	89fb      	ldrh	r3, [r7, #14]
 8001322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001326:	81fb      	strh	r3, [r7, #14]
				break;
 8001328:	e01d      	b.n	8001366 <LCD_Scan_Dir+0x13e>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 800132a:	89fb      	ldrh	r3, [r7, #14]
 800132c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001330:	81fb      	strh	r3, [r7, #14]
				break;
 8001332:	e018      	b.n	8001366 <LCD_Scan_Dir+0x13e>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 8001334:	89fb      	ldrh	r3, [r7, #14]
 8001336:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800133a:	81fb      	strh	r3, [r7, #14]
				break;
 800133c:	e013      	b.n	8001366 <LCD_Scan_Dir+0x13e>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 800133e:	89fb      	ldrh	r3, [r7, #14]
 8001340:	f043 0320 	orr.w	r3, r3, #32
 8001344:	81fb      	strh	r3, [r7, #14]
				break;
 8001346:	e00e      	b.n	8001366 <LCD_Scan_Dir+0x13e>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800134e:	81fb      	strh	r3, [r7, #14]
				break;
 8001350:	e009      	b.n	8001366 <LCD_Scan_Dir+0x13e>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 8001352:	89fb      	ldrh	r3, [r7, #14]
 8001354:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001358:	81fb      	strh	r3, [r7, #14]
				break;
 800135a:	e004      	b.n	8001366 <LCD_Scan_Dir+0x13e>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 800135c:	89fb      	ldrh	r3, [r7, #14]
 800135e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001362:	81fb      	strh	r3, [r7, #14]
				break;
 8001364:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 8001366:	4b5e      	ldr	r3, [pc, #376]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 8001368:	889b      	ldrh	r3, [r3, #4]
 800136a:	f245 5210 	movw	r2, #21776	; 0x5510
 800136e:	4293      	cmp	r3, r2
 8001370:	d103      	bne.n	800137a <LCD_Scan_Dir+0x152>
 8001372:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8001376:	81bb      	strh	r3, [r7, #12]
 8001378:	e001      	b.n	800137e <LCD_Scan_Dir+0x156>
		else dirreg=0X36;
 800137a:	2336      	movs	r3, #54	; 0x36
 800137c:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 800137e:	4b58      	ldr	r3, [pc, #352]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 8001380:	889b      	ldrh	r3, [r3, #4]
 8001382:	f245 3210 	movw	r2, #21264	; 0x5310
 8001386:	4293      	cmp	r3, r2
 8001388:	d00f      	beq.n	80013aa <LCD_Scan_Dir+0x182>
 800138a:	4b55      	ldr	r3, [pc, #340]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 800138c:	889b      	ldrh	r3, [r3, #4]
 800138e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001392:	4293      	cmp	r3, r2
 8001394:	d009      	beq.n	80013aa <LCD_Scan_Dir+0x182>
 8001396:	4b52      	ldr	r3, [pc, #328]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 8001398:	889b      	ldrh	r3, [r3, #4]
 800139a:	f641 1263 	movw	r2, #6499	; 0x1963
 800139e:	4293      	cmp	r3, r2
 80013a0:	d003      	beq.n	80013aa <LCD_Scan_Dir+0x182>
 80013a2:	89fb      	ldrh	r3, [r7, #14]
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	81fb      	strh	r3, [r7, #14]
 		LCD_WriteReg(dirreg,regval);
 80013aa:	89fa      	ldrh	r2, [r7, #14]
 80013ac:	89bb      	ldrh	r3, [r7, #12]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fe1f 	bl	8000ff4 <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 80013b6:	4b4a      	ldr	r3, [pc, #296]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 80013b8:	889b      	ldrh	r3, [r3, #4]
 80013ba:	f641 1263 	movw	r2, #6499	; 0x1963
 80013be:	4293      	cmp	r3, r2
 80013c0:	d025      	beq.n	800140e <LCD_Scan_Dir+0x1e6>
		{
			if(regval&0X20)
 80013c2:	89fb      	ldrh	r3, [r7, #14]
 80013c4:	f003 0320 	and.w	r3, r3, #32
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d010      	beq.n	80013ee <LCD_Scan_Dir+0x1c6>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 80013cc:	4b44      	ldr	r3, [pc, #272]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 80013ce:	881a      	ldrh	r2, [r3, #0]
 80013d0:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 80013d2:	885b      	ldrh	r3, [r3, #2]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d21a      	bcs.n	800140e <LCD_Scan_Dir+0x1e6>
				{
					temp=lcddev.width;
 80013d8:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 80013de:	4b40      	ldr	r3, [pc, #256]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 80013e0:	885a      	ldrh	r2, [r3, #2]
 80013e2:	4b3f      	ldr	r3, [pc, #252]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 80013e4:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 80013e6:	4a3e      	ldr	r2, [pc, #248]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 80013e8:	897b      	ldrh	r3, [r7, #10]
 80013ea:	8053      	strh	r3, [r2, #2]
 80013ec:	e00f      	b.n	800140e <LCD_Scan_Dir+0x1e6>
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 80013ee:	4b3c      	ldr	r3, [pc, #240]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 80013f0:	881a      	ldrh	r2, [r3, #0]
 80013f2:	4b3b      	ldr	r3, [pc, #236]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 80013f4:	885b      	ldrh	r3, [r3, #2]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d909      	bls.n	800140e <LCD_Scan_Dir+0x1e6>
				{
					temp=lcddev.width;
 80013fa:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 8001400:	4b37      	ldr	r3, [pc, #220]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 8001402:	885a      	ldrh	r2, [r3, #2]
 8001404:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 8001406:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8001408:	4a35      	ldr	r2, [pc, #212]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 800140a:	897b      	ldrh	r3, [r7, #10]
 800140c:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 800140e:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 8001410:	889b      	ldrh	r3, [r3, #4]
 8001412:	f245 5210 	movw	r2, #21776	; 0x5510
 8001416:	4293      	cmp	r3, r2
 8001418:	d164      	bne.n	80014e4 <LCD_Scan_Dir+0x2bc>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 800141a:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 800141c:	895b      	ldrh	r3, [r3, #10]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fdae 	bl	8000f80 <LCD_WR_REG>
 8001424:	2000      	movs	r0, #0
 8001426:	f7ff fdbf 	bl	8000fa8 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 800142a:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 800142c:	895b      	ldrh	r3, [r3, #10]
 800142e:	3301      	adds	r3, #1
 8001430:	b29b      	uxth	r3, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fda4 	bl	8000f80 <LCD_WR_REG>
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff fdb5 	bl	8000fa8 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 800143e:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 8001440:	895b      	ldrh	r3, [r3, #10]
 8001442:	3302      	adds	r3, #2
 8001444:	b29b      	uxth	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fd9a 	bl	8000f80 <LCD_WR_REG>
 800144c:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	3b01      	subs	r3, #1
 8001452:	121b      	asrs	r3, r3, #8
 8001454:	b29b      	uxth	r3, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fda6 	bl	8000fa8 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 800145c:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 800145e:	895b      	ldrh	r3, [r3, #10]
 8001460:	3303      	adds	r3, #3
 8001462:	b29b      	uxth	r3, r3
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fd8b 	bl	8000f80 <LCD_WR_REG>
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	3b01      	subs	r3, #1
 8001470:	b29b      	uxth	r3, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	b29b      	uxth	r3, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fd96 	bl	8000fa8 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 800147e:	899b      	ldrh	r3, [r3, #12]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fd7d 	bl	8000f80 <LCD_WR_REG>
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff fd8e 	bl	8000fa8 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 800148e:	899b      	ldrh	r3, [r3, #12]
 8001490:	3301      	adds	r3, #1
 8001492:	b29b      	uxth	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fd73 	bl	8000f80 <LCD_WR_REG>
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff fd84 	bl	8000fa8 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 80014a2:	899b      	ldrh	r3, [r3, #12]
 80014a4:	3302      	adds	r3, #2
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fd69 	bl	8000f80 <LCD_WR_REG>
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 80014b0:	885b      	ldrh	r3, [r3, #2]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	121b      	asrs	r3, r3, #8
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fd75 	bl	8000fa8 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 80014c0:	899b      	ldrh	r3, [r3, #12]
 80014c2:	3303      	adds	r3, #3
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fd5a 	bl	8000f80 <LCD_WR_REG>
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <LCD_Scan_Dir+0x2b8>)
 80014ce:	885b      	ldrh	r3, [r3, #2]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fd65 	bl	8000fa8 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
			LCD_WR_DATA(0);LCD_WR_DATA(0);
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
		}
  	}
}
 80014de:	e039      	b.n	8001554 <LCD_Scan_Dir+0x32c>
 80014e0:	200002f4 	.word	0x200002f4
			LCD_WR_REG(lcddev.setxcmd);
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <LCD_Scan_Dir+0x334>)
 80014e6:	895b      	ldrh	r3, [r3, #10]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fd49 	bl	8000f80 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f7ff fd5a 	bl	8000fa8 <LCD_WR_DATA>
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff fd57 	bl	8000fa8 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <LCD_Scan_Dir+0x334>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	3b01      	subs	r3, #1
 8001500:	121b      	asrs	r3, r3, #8
 8001502:	b29b      	uxth	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fd4f 	bl	8000fa8 <LCD_WR_DATA>
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <LCD_Scan_Dir+0x334>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	3b01      	subs	r3, #1
 8001510:	b29b      	uxth	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	b29b      	uxth	r3, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fd46 	bl	8000fa8 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <LCD_Scan_Dir+0x334>)
 800151e:	899b      	ldrh	r3, [r3, #12]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fd2d 	bl	8000f80 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff fd3e 	bl	8000fa8 <LCD_WR_DATA>
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff fd3b 	bl	8000fa8 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <LCD_Scan_Dir+0x334>)
 8001534:	885b      	ldrh	r3, [r3, #2]
 8001536:	3b01      	subs	r3, #1
 8001538:	121b      	asrs	r3, r3, #8
 800153a:	b29b      	uxth	r3, r3
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fd33 	bl	8000fa8 <LCD_WR_DATA>
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <LCD_Scan_Dir+0x334>)
 8001544:	885b      	ldrh	r3, [r3, #2]
 8001546:	3b01      	subs	r3, #1
 8001548:	b29b      	uxth	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	b29b      	uxth	r3, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fd2a 	bl	8000fa8 <LCD_WR_DATA>
}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200002f4 	.word	0x200002f4

08001560 <LCD_Fast_DrawPoint>:
}
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint32_t color)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	603a      	str	r2, [r7, #0]
 800156a:	80fb      	strh	r3, [r7, #6]
 800156c:	460b      	mov	r3, r1
 800156e:	80bb      	strh	r3, [r7, #4]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001570:	4b85      	ldr	r3, [pc, #532]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 8001572:	889b      	ldrh	r3, [r3, #4]
 8001574:	f249 3241 	movw	r2, #37697	; 0x9341
 8001578:	4293      	cmp	r3, r2
 800157a:	d005      	beq.n	8001588 <LCD_Fast_DrawPoint+0x28>
 800157c:	4b82      	ldr	r3, [pc, #520]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 800157e:	889b      	ldrh	r3, [r3, #4]
 8001580:	f245 3210 	movw	r2, #21264	; 0x5310
 8001584:	4293      	cmp	r3, r2
 8001586:	d122      	bne.n	80015ce <LCD_Fast_DrawPoint+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8001588:	4b7f      	ldr	r3, [pc, #508]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 800158a:	895b      	ldrh	r3, [r3, #10]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fcf7 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	b29b      	uxth	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fd05 	bl	8000fa8 <LCD_WR_DATA>
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fcff 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80015aa:	4b77      	ldr	r3, [pc, #476]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 80015ac:	899b      	ldrh	r3, [r3, #12]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fce6 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80015b4:	88bb      	ldrh	r3, [r7, #4]
 80015b6:	0a1b      	lsrs	r3, r3, #8
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fcf4 	bl	8000fa8 <LCD_WR_DATA>
 80015c0:	88bb      	ldrh	r3, [r7, #4]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fcee 	bl	8000fa8 <LCD_WR_DATA>
 80015cc:	e0cf      	b.n	800176e <LCD_Fast_DrawPoint+0x20e>
	}else if(lcddev.id==0X5510)
 80015ce:	4b6e      	ldr	r3, [pc, #440]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 80015d0:	889b      	ldrh	r3, [r3, #4]
 80015d2:	f245 5210 	movw	r2, #21776	; 0x5510
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d130      	bne.n	800163c <LCD_Fast_DrawPoint+0xdc>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 80015da:	4b6b      	ldr	r3, [pc, #428]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 80015dc:	895b      	ldrh	r3, [r3, #10]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fcce 	bl	8000f80 <LCD_WR_REG>
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	0a1b      	lsrs	r3, r3, #8
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fcdc 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 80015f0:	4b65      	ldr	r3, [pc, #404]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 80015f2:	895b      	ldrh	r3, [r3, #10]
 80015f4:	3301      	adds	r3, #1
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fcc1 	bl	8000f80 <LCD_WR_REG>
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	b29b      	uxth	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fccf 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 800160a:	4b5f      	ldr	r3, [pc, #380]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 800160c:	899b      	ldrh	r3, [r3, #12]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fcb6 	bl	8000f80 <LCD_WR_REG>
 8001614:	88bb      	ldrh	r3, [r7, #4]
 8001616:	0a1b      	lsrs	r3, r3, #8
 8001618:	b29b      	uxth	r3, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fcc4 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 8001620:	4b59      	ldr	r3, [pc, #356]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 8001622:	899b      	ldrh	r3, [r3, #12]
 8001624:	3301      	adds	r3, #1
 8001626:	b29b      	uxth	r3, r3
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fca9 	bl	8000f80 <LCD_WR_REG>
 800162e:	88bb      	ldrh	r3, [r7, #4]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	b29b      	uxth	r3, r3
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fcb7 	bl	8000fa8 <LCD_WR_DATA>
 800163a:	e098      	b.n	800176e <LCD_Fast_DrawPoint+0x20e>
	}else if(lcddev.id==0X1963)
 800163c:	4b52      	ldr	r3, [pc, #328]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 800163e:	889b      	ldrh	r3, [r3, #4]
 8001640:	f641 1263 	movw	r2, #6499	; 0x1963
 8001644:	4293      	cmp	r3, r2
 8001646:	d145      	bne.n	80016d4 <LCD_Fast_DrawPoint+0x174>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 8001648:	4b4f      	ldr	r3, [pc, #316]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 800164a:	799b      	ldrb	r3, [r3, #6]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d106      	bne.n	800165e <LCD_Fast_DrawPoint+0xfe>
 8001650:	4b4d      	ldr	r3, [pc, #308]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 8001652:	881a      	ldrh	r2, [r3, #0]
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	b29b      	uxth	r3, r3
 800165a:	3b01      	subs	r3, #1
 800165c:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 800165e:	4b4a      	ldr	r3, [pc, #296]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 8001660:	895b      	ldrh	r3, [r3, #10]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fc8c 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	b29b      	uxth	r3, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fc9a 	bl	8000fa8 <LCD_WR_DATA>
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	b29b      	uxth	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fc94 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	0a1b      	lsrs	r3, r3, #8
 8001684:	b29b      	uxth	r3, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fc8e 	bl	8000fa8 <LCD_WR_DATA>
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	b29b      	uxth	r3, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fc88 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001698:	4b3b      	ldr	r3, [pc, #236]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 800169a:	899b      	ldrh	r3, [r3, #12]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fc6f 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80016a2:	88bb      	ldrh	r3, [r7, #4]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fc7d 	bl	8000fa8 <LCD_WR_DATA>
 80016ae:	88bb      	ldrh	r3, [r7, #4]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fc77 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80016ba:	88bb      	ldrh	r3, [r7, #4]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fc71 	bl	8000fa8 <LCD_WR_DATA>
 80016c6:	88bb      	ldrh	r3, [r7, #4]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fc6b 	bl	8000fa8 <LCD_WR_DATA>
 80016d2:	e04c      	b.n	800176e <LCD_Fast_DrawPoint+0x20e>
	}else if(lcddev.id==0X6804)
 80016d4:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 80016d6:	889b      	ldrh	r3, [r3, #4]
 80016d8:	f646 0204 	movw	r2, #26628	; 0x6804
 80016dc:	4293      	cmp	r3, r2
 80016de:	d12d      	bne.n	800173c <LCD_Fast_DrawPoint+0x1dc>
	{
		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏时处理
 80016e0:	4b29      	ldr	r3, [pc, #164]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 80016e2:	799b      	ldrb	r3, [r3, #6]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d106      	bne.n	80016f6 <LCD_Fast_DrawPoint+0x196>
 80016e8:	4b27      	ldr	r3, [pc, #156]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 80016ea:	881a      	ldrh	r2, [r3, #0]
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	3b01      	subs	r3, #1
 80016f4:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80016f6:	4b24      	ldr	r3, [pc, #144]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 80016f8:	895b      	ldrh	r3, [r3, #10]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fc40 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	0a1b      	lsrs	r3, r3, #8
 8001704:	b29b      	uxth	r3, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fc4e 	bl	8000fa8 <LCD_WR_DATA>
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	b29b      	uxth	r3, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fc48 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 800171a:	899b      	ldrh	r3, [r3, #12]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fc2f 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001722:	88bb      	ldrh	r3, [r7, #4]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	b29b      	uxth	r3, r3
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fc3d 	bl	8000fa8 <LCD_WR_DATA>
 800172e:	88bb      	ldrh	r3, [r7, #4]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	b29b      	uxth	r3, r3
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fc37 	bl	8000fa8 <LCD_WR_DATA>
 800173a:	e018      	b.n	800176e <LCD_Fast_DrawPoint+0x20e>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏其实就是调转x,y坐标
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 800173e:	799b      	ldrb	r3, [r3, #6]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d106      	bne.n	8001752 <LCD_Fast_DrawPoint+0x1f2>
 8001744:	4b10      	ldr	r3, [pc, #64]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 8001746:	881a      	ldrh	r2, [r3, #0]
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	b29b      	uxth	r3, r3
 800174e:	3b01      	subs	r3, #1
 8001750:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 8001754:	895b      	ldrh	r3, [r3, #10]
 8001756:	88fa      	ldrh	r2, [r7, #6]
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fc4a 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 8001762:	899b      	ldrh	r3, [r3, #12]
 8001764:	88ba      	ldrh	r2, [r7, #4]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fc43 	bl	8000ff4 <LCD_WriteReg>
	}
	TFT_LCD->LCD_REG=lcddev.wramcmd;
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <LCD_Fast_DrawPoint+0x22c>)
 8001770:	4a05      	ldr	r2, [pc, #20]	; (8001788 <LCD_Fast_DrawPoint+0x228>)
 8001772:	8912      	ldrh	r2, [r2, #8]
 8001774:	801a      	strh	r2, [r3, #0]
	TFT_LCD->LCD_RAM=color;
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <LCD_Fast_DrawPoint+0x22c>)
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	b292      	uxth	r2, r2
 800177c:	805a      	strh	r2, [r3, #2]
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200002f4 	.word	0x200002f4
 800178c:	6c00007e 	.word	0x6c00007e

08001790 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 800179a:	20be      	movs	r0, #190	; 0xbe
 800179c:	f7ff fbf0 	bl	8000f80 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 80017a0:	2005      	movs	r0, #5
 80017a2:	f7ff fc01 	bl	8000fa8 <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe febb 	bl	8000524 <__aeabi_i2d>
 80017ae:	a310      	add	r3, pc, #64	; (adr r3, 80017f0 <LCD_SSD_BackLightSet+0x60>)
 80017b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b4:	f7fe ff20 	bl	80005f8 <__aeabi_dmul>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	f7ff f9f2 	bl	8000ba8 <__aeabi_d2uiz>
 80017c4:	4603      	mov	r3, r0
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fbed 	bl	8000fa8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 80017ce:	2001      	movs	r0, #1
 80017d0:	f7ff fbea 	bl	8000fa8 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 80017d4:	20ff      	movs	r0, #255	; 0xff
 80017d6:	f7ff fbe7 	bl	8000fa8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 80017da:	2000      	movs	r0, #0
 80017dc:	f7ff fbe4 	bl	8000fa8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7ff fbe1 	bl	8000fa8 <LCD_WR_DATA>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	66666666 	.word	0x66666666
 80017f4:	40046666 	.word	0x40046666

080017f8 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(uint8_t dir)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
	lcddev.dir=dir;		//竖屏/横屏
 8001802:	4a64      	ldr	r2, [pc, #400]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	7193      	strb	r3, [r2, #6]
	if(dir==0)			//竖屏
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d15e      	bne.n	80018cc <LCD_Display_Dir+0xd4>
	{
		lcddev.width=240;
 800180e:	4b61      	ldr	r3, [pc, #388]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001810:	22f0      	movs	r2, #240	; 0xf0
 8001812:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001814:	4b5f      	ldr	r3, [pc, #380]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001816:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800181a:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 800181c:	4b5d      	ldr	r3, [pc, #372]	; (8001994 <LCD_Display_Dir+0x19c>)
 800181e:	889b      	ldrh	r3, [r3, #4]
 8001820:	f249 3241 	movw	r2, #37697	; 0x9341
 8001824:	4293      	cmp	r3, r2
 8001826:	d005      	beq.n	8001834 <LCD_Display_Dir+0x3c>
 8001828:	4b5a      	ldr	r3, [pc, #360]	; (8001994 <LCD_Display_Dir+0x19c>)
 800182a:	889b      	ldrh	r3, [r3, #4]
 800182c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001830:	4293      	cmp	r3, r2
 8001832:	d118      	bne.n	8001866 <LCD_Display_Dir+0x6e>
		{
			lcddev.wramcmd=0X2C;
 8001834:	4b57      	ldr	r3, [pc, #348]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001836:	222c      	movs	r2, #44	; 0x2c
 8001838:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 800183a:	4b56      	ldr	r3, [pc, #344]	; (8001994 <LCD_Display_Dir+0x19c>)
 800183c:	222a      	movs	r2, #42	; 0x2a
 800183e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001840:	4b54      	ldr	r3, [pc, #336]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001842:	222b      	movs	r2, #43	; 0x2b
 8001844:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X5310)
 8001846:	4b53      	ldr	r3, [pc, #332]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001848:	889b      	ldrh	r3, [r3, #4]
 800184a:	f245 3210 	movw	r2, #21264	; 0x5310
 800184e:	4293      	cmp	r3, r2
 8001850:	f040 8099 	bne.w	8001986 <LCD_Display_Dir+0x18e>
			{
				lcddev.width=320;
 8001854:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001856:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800185a:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 800185c:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <LCD_Display_Dir+0x19c>)
 800185e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001862:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X5310)
 8001864:	e08f      	b.n	8001986 <LCD_Display_Dir+0x18e>
			}
		}else if(lcddev.id==0x5510)
 8001866:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001868:	889b      	ldrh	r3, [r3, #4]
 800186a:	f245 5210 	movw	r2, #21776	; 0x5510
 800186e:	4293      	cmp	r3, r2
 8001870:	d114      	bne.n	800189c <LCD_Display_Dir+0xa4>
		{
			lcddev.wramcmd=0X2C00;
 8001872:	4b48      	ldr	r3, [pc, #288]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001874:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001878:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 800187a:	4b46      	ldr	r3, [pc, #280]	; (8001994 <LCD_Display_Dir+0x19c>)
 800187c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001880:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8001882:	4b44      	ldr	r3, [pc, #272]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001884:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001888:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 800188a:	4b42      	ldr	r3, [pc, #264]	; (8001994 <LCD_Display_Dir+0x19c>)
 800188c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001890:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 8001892:	4b40      	ldr	r3, [pc, #256]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001894:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001898:	805a      	strh	r2, [r3, #2]
 800189a:	e074      	b.n	8001986 <LCD_Display_Dir+0x18e>
		}else if(lcddev.id==0X1963)
 800189c:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <LCD_Display_Dir+0x19c>)
 800189e:	889b      	ldrh	r3, [r3, #4]
 80018a0:	f641 1263 	movw	r2, #6499	; 0x1963
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d16e      	bne.n	8001986 <LCD_Display_Dir+0x18e>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 80018a8:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <LCD_Display_Dir+0x19c>)
 80018aa:	222c      	movs	r2, #44	; 0x2c
 80018ac:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 80018ae:	4b39      	ldr	r3, [pc, #228]	; (8001994 <LCD_Display_Dir+0x19c>)
 80018b0:	222b      	movs	r2, #43	; 0x2b
 80018b2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 80018b4:	4b37      	ldr	r3, [pc, #220]	; (8001994 <LCD_Display_Dir+0x19c>)
 80018b6:	222a      	movs	r2, #42	; 0x2a
 80018b8:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 80018ba:	4b36      	ldr	r3, [pc, #216]	; (8001994 <LCD_Display_Dir+0x19c>)
 80018bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018c0:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 80018c2:	4b34      	ldr	r3, [pc, #208]	; (8001994 <LCD_Display_Dir+0x19c>)
 80018c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80018c8:	805a      	strh	r2, [r3, #2]
 80018ca:	e05c      	b.n	8001986 <LCD_Display_Dir+0x18e>
		}
	}else 				//横屏
	{
		lcddev.width=320;
 80018cc:	4b31      	ldr	r3, [pc, #196]	; (8001994 <LCD_Display_Dir+0x19c>)
 80018ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018d2:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80018d4:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <LCD_Display_Dir+0x19c>)
 80018d6:	22f0      	movs	r2, #240	; 0xf0
 80018d8:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 80018da:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <LCD_Display_Dir+0x19c>)
 80018dc:	889b      	ldrh	r3, [r3, #4]
 80018de:	f249 3241 	movw	r2, #37697	; 0x9341
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d005      	beq.n	80018f2 <LCD_Display_Dir+0xfa>
 80018e6:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <LCD_Display_Dir+0x19c>)
 80018e8:	889b      	ldrh	r3, [r3, #4]
 80018ea:	f245 3210 	movw	r2, #21264	; 0x5310
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d109      	bne.n	8001906 <LCD_Display_Dir+0x10e>
		{
			lcddev.wramcmd=0X2C;
 80018f2:	4b28      	ldr	r3, [pc, #160]	; (8001994 <LCD_Display_Dir+0x19c>)
 80018f4:	222c      	movs	r2, #44	; 0x2c
 80018f6:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 80018f8:	4b26      	ldr	r3, [pc, #152]	; (8001994 <LCD_Display_Dir+0x19c>)
 80018fa:	222a      	movs	r2, #42	; 0x2a
 80018fc:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 80018fe:	4b25      	ldr	r3, [pc, #148]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001900:	222b      	movs	r2, #43	; 0x2b
 8001902:	819a      	strh	r2, [r3, #12]
 8001904:	e031      	b.n	800196a <LCD_Display_Dir+0x172>
		}else if(lcddev.id==0x5510)
 8001906:	4b23      	ldr	r3, [pc, #140]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001908:	889b      	ldrh	r3, [r3, #4]
 800190a:	f245 5210 	movw	r2, #21776	; 0x5510
 800190e:	4293      	cmp	r3, r2
 8001910:	d114      	bne.n	800193c <LCD_Display_Dir+0x144>
		{
			lcddev.wramcmd=0X2C00;
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001914:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001918:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 800191a:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <LCD_Display_Dir+0x19c>)
 800191c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001920:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001924:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001928:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 800192a:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <LCD_Display_Dir+0x19c>)
 800192c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001930:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001934:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001938:	805a      	strh	r2, [r3, #2]
 800193a:	e016      	b.n	800196a <LCD_Display_Dir+0x172>
		}else if(lcddev.id==0X1963)
 800193c:	4b15      	ldr	r3, [pc, #84]	; (8001994 <LCD_Display_Dir+0x19c>)
 800193e:	889b      	ldrh	r3, [r3, #4]
 8001940:	f641 1263 	movw	r2, #6499	; 0x1963
 8001944:	4293      	cmp	r3, r2
 8001946:	d110      	bne.n	800196a <LCD_Display_Dir+0x172>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <LCD_Display_Dir+0x19c>)
 800194a:	222c      	movs	r2, #44	; 0x2c
 800194c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001950:	222a      	movs	r2, #42	; 0x2a
 8001952:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001956:	222b      	movs	r2, #43	; 0x2b
 8001958:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <LCD_Display_Dir+0x19c>)
 800195c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001960:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001964:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001968:	805a      	strh	r2, [r3, #2]
		}
		if(lcddev.id==0X5310)
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <LCD_Display_Dir+0x19c>)
 800196c:	889b      	ldrh	r3, [r3, #4]
 800196e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001972:	4293      	cmp	r3, r2
 8001974:	d107      	bne.n	8001986 <LCD_Display_Dir+0x18e>
		{
			lcddev.width=480;
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001978:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800197c:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <LCD_Display_Dir+0x19c>)
 8001980:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001984:	805a      	strh	r2, [r3, #2]
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001986:	2000      	movs	r0, #0
 8001988:	f7ff fc4e 	bl	8001228 <LCD_Scan_Dir>
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200002f4 	.word	0x200002f4

08001998 <TFTLCD_Init>:


//初始化lcd
//该初始化函数可以初始化各种型号的LCD(详见本.c文件最前面的描述)
void TFTLCD_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	HAL_Delay(50); // delay 50 ms
 800199c:	2032      	movs	r0, #50	; 0x32
 800199e:	f003 fd85 	bl	80054ac <HAL_Delay>

	//尝试9341 ID的读取
	LCD_WR_REG(0XD3);
 80019a2:	20d3      	movs	r0, #211	; 0xd3
 80019a4:	f7ff faec 	bl	8000f80 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80019a8:	f7ff fb12 	bl	8000fd0 <LCD_RD_DATA>
 80019ac:	4603      	mov	r3, r0
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b5e      	ldr	r3, [pc, #376]	; (8001b2c <TFTLCD_Init+0x194>)
 80019b2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();	//读到0X00
 80019b4:	f7ff fb0c 	bl	8000fd0 <LCD_RD_DATA>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b5b      	ldr	r3, [pc, #364]	; (8001b2c <TFTLCD_Init+0x194>)
 80019be:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();   	//读取93
 80019c0:	f7ff fb06 	bl	8000fd0 <LCD_RD_DATA>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b58      	ldr	r3, [pc, #352]	; (8001b2c <TFTLCD_Init+0x194>)
 80019ca:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80019cc:	4b57      	ldr	r3, [pc, #348]	; (8001b2c <TFTLCD_Init+0x194>)
 80019ce:	889b      	ldrh	r3, [r3, #4]
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	4b55      	ldr	r3, [pc, #340]	; (8001b2c <TFTLCD_Init+0x194>)
 80019d6:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();  	//读取41
 80019d8:	f7ff fafa 	bl	8000fd0 <LCD_RD_DATA>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	4b52      	ldr	r3, [pc, #328]	; (8001b2c <TFTLCD_Init+0x194>)
 80019e2:	889b      	ldrh	r3, [r3, #4]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	4b50      	ldr	r3, [pc, #320]	; (8001b2c <TFTLCD_Init+0x194>)
 80019ea:	809a      	strh	r2, [r3, #4]
	if(lcddev.id!=0X9341)		//非9341,尝试看看是不是NT35310
 80019ec:	4b4f      	ldr	r3, [pc, #316]	; (8001b2c <TFTLCD_Init+0x194>)
 80019ee:	889b      	ldrh	r3, [r3, #4]
 80019f0:	f249 3241 	movw	r2, #37697	; 0x9341
 80019f4:	4293      	cmp	r3, r2
 80019f6:	f000 808b 	beq.w	8001b10 <TFTLCD_Init+0x178>
	{
		LCD_WR_REG(0XD4);
 80019fa:	20d4      	movs	r0, #212	; 0xd4
 80019fc:	f7ff fac0 	bl	8000f80 <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();//dummy read
 8001a00:	f7ff fae6 	bl	8000fd0 <LCD_RD_DATA>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b48      	ldr	r3, [pc, #288]	; (8001b2c <TFTLCD_Init+0x194>)
 8001a0a:	809a      	strh	r2, [r3, #4]
		lcddev.id=LCD_RD_DATA();//读回0X01
 8001a0c:	f7ff fae0 	bl	8000fd0 <LCD_RD_DATA>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b45      	ldr	r3, [pc, #276]	; (8001b2c <TFTLCD_Init+0x194>)
 8001a16:	809a      	strh	r2, [r3, #4]
		lcddev.id=LCD_RD_DATA();//读回0X53
 8001a18:	f7ff fada 	bl	8000fd0 <LCD_RD_DATA>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <TFTLCD_Init+0x194>)
 8001a22:	809a      	strh	r2, [r3, #4]
		lcddev.id<<=8;
 8001a24:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <TFTLCD_Init+0x194>)
 8001a26:	889b      	ldrh	r3, [r3, #4]
 8001a28:	021b      	lsls	r3, r3, #8
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <TFTLCD_Init+0x194>)
 8001a2e:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 8001a30:	f7ff face 	bl	8000fd0 <LCD_RD_DATA>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b3c      	ldr	r3, [pc, #240]	; (8001b2c <TFTLCD_Init+0x194>)
 8001a3a:	889b      	ldrh	r3, [r3, #4]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <TFTLCD_Init+0x194>)
 8001a42:	809a      	strh	r2, [r3, #4]
		if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001a44:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <TFTLCD_Init+0x194>)
 8001a46:	889b      	ldrh	r3, [r3, #4]
 8001a48:	f245 3210 	movw	r2, #21264	; 0x5310
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d05f      	beq.n	8001b10 <TFTLCD_Init+0x178>
		{
			LCD_WR_REG(0XDA00);
 8001a50:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8001a54:	f7ff fa94 	bl	8000f80 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA();		//读回0X00
 8001a58:	f7ff faba 	bl	8000fd0 <LCD_RD_DATA>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <TFTLCD_Init+0x194>)
 8001a62:	809a      	strh	r2, [r3, #4]
			LCD_WR_REG(0XDB00);
 8001a64:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001a68:	f7ff fa8a 	bl	8000f80 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA();		//读回0X80
 8001a6c:	f7ff fab0 	bl	8000fd0 <LCD_RD_DATA>
 8001a70:	4603      	mov	r3, r0
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <TFTLCD_Init+0x194>)
 8001a76:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 8001a78:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <TFTLCD_Init+0x194>)
 8001a7a:	889b      	ldrh	r3, [r3, #4]
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <TFTLCD_Init+0x194>)
 8001a82:	809a      	strh	r2, [r3, #4]
			LCD_WR_REG(0XDC00);
 8001a84:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8001a88:	f7ff fa7a 	bl	8000f80 <LCD_WR_REG>
			lcddev.id|=LCD_RD_DATA();		//读回0X00
 8001a8c:	f7ff faa0 	bl	8000fd0 <LCD_RD_DATA>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <TFTLCD_Init+0x194>)
 8001a96:	889b      	ldrh	r3, [r3, #4]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <TFTLCD_Init+0x194>)
 8001a9e:	809a      	strh	r2, [r3, #4]
			if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8001aa0:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <TFTLCD_Init+0x194>)
 8001aa2:	889b      	ldrh	r3, [r3, #4]
 8001aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aa8:	d103      	bne.n	8001ab2 <TFTLCD_Init+0x11a>
 8001aaa:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <TFTLCD_Init+0x194>)
 8001aac:	f245 5210 	movw	r2, #21776	; 0x5510
 8001ab0:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <TFTLCD_Init+0x194>)
 8001ab4:	889b      	ldrh	r3, [r3, #4]
 8001ab6:	f245 5210 	movw	r2, #21776	; 0x5510
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d028      	beq.n	8001b10 <TFTLCD_Init+0x178>
			{
				LCD_WR_REG(0XA1);
 8001abe:	20a1      	movs	r0, #161	; 0xa1
 8001ac0:	f7ff fa5e 	bl	8000f80 <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();
 8001ac4:	f7ff fa84 	bl	8000fd0 <LCD_RD_DATA>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <TFTLCD_Init+0x194>)
 8001ace:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();	//读回0X57
 8001ad0:	f7ff fa7e 	bl	8000fd0 <LCD_RD_DATA>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <TFTLCD_Init+0x194>)
 8001ada:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 8001adc:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <TFTLCD_Init+0x194>)
 8001ade:	889b      	ldrh	r3, [r3, #4]
 8001ae0:	021b      	lsls	r3, r3, #8
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <TFTLCD_Init+0x194>)
 8001ae6:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//读回0X61
 8001ae8:	f7ff fa72 	bl	8000fd0 <LCD_RD_DATA>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <TFTLCD_Init+0x194>)
 8001af2:	889b      	ldrh	r3, [r3, #4]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <TFTLCD_Init+0x194>)
 8001afa:	809a      	strh	r2, [r3, #4]
				if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <TFTLCD_Init+0x194>)
 8001afe:	889b      	ldrh	r3, [r3, #4]
 8001b00:	f245 7261 	movw	r2, #22369	; 0x5761
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d103      	bne.n	8001b10 <TFTLCD_Init+0x178>
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <TFTLCD_Init+0x194>)
 8001b0a:	f641 1263 	movw	r2, #6499	; 0x1963
 8001b0e:	809a      	strh	r2, [r3, #4]
			}
		}
	}
	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <TFTLCD_Init+0x194>)
 8001b12:	889b      	ldrh	r3, [r3, #4]
 8001b14:	4619      	mov	r1, r3
 8001b16:	4806      	ldr	r0, [pc, #24]	; (8001b30 <TFTLCD_Init+0x198>)
 8001b18:	f006 fc5e 	bl	80083d8 <iprintf>
	if(lcddev.id==0X9341)	//9341初始化
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <TFTLCD_Init+0x194>)
 8001b1e:	889b      	ldrh	r3, [r3, #4]
 8001b20:	f249 3241 	movw	r2, #37697	; 0x9341
 8001b24:	4293      	cmp	r3, r2
 8001b26:	f040 811b 	bne.w	8001d60 <TFTLCD_Init+0x3c8>
 8001b2a:	e003      	b.n	8001b34 <TFTLCD_Init+0x19c>
 8001b2c:	200002f4 	.word	0x200002f4
 8001b30:	0800af38 	.word	0x0800af38
	{
		LCD_WR_REG(0xCF);
 8001b34:	20cf      	movs	r0, #207	; 0xcf
 8001b36:	f7ff fa23 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff fa34 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 8001b40:	20c1      	movs	r0, #193	; 0xc1
 8001b42:	f7ff fa31 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 8001b46:	2030      	movs	r0, #48	; 0x30
 8001b48:	f7ff fa2e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 8001b4c:	20ed      	movs	r0, #237	; 0xed
 8001b4e:	f7ff fa17 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 8001b52:	2064      	movs	r0, #100	; 0x64
 8001b54:	f7ff fa28 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f7ff fa25 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 8001b5e:	2012      	movs	r0, #18
 8001b60:	f7ff fa22 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 8001b64:	2081      	movs	r0, #129	; 0x81
 8001b66:	f7ff fa1f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 8001b6a:	20e8      	movs	r0, #232	; 0xe8
 8001b6c:	f7ff fa08 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 8001b70:	2085      	movs	r0, #133	; 0x85
 8001b72:	f7ff fa19 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8001b76:	2010      	movs	r0, #16
 8001b78:	f7ff fa16 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8001b7c:	207a      	movs	r0, #122	; 0x7a
 8001b7e:	f7ff fa13 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 8001b82:	20cb      	movs	r0, #203	; 0xcb
 8001b84:	f7ff f9fc 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 8001b88:	2039      	movs	r0, #57	; 0x39
 8001b8a:	f7ff fa0d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8001b8e:	202c      	movs	r0, #44	; 0x2c
 8001b90:	f7ff fa0a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001b94:	2000      	movs	r0, #0
 8001b96:	f7ff fa07 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8001b9a:	2034      	movs	r0, #52	; 0x34
 8001b9c:	f7ff fa04 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8001ba0:	2002      	movs	r0, #2
 8001ba2:	f7ff fa01 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 8001ba6:	20f7      	movs	r0, #247	; 0xf7
 8001ba8:	f7ff f9ea 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8001bac:	2020      	movs	r0, #32
 8001bae:	f7ff f9fb 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 8001bb2:	20ea      	movs	r0, #234	; 0xea
 8001bb4:	f7ff f9e4 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f7ff f9f5 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff f9f2 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 8001bc4:	20c0      	movs	r0, #192	; 0xc0
 8001bc6:	f7ff f9db 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001bca:	201b      	movs	r0, #27
 8001bcc:	f7ff f9ec 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 8001bd0:	20c1      	movs	r0, #193	; 0xc1
 8001bd2:	f7ff f9d5 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f7ff f9e6 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 8001bdc:	20c5      	movs	r0, #197	; 0xc5
 8001bde:	f7ff f9cf 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 8001be2:	2030      	movs	r0, #48	; 0x30
 8001be4:	f7ff f9e0 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 8001be8:	2030      	movs	r0, #48	; 0x30
 8001bea:	f7ff f9dd 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 8001bee:	20c7      	movs	r0, #199	; 0xc7
 8001bf0:	f7ff f9c6 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 8001bf4:	20b7      	movs	r0, #183	; 0xb7
 8001bf6:	f7ff f9d7 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 8001bfa:	2036      	movs	r0, #54	; 0x36
 8001bfc:	f7ff f9c0 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 8001c00:	2048      	movs	r0, #72	; 0x48
 8001c02:	f7ff f9d1 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 8001c06:	203a      	movs	r0, #58	; 0x3a
 8001c08:	f7ff f9ba 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 8001c0c:	2055      	movs	r0, #85	; 0x55
 8001c0e:	f7ff f9cb 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 8001c12:	20b1      	movs	r0, #177	; 0xb1
 8001c14:	f7ff f9b4 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7ff f9c5 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 8001c1e:	201a      	movs	r0, #26
 8001c20:	f7ff f9c2 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 8001c24:	20b6      	movs	r0, #182	; 0xb6
 8001c26:	f7ff f9ab 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8001c2a:	200a      	movs	r0, #10
 8001c2c:	f7ff f9bc 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8001c30:	20a2      	movs	r0, #162	; 0xa2
 8001c32:	f7ff f9b9 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001c36:	20f2      	movs	r0, #242	; 0xf2
 8001c38:	f7ff f9a2 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7ff f9b3 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 8001c42:	2026      	movs	r0, #38	; 0x26
 8001c44:	f7ff f99c 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f7ff f9ad 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 8001c4e:	20e0      	movs	r0, #224	; 0xe0
 8001c50:	f7ff f996 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 8001c54:	200f      	movs	r0, #15
 8001c56:	f7ff f9a7 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8001c5a:	202a      	movs	r0, #42	; 0x2a
 8001c5c:	f7ff f9a4 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 8001c60:	2028      	movs	r0, #40	; 0x28
 8001c62:	f7ff f9a1 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8001c66:	2008      	movs	r0, #8
 8001c68:	f7ff f99e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 8001c6c:	200e      	movs	r0, #14
 8001c6e:	f7ff f99b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8001c72:	2008      	movs	r0, #8
 8001c74:	f7ff f998 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8001c78:	2054      	movs	r0, #84	; 0x54
 8001c7a:	f7ff f995 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 8001c7e:	20a9      	movs	r0, #169	; 0xa9
 8001c80:	f7ff f992 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8001c84:	2043      	movs	r0, #67	; 0x43
 8001c86:	f7ff f98f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 8001c8a:	200a      	movs	r0, #10
 8001c8c:	f7ff f98c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8001c90:	200f      	movs	r0, #15
 8001c92:	f7ff f989 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f7ff f986 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff f983 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f7ff f980 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f7ff f97d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 8001cae:	20e1      	movs	r0, #225	; 0xe1
 8001cb0:	f7ff f966 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7ff f977 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 8001cba:	2015      	movs	r0, #21
 8001cbc:	f7ff f974 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8001cc0:	2017      	movs	r0, #23
 8001cc2:	f7ff f971 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 8001cc6:	2007      	movs	r0, #7
 8001cc8:	f7ff f96e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8001ccc:	2011      	movs	r0, #17
 8001cce:	f7ff f96b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 8001cd2:	2006      	movs	r0, #6
 8001cd4:	f7ff f968 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 8001cd8:	202b      	movs	r0, #43	; 0x2b
 8001cda:	f7ff f965 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8001cde:	2056      	movs	r0, #86	; 0x56
 8001ce0:	f7ff f962 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8001ce4:	203c      	movs	r0, #60	; 0x3c
 8001ce6:	f7ff f95f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8001cea:	2005      	movs	r0, #5
 8001cec:	f7ff f95c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8001cf0:	2010      	movs	r0, #16
 8001cf2:	f7ff f959 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8001cf6:	200f      	movs	r0, #15
 8001cf8:	f7ff f956 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8001cfc:	203f      	movs	r0, #63	; 0x3f
 8001cfe:	f7ff f953 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8001d02:	203f      	movs	r0, #63	; 0x3f
 8001d04:	f7ff f950 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8001d08:	200f      	movs	r0, #15
 8001d0a:	f7ff f94d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 8001d0e:	202b      	movs	r0, #43	; 0x2b
 8001d10:	f7ff f936 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff f947 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7ff f944 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8001d20:	2001      	movs	r0, #1
 8001d22:	f7ff f941 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 8001d26:	203f      	movs	r0, #63	; 0x3f
 8001d28:	f7ff f93e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 8001d2c:	202a      	movs	r0, #42	; 0x2a
 8001d2e:	f7ff f927 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7ff f938 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7ff f935 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff f932 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 8001d44:	20ef      	movs	r0, #239	; 0xef
 8001d46:	f7ff f92f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 8001d4a:	2011      	movs	r0, #17
 8001d4c:	f7ff f918 	bl	8000f80 <LCD_WR_REG>
		HAL_Delay(120);
 8001d50:	2078      	movs	r0, #120	; 0x78
 8001d52:	f003 fbab 	bl	80054ac <HAL_Delay>
		LCD_WR_REG(0x29); //display on
 8001d56:	2029      	movs	r0, #41	; 0x29
 8001d58:	f7ff f912 	bl	8000f80 <LCD_WR_REG>
 8001d5c:	f001 bfca 	b.w	8003cf4 <TFTLCD_Init+0x235c>
	}else if(lcddev.id==0x5310)
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <TFTLCD_Init+0x3d8>)
 8001d62:	889b      	ldrh	r3, [r3, #4]
 8001d64:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	f040 877c 	bne.w	8002c66 <TFTLCD_Init+0x12ce>
 8001d6e:	e001      	b.n	8001d74 <TFTLCD_Init+0x3dc>
 8001d70:	200002f4 	.word	0x200002f4
	{
		LCD_WR_REG(0xED);
 8001d74:	20ed      	movs	r0, #237	; 0xed
 8001d76:	f7ff f903 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	f7ff f914 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 8001d80:	20fe      	movs	r0, #254	; 0xfe
 8001d82:	f7ff f911 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 8001d86:	20ee      	movs	r0, #238	; 0xee
 8001d88:	f7ff f8fa 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 8001d8c:	20de      	movs	r0, #222	; 0xde
 8001d8e:	f7ff f90b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8001d92:	2021      	movs	r0, #33	; 0x21
 8001d94:	f7ff f908 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 8001d98:	20f1      	movs	r0, #241	; 0xf1
 8001d9a:	f7ff f8f1 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f7ff f902 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 8001da4:	20df      	movs	r0, #223	; 0xdf
 8001da6:	f7ff f8eb 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 8001daa:	2010      	movs	r0, #16
 8001dac:	f7ff f8fc 	bl	8000fa8 <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8001db0:	20c4      	movs	r0, #196	; 0xc4
 8001db2:	f7ff f8e5 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 8001db6:	208f      	movs	r0, #143	; 0x8f
 8001db8:	f7ff f8f6 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8001dbc:	20c6      	movs	r0, #198	; 0xc6
 8001dbe:	f7ff f8df 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7ff f8f0 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8001dc8:	20e2      	movs	r0, #226	; 0xe2
 8001dca:	f7ff f8ed 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8001dce:	20e2      	movs	r0, #226	; 0xe2
 8001dd0:	f7ff f8ea 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8001dd4:	20e2      	movs	r0, #226	; 0xe2
 8001dd6:	f7ff f8e7 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 8001dda:	20bf      	movs	r0, #191	; 0xbf
 8001ddc:	f7ff f8d0 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8001de0:	20aa      	movs	r0, #170	; 0xaa
 8001de2:	f7ff f8e1 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 8001de6:	20b0      	movs	r0, #176	; 0xb0
 8001de8:	f7ff f8ca 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 8001dec:	200d      	movs	r0, #13
 8001dee:	f7ff f8db 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001df2:	2000      	movs	r0, #0
 8001df4:	f7ff f8d8 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 8001df8:	200d      	movs	r0, #13
 8001dfa:	f7ff f8d5 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7ff f8d2 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8001e04:	2011      	movs	r0, #17
 8001e06:	f7ff f8cf 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff f8cc 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 8001e10:	2019      	movs	r0, #25
 8001e12:	f7ff f8c9 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f7ff f8c6 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8001e1c:	2021      	movs	r0, #33	; 0x21
 8001e1e:	f7ff f8c3 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7ff f8c0 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 8001e28:	202d      	movs	r0, #45	; 0x2d
 8001e2a:	f7ff f8bd 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f7ff f8ba 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 8001e34:	203d      	movs	r0, #61	; 0x3d
 8001e36:	f7ff f8b7 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f7ff f8b4 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8001e40:	205d      	movs	r0, #93	; 0x5d
 8001e42:	f7ff f8b1 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff f8ae 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8001e4c:	205d      	movs	r0, #93	; 0x5d
 8001e4e:	f7ff f8ab 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e52:	2000      	movs	r0, #0
 8001e54:	f7ff f8a8 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 8001e58:	20b1      	movs	r0, #177	; 0xb1
 8001e5a:	f7ff f891 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 8001e5e:	2080      	movs	r0, #128	; 0x80
 8001e60:	f7ff f8a2 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7ff f89f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8001e6a:	208b      	movs	r0, #139	; 0x8b
 8001e6c:	f7ff f89c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7ff f899 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8001e76:	2096      	movs	r0, #150	; 0x96
 8001e78:	f7ff f896 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7ff f893 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 8001e82:	20b2      	movs	r0, #178	; 0xb2
 8001e84:	f7ff f87c 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f7ff f88d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f7ff f88a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8001e94:	2002      	movs	r0, #2
 8001e96:	f7ff f887 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7ff f884 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f7ff f881 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7ff f87e 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 8001eac:	20b3      	movs	r0, #179	; 0xb3
 8001eae:	f7ff f867 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7ff f878 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f7ff f875 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff f872 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7ff f86f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7ff f86c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7ff f869 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f7ff f866 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7ff f863 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff f860 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7ff f85d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7ff f85a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff f857 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7ff f854 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff f851 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7ff f84e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff f84b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f12:	2000      	movs	r0, #0
 8001f14:	f7ff f848 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f7ff f845 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f7ff f842 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7ff f83f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f7ff f83c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f30:	2000      	movs	r0, #0
 8001f32:	f7ff f839 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7ff f836 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f7ff f833 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 8001f42:	20b4      	movs	r0, #180	; 0xb4
 8001f44:	f7ff f81c 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 8001f48:	208b      	movs	r0, #139	; 0x8b
 8001f4a:	f7ff f82d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7ff f82a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8001f54:	2096      	movs	r0, #150	; 0x96
 8001f56:	f7ff f827 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f7ff f824 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 8001f60:	20a1      	movs	r0, #161	; 0xa1
 8001f62:	f7ff f821 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f7ff f81e 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 8001f6c:	20b5      	movs	r0, #181	; 0xb5
 8001f6e:	f7ff f807 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 8001f72:	2002      	movs	r0, #2
 8001f74:	f7ff f818 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f7ff f815 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8001f7e:	2003      	movs	r0, #3
 8001f80:	f7ff f812 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7ff f80f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8001f8a:	2004      	movs	r0, #4
 8001f8c:	f7ff f80c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7ff f809 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 8001f96:	20b6      	movs	r0, #182	; 0xb6
 8001f98:	f7fe fff2 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff f803 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff f800 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 8001fa8:	20b7      	movs	r0, #183	; 0xb7
 8001faa:	f7fe ffe9 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f7fe fffa 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f7fe fff7 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8001fba:	203f      	movs	r0, #63	; 0x3f
 8001fbc:	f7fe fff4 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f7fe fff1 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 8001fc6:	205e      	movs	r0, #94	; 0x5e
 8001fc8:	f7fe ffee 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7fe ffeb 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8001fd2:	2064      	movs	r0, #100	; 0x64
 8001fd4:	f7fe ffe8 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7fe ffe5 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 8001fde:	208c      	movs	r0, #140	; 0x8c
 8001fe0:	f7fe ffe2 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f7fe ffdf 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 8001fea:	20ac      	movs	r0, #172	; 0xac
 8001fec:	f7fe ffdc 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7fe ffd9 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8001ff6:	20dc      	movs	r0, #220	; 0xdc
 8001ff8:	f7fe ffd6 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f7fe ffd3 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 8002002:	2070      	movs	r0, #112	; 0x70
 8002004:	f7fe ffd0 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002008:	2000      	movs	r0, #0
 800200a:	f7fe ffcd 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 800200e:	2090      	movs	r0, #144	; 0x90
 8002010:	f7fe ffca 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002014:	2000      	movs	r0, #0
 8002016:	f7fe ffc7 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 800201a:	20eb      	movs	r0, #235	; 0xeb
 800201c:	f7fe ffc4 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002020:	2000      	movs	r0, #0
 8002022:	f7fe ffc1 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002026:	20dc      	movs	r0, #220	; 0xdc
 8002028:	f7fe ffbe 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800202c:	2000      	movs	r0, #0
 800202e:	f7fe ffbb 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 8002032:	20b8      	movs	r0, #184	; 0xb8
 8002034:	f7fe ffa4 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002038:	2000      	movs	r0, #0
 800203a:	f7fe ffb5 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800203e:	2000      	movs	r0, #0
 8002040:	f7fe ffb2 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002044:	2000      	movs	r0, #0
 8002046:	f7fe ffaf 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800204a:	2000      	movs	r0, #0
 800204c:	f7fe ffac 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002050:	2000      	movs	r0, #0
 8002052:	f7fe ffa9 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002056:	2000      	movs	r0, #0
 8002058:	f7fe ffa6 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800205c:	2000      	movs	r0, #0
 800205e:	f7fe ffa3 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002062:	2000      	movs	r0, #0
 8002064:	f7fe ffa0 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 8002068:	20ba      	movs	r0, #186	; 0xba
 800206a:	f7fe ff89 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 800206e:	2024      	movs	r0, #36	; 0x24
 8002070:	f7fe ff9a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002074:	2000      	movs	r0, #0
 8002076:	f7fe ff97 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800207a:	2000      	movs	r0, #0
 800207c:	f7fe ff94 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002080:	2000      	movs	r0, #0
 8002082:	f7fe ff91 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 8002086:	20c1      	movs	r0, #193	; 0xc1
 8002088:	f7fe ff7a 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 800208c:	2020      	movs	r0, #32
 800208e:	f7fe ff8b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002092:	2000      	movs	r0, #0
 8002094:	f7fe ff88 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8002098:	2054      	movs	r0, #84	; 0x54
 800209a:	f7fe ff85 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800209e:	2000      	movs	r0, #0
 80020a0:	f7fe ff82 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 80020a4:	20ff      	movs	r0, #255	; 0xff
 80020a6:	f7fe ff7f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7fe ff7c 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 80020b0:	20c2      	movs	r0, #194	; 0xc2
 80020b2:	f7fe ff65 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 80020b6:	200a      	movs	r0, #10
 80020b8:	f7fe ff76 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020bc:	2000      	movs	r0, #0
 80020be:	f7fe ff73 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 80020c2:	2004      	movs	r0, #4
 80020c4:	f7fe ff70 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020c8:	2000      	movs	r0, #0
 80020ca:	f7fe ff6d 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 80020ce:	20c3      	movs	r0, #195	; 0xc3
 80020d0:	f7fe ff56 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 80020d4:	203c      	movs	r0, #60	; 0x3c
 80020d6:	f7fe ff67 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020da:	2000      	movs	r0, #0
 80020dc:	f7fe ff64 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 80020e0:	203a      	movs	r0, #58	; 0x3a
 80020e2:	f7fe ff61 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020e6:	2000      	movs	r0, #0
 80020e8:	f7fe ff5e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 80020ec:	2039      	movs	r0, #57	; 0x39
 80020ee:	f7fe ff5b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020f2:	2000      	movs	r0, #0
 80020f4:	f7fe ff58 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 80020f8:	2037      	movs	r0, #55	; 0x37
 80020fa:	f7fe ff55 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020fe:	2000      	movs	r0, #0
 8002100:	f7fe ff52 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002104:	203c      	movs	r0, #60	; 0x3c
 8002106:	f7fe ff4f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800210a:	2000      	movs	r0, #0
 800210c:	f7fe ff4c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002110:	2036      	movs	r0, #54	; 0x36
 8002112:	f7fe ff49 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002116:	2000      	movs	r0, #0
 8002118:	f7fe ff46 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 800211c:	2032      	movs	r0, #50	; 0x32
 800211e:	f7fe ff43 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002122:	2000      	movs	r0, #0
 8002124:	f7fe ff40 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8002128:	202f      	movs	r0, #47	; 0x2f
 800212a:	f7fe ff3d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800212e:	2000      	movs	r0, #0
 8002130:	f7fe ff3a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002134:	202c      	movs	r0, #44	; 0x2c
 8002136:	f7fe ff37 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800213a:	2000      	movs	r0, #0
 800213c:	f7fe ff34 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002140:	2029      	movs	r0, #41	; 0x29
 8002142:	f7fe ff31 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002146:	2000      	movs	r0, #0
 8002148:	f7fe ff2e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 800214c:	2026      	movs	r0, #38	; 0x26
 800214e:	f7fe ff2b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002152:	2000      	movs	r0, #0
 8002154:	f7fe ff28 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002158:	2024      	movs	r0, #36	; 0x24
 800215a:	f7fe ff25 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800215e:	2000      	movs	r0, #0
 8002160:	f7fe ff22 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002164:	2024      	movs	r0, #36	; 0x24
 8002166:	f7fe ff1f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800216a:	2000      	movs	r0, #0
 800216c:	f7fe ff1c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002170:	2023      	movs	r0, #35	; 0x23
 8002172:	f7fe ff19 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002176:	2000      	movs	r0, #0
 8002178:	f7fe ff16 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 800217c:	203c      	movs	r0, #60	; 0x3c
 800217e:	f7fe ff13 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002182:	2000      	movs	r0, #0
 8002184:	f7fe ff10 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002188:	2036      	movs	r0, #54	; 0x36
 800218a:	f7fe ff0d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800218e:	2000      	movs	r0, #0
 8002190:	f7fe ff0a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8002194:	2032      	movs	r0, #50	; 0x32
 8002196:	f7fe ff07 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800219a:	2000      	movs	r0, #0
 800219c:	f7fe ff04 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 80021a0:	202f      	movs	r0, #47	; 0x2f
 80021a2:	f7fe ff01 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021a6:	2000      	movs	r0, #0
 80021a8:	f7fe fefe 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 80021ac:	202c      	movs	r0, #44	; 0x2c
 80021ae:	f7fe fefb 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021b2:	2000      	movs	r0, #0
 80021b4:	f7fe fef8 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 80021b8:	2029      	movs	r0, #41	; 0x29
 80021ba:	f7fe fef5 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021be:	2000      	movs	r0, #0
 80021c0:	f7fe fef2 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 80021c4:	2026      	movs	r0, #38	; 0x26
 80021c6:	f7fe feef 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f7fe feec 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 80021d0:	2024      	movs	r0, #36	; 0x24
 80021d2:	f7fe fee9 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7fe fee6 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 80021dc:	2024      	movs	r0, #36	; 0x24
 80021de:	f7fe fee3 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7fe fee0 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 80021e8:	2023      	movs	r0, #35	; 0x23
 80021ea:	f7fe fedd 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021ee:	2000      	movs	r0, #0
 80021f0:	f7fe feda 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 80021f4:	20c4      	movs	r0, #196	; 0xc4
 80021f6:	f7fe fec3 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 80021fa:	2062      	movs	r0, #98	; 0x62
 80021fc:	f7fe fed4 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002200:	2000      	movs	r0, #0
 8002202:	f7fe fed1 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8002206:	2005      	movs	r0, #5
 8002208:	f7fe fece 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800220c:	2000      	movs	r0, #0
 800220e:	f7fe fecb 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002212:	2084      	movs	r0, #132	; 0x84
 8002214:	f7fe fec8 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002218:	2000      	movs	r0, #0
 800221a:	f7fe fec5 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 800221e:	20f0      	movs	r0, #240	; 0xf0
 8002220:	f7fe fec2 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002224:	2000      	movs	r0, #0
 8002226:	f7fe febf 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 800222a:	2018      	movs	r0, #24
 800222c:	f7fe febc 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002230:	2000      	movs	r0, #0
 8002232:	f7fe feb9 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 8002236:	20a4      	movs	r0, #164	; 0xa4
 8002238:	f7fe feb6 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800223c:	2000      	movs	r0, #0
 800223e:	f7fe feb3 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8002242:	2018      	movs	r0, #24
 8002244:	f7fe feb0 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002248:	2000      	movs	r0, #0
 800224a:	f7fe fead 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 800224e:	2050      	movs	r0, #80	; 0x50
 8002250:	f7fe feaa 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002254:	2000      	movs	r0, #0
 8002256:	f7fe fea7 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 800225a:	200c      	movs	r0, #12
 800225c:	f7fe fea4 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002260:	2000      	movs	r0, #0
 8002262:	f7fe fea1 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8002266:	2017      	movs	r0, #23
 8002268:	f7fe fe9e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800226c:	2000      	movs	r0, #0
 800226e:	f7fe fe9b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 8002272:	2095      	movs	r0, #149	; 0x95
 8002274:	f7fe fe98 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002278:	2000      	movs	r0, #0
 800227a:	f7fe fe95 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800227e:	20f3      	movs	r0, #243	; 0xf3
 8002280:	f7fe fe92 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002284:	2000      	movs	r0, #0
 8002286:	f7fe fe8f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 800228a:	20e6      	movs	r0, #230	; 0xe6
 800228c:	f7fe fe8c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002290:	2000      	movs	r0, #0
 8002292:	f7fe fe89 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 8002296:	20c5      	movs	r0, #197	; 0xc5
 8002298:	f7fe fe72 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 800229c:	2032      	movs	r0, #50	; 0x32
 800229e:	f7fe fe83 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022a2:	2000      	movs	r0, #0
 80022a4:	f7fe fe80 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80022a8:	2044      	movs	r0, #68	; 0x44
 80022aa:	f7fe fe7d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ae:	2000      	movs	r0, #0
 80022b0:	f7fe fe7a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 80022b4:	2065      	movs	r0, #101	; 0x65
 80022b6:	f7fe fe77 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ba:	2000      	movs	r0, #0
 80022bc:	f7fe fe74 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80022c0:	2076      	movs	r0, #118	; 0x76
 80022c2:	f7fe fe71 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022c6:	2000      	movs	r0, #0
 80022c8:	f7fe fe6e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80022cc:	2088      	movs	r0, #136	; 0x88
 80022ce:	f7fe fe6b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022d2:	2000      	movs	r0, #0
 80022d4:	f7fe fe68 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 80022d8:	20c6      	movs	r0, #198	; 0xc6
 80022da:	f7fe fe51 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 80022de:	2020      	movs	r0, #32
 80022e0:	f7fe fe62 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7fe fe5f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 80022ea:	2017      	movs	r0, #23
 80022ec:	f7fe fe5c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022f0:	2000      	movs	r0, #0
 80022f2:	f7fe fe59 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 80022f6:	2001      	movs	r0, #1
 80022f8:	f7fe fe56 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022fc:	2000      	movs	r0, #0
 80022fe:	f7fe fe53 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 8002302:	20c7      	movs	r0, #199	; 0xc7
 8002304:	f7fe fe3c 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002308:	2000      	movs	r0, #0
 800230a:	f7fe fe4d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800230e:	2000      	movs	r0, #0
 8002310:	f7fe fe4a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002314:	2000      	movs	r0, #0
 8002316:	f7fe fe47 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800231a:	2000      	movs	r0, #0
 800231c:	f7fe fe44 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8002320:	20c8      	movs	r0, #200	; 0xc8
 8002322:	f7fe fe2d 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002326:	2000      	movs	r0, #0
 8002328:	f7fe fe3e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800232c:	2000      	movs	r0, #0
 800232e:	f7fe fe3b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002332:	2000      	movs	r0, #0
 8002334:	f7fe fe38 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002338:	2000      	movs	r0, #0
 800233a:	f7fe fe35 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 800233e:	20c9      	movs	r0, #201	; 0xc9
 8002340:	f7fe fe1e 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002344:	2000      	movs	r0, #0
 8002346:	f7fe fe2f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800234a:	2000      	movs	r0, #0
 800234c:	f7fe fe2c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002350:	2000      	movs	r0, #0
 8002352:	f7fe fe29 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002356:	2000      	movs	r0, #0
 8002358:	f7fe fe26 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800235c:	2000      	movs	r0, #0
 800235e:	f7fe fe23 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002362:	2000      	movs	r0, #0
 8002364:	f7fe fe20 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002368:	2000      	movs	r0, #0
 800236a:	f7fe fe1d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800236e:	2000      	movs	r0, #0
 8002370:	f7fe fe1a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002374:	2000      	movs	r0, #0
 8002376:	f7fe fe17 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800237a:	2000      	movs	r0, #0
 800237c:	f7fe fe14 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002380:	2000      	movs	r0, #0
 8002382:	f7fe fe11 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002386:	2000      	movs	r0, #0
 8002388:	f7fe fe0e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800238c:	2000      	movs	r0, #0
 800238e:	f7fe fe0b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002392:	2000      	movs	r0, #0
 8002394:	f7fe fe08 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002398:	2000      	movs	r0, #0
 800239a:	f7fe fe05 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800239e:	2000      	movs	r0, #0
 80023a0:	f7fe fe02 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 80023a4:	20e0      	movs	r0, #224	; 0xe0
 80023a6:	f7fe fdeb 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 80023aa:	2016      	movs	r0, #22
 80023ac:	f7fe fdfc 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7fe fdf9 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80023b6:	201c      	movs	r0, #28
 80023b8:	f7fe fdf6 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023bc:	2000      	movs	r0, #0
 80023be:	f7fe fdf3 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 80023c2:	2021      	movs	r0, #33	; 0x21
 80023c4:	f7fe fdf0 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023c8:	2000      	movs	r0, #0
 80023ca:	f7fe fded 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80023ce:	2036      	movs	r0, #54	; 0x36
 80023d0:	f7fe fdea 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7fe fde7 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 80023da:	2046      	movs	r0, #70	; 0x46
 80023dc:	f7fe fde4 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7fe fde1 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80023e6:	2052      	movs	r0, #82	; 0x52
 80023e8:	f7fe fdde 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023ec:	2000      	movs	r0, #0
 80023ee:	f7fe fddb 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 80023f2:	2064      	movs	r0, #100	; 0x64
 80023f4:	f7fe fdd8 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023f8:	2000      	movs	r0, #0
 80023fa:	f7fe fdd5 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 80023fe:	207a      	movs	r0, #122	; 0x7a
 8002400:	f7fe fdd2 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002404:	2000      	movs	r0, #0
 8002406:	f7fe fdcf 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 800240a:	208b      	movs	r0, #139	; 0x8b
 800240c:	f7fe fdcc 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002410:	2000      	movs	r0, #0
 8002412:	f7fe fdc9 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002416:	2099      	movs	r0, #153	; 0x99
 8002418:	f7fe fdc6 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800241c:	2000      	movs	r0, #0
 800241e:	f7fe fdc3 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002422:	20a8      	movs	r0, #168	; 0xa8
 8002424:	f7fe fdc0 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002428:	2000      	movs	r0, #0
 800242a:	f7fe fdbd 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 800242e:	20b9      	movs	r0, #185	; 0xb9
 8002430:	f7fe fdba 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002434:	2000      	movs	r0, #0
 8002436:	f7fe fdb7 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800243a:	20c4      	movs	r0, #196	; 0xc4
 800243c:	f7fe fdb4 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002440:	2000      	movs	r0, #0
 8002442:	f7fe fdb1 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8002446:	20ca      	movs	r0, #202	; 0xca
 8002448:	f7fe fdae 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800244c:	2000      	movs	r0, #0
 800244e:	f7fe fdab 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002452:	20d2      	movs	r0, #210	; 0xd2
 8002454:	f7fe fda8 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002458:	2000      	movs	r0, #0
 800245a:	f7fe fda5 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 800245e:	20d9      	movs	r0, #217	; 0xd9
 8002460:	f7fe fda2 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002464:	2000      	movs	r0, #0
 8002466:	f7fe fd9f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 800246a:	20e0      	movs	r0, #224	; 0xe0
 800246c:	f7fe fd9c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002470:	2000      	movs	r0, #0
 8002472:	f7fe fd99 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002476:	20f3      	movs	r0, #243	; 0xf3
 8002478:	f7fe fd96 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800247c:	2000      	movs	r0, #0
 800247e:	f7fe fd93 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 8002482:	20e1      	movs	r0, #225	; 0xe1
 8002484:	f7fe fd7c 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8002488:	2016      	movs	r0, #22
 800248a:	f7fe fd8d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800248e:	2000      	movs	r0, #0
 8002490:	f7fe fd8a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8002494:	201c      	movs	r0, #28
 8002496:	f7fe fd87 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800249a:	2000      	movs	r0, #0
 800249c:	f7fe fd84 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 80024a0:	2022      	movs	r0, #34	; 0x22
 80024a2:	f7fe fd81 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7fe fd7e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80024ac:	2036      	movs	r0, #54	; 0x36
 80024ae:	f7fe fd7b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024b2:	2000      	movs	r0, #0
 80024b4:	f7fe fd78 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80024b8:	2045      	movs	r0, #69	; 0x45
 80024ba:	f7fe fd75 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024be:	2000      	movs	r0, #0
 80024c0:	f7fe fd72 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80024c4:	2052      	movs	r0, #82	; 0x52
 80024c6:	f7fe fd6f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024ca:	2000      	movs	r0, #0
 80024cc:	f7fe fd6c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 80024d0:	2064      	movs	r0, #100	; 0x64
 80024d2:	f7fe fd69 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f7fe fd66 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 80024dc:	207a      	movs	r0, #122	; 0x7a
 80024de:	f7fe fd63 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024e2:	2000      	movs	r0, #0
 80024e4:	f7fe fd60 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 80024e8:	208b      	movs	r0, #139	; 0x8b
 80024ea:	f7fe fd5d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024ee:	2000      	movs	r0, #0
 80024f0:	f7fe fd5a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80024f4:	2099      	movs	r0, #153	; 0x99
 80024f6:	f7fe fd57 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024fa:	2000      	movs	r0, #0
 80024fc:	f7fe fd54 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002500:	20a8      	movs	r0, #168	; 0xa8
 8002502:	f7fe fd51 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002506:	2000      	movs	r0, #0
 8002508:	f7fe fd4e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 800250c:	20b9      	movs	r0, #185	; 0xb9
 800250e:	f7fe fd4b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002512:	2000      	movs	r0, #0
 8002514:	f7fe fd48 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002518:	20c4      	movs	r0, #196	; 0xc4
 800251a:	f7fe fd45 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800251e:	2000      	movs	r0, #0
 8002520:	f7fe fd42 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8002524:	20ca      	movs	r0, #202	; 0xca
 8002526:	f7fe fd3f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800252a:	2000      	movs	r0, #0
 800252c:	f7fe fd3c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002530:	20d2      	movs	r0, #210	; 0xd2
 8002532:	f7fe fd39 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002536:	2000      	movs	r0, #0
 8002538:	f7fe fd36 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 800253c:	20d8      	movs	r0, #216	; 0xd8
 800253e:	f7fe fd33 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002542:	2000      	movs	r0, #0
 8002544:	f7fe fd30 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8002548:	20e0      	movs	r0, #224	; 0xe0
 800254a:	f7fe fd2d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800254e:	2000      	movs	r0, #0
 8002550:	f7fe fd2a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002554:	20f3      	movs	r0, #243	; 0xf3
 8002556:	f7fe fd27 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800255a:	2000      	movs	r0, #0
 800255c:	f7fe fd24 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 8002560:	20e2      	movs	r0, #226	; 0xe2
 8002562:	f7fe fd0d 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8002566:	2005      	movs	r0, #5
 8002568:	f7fe fd1e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800256c:	2000      	movs	r0, #0
 800256e:	f7fe fd1b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 8002572:	200b      	movs	r0, #11
 8002574:	f7fe fd18 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002578:	2000      	movs	r0, #0
 800257a:	f7fe fd15 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 800257e:	201b      	movs	r0, #27
 8002580:	f7fe fd12 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002584:	2000      	movs	r0, #0
 8002586:	f7fe fd0f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 800258a:	2034      	movs	r0, #52	; 0x34
 800258c:	f7fe fd0c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002590:	2000      	movs	r0, #0
 8002592:	f7fe fd09 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002596:	2044      	movs	r0, #68	; 0x44
 8002598:	f7fe fd06 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800259c:	2000      	movs	r0, #0
 800259e:	f7fe fd03 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 80025a2:	204f      	movs	r0, #79	; 0x4f
 80025a4:	f7fe fd00 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7fe fcfd 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 80025ae:	2061      	movs	r0, #97	; 0x61
 80025b0:	f7fe fcfa 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7fe fcf7 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 80025ba:	2079      	movs	r0, #121	; 0x79
 80025bc:	f7fe fcf4 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025c0:	2000      	movs	r0, #0
 80025c2:	f7fe fcf1 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80025c6:	2088      	movs	r0, #136	; 0x88
 80025c8:	f7fe fcee 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7fe fceb 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 80025d2:	2097      	movs	r0, #151	; 0x97
 80025d4:	f7fe fce8 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025d8:	2000      	movs	r0, #0
 80025da:	f7fe fce5 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 80025de:	20a6      	movs	r0, #166	; 0xa6
 80025e0:	f7fe fce2 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025e4:	2000      	movs	r0, #0
 80025e6:	f7fe fcdf 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 80025ea:	20b7      	movs	r0, #183	; 0xb7
 80025ec:	f7fe fcdc 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025f0:	2000      	movs	r0, #0
 80025f2:	f7fe fcd9 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 80025f6:	20c2      	movs	r0, #194	; 0xc2
 80025f8:	f7fe fcd6 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025fc:	2000      	movs	r0, #0
 80025fe:	f7fe fcd3 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8002602:	20c7      	movs	r0, #199	; 0xc7
 8002604:	f7fe fcd0 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002608:	2000      	movs	r0, #0
 800260a:	f7fe fccd 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 800260e:	20d1      	movs	r0, #209	; 0xd1
 8002610:	f7fe fcca 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002614:	2000      	movs	r0, #0
 8002616:	f7fe fcc7 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 800261a:	20d6      	movs	r0, #214	; 0xd6
 800261c:	f7fe fcc4 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002620:	2000      	movs	r0, #0
 8002622:	f7fe fcc1 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002626:	20dd      	movs	r0, #221	; 0xdd
 8002628:	f7fe fcbe 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800262c:	2000      	movs	r0, #0
 800262e:	f7fe fcbb 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002632:	20f3      	movs	r0, #243	; 0xf3
 8002634:	f7fe fcb8 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002638:	2000      	movs	r0, #0
 800263a:	f7fe fcb5 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 800263e:	20e3      	movs	r0, #227	; 0xe3
 8002640:	f7fe fc9e 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8002644:	2005      	movs	r0, #5
 8002646:	f7fe fcaf 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800264a:	2000      	movs	r0, #0
 800264c:	f7fe fcac 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 8002650:	200a      	movs	r0, #10
 8002652:	f7fe fca9 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002656:	2000      	movs	r0, #0
 8002658:	f7fe fca6 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 800265c:	201c      	movs	r0, #28
 800265e:	f7fe fca3 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002662:	2000      	movs	r0, #0
 8002664:	f7fe fca0 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002668:	2033      	movs	r0, #51	; 0x33
 800266a:	f7fe fc9d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800266e:	2000      	movs	r0, #0
 8002670:	f7fe fc9a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002674:	2044      	movs	r0, #68	; 0x44
 8002676:	f7fe fc97 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800267a:	2000      	movs	r0, #0
 800267c:	f7fe fc94 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002680:	2050      	movs	r0, #80	; 0x50
 8002682:	f7fe fc91 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002686:	2000      	movs	r0, #0
 8002688:	f7fe fc8e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 800268c:	2062      	movs	r0, #98	; 0x62
 800268e:	f7fe fc8b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002692:	2000      	movs	r0, #0
 8002694:	f7fe fc88 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 8002698:	2078      	movs	r0, #120	; 0x78
 800269a:	f7fe fc85 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800269e:	2000      	movs	r0, #0
 80026a0:	f7fe fc82 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80026a4:	2088      	movs	r0, #136	; 0x88
 80026a6:	f7fe fc7f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026aa:	2000      	movs	r0, #0
 80026ac:	f7fe fc7c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 80026b0:	2097      	movs	r0, #151	; 0x97
 80026b2:	f7fe fc79 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026b6:	2000      	movs	r0, #0
 80026b8:	f7fe fc76 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 80026bc:	20a6      	movs	r0, #166	; 0xa6
 80026be:	f7fe fc73 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7fe fc70 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 80026c8:	20b7      	movs	r0, #183	; 0xb7
 80026ca:	f7fe fc6d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7fe fc6a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 80026d4:	20c2      	movs	r0, #194	; 0xc2
 80026d6:	f7fe fc67 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026da:	2000      	movs	r0, #0
 80026dc:	f7fe fc64 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 80026e0:	20c7      	movs	r0, #199	; 0xc7
 80026e2:	f7fe fc61 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7fe fc5e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 80026ec:	20d1      	movs	r0, #209	; 0xd1
 80026ee:	f7fe fc5b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026f2:	2000      	movs	r0, #0
 80026f4:	f7fe fc58 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 80026f8:	20d5      	movs	r0, #213	; 0xd5
 80026fa:	f7fe fc55 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026fe:	2000      	movs	r0, #0
 8002700:	f7fe fc52 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002704:	20dd      	movs	r0, #221	; 0xdd
 8002706:	f7fe fc4f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800270a:	2000      	movs	r0, #0
 800270c:	f7fe fc4c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002710:	20f3      	movs	r0, #243	; 0xf3
 8002712:	f7fe fc49 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002716:	2000      	movs	r0, #0
 8002718:	f7fe fc46 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 800271c:	20e4      	movs	r0, #228	; 0xe4
 800271e:	f7fe fc2f 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002722:	2001      	movs	r0, #1
 8002724:	f7fe fc40 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002728:	2000      	movs	r0, #0
 800272a:	f7fe fc3d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 800272e:	2001      	movs	r0, #1
 8002730:	f7fe fc3a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002734:	2000      	movs	r0, #0
 8002736:	f7fe fc37 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800273a:	2002      	movs	r0, #2
 800273c:	f7fe fc34 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002740:	2000      	movs	r0, #0
 8002742:	f7fe fc31 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8002746:	202a      	movs	r0, #42	; 0x2a
 8002748:	f7fe fc2e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800274c:	2000      	movs	r0, #0
 800274e:	f7fe fc2b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002752:	203c      	movs	r0, #60	; 0x3c
 8002754:	f7fe fc28 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002758:	2000      	movs	r0, #0
 800275a:	f7fe fc25 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 800275e:	204b      	movs	r0, #75	; 0x4b
 8002760:	f7fe fc22 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002764:	2000      	movs	r0, #0
 8002766:	f7fe fc1f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 800276a:	205d      	movs	r0, #93	; 0x5d
 800276c:	f7fe fc1c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002770:	2000      	movs	r0, #0
 8002772:	f7fe fc19 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8002776:	2074      	movs	r0, #116	; 0x74
 8002778:	f7fe fc16 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800277c:	2000      	movs	r0, #0
 800277e:	f7fe fc13 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002782:	2084      	movs	r0, #132	; 0x84
 8002784:	f7fe fc10 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002788:	2000      	movs	r0, #0
 800278a:	f7fe fc0d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 800278e:	2093      	movs	r0, #147	; 0x93
 8002790:	f7fe fc0a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002794:	2000      	movs	r0, #0
 8002796:	f7fe fc07 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 800279a:	20a2      	movs	r0, #162	; 0xa2
 800279c:	f7fe fc04 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7fe fc01 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 80027a6:	20b3      	movs	r0, #179	; 0xb3
 80027a8:	f7fe fbfe 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027ac:	2000      	movs	r0, #0
 80027ae:	f7fe fbfb 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 80027b2:	20be      	movs	r0, #190	; 0xbe
 80027b4:	f7fe fbf8 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7fe fbf5 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 80027be:	20c4      	movs	r0, #196	; 0xc4
 80027c0:	f7fe fbf2 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7fe fbef 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 80027ca:	20cd      	movs	r0, #205	; 0xcd
 80027cc:	f7fe fbec 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027d0:	2000      	movs	r0, #0
 80027d2:	f7fe fbe9 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 80027d6:	20d3      	movs	r0, #211	; 0xd3
 80027d8:	f7fe fbe6 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027dc:	2000      	movs	r0, #0
 80027de:	f7fe fbe3 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 80027e2:	20dd      	movs	r0, #221	; 0xdd
 80027e4:	f7fe fbe0 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7fe fbdd 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80027ee:	20f3      	movs	r0, #243	; 0xf3
 80027f0:	f7fe fbda 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7fe fbd7 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 80027fa:	20e5      	movs	r0, #229	; 0xe5
 80027fc:	f7fe fbc0 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe fbd1 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002806:	2000      	movs	r0, #0
 8002808:	f7fe fbce 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800280c:	2000      	movs	r0, #0
 800280e:	f7fe fbcb 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002812:	2000      	movs	r0, #0
 8002814:	f7fe fbc8 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002818:	2002      	movs	r0, #2
 800281a:	f7fe fbc5 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800281e:	2000      	movs	r0, #0
 8002820:	f7fe fbc2 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002824:	2029      	movs	r0, #41	; 0x29
 8002826:	f7fe fbbf 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800282a:	2000      	movs	r0, #0
 800282c:	f7fe fbbc 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002830:	203c      	movs	r0, #60	; 0x3c
 8002832:	f7fe fbb9 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002836:	2000      	movs	r0, #0
 8002838:	f7fe fbb6 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 800283c:	204b      	movs	r0, #75	; 0x4b
 800283e:	f7fe fbb3 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002842:	2000      	movs	r0, #0
 8002844:	f7fe fbb0 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002848:	205d      	movs	r0, #93	; 0x5d
 800284a:	f7fe fbad 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800284e:	2000      	movs	r0, #0
 8002850:	f7fe fbaa 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8002854:	2074      	movs	r0, #116	; 0x74
 8002856:	f7fe fba7 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800285a:	2000      	movs	r0, #0
 800285c:	f7fe fba4 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002860:	2084      	movs	r0, #132	; 0x84
 8002862:	f7fe fba1 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002866:	2000      	movs	r0, #0
 8002868:	f7fe fb9e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 800286c:	2093      	movs	r0, #147	; 0x93
 800286e:	f7fe fb9b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002872:	2000      	movs	r0, #0
 8002874:	f7fe fb98 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002878:	20a2      	movs	r0, #162	; 0xa2
 800287a:	f7fe fb95 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800287e:	2000      	movs	r0, #0
 8002880:	f7fe fb92 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8002884:	20b3      	movs	r0, #179	; 0xb3
 8002886:	f7fe fb8f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800288a:	2000      	movs	r0, #0
 800288c:	f7fe fb8c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8002890:	20be      	movs	r0, #190	; 0xbe
 8002892:	f7fe fb89 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002896:	2000      	movs	r0, #0
 8002898:	f7fe fb86 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800289c:	20c4      	movs	r0, #196	; 0xc4
 800289e:	f7fe fb83 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7fe fb80 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 80028a8:	20cd      	movs	r0, #205	; 0xcd
 80028aa:	f7fe fb7d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7fe fb7a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 80028b4:	20d3      	movs	r0, #211	; 0xd3
 80028b6:	f7fe fb77 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7fe fb74 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 80028c0:	20dc      	movs	r0, #220	; 0xdc
 80028c2:	f7fe fb71 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f7fe fb6e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80028cc:	20f3      	movs	r0, #243	; 0xf3
 80028ce:	f7fe fb6b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7fe fb68 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 80028d8:	20e6      	movs	r0, #230	; 0xe6
 80028da:	f7fe fb51 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 80028de:	2011      	movs	r0, #17
 80028e0:	f7fe fb62 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028e4:	2000      	movs	r0, #0
 80028e6:	f7fe fb5f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 80028ea:	2034      	movs	r0, #52	; 0x34
 80028ec:	f7fe fb5c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028f0:	2000      	movs	r0, #0
 80028f2:	f7fe fb59 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 80028f6:	2056      	movs	r0, #86	; 0x56
 80028f8:	f7fe fb56 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028fc:	2000      	movs	r0, #0
 80028fe:	f7fe fb53 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002902:	2076      	movs	r0, #118	; 0x76
 8002904:	f7fe fb50 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002908:	2000      	movs	r0, #0
 800290a:	f7fe fb4d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 800290e:	2077      	movs	r0, #119	; 0x77
 8002910:	f7fe fb4a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002914:	2000      	movs	r0, #0
 8002916:	f7fe fb47 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800291a:	2066      	movs	r0, #102	; 0x66
 800291c:	f7fe fb44 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002920:	2000      	movs	r0, #0
 8002922:	f7fe fb41 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002926:	2088      	movs	r0, #136	; 0x88
 8002928:	f7fe fb3e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800292c:	2000      	movs	r0, #0
 800292e:	f7fe fb3b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002932:	2099      	movs	r0, #153	; 0x99
 8002934:	f7fe fb38 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002938:	2000      	movs	r0, #0
 800293a:	f7fe fb35 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 800293e:	20bb      	movs	r0, #187	; 0xbb
 8002940:	f7fe fb32 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002944:	2000      	movs	r0, #0
 8002946:	f7fe fb2f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800294a:	2099      	movs	r0, #153	; 0x99
 800294c:	f7fe fb2c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002950:	2000      	movs	r0, #0
 8002952:	f7fe fb29 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002956:	2066      	movs	r0, #102	; 0x66
 8002958:	f7fe fb26 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800295c:	2000      	movs	r0, #0
 800295e:	f7fe fb23 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002962:	2055      	movs	r0, #85	; 0x55
 8002964:	f7fe fb20 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002968:	2000      	movs	r0, #0
 800296a:	f7fe fb1d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800296e:	2055      	movs	r0, #85	; 0x55
 8002970:	f7fe fb1a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002974:	2000      	movs	r0, #0
 8002976:	f7fe fb17 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 800297a:	2045      	movs	r0, #69	; 0x45
 800297c:	f7fe fb14 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002980:	2000      	movs	r0, #0
 8002982:	f7fe fb11 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8002986:	2043      	movs	r0, #67	; 0x43
 8002988:	f7fe fb0e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800298c:	2000      	movs	r0, #0
 800298e:	f7fe fb0b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002992:	2044      	movs	r0, #68	; 0x44
 8002994:	f7fe fb08 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002998:	2000      	movs	r0, #0
 800299a:	f7fe fb05 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 800299e:	20e7      	movs	r0, #231	; 0xe7
 80029a0:	f7fe faee 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 80029a4:	2032      	movs	r0, #50	; 0x32
 80029a6:	f7fe faff 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029aa:	2000      	movs	r0, #0
 80029ac:	f7fe fafc 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80029b0:	2055      	movs	r0, #85	; 0x55
 80029b2:	f7fe faf9 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7fe faf6 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80029bc:	2076      	movs	r0, #118	; 0x76
 80029be:	f7fe faf3 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7fe faf0 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80029c8:	2066      	movs	r0, #102	; 0x66
 80029ca:	f7fe faed 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029ce:	2000      	movs	r0, #0
 80029d0:	f7fe faea 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 80029d4:	2067      	movs	r0, #103	; 0x67
 80029d6:	f7fe fae7 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029da:	2000      	movs	r0, #0
 80029dc:	f7fe fae4 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 80029e0:	2067      	movs	r0, #103	; 0x67
 80029e2:	f7fe fae1 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7fe fade 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 80029ec:	2087      	movs	r0, #135	; 0x87
 80029ee:	f7fe fadb 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7fe fad8 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80029f8:	2099      	movs	r0, #153	; 0x99
 80029fa:	f7fe fad5 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029fe:	2000      	movs	r0, #0
 8002a00:	f7fe fad2 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002a04:	20bb      	movs	r0, #187	; 0xbb
 8002a06:	f7fe facf 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f7fe facc 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002a10:	2099      	movs	r0, #153	; 0x99
 8002a12:	f7fe fac9 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a16:	2000      	movs	r0, #0
 8002a18:	f7fe fac6 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002a1c:	2077      	movs	r0, #119	; 0x77
 8002a1e:	f7fe fac3 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a22:	2000      	movs	r0, #0
 8002a24:	f7fe fac0 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002a28:	2044      	movs	r0, #68	; 0x44
 8002a2a:	f7fe fabd 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7fe faba 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002a34:	2056      	movs	r0, #86	; 0x56
 8002a36:	f7fe fab7 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f7fe fab4 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002a40:	2023      	movs	r0, #35	; 0x23
 8002a42:	f7fe fab1 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a46:	2000      	movs	r0, #0
 8002a48:	f7fe faae 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002a4c:	2033      	movs	r0, #51	; 0x33
 8002a4e:	f7fe faab 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a52:	2000      	movs	r0, #0
 8002a54:	f7fe faa8 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8002a58:	2045      	movs	r0, #69	; 0x45
 8002a5a:	f7fe faa5 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f7fe faa2 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 8002a64:	20e8      	movs	r0, #232	; 0xe8
 8002a66:	f7fe fa8b 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f7fe fa9c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f7fe fa99 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002a76:	2099      	movs	r0, #153	; 0x99
 8002a78:	f7fe fa96 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f7fe fa93 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8002a82:	2087      	movs	r0, #135	; 0x87
 8002a84:	f7fe fa90 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f7fe fa8d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002a8e:	2088      	movs	r0, #136	; 0x88
 8002a90:	f7fe fa8a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a94:	2000      	movs	r0, #0
 8002a96:	f7fe fa87 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002a9a:	2077      	movs	r0, #119	; 0x77
 8002a9c:	f7fe fa84 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f7fe fa81 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002aa6:	2066      	movs	r0, #102	; 0x66
 8002aa8:	f7fe fa7e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7fe fa7b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002ab2:	2088      	movs	r0, #136	; 0x88
 8002ab4:	f7fe fa78 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f7fe fa75 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 8002abe:	20aa      	movs	r0, #170	; 0xaa
 8002ac0:	f7fe fa72 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f7fe fa6f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002aca:	20bb      	movs	r0, #187	; 0xbb
 8002acc:	f7fe fa6c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f7fe fa69 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002ad6:	2099      	movs	r0, #153	; 0x99
 8002ad8:	f7fe fa66 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002adc:	2000      	movs	r0, #0
 8002ade:	f7fe fa63 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002ae2:	2066      	movs	r0, #102	; 0x66
 8002ae4:	f7fe fa60 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f7fe fa5d 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002aee:	2055      	movs	r0, #85	; 0x55
 8002af0:	f7fe fa5a 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7fe fa57 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002afa:	2055      	movs	r0, #85	; 0x55
 8002afc:	f7fe fa54 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7fe fa51 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002b06:	2044      	movs	r0, #68	; 0x44
 8002b08:	f7fe fa4e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f7fe fa4b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002b12:	2044      	movs	r0, #68	; 0x44
 8002b14:	f7fe fa48 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7fe fa45 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002b1e:	2055      	movs	r0, #85	; 0x55
 8002b20:	f7fe fa42 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b24:	2000      	movs	r0, #0
 8002b26:	f7fe fa3f 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 8002b2a:	20e9      	movs	r0, #233	; 0xe9
 8002b2c:	f7fe fa28 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002b30:	20aa      	movs	r0, #170	; 0xaa
 8002b32:	f7fe fa39 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7fe fa36 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f7fe fa33 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b42:	2000      	movs	r0, #0
 8002b44:	f7fe fa30 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7fe fa19 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002b4e:	20aa      	movs	r0, #170	; 0xaa
 8002b50:	f7fe fa2a 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 8002b54:	20cf      	movs	r0, #207	; 0xcf
 8002b56:	f7fe fa13 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f7fe fa24 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b60:	2000      	movs	r0, #0
 8002b62:	f7fe fa21 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b66:	2000      	movs	r0, #0
 8002b68:	f7fe fa1e 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7fe fa1b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7fe fa18 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7fe fa15 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f7fe fa12 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7fe fa0f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	f7fe fa0c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7fe fa09 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7fe fa06 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7fe fa03 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f7fe fa00 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7fe f9fd 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f7fe f9fa 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fe f9f7 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f7fe f9f4 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 8002bc0:	20f0      	movs	r0, #240	; 0xf0
 8002bc2:	f7fe f9dd 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f7fe f9ee 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002bcc:	2050      	movs	r0, #80	; 0x50
 8002bce:	f7fe f9eb 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	f7fe f9e8 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7fe f9e5 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bde:	2000      	movs	r0, #0
 8002be0:	f7fe f9e2 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 8002be4:	20f3      	movs	r0, #243	; 0xf3
 8002be6:	f7fe f9cb 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002bea:	2000      	movs	r0, #0
 8002bec:	f7fe f9dc 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 8002bf0:	20f9      	movs	r0, #249	; 0xf9
 8002bf2:	f7fe f9c5 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 8002bf6:	2006      	movs	r0, #6
 8002bf8:	f7fe f9d6 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8002bfc:	2010      	movs	r0, #16
 8002bfe:	f7fe f9d3 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002c02:	2029      	movs	r0, #41	; 0x29
 8002c04:	f7fe f9d0 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7fe f9cd 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 8002c0e:	203a      	movs	r0, #58	; 0x3a
 8002c10:	f7fe f9b6 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8002c14:	2055      	movs	r0, #85	; 0x55
 8002c16:	f7fe f9c7 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 8002c1a:	2011      	movs	r0, #17
 8002c1c:	f7fe f9b0 	bl	8000f80 <LCD_WR_REG>
		HAL_Delay(100);
 8002c20:	2064      	movs	r0, #100	; 0x64
 8002c22:	f002 fc43 	bl	80054ac <HAL_Delay>
		LCD_WR_REG(0x29);
 8002c26:	2029      	movs	r0, #41	; 0x29
 8002c28:	f7fe f9aa 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8002c2c:	2035      	movs	r0, #53	; 0x35
 8002c2e:	f7fe f9a7 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002c32:	2000      	movs	r0, #0
 8002c34:	f7fe f9b8 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 8002c38:	2051      	movs	r0, #81	; 0x51
 8002c3a:	f7fe f9a1 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 8002c3e:	20ff      	movs	r0, #255	; 0xff
 8002c40:	f7fe f9b2 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 8002c44:	2053      	movs	r0, #83	; 0x53
 8002c46:	f7fe f99b 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 8002c4a:	202c      	movs	r0, #44	; 0x2c
 8002c4c:	f7fe f9ac 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 8002c50:	2055      	movs	r0, #85	; 0x55
 8002c52:	f7fe f995 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 8002c56:	2082      	movs	r0, #130	; 0x82
 8002c58:	f7fe f9a6 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8002c5c:	202c      	movs	r0, #44	; 0x2c
 8002c5e:	f7fe f98f 	bl	8000f80 <LCD_WR_REG>
 8002c62:	f001 b847 	b.w	8003cf4 <TFTLCD_Init+0x235c>
	}else if(lcddev.id==0x5510)
 8002c66:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <TFTLCD_Init+0x12e0>)
 8002c68:	889b      	ldrh	r3, [r3, #4]
 8002c6a:	f245 5210 	movw	r2, #21776	; 0x5510
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	f040 8781 	bne.w	8003b76 <TFTLCD_Init+0x21de>
 8002c74:	e002      	b.n	8002c7c <TFTLCD_Init+0x12e4>
 8002c76:	bf00      	nop
 8002c78:	200002f4 	.word	0x200002f4
	{
		LCD_WriteReg(0xF000,0x55);
 8002c7c:	2155      	movs	r1, #85	; 0x55
 8002c7e:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8002c82:	f7fe f9b7 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8002c86:	21aa      	movs	r1, #170	; 0xaa
 8002c88:	f24f 0001 	movw	r0, #61441	; 0xf001
 8002c8c:	f7fe f9b2 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8002c90:	2152      	movs	r1, #82	; 0x52
 8002c92:	f24f 0002 	movw	r0, #61442	; 0xf002
 8002c96:	f7fe f9ad 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8002c9a:	2108      	movs	r1, #8
 8002c9c:	f24f 0003 	movw	r0, #61443	; 0xf003
 8002ca0:	f7fe f9a8 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	f24f 0004 	movw	r0, #61444	; 0xf004
 8002caa:	f7fe f9a3 	bl	8000ff4 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 8002cae:	210d      	movs	r1, #13
 8002cb0:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8002cb4:	f7fe f99e 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 8002cb8:	210d      	movs	r1, #13
 8002cba:	f24b 0001 	movw	r0, #45057	; 0xb001
 8002cbe:	f7fe f999 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 8002cc2:	210d      	movs	r1, #13
 8002cc4:	f24b 0002 	movw	r0, #45058	; 0xb002
 8002cc8:	f7fe f994 	bl	8000ff4 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 8002ccc:	2134      	movs	r1, #52	; 0x34
 8002cce:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8002cd2:	f7fe f98f 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 8002cd6:	2134      	movs	r1, #52	; 0x34
 8002cd8:	f24b 6001 	movw	r0, #46593	; 0xb601
 8002cdc:	f7fe f98a 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 8002ce0:	2134      	movs	r1, #52	; 0x34
 8002ce2:	f24b 6002 	movw	r0, #46594	; 0xb602
 8002ce6:	f7fe f985 	bl	8000ff4 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 8002cea:	210d      	movs	r1, #13
 8002cec:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8002cf0:	f7fe f980 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 8002cf4:	210d      	movs	r1, #13
 8002cf6:	f24b 1001 	movw	r0, #45313	; 0xb101
 8002cfa:	f7fe f97b 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 8002cfe:	210d      	movs	r1, #13
 8002d00:	f24b 1002 	movw	r0, #45314	; 0xb102
 8002d04:	f7fe f976 	bl	8000ff4 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 8002d08:	2134      	movs	r1, #52	; 0x34
 8002d0a:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8002d0e:	f7fe f971 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 8002d12:	2134      	movs	r1, #52	; 0x34
 8002d14:	f24b 7001 	movw	r0, #46849	; 0xb701
 8002d18:	f7fe f96c 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 8002d1c:	2134      	movs	r1, #52	; 0x34
 8002d1e:	f24b 7002 	movw	r0, #46850	; 0xb702
 8002d22:	f7fe f967 	bl	8000ff4 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 8002d26:	2100      	movs	r1, #0
 8002d28:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8002d2c:	f7fe f962 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 8002d30:	2100      	movs	r1, #0
 8002d32:	f24b 2001 	movw	r0, #45569	; 0xb201
 8002d36:	f7fe f95d 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	f24b 2002 	movw	r0, #45570	; 0xb202
 8002d40:	f7fe f958 	bl	8000ff4 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 8002d44:	2124      	movs	r1, #36	; 0x24
 8002d46:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8002d4a:	f7fe f953 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 8002d4e:	2124      	movs	r1, #36	; 0x24
 8002d50:	f64b 0001 	movw	r0, #47105	; 0xb801
 8002d54:	f7fe f94e 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 8002d58:	2124      	movs	r1, #36	; 0x24
 8002d5a:	f64b 0002 	movw	r0, #47106	; 0xb802
 8002d5e:	f7fe f949 	bl	8000ff4 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 8002d62:	2101      	movs	r1, #1
 8002d64:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8002d68:	f7fe f944 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 8002d6c:	210f      	movs	r1, #15
 8002d6e:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8002d72:	f7fe f93f 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 8002d76:	210f      	movs	r1, #15
 8002d78:	f24b 3001 	movw	r0, #45825	; 0xb301
 8002d7c:	f7fe f93a 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 8002d80:	210f      	movs	r1, #15
 8002d82:	f24b 3002 	movw	r0, #45826	; 0xb302
 8002d86:	f7fe f935 	bl	8000ff4 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 8002d8a:	2134      	movs	r1, #52	; 0x34
 8002d8c:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8002d90:	f7fe f930 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 8002d94:	2134      	movs	r1, #52	; 0x34
 8002d96:	f64b 1001 	movw	r0, #47361	; 0xb901
 8002d9a:	f7fe f92b 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 8002d9e:	2134      	movs	r1, #52	; 0x34
 8002da0:	f64b 1002 	movw	r0, #47362	; 0xb902
 8002da4:	f7fe f926 	bl	8000ff4 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 8002da8:	2108      	movs	r1, #8
 8002daa:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8002dae:	f7fe f921 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 8002db2:	2108      	movs	r1, #8
 8002db4:	f24b 5001 	movw	r0, #46337	; 0xb501
 8002db8:	f7fe f91c 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 8002dbc:	2108      	movs	r1, #8
 8002dbe:	f24b 5002 	movw	r0, #46338	; 0xb502
 8002dc2:	f7fe f917 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 8002dc6:	2103      	movs	r1, #3
 8002dc8:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8002dcc:	f7fe f912 	bl	8000ff4 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 8002dd0:	2124      	movs	r1, #36	; 0x24
 8002dd2:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8002dd6:	f7fe f90d 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 8002dda:	2124      	movs	r1, #36	; 0x24
 8002ddc:	f64b 2001 	movw	r0, #47617	; 0xba01
 8002de0:	f7fe f908 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 8002de4:	2124      	movs	r1, #36	; 0x24
 8002de6:	f64b 2002 	movw	r0, #47618	; 0xba02
 8002dea:	f7fe f903 	bl	8000ff4 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 8002dee:	2100      	movs	r1, #0
 8002df0:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8002df4:	f7fe f8fe 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 8002df8:	2178      	movs	r1, #120	; 0x78
 8002dfa:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8002dfe:	f7fe f8f9 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8002e02:	2100      	movs	r1, #0
 8002e04:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8002e08:	f7fe f8f4 	bl	8000ff4 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8002e12:	f7fe f8ef 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 8002e16:	2178      	movs	r1, #120	; 0x78
 8002e18:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8002e1c:	f7fe f8ea 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8002e20:	2100      	movs	r1, #0
 8002e22:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8002e26:	f7fe f8e5 	bl	8000ff4 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8002e30:	f7fe f8e0 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 8002e34:	2164      	movs	r1, #100	; 0x64
 8002e36:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8002e3a:	f7fe f8db 	bl	8000ff4 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 8002e3e:	2100      	movs	r1, #0
 8002e40:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8002e44:	f7fe f8d6 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 8002e48:	2133      	movs	r1, #51	; 0x33
 8002e4a:	f24d 1001 	movw	r0, #53505	; 0xd101
 8002e4e:	f7fe f8d1 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 8002e52:	2100      	movs	r1, #0
 8002e54:	f24d 1002 	movw	r0, #53506	; 0xd102
 8002e58:	f7fe f8cc 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 8002e5c:	2134      	movs	r1, #52	; 0x34
 8002e5e:	f24d 1003 	movw	r0, #53507	; 0xd103
 8002e62:	f7fe f8c7 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 8002e66:	2100      	movs	r1, #0
 8002e68:	f24d 1004 	movw	r0, #53508	; 0xd104
 8002e6c:	f7fe f8c2 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 8002e70:	213a      	movs	r1, #58	; 0x3a
 8002e72:	f24d 1005 	movw	r0, #53509	; 0xd105
 8002e76:	f7fe f8bd 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	f24d 1006 	movw	r0, #53510	; 0xd106
 8002e80:	f7fe f8b8 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 8002e84:	214a      	movs	r1, #74	; 0x4a
 8002e86:	f24d 1007 	movw	r0, #53511	; 0xd107
 8002e8a:	f7fe f8b3 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 8002e8e:	2100      	movs	r1, #0
 8002e90:	f24d 1008 	movw	r0, #53512	; 0xd108
 8002e94:	f7fe f8ae 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 8002e98:	215c      	movs	r1, #92	; 0x5c
 8002e9a:	f24d 1009 	movw	r0, #53513	; 0xd109
 8002e9e:	f7fe f8a9 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8002ea8:	f7fe f8a4 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 8002eac:	2181      	movs	r1, #129	; 0x81
 8002eae:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8002eb2:	f7fe f89f 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8002ebc:	f7fe f89a 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 8002ec0:	21a6      	movs	r1, #166	; 0xa6
 8002ec2:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8002ec6:	f7fe f895 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 8002eca:	2100      	movs	r1, #0
 8002ecc:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8002ed0:	f7fe f890 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 8002ed4:	21e5      	movs	r1, #229	; 0xe5
 8002ed6:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8002eda:	f7fe f88b 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 8002ede:	2101      	movs	r1, #1
 8002ee0:	f24d 1010 	movw	r0, #53520	; 0xd110
 8002ee4:	f7fe f886 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 8002ee8:	2113      	movs	r1, #19
 8002eea:	f24d 1011 	movw	r0, #53521	; 0xd111
 8002eee:	f7fe f881 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	f24d 1012 	movw	r0, #53522	; 0xd112
 8002ef8:	f7fe f87c 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 8002efc:	2154      	movs	r1, #84	; 0x54
 8002efe:	f24d 1013 	movw	r0, #53523	; 0xd113
 8002f02:	f7fe f877 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 8002f06:	2101      	movs	r1, #1
 8002f08:	f24d 1014 	movw	r0, #53524	; 0xd114
 8002f0c:	f7fe f872 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8002f10:	2182      	movs	r1, #130	; 0x82
 8002f12:	f24d 1015 	movw	r0, #53525	; 0xd115
 8002f16:	f7fe f86d 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	f24d 1016 	movw	r0, #53526	; 0xd116
 8002f20:	f7fe f868 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 8002f24:	21ca      	movs	r1, #202	; 0xca
 8002f26:	f24d 1017 	movw	r0, #53527	; 0xd117
 8002f2a:	f7fe f863 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 8002f2e:	2102      	movs	r1, #2
 8002f30:	f24d 1018 	movw	r0, #53528	; 0xd118
 8002f34:	f7fe f85e 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 8002f38:	2100      	movs	r1, #0
 8002f3a:	f24d 1019 	movw	r0, #53529	; 0xd119
 8002f3e:	f7fe f859 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 8002f42:	2102      	movs	r1, #2
 8002f44:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8002f48:	f7fe f854 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8002f52:	f7fe f84f 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 8002f56:	2102      	movs	r1, #2
 8002f58:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8002f5c:	f7fe f84a 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 8002f60:	2134      	movs	r1, #52	; 0x34
 8002f62:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8002f66:	f7fe f845 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 8002f6a:	2102      	movs	r1, #2
 8002f6c:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8002f70:	f7fe f840 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 8002f74:	2167      	movs	r1, #103	; 0x67
 8002f76:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8002f7a:	f7fe f83b 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 8002f7e:	2102      	movs	r1, #2
 8002f80:	f24d 1020 	movw	r0, #53536	; 0xd120
 8002f84:	f7fe f836 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 8002f88:	2184      	movs	r1, #132	; 0x84
 8002f8a:	f24d 1021 	movw	r0, #53537	; 0xd121
 8002f8e:	f7fe f831 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 8002f92:	2102      	movs	r1, #2
 8002f94:	f24d 1022 	movw	r0, #53538	; 0xd122
 8002f98:	f7fe f82c 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 8002f9c:	21a4      	movs	r1, #164	; 0xa4
 8002f9e:	f24d 1023 	movw	r0, #53539	; 0xd123
 8002fa2:	f7fe f827 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 8002fa6:	2102      	movs	r1, #2
 8002fa8:	f24d 1024 	movw	r0, #53540	; 0xd124
 8002fac:	f7fe f822 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 8002fb0:	21b7      	movs	r1, #183	; 0xb7
 8002fb2:	f24d 1025 	movw	r0, #53541	; 0xd125
 8002fb6:	f7fe f81d 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 8002fba:	2102      	movs	r1, #2
 8002fbc:	f24d 1026 	movw	r0, #53542	; 0xd126
 8002fc0:	f7fe f818 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 8002fc4:	21cf      	movs	r1, #207	; 0xcf
 8002fc6:	f24d 1027 	movw	r0, #53543	; 0xd127
 8002fca:	f7fe f813 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 8002fce:	2102      	movs	r1, #2
 8002fd0:	f24d 1028 	movw	r0, #53544	; 0xd128
 8002fd4:	f7fe f80e 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 8002fd8:	21de      	movs	r1, #222	; 0xde
 8002fda:	f24d 1029 	movw	r0, #53545	; 0xd129
 8002fde:	f7fe f809 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 8002fe2:	2102      	movs	r1, #2
 8002fe4:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8002fe8:	f7fe f804 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 8002fec:	21f2      	movs	r1, #242	; 0xf2
 8002fee:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8002ff2:	f7fd ffff 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8002ffc:	f7fd fffa 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8003000:	21fe      	movs	r1, #254	; 0xfe
 8003002:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8003006:	f7fd fff5 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 800300a:	2103      	movs	r1, #3
 800300c:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003010:	f7fd fff0 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 8003014:	2110      	movs	r1, #16
 8003016:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800301a:	f7fd ffeb 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 800301e:	2103      	movs	r1, #3
 8003020:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003024:	f7fd ffe6 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 8003028:	2133      	movs	r1, #51	; 0x33
 800302a:	f24d 1031 	movw	r0, #53553	; 0xd131
 800302e:	f7fd ffe1 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 8003032:	2103      	movs	r1, #3
 8003034:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003038:	f7fd ffdc 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 800303c:	216d      	movs	r1, #109	; 0x6d
 800303e:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003042:	f7fd ffd7 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 8003046:	2100      	movs	r1, #0
 8003048:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 800304c:	f7fd ffd2 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 8003050:	2133      	movs	r1, #51	; 0x33
 8003052:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003056:	f7fd ffcd 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 800305a:	2100      	movs	r1, #0
 800305c:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003060:	f7fd ffc8 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 8003064:	2134      	movs	r1, #52	; 0x34
 8003066:	f24d 2003 	movw	r0, #53763	; 0xd203
 800306a:	f7fd ffc3 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 800306e:	2100      	movs	r1, #0
 8003070:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003074:	f7fd ffbe 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 8003078:	213a      	movs	r1, #58	; 0x3a
 800307a:	f24d 2005 	movw	r0, #53765	; 0xd205
 800307e:	f7fd ffb9 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 8003082:	2100      	movs	r1, #0
 8003084:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003088:	f7fd ffb4 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 800308c:	214a      	movs	r1, #74	; 0x4a
 800308e:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003092:	f7fd ffaf 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 8003096:	2100      	movs	r1, #0
 8003098:	f24d 2008 	movw	r0, #53768	; 0xd208
 800309c:	f7fd ffaa 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 80030a0:	215c      	movs	r1, #92	; 0x5c
 80030a2:	f24d 2009 	movw	r0, #53769	; 0xd209
 80030a6:	f7fd ffa5 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 80030aa:	2100      	movs	r1, #0
 80030ac:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80030b0:	f7fd ffa0 	bl	8000ff4 <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 80030b4:	2181      	movs	r1, #129	; 0x81
 80030b6:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80030ba:	f7fd ff9b 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 80030be:	2100      	movs	r1, #0
 80030c0:	f24d 200c 	movw	r0, #53772	; 0xd20c
 80030c4:	f7fd ff96 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 80030c8:	21a6      	movs	r1, #166	; 0xa6
 80030ca:	f24d 200d 	movw	r0, #53773	; 0xd20d
 80030ce:	f7fd ff91 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 80030d2:	2100      	movs	r1, #0
 80030d4:	f24d 200e 	movw	r0, #53774	; 0xd20e
 80030d8:	f7fd ff8c 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 80030dc:	21e5      	movs	r1, #229	; 0xe5
 80030de:	f24d 200f 	movw	r0, #53775	; 0xd20f
 80030e2:	f7fd ff87 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 80030e6:	2101      	movs	r1, #1
 80030e8:	f24d 2010 	movw	r0, #53776	; 0xd210
 80030ec:	f7fd ff82 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 80030f0:	2113      	movs	r1, #19
 80030f2:	f24d 2011 	movw	r0, #53777	; 0xd211
 80030f6:	f7fd ff7d 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 80030fa:	2101      	movs	r1, #1
 80030fc:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003100:	f7fd ff78 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 8003104:	2154      	movs	r1, #84	; 0x54
 8003106:	f24d 2013 	movw	r0, #53779	; 0xd213
 800310a:	f7fd ff73 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 800310e:	2101      	movs	r1, #1
 8003110:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003114:	f7fd ff6e 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 8003118:	2182      	movs	r1, #130	; 0x82
 800311a:	f24d 2015 	movw	r0, #53781	; 0xd215
 800311e:	f7fd ff69 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 8003122:	2101      	movs	r1, #1
 8003124:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003128:	f7fd ff64 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 800312c:	21ca      	movs	r1, #202	; 0xca
 800312e:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003132:	f7fd ff5f 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 8003136:	2102      	movs	r1, #2
 8003138:	f24d 2018 	movw	r0, #53784	; 0xd218
 800313c:	f7fd ff5a 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 8003140:	2100      	movs	r1, #0
 8003142:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003146:	f7fd ff55 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 800314a:	2102      	movs	r1, #2
 800314c:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003150:	f7fd ff50 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 8003154:	2101      	movs	r1, #1
 8003156:	f24d 201b 	movw	r0, #53787	; 0xd21b
 800315a:	f7fd ff4b 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 800315e:	2102      	movs	r1, #2
 8003160:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003164:	f7fd ff46 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 8003168:	2134      	movs	r1, #52	; 0x34
 800316a:	f24d 201d 	movw	r0, #53789	; 0xd21d
 800316e:	f7fd ff41 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 8003172:	2102      	movs	r1, #2
 8003174:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003178:	f7fd ff3c 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 800317c:	2167      	movs	r1, #103	; 0x67
 800317e:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003182:	f7fd ff37 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 8003186:	2102      	movs	r1, #2
 8003188:	f24d 2020 	movw	r0, #53792	; 0xd220
 800318c:	f7fd ff32 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 8003190:	2184      	movs	r1, #132	; 0x84
 8003192:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003196:	f7fd ff2d 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 800319a:	2102      	movs	r1, #2
 800319c:	f24d 2022 	movw	r0, #53794	; 0xd222
 80031a0:	f7fd ff28 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 80031a4:	21a4      	movs	r1, #164	; 0xa4
 80031a6:	f24d 2023 	movw	r0, #53795	; 0xd223
 80031aa:	f7fd ff23 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 80031ae:	2102      	movs	r1, #2
 80031b0:	f24d 2024 	movw	r0, #53796	; 0xd224
 80031b4:	f7fd ff1e 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 80031b8:	21b7      	movs	r1, #183	; 0xb7
 80031ba:	f24d 2025 	movw	r0, #53797	; 0xd225
 80031be:	f7fd ff19 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 80031c2:	2102      	movs	r1, #2
 80031c4:	f24d 2026 	movw	r0, #53798	; 0xd226
 80031c8:	f7fd ff14 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 80031cc:	21cf      	movs	r1, #207	; 0xcf
 80031ce:	f24d 2027 	movw	r0, #53799	; 0xd227
 80031d2:	f7fd ff0f 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 80031d6:	2102      	movs	r1, #2
 80031d8:	f24d 2028 	movw	r0, #53800	; 0xd228
 80031dc:	f7fd ff0a 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 80031e0:	21de      	movs	r1, #222	; 0xde
 80031e2:	f24d 2029 	movw	r0, #53801	; 0xd229
 80031e6:	f7fd ff05 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 80031ea:	2102      	movs	r1, #2
 80031ec:	f24d 202a 	movw	r0, #53802	; 0xd22a
 80031f0:	f7fd ff00 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 80031f4:	21f2      	movs	r1, #242	; 0xf2
 80031f6:	f24d 202b 	movw	r0, #53803	; 0xd22b
 80031fa:	f7fd fefb 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 80031fe:	2102      	movs	r1, #2
 8003200:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003204:	f7fd fef6 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 8003208:	21fe      	movs	r1, #254	; 0xfe
 800320a:	f24d 202d 	movw	r0, #53805	; 0xd22d
 800320e:	f7fd fef1 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 8003212:	2103      	movs	r1, #3
 8003214:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003218:	f7fd feec 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 800321c:	2110      	movs	r1, #16
 800321e:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003222:	f7fd fee7 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 8003226:	2103      	movs	r1, #3
 8003228:	f24d 2030 	movw	r0, #53808	; 0xd230
 800322c:	f7fd fee2 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8003230:	2133      	movs	r1, #51	; 0x33
 8003232:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003236:	f7fd fedd 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 800323a:	2103      	movs	r1, #3
 800323c:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003240:	f7fd fed8 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 8003244:	216d      	movs	r1, #109	; 0x6d
 8003246:	f24d 2033 	movw	r0, #53811	; 0xd233
 800324a:	f7fd fed3 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 800324e:	2100      	movs	r1, #0
 8003250:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003254:	f7fd fece 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 8003258:	2133      	movs	r1, #51	; 0x33
 800325a:	f24d 3001 	movw	r0, #54017	; 0xd301
 800325e:	f7fd fec9 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 8003262:	2100      	movs	r1, #0
 8003264:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003268:	f7fd fec4 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 800326c:	2134      	movs	r1, #52	; 0x34
 800326e:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003272:	f7fd febf 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 8003276:	2100      	movs	r1, #0
 8003278:	f24d 3004 	movw	r0, #54020	; 0xd304
 800327c:	f7fd feba 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 8003280:	213a      	movs	r1, #58	; 0x3a
 8003282:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003286:	f7fd feb5 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 800328a:	2100      	movs	r1, #0
 800328c:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003290:	f7fd feb0 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 8003294:	214a      	movs	r1, #74	; 0x4a
 8003296:	f24d 3007 	movw	r0, #54023	; 0xd307
 800329a:	f7fd feab 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 800329e:	2100      	movs	r1, #0
 80032a0:	f24d 3008 	movw	r0, #54024	; 0xd308
 80032a4:	f7fd fea6 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 80032a8:	215c      	movs	r1, #92	; 0x5c
 80032aa:	f24d 3009 	movw	r0, #54025	; 0xd309
 80032ae:	f7fd fea1 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 80032b2:	2100      	movs	r1, #0
 80032b4:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80032b8:	f7fd fe9c 	bl	8000ff4 <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 80032bc:	2181      	movs	r1, #129	; 0x81
 80032be:	f24d 300b 	movw	r0, #54027	; 0xd30b
 80032c2:	f7fd fe97 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 80032c6:	2100      	movs	r1, #0
 80032c8:	f24d 300c 	movw	r0, #54028	; 0xd30c
 80032cc:	f7fd fe92 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 80032d0:	21a6      	movs	r1, #166	; 0xa6
 80032d2:	f24d 300d 	movw	r0, #54029	; 0xd30d
 80032d6:	f7fd fe8d 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 80032da:	2100      	movs	r1, #0
 80032dc:	f24d 300e 	movw	r0, #54030	; 0xd30e
 80032e0:	f7fd fe88 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 80032e4:	21e5      	movs	r1, #229	; 0xe5
 80032e6:	f24d 300f 	movw	r0, #54031	; 0xd30f
 80032ea:	f7fd fe83 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 80032ee:	2101      	movs	r1, #1
 80032f0:	f24d 3010 	movw	r0, #54032	; 0xd310
 80032f4:	f7fd fe7e 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 80032f8:	2113      	movs	r1, #19
 80032fa:	f24d 3011 	movw	r0, #54033	; 0xd311
 80032fe:	f7fd fe79 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 8003302:	2101      	movs	r1, #1
 8003304:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003308:	f7fd fe74 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 800330c:	2154      	movs	r1, #84	; 0x54
 800330e:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003312:	f7fd fe6f 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 8003316:	2101      	movs	r1, #1
 8003318:	f24d 3014 	movw	r0, #54036	; 0xd314
 800331c:	f7fd fe6a 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8003320:	2182      	movs	r1, #130	; 0x82
 8003322:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003326:	f7fd fe65 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 800332a:	2101      	movs	r1, #1
 800332c:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003330:	f7fd fe60 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 8003334:	21ca      	movs	r1, #202	; 0xca
 8003336:	f24d 3017 	movw	r0, #54039	; 0xd317
 800333a:	f7fd fe5b 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 800333e:	2102      	movs	r1, #2
 8003340:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003344:	f7fd fe56 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 8003348:	2100      	movs	r1, #0
 800334a:	f24d 3019 	movw	r0, #54041	; 0xd319
 800334e:	f7fd fe51 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 8003352:	2102      	movs	r1, #2
 8003354:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003358:	f7fd fe4c 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 800335c:	2101      	movs	r1, #1
 800335e:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003362:	f7fd fe47 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 8003366:	2102      	movs	r1, #2
 8003368:	f24d 301c 	movw	r0, #54044	; 0xd31c
 800336c:	f7fd fe42 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 8003370:	2134      	movs	r1, #52	; 0x34
 8003372:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003376:	f7fd fe3d 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 800337a:	2102      	movs	r1, #2
 800337c:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003380:	f7fd fe38 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 8003384:	2167      	movs	r1, #103	; 0x67
 8003386:	f24d 301f 	movw	r0, #54047	; 0xd31f
 800338a:	f7fd fe33 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 800338e:	2102      	movs	r1, #2
 8003390:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003394:	f7fd fe2e 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 8003398:	2184      	movs	r1, #132	; 0x84
 800339a:	f24d 3021 	movw	r0, #54049	; 0xd321
 800339e:	f7fd fe29 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 80033a2:	2102      	movs	r1, #2
 80033a4:	f24d 3022 	movw	r0, #54050	; 0xd322
 80033a8:	f7fd fe24 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 80033ac:	21a4      	movs	r1, #164	; 0xa4
 80033ae:	f24d 3023 	movw	r0, #54051	; 0xd323
 80033b2:	f7fd fe1f 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 80033b6:	2102      	movs	r1, #2
 80033b8:	f24d 3024 	movw	r0, #54052	; 0xd324
 80033bc:	f7fd fe1a 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 80033c0:	21b7      	movs	r1, #183	; 0xb7
 80033c2:	f24d 3025 	movw	r0, #54053	; 0xd325
 80033c6:	f7fd fe15 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 80033ca:	2102      	movs	r1, #2
 80033cc:	f24d 3026 	movw	r0, #54054	; 0xd326
 80033d0:	f7fd fe10 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 80033d4:	21cf      	movs	r1, #207	; 0xcf
 80033d6:	f24d 3027 	movw	r0, #54055	; 0xd327
 80033da:	f7fd fe0b 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 80033de:	2102      	movs	r1, #2
 80033e0:	f24d 3028 	movw	r0, #54056	; 0xd328
 80033e4:	f7fd fe06 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 80033e8:	21de      	movs	r1, #222	; 0xde
 80033ea:	f24d 3029 	movw	r0, #54057	; 0xd329
 80033ee:	f7fd fe01 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 80033f2:	2102      	movs	r1, #2
 80033f4:	f24d 302a 	movw	r0, #54058	; 0xd32a
 80033f8:	f7fd fdfc 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 80033fc:	21f2      	movs	r1, #242	; 0xf2
 80033fe:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003402:	f7fd fdf7 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 8003406:	2102      	movs	r1, #2
 8003408:	f24d 302c 	movw	r0, #54060	; 0xd32c
 800340c:	f7fd fdf2 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8003410:	21fe      	movs	r1, #254	; 0xfe
 8003412:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003416:	f7fd fded 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 800341a:	2103      	movs	r1, #3
 800341c:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003420:	f7fd fde8 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 8003424:	2110      	movs	r1, #16
 8003426:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800342a:	f7fd fde3 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 800342e:	2103      	movs	r1, #3
 8003430:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003434:	f7fd fdde 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 8003438:	2133      	movs	r1, #51	; 0x33
 800343a:	f24d 3031 	movw	r0, #54065	; 0xd331
 800343e:	f7fd fdd9 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 8003442:	2103      	movs	r1, #3
 8003444:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003448:	f7fd fdd4 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 800344c:	216d      	movs	r1, #109	; 0x6d
 800344e:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003452:	f7fd fdcf 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 8003456:	2100      	movs	r1, #0
 8003458:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 800345c:	f7fd fdca 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 8003460:	2133      	movs	r1, #51	; 0x33
 8003462:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003466:	f7fd fdc5 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 800346a:	2100      	movs	r1, #0
 800346c:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003470:	f7fd fdc0 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 8003474:	2134      	movs	r1, #52	; 0x34
 8003476:	f24d 4003 	movw	r0, #54275	; 0xd403
 800347a:	f7fd fdbb 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 800347e:	2100      	movs	r1, #0
 8003480:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003484:	f7fd fdb6 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 8003488:	213a      	movs	r1, #58	; 0x3a
 800348a:	f24d 4005 	movw	r0, #54277	; 0xd405
 800348e:	f7fd fdb1 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 8003492:	2100      	movs	r1, #0
 8003494:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003498:	f7fd fdac 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 800349c:	214a      	movs	r1, #74	; 0x4a
 800349e:	f24d 4007 	movw	r0, #54279	; 0xd407
 80034a2:	f7fd fda7 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 80034a6:	2100      	movs	r1, #0
 80034a8:	f24d 4008 	movw	r0, #54280	; 0xd408
 80034ac:	f7fd fda2 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 80034b0:	215c      	movs	r1, #92	; 0x5c
 80034b2:	f24d 4009 	movw	r0, #54281	; 0xd409
 80034b6:	f7fd fd9d 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 80034ba:	2100      	movs	r1, #0
 80034bc:	f24d 400a 	movw	r0, #54282	; 0xd40a
 80034c0:	f7fd fd98 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 80034c4:	2181      	movs	r1, #129	; 0x81
 80034c6:	f24d 400b 	movw	r0, #54283	; 0xd40b
 80034ca:	f7fd fd93 	bl	8000ff4 <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 80034ce:	2100      	movs	r1, #0
 80034d0:	f24d 400c 	movw	r0, #54284	; 0xd40c
 80034d4:	f7fd fd8e 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 80034d8:	21a6      	movs	r1, #166	; 0xa6
 80034da:	f24d 400d 	movw	r0, #54285	; 0xd40d
 80034de:	f7fd fd89 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 80034e2:	2100      	movs	r1, #0
 80034e4:	f24d 400e 	movw	r0, #54286	; 0xd40e
 80034e8:	f7fd fd84 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 80034ec:	21e5      	movs	r1, #229	; 0xe5
 80034ee:	f24d 400f 	movw	r0, #54287	; 0xd40f
 80034f2:	f7fd fd7f 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 80034f6:	2101      	movs	r1, #1
 80034f8:	f24d 4010 	movw	r0, #54288	; 0xd410
 80034fc:	f7fd fd7a 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 8003500:	2113      	movs	r1, #19
 8003502:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003506:	f7fd fd75 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 800350a:	2101      	movs	r1, #1
 800350c:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003510:	f7fd fd70 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 8003514:	2154      	movs	r1, #84	; 0x54
 8003516:	f24d 4013 	movw	r0, #54291	; 0xd413
 800351a:	f7fd fd6b 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 800351e:	2101      	movs	r1, #1
 8003520:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003524:	f7fd fd66 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 8003528:	2182      	movs	r1, #130	; 0x82
 800352a:	f24d 4015 	movw	r0, #54293	; 0xd415
 800352e:	f7fd fd61 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 8003532:	2101      	movs	r1, #1
 8003534:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003538:	f7fd fd5c 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 800353c:	21ca      	movs	r1, #202	; 0xca
 800353e:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003542:	f7fd fd57 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 8003546:	2102      	movs	r1, #2
 8003548:	f24d 4018 	movw	r0, #54296	; 0xd418
 800354c:	f7fd fd52 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 8003550:	2100      	movs	r1, #0
 8003552:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003556:	f7fd fd4d 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 800355a:	2102      	movs	r1, #2
 800355c:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003560:	f7fd fd48 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 8003564:	2101      	movs	r1, #1
 8003566:	f24d 401b 	movw	r0, #54299	; 0xd41b
 800356a:	f7fd fd43 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 800356e:	2102      	movs	r1, #2
 8003570:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003574:	f7fd fd3e 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 8003578:	2134      	movs	r1, #52	; 0x34
 800357a:	f24d 401d 	movw	r0, #54301	; 0xd41d
 800357e:	f7fd fd39 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 8003582:	2102      	movs	r1, #2
 8003584:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003588:	f7fd fd34 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 800358c:	2167      	movs	r1, #103	; 0x67
 800358e:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003592:	f7fd fd2f 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 8003596:	2102      	movs	r1, #2
 8003598:	f24d 4020 	movw	r0, #54304	; 0xd420
 800359c:	f7fd fd2a 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 80035a0:	2184      	movs	r1, #132	; 0x84
 80035a2:	f24d 4021 	movw	r0, #54305	; 0xd421
 80035a6:	f7fd fd25 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 80035aa:	2102      	movs	r1, #2
 80035ac:	f24d 4022 	movw	r0, #54306	; 0xd422
 80035b0:	f7fd fd20 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 80035b4:	21a4      	movs	r1, #164	; 0xa4
 80035b6:	f24d 4023 	movw	r0, #54307	; 0xd423
 80035ba:	f7fd fd1b 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 80035be:	2102      	movs	r1, #2
 80035c0:	f24d 4024 	movw	r0, #54308	; 0xd424
 80035c4:	f7fd fd16 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 80035c8:	21b7      	movs	r1, #183	; 0xb7
 80035ca:	f24d 4025 	movw	r0, #54309	; 0xd425
 80035ce:	f7fd fd11 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 80035d2:	2102      	movs	r1, #2
 80035d4:	f24d 4026 	movw	r0, #54310	; 0xd426
 80035d8:	f7fd fd0c 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 80035dc:	21cf      	movs	r1, #207	; 0xcf
 80035de:	f24d 4027 	movw	r0, #54311	; 0xd427
 80035e2:	f7fd fd07 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 80035e6:	2102      	movs	r1, #2
 80035e8:	f24d 4028 	movw	r0, #54312	; 0xd428
 80035ec:	f7fd fd02 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 80035f0:	21de      	movs	r1, #222	; 0xde
 80035f2:	f24d 4029 	movw	r0, #54313	; 0xd429
 80035f6:	f7fd fcfd 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 80035fa:	2102      	movs	r1, #2
 80035fc:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003600:	f7fd fcf8 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 8003604:	21f2      	movs	r1, #242	; 0xf2
 8003606:	f24d 402b 	movw	r0, #54315	; 0xd42b
 800360a:	f7fd fcf3 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 800360e:	2102      	movs	r1, #2
 8003610:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003614:	f7fd fcee 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 8003618:	21fe      	movs	r1, #254	; 0xfe
 800361a:	f24d 402d 	movw	r0, #54317	; 0xd42d
 800361e:	f7fd fce9 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 8003622:	2103      	movs	r1, #3
 8003624:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003628:	f7fd fce4 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 800362c:	2110      	movs	r1, #16
 800362e:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003632:	f7fd fcdf 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 8003636:	2103      	movs	r1, #3
 8003638:	f24d 4030 	movw	r0, #54320	; 0xd430
 800363c:	f7fd fcda 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 8003640:	2133      	movs	r1, #51	; 0x33
 8003642:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003646:	f7fd fcd5 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 800364a:	2103      	movs	r1, #3
 800364c:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003650:	f7fd fcd0 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 8003654:	216d      	movs	r1, #109	; 0x6d
 8003656:	f24d 4033 	movw	r0, #54323	; 0xd433
 800365a:	f7fd fccb 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 800365e:	2100      	movs	r1, #0
 8003660:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003664:	f7fd fcc6 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 8003668:	2133      	movs	r1, #51	; 0x33
 800366a:	f24d 5001 	movw	r0, #54529	; 0xd501
 800366e:	f7fd fcc1 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 8003672:	2100      	movs	r1, #0
 8003674:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003678:	f7fd fcbc 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 800367c:	2134      	movs	r1, #52	; 0x34
 800367e:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003682:	f7fd fcb7 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 8003686:	2100      	movs	r1, #0
 8003688:	f24d 5004 	movw	r0, #54532	; 0xd504
 800368c:	f7fd fcb2 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 8003690:	213a      	movs	r1, #58	; 0x3a
 8003692:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003696:	f7fd fcad 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 800369a:	2100      	movs	r1, #0
 800369c:	f24d 5006 	movw	r0, #54534	; 0xd506
 80036a0:	f7fd fca8 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 80036a4:	214a      	movs	r1, #74	; 0x4a
 80036a6:	f24d 5007 	movw	r0, #54535	; 0xd507
 80036aa:	f7fd fca3 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 80036ae:	2100      	movs	r1, #0
 80036b0:	f24d 5008 	movw	r0, #54536	; 0xd508
 80036b4:	f7fd fc9e 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 80036b8:	215c      	movs	r1, #92	; 0x5c
 80036ba:	f24d 5009 	movw	r0, #54537	; 0xd509
 80036be:	f7fd fc99 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 80036c2:	2100      	movs	r1, #0
 80036c4:	f24d 500a 	movw	r0, #54538	; 0xd50a
 80036c8:	f7fd fc94 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 80036cc:	2181      	movs	r1, #129	; 0x81
 80036ce:	f24d 500b 	movw	r0, #54539	; 0xd50b
 80036d2:	f7fd fc8f 	bl	8000ff4 <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 80036d6:	2100      	movs	r1, #0
 80036d8:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80036dc:	f7fd fc8a 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 80036e0:	21a6      	movs	r1, #166	; 0xa6
 80036e2:	f24d 500d 	movw	r0, #54541	; 0xd50d
 80036e6:	f7fd fc85 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 80036ea:	2100      	movs	r1, #0
 80036ec:	f24d 500e 	movw	r0, #54542	; 0xd50e
 80036f0:	f7fd fc80 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 80036f4:	21e5      	movs	r1, #229	; 0xe5
 80036f6:	f24d 500f 	movw	r0, #54543	; 0xd50f
 80036fa:	f7fd fc7b 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 80036fe:	2101      	movs	r1, #1
 8003700:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003704:	f7fd fc76 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 8003708:	2113      	movs	r1, #19
 800370a:	f24d 5011 	movw	r0, #54545	; 0xd511
 800370e:	f7fd fc71 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 8003712:	2101      	movs	r1, #1
 8003714:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003718:	f7fd fc6c 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 800371c:	2154      	movs	r1, #84	; 0x54
 800371e:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003722:	f7fd fc67 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 8003726:	2101      	movs	r1, #1
 8003728:	f24d 5014 	movw	r0, #54548	; 0xd514
 800372c:	f7fd fc62 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 8003730:	2182      	movs	r1, #130	; 0x82
 8003732:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003736:	f7fd fc5d 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 800373a:	2101      	movs	r1, #1
 800373c:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003740:	f7fd fc58 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 8003744:	21ca      	movs	r1, #202	; 0xca
 8003746:	f24d 5017 	movw	r0, #54551	; 0xd517
 800374a:	f7fd fc53 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 800374e:	2102      	movs	r1, #2
 8003750:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003754:	f7fd fc4e 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 8003758:	2100      	movs	r1, #0
 800375a:	f24d 5019 	movw	r0, #54553	; 0xd519
 800375e:	f7fd fc49 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 8003762:	2102      	movs	r1, #2
 8003764:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003768:	f7fd fc44 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 800376c:	2101      	movs	r1, #1
 800376e:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003772:	f7fd fc3f 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 8003776:	2102      	movs	r1, #2
 8003778:	f24d 501c 	movw	r0, #54556	; 0xd51c
 800377c:	f7fd fc3a 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 8003780:	2134      	movs	r1, #52	; 0x34
 8003782:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003786:	f7fd fc35 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 800378a:	2102      	movs	r1, #2
 800378c:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003790:	f7fd fc30 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 8003794:	2167      	movs	r1, #103	; 0x67
 8003796:	f24d 501f 	movw	r0, #54559	; 0xd51f
 800379a:	f7fd fc2b 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 800379e:	2102      	movs	r1, #2
 80037a0:	f24d 5020 	movw	r0, #54560	; 0xd520
 80037a4:	f7fd fc26 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 80037a8:	2184      	movs	r1, #132	; 0x84
 80037aa:	f24d 5021 	movw	r0, #54561	; 0xd521
 80037ae:	f7fd fc21 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 80037b2:	2102      	movs	r1, #2
 80037b4:	f24d 5022 	movw	r0, #54562	; 0xd522
 80037b8:	f7fd fc1c 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 80037bc:	21a4      	movs	r1, #164	; 0xa4
 80037be:	f24d 5023 	movw	r0, #54563	; 0xd523
 80037c2:	f7fd fc17 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 80037c6:	2102      	movs	r1, #2
 80037c8:	f24d 5024 	movw	r0, #54564	; 0xd524
 80037cc:	f7fd fc12 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 80037d0:	21b7      	movs	r1, #183	; 0xb7
 80037d2:	f24d 5025 	movw	r0, #54565	; 0xd525
 80037d6:	f7fd fc0d 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 80037da:	2102      	movs	r1, #2
 80037dc:	f24d 5026 	movw	r0, #54566	; 0xd526
 80037e0:	f7fd fc08 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 80037e4:	21cf      	movs	r1, #207	; 0xcf
 80037e6:	f24d 5027 	movw	r0, #54567	; 0xd527
 80037ea:	f7fd fc03 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 80037ee:	2102      	movs	r1, #2
 80037f0:	f24d 5028 	movw	r0, #54568	; 0xd528
 80037f4:	f7fd fbfe 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 80037f8:	21de      	movs	r1, #222	; 0xde
 80037fa:	f24d 5029 	movw	r0, #54569	; 0xd529
 80037fe:	f7fd fbf9 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 8003802:	2102      	movs	r1, #2
 8003804:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003808:	f7fd fbf4 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 800380c:	21f2      	movs	r1, #242	; 0xf2
 800380e:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003812:	f7fd fbef 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 8003816:	2102      	movs	r1, #2
 8003818:	f24d 502c 	movw	r0, #54572	; 0xd52c
 800381c:	f7fd fbea 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 8003820:	21fe      	movs	r1, #254	; 0xfe
 8003822:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003826:	f7fd fbe5 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 800382a:	2103      	movs	r1, #3
 800382c:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003830:	f7fd fbe0 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 8003834:	2110      	movs	r1, #16
 8003836:	f24d 502f 	movw	r0, #54575	; 0xd52f
 800383a:	f7fd fbdb 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 800383e:	2103      	movs	r1, #3
 8003840:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003844:	f7fd fbd6 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 8003848:	2133      	movs	r1, #51	; 0x33
 800384a:	f24d 5031 	movw	r0, #54577	; 0xd531
 800384e:	f7fd fbd1 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 8003852:	2103      	movs	r1, #3
 8003854:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003858:	f7fd fbcc 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 800385c:	216d      	movs	r1, #109	; 0x6d
 800385e:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003862:	f7fd fbc7 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 8003866:	2100      	movs	r1, #0
 8003868:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 800386c:	f7fd fbc2 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 8003870:	2133      	movs	r1, #51	; 0x33
 8003872:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003876:	f7fd fbbd 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 800387a:	2100      	movs	r1, #0
 800387c:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003880:	f7fd fbb8 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 8003884:	2134      	movs	r1, #52	; 0x34
 8003886:	f24d 6003 	movw	r0, #54787	; 0xd603
 800388a:	f7fd fbb3 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 800388e:	2100      	movs	r1, #0
 8003890:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003894:	f7fd fbae 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 8003898:	213a      	movs	r1, #58	; 0x3a
 800389a:	f24d 6005 	movw	r0, #54789	; 0xd605
 800389e:	f7fd fba9 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 80038a2:	2100      	movs	r1, #0
 80038a4:	f24d 6006 	movw	r0, #54790	; 0xd606
 80038a8:	f7fd fba4 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 80038ac:	214a      	movs	r1, #74	; 0x4a
 80038ae:	f24d 6007 	movw	r0, #54791	; 0xd607
 80038b2:	f7fd fb9f 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 80038b6:	2100      	movs	r1, #0
 80038b8:	f24d 6008 	movw	r0, #54792	; 0xd608
 80038bc:	f7fd fb9a 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 80038c0:	215c      	movs	r1, #92	; 0x5c
 80038c2:	f24d 6009 	movw	r0, #54793	; 0xd609
 80038c6:	f7fd fb95 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 80038ca:	2100      	movs	r1, #0
 80038cc:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80038d0:	f7fd fb90 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 80038d4:	2181      	movs	r1, #129	; 0x81
 80038d6:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80038da:	f7fd fb8b 	bl	8000ff4 <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 80038de:	2100      	movs	r1, #0
 80038e0:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80038e4:	f7fd fb86 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 80038e8:	21a6      	movs	r1, #166	; 0xa6
 80038ea:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80038ee:	f7fd fb81 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 80038f2:	2100      	movs	r1, #0
 80038f4:	f24d 600e 	movw	r0, #54798	; 0xd60e
 80038f8:	f7fd fb7c 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 80038fc:	21e5      	movs	r1, #229	; 0xe5
 80038fe:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003902:	f7fd fb77 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 8003906:	2101      	movs	r1, #1
 8003908:	f24d 6010 	movw	r0, #54800	; 0xd610
 800390c:	f7fd fb72 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 8003910:	2113      	movs	r1, #19
 8003912:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003916:	f7fd fb6d 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 800391a:	2101      	movs	r1, #1
 800391c:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003920:	f7fd fb68 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8003924:	2154      	movs	r1, #84	; 0x54
 8003926:	f24d 6013 	movw	r0, #54803	; 0xd613
 800392a:	f7fd fb63 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 800392e:	2101      	movs	r1, #1
 8003930:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003934:	f7fd fb5e 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 8003938:	2182      	movs	r1, #130	; 0x82
 800393a:	f24d 6015 	movw	r0, #54805	; 0xd615
 800393e:	f7fd fb59 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 8003942:	2101      	movs	r1, #1
 8003944:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003948:	f7fd fb54 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 800394c:	21ca      	movs	r1, #202	; 0xca
 800394e:	f24d 6017 	movw	r0, #54807	; 0xd617
 8003952:	f7fd fb4f 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 8003956:	2102      	movs	r1, #2
 8003958:	f24d 6018 	movw	r0, #54808	; 0xd618
 800395c:	f7fd fb4a 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 8003960:	2100      	movs	r1, #0
 8003962:	f24d 6019 	movw	r0, #54809	; 0xd619
 8003966:	f7fd fb45 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 800396a:	2102      	movs	r1, #2
 800396c:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8003970:	f7fd fb40 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 8003974:	2101      	movs	r1, #1
 8003976:	f24d 601b 	movw	r0, #54811	; 0xd61b
 800397a:	f7fd fb3b 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 800397e:	2102      	movs	r1, #2
 8003980:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8003984:	f7fd fb36 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 8003988:	2134      	movs	r1, #52	; 0x34
 800398a:	f24d 601d 	movw	r0, #54813	; 0xd61d
 800398e:	f7fd fb31 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 8003992:	2102      	movs	r1, #2
 8003994:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8003998:	f7fd fb2c 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 800399c:	2167      	movs	r1, #103	; 0x67
 800399e:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80039a2:	f7fd fb27 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 80039a6:	2102      	movs	r1, #2
 80039a8:	f24d 6020 	movw	r0, #54816	; 0xd620
 80039ac:	f7fd fb22 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 80039b0:	2184      	movs	r1, #132	; 0x84
 80039b2:	f24d 6021 	movw	r0, #54817	; 0xd621
 80039b6:	f7fd fb1d 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 80039ba:	2102      	movs	r1, #2
 80039bc:	f24d 6022 	movw	r0, #54818	; 0xd622
 80039c0:	f7fd fb18 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 80039c4:	21a4      	movs	r1, #164	; 0xa4
 80039c6:	f24d 6023 	movw	r0, #54819	; 0xd623
 80039ca:	f7fd fb13 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 80039ce:	2102      	movs	r1, #2
 80039d0:	f24d 6024 	movw	r0, #54820	; 0xd624
 80039d4:	f7fd fb0e 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 80039d8:	21b7      	movs	r1, #183	; 0xb7
 80039da:	f24d 6025 	movw	r0, #54821	; 0xd625
 80039de:	f7fd fb09 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 80039e2:	2102      	movs	r1, #2
 80039e4:	f24d 6026 	movw	r0, #54822	; 0xd626
 80039e8:	f7fd fb04 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 80039ec:	21cf      	movs	r1, #207	; 0xcf
 80039ee:	f24d 6027 	movw	r0, #54823	; 0xd627
 80039f2:	f7fd faff 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 80039f6:	2102      	movs	r1, #2
 80039f8:	f24d 6028 	movw	r0, #54824	; 0xd628
 80039fc:	f7fd fafa 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 8003a00:	21de      	movs	r1, #222	; 0xde
 8003a02:	f24d 6029 	movw	r0, #54825	; 0xd629
 8003a06:	f7fd faf5 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 8003a0a:	2102      	movs	r1, #2
 8003a0c:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8003a10:	f7fd faf0 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8003a14:	21f2      	movs	r1, #242	; 0xf2
 8003a16:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8003a1a:	f7fd faeb 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 8003a1e:	2102      	movs	r1, #2
 8003a20:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003a24:	f7fd fae6 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 8003a28:	21fe      	movs	r1, #254	; 0xfe
 8003a2a:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8003a2e:	f7fd fae1 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 8003a32:	2103      	movs	r1, #3
 8003a34:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003a38:	f7fd fadc 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 8003a3c:	2110      	movs	r1, #16
 8003a3e:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8003a42:	f7fd fad7 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 8003a46:	2103      	movs	r1, #3
 8003a48:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003a4c:	f7fd fad2 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 8003a50:	2133      	movs	r1, #51	; 0x33
 8003a52:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003a56:	f7fd facd 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 8003a5a:	2103      	movs	r1, #3
 8003a5c:	f24d 6032 	movw	r0, #54834	; 0xd632
 8003a60:	f7fd fac8 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 8003a64:	216d      	movs	r1, #109	; 0x6d
 8003a66:	f24d 6033 	movw	r0, #54835	; 0xd633
 8003a6a:	f7fd fac3 	bl	8000ff4 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 8003a6e:	2155      	movs	r1, #85	; 0x55
 8003a70:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003a74:	f7fd fabe 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8003a78:	21aa      	movs	r1, #170	; 0xaa
 8003a7a:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003a7e:	f7fd fab9 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8003a82:	2152      	movs	r1, #82	; 0x52
 8003a84:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003a88:	f7fd fab4 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8003a8c:	2108      	movs	r1, #8
 8003a8e:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003a92:	f7fd faaf 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 8003a96:	2100      	movs	r1, #0
 8003a98:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003a9c:	f7fd faaa 	bl	8000ff4 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8003aa0:	21cc      	movs	r1, #204	; 0xcc
 8003aa2:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003aa6:	f7fd faa5 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8003aaa:	2100      	movs	r1, #0
 8003aac:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003ab0:	f7fd faa0 	bl	8000ff4 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 8003ab4:	2105      	movs	r1, #5
 8003ab6:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003aba:	f7fd fa9b 	bl	8000ff4 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 8003abe:	2170      	movs	r1, #112	; 0x70
 8003ac0:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003ac4:	f7fd fa96 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 8003ac8:	2170      	movs	r1, #112	; 0x70
 8003aca:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003ace:	f7fd fa91 	bl	8000ff4 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003ad8:	f7fd fa8c 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 8003adc:	2103      	movs	r1, #3
 8003ade:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003ae2:	f7fd fa87 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 8003ae6:	2103      	movs	r1, #3
 8003ae8:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003aec:	f7fd fa82 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 8003af0:	2103      	movs	r1, #3
 8003af2:	f64b 0003 	movw	r0, #47107	; 0xb803
 8003af6:	f7fd fa7d 	bl	8000ff4 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 8003afa:	2102      	movs	r1, #2
 8003afc:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003b00:	f7fd fa78 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 8003b04:	2100      	movs	r1, #0
 8003b06:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003b0a:	f7fd fa73 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8003b0e:	2100      	movs	r1, #0
 8003b10:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003b14:	f7fd fa6e 	bl	8000ff4 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 8003b18:	21d0      	movs	r1, #208	; 0xd0
 8003b1a:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8003b1e:	f7fd fa69 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 8003b22:	2102      	movs	r1, #2
 8003b24:	f64c 1001 	movw	r0, #51457	; 0xc901
 8003b28:	f7fd fa64 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 8003b2c:	2150      	movs	r1, #80	; 0x50
 8003b2e:	f64c 1002 	movw	r0, #51458	; 0xc902
 8003b32:	f7fd fa5f 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 8003b36:	2150      	movs	r1, #80	; 0x50
 8003b38:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003b3c:	f7fd fa5a 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 8003b40:	2150      	movs	r1, #80	; 0x50
 8003b42:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003b46:	f7fd fa55 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8003b50:	f7fd fa50 	bl	8000ff4 <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 8003b54:	2155      	movs	r1, #85	; 0x55
 8003b56:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003b5a:	f7fd fa4b 	bl	8000ff4 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8003b5e:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8003b62:	f7fd fa0d 	bl	8000f80 <LCD_WR_REG>
		opt_delay(120);
 8003b66:	2078      	movs	r0, #120	; 0x78
 8003b68:	f7fd fa5a 	bl	8001020 <opt_delay>
		LCD_WR_REG(0x2900);
 8003b6c:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8003b70:	f7fd fa06 	bl	8000f80 <LCD_WR_REG>
 8003b74:	e0be      	b.n	8003cf4 <TFTLCD_Init+0x235c>
	}else if(lcddev.id==0X1963)
 8003b76:	4b7f      	ldr	r3, [pc, #508]	; (8003d74 <TFTLCD_Init+0x23dc>)
 8003b78:	889b      	ldrh	r3, [r3, #4]
 8003b7a:	f641 1263 	movw	r2, #6499	; 0x1963
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	f040 80b8 	bne.w	8003cf4 <TFTLCD_Init+0x235c>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8003b84:	20e2      	movs	r0, #226	; 0xe2
 8003b86:	f7fd f9fb 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 8003b8a:	201d      	movs	r0, #29
 8003b8c:	f7fd fa0c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8003b90:	2002      	movs	r0, #2
 8003b92:	f7fd fa09 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 8003b96:	2004      	movs	r0, #4
 8003b98:	f7fd fa06 	bl	8000fa8 <LCD_WR_DATA>
		opt_delay(100);
 8003b9c:	2064      	movs	r0, #100	; 0x64
 8003b9e:	f7fd fa3f 	bl	8001020 <opt_delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8003ba2:	20e0      	movs	r0, #224	; 0xe0
 8003ba4:	f7fd f9ec 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8003ba8:	2001      	movs	r0, #1
 8003baa:	f7fd f9fd 	bl	8000fa8 <LCD_WR_DATA>
		HAL_Delay(10);
 8003bae:	200a      	movs	r0, #10
 8003bb0:	f001 fc7c 	bl	80054ac <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8003bb4:	20e0      	movs	r0, #224	; 0xe0
 8003bb6:	f7fd f9e3 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 8003bba:	2003      	movs	r0, #3
 8003bbc:	f7fd f9f4 	bl	8000fa8 <LCD_WR_DATA>
		HAL_Delay(12);
 8003bc0:	200c      	movs	r0, #12
 8003bc2:	f001 fc73 	bl	80054ac <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8003bc6:	2001      	movs	r0, #1
 8003bc8:	f7fd f9da 	bl	8000f80 <LCD_WR_REG>
		HAL_Delay(10);
 8003bcc:	200a      	movs	r0, #10
 8003bce:	f001 fc6d 	bl	80054ac <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8003bd2:	20e6      	movs	r0, #230	; 0xe6
 8003bd4:	f7fd f9d4 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8003bd8:	202f      	movs	r0, #47	; 0x2f
 8003bda:	f7fd f9e5 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8003bde:	20ff      	movs	r0, #255	; 0xff
 8003be0:	f7fd f9e2 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8003be4:	20ff      	movs	r0, #255	; 0xff
 8003be6:	f7fd f9df 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 8003bea:	20b0      	movs	r0, #176	; 0xb0
 8003bec:	f7fd f9c8 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8003bf0:	2020      	movs	r0, #32
 8003bf2:	f7fd f9d9 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	f7fd f9d6 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 8003bfc:	2003      	movs	r0, #3
 8003bfe:	f7fd f9d3 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8003c02:	f240 301f 	movw	r0, #799	; 0x31f
 8003c06:	f7fd f9cf 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	f7fd f9cc 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8003c10:	f240 10df 	movw	r0, #479	; 0x1df
 8003c14:	f7fd f9c8 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 8003c18:	2000      	movs	r0, #0
 8003c1a:	f7fd f9c5 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 8003c1e:	20b4      	movs	r0, #180	; 0xb4
 8003c20:	f7fd f9ae 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8003c24:	2004      	movs	r0, #4
 8003c26:	f7fd f9bf 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 8003c2a:	f240 401f 	movw	r0, #1055	; 0x41f
 8003c2e:	f7fd f9bb 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 8003c32:	2000      	movs	r0, #0
 8003c34:	f7fd f9b8 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 8003c38:	202e      	movs	r0, #46	; 0x2e
 8003c3a:	f7fd f9b5 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8003c3e:	2000      	movs	r0, #0
 8003c40:	f7fd f9b2 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c44:	2000      	movs	r0, #0
 8003c46:	f7fd f9af 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	f7fd f9ac 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c50:	2000      	movs	r0, #0
 8003c52:	f7fd f9a9 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 8003c56:	20b6      	movs	r0, #182	; 0xb6
 8003c58:	f7fd f992 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8003c5c:	2002      	movs	r0, #2
 8003c5e:	f7fd f9a3 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 8003c62:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8003c66:	f7fd f99f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	f7fd f99c 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 8003c70:	2017      	movs	r0, #23
 8003c72:	f7fd f999 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8003c76:	2015      	movs	r0, #21
 8003c78:	f7fd f996 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	f7fd f993 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c82:	2000      	movs	r0, #0
 8003c84:	f7fd f990 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 8003c88:	20f0      	movs	r0, #240	; 0xf0
 8003c8a:	f7fd f979 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 8003c8e:	2003      	movs	r0, #3
 8003c90:	f7fd f98a 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 8003c94:	2029      	movs	r0, #41	; 0x29
 8003c96:	f7fd f973 	bl	8000f80 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8003c9a:	20d0      	movs	r0, #208	; 0xd0
 8003c9c:	f7fd f970 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	f7fd f981 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 8003ca6:	20be      	movs	r0, #190	; 0xbe
 8003ca8:	f7fd f96a 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8003cac:	2005      	movs	r0, #5
 8003cae:	f7fd f97b 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8003cb2:	20fe      	movs	r0, #254	; 0xfe
 8003cb4:	f7fd f978 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 8003cb8:	2001      	movs	r0, #1
 8003cba:	f7fd f975 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	f7fd f972 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f7fd f96f 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f7fd f96c 	bl	8000fa8 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8003cd0:	20b8      	movs	r0, #184	; 0xb8
 8003cd2:	f7fd f955 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8003cd6:	2003      	movs	r0, #3
 8003cd8:	f7fd f966 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 8003cdc:	2001      	movs	r0, #1
 8003cde:	f7fd f963 	bl	8000fa8 <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 8003ce2:	20ba      	movs	r0, #186	; 0xba
 8003ce4:	f7fd f94c 	bl	8000f80 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8003ce8:	2001      	movs	r0, #1
 8003cea:	f7fd f95d 	bl	8000fa8 <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 8003cee:	2064      	movs	r0, #100	; 0x64
 8003cf0:	f7fd fd4e 	bl	8001790 <LCD_SSD_BackLightSet>
	}
	//初始化完成以后,提速
	if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//如果是这几个IC,则设置WR时序为最快
 8003cf4:	4b1f      	ldr	r3, [pc, #124]	; (8003d74 <TFTLCD_Init+0x23dc>)
 8003cf6:	889b      	ldrh	r3, [r3, #4]
 8003cf8:	f249 3241 	movw	r2, #37697	; 0x9341
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d011      	beq.n	8003d24 <TFTLCD_Init+0x238c>
 8003d00:	4b1c      	ldr	r3, [pc, #112]	; (8003d74 <TFTLCD_Init+0x23dc>)
 8003d02:	889b      	ldrh	r3, [r3, #4]
 8003d04:	f245 3210 	movw	r2, #21264	; 0x5310
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00b      	beq.n	8003d24 <TFTLCD_Init+0x238c>
 8003d0c:	4b19      	ldr	r3, [pc, #100]	; (8003d74 <TFTLCD_Init+0x23dc>)
 8003d0e:	889b      	ldrh	r3, [r3, #4]
 8003d10:	f245 5210 	movw	r2, #21776	; 0x5510
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d005      	beq.n	8003d24 <TFTLCD_Init+0x238c>
 8003d18:	4b16      	ldr	r3, [pc, #88]	; (8003d74 <TFTLCD_Init+0x23dc>)
 8003d1a:	889b      	ldrh	r3, [r3, #4]
 8003d1c:	f641 1263 	movw	r2, #6499	; 0x1963
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d117      	bne.n	8003d54 <TFTLCD_Init+0x23bc>
	{
		//重新配置写时序控制寄存器的时序
		FSMC_Bank1E->BWTR[6]&=~(0XF<<0);//地址建立时间(ADDSET)清零
 8003d24:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <TFTLCD_Init+0x23e0>)
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	4a13      	ldr	r2, [pc, #76]	; (8003d78 <TFTLCD_Init+0x23e0>)
 8003d2a:	f023 030f 	bic.w	r3, r3, #15
 8003d2e:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]&=~(0XF<<8);//数据保存时间清零
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <TFTLCD_Init+0x23e0>)
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	4a10      	ldr	r2, [pc, #64]	; (8003d78 <TFTLCD_Init+0x23e0>)
 8003d36:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d3a:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=3<<0;		//地址建立时间(ADDSET)为3个HCLK =18ns
 8003d3c:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <TFTLCD_Init+0x23e0>)
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	4a0d      	ldr	r2, [pc, #52]	; (8003d78 <TFTLCD_Init+0x23e0>)
 8003d42:	f043 0303 	orr.w	r3, r3, #3
 8003d46:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=2<<8; 	//数据保存时间(DATAST)为6ns*3个HCLK=18ns
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <TFTLCD_Init+0x23e0>)
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	4a0a      	ldr	r2, [pc, #40]	; (8003d78 <TFTLCD_Init+0x23e0>)
 8003d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d52:	6193      	str	r3, [r2, #24]
	}
	LCD_Display_Dir(0);		//默认为竖屏
 8003d54:	2000      	movs	r0, #0
 8003d56:	f7fd fd4f 	bl	80017f8 <LCD_Display_Dir>
	GPIOB->ODR |= 1<<15;					//点亮背光
 8003d5a:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <TFTLCD_Init+0x23e4>)
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <TFTLCD_Init+0x23e4>)
 8003d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d64:	6153      	str	r3, [r2, #20]
	LCD_Clear(WHITE);
 8003d66:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003d6a:	f000 f809 	bl	8003d80 <LCD_Clear>
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	200002f4 	.word	0x200002f4
 8003d78:	a0000104 	.word	0xa0000104
 8003d7c:	40020400 	.word	0x40020400

08003d80 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(uint32_t color)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	uint32_t index=0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint=lcddev.width;
 8003d8c:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <LCD_Clear+0x54>)
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <LCD_Clear+0x54>)
 8003d94:	885b      	ldrh	r3, [r3, #2]
 8003d96:	461a      	mov	r2, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	fb02 f303 	mul.w	r3, r2, r3
 8003d9e:	60bb      	str	r3, [r7, #8]
	LCD_SetCursor(0x00,0x0000);			//设置光标位置
 8003da0:	2100      	movs	r1, #0
 8003da2:	2000      	movs	r0, #0
 8003da4:	f7fd f95e 	bl	8001064 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 8003da8:	f7fd f94c 	bl	8001044 <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 8003dac:	2300      	movs	r3, #0
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	e006      	b.n	8003dc0 <LCD_Clear+0x40>
	{
		TFT_LCD->LCD_RAM=color;
 8003db2:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <LCD_Clear+0x58>)
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	b292      	uxth	r2, r2
 8003db8:	805a      	strh	r2, [r3, #2]
	for(index=0;index<totalpoint;index++)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d3f4      	bcc.n	8003db2 <LCD_Clear+0x32>
	}
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	200002f4 	.word	0x200002f4
 8003dd8:	6c00007e 	.word	0x6c00007e

08003ddc <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24/32
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 8003ddc:	b590      	push	{r4, r7, lr}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4604      	mov	r4, r0
 8003de4:	4608      	mov	r0, r1
 8003de6:	4611      	mov	r1, r2
 8003de8:	461a      	mov	r2, r3
 8003dea:	4623      	mov	r3, r4
 8003dec:	80fb      	strh	r3, [r7, #6]
 8003dee:	4603      	mov	r3, r0
 8003df0:	80bb      	strh	r3, [r7, #4]
 8003df2:	460b      	mov	r3, r1
 8003df4:	70fb      	strb	r3, [r7, #3]
 8003df6:	4613      	mov	r3, r2
 8003df8:	70bb      	strb	r3, [r7, #2]
    uint8_t temp,t1,t;
	uint16_t y0=y;
 8003dfa:	88bb      	ldrh	r3, [r7, #4]
 8003dfc:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 8003dfe:	78bb      	ldrb	r3, [r7, #2]
 8003e00:	08db      	lsrs	r3, r3, #3
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	78bb      	ldrb	r3, [r7, #2]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	bf14      	ite	ne
 8003e12:	2301      	movne	r3, #1
 8003e14:	2300      	moveq	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	78bb      	ldrb	r3, [r7, #2]
 8003e1e:	085b      	lsrs	r3, r3, #1
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	fb12 f303 	smulbb	r3, r2, r3
 8003e26:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	3b20      	subs	r3, #32
 8003e2c:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	737b      	strb	r3, [r7, #13]
 8003e32:	e08f      	b.n	8003f54 <LCD_ShowChar+0x178>
	{
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
 8003e34:	78bb      	ldrb	r3, [r7, #2]
 8003e36:	2b0c      	cmp	r3, #12
 8003e38:	d10b      	bne.n	8003e52 <LCD_ShowChar+0x76>
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	7b79      	ldrb	r1, [r7, #13]
 8003e3e:	484b      	ldr	r0, [pc, #300]	; (8003f6c <LCD_ShowChar+0x190>)
 8003e40:	4613      	mov	r3, r2
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4403      	add	r3, r0
 8003e4a:	440b      	add	r3, r1
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	73fb      	strb	r3, [r7, #15]
 8003e50:	e03f      	b.n	8003ed2 <LCD_ShowChar+0xf6>
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
 8003e52:	78bb      	ldrb	r3, [r7, #2]
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d108      	bne.n	8003e6a <LCD_ShowChar+0x8e>
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	7b7b      	ldrb	r3, [r7, #13]
 8003e5c:	4944      	ldr	r1, [pc, #272]	; (8003f70 <LCD_ShowChar+0x194>)
 8003e5e:	0112      	lsls	r2, r2, #4
 8003e60:	440a      	add	r2, r1
 8003e62:	4413      	add	r3, r2
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	73fb      	strb	r3, [r7, #15]
 8003e68:	e033      	b.n	8003ed2 <LCD_ShowChar+0xf6>
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
 8003e6a:	78bb      	ldrb	r3, [r7, #2]
 8003e6c:	2b18      	cmp	r3, #24
 8003e6e:	d10b      	bne.n	8003e88 <LCD_ShowChar+0xac>
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	7b79      	ldrb	r1, [r7, #13]
 8003e74:	483f      	ldr	r0, [pc, #252]	; (8003f74 <LCD_ShowChar+0x198>)
 8003e76:	4613      	mov	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4403      	add	r3, r0
 8003e80:	440b      	add	r3, r1
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	73fb      	strb	r3, [r7, #15]
 8003e86:	e024      	b.n	8003ed2 <LCD_ShowChar+0xf6>
		else if(size==32)temp=asc2_3216[num][t];	//调用3216字体
 8003e88:	78bb      	ldrb	r3, [r7, #2]
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d108      	bne.n	8003ea0 <LCD_ShowChar+0xc4>
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	7b7b      	ldrb	r3, [r7, #13]
 8003e92:	4939      	ldr	r1, [pc, #228]	; (8003f78 <LCD_ShowChar+0x19c>)
 8003e94:	0192      	lsls	r2, r2, #6
 8003e96:	440a      	add	r2, r1
 8003e98:	4413      	add	r3, r2
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	73fb      	strb	r3, [r7, #15]
 8003e9e:	e018      	b.n	8003ed2 <LCD_ShowChar+0xf6>
		else if(size==48)temp=asc2_4824[num][t];	//调用4824字体
 8003ea0:	78bb      	ldrb	r3, [r7, #2]
 8003ea2:	2b30      	cmp	r3, #48	; 0x30
 8003ea4:	d10a      	bne.n	8003ebc <LCD_ShowChar+0xe0>
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	7b7b      	ldrb	r3, [r7, #13]
 8003eaa:	4934      	ldr	r1, [pc, #208]	; (8003f7c <LCD_ShowChar+0x1a0>)
 8003eac:	20a8      	movs	r0, #168	; 0xa8
 8003eae:	fb00 f202 	mul.w	r2, r0, r2
 8003eb2:	440a      	add	r2, r1
 8003eb4:	4413      	add	r3, r2
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	73fb      	strb	r3, [r7, #15]
 8003eba:	e00a      	b.n	8003ed2 <LCD_ShowChar+0xf6>
		else if(size==64)temp=asc2_6432[num][t];	//调用6432字体
 8003ebc:	78bb      	ldrb	r3, [r7, #2]
 8003ebe:	2b40      	cmp	r3, #64	; 0x40
 8003ec0:	d14e      	bne.n	8003f60 <LCD_ShowChar+0x184>
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	7b7b      	ldrb	r3, [r7, #13]
 8003ec6:	492e      	ldr	r1, [pc, #184]	; (8003f80 <LCD_ShowChar+0x1a4>)
 8003ec8:	0212      	lsls	r2, r2, #8
 8003eca:	440a      	add	r2, r1
 8003ecc:	4413      	add	r3, r2
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	73bb      	strb	r3, [r7, #14]
 8003ed6:	e035      	b.n	8003f44 <LCD_ShowChar+0x168>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 8003ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	da07      	bge.n	8003ef0 <LCD_ShowChar+0x114>
 8003ee0:	4b28      	ldr	r3, [pc, #160]	; (8003f84 <LCD_ShowChar+0x1a8>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	88b9      	ldrh	r1, [r7, #4]
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fd fb39 	bl	8001560 <LCD_Fast_DrawPoint>
 8003eee:	e00a      	b.n	8003f06 <LCD_ShowChar+0x12a>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 8003ef0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d106      	bne.n	8003f06 <LCD_ShowChar+0x12a>
 8003ef8:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <LCD_ShowChar+0x1ac>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	88b9      	ldrh	r1, [r7, #4]
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fd fb2d 	bl	8001560 <LCD_Fast_DrawPoint>
			temp<<=1;
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
			y++;
 8003f0c:	88bb      	ldrh	r3, [r7, #4]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 8003f12:	4b1e      	ldr	r3, [pc, #120]	; (8003f8c <LCD_ShowChar+0x1b0>)
 8003f14:	885b      	ldrh	r3, [r3, #2]
 8003f16:	88ba      	ldrh	r2, [r7, #4]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d223      	bcs.n	8003f64 <LCD_ShowChar+0x188>
			if((y-y0)==size)
 8003f1c:	88ba      	ldrh	r2, [r7, #4]
 8003f1e:	897b      	ldrh	r3, [r7, #10]
 8003f20:	1ad2      	subs	r2, r2, r3
 8003f22:	78bb      	ldrb	r3, [r7, #2]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d10a      	bne.n	8003f3e <LCD_ShowChar+0x162>
			{
				y=y0;
 8003f28:	897b      	ldrh	r3, [r7, #10]
 8003f2a:	80bb      	strh	r3, [r7, #4]
				x++;
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 8003f32:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <LCD_ShowChar+0x1b0>)
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d307      	bcc.n	8003f4c <LCD_ShowChar+0x170>
 8003f3c:	e013      	b.n	8003f66 <LCD_ShowChar+0x18a>
		for(t1=0;t1<8;t1++)
 8003f3e:	7bbb      	ldrb	r3, [r7, #14]
 8003f40:	3301      	adds	r3, #1
 8003f42:	73bb      	strb	r3, [r7, #14]
 8003f44:	7bbb      	ldrb	r3, [r7, #14]
 8003f46:	2b07      	cmp	r3, #7
 8003f48:	d9c6      	bls.n	8003ed8 <LCD_ShowChar+0xfc>
 8003f4a:	e000      	b.n	8003f4e <LCD_ShowChar+0x172>
				break;
 8003f4c:	bf00      	nop
	for(t=0;t<csize;t++)
 8003f4e:	7b7b      	ldrb	r3, [r7, #13]
 8003f50:	3301      	adds	r3, #1
 8003f52:	737b      	strb	r3, [r7, #13]
 8003f54:	7b7a      	ldrb	r2, [r7, #13]
 8003f56:	7a7b      	ldrb	r3, [r7, #9]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	f4ff af6b 	bcc.w	8003e34 <LCD_ShowChar+0x58>
 8003f5e:	e002      	b.n	8003f66 <LCD_ShowChar+0x18a>
		else return;								//没有的字库
 8003f60:	bf00      	nop
 8003f62:	e000      	b.n	8003f66 <LCD_ShowChar+0x18a>
			if(y>=lcddev.height)return;		//超区域了
 8003f64:	bf00      	nop
			}
		}
	}
}
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd90      	pop	{r4, r7, pc}
 8003f6c:	0800afd4 	.word	0x0800afd4
 8003f70:	0800b448 	.word	0x0800b448
 8003f74:	0800ba38 	.word	0x0800ba38
 8003f78:	0800c794 	.word	0x0800c794
 8003f7c:	0800df54 	.word	0x0800df54
 8003f80:	08011dac 	.word	0x08011dac
 8003f84:	20000000 	.word	0x20000000
 8003f88:	20000004 	.word	0x20000004
 8003f8c:	200002f4 	.word	0x200002f4

08003f90 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	4604      	mov	r4, r0
 8003f98:	4608      	mov	r0, r1
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	80fb      	strh	r3, [r7, #6]
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	80bb      	strh	r3, [r7, #4]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	807b      	strh	r3, [r7, #2]
 8003faa:	4613      	mov	r3, r2
 8003fac:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8003fb2:	887a      	ldrh	r2, [r7, #2]
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	807b      	strh	r3, [r7, #2]
	height+=y;
 8003fba:	883a      	ldrh	r2, [r7, #0]
 8003fbc:	88bb      	ldrh	r3, [r7, #4]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8003fc2:	e024      	b.n	800400e <LCD_ShowString+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 8003fc4:	88fa      	ldrh	r2, [r7, #6]
 8003fc6:	887b      	ldrh	r3, [r7, #2]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d307      	bcc.n	8003fdc <LCD_ShowString+0x4c>
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	80fb      	strh	r3, [r7, #6]
 8003fd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	88bb      	ldrh	r3, [r7, #4]
 8003fd8:	4413      	add	r3, r2
 8003fda:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 8003fdc:	88ba      	ldrh	r2, [r7, #4]
 8003fde:	883b      	ldrh	r3, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d21d      	bcs.n	8004020 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	781a      	ldrb	r2, [r3, #0]
 8003fe8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003fec:	88b9      	ldrh	r1, [r7, #4]
 8003fee:	88f8      	ldrh	r0, [r7, #6]
 8003ff0:	2400      	movs	r4, #0
 8003ff2:	9400      	str	r4, [sp, #0]
 8003ff4:	f7ff fef2 	bl	8003ddc <LCD_ShowChar>
        x+=size/2;
 8003ff8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ffc:	085b      	lsrs	r3, r3, #1
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	b29a      	uxth	r2, r3
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	4413      	add	r3, r2
 8004006:	80fb      	strh	r3, [r7, #6]
        p++;
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	3301      	adds	r3, #1
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b7e      	cmp	r3, #126	; 0x7e
 8004014:	d805      	bhi.n	8004022 <LCD_ShowString+0x92>
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b1f      	cmp	r3, #31
 800401c:	d8d2      	bhi.n	8003fc4 <LCD_ShowString+0x34>
    }
}
 800401e:	e000      	b.n	8004022 <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 8004020:	bf00      	nop
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	bd90      	pop	{r4, r7, pc}

0800402a <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 800402a:	b580      	push	{r7, lr}
 800402c:	b088      	sub	sp, #32
 800402e:	af04      	add	r7, sp, #16
 8004030:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8004032:	2364      	movs	r3, #100	; 0x64
 8004034:	9302      	str	r3, [sp, #8]
 8004036:	2301      	movs	r3, #1
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	f107 030f 	add.w	r3, r7, #15
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	2301      	movs	r3, #1
 8004042:	2275      	movs	r2, #117	; 0x75
 8004044:	21d0      	movs	r1, #208	; 0xd0
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f001 ff2e 	bl	8005ea8 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	2b68      	cmp	r3, #104	; 0x68
 8004050:	d13d      	bne.n	80040ce <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8004052:	2300      	movs	r3, #0
 8004054:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8004056:	2364      	movs	r3, #100	; 0x64
 8004058:	9302      	str	r3, [sp, #8]
 800405a:	2301      	movs	r3, #1
 800405c:	9301      	str	r3, [sp, #4]
 800405e:	f107 030e 	add.w	r3, r7, #14
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	2301      	movs	r3, #1
 8004066:	226b      	movs	r2, #107	; 0x6b
 8004068:	21d0      	movs	r1, #208	; 0xd0
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f001 fe22 	bl	8005cb4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8004070:	2307      	movs	r3, #7
 8004072:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8004074:	2364      	movs	r3, #100	; 0x64
 8004076:	9302      	str	r3, [sp, #8]
 8004078:	2301      	movs	r3, #1
 800407a:	9301      	str	r3, [sp, #4]
 800407c:	f107 030e 	add.w	r3, r7, #14
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	2301      	movs	r3, #1
 8004084:	2219      	movs	r2, #25
 8004086:	21d0      	movs	r1, #208	; 0xd0
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f001 fe13 	bl	8005cb4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800408e:	2300      	movs	r3, #0
 8004090:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8004092:	2364      	movs	r3, #100	; 0x64
 8004094:	9302      	str	r3, [sp, #8]
 8004096:	2301      	movs	r3, #1
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	f107 030e 	add.w	r3, r7, #14
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	2301      	movs	r3, #1
 80040a2:	221c      	movs	r2, #28
 80040a4:	21d0      	movs	r1, #208	; 0xd0
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f001 fe04 	bl	8005cb4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80040ac:	2300      	movs	r3, #0
 80040ae:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80040b0:	2364      	movs	r3, #100	; 0x64
 80040b2:	9302      	str	r3, [sp, #8]
 80040b4:	2301      	movs	r3, #1
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	f107 030e 	add.w	r3, r7, #14
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	2301      	movs	r3, #1
 80040c0:	221b      	movs	r2, #27
 80040c2:	21d0      	movs	r1, #208	; 0xd0
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f001 fdf5 	bl	8005cb4 <HAL_I2C_Mem_Write>
        return 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	e000      	b.n	80040d0 <MPU6050_Init+0xa6>
    }
    return 1;
 80040ce:	2301      	movs	r3, #1
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80040d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040dc:	b094      	sub	sp, #80	; 0x50
 80040de:	af04      	add	r7, sp, #16
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80040e4:	2364      	movs	r3, #100	; 0x64
 80040e6:	9302      	str	r3, [sp, #8]
 80040e8:	230e      	movs	r3, #14
 80040ea:	9301      	str	r3, [sp, #4]
 80040ec:	f107 0308 	add.w	r3, r7, #8
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	2301      	movs	r3, #1
 80040f4:	223b      	movs	r2, #59	; 0x3b
 80040f6:	21d0      	movs	r1, #208	; 0xd0
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f001 fed5 	bl	8005ea8 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80040fe:	7a3b      	ldrb	r3, [r7, #8]
 8004100:	021b      	lsls	r3, r3, #8
 8004102:	b21a      	sxth	r2, r3
 8004104:	7a7b      	ldrb	r3, [r7, #9]
 8004106:	b21b      	sxth	r3, r3
 8004108:	4313      	orrs	r3, r2
 800410a:	b21a      	sxth	r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8004110:	7abb      	ldrb	r3, [r7, #10]
 8004112:	021b      	lsls	r3, r3, #8
 8004114:	b21a      	sxth	r2, r3
 8004116:	7afb      	ldrb	r3, [r7, #11]
 8004118:	b21b      	sxth	r3, r3
 800411a:	4313      	orrs	r3, r2
 800411c:	b21a      	sxth	r2, r3
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8004122:	7b3b      	ldrb	r3, [r7, #12]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	b21a      	sxth	r2, r3
 8004128:	7b7b      	ldrb	r3, [r7, #13]
 800412a:	b21b      	sxth	r3, r3
 800412c:	4313      	orrs	r3, r2
 800412e:	b21a      	sxth	r2, r3
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8004134:	7bbb      	ldrb	r3, [r7, #14]
 8004136:	021b      	lsls	r3, r3, #8
 8004138:	b21a      	sxth	r2, r3
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	b21b      	sxth	r3, r3
 800413e:	4313      	orrs	r3, r2
 8004140:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8004142:	7c3b      	ldrb	r3, [r7, #16]
 8004144:	021b      	lsls	r3, r3, #8
 8004146:	b21a      	sxth	r2, r3
 8004148:	7c7b      	ldrb	r3, [r7, #17]
 800414a:	b21b      	sxth	r3, r3
 800414c:	4313      	orrs	r3, r2
 800414e:	b21a      	sxth	r2, r3
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8004154:	7cbb      	ldrb	r3, [r7, #18]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	b21a      	sxth	r2, r3
 800415a:	7cfb      	ldrb	r3, [r7, #19]
 800415c:	b21b      	sxth	r3, r3
 800415e:	4313      	orrs	r3, r2
 8004160:	b21a      	sxth	r2, r3
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8004166:	7d3b      	ldrb	r3, [r7, #20]
 8004168:	021b      	lsls	r3, r3, #8
 800416a:	b21a      	sxth	r2, r3
 800416c:	7d7b      	ldrb	r3, [r7, #21]
 800416e:	b21b      	sxth	r3, r3
 8004170:	4313      	orrs	r3, r2
 8004172:	b21a      	sxth	r2, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800417e:	4618      	mov	r0, r3
 8004180:	f7fc f9d0 	bl	8000524 <__aeabi_i2d>
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	4bbd      	ldr	r3, [pc, #756]	; (8004480 <MPU6050_Read_All+0x3a8>)
 800418a:	f7fc fb5f 	bl	800084c <__aeabi_ddiv>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	6839      	ldr	r1, [r7, #0]
 8004194:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fc f9c0 	bl	8000524 <__aeabi_i2d>
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	4bb5      	ldr	r3, [pc, #724]	; (8004480 <MPU6050_Read_All+0x3a8>)
 80041aa:	f7fc fb4f 	bl	800084c <__aeabi_ddiv>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	6839      	ldr	r1, [r7, #0]
 80041b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fc f9b0 	bl	8000524 <__aeabi_i2d>
 80041c4:	a3a8      	add	r3, pc, #672	; (adr r3, 8004468 <MPU6050_Read_All+0x390>)
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	f7fc fb3f 	bl	800084c <__aeabi_ddiv>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	6839      	ldr	r1, [r7, #0]
 80041d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80041d8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80041dc:	ee07 3a90 	vmov	s15, r3
 80041e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041e4:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8004484 <MPU6050_Read_All+0x3ac>
 80041e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041ec:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8004488 <MPU6050_Read_All+0x3b0>
 80041f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004200:	4618      	mov	r0, r3
 8004202:	f7fc f98f 	bl	8000524 <__aeabi_i2d>
 8004206:	a39a      	add	r3, pc, #616	; (adr r3, 8004470 <MPU6050_Read_All+0x398>)
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f7fc fb1e 	bl	800084c <__aeabi_ddiv>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	6839      	ldr	r1, [r7, #0]
 8004216:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8004220:	4618      	mov	r0, r3
 8004222:	f7fc f97f 	bl	8000524 <__aeabi_i2d>
 8004226:	a392      	add	r3, pc, #584	; (adr r3, 8004470 <MPU6050_Read_All+0x398>)
 8004228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422c:	f7fc fb0e 	bl	800084c <__aeabi_ddiv>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	6839      	ldr	r1, [r7, #0]
 8004236:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004240:	4618      	mov	r0, r3
 8004242:	f7fc f96f 	bl	8000524 <__aeabi_i2d>
 8004246:	a38a      	add	r3, pc, #552	; (adr r3, 8004470 <MPU6050_Read_All+0x398>)
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f7fc fafe 	bl	800084c <__aeabi_ddiv>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	6839      	ldr	r1, [r7, #0]
 8004256:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 800425a:	f001 f91b 	bl	8005494 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	4b8a      	ldr	r3, [pc, #552]	; (800448c <MPU6050_Read_All+0x3b4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	4618      	mov	r0, r3
 8004268:	f7fc f94c 	bl	8000504 <__aeabi_ui2d>
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	4b87      	ldr	r3, [pc, #540]	; (8004490 <MPU6050_Read_All+0x3b8>)
 8004272:	f7fc faeb 	bl	800084c <__aeabi_ddiv>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800427e:	f001 f909 	bl	8005494 <HAL_GetTick>
 8004282:	4603      	mov	r3, r0
 8004284:	4a81      	ldr	r2, [pc, #516]	; (800448c <MPU6050_Read_All+0x3b4>)
 8004286:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800428e:	461a      	mov	r2, r3
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004296:	fb03 f202 	mul.w	r2, r3, r2
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80042a0:	4619      	mov	r1, r3
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80042a8:	fb03 f301 	mul.w	r3, r3, r1
 80042ac:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fc f938 	bl	8000524 <__aeabi_i2d>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	ec43 2b10 	vmov	d0, r2, r3
 80042bc:	f006 fc7c 	bl	800abb8 <sqrt>
 80042c0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80042d0:	f7fc fbfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d11f      	bne.n	800431a <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fc f91f 	bl	8000524 <__aeabi_i2d>
 80042e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ea:	f7fc faaf 	bl	800084c <__aeabi_ddiv>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	ec43 2b17 	vmov	d7, r2, r3
 80042f6:	eeb0 0a47 	vmov.f32	s0, s14
 80042fa:	eef0 0a67 	vmov.f32	s1, s15
 80042fe:	f006 faaf 	bl	800a860 <atan>
 8004302:	ec51 0b10 	vmov	r0, r1, d0
 8004306:	a35c      	add	r3, pc, #368	; (adr r3, 8004478 <MPU6050_Read_All+0x3a0>)
 8004308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430c:	f7fc f974 	bl	80005f8 <__aeabi_dmul>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8004318:	e005      	b.n	8004326 <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800432c:	425b      	negs	r3, r3
 800432e:	4618      	mov	r0, r3
 8004330:	f7fc f8f8 	bl	8000524 <__aeabi_i2d>
 8004334:	4682      	mov	sl, r0
 8004336:	468b      	mov	fp, r1
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800433e:	4618      	mov	r0, r3
 8004340:	f7fc f8f0 	bl	8000524 <__aeabi_i2d>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	ec43 2b11 	vmov	d1, r2, r3
 800434c:	ec4b ab10 	vmov	d0, sl, fp
 8004350:	f006 fc2f 	bl	800abb2 <atan2>
 8004354:	ec51 0b10 	vmov	r0, r1, d0
 8004358:	a347      	add	r3, pc, #284	; (adr r3, 8004478 <MPU6050_Read_All+0x3a0>)
 800435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435e:	f7fc f94b 	bl	80005f8 <__aeabi_dmul>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	4b49      	ldr	r3, [pc, #292]	; (8004494 <MPU6050_Read_All+0x3bc>)
 8004370:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004374:	f7fc fbb2 	bl	8000adc <__aeabi_dcmplt>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <MPU6050_Read_All+0x2bc>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	4b43      	ldr	r3, [pc, #268]	; (8004498 <MPU6050_Read_All+0x3c0>)
 800438a:	f7fc fbc5 	bl	8000b18 <__aeabi_dcmpgt>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d114      	bne.n	80043be <MPU6050_Read_All+0x2e6>
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	4b3f      	ldr	r3, [pc, #252]	; (8004498 <MPU6050_Read_All+0x3c0>)
 800439a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800439e:	f7fc fbbb 	bl	8000b18 <__aeabi_dcmpgt>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d015      	beq.n	80043d4 <MPU6050_Read_All+0x2fc>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	4b38      	ldr	r3, [pc, #224]	; (8004494 <MPU6050_Read_All+0x3bc>)
 80043b4:	f7fc fb92 	bl	8000adc <__aeabi_dcmplt>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 80043be:	4937      	ldr	r1, [pc, #220]	; (800449c <MPU6050_Read_All+0x3c4>)
 80043c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80043c8:	6839      	ldr	r1, [r7, #0]
 80043ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043ce:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80043d2:	e014      	b.n	80043fe <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80043da:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80043de:	eeb0 1a47 	vmov.f32	s2, s14
 80043e2:	eef0 1a67 	vmov.f32	s3, s15
 80043e6:	ed97 0b06 	vldr	d0, [r7, #24]
 80043ea:	482c      	ldr	r0, [pc, #176]	; (800449c <MPU6050_Read_All+0x3c4>)
 80043ec:	f000 f85a 	bl	80044a4 <Kalman_getAngle>
 80043f0:	eeb0 7a40 	vmov.f32	s14, s0
 80043f4:	eef0 7a60 	vmov.f32	s15, s1
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004404:	4690      	mov	r8, r2
 8004406:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	4b22      	ldr	r3, [pc, #136]	; (8004498 <MPU6050_Read_All+0x3c0>)
 8004410:	4640      	mov	r0, r8
 8004412:	4649      	mov	r1, r9
 8004414:	f7fc fb80 	bl	8000b18 <__aeabi_dcmpgt>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d008      	beq.n	8004430 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004424:	4614      	mov	r4, r2
 8004426:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004436:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800443a:	eeb0 1a47 	vmov.f32	s2, s14
 800443e:	eef0 1a67 	vmov.f32	s3, s15
 8004442:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8004446:	4816      	ldr	r0, [pc, #88]	; (80044a0 <MPU6050_Read_All+0x3c8>)
 8004448:	f000 f82c 	bl	80044a4 <Kalman_getAngle>
 800444c:	eeb0 7a40 	vmov.f32	s14, s0
 8004450:	eef0 7a60 	vmov.f32	s15, s1
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 800445a:	bf00      	nop
 800445c:	3740      	adds	r7, #64	; 0x40
 800445e:	46bd      	mov	sp, r7
 8004460:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004464:	f3af 8000 	nop.w
 8004468:	00000000 	.word	0x00000000
 800446c:	40cc2900 	.word	0x40cc2900
 8004470:	00000000 	.word	0x00000000
 8004474:	40606000 	.word	0x40606000
 8004478:	1a63c1f8 	.word	0x1a63c1f8
 800447c:	404ca5dc 	.word	0x404ca5dc
 8004480:	40d00000 	.word	0x40d00000
 8004484:	43aa0000 	.word	0x43aa0000
 8004488:	42121eb8 	.word	0x42121eb8
 800448c:	20000304 	.word	0x20000304
 8004490:	408f4000 	.word	0x408f4000
 8004494:	c0568000 	.word	0xc0568000
 8004498:	40568000 	.word	0x40568000
 800449c:	20000050 	.word	0x20000050
 80044a0:	20000008 	.word	0x20000008

080044a4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80044a4:	b5b0      	push	{r4, r5, r7, lr}
 80044a6:	b096      	sub	sp, #88	; 0x58
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	61f8      	str	r0, [r7, #28]
 80044ac:	ed87 0b04 	vstr	d0, [r7, #16]
 80044b0:	ed87 1b02 	vstr	d1, [r7, #8]
 80044b4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80044be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044c2:	f7fb fee1 	bl	8000288 <__aeabi_dsub>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80044d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044dc:	f7fc f88c 	bl	80005f8 <__aeabi_dmul>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4620      	mov	r0, r4
 80044e6:	4629      	mov	r1, r5
 80044e8:	f7fb fed0 	bl	800028c <__adddf3>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	69f9      	ldr	r1, [r7, #28]
 80044f2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004502:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004506:	f7fc f877 	bl	80005f8 <__aeabi_dmul>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4610      	mov	r0, r2
 8004510:	4619      	mov	r1, r3
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004518:	f7fb feb6 	bl	8000288 <__aeabi_dsub>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800452a:	f7fb fead 	bl	8000288 <__aeabi_dsub>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4610      	mov	r0, r2
 8004534:	4619      	mov	r1, r3
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f7fb fea6 	bl	800028c <__adddf3>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4610      	mov	r0, r2
 8004546:	4619      	mov	r1, r3
 8004548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800454c:	f7fc f854 	bl	80005f8 <__aeabi_dmul>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4620      	mov	r0, r4
 8004556:	4629      	mov	r1, r5
 8004558:	f7fb fe98 	bl	800028c <__adddf3>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	69f9      	ldr	r1, [r7, #28]
 8004562:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004572:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004576:	f7fc f83f 	bl	80005f8 <__aeabi_dmul>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4620      	mov	r0, r4
 8004580:	4629      	mov	r1, r5
 8004582:	f7fb fe81 	bl	8000288 <__aeabi_dsub>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	69f9      	ldr	r1, [r7, #28]
 800458c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800459c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045a0:	f7fc f82a 	bl	80005f8 <__aeabi_dmul>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4620      	mov	r0, r4
 80045aa:	4629      	mov	r1, r5
 80045ac:	f7fb fe6c 	bl	8000288 <__aeabi_dsub>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	69f9      	ldr	r1, [r7, #28]
 80045b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80045c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ca:	f7fc f815 	bl	80005f8 <__aeabi_dmul>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4620      	mov	r0, r4
 80045d4:	4629      	mov	r1, r5
 80045d6:	f7fb fe59 	bl	800028c <__adddf3>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	69f9      	ldr	r1, [r7, #28]
 80045e0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80045f0:	f7fb fe4c 	bl	800028c <__adddf3>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004602:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004606:	f7fc f921 	bl	800084c <__aeabi_ddiv>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004618:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800461c:	f7fc f916 	bl	800084c <__aeabi_ddiv>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800462e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004632:	f7fb fe29 	bl	8000288 <__aeabi_dsub>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004644:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004648:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800464c:	f7fb ffd4 	bl	80005f8 <__aeabi_dmul>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4620      	mov	r0, r4
 8004656:	4629      	mov	r1, r5
 8004658:	f7fb fe18 	bl	800028c <__adddf3>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	69f9      	ldr	r1, [r7, #28]
 8004662:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800466c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004670:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004674:	f7fb ffc0 	bl	80005f8 <__aeabi_dmul>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4620      	mov	r0, r4
 800467e:	4629      	mov	r1, r5
 8004680:	f7fb fe04 	bl	800028c <__adddf3>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	69f9      	ldr	r1, [r7, #28]
 800468a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004694:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800469e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80046a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80046ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046b0:	f7fb ffa2 	bl	80005f8 <__aeabi_dmul>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4620      	mov	r0, r4
 80046ba:	4629      	mov	r1, r5
 80046bc:	f7fb fde4 	bl	8000288 <__aeabi_dsub>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	69f9      	ldr	r1, [r7, #28]
 80046c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80046d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80046d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80046d8:	f7fb ff8e 	bl	80005f8 <__aeabi_dmul>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4620      	mov	r0, r4
 80046e2:	4629      	mov	r1, r5
 80046e4:	f7fb fdd0 	bl	8000288 <__aeabi_dsub>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	69f9      	ldr	r1, [r7, #28]
 80046ee:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80046f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004700:	f7fb ff7a 	bl	80005f8 <__aeabi_dmul>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4620      	mov	r0, r4
 800470a:	4629      	mov	r1, r5
 800470c:	f7fb fdbc 	bl	8000288 <__aeabi_dsub>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	69f9      	ldr	r1, [r7, #28]
 8004716:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8004720:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004724:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004728:	f7fb ff66 	bl	80005f8 <__aeabi_dmul>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4620      	mov	r0, r4
 8004732:	4629      	mov	r1, r5
 8004734:	f7fb fda8 	bl	8000288 <__aeabi_dsub>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	69f9      	ldr	r1, [r7, #28]
 800473e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004748:	ec43 2b17 	vmov	d7, r2, r3
};
 800474c:	eeb0 0a47 	vmov.f32	s0, s14
 8004750:	eef0 0a67 	vmov.f32	s1, s15
 8004754:	3758      	adds	r7, #88	; 0x58
 8004756:	46bd      	mov	sp, r7
 8004758:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800475c <usart1_send_char>:


//串口1发送1个字符
//c:要发送的字符
void usart1_send_char(uint8_t c)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	71fb      	strb	r3, [r7, #7]
	while(__HAL_UART_GET_FLAG(&huart1,UART_FLAG_TC)==RESET){};//循环发送,直到发送完毕
 8004766:	bf00      	nop
 8004768:	4b08      	ldr	r3, [pc, #32]	; (800478c <usart1_send_char+0x30>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004772:	2b40      	cmp	r3, #64	; 0x40
 8004774:	d1f8      	bne.n	8004768 <usart1_send_char+0xc>
	HAL_UART_Transmit(&huart1,&c,1,1000);
 8004776:	1df9      	adds	r1, r7, #7
 8004778:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800477c:	2201      	movs	r2, #1
 800477e:	4803      	ldr	r0, [pc, #12]	; (800478c <usart1_send_char+0x30>)
 8004780:	f002 fe19 	bl	80073b6 <HAL_UART_Transmit>
}
 8004784:	bf00      	nop
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	2000046c 	.word	0x2000046c

08004790 <usart1_niming_report>:
//传送数据给匿名四轴上位机软件(V2.6版本)
//fun:功能字. 0XA0~0XAF
//data:数据缓存区,最多28字节!!
//len:data区有效数据个数
void usart1_niming_report(uint8_t fun,uint8_t*data,uint8_t len)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08c      	sub	sp, #48	; 0x30
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	6039      	str	r1, [r7, #0]
 800479a:	71fb      	strb	r3, [r7, #7]
 800479c:	4613      	mov	r3, r2
 800479e:	71bb      	strb	r3, [r7, #6]
	uint8_t send_buf[32];
	uint8_t i;
	if(len>28)return;	//最多28字节数据
 80047a0:	79bb      	ldrb	r3, [r7, #6]
 80047a2:	2b1c      	cmp	r3, #28
 80047a4:	d868      	bhi.n	8004878 <usart1_niming_report+0xe8>
	send_buf[len+3]=0;	//校验数置零
 80047a6:	79bb      	ldrb	r3, [r7, #6]
 80047a8:	3303      	adds	r3, #3
 80047aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80047ae:	4413      	add	r3, r2
 80047b0:	2200      	movs	r2, #0
 80047b2:	f803 2c24 	strb.w	r2, [r3, #-36]
	send_buf[0]=0X88;	//帧头
 80047b6:	2388      	movs	r3, #136	; 0x88
 80047b8:	733b      	strb	r3, [r7, #12]
	send_buf[1]=fun;	//功能字
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	737b      	strb	r3, [r7, #13]
	send_buf[2]=len;	//数据长度
 80047be:	79bb      	ldrb	r3, [r7, #6]
 80047c0:	73bb      	strb	r3, [r7, #14]
	for(i=0;i<len;i++)send_buf[3+i]=data[i];			//复制数据
 80047c2:	2300      	movs	r3, #0
 80047c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80047c8:	e011      	b.n	80047ee <usart1_niming_report+0x5e>
 80047ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	441a      	add	r2, r3
 80047d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047d6:	3303      	adds	r3, #3
 80047d8:	7812      	ldrb	r2, [r2, #0]
 80047da:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80047de:	440b      	add	r3, r1
 80047e0:	f803 2c24 	strb.w	r2, [r3, #-36]
 80047e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047e8:	3301      	adds	r3, #1
 80047ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80047ee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80047f2:	79bb      	ldrb	r3, [r7, #6]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d3e8      	bcc.n	80047ca <usart1_niming_report+0x3a>
	for(i=0;i<len+3;i++)send_buf[len+3]+=send_buf[i];	//计算校验和
 80047f8:	2300      	movs	r3, #0
 80047fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80047fe:	e01b      	b.n	8004838 <usart1_niming_report+0xa8>
 8004800:	79bb      	ldrb	r3, [r7, #6]
 8004802:	3303      	adds	r3, #3
 8004804:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004808:	4413      	add	r3, r2
 800480a:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 800480e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004812:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004816:	4413      	add	r3, r2
 8004818:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 800481c:	79bb      	ldrb	r3, [r7, #6]
 800481e:	3303      	adds	r3, #3
 8004820:	440a      	add	r2, r1
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004828:	440b      	add	r3, r1
 800482a:	f803 2c24 	strb.w	r2, [r3, #-36]
 800482e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004832:	3301      	adds	r3, #1
 8004834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004838:	79bb      	ldrb	r3, [r7, #6]
 800483a:	1c9a      	adds	r2, r3, #2
 800483c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004840:	429a      	cmp	r2, r3
 8004842:	dadd      	bge.n	8004800 <usart1_niming_report+0x70>
	for(i=0;i<len+4;i++)usart1_send_char(send_buf[i]);	//发送数据到串口1
 8004844:	2300      	movs	r3, #0
 8004846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800484a:	e00e      	b.n	800486a <usart1_niming_report+0xda>
 800484c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004850:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004854:	4413      	add	r3, r2
 8004856:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff ff7e 	bl	800475c <usart1_send_char>
 8004860:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004864:	3301      	adds	r3, #1
 8004866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800486a:	79bb      	ldrb	r3, [r7, #6]
 800486c:	1cda      	adds	r2, r3, #3
 800486e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004872:	429a      	cmp	r2, r3
 8004874:	daea      	bge.n	800484c <usart1_niming_report+0xbc>
 8004876:	e000      	b.n	800487a <usart1_niming_report+0xea>
	if(len>28)return;	//最多28字节数据
 8004878:	bf00      	nop
}
 800487a:	3730      	adds	r7, #48	; 0x30
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <usart1_report_imu>:
//gyrox,gyroy,gyroz:x,y,z三个方向上面的陀螺仪值
//roll:横滚角.单位0.01度。 -18000 -> 18000 对应 -180.00  ->  180.00度
//pitch:俯仰角.单位 0.01度。-9000 - 9000 对应 -90.00 -> 90.00 度
//yaw:航向角.单位为0.1度 0 -> 3600  对应 0 -> 360.0度
void usart1_report_imu(int16_t aacx,int16_t aacy,int16_t aacz,int16_t gyrox,int16_t gyroy,int16_t gyroz,int16_t roll,int16_t pitch,int16_t yaw)
{
 8004880:	b590      	push	{r4, r7, lr}
 8004882:	b08b      	sub	sp, #44	; 0x2c
 8004884:	af00      	add	r7, sp, #0
 8004886:	4604      	mov	r4, r0
 8004888:	4608      	mov	r0, r1
 800488a:	4611      	mov	r1, r2
 800488c:	461a      	mov	r2, r3
 800488e:	4623      	mov	r3, r4
 8004890:	80fb      	strh	r3, [r7, #6]
 8004892:	4603      	mov	r3, r0
 8004894:	80bb      	strh	r3, [r7, #4]
 8004896:	460b      	mov	r3, r1
 8004898:	807b      	strh	r3, [r7, #2]
 800489a:	4613      	mov	r3, r2
 800489c:	803b      	strh	r3, [r7, #0]
	uint8_t tbuf[28];
	uint8_t i;
	for(i=0;i<28;i++)tbuf[i]=0;//清0
 800489e:	2300      	movs	r3, #0
 80048a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048a4:	e00c      	b.n	80048c0 <usart1_report_imu+0x40>
 80048a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80048ae:	4413      	add	r3, r2
 80048b0:	2200      	movs	r2, #0
 80048b2:	f803 2c20 	strb.w	r2, [r3, #-32]
 80048b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048ba:	3301      	adds	r3, #1
 80048bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048c4:	2b1b      	cmp	r3, #27
 80048c6:	d9ee      	bls.n	80048a6 <usart1_report_imu+0x26>
	tbuf[0]=(aacx>>8)&0XFF;
 80048c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048cc:	121b      	asrs	r3, r3, #8
 80048ce:	b21b      	sxth	r3, r3
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	723b      	strb	r3, [r7, #8]
	tbuf[1]=aacx&0XFF;
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	727b      	strb	r3, [r7, #9]
	tbuf[2]=(aacy>>8)&0XFF;
 80048da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80048de:	121b      	asrs	r3, r3, #8
 80048e0:	b21b      	sxth	r3, r3
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	72bb      	strb	r3, [r7, #10]
	tbuf[3]=aacy&0XFF;
 80048e6:	88bb      	ldrh	r3, [r7, #4]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	72fb      	strb	r3, [r7, #11]
	tbuf[4]=(aacz>>8)&0XFF;
 80048ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048f0:	121b      	asrs	r3, r3, #8
 80048f2:	b21b      	sxth	r3, r3
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	733b      	strb	r3, [r7, #12]
	tbuf[5]=aacz&0XFF;
 80048f8:	887b      	ldrh	r3, [r7, #2]
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	737b      	strb	r3, [r7, #13]
	tbuf[6]=(gyrox>>8)&0XFF;
 80048fe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004902:	121b      	asrs	r3, r3, #8
 8004904:	b21b      	sxth	r3, r3
 8004906:	b2db      	uxtb	r3, r3
 8004908:	73bb      	strb	r3, [r7, #14]
	tbuf[7]=gyrox&0XFF;
 800490a:	883b      	ldrh	r3, [r7, #0]
 800490c:	b2db      	uxtb	r3, r3
 800490e:	73fb      	strb	r3, [r7, #15]
	tbuf[8]=(gyroy>>8)&0XFF;
 8004910:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8004914:	121b      	asrs	r3, r3, #8
 8004916:	b21b      	sxth	r3, r3
 8004918:	b2db      	uxtb	r3, r3
 800491a:	743b      	strb	r3, [r7, #16]
	tbuf[9]=gyroy&0XFF;
 800491c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800491e:	b2db      	uxtb	r3, r3
 8004920:	747b      	strb	r3, [r7, #17]
	tbuf[10]=(gyroz>>8)&0XFF;
 8004922:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8004926:	121b      	asrs	r3, r3, #8
 8004928:	b21b      	sxth	r3, r3
 800492a:	b2db      	uxtb	r3, r3
 800492c:	74bb      	strb	r3, [r7, #18]
	tbuf[11]=gyroz&0XFF;
 800492e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004930:	b2db      	uxtb	r3, r3
 8004932:	74fb      	strb	r3, [r7, #19]
	tbuf[18]=(roll>>8)&0XFF;
 8004934:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8004938:	121b      	asrs	r3, r3, #8
 800493a:	b21b      	sxth	r3, r3
 800493c:	b2db      	uxtb	r3, r3
 800493e:	76bb      	strb	r3, [r7, #26]
	tbuf[19]=roll&0XFF;
 8004940:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004944:	b2db      	uxtb	r3, r3
 8004946:	76fb      	strb	r3, [r7, #27]
	tbuf[20]=(pitch>>8)&0XFF;
 8004948:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800494c:	121b      	asrs	r3, r3, #8
 800494e:	b21b      	sxth	r3, r3
 8004950:	b2db      	uxtb	r3, r3
 8004952:	773b      	strb	r3, [r7, #28]
	tbuf[21]=pitch&0XFF;
 8004954:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004958:	b2db      	uxtb	r3, r3
 800495a:	777b      	strb	r3, [r7, #29]
	tbuf[22]=(yaw>>8)&0XFF;
 800495c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8004960:	121b      	asrs	r3, r3, #8
 8004962:	b21b      	sxth	r3, r3
 8004964:	b2db      	uxtb	r3, r3
 8004966:	77bb      	strb	r3, [r7, #30]
	tbuf[23]=yaw&0XFF;
 8004968:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800496c:	b2db      	uxtb	r3, r3
 800496e:	77fb      	strb	r3, [r7, #31]
	usart1_niming_report(0XAF,tbuf,28);//飞控显示帧,0XAF
 8004970:	f107 0308 	add.w	r3, r7, #8
 8004974:	221c      	movs	r2, #28
 8004976:	4619      	mov	r1, r3
 8004978:	20af      	movs	r0, #175	; 0xaf
 800497a:	f7ff ff09 	bl	8004790 <usart1_niming_report>
}
 800497e:	bf00      	nop
 8004980:	372c      	adds	r7, #44	; 0x2c
 8004982:	46bd      	mov	sp, r7
 8004984:	bd90      	pop	{r4, r7, pc}
	...

08004988 <ShowString>:
#include "host_computer.h"
#include "mpu6050.h"

MPU6050_t MPU6050;

void ShowString(){
 8004988:	b580      	push	{r7, lr}
 800498a:	b08c      	sub	sp, #48	; 0x30
 800498c:	af04      	add	r7, sp, #16
	uint8_t Buffer[32];
	LCD_ShowString(30, 30, 400, 48, 48, (uint8_t*)"STM32F407");
 800498e:	4b21      	ldr	r3, [pc, #132]	; (8004a14 <ShowString+0x8c>)
 8004990:	9301      	str	r3, [sp, #4]
 8004992:	2330      	movs	r3, #48	; 0x30
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	2330      	movs	r3, #48	; 0x30
 8004998:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800499c:	211e      	movs	r1, #30
 800499e:	201e      	movs	r0, #30
 80049a0:	f7ff faf6 	bl	8003f90 <LCD_ShowString>
	print("\r\nKalmanAngleX:%.2f\r\nKalmanAngleY:%.2f\r\n", MPU6050.KalmanAngleX, MPU6050.KalmanAngleY);
 80049a4:	4b1c      	ldr	r3, [pc, #112]	; (8004a18 <ShowString+0x90>)
 80049a6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80049aa:	491b      	ldr	r1, [pc, #108]	; (8004a18 <ShowString+0x90>)
 80049ac:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 80049b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049b4:	e9cd 2300 	strd	r2, r3, [sp]
 80049b8:	4b18      	ldr	r3, [pc, #96]	; (8004a1c <ShowString+0x94>)
 80049ba:	4a19      	ldr	r2, [pc, #100]	; (8004a20 <ShowString+0x98>)
 80049bc:	2119      	movs	r1, #25
 80049be:	4819      	ldr	r0, [pc, #100]	; (8004a24 <ShowString+0x9c>)
 80049c0:	f003 fd0a 	bl	80083d8 <iprintf>
	sprintf((char*)Buffer, "KalmanAngleX:%7.2f", MPU6050.KalmanAngleX);
 80049c4:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <ShowString+0x90>)
 80049c6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80049ca:	4638      	mov	r0, r7
 80049cc:	4916      	ldr	r1, [pc, #88]	; (8004a28 <ShowString+0xa0>)
 80049ce:	f003 fd1b 	bl	8008408 <siprintf>
	LCD_ShowString(30, 100, 400, 32, 32, Buffer);
 80049d2:	463b      	mov	r3, r7
 80049d4:	9301      	str	r3, [sp, #4]
 80049d6:	2320      	movs	r3, #32
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	2320      	movs	r3, #32
 80049dc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80049e0:	2164      	movs	r1, #100	; 0x64
 80049e2:	201e      	movs	r0, #30
 80049e4:	f7ff fad4 	bl	8003f90 <LCD_ShowString>
	sprintf((char*)Buffer, "KalmanAngleY:%7.2f", MPU6050.KalmanAngleY);
 80049e8:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <ShowString+0x90>)
 80049ea:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80049ee:	4638      	mov	r0, r7
 80049f0:	490e      	ldr	r1, [pc, #56]	; (8004a2c <ShowString+0xa4>)
 80049f2:	f003 fd09 	bl	8008408 <siprintf>
	LCD_ShowString(30, 150, 400, 32, 32, Buffer);
 80049f6:	463b      	mov	r3, r7
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	2320      	movs	r3, #32
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	2320      	movs	r3, #32
 8004a00:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004a04:	2196      	movs	r1, #150	; 0x96
 8004a06:	201e      	movs	r0, #30
 8004a08:	f7ff fac2 	bl	8003f90 <LCD_ShowString>
}
 8004a0c:	bf00      	nop
 8004a0e:	3720      	adds	r7, #32
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	0800af48 	.word	0x0800af48
 8004a18:	20000308 	.word	0x20000308
 8004a1c:	08017cac 	.word	0x08017cac
 8004a20:	0800af54 	.word	0x0800af54
 8004a24:	0800af6c 	.word	0x0800af6c
 8004a28:	0800afac 	.word	0x0800afac
 8004a2c:	0800afc0 	.word	0x0800afc0

08004a30 <app_main_init>:

void app_main_init(void) {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
	TFTLCD_Init();
 8004a34:	f7fc ffb0 	bl	8001998 <TFTLCD_Init>
	LCD_Clear(WHITE);
 8004a38:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004a3c:	f7ff f9a0 	bl	8003d80 <LCD_Clear>
	POINT_COLOR = BLACK;
 8004a40:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <app_main_init+0x2c>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]

	while (MPU6050_Init(&hi2c1) == 1);
 8004a46:	bf00      	nop
 8004a48:	4805      	ldr	r0, [pc, #20]	; (8004a60 <app_main_init+0x30>)
 8004a4a:	f7ff faee 	bl	800402a <MPU6050_Init>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d0f9      	beq.n	8004a48 <app_main_init+0x18>
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000000 	.word	0x20000000
 8004a60:	20000418 	.word	0x20000418

08004a64 <app_main>:

void app_main(void) {
 8004a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a68:	b087      	sub	sp, #28
 8004a6a:	af06      	add	r7, sp, #24
	MPU6050_Read_All(&hi2c1, &MPU6050);
 8004a6c:	4928      	ldr	r1, [pc, #160]	; (8004b10 <app_main+0xac>)
 8004a6e:	4829      	ldr	r0, [pc, #164]	; (8004b14 <app_main+0xb0>)
 8004a70:	f7ff fb32 	bl	80040d8 <MPU6050_Read_All>
//	mpu6050_send_data((float)MPU6050.KalmanAngleX, (float)MPU6050.KalmanAngleY, 0, 0, 0, 0);
	usart1_report_imu(MPU6050.Accel_X_RAW, MPU6050.Accel_Y_RAW, MPU6050.Accel_Z_RAW,
 8004a74:	4b26      	ldr	r3, [pc, #152]	; (8004b10 <app_main+0xac>)
 8004a76:	f9b3 8000 	ldrsh.w	r8, [r3]
 8004a7a:	4b25      	ldr	r3, [pc, #148]	; (8004b10 <app_main+0xac>)
 8004a7c:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 8004a80:	4b23      	ldr	r3, [pc, #140]	; (8004b10 <app_main+0xac>)
 8004a82:	f9b3 a004 	ldrsh.w	sl, [r3, #4]
 8004a86:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <app_main+0xac>)
 8004a88:	f9b3 b020 	ldrsh.w	fp, [r3, #32]
 8004a8c:	4b20      	ldr	r3, [pc, #128]	; (8004b10 <app_main+0xac>)
 8004a8e:	f9b3 4022 	ldrsh.w	r4, [r3, #34]	; 0x22
 8004a92:	4b1f      	ldr	r3, [pc, #124]	; (8004b10 <app_main+0xac>)
 8004a94:	f9b3 5024 	ldrsh.w	r5, [r3, #36]	; 0x24
			MPU6050.Gyro_X_RAW, MPU6050.Gyro_Y_RAW, MPU6050.Gyro_Z_RAW,
			(float)MPU6050.KalmanAngleX*100, (float)MPU6050.KalmanAngleY*100, 0);
 8004a98:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <app_main+0xac>)
 8004a9a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	f7fc f8a1 	bl	8000be8 <__aeabi_d2f>
 8004aa6:	ee07 0a10 	vmov	s14, r0
 8004aaa:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8004b18 <app_main+0xb4>
 8004aae:	ee67 7a27 	vmul.f32	s15, s14, s15
	usart1_report_imu(MPU6050.Accel_X_RAW, MPU6050.Accel_Y_RAW, MPU6050.Accel_Z_RAW,
 8004ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ab6:	ee17 3a90 	vmov	r3, s15
 8004aba:	b21e      	sxth	r6, r3
			(float)MPU6050.KalmanAngleX*100, (float)MPU6050.KalmanAngleY*100, 0);
 8004abc:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <app_main+0xac>)
 8004abe:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	f7fc f88f 	bl	8000be8 <__aeabi_d2f>
 8004aca:	ee07 0a10 	vmov	s14, r0
 8004ace:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004b18 <app_main+0xb4>
 8004ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
	usart1_report_imu(MPU6050.Accel_X_RAW, MPU6050.Accel_Y_RAW, MPU6050.Accel_Z_RAW,
 8004ad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ada:	ee17 3a90 	vmov	r3, s15
 8004ade:	b21b      	sxth	r3, r3
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	9204      	str	r2, [sp, #16]
 8004ae4:	9303      	str	r3, [sp, #12]
 8004ae6:	9602      	str	r6, [sp, #8]
 8004ae8:	9501      	str	r5, [sp, #4]
 8004aea:	9400      	str	r4, [sp, #0]
 8004aec:	465b      	mov	r3, fp
 8004aee:	4652      	mov	r2, sl
 8004af0:	4649      	mov	r1, r9
 8004af2:	4640      	mov	r0, r8
 8004af4:	f7ff fec4 	bl	8004880 <usart1_report_imu>
//	print("\r\nKalmanAngleX:%.2f\r\nKalmanAngleY:%.2f\r\n", MPU6050.KalmanAngleX, MPU6050.KalmanAngleY);
	ShowString();
 8004af8:	f7ff ff46 	bl	8004988 <ShowString>
	HAL_Delay(1000);
 8004afc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b00:	f000 fcd4 	bl	80054ac <HAL_Delay>
}
 8004b04:	bf00      	nop
 8004b06:	3704      	adds	r7, #4
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000308 	.word	0x20000308
 8004b14:	20000418 	.word	0x20000418
 8004b18:	42c80000 	.word	0x42c80000

08004b1c <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 8004b24:	bf00      	nop
 8004b26:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <__io_putchar+0x2c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0f9      	beq.n	8004b26 <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	4b04      	ldr	r3, [pc, #16]	; (8004b48 <__io_putchar+0x2c>)
 8004b38:	605a      	str	r2, [r3, #4]

	//  while ((USART2->SR & 0X40) == 0) {
	//  }; //循环发送,直到发送完毕
	//  USART2->DR = (uint8_t) ch;

	return ch;
 8004b3a:	687b      	ldr	r3, [r7, #4]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	40011000 	.word	0x40011000

08004b4c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08e      	sub	sp, #56	; 0x38
 8004b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8004b52:	f107 031c 	add.w	r3, r7, #28
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	605a      	str	r2, [r3, #4]
 8004b5c:	609a      	str	r2, [r3, #8]
 8004b5e:	60da      	str	r2, [r3, #12]
 8004b60:	611a      	str	r2, [r3, #16]
 8004b62:	615a      	str	r2, [r3, #20]
 8004b64:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8004b66:	463b      	mov	r3, r7
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	605a      	str	r2, [r3, #4]
 8004b6e:	609a      	str	r2, [r3, #8]
 8004b70:	60da      	str	r2, [r3, #12]
 8004b72:	611a      	str	r2, [r3, #16]
 8004b74:	615a      	str	r2, [r3, #20]
 8004b76:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8004b78:	4b2f      	ldr	r3, [pc, #188]	; (8004c38 <MX_FSMC_Init+0xec>)
 8004b7a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8004b7e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004b80:	4b2d      	ldr	r3, [pc, #180]	; (8004c38 <MX_FSMC_Init+0xec>)
 8004b82:	4a2e      	ldr	r2, [pc, #184]	; (8004c3c <MX_FSMC_Init+0xf0>)
 8004b84:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 8004b86:	4b2c      	ldr	r3, [pc, #176]	; (8004c38 <MX_FSMC_Init+0xec>)
 8004b88:	2206      	movs	r2, #6
 8004b8a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004b8c:	4b2a      	ldr	r3, [pc, #168]	; (8004c38 <MX_FSMC_Init+0xec>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8004b92:	4b29      	ldr	r3, [pc, #164]	; (8004c38 <MX_FSMC_Init+0xec>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004b98:	4b27      	ldr	r3, [pc, #156]	; (8004c38 <MX_FSMC_Init+0xec>)
 8004b9a:	2210      	movs	r2, #16
 8004b9c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004b9e:	4b26      	ldr	r3, [pc, #152]	; (8004c38 <MX_FSMC_Init+0xec>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004ba4:	4b24      	ldr	r3, [pc, #144]	; (8004c38 <MX_FSMC_Init+0xec>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8004baa:	4b23      	ldr	r3, [pc, #140]	; (8004c38 <MX_FSMC_Init+0xec>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004bb0:	4b21      	ldr	r3, [pc, #132]	; (8004c38 <MX_FSMC_Init+0xec>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8004bb6:	4b20      	ldr	r3, [pc, #128]	; (8004c38 <MX_FSMC_Init+0xec>)
 8004bb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004bbe:	4b1e      	ldr	r3, [pc, #120]	; (8004c38 <MX_FSMC_Init+0xec>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8004bc4:	4b1c      	ldr	r3, [pc, #112]	; (8004c38 <MX_FSMC_Init+0xec>)
 8004bc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004bcc:	4b1a      	ldr	r3, [pc, #104]	; (8004c38 <MX_FSMC_Init+0xec>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004bd2:	4b19      	ldr	r3, [pc, #100]	; (8004c38 <MX_FSMC_Init+0xec>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8004bd8:	4b17      	ldr	r3, [pc, #92]	; (8004c38 <MX_FSMC_Init+0xec>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 8004bde:	2301      	movs	r3, #1
 8004be0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8004be2:	230f      	movs	r3, #15
 8004be4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 15;
 8004be6:	230f      	movs	r3, #15
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8004bea:	230f      	movs	r3, #15
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8004bee:	2310      	movs	r3, #16
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8004bf2:	2311      	movs	r3, #17
 8004bf4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 0;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8004bfe:	230f      	movs	r3, #15
 8004c00:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 15;
 8004c02:	230f      	movs	r3, #15
 8004c04:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8004c06:	230f      	movs	r3, #15
 8004c08:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8004c0a:	2310      	movs	r3, #16
 8004c0c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8004c0e:	2311      	movs	r3, #17
 8004c10:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8004c16:	463a      	mov	r2, r7
 8004c18:	f107 031c 	add.w	r3, r7, #28
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4806      	ldr	r0, [pc, #24]	; (8004c38 <MX_FSMC_Init+0xec>)
 8004c20:	f002 fb38 	bl	8007294 <HAL_SRAM_Init>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8004c2a:	f000 fa01 	bl	8005030 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8004c2e:	bf00      	nop
 8004c30:	3738      	adds	r7, #56	; 0x38
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	200003c8 	.word	0x200003c8
 8004c3c:	a0000104 	.word	0xa0000104

08004c40 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c46:	1d3b      	adds	r3, r7, #4
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	605a      	str	r2, [r3, #4]
 8004c4e:	609a      	str	r2, [r3, #8]
 8004c50:	60da      	str	r2, [r3, #12]
 8004c52:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004c54:	4b2c      	ldr	r3, [pc, #176]	; (8004d08 <HAL_FSMC_MspInit+0xc8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d151      	bne.n	8004d00 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8004c5c:	4b2a      	ldr	r3, [pc, #168]	; (8004d08 <HAL_FSMC_MspInit+0xc8>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004c62:	2300      	movs	r3, #0
 8004c64:	603b      	str	r3, [r7, #0]
 8004c66:	4b29      	ldr	r3, [pc, #164]	; (8004d0c <HAL_FSMC_MspInit+0xcc>)
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	4a28      	ldr	r2, [pc, #160]	; (8004d0c <HAL_FSMC_MspInit+0xcc>)
 8004c6c:	f043 0301 	orr.w	r3, r3, #1
 8004c70:	6393      	str	r3, [r2, #56]	; 0x38
 8004c72:	4b26      	ldr	r3, [pc, #152]	; (8004d0c <HAL_FSMC_MspInit+0xcc>)
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	603b      	str	r3, [r7, #0]
 8004c7c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c84:	2302      	movs	r3, #2
 8004c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004c90:	230c      	movs	r3, #12
 8004c92:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004c94:	1d3b      	adds	r3, r7, #4
 8004c96:	4619      	mov	r1, r3
 8004c98:	481d      	ldr	r0, [pc, #116]	; (8004d10 <HAL_FSMC_MspInit+0xd0>)
 8004c9a:	f000 fd11 	bl	80056c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004c9e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004ca2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cac:	2303      	movs	r3, #3
 8004cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004cb0:	230c      	movs	r3, #12
 8004cb2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cb4:	1d3b      	adds	r3, r7, #4
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4816      	ldr	r0, [pc, #88]	; (8004d14 <HAL_FSMC_MspInit+0xd4>)
 8004cba:	f000 fd01 	bl	80056c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004cbe:	f24c 7333 	movw	r3, #50995	; 0xc733
 8004cc2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004cd0:	230c      	movs	r3, #12
 8004cd2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cd4:	1d3b      	adds	r3, r7, #4
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	480f      	ldr	r0, [pc, #60]	; (8004d18 <HAL_FSMC_MspInit+0xd8>)
 8004cda:	f000 fcf1 	bl	80056c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ce2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cec:	2303      	movs	r3, #3
 8004cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004cf0:	230c      	movs	r3, #12
 8004cf2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004cf4:	1d3b      	adds	r3, r7, #4
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4808      	ldr	r0, [pc, #32]	; (8004d1c <HAL_FSMC_MspInit+0xdc>)
 8004cfa:	f000 fce1 	bl	80056c0 <HAL_GPIO_Init>
 8004cfe:	e000      	b.n	8004d02 <HAL_FSMC_MspInit+0xc2>
    return;
 8004d00:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	20000294 	.word	0x20000294
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	40021400 	.word	0x40021400
 8004d14:	40021000 	.word	0x40021000
 8004d18:	40020c00 	.word	0x40020c00
 8004d1c:	40021800 	.word	0x40021800

08004d20 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8004d28:	f7ff ff8a 	bl	8004c40 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004d2c:	bf00      	nop
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08c      	sub	sp, #48	; 0x30
 8004d38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d3a:	f107 031c 	add.w	r3, r7, #28
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	605a      	str	r2, [r3, #4]
 8004d44:	609a      	str	r2, [r3, #8]
 8004d46:	60da      	str	r2, [r3, #12]
 8004d48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	4b3c      	ldr	r3, [pc, #240]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	4a3b      	ldr	r2, [pc, #236]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d58:	6313      	str	r3, [r2, #48]	; 0x30
 8004d5a:	4b39      	ldr	r3, [pc, #228]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	4b35      	ldr	r3, [pc, #212]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	4a34      	ldr	r2, [pc, #208]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004d70:	f043 0320 	orr.w	r3, r3, #32
 8004d74:	6313      	str	r3, [r2, #48]	; 0x30
 8004d76:	4b32      	ldr	r3, [pc, #200]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d82:	2300      	movs	r3, #0
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	4b2e      	ldr	r3, [pc, #184]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8a:	4a2d      	ldr	r2, [pc, #180]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004d8c:	f043 0310 	orr.w	r3, r3, #16
 8004d90:	6313      	str	r3, [r2, #48]	; 0x30
 8004d92:	4b2b      	ldr	r3, [pc, #172]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	4b27      	ldr	r3, [pc, #156]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da6:	4a26      	ldr	r2, [pc, #152]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004da8:	f043 0302 	orr.w	r3, r3, #2
 8004dac:	6313      	str	r3, [r2, #48]	; 0x30
 8004dae:	4b24      	ldr	r3, [pc, #144]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60bb      	str	r3, [r7, #8]
 8004dbe:	4b20      	ldr	r3, [pc, #128]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004dc4:	f043 0308 	orr.w	r3, r3, #8
 8004dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dca:	4b1d      	ldr	r3, [pc, #116]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	607b      	str	r3, [r7, #4]
 8004dda:	4b19      	ldr	r3, [pc, #100]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	4a18      	ldr	r2, [pc, #96]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004de0:	f043 0301 	orr.w	r3, r3, #1
 8004de4:	6313      	str	r3, [r2, #48]	; 0x30
 8004de6:	4b16      	ldr	r3, [pc, #88]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	607b      	str	r3, [r7, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004df2:	2300      	movs	r3, #0
 8004df4:	603b      	str	r3, [r7, #0]
 8004df6:	4b12      	ldr	r3, [pc, #72]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	4a11      	ldr	r2, [pc, #68]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e00:	6313      	str	r3, [r2, #48]	; 0x30
 8004e02:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <MX_GPIO_Init+0x10c>)
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e14:	480b      	ldr	r0, [pc, #44]	; (8004e44 <MX_GPIO_Init+0x110>)
 8004e16:	f000 fdef 	bl	80059f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e20:	2301      	movs	r3, #1
 8004e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e24:	2301      	movs	r3, #1
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e2c:	f107 031c 	add.w	r3, r7, #28
 8004e30:	4619      	mov	r1, r3
 8004e32:	4804      	ldr	r0, [pc, #16]	; (8004e44 <MX_GPIO_Init+0x110>)
 8004e34:	f000 fc44 	bl	80056c0 <HAL_GPIO_Init>

}
 8004e38:	bf00      	nop
 8004e3a:	3730      	adds	r7, #48	; 0x30
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40023800 	.word	0x40023800
 8004e44:	40020400 	.word	0x40020400

08004e48 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004e4c:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <MX_I2C1_Init+0x50>)
 8004e4e:	4a13      	ldr	r2, [pc, #76]	; (8004e9c <MX_I2C1_Init+0x54>)
 8004e50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <MX_I2C1_Init+0x50>)
 8004e54:	4a12      	ldr	r2, [pc, #72]	; (8004ea0 <MX_I2C1_Init+0x58>)
 8004e56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004e58:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <MX_I2C1_Init+0x50>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004e5e:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <MX_I2C1_Init+0x50>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e64:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <MX_I2C1_Init+0x50>)
 8004e66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <MX_I2C1_Init+0x50>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004e72:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <MX_I2C1_Init+0x50>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e78:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <MX_I2C1_Init+0x50>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e7e:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <MX_I2C1_Init+0x50>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004e84:	4804      	ldr	r0, [pc, #16]	; (8004e98 <MX_I2C1_Init+0x50>)
 8004e86:	f000 fdd1 	bl	8005a2c <HAL_I2C_Init>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004e90:	f000 f8ce 	bl	8005030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004e94:	bf00      	nop
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	20000418 	.word	0x20000418
 8004e9c:	40005400 	.word	0x40005400
 8004ea0:	00061a80 	.word	0x00061a80

08004ea4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08a      	sub	sp, #40	; 0x28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eac:	f107 0314 	add.w	r3, r7, #20
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	605a      	str	r2, [r3, #4]
 8004eb6:	609a      	str	r2, [r3, #8]
 8004eb8:	60da      	str	r2, [r3, #12]
 8004eba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a19      	ldr	r2, [pc, #100]	; (8004f28 <HAL_I2C_MspInit+0x84>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d12b      	bne.n	8004f1e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	4b18      	ldr	r3, [pc, #96]	; (8004f2c <HAL_I2C_MspInit+0x88>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	4a17      	ldr	r2, [pc, #92]	; (8004f2c <HAL_I2C_MspInit+0x88>)
 8004ed0:	f043 0302 	orr.w	r3, r3, #2
 8004ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed6:	4b15      	ldr	r3, [pc, #84]	; (8004f2c <HAL_I2C_MspInit+0x88>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ee2:	23c0      	movs	r3, #192	; 0xc0
 8004ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ee6:	2312      	movs	r3, #18
 8004ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eea:	2301      	movs	r3, #1
 8004eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004ef2:	2304      	movs	r3, #4
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ef6:	f107 0314 	add.w	r3, r7, #20
 8004efa:	4619      	mov	r1, r3
 8004efc:	480c      	ldr	r0, [pc, #48]	; (8004f30 <HAL_I2C_MspInit+0x8c>)
 8004efe:	f000 fbdf 	bl	80056c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <HAL_I2C_MspInit+0x88>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	4a08      	ldr	r2, [pc, #32]	; (8004f2c <HAL_I2C_MspInit+0x88>)
 8004f0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f10:	6413      	str	r3, [r2, #64]	; 0x40
 8004f12:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <HAL_I2C_MspInit+0x88>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004f1e:	bf00      	nop
 8004f20:	3728      	adds	r7, #40	; 0x28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40005400 	.word	0x40005400
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	40020400 	.word	0x40020400

08004f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f38:	f000 fa46 	bl	80053c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f3c:	f000 f80e 	bl	8004f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f40:	f7ff fef8 	bl	8004d34 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004f44:	f7ff ff80 	bl	8004e48 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8004f48:	f000 f9a2 	bl	8005290 <MX_USART1_UART_Init>
  MX_FSMC_Init();
 8004f4c:	f7ff fdfe 	bl	8004b4c <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 8004f50:	f7ff fd6e 	bl	8004a30 <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_main();
 8004f54:	f7ff fd86 	bl	8004a64 <app_main>
 8004f58:	e7fc      	b.n	8004f54 <main+0x20>
	...

08004f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b094      	sub	sp, #80	; 0x50
 8004f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f62:	f107 0320 	add.w	r3, r7, #32
 8004f66:	2230      	movs	r2, #48	; 0x30
 8004f68:	2100      	movs	r1, #0
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f002 fdc2 	bl	8007af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f70:	f107 030c 	add.w	r3, r7, #12
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	605a      	str	r2, [r3, #4]
 8004f7a:	609a      	str	r2, [r3, #8]
 8004f7c:	60da      	str	r2, [r3, #12]
 8004f7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f80:	2300      	movs	r3, #0
 8004f82:	60bb      	str	r3, [r7, #8]
 8004f84:	4b28      	ldr	r3, [pc, #160]	; (8005028 <SystemClock_Config+0xcc>)
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	4a27      	ldr	r2, [pc, #156]	; (8005028 <SystemClock_Config+0xcc>)
 8004f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8004f90:	4b25      	ldr	r3, [pc, #148]	; (8005028 <SystemClock_Config+0xcc>)
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f98:	60bb      	str	r3, [r7, #8]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	607b      	str	r3, [r7, #4]
 8004fa0:	4b22      	ldr	r3, [pc, #136]	; (800502c <SystemClock_Config+0xd0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a21      	ldr	r2, [pc, #132]	; (800502c <SystemClock_Config+0xd0>)
 8004fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	4b1f      	ldr	r3, [pc, #124]	; (800502c <SystemClock_Config+0xd0>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb4:	607b      	str	r3, [r7, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004fc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004fcc:	2304      	movs	r3, #4
 8004fce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004fd0:	23a8      	movs	r3, #168	; 0xa8
 8004fd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004fd8:	2304      	movs	r3, #4
 8004fda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004fdc:	f107 0320 	add.w	r3, r7, #32
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f001 fce3 	bl	80069ac <HAL_RCC_OscConfig>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004fec:	f000 f820 	bl	8005030 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ff0:	230f      	movs	r3, #15
 8004ff2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004ffc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005000:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005006:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005008:	f107 030c 	add.w	r3, r7, #12
 800500c:	2105      	movs	r1, #5
 800500e:	4618      	mov	r0, r3
 8005010:	f001 ff44 	bl	8006e9c <HAL_RCC_ClockConfig>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800501a:	f000 f809 	bl	8005030 <Error_Handler>
  }
}
 800501e:	bf00      	nop
 8005020:	3750      	adds	r7, #80	; 0x50
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40023800 	.word	0x40023800
 800502c:	40007000 	.word	0x40007000

08005030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005034:	b672      	cpsid	i
}
 8005036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005038:	e7fe      	b.n	8005038 <Error_Handler+0x8>
	...

0800503c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005042:	2300      	movs	r3, #0
 8005044:	607b      	str	r3, [r7, #4]
 8005046:	4b10      	ldr	r3, [pc, #64]	; (8005088 <HAL_MspInit+0x4c>)
 8005048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504a:	4a0f      	ldr	r2, [pc, #60]	; (8005088 <HAL_MspInit+0x4c>)
 800504c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005050:	6453      	str	r3, [r2, #68]	; 0x44
 8005052:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <HAL_MspInit+0x4c>)
 8005054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800505a:	607b      	str	r3, [r7, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800505e:	2300      	movs	r3, #0
 8005060:	603b      	str	r3, [r7, #0]
 8005062:	4b09      	ldr	r3, [pc, #36]	; (8005088 <HAL_MspInit+0x4c>)
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	4a08      	ldr	r2, [pc, #32]	; (8005088 <HAL_MspInit+0x4c>)
 8005068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506c:	6413      	str	r3, [r2, #64]	; 0x40
 800506e:	4b06      	ldr	r3, [pc, #24]	; (8005088 <HAL_MspInit+0x4c>)
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40023800 	.word	0x40023800

0800508c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005090:	e7fe      	b.n	8005090 <NMI_Handler+0x4>

08005092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005092:	b480      	push	{r7}
 8005094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005096:	e7fe      	b.n	8005096 <HardFault_Handler+0x4>

08005098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800509c:	e7fe      	b.n	800509c <MemManage_Handler+0x4>

0800509e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800509e:	b480      	push	{r7}
 80050a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050a2:	e7fe      	b.n	80050a2 <BusFault_Handler+0x4>

080050a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050a8:	e7fe      	b.n	80050a8 <UsageFault_Handler+0x4>

080050aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80050aa:	b480      	push	{r7}
 80050ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80050ae:	bf00      	nop
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050bc:	bf00      	nop
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050c6:	b480      	push	{r7}
 80050c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80050ca:	bf00      	nop
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050d8:	f000 f9c8 	bl	800546c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050dc:	bf00      	nop
 80050de:	bd80      	pop	{r7, pc}

080050e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
	return 1;
 80050e4:	2301      	movs	r3, #1
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <_kill>:

int _kill(int pid, int sig)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80050fa:	f002 fcd1 	bl	8007aa0 <__errno>
 80050fe:	4603      	mov	r3, r0
 8005100:	2216      	movs	r2, #22
 8005102:	601a      	str	r2, [r3, #0]
	return -1;
 8005104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <_exit>:

void _exit (int status)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005118:	f04f 31ff 	mov.w	r1, #4294967295
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff ffe7 	bl	80050f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005122:	e7fe      	b.n	8005122 <_exit+0x12>

08005124 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	e00a      	b.n	800514c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005136:	f3af 8000 	nop.w
 800513a:	4601      	mov	r1, r0
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	60ba      	str	r2, [r7, #8]
 8005142:	b2ca      	uxtb	r2, r1
 8005144:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	3301      	adds	r3, #1
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	429a      	cmp	r2, r3
 8005152:	dbf0      	blt.n	8005136 <_read+0x12>
	}

return len;
 8005154:	687b      	ldr	r3, [r7, #4]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b086      	sub	sp, #24
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
 800516e:	e009      	b.n	8005184 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	60ba      	str	r2, [r7, #8]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff fccf 	bl	8004b1c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	3301      	adds	r3, #1
 8005182:	617b      	str	r3, [r7, #20]
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	429a      	cmp	r2, r3
 800518a:	dbf1      	blt.n	8005170 <_write+0x12>
	}
	return len;
 800518c:	687b      	ldr	r3, [r7, #4]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <_close>:

int _close(int file)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
	return -1;
 800519e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051be:	605a      	str	r2, [r3, #4]
	return 0;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <_isatty>:

int _isatty(int file)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
	return 1;
 80051d6:	2301      	movs	r3, #1
}
 80051d8:	4618      	mov	r0, r3
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
	return 0;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
	...

08005200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005208:	4a14      	ldr	r2, [pc, #80]	; (800525c <_sbrk+0x5c>)
 800520a:	4b15      	ldr	r3, [pc, #84]	; (8005260 <_sbrk+0x60>)
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005214:	4b13      	ldr	r3, [pc, #76]	; (8005264 <_sbrk+0x64>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d102      	bne.n	8005222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800521c:	4b11      	ldr	r3, [pc, #68]	; (8005264 <_sbrk+0x64>)
 800521e:	4a12      	ldr	r2, [pc, #72]	; (8005268 <_sbrk+0x68>)
 8005220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005222:	4b10      	ldr	r3, [pc, #64]	; (8005264 <_sbrk+0x64>)
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4413      	add	r3, r2
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	429a      	cmp	r2, r3
 800522e:	d207      	bcs.n	8005240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005230:	f002 fc36 	bl	8007aa0 <__errno>
 8005234:	4603      	mov	r3, r0
 8005236:	220c      	movs	r2, #12
 8005238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800523a:	f04f 33ff 	mov.w	r3, #4294967295
 800523e:	e009      	b.n	8005254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005240:	4b08      	ldr	r3, [pc, #32]	; (8005264 <_sbrk+0x64>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005246:	4b07      	ldr	r3, [pc, #28]	; (8005264 <_sbrk+0x64>)
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4413      	add	r3, r2
 800524e:	4a05      	ldr	r2, [pc, #20]	; (8005264 <_sbrk+0x64>)
 8005250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005252:	68fb      	ldr	r3, [r7, #12]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20020000 	.word	0x20020000
 8005260:	00000400 	.word	0x00000400
 8005264:	20000298 	.word	0x20000298
 8005268:	200004c8 	.word	0x200004c8

0800526c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005270:	4b06      	ldr	r3, [pc, #24]	; (800528c <SystemInit+0x20>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005276:	4a05      	ldr	r2, [pc, #20]	; (800528c <SystemInit+0x20>)
 8005278:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800527c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005280:	bf00      	nop
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	e000ed00 	.word	0xe000ed00

08005290 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005294:	4b11      	ldr	r3, [pc, #68]	; (80052dc <MX_USART1_UART_Init+0x4c>)
 8005296:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <MX_USART1_UART_Init+0x50>)
 8005298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800529a:	4b10      	ldr	r3, [pc, #64]	; (80052dc <MX_USART1_UART_Init+0x4c>)
 800529c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80052a2:	4b0e      	ldr	r3, [pc, #56]	; (80052dc <MX_USART1_UART_Init+0x4c>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80052a8:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <MX_USART1_UART_Init+0x4c>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80052ae:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <MX_USART1_UART_Init+0x4c>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80052b4:	4b09      	ldr	r3, [pc, #36]	; (80052dc <MX_USART1_UART_Init+0x4c>)
 80052b6:	220c      	movs	r2, #12
 80052b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052ba:	4b08      	ldr	r3, [pc, #32]	; (80052dc <MX_USART1_UART_Init+0x4c>)
 80052bc:	2200      	movs	r2, #0
 80052be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80052c0:	4b06      	ldr	r3, [pc, #24]	; (80052dc <MX_USART1_UART_Init+0x4c>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80052c6:	4805      	ldr	r0, [pc, #20]	; (80052dc <MX_USART1_UART_Init+0x4c>)
 80052c8:	f002 f828 	bl	800731c <HAL_UART_Init>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80052d2:	f7ff fead 	bl	8005030 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80052d6:	bf00      	nop
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	2000046c 	.word	0x2000046c
 80052e0:	40011000 	.word	0x40011000

080052e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08a      	sub	sp, #40	; 0x28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052ec:	f107 0314 	add.w	r3, r7, #20
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	605a      	str	r2, [r3, #4]
 80052f6:	609a      	str	r2, [r3, #8]
 80052f8:	60da      	str	r2, [r3, #12]
 80052fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a19      	ldr	r2, [pc, #100]	; (8005368 <HAL_UART_MspInit+0x84>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d12c      	bne.n	8005360 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005306:	2300      	movs	r3, #0
 8005308:	613b      	str	r3, [r7, #16]
 800530a:	4b18      	ldr	r3, [pc, #96]	; (800536c <HAL_UART_MspInit+0x88>)
 800530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530e:	4a17      	ldr	r2, [pc, #92]	; (800536c <HAL_UART_MspInit+0x88>)
 8005310:	f043 0310 	orr.w	r3, r3, #16
 8005314:	6453      	str	r3, [r2, #68]	; 0x44
 8005316:	4b15      	ldr	r3, [pc, #84]	; (800536c <HAL_UART_MspInit+0x88>)
 8005318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	613b      	str	r3, [r7, #16]
 8005320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	4b11      	ldr	r3, [pc, #68]	; (800536c <HAL_UART_MspInit+0x88>)
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	4a10      	ldr	r2, [pc, #64]	; (800536c <HAL_UART_MspInit+0x88>)
 800532c:	f043 0301 	orr.w	r3, r3, #1
 8005330:	6313      	str	r3, [r2, #48]	; 0x30
 8005332:	4b0e      	ldr	r3, [pc, #56]	; (800536c <HAL_UART_MspInit+0x88>)
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800533e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005344:	2302      	movs	r3, #2
 8005346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005348:	2300      	movs	r3, #0
 800534a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800534c:	2303      	movs	r3, #3
 800534e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005350:	2307      	movs	r3, #7
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005354:	f107 0314 	add.w	r3, r7, #20
 8005358:	4619      	mov	r1, r3
 800535a:	4805      	ldr	r0, [pc, #20]	; (8005370 <HAL_UART_MspInit+0x8c>)
 800535c:	f000 f9b0 	bl	80056c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005360:	bf00      	nop
 8005362:	3728      	adds	r7, #40	; 0x28
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	40011000 	.word	0x40011000
 800536c:	40023800 	.word	0x40023800
 8005370:	40020000 	.word	0x40020000

08005374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005378:	480d      	ldr	r0, [pc, #52]	; (80053b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800537a:	490e      	ldr	r1, [pc, #56]	; (80053b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800537c:	4a0e      	ldr	r2, [pc, #56]	; (80053b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800537e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005380:	e002      	b.n	8005388 <LoopCopyDataInit>

08005382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005386:	3304      	adds	r3, #4

08005388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800538a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800538c:	d3f9      	bcc.n	8005382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800538e:	4a0b      	ldr	r2, [pc, #44]	; (80053bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005390:	4c0b      	ldr	r4, [pc, #44]	; (80053c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005394:	e001      	b.n	800539a <LoopFillZerobss>

08005396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005398:	3204      	adds	r2, #4

0800539a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800539a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800539c:	d3fb      	bcc.n	8005396 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800539e:	f7ff ff65 	bl	800526c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053a2:	f002 fb83 	bl	8007aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053a6:	f7ff fdc5 	bl	8004f34 <main>
  bx  lr    
 80053aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80053ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80053b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053b4:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 80053b8:	08018138 	.word	0x08018138
  ldr r2, =_sbss
 80053bc:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 80053c0:	200004c4 	.word	0x200004c4

080053c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053c4:	e7fe      	b.n	80053c4 <ADC_IRQHandler>
	...

080053c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053cc:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <HAL_Init+0x40>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a0d      	ldr	r2, [pc, #52]	; (8005408 <HAL_Init+0x40>)
 80053d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80053d8:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <HAL_Init+0x40>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a0a      	ldr	r2, [pc, #40]	; (8005408 <HAL_Init+0x40>)
 80053de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053e4:	4b08      	ldr	r3, [pc, #32]	; (8005408 <HAL_Init+0x40>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a07      	ldr	r2, [pc, #28]	; (8005408 <HAL_Init+0x40>)
 80053ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053f0:	2003      	movs	r0, #3
 80053f2:	f000 f931 	bl	8005658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053f6:	2000      	movs	r0, #0
 80053f8:	f000 f808 	bl	800540c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053fc:	f7ff fe1e 	bl	800503c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40023c00 	.word	0x40023c00

0800540c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005414:	4b12      	ldr	r3, [pc, #72]	; (8005460 <HAL_InitTick+0x54>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	4b12      	ldr	r3, [pc, #72]	; (8005464 <HAL_InitTick+0x58>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	4619      	mov	r1, r3
 800541e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005422:	fbb3 f3f1 	udiv	r3, r3, r1
 8005426:	fbb2 f3f3 	udiv	r3, r2, r3
 800542a:	4618      	mov	r0, r3
 800542c:	f000 f93b 	bl	80056a6 <HAL_SYSTICK_Config>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e00e      	b.n	8005458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b0f      	cmp	r3, #15
 800543e:	d80a      	bhi.n	8005456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005440:	2200      	movs	r2, #0
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	f04f 30ff 	mov.w	r0, #4294967295
 8005448:	f000 f911 	bl	800566e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800544c:	4a06      	ldr	r2, [pc, #24]	; (8005468 <HAL_InitTick+0x5c>)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	e000      	b.n	8005458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
}
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	20000098 	.word	0x20000098
 8005464:	200000a0 	.word	0x200000a0
 8005468:	2000009c 	.word	0x2000009c

0800546c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <HAL_IncTick+0x20>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	461a      	mov	r2, r3
 8005476:	4b06      	ldr	r3, [pc, #24]	; (8005490 <HAL_IncTick+0x24>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4413      	add	r3, r2
 800547c:	4a04      	ldr	r2, [pc, #16]	; (8005490 <HAL_IncTick+0x24>)
 800547e:	6013      	str	r3, [r2, #0]
}
 8005480:	bf00      	nop
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	200000a0 	.word	0x200000a0
 8005490:	200004b0 	.word	0x200004b0

08005494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  return uwTick;
 8005498:	4b03      	ldr	r3, [pc, #12]	; (80054a8 <HAL_GetTick+0x14>)
 800549a:	681b      	ldr	r3, [r3, #0]
}
 800549c:	4618      	mov	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	200004b0 	.word	0x200004b0

080054ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054b4:	f7ff ffee 	bl	8005494 <HAL_GetTick>
 80054b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c4:	d005      	beq.n	80054d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054c6:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <HAL_Delay+0x44>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	461a      	mov	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80054d2:	bf00      	nop
 80054d4:	f7ff ffde 	bl	8005494 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d8f7      	bhi.n	80054d4 <HAL_Delay+0x28>
  {
  }
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	200000a0 	.word	0x200000a0

080054f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005504:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <__NVIC_SetPriorityGrouping+0x44>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005510:	4013      	ands	r3, r2
 8005512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800551c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005526:	4a04      	ldr	r2, [pc, #16]	; (8005538 <__NVIC_SetPriorityGrouping+0x44>)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	60d3      	str	r3, [r2, #12]
}
 800552c:	bf00      	nop
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	e000ed00 	.word	0xe000ed00

0800553c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005540:	4b04      	ldr	r3, [pc, #16]	; (8005554 <__NVIC_GetPriorityGrouping+0x18>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	0a1b      	lsrs	r3, r3, #8
 8005546:	f003 0307 	and.w	r3, r3, #7
}
 800554a:	4618      	mov	r0, r3
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	e000ed00 	.word	0xe000ed00

08005558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	6039      	str	r1, [r7, #0]
 8005562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005568:	2b00      	cmp	r3, #0
 800556a:	db0a      	blt.n	8005582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	b2da      	uxtb	r2, r3
 8005570:	490c      	ldr	r1, [pc, #48]	; (80055a4 <__NVIC_SetPriority+0x4c>)
 8005572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005576:	0112      	lsls	r2, r2, #4
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	440b      	add	r3, r1
 800557c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005580:	e00a      	b.n	8005598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	b2da      	uxtb	r2, r3
 8005586:	4908      	ldr	r1, [pc, #32]	; (80055a8 <__NVIC_SetPriority+0x50>)
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	3b04      	subs	r3, #4
 8005590:	0112      	lsls	r2, r2, #4
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	440b      	add	r3, r1
 8005596:	761a      	strb	r2, [r3, #24]
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	e000e100 	.word	0xe000e100
 80055a8:	e000ed00 	.word	0xe000ed00

080055ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b089      	sub	sp, #36	; 0x24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f1c3 0307 	rsb	r3, r3, #7
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	bf28      	it	cs
 80055ca:	2304      	movcs	r3, #4
 80055cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	3304      	adds	r3, #4
 80055d2:	2b06      	cmp	r3, #6
 80055d4:	d902      	bls.n	80055dc <NVIC_EncodePriority+0x30>
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	3b03      	subs	r3, #3
 80055da:	e000      	b.n	80055de <NVIC_EncodePriority+0x32>
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055e0:	f04f 32ff 	mov.w	r2, #4294967295
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	43da      	mvns	r2, r3
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	401a      	ands	r2, r3
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055f4:	f04f 31ff 	mov.w	r1, #4294967295
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	fa01 f303 	lsl.w	r3, r1, r3
 80055fe:	43d9      	mvns	r1, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005604:	4313      	orrs	r3, r2
         );
}
 8005606:	4618      	mov	r0, r3
 8005608:	3724      	adds	r7, #36	; 0x24
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
	...

08005614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3b01      	subs	r3, #1
 8005620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005624:	d301      	bcc.n	800562a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005626:	2301      	movs	r3, #1
 8005628:	e00f      	b.n	800564a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800562a:	4a0a      	ldr	r2, [pc, #40]	; (8005654 <SysTick_Config+0x40>)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3b01      	subs	r3, #1
 8005630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005632:	210f      	movs	r1, #15
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
 8005638:	f7ff ff8e 	bl	8005558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800563c:	4b05      	ldr	r3, [pc, #20]	; (8005654 <SysTick_Config+0x40>)
 800563e:	2200      	movs	r2, #0
 8005640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005642:	4b04      	ldr	r3, [pc, #16]	; (8005654 <SysTick_Config+0x40>)
 8005644:	2207      	movs	r2, #7
 8005646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	e000e010 	.word	0xe000e010

08005658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7ff ff47 	bl	80054f4 <__NVIC_SetPriorityGrouping>
}
 8005666:	bf00      	nop
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800566e:	b580      	push	{r7, lr}
 8005670:	b086      	sub	sp, #24
 8005672:	af00      	add	r7, sp, #0
 8005674:	4603      	mov	r3, r0
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	607a      	str	r2, [r7, #4]
 800567a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005680:	f7ff ff5c 	bl	800553c <__NVIC_GetPriorityGrouping>
 8005684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	6978      	ldr	r0, [r7, #20]
 800568c:	f7ff ff8e 	bl	80055ac <NVIC_EncodePriority>
 8005690:	4602      	mov	r2, r0
 8005692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005696:	4611      	mov	r1, r2
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff ff5d 	bl	8005558 <__NVIC_SetPriority>
}
 800569e:	bf00      	nop
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff ffb0 	bl	8005614 <SysTick_Config>
 80056b4:	4603      	mov	r3, r0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b089      	sub	sp, #36	; 0x24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056d6:	2300      	movs	r3, #0
 80056d8:	61fb      	str	r3, [r7, #28]
 80056da:	e16b      	b.n	80059b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056dc:	2201      	movs	r2, #1
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	4013      	ands	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	f040 815a 	bne.w	80059ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	2b01      	cmp	r3, #1
 8005704:	d005      	beq.n	8005712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800570e:	2b02      	cmp	r3, #2
 8005710:	d130      	bne.n	8005774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	2203      	movs	r2, #3
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	43db      	mvns	r3, r3
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	4013      	ands	r3, r2
 8005728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	4313      	orrs	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005748:	2201      	movs	r2, #1
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	43db      	mvns	r3, r3
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4013      	ands	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	091b      	lsrs	r3, r3, #4
 800575e:	f003 0201 	and.w	r2, r3, #1
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	4313      	orrs	r3, r2
 800576c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f003 0303 	and.w	r3, r3, #3
 800577c:	2b03      	cmp	r3, #3
 800577e:	d017      	beq.n	80057b0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	2203      	movs	r2, #3
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	43db      	mvns	r3, r3
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4013      	ands	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 0303 	and.w	r3, r3, #3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d123      	bne.n	8005804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	08da      	lsrs	r2, r3, #3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3208      	adds	r2, #8
 80057c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	220f      	movs	r2, #15
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	43db      	mvns	r3, r3
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	4013      	ands	r3, r2
 80057de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	08da      	lsrs	r2, r3, #3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3208      	adds	r2, #8
 80057fe:	69b9      	ldr	r1, [r7, #24]
 8005800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	2203      	movs	r2, #3
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	43db      	mvns	r3, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4013      	ands	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f003 0203 	and.w	r2, r3, #3
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4313      	orrs	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 80b4 	beq.w	80059ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	4b60      	ldr	r3, [pc, #384]	; (80059cc <HAL_GPIO_Init+0x30c>)
 800584c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584e:	4a5f      	ldr	r2, [pc, #380]	; (80059cc <HAL_GPIO_Init+0x30c>)
 8005850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005854:	6453      	str	r3, [r2, #68]	; 0x44
 8005856:	4b5d      	ldr	r3, [pc, #372]	; (80059cc <HAL_GPIO_Init+0x30c>)
 8005858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005862:	4a5b      	ldr	r2, [pc, #364]	; (80059d0 <HAL_GPIO_Init+0x310>)
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	089b      	lsrs	r3, r3, #2
 8005868:	3302      	adds	r3, #2
 800586a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800586e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	220f      	movs	r2, #15
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43db      	mvns	r3, r3
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	4013      	ands	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a52      	ldr	r2, [pc, #328]	; (80059d4 <HAL_GPIO_Init+0x314>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d02b      	beq.n	80058e6 <HAL_GPIO_Init+0x226>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a51      	ldr	r2, [pc, #324]	; (80059d8 <HAL_GPIO_Init+0x318>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d025      	beq.n	80058e2 <HAL_GPIO_Init+0x222>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a50      	ldr	r2, [pc, #320]	; (80059dc <HAL_GPIO_Init+0x31c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d01f      	beq.n	80058de <HAL_GPIO_Init+0x21e>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a4f      	ldr	r2, [pc, #316]	; (80059e0 <HAL_GPIO_Init+0x320>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d019      	beq.n	80058da <HAL_GPIO_Init+0x21a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a4e      	ldr	r2, [pc, #312]	; (80059e4 <HAL_GPIO_Init+0x324>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d013      	beq.n	80058d6 <HAL_GPIO_Init+0x216>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a4d      	ldr	r2, [pc, #308]	; (80059e8 <HAL_GPIO_Init+0x328>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00d      	beq.n	80058d2 <HAL_GPIO_Init+0x212>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a4c      	ldr	r2, [pc, #304]	; (80059ec <HAL_GPIO_Init+0x32c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d007      	beq.n	80058ce <HAL_GPIO_Init+0x20e>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a4b      	ldr	r2, [pc, #300]	; (80059f0 <HAL_GPIO_Init+0x330>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d101      	bne.n	80058ca <HAL_GPIO_Init+0x20a>
 80058c6:	2307      	movs	r3, #7
 80058c8:	e00e      	b.n	80058e8 <HAL_GPIO_Init+0x228>
 80058ca:	2308      	movs	r3, #8
 80058cc:	e00c      	b.n	80058e8 <HAL_GPIO_Init+0x228>
 80058ce:	2306      	movs	r3, #6
 80058d0:	e00a      	b.n	80058e8 <HAL_GPIO_Init+0x228>
 80058d2:	2305      	movs	r3, #5
 80058d4:	e008      	b.n	80058e8 <HAL_GPIO_Init+0x228>
 80058d6:	2304      	movs	r3, #4
 80058d8:	e006      	b.n	80058e8 <HAL_GPIO_Init+0x228>
 80058da:	2303      	movs	r3, #3
 80058dc:	e004      	b.n	80058e8 <HAL_GPIO_Init+0x228>
 80058de:	2302      	movs	r3, #2
 80058e0:	e002      	b.n	80058e8 <HAL_GPIO_Init+0x228>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e000      	b.n	80058e8 <HAL_GPIO_Init+0x228>
 80058e6:	2300      	movs	r3, #0
 80058e8:	69fa      	ldr	r2, [r7, #28]
 80058ea:	f002 0203 	and.w	r2, r2, #3
 80058ee:	0092      	lsls	r2, r2, #2
 80058f0:	4093      	lsls	r3, r2
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058f8:	4935      	ldr	r1, [pc, #212]	; (80059d0 <HAL_GPIO_Init+0x310>)
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	089b      	lsrs	r3, r3, #2
 80058fe:	3302      	adds	r3, #2
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005906:	4b3b      	ldr	r3, [pc, #236]	; (80059f4 <HAL_GPIO_Init+0x334>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	43db      	mvns	r3, r3
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	4013      	ands	r3, r2
 8005914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800592a:	4a32      	ldr	r2, [pc, #200]	; (80059f4 <HAL_GPIO_Init+0x334>)
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005930:	4b30      	ldr	r3, [pc, #192]	; (80059f4 <HAL_GPIO_Init+0x334>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	43db      	mvns	r3, r3
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	4013      	ands	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005954:	4a27      	ldr	r2, [pc, #156]	; (80059f4 <HAL_GPIO_Init+0x334>)
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800595a:	4b26      	ldr	r3, [pc, #152]	; (80059f4 <HAL_GPIO_Init+0x334>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	43db      	mvns	r3, r3
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	4013      	ands	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800597e:	4a1d      	ldr	r2, [pc, #116]	; (80059f4 <HAL_GPIO_Init+0x334>)
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005984:	4b1b      	ldr	r3, [pc, #108]	; (80059f4 <HAL_GPIO_Init+0x334>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	43db      	mvns	r3, r3
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	4013      	ands	r3, r2
 8005992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059a8:	4a12      	ldr	r2, [pc, #72]	; (80059f4 <HAL_GPIO_Init+0x334>)
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	3301      	adds	r3, #1
 80059b2:	61fb      	str	r3, [r7, #28]
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	2b0f      	cmp	r3, #15
 80059b8:	f67f ae90 	bls.w	80056dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	3724      	adds	r7, #36	; 0x24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40023800 	.word	0x40023800
 80059d0:	40013800 	.word	0x40013800
 80059d4:	40020000 	.word	0x40020000
 80059d8:	40020400 	.word	0x40020400
 80059dc:	40020800 	.word	0x40020800
 80059e0:	40020c00 	.word	0x40020c00
 80059e4:	40021000 	.word	0x40021000
 80059e8:	40021400 	.word	0x40021400
 80059ec:	40021800 	.word	0x40021800
 80059f0:	40021c00 	.word	0x40021c00
 80059f4:	40013c00 	.word	0x40013c00

080059f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	807b      	strh	r3, [r7, #2]
 8005a04:	4613      	mov	r3, r2
 8005a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a08:	787b      	ldrb	r3, [r7, #1]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a0e:	887a      	ldrh	r2, [r7, #2]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a14:	e003      	b.n	8005a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a16:	887b      	ldrh	r3, [r7, #2]
 8005a18:	041a      	lsls	r2, r3, #16
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	619a      	str	r2, [r3, #24]
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
	...

08005a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e12b      	b.n	8005c96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff fa26 	bl	8004ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2224      	movs	r2, #36	; 0x24
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0201 	bic.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a90:	f001 fbd8 	bl	8007244 <HAL_RCC_GetPCLK1Freq>
 8005a94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	4a81      	ldr	r2, [pc, #516]	; (8005ca0 <HAL_I2C_Init+0x274>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d807      	bhi.n	8005ab0 <HAL_I2C_Init+0x84>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4a80      	ldr	r2, [pc, #512]	; (8005ca4 <HAL_I2C_Init+0x278>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	bf94      	ite	ls
 8005aa8:	2301      	movls	r3, #1
 8005aaa:	2300      	movhi	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	e006      	b.n	8005abe <HAL_I2C_Init+0x92>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4a7d      	ldr	r2, [pc, #500]	; (8005ca8 <HAL_I2C_Init+0x27c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	bf94      	ite	ls
 8005ab8:	2301      	movls	r3, #1
 8005aba:	2300      	movhi	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e0e7      	b.n	8005c96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4a78      	ldr	r2, [pc, #480]	; (8005cac <HAL_I2C_Init+0x280>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	0c9b      	lsrs	r3, r3, #18
 8005ad0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	4a6a      	ldr	r2, [pc, #424]	; (8005ca0 <HAL_I2C_Init+0x274>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d802      	bhi.n	8005b00 <HAL_I2C_Init+0xd4>
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	3301      	adds	r3, #1
 8005afe:	e009      	b.n	8005b14 <HAL_I2C_Init+0xe8>
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b06:	fb02 f303 	mul.w	r3, r2, r3
 8005b0a:	4a69      	ldr	r2, [pc, #420]	; (8005cb0 <HAL_I2C_Init+0x284>)
 8005b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b10:	099b      	lsrs	r3, r3, #6
 8005b12:	3301      	adds	r3, #1
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6812      	ldr	r2, [r2, #0]
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	495c      	ldr	r1, [pc, #368]	; (8005ca0 <HAL_I2C_Init+0x274>)
 8005b30:	428b      	cmp	r3, r1
 8005b32:	d819      	bhi.n	8005b68 <HAL_I2C_Init+0x13c>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	1e59      	subs	r1, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b42:	1c59      	adds	r1, r3, #1
 8005b44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b48:	400b      	ands	r3, r1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <HAL_I2C_Init+0x138>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	1e59      	subs	r1, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b62:	e051      	b.n	8005c08 <HAL_I2C_Init+0x1dc>
 8005b64:	2304      	movs	r3, #4
 8005b66:	e04f      	b.n	8005c08 <HAL_I2C_Init+0x1dc>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d111      	bne.n	8005b94 <HAL_I2C_Init+0x168>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	1e58      	subs	r0, r3, #1
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6859      	ldr	r1, [r3, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	440b      	add	r3, r1
 8005b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b82:	3301      	adds	r3, #1
 8005b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	bf0c      	ite	eq
 8005b8c:	2301      	moveq	r3, #1
 8005b8e:	2300      	movne	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	e012      	b.n	8005bba <HAL_I2C_Init+0x18e>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	1e58      	subs	r0, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6859      	ldr	r1, [r3, #4]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	0099      	lsls	r1, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005baa:	3301      	adds	r3, #1
 8005bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	bf0c      	ite	eq
 8005bb4:	2301      	moveq	r3, #1
 8005bb6:	2300      	movne	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <HAL_I2C_Init+0x196>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e022      	b.n	8005c08 <HAL_I2C_Init+0x1dc>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10e      	bne.n	8005be8 <HAL_I2C_Init+0x1bc>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	1e58      	subs	r0, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6859      	ldr	r1, [r3, #4]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	440b      	add	r3, r1
 8005bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bdc:	3301      	adds	r3, #1
 8005bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be6:	e00f      	b.n	8005c08 <HAL_I2C_Init+0x1dc>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1e58      	subs	r0, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6859      	ldr	r1, [r3, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	0099      	lsls	r1, r3, #2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bfe:	3301      	adds	r3, #1
 8005c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c08:	6879      	ldr	r1, [r7, #4]
 8005c0a:	6809      	ldr	r1, [r1, #0]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69da      	ldr	r2, [r3, #28]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6911      	ldr	r1, [r2, #16]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	68d2      	ldr	r2, [r2, #12]
 8005c42:	4311      	orrs	r1, r2
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6812      	ldr	r2, [r2, #0]
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	695a      	ldr	r2, [r3, #20]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	000186a0 	.word	0x000186a0
 8005ca4:	001e847f 	.word	0x001e847f
 8005ca8:	003d08ff 	.word	0x003d08ff
 8005cac:	431bde83 	.word	0x431bde83
 8005cb0:	10624dd3 	.word	0x10624dd3

08005cb4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	817b      	strh	r3, [r7, #10]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	813b      	strh	r3, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cce:	f7ff fbe1 	bl	8005494 <HAL_GetTick>
 8005cd2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	f040 80d9 	bne.w	8005e94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	2319      	movs	r3, #25
 8005ce8:	2201      	movs	r2, #1
 8005cea:	496d      	ldr	r1, [pc, #436]	; (8005ea0 <HAL_I2C_Mem_Write+0x1ec>)
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 fc7f 	bl	80065f0 <I2C_WaitOnFlagUntilTimeout>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e0cc      	b.n	8005e96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <HAL_I2C_Mem_Write+0x56>
 8005d06:	2302      	movs	r3, #2
 8005d08:	e0c5      	b.n	8005e96 <HAL_I2C_Mem_Write+0x1e2>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d007      	beq.n	8005d30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0201 	orr.w	r2, r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2221      	movs	r2, #33	; 0x21
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2240      	movs	r2, #64	; 0x40
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a3a      	ldr	r2, [r7, #32]
 8005d5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4a4d      	ldr	r2, [pc, #308]	; (8005ea4 <HAL_I2C_Mem_Write+0x1f0>)
 8005d70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d72:	88f8      	ldrh	r0, [r7, #6]
 8005d74:	893a      	ldrh	r2, [r7, #8]
 8005d76:	8979      	ldrh	r1, [r7, #10]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	9301      	str	r3, [sp, #4]
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	4603      	mov	r3, r0
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 fab6 	bl	80062f4 <I2C_RequestMemoryWrite>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d052      	beq.n	8005e34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e081      	b.n	8005e96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 fd00 	bl	800679c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00d      	beq.n	8005dbe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d107      	bne.n	8005dba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e06b      	b.n	8005e96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	781a      	ldrb	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	3b01      	subs	r3, #1
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	d11b      	bne.n	8005e34 <HAL_I2C_Mem_Write+0x180>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d017      	beq.n	8005e34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	781a      	ldrb	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1aa      	bne.n	8005d92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 fcec 	bl	800681e <I2C_WaitOnBTFFlagUntilTimeout>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00d      	beq.n	8005e68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	d107      	bne.n	8005e64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e016      	b.n	8005e96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e90:	2300      	movs	r3, #0
 8005e92:	e000      	b.n	8005e96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005e94:	2302      	movs	r3, #2
  }
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	00100002 	.word	0x00100002
 8005ea4:	ffff0000 	.word	0xffff0000

08005ea8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08c      	sub	sp, #48	; 0x30
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	4608      	mov	r0, r1
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	817b      	strh	r3, [r7, #10]
 8005eba:	460b      	mov	r3, r1
 8005ebc:	813b      	strh	r3, [r7, #8]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ec2:	f7ff fae7 	bl	8005494 <HAL_GetTick>
 8005ec6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b20      	cmp	r3, #32
 8005ed2:	f040 8208 	bne.w	80062e6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	2319      	movs	r3, #25
 8005edc:	2201      	movs	r2, #1
 8005ede:	497b      	ldr	r1, [pc, #492]	; (80060cc <HAL_I2C_Mem_Read+0x224>)
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 fb85 	bl	80065f0 <I2C_WaitOnFlagUntilTimeout>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005eec:	2302      	movs	r3, #2
 8005eee:	e1fb      	b.n	80062e8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d101      	bne.n	8005efe <HAL_I2C_Mem_Read+0x56>
 8005efa:	2302      	movs	r3, #2
 8005efc:	e1f4      	b.n	80062e8 <HAL_I2C_Mem_Read+0x440>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d007      	beq.n	8005f24 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0201 	orr.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2222      	movs	r2, #34	; 0x22
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2240      	movs	r2, #64	; 0x40
 8005f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005f54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4a5b      	ldr	r2, [pc, #364]	; (80060d0 <HAL_I2C_Mem_Read+0x228>)
 8005f64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f66:	88f8      	ldrh	r0, [r7, #6]
 8005f68:	893a      	ldrh	r2, [r7, #8]
 8005f6a:	8979      	ldrh	r1, [r7, #10]
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	4603      	mov	r3, r0
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 fa52 	bl	8006420 <I2C_RequestMemoryRead>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e1b0      	b.n	80062e8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d113      	bne.n	8005fb6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f8e:	2300      	movs	r3, #0
 8005f90:	623b      	str	r3, [r7, #32]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	623b      	str	r3, [r7, #32]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	623b      	str	r3, [r7, #32]
 8005fa2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	e184      	b.n	80062c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d11b      	bne.n	8005ff6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fce:	2300      	movs	r3, #0
 8005fd0:	61fb      	str	r3, [r7, #28]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	61fb      	str	r3, [r7, #28]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	61fb      	str	r3, [r7, #28]
 8005fe2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	e164      	b.n	80062c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d11b      	bne.n	8006036 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800600c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800601c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800601e:	2300      	movs	r3, #0
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	61bb      	str	r3, [r7, #24]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	e144      	b.n	80062c0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006036:	2300      	movs	r3, #0
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	617b      	str	r3, [r7, #20]
 800604a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800604c:	e138      	b.n	80062c0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006052:	2b03      	cmp	r3, #3
 8006054:	f200 80f1 	bhi.w	800623a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605c:	2b01      	cmp	r3, #1
 800605e:	d123      	bne.n	80060a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006062:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 fc1b 	bl	80068a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e139      	b.n	80062e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691a      	ldr	r2, [r3, #16]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060a6:	e10b      	b.n	80062c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d14e      	bne.n	800614e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b6:	2200      	movs	r2, #0
 80060b8:	4906      	ldr	r1, [pc, #24]	; (80060d4 <HAL_I2C_Mem_Read+0x22c>)
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 fa98 	bl	80065f0 <I2C_WaitOnFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d008      	beq.n	80060d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e10e      	b.n	80062e8 <HAL_I2C_Mem_Read+0x440>
 80060ca:	bf00      	nop
 80060cc:	00100002 	.word	0x00100002
 80060d0:	ffff0000 	.word	0xffff0000
 80060d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691a      	ldr	r2, [r3, #16]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	b2d2      	uxtb	r2, r2
 80060f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006110:	b29b      	uxth	r3, r3
 8006112:	3b01      	subs	r3, #1
 8006114:	b29a      	uxth	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	691a      	ldr	r2, [r3, #16]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006136:	3b01      	subs	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006142:	b29b      	uxth	r3, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800614c:	e0b8      	b.n	80062c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006154:	2200      	movs	r2, #0
 8006156:	4966      	ldr	r1, [pc, #408]	; (80062f0 <HAL_I2C_Mem_Read+0x448>)
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 fa49 	bl	80065f0 <I2C_WaitOnFlagUntilTimeout>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e0bf      	b.n	80062e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006176:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691a      	ldr	r2, [r3, #16]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	2200      	movs	r2, #0
 80061b2:	494f      	ldr	r1, [pc, #316]	; (80062f0 <HAL_I2C_Mem_Read+0x448>)
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 fa1b 	bl	80065f0 <I2C_WaitOnFlagUntilTimeout>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e091      	b.n	80062e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691a      	ldr	r2, [r3, #16]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f0:	3b01      	subs	r3, #1
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006222:	3b01      	subs	r3, #1
 8006224:	b29a      	uxth	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622e:	b29b      	uxth	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006238:	e042      	b.n	80062c0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800623a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 fb2e 	bl	80068a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e04c      	b.n	80062e8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691a      	ldr	r2, [r3, #16]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	b2d2      	uxtb	r2, r2
 800625a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800626a:	3b01      	subs	r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006276:	b29b      	uxth	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f003 0304 	and.w	r3, r3, #4
 800628a:	2b04      	cmp	r3, #4
 800628c:	d118      	bne.n	80062c0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	691a      	ldr	r2, [r3, #16]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f47f aec2 	bne.w	800604e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	e000      	b.n	80062e8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80062e6:	2302      	movs	r3, #2
  }
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3728      	adds	r7, #40	; 0x28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	00010004 	.word	0x00010004

080062f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af02      	add	r7, sp, #8
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	4608      	mov	r0, r1
 80062fe:	4611      	mov	r1, r2
 8006300:	461a      	mov	r2, r3
 8006302:	4603      	mov	r3, r0
 8006304:	817b      	strh	r3, [r7, #10]
 8006306:	460b      	mov	r3, r1
 8006308:	813b      	strh	r3, [r7, #8]
 800630a:	4613      	mov	r3, r2
 800630c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800631c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	2200      	movs	r2, #0
 8006326:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 f960 	bl	80065f0 <I2C_WaitOnFlagUntilTimeout>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00d      	beq.n	8006352 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006344:	d103      	bne.n	800634e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800634c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e05f      	b.n	8006412 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006352:	897b      	ldrh	r3, [r7, #10]
 8006354:	b2db      	uxtb	r3, r3
 8006356:	461a      	mov	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006360:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	6a3a      	ldr	r2, [r7, #32]
 8006366:	492d      	ldr	r1, [pc, #180]	; (800641c <I2C_RequestMemoryWrite+0x128>)
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f998 	bl	800669e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e04c      	b.n	8006412 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006378:	2300      	movs	r3, #0
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800638e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006390:	6a39      	ldr	r1, [r7, #32]
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 fa02 	bl	800679c <I2C_WaitOnTXEFlagUntilTimeout>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00d      	beq.n	80063ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d107      	bne.n	80063b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e02b      	b.n	8006412 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063ba:	88fb      	ldrh	r3, [r7, #6]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d105      	bne.n	80063cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063c0:	893b      	ldrh	r3, [r7, #8]
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	611a      	str	r2, [r3, #16]
 80063ca:	e021      	b.n	8006410 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063cc:	893b      	ldrh	r3, [r7, #8]
 80063ce:	0a1b      	lsrs	r3, r3, #8
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063dc:	6a39      	ldr	r1, [r7, #32]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 f9dc 	bl	800679c <I2C_WaitOnTXEFlagUntilTimeout>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00d      	beq.n	8006406 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d107      	bne.n	8006402 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006400:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e005      	b.n	8006412 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006406:	893b      	ldrh	r3, [r7, #8]
 8006408:	b2da      	uxtb	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	00010002 	.word	0x00010002

08006420 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af02      	add	r7, sp, #8
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	4608      	mov	r0, r1
 800642a:	4611      	mov	r1, r2
 800642c:	461a      	mov	r2, r3
 800642e:	4603      	mov	r3, r0
 8006430:	817b      	strh	r3, [r7, #10]
 8006432:	460b      	mov	r3, r1
 8006434:	813b      	strh	r3, [r7, #8]
 8006436:	4613      	mov	r3, r2
 8006438:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006448:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006458:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	2200      	movs	r2, #0
 8006462:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 f8c2 	bl	80065f0 <I2C_WaitOnFlagUntilTimeout>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00d      	beq.n	800648e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006480:	d103      	bne.n	800648a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006488:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e0aa      	b.n	80065e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800648e:	897b      	ldrh	r3, [r7, #10]
 8006490:	b2db      	uxtb	r3, r3
 8006492:	461a      	mov	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800649c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	6a3a      	ldr	r2, [r7, #32]
 80064a2:	4952      	ldr	r1, [pc, #328]	; (80065ec <I2C_RequestMemoryRead+0x1cc>)
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 f8fa 	bl	800669e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e097      	b.n	80065e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064cc:	6a39      	ldr	r1, [r7, #32]
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f964 	bl	800679c <I2C_WaitOnTXEFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00d      	beq.n	80064f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	2b04      	cmp	r3, #4
 80064e0:	d107      	bne.n	80064f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e076      	b.n	80065e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064f6:	88fb      	ldrh	r3, [r7, #6]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d105      	bne.n	8006508 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064fc:	893b      	ldrh	r3, [r7, #8]
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	611a      	str	r2, [r3, #16]
 8006506:	e021      	b.n	800654c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006508:	893b      	ldrh	r3, [r7, #8]
 800650a:	0a1b      	lsrs	r3, r3, #8
 800650c:	b29b      	uxth	r3, r3
 800650e:	b2da      	uxtb	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006518:	6a39      	ldr	r1, [r7, #32]
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 f93e 	bl	800679c <I2C_WaitOnTXEFlagUntilTimeout>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00d      	beq.n	8006542 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	2b04      	cmp	r3, #4
 800652c:	d107      	bne.n	800653e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800653c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e050      	b.n	80065e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006542:	893b      	ldrh	r3, [r7, #8]
 8006544:	b2da      	uxtb	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800654c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654e:	6a39      	ldr	r1, [r7, #32]
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 f923 	bl	800679c <I2C_WaitOnTXEFlagUntilTimeout>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00d      	beq.n	8006578 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006560:	2b04      	cmp	r3, #4
 8006562:	d107      	bne.n	8006574 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006572:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e035      	b.n	80065e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006586:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	2200      	movs	r2, #0
 8006590:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 f82b 	bl	80065f0 <I2C_WaitOnFlagUntilTimeout>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00d      	beq.n	80065bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ae:	d103      	bne.n	80065b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e013      	b.n	80065e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80065bc:	897b      	ldrh	r3, [r7, #10]
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	f043 0301 	orr.w	r3, r3, #1
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	6a3a      	ldr	r2, [r7, #32]
 80065d0:	4906      	ldr	r1, [pc, #24]	; (80065ec <I2C_RequestMemoryRead+0x1cc>)
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 f863 	bl	800669e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	00010002 	.word	0x00010002

080065f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	4613      	mov	r3, r2
 80065fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006600:	e025      	b.n	800664e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006608:	d021      	beq.n	800664e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800660a:	f7fe ff43 	bl	8005494 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	429a      	cmp	r2, r3
 8006618:	d302      	bcc.n	8006620 <I2C_WaitOnFlagUntilTimeout+0x30>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d116      	bne.n	800664e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2220      	movs	r2, #32
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	f043 0220 	orr.w	r2, r3, #32
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e023      	b.n	8006696 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	0c1b      	lsrs	r3, r3, #16
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b01      	cmp	r3, #1
 8006656:	d10d      	bne.n	8006674 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	43da      	mvns	r2, r3
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	4013      	ands	r3, r2
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	bf0c      	ite	eq
 800666a:	2301      	moveq	r3, #1
 800666c:	2300      	movne	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	461a      	mov	r2, r3
 8006672:	e00c      	b.n	800668e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	43da      	mvns	r2, r3
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	4013      	ands	r3, r2
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	bf0c      	ite	eq
 8006686:	2301      	moveq	r3, #1
 8006688:	2300      	movne	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	79fb      	ldrb	r3, [r7, #7]
 8006690:	429a      	cmp	r2, r3
 8006692:	d0b6      	beq.n	8006602 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b084      	sub	sp, #16
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	60b9      	str	r1, [r7, #8]
 80066a8:	607a      	str	r2, [r7, #4]
 80066aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066ac:	e051      	b.n	8006752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066bc:	d123      	bne.n	8006706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	f043 0204 	orr.w	r2, r3, #4
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e046      	b.n	8006794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670c:	d021      	beq.n	8006752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800670e:	f7fe fec1 	bl	8005494 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	429a      	cmp	r2, r3
 800671c:	d302      	bcc.n	8006724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d116      	bne.n	8006752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2220      	movs	r2, #32
 800672e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	f043 0220 	orr.w	r2, r3, #32
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e020      	b.n	8006794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	0c1b      	lsrs	r3, r3, #16
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b01      	cmp	r3, #1
 800675a:	d10c      	bne.n	8006776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	43da      	mvns	r2, r3
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	4013      	ands	r3, r2
 8006768:	b29b      	uxth	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	bf14      	ite	ne
 800676e:	2301      	movne	r3, #1
 8006770:	2300      	moveq	r3, #0
 8006772:	b2db      	uxtb	r3, r3
 8006774:	e00b      	b.n	800678e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	43da      	mvns	r2, r3
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4013      	ands	r3, r2
 8006782:	b29b      	uxth	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	bf14      	ite	ne
 8006788:	2301      	movne	r3, #1
 800678a:	2300      	moveq	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d18d      	bne.n	80066ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067a8:	e02d      	b.n	8006806 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 f8ce 	bl	800694c <I2C_IsAcknowledgeFailed>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e02d      	b.n	8006816 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c0:	d021      	beq.n	8006806 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c2:	f7fe fe67 	bl	8005494 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d302      	bcc.n	80067d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d116      	bne.n	8006806 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2220      	movs	r2, #32
 80067e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	f043 0220 	orr.w	r2, r3, #32
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e007      	b.n	8006816 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006810:	2b80      	cmp	r3, #128	; 0x80
 8006812:	d1ca      	bne.n	80067aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800682a:	e02d      	b.n	8006888 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 f88d 	bl	800694c <I2C_IsAcknowledgeFailed>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e02d      	b.n	8006898 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006842:	d021      	beq.n	8006888 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006844:	f7fe fe26 	bl	8005494 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	429a      	cmp	r2, r3
 8006852:	d302      	bcc.n	800685a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d116      	bne.n	8006888 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006874:	f043 0220 	orr.w	r2, r3, #32
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e007      	b.n	8006898 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b04      	cmp	r3, #4
 8006894:	d1ca      	bne.n	800682c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068ac:	e042      	b.n	8006934 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	f003 0310 	and.w	r3, r3, #16
 80068b8:	2b10      	cmp	r3, #16
 80068ba:	d119      	bne.n	80068f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f06f 0210 	mvn.w	r2, #16
 80068c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e029      	b.n	8006944 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068f0:	f7fe fdd0 	bl	8005494 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d302      	bcc.n	8006906 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d116      	bne.n	8006934 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2220      	movs	r2, #32
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006920:	f043 0220 	orr.w	r2, r3, #32
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e007      	b.n	8006944 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693e:	2b40      	cmp	r3, #64	; 0x40
 8006940:	d1b5      	bne.n	80068ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006962:	d11b      	bne.n	800699c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800696c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006988:	f043 0204 	orr.w	r2, r3, #4
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e000      	b.n	800699e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
	...

080069ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e264      	b.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d075      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069ca:	4ba3      	ldr	r3, [pc, #652]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f003 030c 	and.w	r3, r3, #12
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d00c      	beq.n	80069f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069d6:	4ba0      	ldr	r3, [pc, #640]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069de:	2b08      	cmp	r3, #8
 80069e0:	d112      	bne.n	8006a08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069e2:	4b9d      	ldr	r3, [pc, #628]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ee:	d10b      	bne.n	8006a08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069f0:	4b99      	ldr	r3, [pc, #612]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d05b      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x108>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d157      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e23f      	b.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a10:	d106      	bne.n	8006a20 <HAL_RCC_OscConfig+0x74>
 8006a12:	4b91      	ldr	r3, [pc, #580]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a90      	ldr	r2, [pc, #576]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	e01d      	b.n	8006a5c <HAL_RCC_OscConfig+0xb0>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a28:	d10c      	bne.n	8006a44 <HAL_RCC_OscConfig+0x98>
 8006a2a:	4b8b      	ldr	r3, [pc, #556]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a8a      	ldr	r2, [pc, #552]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	4b88      	ldr	r3, [pc, #544]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a87      	ldr	r2, [pc, #540]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a40:	6013      	str	r3, [r2, #0]
 8006a42:	e00b      	b.n	8006a5c <HAL_RCC_OscConfig+0xb0>
 8006a44:	4b84      	ldr	r3, [pc, #528]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a83      	ldr	r2, [pc, #524]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a4e:	6013      	str	r3, [r2, #0]
 8006a50:	4b81      	ldr	r3, [pc, #516]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a80      	ldr	r2, [pc, #512]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d013      	beq.n	8006a8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a64:	f7fe fd16 	bl	8005494 <HAL_GetTick>
 8006a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a6a:	e008      	b.n	8006a7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a6c:	f7fe fd12 	bl	8005494 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b64      	cmp	r3, #100	; 0x64
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e204      	b.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a7e:	4b76      	ldr	r3, [pc, #472]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0f0      	beq.n	8006a6c <HAL_RCC_OscConfig+0xc0>
 8006a8a:	e014      	b.n	8006ab6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a8c:	f7fe fd02 	bl	8005494 <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a94:	f7fe fcfe 	bl	8005494 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b64      	cmp	r3, #100	; 0x64
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e1f0      	b.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aa6:	4b6c      	ldr	r3, [pc, #432]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1f0      	bne.n	8006a94 <HAL_RCC_OscConfig+0xe8>
 8006ab2:	e000      	b.n	8006ab6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d063      	beq.n	8006b8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ac2:	4b65      	ldr	r3, [pc, #404]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f003 030c 	and.w	r3, r3, #12
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00b      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ace:	4b62      	ldr	r3, [pc, #392]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ad6:	2b08      	cmp	r3, #8
 8006ad8:	d11c      	bne.n	8006b14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ada:	4b5f      	ldr	r3, [pc, #380]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d116      	bne.n	8006b14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ae6:	4b5c      	ldr	r3, [pc, #368]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d005      	beq.n	8006afe <HAL_RCC_OscConfig+0x152>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d001      	beq.n	8006afe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e1c4      	b.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006afe:	4b56      	ldr	r3, [pc, #344]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	4952      	ldr	r1, [pc, #328]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b12:	e03a      	b.n	8006b8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d020      	beq.n	8006b5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b1c:	4b4f      	ldr	r3, [pc, #316]	; (8006c5c <HAL_RCC_OscConfig+0x2b0>)
 8006b1e:	2201      	movs	r2, #1
 8006b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b22:	f7fe fcb7 	bl	8005494 <HAL_GetTick>
 8006b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b28:	e008      	b.n	8006b3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b2a:	f7fe fcb3 	bl	8005494 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d901      	bls.n	8006b3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e1a5      	b.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b3c:	4b46      	ldr	r3, [pc, #280]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0f0      	beq.n	8006b2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b48:	4b43      	ldr	r3, [pc, #268]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	00db      	lsls	r3, r3, #3
 8006b56:	4940      	ldr	r1, [pc, #256]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	600b      	str	r3, [r1, #0]
 8006b5c:	e015      	b.n	8006b8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b5e:	4b3f      	ldr	r3, [pc, #252]	; (8006c5c <HAL_RCC_OscConfig+0x2b0>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b64:	f7fe fc96 	bl	8005494 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b6c:	f7fe fc92 	bl	8005494 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e184      	b.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b7e:	4b36      	ldr	r3, [pc, #216]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1f0      	bne.n	8006b6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0308 	and.w	r3, r3, #8
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d030      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d016      	beq.n	8006bcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b9e:	4b30      	ldr	r3, [pc, #192]	; (8006c60 <HAL_RCC_OscConfig+0x2b4>)
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba4:	f7fe fc76 	bl	8005494 <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bac:	f7fe fc72 	bl	8005494 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e164      	b.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bbe:	4b26      	ldr	r3, [pc, #152]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0f0      	beq.n	8006bac <HAL_RCC_OscConfig+0x200>
 8006bca:	e015      	b.n	8006bf8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bcc:	4b24      	ldr	r3, [pc, #144]	; (8006c60 <HAL_RCC_OscConfig+0x2b4>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bd2:	f7fe fc5f 	bl	8005494 <HAL_GetTick>
 8006bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd8:	e008      	b.n	8006bec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bda:	f7fe fc5b 	bl	8005494 <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d901      	bls.n	8006bec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e14d      	b.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bec:	4b1a      	ldr	r3, [pc, #104]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1f0      	bne.n	8006bda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 80a0 	beq.w	8006d46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c06:	2300      	movs	r3, #0
 8006c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c0a:	4b13      	ldr	r3, [pc, #76]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10f      	bne.n	8006c36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c16:	2300      	movs	r3, #0
 8006c18:	60bb      	str	r3, [r7, #8]
 8006c1a:	4b0f      	ldr	r3, [pc, #60]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	4a0e      	ldr	r2, [pc, #56]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c24:	6413      	str	r3, [r2, #64]	; 0x40
 8006c26:	4b0c      	ldr	r3, [pc, #48]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c2e:	60bb      	str	r3, [r7, #8]
 8006c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c32:	2301      	movs	r3, #1
 8006c34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c36:	4b0b      	ldr	r3, [pc, #44]	; (8006c64 <HAL_RCC_OscConfig+0x2b8>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d121      	bne.n	8006c86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c42:	4b08      	ldr	r3, [pc, #32]	; (8006c64 <HAL_RCC_OscConfig+0x2b8>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a07      	ldr	r2, [pc, #28]	; (8006c64 <HAL_RCC_OscConfig+0x2b8>)
 8006c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c4e:	f7fe fc21 	bl	8005494 <HAL_GetTick>
 8006c52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c54:	e011      	b.n	8006c7a <HAL_RCC_OscConfig+0x2ce>
 8006c56:	bf00      	nop
 8006c58:	40023800 	.word	0x40023800
 8006c5c:	42470000 	.word	0x42470000
 8006c60:	42470e80 	.word	0x42470e80
 8006c64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c68:	f7fe fc14 	bl	8005494 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e106      	b.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c7a:	4b85      	ldr	r3, [pc, #532]	; (8006e90 <HAL_RCC_OscConfig+0x4e4>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0f0      	beq.n	8006c68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d106      	bne.n	8006c9c <HAL_RCC_OscConfig+0x2f0>
 8006c8e:	4b81      	ldr	r3, [pc, #516]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c92:	4a80      	ldr	r2, [pc, #512]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006c94:	f043 0301 	orr.w	r3, r3, #1
 8006c98:	6713      	str	r3, [r2, #112]	; 0x70
 8006c9a:	e01c      	b.n	8006cd6 <HAL_RCC_OscConfig+0x32a>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	2b05      	cmp	r3, #5
 8006ca2:	d10c      	bne.n	8006cbe <HAL_RCC_OscConfig+0x312>
 8006ca4:	4b7b      	ldr	r3, [pc, #492]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca8:	4a7a      	ldr	r2, [pc, #488]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006caa:	f043 0304 	orr.w	r3, r3, #4
 8006cae:	6713      	str	r3, [r2, #112]	; 0x70
 8006cb0:	4b78      	ldr	r3, [pc, #480]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb4:	4a77      	ldr	r2, [pc, #476]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006cb6:	f043 0301 	orr.w	r3, r3, #1
 8006cba:	6713      	str	r3, [r2, #112]	; 0x70
 8006cbc:	e00b      	b.n	8006cd6 <HAL_RCC_OscConfig+0x32a>
 8006cbe:	4b75      	ldr	r3, [pc, #468]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc2:	4a74      	ldr	r2, [pc, #464]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006cc4:	f023 0301 	bic.w	r3, r3, #1
 8006cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cca:	4b72      	ldr	r3, [pc, #456]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cce:	4a71      	ldr	r2, [pc, #452]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006cd0:	f023 0304 	bic.w	r3, r3, #4
 8006cd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d015      	beq.n	8006d0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cde:	f7fe fbd9 	bl	8005494 <HAL_GetTick>
 8006ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ce4:	e00a      	b.n	8006cfc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ce6:	f7fe fbd5 	bl	8005494 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d901      	bls.n	8006cfc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e0c5      	b.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cfc:	4b65      	ldr	r3, [pc, #404]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0ee      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x33a>
 8006d08:	e014      	b.n	8006d34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d0a:	f7fe fbc3 	bl	8005494 <HAL_GetTick>
 8006d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d10:	e00a      	b.n	8006d28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d12:	f7fe fbbf 	bl	8005494 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d901      	bls.n	8006d28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e0af      	b.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d28:	4b5a      	ldr	r3, [pc, #360]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1ee      	bne.n	8006d12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d34:	7dfb      	ldrb	r3, [r7, #23]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d105      	bne.n	8006d46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d3a:	4b56      	ldr	r3, [pc, #344]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	4a55      	ldr	r2, [pc, #340]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 809b 	beq.w	8006e86 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d50:	4b50      	ldr	r3, [pc, #320]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f003 030c 	and.w	r3, r3, #12
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	d05c      	beq.n	8006e16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d141      	bne.n	8006de8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d64:	4b4c      	ldr	r3, [pc, #304]	; (8006e98 <HAL_RCC_OscConfig+0x4ec>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d6a:	f7fe fb93 	bl	8005494 <HAL_GetTick>
 8006d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d70:	e008      	b.n	8006d84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d72:	f7fe fb8f 	bl	8005494 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d901      	bls.n	8006d84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e081      	b.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d84:	4b43      	ldr	r3, [pc, #268]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1f0      	bne.n	8006d72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	69da      	ldr	r2, [r3, #28]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	019b      	lsls	r3, r3, #6
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da6:	085b      	lsrs	r3, r3, #1
 8006da8:	3b01      	subs	r3, #1
 8006daa:	041b      	lsls	r3, r3, #16
 8006dac:	431a      	orrs	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	061b      	lsls	r3, r3, #24
 8006db4:	4937      	ldr	r1, [pc, #220]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dba:	4b37      	ldr	r3, [pc, #220]	; (8006e98 <HAL_RCC_OscConfig+0x4ec>)
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc0:	f7fe fb68 	bl	8005494 <HAL_GetTick>
 8006dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dc8:	f7fe fb64 	bl	8005494 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e056      	b.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dda:	4b2e      	ldr	r3, [pc, #184]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d0f0      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x41c>
 8006de6:	e04e      	b.n	8006e86 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006de8:	4b2b      	ldr	r3, [pc, #172]	; (8006e98 <HAL_RCC_OscConfig+0x4ec>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dee:	f7fe fb51 	bl	8005494 <HAL_GetTick>
 8006df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006df4:	e008      	b.n	8006e08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006df6:	f7fe fb4d 	bl	8005494 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d901      	bls.n	8006e08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e03f      	b.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e08:	4b22      	ldr	r3, [pc, #136]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1f0      	bne.n	8006df6 <HAL_RCC_OscConfig+0x44a>
 8006e14:	e037      	b.n	8006e86 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d101      	bne.n	8006e22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e032      	b.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e22:	4b1c      	ldr	r3, [pc, #112]	; (8006e94 <HAL_RCC_OscConfig+0x4e8>)
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d028      	beq.n	8006e82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d121      	bne.n	8006e82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d11a      	bne.n	8006e82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e52:	4013      	ands	r3, r2
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e58:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d111      	bne.n	8006e82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e68:	085b      	lsrs	r3, r3, #1
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d107      	bne.n	8006e82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d001      	beq.n	8006e86 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e000      	b.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	40007000 	.word	0x40007000
 8006e94:	40023800 	.word	0x40023800
 8006e98:	42470060 	.word	0x42470060

08006e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e0cc      	b.n	800704a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006eb0:	4b68      	ldr	r3, [pc, #416]	; (8007054 <HAL_RCC_ClockConfig+0x1b8>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d90c      	bls.n	8006ed8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ebe:	4b65      	ldr	r3, [pc, #404]	; (8007054 <HAL_RCC_ClockConfig+0x1b8>)
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	b2d2      	uxtb	r2, r2
 8006ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ec6:	4b63      	ldr	r3, [pc, #396]	; (8007054 <HAL_RCC_ClockConfig+0x1b8>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d001      	beq.n	8006ed8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e0b8      	b.n	800704a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d020      	beq.n	8006f26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d005      	beq.n	8006efc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ef0:	4b59      	ldr	r3, [pc, #356]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	4a58      	ldr	r2, [pc, #352]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006efa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0308 	and.w	r3, r3, #8
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d005      	beq.n	8006f14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f08:	4b53      	ldr	r3, [pc, #332]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	4a52      	ldr	r2, [pc, #328]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006f0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f14:	4b50      	ldr	r3, [pc, #320]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	494d      	ldr	r1, [pc, #308]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d044      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d107      	bne.n	8006f4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f3a:	4b47      	ldr	r3, [pc, #284]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d119      	bne.n	8006f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e07f      	b.n	800704a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d003      	beq.n	8006f5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d107      	bne.n	8006f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f5a:	4b3f      	ldr	r3, [pc, #252]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d109      	bne.n	8006f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e06f      	b.n	800704a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f6a:	4b3b      	ldr	r3, [pc, #236]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e067      	b.n	800704a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f7a:	4b37      	ldr	r3, [pc, #220]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f023 0203 	bic.w	r2, r3, #3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	4934      	ldr	r1, [pc, #208]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f8c:	f7fe fa82 	bl	8005494 <HAL_GetTick>
 8006f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f92:	e00a      	b.n	8006faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f94:	f7fe fa7e 	bl	8005494 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e04f      	b.n	800704a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006faa:	4b2b      	ldr	r3, [pc, #172]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f003 020c 	and.w	r2, r3, #12
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d1eb      	bne.n	8006f94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fbc:	4b25      	ldr	r3, [pc, #148]	; (8007054 <HAL_RCC_ClockConfig+0x1b8>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0307 	and.w	r3, r3, #7
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d20c      	bcs.n	8006fe4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fca:	4b22      	ldr	r3, [pc, #136]	; (8007054 <HAL_RCC_ClockConfig+0x1b8>)
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fd2:	4b20      	ldr	r3, [pc, #128]	; (8007054 <HAL_RCC_ClockConfig+0x1b8>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0307 	and.w	r3, r3, #7
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d001      	beq.n	8006fe4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e032      	b.n	800704a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d008      	beq.n	8007002 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ff0:	4b19      	ldr	r3, [pc, #100]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	4916      	ldr	r1, [pc, #88]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0308 	and.w	r3, r3, #8
 800700a:	2b00      	cmp	r3, #0
 800700c:	d009      	beq.n	8007022 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800700e:	4b12      	ldr	r3, [pc, #72]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	00db      	lsls	r3, r3, #3
 800701c:	490e      	ldr	r1, [pc, #56]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	4313      	orrs	r3, r2
 8007020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007022:	f000 f821 	bl	8007068 <HAL_RCC_GetSysClockFreq>
 8007026:	4602      	mov	r2, r0
 8007028:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	091b      	lsrs	r3, r3, #4
 800702e:	f003 030f 	and.w	r3, r3, #15
 8007032:	490a      	ldr	r1, [pc, #40]	; (800705c <HAL_RCC_ClockConfig+0x1c0>)
 8007034:	5ccb      	ldrb	r3, [r1, r3]
 8007036:	fa22 f303 	lsr.w	r3, r2, r3
 800703a:	4a09      	ldr	r2, [pc, #36]	; (8007060 <HAL_RCC_ClockConfig+0x1c4>)
 800703c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800703e:	4b09      	ldr	r3, [pc, #36]	; (8007064 <HAL_RCC_ClockConfig+0x1c8>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe f9e2 	bl	800540c <HAL_InitTick>

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	40023c00 	.word	0x40023c00
 8007058:	40023800 	.word	0x40023800
 800705c:	08017cb8 	.word	0x08017cb8
 8007060:	20000098 	.word	0x20000098
 8007064:	2000009c 	.word	0x2000009c

08007068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007068:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	607b      	str	r3, [r7, #4]
 8007074:	2300      	movs	r3, #0
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	2300      	movs	r3, #0
 800707a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007080:	4b67      	ldr	r3, [pc, #412]	; (8007220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f003 030c 	and.w	r3, r3, #12
 8007088:	2b08      	cmp	r3, #8
 800708a:	d00d      	beq.n	80070a8 <HAL_RCC_GetSysClockFreq+0x40>
 800708c:	2b08      	cmp	r3, #8
 800708e:	f200 80bd 	bhi.w	800720c <HAL_RCC_GetSysClockFreq+0x1a4>
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <HAL_RCC_GetSysClockFreq+0x34>
 8007096:	2b04      	cmp	r3, #4
 8007098:	d003      	beq.n	80070a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800709a:	e0b7      	b.n	800720c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800709c:	4b61      	ldr	r3, [pc, #388]	; (8007224 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800709e:	60bb      	str	r3, [r7, #8]
       break;
 80070a0:	e0b7      	b.n	8007212 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070a2:	4b61      	ldr	r3, [pc, #388]	; (8007228 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80070a4:	60bb      	str	r3, [r7, #8]
      break;
 80070a6:	e0b4      	b.n	8007212 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070a8:	4b5d      	ldr	r3, [pc, #372]	; (8007220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070b2:	4b5b      	ldr	r3, [pc, #364]	; (8007220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d04d      	beq.n	800715a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070be:	4b58      	ldr	r3, [pc, #352]	; (8007220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	099b      	lsrs	r3, r3, #6
 80070c4:	461a      	mov	r2, r3
 80070c6:	f04f 0300 	mov.w	r3, #0
 80070ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80070ce:	f04f 0100 	mov.w	r1, #0
 80070d2:	ea02 0800 	and.w	r8, r2, r0
 80070d6:	ea03 0901 	and.w	r9, r3, r1
 80070da:	4640      	mov	r0, r8
 80070dc:	4649      	mov	r1, r9
 80070de:	f04f 0200 	mov.w	r2, #0
 80070e2:	f04f 0300 	mov.w	r3, #0
 80070e6:	014b      	lsls	r3, r1, #5
 80070e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80070ec:	0142      	lsls	r2, r0, #5
 80070ee:	4610      	mov	r0, r2
 80070f0:	4619      	mov	r1, r3
 80070f2:	ebb0 0008 	subs.w	r0, r0, r8
 80070f6:	eb61 0109 	sbc.w	r1, r1, r9
 80070fa:	f04f 0200 	mov.w	r2, #0
 80070fe:	f04f 0300 	mov.w	r3, #0
 8007102:	018b      	lsls	r3, r1, #6
 8007104:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007108:	0182      	lsls	r2, r0, #6
 800710a:	1a12      	subs	r2, r2, r0
 800710c:	eb63 0301 	sbc.w	r3, r3, r1
 8007110:	f04f 0000 	mov.w	r0, #0
 8007114:	f04f 0100 	mov.w	r1, #0
 8007118:	00d9      	lsls	r1, r3, #3
 800711a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800711e:	00d0      	lsls	r0, r2, #3
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	eb12 0208 	adds.w	r2, r2, r8
 8007128:	eb43 0309 	adc.w	r3, r3, r9
 800712c:	f04f 0000 	mov.w	r0, #0
 8007130:	f04f 0100 	mov.w	r1, #0
 8007134:	0259      	lsls	r1, r3, #9
 8007136:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800713a:	0250      	lsls	r0, r2, #9
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	4610      	mov	r0, r2
 8007142:	4619      	mov	r1, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	461a      	mov	r2, r3
 8007148:	f04f 0300 	mov.w	r3, #0
 800714c:	f7f9 fd9c 	bl	8000c88 <__aeabi_uldivmod>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4613      	mov	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	e04a      	b.n	80071f0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800715a:	4b31      	ldr	r3, [pc, #196]	; (8007220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	099b      	lsrs	r3, r3, #6
 8007160:	461a      	mov	r2, r3
 8007162:	f04f 0300 	mov.w	r3, #0
 8007166:	f240 10ff 	movw	r0, #511	; 0x1ff
 800716a:	f04f 0100 	mov.w	r1, #0
 800716e:	ea02 0400 	and.w	r4, r2, r0
 8007172:	ea03 0501 	and.w	r5, r3, r1
 8007176:	4620      	mov	r0, r4
 8007178:	4629      	mov	r1, r5
 800717a:	f04f 0200 	mov.w	r2, #0
 800717e:	f04f 0300 	mov.w	r3, #0
 8007182:	014b      	lsls	r3, r1, #5
 8007184:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007188:	0142      	lsls	r2, r0, #5
 800718a:	4610      	mov	r0, r2
 800718c:	4619      	mov	r1, r3
 800718e:	1b00      	subs	r0, r0, r4
 8007190:	eb61 0105 	sbc.w	r1, r1, r5
 8007194:	f04f 0200 	mov.w	r2, #0
 8007198:	f04f 0300 	mov.w	r3, #0
 800719c:	018b      	lsls	r3, r1, #6
 800719e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80071a2:	0182      	lsls	r2, r0, #6
 80071a4:	1a12      	subs	r2, r2, r0
 80071a6:	eb63 0301 	sbc.w	r3, r3, r1
 80071aa:	f04f 0000 	mov.w	r0, #0
 80071ae:	f04f 0100 	mov.w	r1, #0
 80071b2:	00d9      	lsls	r1, r3, #3
 80071b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071b8:	00d0      	lsls	r0, r2, #3
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	1912      	adds	r2, r2, r4
 80071c0:	eb45 0303 	adc.w	r3, r5, r3
 80071c4:	f04f 0000 	mov.w	r0, #0
 80071c8:	f04f 0100 	mov.w	r1, #0
 80071cc:	0299      	lsls	r1, r3, #10
 80071ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80071d2:	0290      	lsls	r0, r2, #10
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4610      	mov	r0, r2
 80071da:	4619      	mov	r1, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	461a      	mov	r2, r3
 80071e0:	f04f 0300 	mov.w	r3, #0
 80071e4:	f7f9 fd50 	bl	8000c88 <__aeabi_uldivmod>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4613      	mov	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071f0:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	0c1b      	lsrs	r3, r3, #16
 80071f6:	f003 0303 	and.w	r3, r3, #3
 80071fa:	3301      	adds	r3, #1
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	fbb2 f3f3 	udiv	r3, r2, r3
 8007208:	60bb      	str	r3, [r7, #8]
      break;
 800720a:	e002      	b.n	8007212 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800720c:	4b05      	ldr	r3, [pc, #20]	; (8007224 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800720e:	60bb      	str	r3, [r7, #8]
      break;
 8007210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007212:	68bb      	ldr	r3, [r7, #8]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800721e:	bf00      	nop
 8007220:	40023800 	.word	0x40023800
 8007224:	00f42400 	.word	0x00f42400
 8007228:	007a1200 	.word	0x007a1200

0800722c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800722c:	b480      	push	{r7}
 800722e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007230:	4b03      	ldr	r3, [pc, #12]	; (8007240 <HAL_RCC_GetHCLKFreq+0x14>)
 8007232:	681b      	ldr	r3, [r3, #0]
}
 8007234:	4618      	mov	r0, r3
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	20000098 	.word	0x20000098

08007244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007248:	f7ff fff0 	bl	800722c <HAL_RCC_GetHCLKFreq>
 800724c:	4602      	mov	r2, r0
 800724e:	4b05      	ldr	r3, [pc, #20]	; (8007264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	0a9b      	lsrs	r3, r3, #10
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	4903      	ldr	r1, [pc, #12]	; (8007268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800725a:	5ccb      	ldrb	r3, [r1, r3]
 800725c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007260:	4618      	mov	r0, r3
 8007262:	bd80      	pop	{r7, pc}
 8007264:	40023800 	.word	0x40023800
 8007268:	08017cc8 	.word	0x08017cc8

0800726c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007270:	f7ff ffdc 	bl	800722c <HAL_RCC_GetHCLKFreq>
 8007274:	4602      	mov	r2, r0
 8007276:	4b05      	ldr	r3, [pc, #20]	; (800728c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	0b5b      	lsrs	r3, r3, #13
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	4903      	ldr	r1, [pc, #12]	; (8007290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007282:	5ccb      	ldrb	r3, [r1, r3]
 8007284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007288:	4618      	mov	r0, r3
 800728a:	bd80      	pop	{r7, pc}
 800728c:	40023800 	.word	0x40023800
 8007290:	08017cc8 	.word	0x08017cc8

08007294 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e034      	b.n	8007314 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d106      	bne.n	80072c4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f7fd fd2e 	bl	8004d20 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3308      	adds	r3, #8
 80072cc:	4619      	mov	r1, r3
 80072ce:	4610      	mov	r0, r2
 80072d0:	f000 fb16 	bl	8007900 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	461a      	mov	r2, r3
 80072de:	68b9      	ldr	r1, [r7, #8]
 80072e0:	f000 fb60 	bl	80079a4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6858      	ldr	r0, [r3, #4]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f0:	6879      	ldr	r1, [r7, #4]
 80072f2:	f000 fb95 	bl	8007a20 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	6892      	ldr	r2, [r2, #8]
 80072fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	6892      	ldr	r2, [r2, #8]
 800730a:	f041 0101 	orr.w	r1, r1, #1
 800730e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e03f      	b.n	80073ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d106      	bne.n	8007348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7fd ffce 	bl	80052e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2224      	movs	r2, #36	; 0x24
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800735e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f905 	bl	8007570 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	691a      	ldr	r2, [r3, #16]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	695a      	ldr	r2, [r3, #20]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68da      	ldr	r2, [r3, #12]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2220      	movs	r2, #32
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2220      	movs	r2, #32
 80073a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b08a      	sub	sp, #40	; 0x28
 80073ba:	af02      	add	r7, sp, #8
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	603b      	str	r3, [r7, #0]
 80073c2:	4613      	mov	r3, r2
 80073c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b20      	cmp	r3, #32
 80073d4:	d17c      	bne.n	80074d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <HAL_UART_Transmit+0x2c>
 80073dc:	88fb      	ldrh	r3, [r7, #6]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e075      	b.n	80074d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d101      	bne.n	80073f4 <HAL_UART_Transmit+0x3e>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e06e      	b.n	80074d2 <HAL_UART_Transmit+0x11c>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2221      	movs	r2, #33	; 0x21
 8007406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800740a:	f7fe f843 	bl	8005494 <HAL_GetTick>
 800740e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	88fa      	ldrh	r2, [r7, #6]
 8007414:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	88fa      	ldrh	r2, [r7, #6]
 800741a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007424:	d108      	bne.n	8007438 <HAL_UART_Transmit+0x82>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d104      	bne.n	8007438 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800742e:	2300      	movs	r3, #0
 8007430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	61bb      	str	r3, [r7, #24]
 8007436:	e003      	b.n	8007440 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800743c:	2300      	movs	r3, #0
 800743e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007448:	e02a      	b.n	80074a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2200      	movs	r2, #0
 8007452:	2180      	movs	r1, #128	; 0x80
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f840 	bl	80074da <UART_WaitOnFlagUntilTimeout>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e036      	b.n	80074d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10b      	bne.n	8007482 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007478:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	3302      	adds	r3, #2
 800747e:	61bb      	str	r3, [r7, #24]
 8007480:	e007      	b.n	8007492 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	781a      	ldrb	r2, [r3, #0]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	3301      	adds	r3, #1
 8007490:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007496:	b29b      	uxth	r3, r3
 8007498:	3b01      	subs	r3, #1
 800749a:	b29a      	uxth	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1cf      	bne.n	800744a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2200      	movs	r2, #0
 80074b2:	2140      	movs	r1, #64	; 0x40
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 f810 	bl	80074da <UART_WaitOnFlagUntilTimeout>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e006      	b.n	80074d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2220      	movs	r2, #32
 80074c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	e000      	b.n	80074d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80074d0:	2302      	movs	r3, #2
  }
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3720      	adds	r7, #32
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	603b      	str	r3, [r7, #0]
 80074e6:	4613      	mov	r3, r2
 80074e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ea:	e02c      	b.n	8007546 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f2:	d028      	beq.n	8007546 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d007      	beq.n	800750a <UART_WaitOnFlagUntilTimeout+0x30>
 80074fa:	f7fd ffcb 	bl	8005494 <HAL_GetTick>
 80074fe:	4602      	mov	r2, r0
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	429a      	cmp	r2, r3
 8007508:	d21d      	bcs.n	8007546 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68da      	ldr	r2, [r3, #12]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007518:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	695a      	ldr	r2, [r3, #20]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 0201 	bic.w	r2, r2, #1
 8007528:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2220      	movs	r2, #32
 800752e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2220      	movs	r2, #32
 8007536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e00f      	b.n	8007566 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	4013      	ands	r3, r2
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	429a      	cmp	r2, r3
 8007554:	bf0c      	ite	eq
 8007556:	2301      	moveq	r3, #1
 8007558:	2300      	movne	r3, #0
 800755a:	b2db      	uxtb	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	429a      	cmp	r2, r3
 8007562:	d0c3      	beq.n	80074ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007574:	b09f      	sub	sp, #124	; 0x7c
 8007576:	af00      	add	r7, sp, #0
 8007578:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800757a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007586:	68d9      	ldr	r1, [r3, #12]
 8007588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	ea40 0301 	orr.w	r3, r0, r1
 8007590:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007594:	689a      	ldr	r2, [r3, #8]
 8007596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	431a      	orrs	r2, r3
 800759c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	431a      	orrs	r2, r3
 80075a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a4:	69db      	ldr	r3, [r3, #28]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80075aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80075b4:	f021 010c 	bic.w	r1, r1, #12
 80075b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075be:	430b      	orrs	r3, r1
 80075c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80075cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ce:	6999      	ldr	r1, [r3, #24]
 80075d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	ea40 0301 	orr.w	r3, r0, r1
 80075d8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	4bc5      	ldr	r3, [pc, #788]	; (80078f4 <UART_SetConfig+0x384>)
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d004      	beq.n	80075ee <UART_SetConfig+0x7e>
 80075e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	4bc3      	ldr	r3, [pc, #780]	; (80078f8 <UART_SetConfig+0x388>)
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d103      	bne.n	80075f6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075ee:	f7ff fe3d 	bl	800726c <HAL_RCC_GetPCLK2Freq>
 80075f2:	6778      	str	r0, [r7, #116]	; 0x74
 80075f4:	e002      	b.n	80075fc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075f6:	f7ff fe25 	bl	8007244 <HAL_RCC_GetPCLK1Freq>
 80075fa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007604:	f040 80b6 	bne.w	8007774 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800760a:	461c      	mov	r4, r3
 800760c:	f04f 0500 	mov.w	r5, #0
 8007610:	4622      	mov	r2, r4
 8007612:	462b      	mov	r3, r5
 8007614:	1891      	adds	r1, r2, r2
 8007616:	6439      	str	r1, [r7, #64]	; 0x40
 8007618:	415b      	adcs	r3, r3
 800761a:	647b      	str	r3, [r7, #68]	; 0x44
 800761c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007620:	1912      	adds	r2, r2, r4
 8007622:	eb45 0303 	adc.w	r3, r5, r3
 8007626:	f04f 0000 	mov.w	r0, #0
 800762a:	f04f 0100 	mov.w	r1, #0
 800762e:	00d9      	lsls	r1, r3, #3
 8007630:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007634:	00d0      	lsls	r0, r2, #3
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	1911      	adds	r1, r2, r4
 800763c:	6639      	str	r1, [r7, #96]	; 0x60
 800763e:	416b      	adcs	r3, r5
 8007640:	667b      	str	r3, [r7, #100]	; 0x64
 8007642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	461a      	mov	r2, r3
 8007648:	f04f 0300 	mov.w	r3, #0
 800764c:	1891      	adds	r1, r2, r2
 800764e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007650:	415b      	adcs	r3, r3
 8007652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007654:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007658:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800765c:	f7f9 fb14 	bl	8000c88 <__aeabi_uldivmod>
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	4ba5      	ldr	r3, [pc, #660]	; (80078fc <UART_SetConfig+0x38c>)
 8007666:	fba3 2302 	umull	r2, r3, r3, r2
 800766a:	095b      	lsrs	r3, r3, #5
 800766c:	011e      	lsls	r6, r3, #4
 800766e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007670:	461c      	mov	r4, r3
 8007672:	f04f 0500 	mov.w	r5, #0
 8007676:	4622      	mov	r2, r4
 8007678:	462b      	mov	r3, r5
 800767a:	1891      	adds	r1, r2, r2
 800767c:	6339      	str	r1, [r7, #48]	; 0x30
 800767e:	415b      	adcs	r3, r3
 8007680:	637b      	str	r3, [r7, #52]	; 0x34
 8007682:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007686:	1912      	adds	r2, r2, r4
 8007688:	eb45 0303 	adc.w	r3, r5, r3
 800768c:	f04f 0000 	mov.w	r0, #0
 8007690:	f04f 0100 	mov.w	r1, #0
 8007694:	00d9      	lsls	r1, r3, #3
 8007696:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800769a:	00d0      	lsls	r0, r2, #3
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	1911      	adds	r1, r2, r4
 80076a2:	65b9      	str	r1, [r7, #88]	; 0x58
 80076a4:	416b      	adcs	r3, r5
 80076a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	461a      	mov	r2, r3
 80076ae:	f04f 0300 	mov.w	r3, #0
 80076b2:	1891      	adds	r1, r2, r2
 80076b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80076b6:	415b      	adcs	r3, r3
 80076b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80076c2:	f7f9 fae1 	bl	8000c88 <__aeabi_uldivmod>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4b8c      	ldr	r3, [pc, #560]	; (80078fc <UART_SetConfig+0x38c>)
 80076cc:	fba3 1302 	umull	r1, r3, r3, r2
 80076d0:	095b      	lsrs	r3, r3, #5
 80076d2:	2164      	movs	r1, #100	; 0x64
 80076d4:	fb01 f303 	mul.w	r3, r1, r3
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	00db      	lsls	r3, r3, #3
 80076dc:	3332      	adds	r3, #50	; 0x32
 80076de:	4a87      	ldr	r2, [pc, #540]	; (80078fc <UART_SetConfig+0x38c>)
 80076e0:	fba2 2303 	umull	r2, r3, r2, r3
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076ec:	441e      	add	r6, r3
 80076ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076f0:	4618      	mov	r0, r3
 80076f2:	f04f 0100 	mov.w	r1, #0
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	1894      	adds	r4, r2, r2
 80076fc:	623c      	str	r4, [r7, #32]
 80076fe:	415b      	adcs	r3, r3
 8007700:	627b      	str	r3, [r7, #36]	; 0x24
 8007702:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007706:	1812      	adds	r2, r2, r0
 8007708:	eb41 0303 	adc.w	r3, r1, r3
 800770c:	f04f 0400 	mov.w	r4, #0
 8007710:	f04f 0500 	mov.w	r5, #0
 8007714:	00dd      	lsls	r5, r3, #3
 8007716:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800771a:	00d4      	lsls	r4, r2, #3
 800771c:	4622      	mov	r2, r4
 800771e:	462b      	mov	r3, r5
 8007720:	1814      	adds	r4, r2, r0
 8007722:	653c      	str	r4, [r7, #80]	; 0x50
 8007724:	414b      	adcs	r3, r1
 8007726:	657b      	str	r3, [r7, #84]	; 0x54
 8007728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	461a      	mov	r2, r3
 800772e:	f04f 0300 	mov.w	r3, #0
 8007732:	1891      	adds	r1, r2, r2
 8007734:	61b9      	str	r1, [r7, #24]
 8007736:	415b      	adcs	r3, r3
 8007738:	61fb      	str	r3, [r7, #28]
 800773a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800773e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007742:	f7f9 faa1 	bl	8000c88 <__aeabi_uldivmod>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	4b6c      	ldr	r3, [pc, #432]	; (80078fc <UART_SetConfig+0x38c>)
 800774c:	fba3 1302 	umull	r1, r3, r3, r2
 8007750:	095b      	lsrs	r3, r3, #5
 8007752:	2164      	movs	r1, #100	; 0x64
 8007754:	fb01 f303 	mul.w	r3, r1, r3
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	00db      	lsls	r3, r3, #3
 800775c:	3332      	adds	r3, #50	; 0x32
 800775e:	4a67      	ldr	r2, [pc, #412]	; (80078fc <UART_SetConfig+0x38c>)
 8007760:	fba2 2303 	umull	r2, r3, r2, r3
 8007764:	095b      	lsrs	r3, r3, #5
 8007766:	f003 0207 	and.w	r2, r3, #7
 800776a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4432      	add	r2, r6
 8007770:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007772:	e0b9      	b.n	80078e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007776:	461c      	mov	r4, r3
 8007778:	f04f 0500 	mov.w	r5, #0
 800777c:	4622      	mov	r2, r4
 800777e:	462b      	mov	r3, r5
 8007780:	1891      	adds	r1, r2, r2
 8007782:	6139      	str	r1, [r7, #16]
 8007784:	415b      	adcs	r3, r3
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800778c:	1912      	adds	r2, r2, r4
 800778e:	eb45 0303 	adc.w	r3, r5, r3
 8007792:	f04f 0000 	mov.w	r0, #0
 8007796:	f04f 0100 	mov.w	r1, #0
 800779a:	00d9      	lsls	r1, r3, #3
 800779c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077a0:	00d0      	lsls	r0, r2, #3
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	eb12 0804 	adds.w	r8, r2, r4
 80077aa:	eb43 0905 	adc.w	r9, r3, r5
 80077ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f04f 0100 	mov.w	r1, #0
 80077b8:	f04f 0200 	mov.w	r2, #0
 80077bc:	f04f 0300 	mov.w	r3, #0
 80077c0:	008b      	lsls	r3, r1, #2
 80077c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80077c6:	0082      	lsls	r2, r0, #2
 80077c8:	4640      	mov	r0, r8
 80077ca:	4649      	mov	r1, r9
 80077cc:	f7f9 fa5c 	bl	8000c88 <__aeabi_uldivmod>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4b49      	ldr	r3, [pc, #292]	; (80078fc <UART_SetConfig+0x38c>)
 80077d6:	fba3 2302 	umull	r2, r3, r3, r2
 80077da:	095b      	lsrs	r3, r3, #5
 80077dc:	011e      	lsls	r6, r3, #4
 80077de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077e0:	4618      	mov	r0, r3
 80077e2:	f04f 0100 	mov.w	r1, #0
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	1894      	adds	r4, r2, r2
 80077ec:	60bc      	str	r4, [r7, #8]
 80077ee:	415b      	adcs	r3, r3
 80077f0:	60fb      	str	r3, [r7, #12]
 80077f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077f6:	1812      	adds	r2, r2, r0
 80077f8:	eb41 0303 	adc.w	r3, r1, r3
 80077fc:	f04f 0400 	mov.w	r4, #0
 8007800:	f04f 0500 	mov.w	r5, #0
 8007804:	00dd      	lsls	r5, r3, #3
 8007806:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800780a:	00d4      	lsls	r4, r2, #3
 800780c:	4622      	mov	r2, r4
 800780e:	462b      	mov	r3, r5
 8007810:	1814      	adds	r4, r2, r0
 8007812:	64bc      	str	r4, [r7, #72]	; 0x48
 8007814:	414b      	adcs	r3, r1
 8007816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	4618      	mov	r0, r3
 800781e:	f04f 0100 	mov.w	r1, #0
 8007822:	f04f 0200 	mov.w	r2, #0
 8007826:	f04f 0300 	mov.w	r3, #0
 800782a:	008b      	lsls	r3, r1, #2
 800782c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007830:	0082      	lsls	r2, r0, #2
 8007832:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007836:	f7f9 fa27 	bl	8000c88 <__aeabi_uldivmod>
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	4b2f      	ldr	r3, [pc, #188]	; (80078fc <UART_SetConfig+0x38c>)
 8007840:	fba3 1302 	umull	r1, r3, r3, r2
 8007844:	095b      	lsrs	r3, r3, #5
 8007846:	2164      	movs	r1, #100	; 0x64
 8007848:	fb01 f303 	mul.w	r3, r1, r3
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	011b      	lsls	r3, r3, #4
 8007850:	3332      	adds	r3, #50	; 0x32
 8007852:	4a2a      	ldr	r2, [pc, #168]	; (80078fc <UART_SetConfig+0x38c>)
 8007854:	fba2 2303 	umull	r2, r3, r2, r3
 8007858:	095b      	lsrs	r3, r3, #5
 800785a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800785e:	441e      	add	r6, r3
 8007860:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007862:	4618      	mov	r0, r3
 8007864:	f04f 0100 	mov.w	r1, #0
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	1894      	adds	r4, r2, r2
 800786e:	603c      	str	r4, [r7, #0]
 8007870:	415b      	adcs	r3, r3
 8007872:	607b      	str	r3, [r7, #4]
 8007874:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007878:	1812      	adds	r2, r2, r0
 800787a:	eb41 0303 	adc.w	r3, r1, r3
 800787e:	f04f 0400 	mov.w	r4, #0
 8007882:	f04f 0500 	mov.w	r5, #0
 8007886:	00dd      	lsls	r5, r3, #3
 8007888:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800788c:	00d4      	lsls	r4, r2, #3
 800788e:	4622      	mov	r2, r4
 8007890:	462b      	mov	r3, r5
 8007892:	eb12 0a00 	adds.w	sl, r2, r0
 8007896:	eb43 0b01 	adc.w	fp, r3, r1
 800789a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	4618      	mov	r0, r3
 80078a0:	f04f 0100 	mov.w	r1, #0
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	f04f 0300 	mov.w	r3, #0
 80078ac:	008b      	lsls	r3, r1, #2
 80078ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80078b2:	0082      	lsls	r2, r0, #2
 80078b4:	4650      	mov	r0, sl
 80078b6:	4659      	mov	r1, fp
 80078b8:	f7f9 f9e6 	bl	8000c88 <__aeabi_uldivmod>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	4b0e      	ldr	r3, [pc, #56]	; (80078fc <UART_SetConfig+0x38c>)
 80078c2:	fba3 1302 	umull	r1, r3, r3, r2
 80078c6:	095b      	lsrs	r3, r3, #5
 80078c8:	2164      	movs	r1, #100	; 0x64
 80078ca:	fb01 f303 	mul.w	r3, r1, r3
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	011b      	lsls	r3, r3, #4
 80078d2:	3332      	adds	r3, #50	; 0x32
 80078d4:	4a09      	ldr	r2, [pc, #36]	; (80078fc <UART_SetConfig+0x38c>)
 80078d6:	fba2 2303 	umull	r2, r3, r2, r3
 80078da:	095b      	lsrs	r3, r3, #5
 80078dc:	f003 020f 	and.w	r2, r3, #15
 80078e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4432      	add	r2, r6
 80078e6:	609a      	str	r2, [r3, #8]
}
 80078e8:	bf00      	nop
 80078ea:	377c      	adds	r7, #124	; 0x7c
 80078ec:	46bd      	mov	sp, r7
 80078ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f2:	bf00      	nop
 80078f4:	40011000 	.word	0x40011000
 80078f8:	40011400 	.word	0x40011400
 80078fc:	51eb851f 	.word	0x51eb851f

08007900 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007918:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	4b20      	ldr	r3, [pc, #128]	; (80079a0 <FSMC_NORSRAM_Init+0xa0>)
 800791e:	4013      	ands	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800792a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007930:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007936:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800793c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007942:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007948:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800794e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007954:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800795a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007960:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007966:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800796c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	4313      	orrs	r3, r2
 8007972:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	2b08      	cmp	r3, #8
 800797a:	d103      	bne.n	8007984 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007982:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68f9      	ldr	r1, [r7, #12]
 800798c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	fff00080 	.word	0xfff00080

080079a4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079be:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80079c6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80079d2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80079da:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80079e2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80079ec:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	3b02      	subs	r3, #2
 80079f4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80079f6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80079fc:	4313      	orrs	r3, r2
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	1c5a      	adds	r2, r3, #1
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6979      	ldr	r1, [r7, #20]
 8007a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	371c      	adds	r7, #28
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
	...

08007a20 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
 8007a2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a38:	d122      	bne.n	8007a80 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a42:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	4b15      	ldr	r3, [pc, #84]	; (8007a9c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007a48:	4013      	ands	r3, r2
 8007a4a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a56:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007a5e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007a66:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007a6c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	6979      	ldr	r1, [r7, #20]
 8007a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007a7e:	e005      	b.n	8007a8c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	371c      	adds	r7, #28
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	cff00000 	.word	0xcff00000

08007aa0 <__errno>:
 8007aa0:	4b01      	ldr	r3, [pc, #4]	; (8007aa8 <__errno+0x8>)
 8007aa2:	6818      	ldr	r0, [r3, #0]
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	200000a4 	.word	0x200000a4

08007aac <__libc_init_array>:
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	4d0d      	ldr	r5, [pc, #52]	; (8007ae4 <__libc_init_array+0x38>)
 8007ab0:	4c0d      	ldr	r4, [pc, #52]	; (8007ae8 <__libc_init_array+0x3c>)
 8007ab2:	1b64      	subs	r4, r4, r5
 8007ab4:	10a4      	asrs	r4, r4, #2
 8007ab6:	2600      	movs	r6, #0
 8007ab8:	42a6      	cmp	r6, r4
 8007aba:	d109      	bne.n	8007ad0 <__libc_init_array+0x24>
 8007abc:	4d0b      	ldr	r5, [pc, #44]	; (8007aec <__libc_init_array+0x40>)
 8007abe:	4c0c      	ldr	r4, [pc, #48]	; (8007af0 <__libc_init_array+0x44>)
 8007ac0:	f003 fa2c 	bl	800af1c <_init>
 8007ac4:	1b64      	subs	r4, r4, r5
 8007ac6:	10a4      	asrs	r4, r4, #2
 8007ac8:	2600      	movs	r6, #0
 8007aca:	42a6      	cmp	r6, r4
 8007acc:	d105      	bne.n	8007ada <__libc_init_array+0x2e>
 8007ace:	bd70      	pop	{r4, r5, r6, pc}
 8007ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad4:	4798      	blx	r3
 8007ad6:	3601      	adds	r6, #1
 8007ad8:	e7ee      	b.n	8007ab8 <__libc_init_array+0xc>
 8007ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ade:	4798      	blx	r3
 8007ae0:	3601      	adds	r6, #1
 8007ae2:	e7f2      	b.n	8007aca <__libc_init_array+0x1e>
 8007ae4:	08018130 	.word	0x08018130
 8007ae8:	08018130 	.word	0x08018130
 8007aec:	08018130 	.word	0x08018130
 8007af0:	08018134 	.word	0x08018134

08007af4 <memset>:
 8007af4:	4402      	add	r2, r0
 8007af6:	4603      	mov	r3, r0
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d100      	bne.n	8007afe <memset+0xa>
 8007afc:	4770      	bx	lr
 8007afe:	f803 1b01 	strb.w	r1, [r3], #1
 8007b02:	e7f9      	b.n	8007af8 <memset+0x4>

08007b04 <__cvt>:
 8007b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b08:	ec55 4b10 	vmov	r4, r5, d0
 8007b0c:	2d00      	cmp	r5, #0
 8007b0e:	460e      	mov	r6, r1
 8007b10:	4619      	mov	r1, r3
 8007b12:	462b      	mov	r3, r5
 8007b14:	bfbb      	ittet	lt
 8007b16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b1a:	461d      	movlt	r5, r3
 8007b1c:	2300      	movge	r3, #0
 8007b1e:	232d      	movlt	r3, #45	; 0x2d
 8007b20:	700b      	strb	r3, [r1, #0]
 8007b22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b28:	4691      	mov	r9, r2
 8007b2a:	f023 0820 	bic.w	r8, r3, #32
 8007b2e:	bfbc      	itt	lt
 8007b30:	4622      	movlt	r2, r4
 8007b32:	4614      	movlt	r4, r2
 8007b34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b38:	d005      	beq.n	8007b46 <__cvt+0x42>
 8007b3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b3e:	d100      	bne.n	8007b42 <__cvt+0x3e>
 8007b40:	3601      	adds	r6, #1
 8007b42:	2102      	movs	r1, #2
 8007b44:	e000      	b.n	8007b48 <__cvt+0x44>
 8007b46:	2103      	movs	r1, #3
 8007b48:	ab03      	add	r3, sp, #12
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	ab02      	add	r3, sp, #8
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	ec45 4b10 	vmov	d0, r4, r5
 8007b54:	4653      	mov	r3, sl
 8007b56:	4632      	mov	r2, r6
 8007b58:	f000 fd02 	bl	8008560 <_dtoa_r>
 8007b5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b60:	4607      	mov	r7, r0
 8007b62:	d102      	bne.n	8007b6a <__cvt+0x66>
 8007b64:	f019 0f01 	tst.w	r9, #1
 8007b68:	d022      	beq.n	8007bb0 <__cvt+0xac>
 8007b6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b6e:	eb07 0906 	add.w	r9, r7, r6
 8007b72:	d110      	bne.n	8007b96 <__cvt+0x92>
 8007b74:	783b      	ldrb	r3, [r7, #0]
 8007b76:	2b30      	cmp	r3, #48	; 0x30
 8007b78:	d10a      	bne.n	8007b90 <__cvt+0x8c>
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	4620      	mov	r0, r4
 8007b80:	4629      	mov	r1, r5
 8007b82:	f7f8 ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b86:	b918      	cbnz	r0, 8007b90 <__cvt+0x8c>
 8007b88:	f1c6 0601 	rsb	r6, r6, #1
 8007b8c:	f8ca 6000 	str.w	r6, [sl]
 8007b90:	f8da 3000 	ldr.w	r3, [sl]
 8007b94:	4499      	add	r9, r3
 8007b96:	2200      	movs	r2, #0
 8007b98:	2300      	movs	r3, #0
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	f7f8 ff93 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ba2:	b108      	cbz	r0, 8007ba8 <__cvt+0xa4>
 8007ba4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ba8:	2230      	movs	r2, #48	; 0x30
 8007baa:	9b03      	ldr	r3, [sp, #12]
 8007bac:	454b      	cmp	r3, r9
 8007bae:	d307      	bcc.n	8007bc0 <__cvt+0xbc>
 8007bb0:	9b03      	ldr	r3, [sp, #12]
 8007bb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bb4:	1bdb      	subs	r3, r3, r7
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	6013      	str	r3, [r2, #0]
 8007bba:	b004      	add	sp, #16
 8007bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc0:	1c59      	adds	r1, r3, #1
 8007bc2:	9103      	str	r1, [sp, #12]
 8007bc4:	701a      	strb	r2, [r3, #0]
 8007bc6:	e7f0      	b.n	8007baa <__cvt+0xa6>

08007bc8 <__exponent>:
 8007bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2900      	cmp	r1, #0
 8007bce:	bfb8      	it	lt
 8007bd0:	4249      	neglt	r1, r1
 8007bd2:	f803 2b02 	strb.w	r2, [r3], #2
 8007bd6:	bfb4      	ite	lt
 8007bd8:	222d      	movlt	r2, #45	; 0x2d
 8007bda:	222b      	movge	r2, #43	; 0x2b
 8007bdc:	2909      	cmp	r1, #9
 8007bde:	7042      	strb	r2, [r0, #1]
 8007be0:	dd2a      	ble.n	8007c38 <__exponent+0x70>
 8007be2:	f10d 0407 	add.w	r4, sp, #7
 8007be6:	46a4      	mov	ip, r4
 8007be8:	270a      	movs	r7, #10
 8007bea:	46a6      	mov	lr, r4
 8007bec:	460a      	mov	r2, r1
 8007bee:	fb91 f6f7 	sdiv	r6, r1, r7
 8007bf2:	fb07 1516 	mls	r5, r7, r6, r1
 8007bf6:	3530      	adds	r5, #48	; 0x30
 8007bf8:	2a63      	cmp	r2, #99	; 0x63
 8007bfa:	f104 34ff 	add.w	r4, r4, #4294967295
 8007bfe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c02:	4631      	mov	r1, r6
 8007c04:	dcf1      	bgt.n	8007bea <__exponent+0x22>
 8007c06:	3130      	adds	r1, #48	; 0x30
 8007c08:	f1ae 0502 	sub.w	r5, lr, #2
 8007c0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c10:	1c44      	adds	r4, r0, #1
 8007c12:	4629      	mov	r1, r5
 8007c14:	4561      	cmp	r1, ip
 8007c16:	d30a      	bcc.n	8007c2e <__exponent+0x66>
 8007c18:	f10d 0209 	add.w	r2, sp, #9
 8007c1c:	eba2 020e 	sub.w	r2, r2, lr
 8007c20:	4565      	cmp	r5, ip
 8007c22:	bf88      	it	hi
 8007c24:	2200      	movhi	r2, #0
 8007c26:	4413      	add	r3, r2
 8007c28:	1a18      	subs	r0, r3, r0
 8007c2a:	b003      	add	sp, #12
 8007c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c36:	e7ed      	b.n	8007c14 <__exponent+0x4c>
 8007c38:	2330      	movs	r3, #48	; 0x30
 8007c3a:	3130      	adds	r1, #48	; 0x30
 8007c3c:	7083      	strb	r3, [r0, #2]
 8007c3e:	70c1      	strb	r1, [r0, #3]
 8007c40:	1d03      	adds	r3, r0, #4
 8007c42:	e7f1      	b.n	8007c28 <__exponent+0x60>

08007c44 <_printf_float>:
 8007c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c48:	ed2d 8b02 	vpush	{d8}
 8007c4c:	b08d      	sub	sp, #52	; 0x34
 8007c4e:	460c      	mov	r4, r1
 8007c50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c54:	4616      	mov	r6, r2
 8007c56:	461f      	mov	r7, r3
 8007c58:	4605      	mov	r5, r0
 8007c5a:	f001 fb63 	bl	8009324 <_localeconv_r>
 8007c5e:	f8d0 a000 	ldr.w	sl, [r0]
 8007c62:	4650      	mov	r0, sl
 8007c64:	f7f8 fab4 	bl	80001d0 <strlen>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	9305      	str	r3, [sp, #20]
 8007c70:	f8d8 3000 	ldr.w	r3, [r8]
 8007c74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c78:	3307      	adds	r3, #7
 8007c7a:	f023 0307 	bic.w	r3, r3, #7
 8007c7e:	f103 0208 	add.w	r2, r3, #8
 8007c82:	f8c8 2000 	str.w	r2, [r8]
 8007c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007c92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c96:	9307      	str	r3, [sp, #28]
 8007c98:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c9c:	ee08 0a10 	vmov	s16, r0
 8007ca0:	4b9f      	ldr	r3, [pc, #636]	; (8007f20 <_printf_float+0x2dc>)
 8007ca2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8007caa:	f7f8 ff3f 	bl	8000b2c <__aeabi_dcmpun>
 8007cae:	bb88      	cbnz	r0, 8007d14 <_printf_float+0xd0>
 8007cb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cb4:	4b9a      	ldr	r3, [pc, #616]	; (8007f20 <_printf_float+0x2dc>)
 8007cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cba:	f7f8 ff19 	bl	8000af0 <__aeabi_dcmple>
 8007cbe:	bb48      	cbnz	r0, 8007d14 <_printf_float+0xd0>
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	4640      	mov	r0, r8
 8007cc6:	4649      	mov	r1, r9
 8007cc8:	f7f8 ff08 	bl	8000adc <__aeabi_dcmplt>
 8007ccc:	b110      	cbz	r0, 8007cd4 <_printf_float+0x90>
 8007cce:	232d      	movs	r3, #45	; 0x2d
 8007cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cd4:	4b93      	ldr	r3, [pc, #588]	; (8007f24 <_printf_float+0x2e0>)
 8007cd6:	4894      	ldr	r0, [pc, #592]	; (8007f28 <_printf_float+0x2e4>)
 8007cd8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007cdc:	bf94      	ite	ls
 8007cde:	4698      	movls	r8, r3
 8007ce0:	4680      	movhi	r8, r0
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	6123      	str	r3, [r4, #16]
 8007ce6:	9b05      	ldr	r3, [sp, #20]
 8007ce8:	f023 0204 	bic.w	r2, r3, #4
 8007cec:	6022      	str	r2, [r4, #0]
 8007cee:	f04f 0900 	mov.w	r9, #0
 8007cf2:	9700      	str	r7, [sp, #0]
 8007cf4:	4633      	mov	r3, r6
 8007cf6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	f000 f9d8 	bl	80080b0 <_printf_common>
 8007d00:	3001      	adds	r0, #1
 8007d02:	f040 8090 	bne.w	8007e26 <_printf_float+0x1e2>
 8007d06:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0a:	b00d      	add	sp, #52	; 0x34
 8007d0c:	ecbd 8b02 	vpop	{d8}
 8007d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d14:	4642      	mov	r2, r8
 8007d16:	464b      	mov	r3, r9
 8007d18:	4640      	mov	r0, r8
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	f7f8 ff06 	bl	8000b2c <__aeabi_dcmpun>
 8007d20:	b140      	cbz	r0, 8007d34 <_printf_float+0xf0>
 8007d22:	464b      	mov	r3, r9
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	bfbc      	itt	lt
 8007d28:	232d      	movlt	r3, #45	; 0x2d
 8007d2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d2e:	487f      	ldr	r0, [pc, #508]	; (8007f2c <_printf_float+0x2e8>)
 8007d30:	4b7f      	ldr	r3, [pc, #508]	; (8007f30 <_printf_float+0x2ec>)
 8007d32:	e7d1      	b.n	8007cd8 <_printf_float+0x94>
 8007d34:	6863      	ldr	r3, [r4, #4]
 8007d36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d3a:	9206      	str	r2, [sp, #24]
 8007d3c:	1c5a      	adds	r2, r3, #1
 8007d3e:	d13f      	bne.n	8007dc0 <_printf_float+0x17c>
 8007d40:	2306      	movs	r3, #6
 8007d42:	6063      	str	r3, [r4, #4]
 8007d44:	9b05      	ldr	r3, [sp, #20]
 8007d46:	6861      	ldr	r1, [r4, #4]
 8007d48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9303      	str	r3, [sp, #12]
 8007d50:	ab0a      	add	r3, sp, #40	; 0x28
 8007d52:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d56:	ab09      	add	r3, sp, #36	; 0x24
 8007d58:	ec49 8b10 	vmov	d0, r8, r9
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	6022      	str	r2, [r4, #0]
 8007d60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d64:	4628      	mov	r0, r5
 8007d66:	f7ff fecd 	bl	8007b04 <__cvt>
 8007d6a:	9b06      	ldr	r3, [sp, #24]
 8007d6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d6e:	2b47      	cmp	r3, #71	; 0x47
 8007d70:	4680      	mov	r8, r0
 8007d72:	d108      	bne.n	8007d86 <_printf_float+0x142>
 8007d74:	1cc8      	adds	r0, r1, #3
 8007d76:	db02      	blt.n	8007d7e <_printf_float+0x13a>
 8007d78:	6863      	ldr	r3, [r4, #4]
 8007d7a:	4299      	cmp	r1, r3
 8007d7c:	dd41      	ble.n	8007e02 <_printf_float+0x1be>
 8007d7e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007d82:	fa5f fb8b 	uxtb.w	fp, fp
 8007d86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d8a:	d820      	bhi.n	8007dce <_printf_float+0x18a>
 8007d8c:	3901      	subs	r1, #1
 8007d8e:	465a      	mov	r2, fp
 8007d90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d94:	9109      	str	r1, [sp, #36]	; 0x24
 8007d96:	f7ff ff17 	bl	8007bc8 <__exponent>
 8007d9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d9c:	1813      	adds	r3, r2, r0
 8007d9e:	2a01      	cmp	r2, #1
 8007da0:	4681      	mov	r9, r0
 8007da2:	6123      	str	r3, [r4, #16]
 8007da4:	dc02      	bgt.n	8007dac <_printf_float+0x168>
 8007da6:	6822      	ldr	r2, [r4, #0]
 8007da8:	07d2      	lsls	r2, r2, #31
 8007daa:	d501      	bpl.n	8007db0 <_printf_float+0x16c>
 8007dac:	3301      	adds	r3, #1
 8007dae:	6123      	str	r3, [r4, #16]
 8007db0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d09c      	beq.n	8007cf2 <_printf_float+0xae>
 8007db8:	232d      	movs	r3, #45	; 0x2d
 8007dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dbe:	e798      	b.n	8007cf2 <_printf_float+0xae>
 8007dc0:	9a06      	ldr	r2, [sp, #24]
 8007dc2:	2a47      	cmp	r2, #71	; 0x47
 8007dc4:	d1be      	bne.n	8007d44 <_printf_float+0x100>
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1bc      	bne.n	8007d44 <_printf_float+0x100>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e7b9      	b.n	8007d42 <_printf_float+0xfe>
 8007dce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007dd2:	d118      	bne.n	8007e06 <_printf_float+0x1c2>
 8007dd4:	2900      	cmp	r1, #0
 8007dd6:	6863      	ldr	r3, [r4, #4]
 8007dd8:	dd0b      	ble.n	8007df2 <_printf_float+0x1ae>
 8007dda:	6121      	str	r1, [r4, #16]
 8007ddc:	b913      	cbnz	r3, 8007de4 <_printf_float+0x1a0>
 8007dde:	6822      	ldr	r2, [r4, #0]
 8007de0:	07d0      	lsls	r0, r2, #31
 8007de2:	d502      	bpl.n	8007dea <_printf_float+0x1a6>
 8007de4:	3301      	adds	r3, #1
 8007de6:	440b      	add	r3, r1
 8007de8:	6123      	str	r3, [r4, #16]
 8007dea:	65a1      	str	r1, [r4, #88]	; 0x58
 8007dec:	f04f 0900 	mov.w	r9, #0
 8007df0:	e7de      	b.n	8007db0 <_printf_float+0x16c>
 8007df2:	b913      	cbnz	r3, 8007dfa <_printf_float+0x1b6>
 8007df4:	6822      	ldr	r2, [r4, #0]
 8007df6:	07d2      	lsls	r2, r2, #31
 8007df8:	d501      	bpl.n	8007dfe <_printf_float+0x1ba>
 8007dfa:	3302      	adds	r3, #2
 8007dfc:	e7f4      	b.n	8007de8 <_printf_float+0x1a4>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e7f2      	b.n	8007de8 <_printf_float+0x1a4>
 8007e02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e08:	4299      	cmp	r1, r3
 8007e0a:	db05      	blt.n	8007e18 <_printf_float+0x1d4>
 8007e0c:	6823      	ldr	r3, [r4, #0]
 8007e0e:	6121      	str	r1, [r4, #16]
 8007e10:	07d8      	lsls	r0, r3, #31
 8007e12:	d5ea      	bpl.n	8007dea <_printf_float+0x1a6>
 8007e14:	1c4b      	adds	r3, r1, #1
 8007e16:	e7e7      	b.n	8007de8 <_printf_float+0x1a4>
 8007e18:	2900      	cmp	r1, #0
 8007e1a:	bfd4      	ite	le
 8007e1c:	f1c1 0202 	rsble	r2, r1, #2
 8007e20:	2201      	movgt	r2, #1
 8007e22:	4413      	add	r3, r2
 8007e24:	e7e0      	b.n	8007de8 <_printf_float+0x1a4>
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	055a      	lsls	r2, r3, #21
 8007e2a:	d407      	bmi.n	8007e3c <_printf_float+0x1f8>
 8007e2c:	6923      	ldr	r3, [r4, #16]
 8007e2e:	4642      	mov	r2, r8
 8007e30:	4631      	mov	r1, r6
 8007e32:	4628      	mov	r0, r5
 8007e34:	47b8      	blx	r7
 8007e36:	3001      	adds	r0, #1
 8007e38:	d12c      	bne.n	8007e94 <_printf_float+0x250>
 8007e3a:	e764      	b.n	8007d06 <_printf_float+0xc2>
 8007e3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e40:	f240 80e0 	bls.w	8008004 <_printf_float+0x3c0>
 8007e44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e48:	2200      	movs	r2, #0
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	f7f8 fe3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d034      	beq.n	8007ebe <_printf_float+0x27a>
 8007e54:	4a37      	ldr	r2, [pc, #220]	; (8007f34 <_printf_float+0x2f0>)
 8007e56:	2301      	movs	r3, #1
 8007e58:	4631      	mov	r1, r6
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	47b8      	blx	r7
 8007e5e:	3001      	adds	r0, #1
 8007e60:	f43f af51 	beq.w	8007d06 <_printf_float+0xc2>
 8007e64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	db02      	blt.n	8007e72 <_printf_float+0x22e>
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	07d8      	lsls	r0, r3, #31
 8007e70:	d510      	bpl.n	8007e94 <_printf_float+0x250>
 8007e72:	ee18 3a10 	vmov	r3, s16
 8007e76:	4652      	mov	r2, sl
 8007e78:	4631      	mov	r1, r6
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	47b8      	blx	r7
 8007e7e:	3001      	adds	r0, #1
 8007e80:	f43f af41 	beq.w	8007d06 <_printf_float+0xc2>
 8007e84:	f04f 0800 	mov.w	r8, #0
 8007e88:	f104 091a 	add.w	r9, r4, #26
 8007e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	4543      	cmp	r3, r8
 8007e92:	dc09      	bgt.n	8007ea8 <_printf_float+0x264>
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	079b      	lsls	r3, r3, #30
 8007e98:	f100 8105 	bmi.w	80080a6 <_printf_float+0x462>
 8007e9c:	68e0      	ldr	r0, [r4, #12]
 8007e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ea0:	4298      	cmp	r0, r3
 8007ea2:	bfb8      	it	lt
 8007ea4:	4618      	movlt	r0, r3
 8007ea6:	e730      	b.n	8007d0a <_printf_float+0xc6>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	464a      	mov	r2, r9
 8007eac:	4631      	mov	r1, r6
 8007eae:	4628      	mov	r0, r5
 8007eb0:	47b8      	blx	r7
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	f43f af27 	beq.w	8007d06 <_printf_float+0xc2>
 8007eb8:	f108 0801 	add.w	r8, r8, #1
 8007ebc:	e7e6      	b.n	8007e8c <_printf_float+0x248>
 8007ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	dc39      	bgt.n	8007f38 <_printf_float+0x2f4>
 8007ec4:	4a1b      	ldr	r2, [pc, #108]	; (8007f34 <_printf_float+0x2f0>)
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4628      	mov	r0, r5
 8007ecc:	47b8      	blx	r7
 8007ece:	3001      	adds	r0, #1
 8007ed0:	f43f af19 	beq.w	8007d06 <_printf_float+0xc2>
 8007ed4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	d102      	bne.n	8007ee2 <_printf_float+0x29e>
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	07d9      	lsls	r1, r3, #31
 8007ee0:	d5d8      	bpl.n	8007e94 <_printf_float+0x250>
 8007ee2:	ee18 3a10 	vmov	r3, s16
 8007ee6:	4652      	mov	r2, sl
 8007ee8:	4631      	mov	r1, r6
 8007eea:	4628      	mov	r0, r5
 8007eec:	47b8      	blx	r7
 8007eee:	3001      	adds	r0, #1
 8007ef0:	f43f af09 	beq.w	8007d06 <_printf_float+0xc2>
 8007ef4:	f04f 0900 	mov.w	r9, #0
 8007ef8:	f104 0a1a 	add.w	sl, r4, #26
 8007efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007efe:	425b      	negs	r3, r3
 8007f00:	454b      	cmp	r3, r9
 8007f02:	dc01      	bgt.n	8007f08 <_printf_float+0x2c4>
 8007f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f06:	e792      	b.n	8007e2e <_printf_float+0x1ea>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	4652      	mov	r2, sl
 8007f0c:	4631      	mov	r1, r6
 8007f0e:	4628      	mov	r0, r5
 8007f10:	47b8      	blx	r7
 8007f12:	3001      	adds	r0, #1
 8007f14:	f43f aef7 	beq.w	8007d06 <_printf_float+0xc2>
 8007f18:	f109 0901 	add.w	r9, r9, #1
 8007f1c:	e7ee      	b.n	8007efc <_printf_float+0x2b8>
 8007f1e:	bf00      	nop
 8007f20:	7fefffff 	.word	0x7fefffff
 8007f24:	08017cd4 	.word	0x08017cd4
 8007f28:	08017cd8 	.word	0x08017cd8
 8007f2c:	08017ce0 	.word	0x08017ce0
 8007f30:	08017cdc 	.word	0x08017cdc
 8007f34:	08017ce4 	.word	0x08017ce4
 8007f38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	bfa8      	it	ge
 8007f40:	461a      	movge	r2, r3
 8007f42:	2a00      	cmp	r2, #0
 8007f44:	4691      	mov	r9, r2
 8007f46:	dc37      	bgt.n	8007fb8 <_printf_float+0x374>
 8007f48:	f04f 0b00 	mov.w	fp, #0
 8007f4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f50:	f104 021a 	add.w	r2, r4, #26
 8007f54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f56:	9305      	str	r3, [sp, #20]
 8007f58:	eba3 0309 	sub.w	r3, r3, r9
 8007f5c:	455b      	cmp	r3, fp
 8007f5e:	dc33      	bgt.n	8007fc8 <_printf_float+0x384>
 8007f60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f64:	429a      	cmp	r2, r3
 8007f66:	db3b      	blt.n	8007fe0 <_printf_float+0x39c>
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	07da      	lsls	r2, r3, #31
 8007f6c:	d438      	bmi.n	8007fe0 <_printf_float+0x39c>
 8007f6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f70:	9b05      	ldr	r3, [sp, #20]
 8007f72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	eba2 0901 	sub.w	r9, r2, r1
 8007f7a:	4599      	cmp	r9, r3
 8007f7c:	bfa8      	it	ge
 8007f7e:	4699      	movge	r9, r3
 8007f80:	f1b9 0f00 	cmp.w	r9, #0
 8007f84:	dc35      	bgt.n	8007ff2 <_printf_float+0x3ae>
 8007f86:	f04f 0800 	mov.w	r8, #0
 8007f8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f8e:	f104 0a1a 	add.w	sl, r4, #26
 8007f92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f96:	1a9b      	subs	r3, r3, r2
 8007f98:	eba3 0309 	sub.w	r3, r3, r9
 8007f9c:	4543      	cmp	r3, r8
 8007f9e:	f77f af79 	ble.w	8007e94 <_printf_float+0x250>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	4652      	mov	r2, sl
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	4628      	mov	r0, r5
 8007faa:	47b8      	blx	r7
 8007fac:	3001      	adds	r0, #1
 8007fae:	f43f aeaa 	beq.w	8007d06 <_printf_float+0xc2>
 8007fb2:	f108 0801 	add.w	r8, r8, #1
 8007fb6:	e7ec      	b.n	8007f92 <_printf_float+0x34e>
 8007fb8:	4613      	mov	r3, r2
 8007fba:	4631      	mov	r1, r6
 8007fbc:	4642      	mov	r2, r8
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	47b8      	blx	r7
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	d1c0      	bne.n	8007f48 <_printf_float+0x304>
 8007fc6:	e69e      	b.n	8007d06 <_printf_float+0xc2>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	4631      	mov	r1, r6
 8007fcc:	4628      	mov	r0, r5
 8007fce:	9205      	str	r2, [sp, #20]
 8007fd0:	47b8      	blx	r7
 8007fd2:	3001      	adds	r0, #1
 8007fd4:	f43f ae97 	beq.w	8007d06 <_printf_float+0xc2>
 8007fd8:	9a05      	ldr	r2, [sp, #20]
 8007fda:	f10b 0b01 	add.w	fp, fp, #1
 8007fde:	e7b9      	b.n	8007f54 <_printf_float+0x310>
 8007fe0:	ee18 3a10 	vmov	r3, s16
 8007fe4:	4652      	mov	r2, sl
 8007fe6:	4631      	mov	r1, r6
 8007fe8:	4628      	mov	r0, r5
 8007fea:	47b8      	blx	r7
 8007fec:	3001      	adds	r0, #1
 8007fee:	d1be      	bne.n	8007f6e <_printf_float+0x32a>
 8007ff0:	e689      	b.n	8007d06 <_printf_float+0xc2>
 8007ff2:	9a05      	ldr	r2, [sp, #20]
 8007ff4:	464b      	mov	r3, r9
 8007ff6:	4442      	add	r2, r8
 8007ff8:	4631      	mov	r1, r6
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	47b8      	blx	r7
 8007ffe:	3001      	adds	r0, #1
 8008000:	d1c1      	bne.n	8007f86 <_printf_float+0x342>
 8008002:	e680      	b.n	8007d06 <_printf_float+0xc2>
 8008004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008006:	2a01      	cmp	r2, #1
 8008008:	dc01      	bgt.n	800800e <_printf_float+0x3ca>
 800800a:	07db      	lsls	r3, r3, #31
 800800c:	d538      	bpl.n	8008080 <_printf_float+0x43c>
 800800e:	2301      	movs	r3, #1
 8008010:	4642      	mov	r2, r8
 8008012:	4631      	mov	r1, r6
 8008014:	4628      	mov	r0, r5
 8008016:	47b8      	blx	r7
 8008018:	3001      	adds	r0, #1
 800801a:	f43f ae74 	beq.w	8007d06 <_printf_float+0xc2>
 800801e:	ee18 3a10 	vmov	r3, s16
 8008022:	4652      	mov	r2, sl
 8008024:	4631      	mov	r1, r6
 8008026:	4628      	mov	r0, r5
 8008028:	47b8      	blx	r7
 800802a:	3001      	adds	r0, #1
 800802c:	f43f ae6b 	beq.w	8007d06 <_printf_float+0xc2>
 8008030:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008034:	2200      	movs	r2, #0
 8008036:	2300      	movs	r3, #0
 8008038:	f7f8 fd46 	bl	8000ac8 <__aeabi_dcmpeq>
 800803c:	b9d8      	cbnz	r0, 8008076 <_printf_float+0x432>
 800803e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008040:	f108 0201 	add.w	r2, r8, #1
 8008044:	3b01      	subs	r3, #1
 8008046:	4631      	mov	r1, r6
 8008048:	4628      	mov	r0, r5
 800804a:	47b8      	blx	r7
 800804c:	3001      	adds	r0, #1
 800804e:	d10e      	bne.n	800806e <_printf_float+0x42a>
 8008050:	e659      	b.n	8007d06 <_printf_float+0xc2>
 8008052:	2301      	movs	r3, #1
 8008054:	4652      	mov	r2, sl
 8008056:	4631      	mov	r1, r6
 8008058:	4628      	mov	r0, r5
 800805a:	47b8      	blx	r7
 800805c:	3001      	adds	r0, #1
 800805e:	f43f ae52 	beq.w	8007d06 <_printf_float+0xc2>
 8008062:	f108 0801 	add.w	r8, r8, #1
 8008066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008068:	3b01      	subs	r3, #1
 800806a:	4543      	cmp	r3, r8
 800806c:	dcf1      	bgt.n	8008052 <_printf_float+0x40e>
 800806e:	464b      	mov	r3, r9
 8008070:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008074:	e6dc      	b.n	8007e30 <_printf_float+0x1ec>
 8008076:	f04f 0800 	mov.w	r8, #0
 800807a:	f104 0a1a 	add.w	sl, r4, #26
 800807e:	e7f2      	b.n	8008066 <_printf_float+0x422>
 8008080:	2301      	movs	r3, #1
 8008082:	4642      	mov	r2, r8
 8008084:	e7df      	b.n	8008046 <_printf_float+0x402>
 8008086:	2301      	movs	r3, #1
 8008088:	464a      	mov	r2, r9
 800808a:	4631      	mov	r1, r6
 800808c:	4628      	mov	r0, r5
 800808e:	47b8      	blx	r7
 8008090:	3001      	adds	r0, #1
 8008092:	f43f ae38 	beq.w	8007d06 <_printf_float+0xc2>
 8008096:	f108 0801 	add.w	r8, r8, #1
 800809a:	68e3      	ldr	r3, [r4, #12]
 800809c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800809e:	1a5b      	subs	r3, r3, r1
 80080a0:	4543      	cmp	r3, r8
 80080a2:	dcf0      	bgt.n	8008086 <_printf_float+0x442>
 80080a4:	e6fa      	b.n	8007e9c <_printf_float+0x258>
 80080a6:	f04f 0800 	mov.w	r8, #0
 80080aa:	f104 0919 	add.w	r9, r4, #25
 80080ae:	e7f4      	b.n	800809a <_printf_float+0x456>

080080b0 <_printf_common>:
 80080b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080b4:	4616      	mov	r6, r2
 80080b6:	4699      	mov	r9, r3
 80080b8:	688a      	ldr	r2, [r1, #8]
 80080ba:	690b      	ldr	r3, [r1, #16]
 80080bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080c0:	4293      	cmp	r3, r2
 80080c2:	bfb8      	it	lt
 80080c4:	4613      	movlt	r3, r2
 80080c6:	6033      	str	r3, [r6, #0]
 80080c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080cc:	4607      	mov	r7, r0
 80080ce:	460c      	mov	r4, r1
 80080d0:	b10a      	cbz	r2, 80080d6 <_printf_common+0x26>
 80080d2:	3301      	adds	r3, #1
 80080d4:	6033      	str	r3, [r6, #0]
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	0699      	lsls	r1, r3, #26
 80080da:	bf42      	ittt	mi
 80080dc:	6833      	ldrmi	r3, [r6, #0]
 80080de:	3302      	addmi	r3, #2
 80080e0:	6033      	strmi	r3, [r6, #0]
 80080e2:	6825      	ldr	r5, [r4, #0]
 80080e4:	f015 0506 	ands.w	r5, r5, #6
 80080e8:	d106      	bne.n	80080f8 <_printf_common+0x48>
 80080ea:	f104 0a19 	add.w	sl, r4, #25
 80080ee:	68e3      	ldr	r3, [r4, #12]
 80080f0:	6832      	ldr	r2, [r6, #0]
 80080f2:	1a9b      	subs	r3, r3, r2
 80080f4:	42ab      	cmp	r3, r5
 80080f6:	dc26      	bgt.n	8008146 <_printf_common+0x96>
 80080f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080fc:	1e13      	subs	r3, r2, #0
 80080fe:	6822      	ldr	r2, [r4, #0]
 8008100:	bf18      	it	ne
 8008102:	2301      	movne	r3, #1
 8008104:	0692      	lsls	r2, r2, #26
 8008106:	d42b      	bmi.n	8008160 <_printf_common+0xb0>
 8008108:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800810c:	4649      	mov	r1, r9
 800810e:	4638      	mov	r0, r7
 8008110:	47c0      	blx	r8
 8008112:	3001      	adds	r0, #1
 8008114:	d01e      	beq.n	8008154 <_printf_common+0xa4>
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	68e5      	ldr	r5, [r4, #12]
 800811a:	6832      	ldr	r2, [r6, #0]
 800811c:	f003 0306 	and.w	r3, r3, #6
 8008120:	2b04      	cmp	r3, #4
 8008122:	bf08      	it	eq
 8008124:	1aad      	subeq	r5, r5, r2
 8008126:	68a3      	ldr	r3, [r4, #8]
 8008128:	6922      	ldr	r2, [r4, #16]
 800812a:	bf0c      	ite	eq
 800812c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008130:	2500      	movne	r5, #0
 8008132:	4293      	cmp	r3, r2
 8008134:	bfc4      	itt	gt
 8008136:	1a9b      	subgt	r3, r3, r2
 8008138:	18ed      	addgt	r5, r5, r3
 800813a:	2600      	movs	r6, #0
 800813c:	341a      	adds	r4, #26
 800813e:	42b5      	cmp	r5, r6
 8008140:	d11a      	bne.n	8008178 <_printf_common+0xc8>
 8008142:	2000      	movs	r0, #0
 8008144:	e008      	b.n	8008158 <_printf_common+0xa8>
 8008146:	2301      	movs	r3, #1
 8008148:	4652      	mov	r2, sl
 800814a:	4649      	mov	r1, r9
 800814c:	4638      	mov	r0, r7
 800814e:	47c0      	blx	r8
 8008150:	3001      	adds	r0, #1
 8008152:	d103      	bne.n	800815c <_printf_common+0xac>
 8008154:	f04f 30ff 	mov.w	r0, #4294967295
 8008158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800815c:	3501      	adds	r5, #1
 800815e:	e7c6      	b.n	80080ee <_printf_common+0x3e>
 8008160:	18e1      	adds	r1, r4, r3
 8008162:	1c5a      	adds	r2, r3, #1
 8008164:	2030      	movs	r0, #48	; 0x30
 8008166:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800816a:	4422      	add	r2, r4
 800816c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008170:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008174:	3302      	adds	r3, #2
 8008176:	e7c7      	b.n	8008108 <_printf_common+0x58>
 8008178:	2301      	movs	r3, #1
 800817a:	4622      	mov	r2, r4
 800817c:	4649      	mov	r1, r9
 800817e:	4638      	mov	r0, r7
 8008180:	47c0      	blx	r8
 8008182:	3001      	adds	r0, #1
 8008184:	d0e6      	beq.n	8008154 <_printf_common+0xa4>
 8008186:	3601      	adds	r6, #1
 8008188:	e7d9      	b.n	800813e <_printf_common+0x8e>
	...

0800818c <_printf_i>:
 800818c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008190:	460c      	mov	r4, r1
 8008192:	4691      	mov	r9, r2
 8008194:	7e27      	ldrb	r7, [r4, #24]
 8008196:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008198:	2f78      	cmp	r7, #120	; 0x78
 800819a:	4680      	mov	r8, r0
 800819c:	469a      	mov	sl, r3
 800819e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081a2:	d807      	bhi.n	80081b4 <_printf_i+0x28>
 80081a4:	2f62      	cmp	r7, #98	; 0x62
 80081a6:	d80a      	bhi.n	80081be <_printf_i+0x32>
 80081a8:	2f00      	cmp	r7, #0
 80081aa:	f000 80d8 	beq.w	800835e <_printf_i+0x1d2>
 80081ae:	2f58      	cmp	r7, #88	; 0x58
 80081b0:	f000 80a3 	beq.w	80082fa <_printf_i+0x16e>
 80081b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80081b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081bc:	e03a      	b.n	8008234 <_printf_i+0xa8>
 80081be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081c2:	2b15      	cmp	r3, #21
 80081c4:	d8f6      	bhi.n	80081b4 <_printf_i+0x28>
 80081c6:	a001      	add	r0, pc, #4	; (adr r0, 80081cc <_printf_i+0x40>)
 80081c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80081cc:	08008225 	.word	0x08008225
 80081d0:	08008239 	.word	0x08008239
 80081d4:	080081b5 	.word	0x080081b5
 80081d8:	080081b5 	.word	0x080081b5
 80081dc:	080081b5 	.word	0x080081b5
 80081e0:	080081b5 	.word	0x080081b5
 80081e4:	08008239 	.word	0x08008239
 80081e8:	080081b5 	.word	0x080081b5
 80081ec:	080081b5 	.word	0x080081b5
 80081f0:	080081b5 	.word	0x080081b5
 80081f4:	080081b5 	.word	0x080081b5
 80081f8:	08008345 	.word	0x08008345
 80081fc:	08008269 	.word	0x08008269
 8008200:	08008327 	.word	0x08008327
 8008204:	080081b5 	.word	0x080081b5
 8008208:	080081b5 	.word	0x080081b5
 800820c:	08008367 	.word	0x08008367
 8008210:	080081b5 	.word	0x080081b5
 8008214:	08008269 	.word	0x08008269
 8008218:	080081b5 	.word	0x080081b5
 800821c:	080081b5 	.word	0x080081b5
 8008220:	0800832f 	.word	0x0800832f
 8008224:	680b      	ldr	r3, [r1, #0]
 8008226:	1d1a      	adds	r2, r3, #4
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	600a      	str	r2, [r1, #0]
 800822c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008234:	2301      	movs	r3, #1
 8008236:	e0a3      	b.n	8008380 <_printf_i+0x1f4>
 8008238:	6825      	ldr	r5, [r4, #0]
 800823a:	6808      	ldr	r0, [r1, #0]
 800823c:	062e      	lsls	r6, r5, #24
 800823e:	f100 0304 	add.w	r3, r0, #4
 8008242:	d50a      	bpl.n	800825a <_printf_i+0xce>
 8008244:	6805      	ldr	r5, [r0, #0]
 8008246:	600b      	str	r3, [r1, #0]
 8008248:	2d00      	cmp	r5, #0
 800824a:	da03      	bge.n	8008254 <_printf_i+0xc8>
 800824c:	232d      	movs	r3, #45	; 0x2d
 800824e:	426d      	negs	r5, r5
 8008250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008254:	485e      	ldr	r0, [pc, #376]	; (80083d0 <_printf_i+0x244>)
 8008256:	230a      	movs	r3, #10
 8008258:	e019      	b.n	800828e <_printf_i+0x102>
 800825a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800825e:	6805      	ldr	r5, [r0, #0]
 8008260:	600b      	str	r3, [r1, #0]
 8008262:	bf18      	it	ne
 8008264:	b22d      	sxthne	r5, r5
 8008266:	e7ef      	b.n	8008248 <_printf_i+0xbc>
 8008268:	680b      	ldr	r3, [r1, #0]
 800826a:	6825      	ldr	r5, [r4, #0]
 800826c:	1d18      	adds	r0, r3, #4
 800826e:	6008      	str	r0, [r1, #0]
 8008270:	0628      	lsls	r0, r5, #24
 8008272:	d501      	bpl.n	8008278 <_printf_i+0xec>
 8008274:	681d      	ldr	r5, [r3, #0]
 8008276:	e002      	b.n	800827e <_printf_i+0xf2>
 8008278:	0669      	lsls	r1, r5, #25
 800827a:	d5fb      	bpl.n	8008274 <_printf_i+0xe8>
 800827c:	881d      	ldrh	r5, [r3, #0]
 800827e:	4854      	ldr	r0, [pc, #336]	; (80083d0 <_printf_i+0x244>)
 8008280:	2f6f      	cmp	r7, #111	; 0x6f
 8008282:	bf0c      	ite	eq
 8008284:	2308      	moveq	r3, #8
 8008286:	230a      	movne	r3, #10
 8008288:	2100      	movs	r1, #0
 800828a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800828e:	6866      	ldr	r6, [r4, #4]
 8008290:	60a6      	str	r6, [r4, #8]
 8008292:	2e00      	cmp	r6, #0
 8008294:	bfa2      	ittt	ge
 8008296:	6821      	ldrge	r1, [r4, #0]
 8008298:	f021 0104 	bicge.w	r1, r1, #4
 800829c:	6021      	strge	r1, [r4, #0]
 800829e:	b90d      	cbnz	r5, 80082a4 <_printf_i+0x118>
 80082a0:	2e00      	cmp	r6, #0
 80082a2:	d04d      	beq.n	8008340 <_printf_i+0x1b4>
 80082a4:	4616      	mov	r6, r2
 80082a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80082aa:	fb03 5711 	mls	r7, r3, r1, r5
 80082ae:	5dc7      	ldrb	r7, [r0, r7]
 80082b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80082b4:	462f      	mov	r7, r5
 80082b6:	42bb      	cmp	r3, r7
 80082b8:	460d      	mov	r5, r1
 80082ba:	d9f4      	bls.n	80082a6 <_printf_i+0x11a>
 80082bc:	2b08      	cmp	r3, #8
 80082be:	d10b      	bne.n	80082d8 <_printf_i+0x14c>
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	07df      	lsls	r7, r3, #31
 80082c4:	d508      	bpl.n	80082d8 <_printf_i+0x14c>
 80082c6:	6923      	ldr	r3, [r4, #16]
 80082c8:	6861      	ldr	r1, [r4, #4]
 80082ca:	4299      	cmp	r1, r3
 80082cc:	bfde      	ittt	le
 80082ce:	2330      	movle	r3, #48	; 0x30
 80082d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80082d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80082d8:	1b92      	subs	r2, r2, r6
 80082da:	6122      	str	r2, [r4, #16]
 80082dc:	f8cd a000 	str.w	sl, [sp]
 80082e0:	464b      	mov	r3, r9
 80082e2:	aa03      	add	r2, sp, #12
 80082e4:	4621      	mov	r1, r4
 80082e6:	4640      	mov	r0, r8
 80082e8:	f7ff fee2 	bl	80080b0 <_printf_common>
 80082ec:	3001      	adds	r0, #1
 80082ee:	d14c      	bne.n	800838a <_printf_i+0x1fe>
 80082f0:	f04f 30ff 	mov.w	r0, #4294967295
 80082f4:	b004      	add	sp, #16
 80082f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082fa:	4835      	ldr	r0, [pc, #212]	; (80083d0 <_printf_i+0x244>)
 80082fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	680e      	ldr	r6, [r1, #0]
 8008304:	061f      	lsls	r7, r3, #24
 8008306:	f856 5b04 	ldr.w	r5, [r6], #4
 800830a:	600e      	str	r6, [r1, #0]
 800830c:	d514      	bpl.n	8008338 <_printf_i+0x1ac>
 800830e:	07d9      	lsls	r1, r3, #31
 8008310:	bf44      	itt	mi
 8008312:	f043 0320 	orrmi.w	r3, r3, #32
 8008316:	6023      	strmi	r3, [r4, #0]
 8008318:	b91d      	cbnz	r5, 8008322 <_printf_i+0x196>
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	f023 0320 	bic.w	r3, r3, #32
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	2310      	movs	r3, #16
 8008324:	e7b0      	b.n	8008288 <_printf_i+0xfc>
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	f043 0320 	orr.w	r3, r3, #32
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	2378      	movs	r3, #120	; 0x78
 8008330:	4828      	ldr	r0, [pc, #160]	; (80083d4 <_printf_i+0x248>)
 8008332:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008336:	e7e3      	b.n	8008300 <_printf_i+0x174>
 8008338:	065e      	lsls	r6, r3, #25
 800833a:	bf48      	it	mi
 800833c:	b2ad      	uxthmi	r5, r5
 800833e:	e7e6      	b.n	800830e <_printf_i+0x182>
 8008340:	4616      	mov	r6, r2
 8008342:	e7bb      	b.n	80082bc <_printf_i+0x130>
 8008344:	680b      	ldr	r3, [r1, #0]
 8008346:	6826      	ldr	r6, [r4, #0]
 8008348:	6960      	ldr	r0, [r4, #20]
 800834a:	1d1d      	adds	r5, r3, #4
 800834c:	600d      	str	r5, [r1, #0]
 800834e:	0635      	lsls	r5, r6, #24
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	d501      	bpl.n	8008358 <_printf_i+0x1cc>
 8008354:	6018      	str	r0, [r3, #0]
 8008356:	e002      	b.n	800835e <_printf_i+0x1d2>
 8008358:	0671      	lsls	r1, r6, #25
 800835a:	d5fb      	bpl.n	8008354 <_printf_i+0x1c8>
 800835c:	8018      	strh	r0, [r3, #0]
 800835e:	2300      	movs	r3, #0
 8008360:	6123      	str	r3, [r4, #16]
 8008362:	4616      	mov	r6, r2
 8008364:	e7ba      	b.n	80082dc <_printf_i+0x150>
 8008366:	680b      	ldr	r3, [r1, #0]
 8008368:	1d1a      	adds	r2, r3, #4
 800836a:	600a      	str	r2, [r1, #0]
 800836c:	681e      	ldr	r6, [r3, #0]
 800836e:	6862      	ldr	r2, [r4, #4]
 8008370:	2100      	movs	r1, #0
 8008372:	4630      	mov	r0, r6
 8008374:	f7f7 ff34 	bl	80001e0 <memchr>
 8008378:	b108      	cbz	r0, 800837e <_printf_i+0x1f2>
 800837a:	1b80      	subs	r0, r0, r6
 800837c:	6060      	str	r0, [r4, #4]
 800837e:	6863      	ldr	r3, [r4, #4]
 8008380:	6123      	str	r3, [r4, #16]
 8008382:	2300      	movs	r3, #0
 8008384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008388:	e7a8      	b.n	80082dc <_printf_i+0x150>
 800838a:	6923      	ldr	r3, [r4, #16]
 800838c:	4632      	mov	r2, r6
 800838e:	4649      	mov	r1, r9
 8008390:	4640      	mov	r0, r8
 8008392:	47d0      	blx	sl
 8008394:	3001      	adds	r0, #1
 8008396:	d0ab      	beq.n	80082f0 <_printf_i+0x164>
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	079b      	lsls	r3, r3, #30
 800839c:	d413      	bmi.n	80083c6 <_printf_i+0x23a>
 800839e:	68e0      	ldr	r0, [r4, #12]
 80083a0:	9b03      	ldr	r3, [sp, #12]
 80083a2:	4298      	cmp	r0, r3
 80083a4:	bfb8      	it	lt
 80083a6:	4618      	movlt	r0, r3
 80083a8:	e7a4      	b.n	80082f4 <_printf_i+0x168>
 80083aa:	2301      	movs	r3, #1
 80083ac:	4632      	mov	r2, r6
 80083ae:	4649      	mov	r1, r9
 80083b0:	4640      	mov	r0, r8
 80083b2:	47d0      	blx	sl
 80083b4:	3001      	adds	r0, #1
 80083b6:	d09b      	beq.n	80082f0 <_printf_i+0x164>
 80083b8:	3501      	adds	r5, #1
 80083ba:	68e3      	ldr	r3, [r4, #12]
 80083bc:	9903      	ldr	r1, [sp, #12]
 80083be:	1a5b      	subs	r3, r3, r1
 80083c0:	42ab      	cmp	r3, r5
 80083c2:	dcf2      	bgt.n	80083aa <_printf_i+0x21e>
 80083c4:	e7eb      	b.n	800839e <_printf_i+0x212>
 80083c6:	2500      	movs	r5, #0
 80083c8:	f104 0619 	add.w	r6, r4, #25
 80083cc:	e7f5      	b.n	80083ba <_printf_i+0x22e>
 80083ce:	bf00      	nop
 80083d0:	08017ce6 	.word	0x08017ce6
 80083d4:	08017cf7 	.word	0x08017cf7

080083d8 <iprintf>:
 80083d8:	b40f      	push	{r0, r1, r2, r3}
 80083da:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <iprintf+0x2c>)
 80083dc:	b513      	push	{r0, r1, r4, lr}
 80083de:	681c      	ldr	r4, [r3, #0]
 80083e0:	b124      	cbz	r4, 80083ec <iprintf+0x14>
 80083e2:	69a3      	ldr	r3, [r4, #24]
 80083e4:	b913      	cbnz	r3, 80083ec <iprintf+0x14>
 80083e6:	4620      	mov	r0, r4
 80083e8:	f000 fefe 	bl	80091e8 <__sinit>
 80083ec:	ab05      	add	r3, sp, #20
 80083ee:	9a04      	ldr	r2, [sp, #16]
 80083f0:	68a1      	ldr	r1, [r4, #8]
 80083f2:	9301      	str	r3, [sp, #4]
 80083f4:	4620      	mov	r0, r4
 80083f6:	f001 fd71 	bl	8009edc <_vfiprintf_r>
 80083fa:	b002      	add	sp, #8
 80083fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008400:	b004      	add	sp, #16
 8008402:	4770      	bx	lr
 8008404:	200000a4 	.word	0x200000a4

08008408 <siprintf>:
 8008408:	b40e      	push	{r1, r2, r3}
 800840a:	b500      	push	{lr}
 800840c:	b09c      	sub	sp, #112	; 0x70
 800840e:	ab1d      	add	r3, sp, #116	; 0x74
 8008410:	9002      	str	r0, [sp, #8]
 8008412:	9006      	str	r0, [sp, #24]
 8008414:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008418:	4809      	ldr	r0, [pc, #36]	; (8008440 <siprintf+0x38>)
 800841a:	9107      	str	r1, [sp, #28]
 800841c:	9104      	str	r1, [sp, #16]
 800841e:	4909      	ldr	r1, [pc, #36]	; (8008444 <siprintf+0x3c>)
 8008420:	f853 2b04 	ldr.w	r2, [r3], #4
 8008424:	9105      	str	r1, [sp, #20]
 8008426:	6800      	ldr	r0, [r0, #0]
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	a902      	add	r1, sp, #8
 800842c:	f001 fc2c 	bl	8009c88 <_svfiprintf_r>
 8008430:	9b02      	ldr	r3, [sp, #8]
 8008432:	2200      	movs	r2, #0
 8008434:	701a      	strb	r2, [r3, #0]
 8008436:	b01c      	add	sp, #112	; 0x70
 8008438:	f85d eb04 	ldr.w	lr, [sp], #4
 800843c:	b003      	add	sp, #12
 800843e:	4770      	bx	lr
 8008440:	200000a4 	.word	0x200000a4
 8008444:	ffff0208 	.word	0xffff0208

08008448 <quorem>:
 8008448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844c:	6903      	ldr	r3, [r0, #16]
 800844e:	690c      	ldr	r4, [r1, #16]
 8008450:	42a3      	cmp	r3, r4
 8008452:	4607      	mov	r7, r0
 8008454:	f2c0 8081 	blt.w	800855a <quorem+0x112>
 8008458:	3c01      	subs	r4, #1
 800845a:	f101 0814 	add.w	r8, r1, #20
 800845e:	f100 0514 	add.w	r5, r0, #20
 8008462:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008466:	9301      	str	r3, [sp, #4]
 8008468:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800846c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008470:	3301      	adds	r3, #1
 8008472:	429a      	cmp	r2, r3
 8008474:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008478:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800847c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008480:	d331      	bcc.n	80084e6 <quorem+0x9e>
 8008482:	f04f 0e00 	mov.w	lr, #0
 8008486:	4640      	mov	r0, r8
 8008488:	46ac      	mov	ip, r5
 800848a:	46f2      	mov	sl, lr
 800848c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008490:	b293      	uxth	r3, r2
 8008492:	fb06 e303 	mla	r3, r6, r3, lr
 8008496:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800849a:	b29b      	uxth	r3, r3
 800849c:	ebaa 0303 	sub.w	r3, sl, r3
 80084a0:	0c12      	lsrs	r2, r2, #16
 80084a2:	f8dc a000 	ldr.w	sl, [ip]
 80084a6:	fb06 e202 	mla	r2, r6, r2, lr
 80084aa:	fa13 f38a 	uxtah	r3, r3, sl
 80084ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084b2:	fa1f fa82 	uxth.w	sl, r2
 80084b6:	f8dc 2000 	ldr.w	r2, [ip]
 80084ba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80084be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084c8:	4581      	cmp	r9, r0
 80084ca:	f84c 3b04 	str.w	r3, [ip], #4
 80084ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80084d2:	d2db      	bcs.n	800848c <quorem+0x44>
 80084d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80084d8:	b92b      	cbnz	r3, 80084e6 <quorem+0x9e>
 80084da:	9b01      	ldr	r3, [sp, #4]
 80084dc:	3b04      	subs	r3, #4
 80084de:	429d      	cmp	r5, r3
 80084e0:	461a      	mov	r2, r3
 80084e2:	d32e      	bcc.n	8008542 <quorem+0xfa>
 80084e4:	613c      	str	r4, [r7, #16]
 80084e6:	4638      	mov	r0, r7
 80084e8:	f001 f9b8 	bl	800985c <__mcmp>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	db24      	blt.n	800853a <quorem+0xf2>
 80084f0:	3601      	adds	r6, #1
 80084f2:	4628      	mov	r0, r5
 80084f4:	f04f 0c00 	mov.w	ip, #0
 80084f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80084fc:	f8d0 e000 	ldr.w	lr, [r0]
 8008500:	b293      	uxth	r3, r2
 8008502:	ebac 0303 	sub.w	r3, ip, r3
 8008506:	0c12      	lsrs	r2, r2, #16
 8008508:	fa13 f38e 	uxtah	r3, r3, lr
 800850c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008510:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008514:	b29b      	uxth	r3, r3
 8008516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800851a:	45c1      	cmp	r9, r8
 800851c:	f840 3b04 	str.w	r3, [r0], #4
 8008520:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008524:	d2e8      	bcs.n	80084f8 <quorem+0xb0>
 8008526:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800852a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800852e:	b922      	cbnz	r2, 800853a <quorem+0xf2>
 8008530:	3b04      	subs	r3, #4
 8008532:	429d      	cmp	r5, r3
 8008534:	461a      	mov	r2, r3
 8008536:	d30a      	bcc.n	800854e <quorem+0x106>
 8008538:	613c      	str	r4, [r7, #16]
 800853a:	4630      	mov	r0, r6
 800853c:	b003      	add	sp, #12
 800853e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008542:	6812      	ldr	r2, [r2, #0]
 8008544:	3b04      	subs	r3, #4
 8008546:	2a00      	cmp	r2, #0
 8008548:	d1cc      	bne.n	80084e4 <quorem+0x9c>
 800854a:	3c01      	subs	r4, #1
 800854c:	e7c7      	b.n	80084de <quorem+0x96>
 800854e:	6812      	ldr	r2, [r2, #0]
 8008550:	3b04      	subs	r3, #4
 8008552:	2a00      	cmp	r2, #0
 8008554:	d1f0      	bne.n	8008538 <quorem+0xf0>
 8008556:	3c01      	subs	r4, #1
 8008558:	e7eb      	b.n	8008532 <quorem+0xea>
 800855a:	2000      	movs	r0, #0
 800855c:	e7ee      	b.n	800853c <quorem+0xf4>
	...

08008560 <_dtoa_r>:
 8008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	ed2d 8b02 	vpush	{d8}
 8008568:	ec57 6b10 	vmov	r6, r7, d0
 800856c:	b095      	sub	sp, #84	; 0x54
 800856e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008570:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008574:	9105      	str	r1, [sp, #20]
 8008576:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800857a:	4604      	mov	r4, r0
 800857c:	9209      	str	r2, [sp, #36]	; 0x24
 800857e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008580:	b975      	cbnz	r5, 80085a0 <_dtoa_r+0x40>
 8008582:	2010      	movs	r0, #16
 8008584:	f000 fed6 	bl	8009334 <malloc>
 8008588:	4602      	mov	r2, r0
 800858a:	6260      	str	r0, [r4, #36]	; 0x24
 800858c:	b920      	cbnz	r0, 8008598 <_dtoa_r+0x38>
 800858e:	4bb2      	ldr	r3, [pc, #712]	; (8008858 <_dtoa_r+0x2f8>)
 8008590:	21ea      	movs	r1, #234	; 0xea
 8008592:	48b2      	ldr	r0, [pc, #712]	; (800885c <_dtoa_r+0x2fc>)
 8008594:	f001 fef8 	bl	800a388 <__assert_func>
 8008598:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800859c:	6005      	str	r5, [r0, #0]
 800859e:	60c5      	str	r5, [r0, #12]
 80085a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085a2:	6819      	ldr	r1, [r3, #0]
 80085a4:	b151      	cbz	r1, 80085bc <_dtoa_r+0x5c>
 80085a6:	685a      	ldr	r2, [r3, #4]
 80085a8:	604a      	str	r2, [r1, #4]
 80085aa:	2301      	movs	r3, #1
 80085ac:	4093      	lsls	r3, r2
 80085ae:	608b      	str	r3, [r1, #8]
 80085b0:	4620      	mov	r0, r4
 80085b2:	f000 ff15 	bl	80093e0 <_Bfree>
 80085b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	1e3b      	subs	r3, r7, #0
 80085be:	bfb9      	ittee	lt
 80085c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80085c4:	9303      	strlt	r3, [sp, #12]
 80085c6:	2300      	movge	r3, #0
 80085c8:	f8c8 3000 	strge.w	r3, [r8]
 80085cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80085d0:	4ba3      	ldr	r3, [pc, #652]	; (8008860 <_dtoa_r+0x300>)
 80085d2:	bfbc      	itt	lt
 80085d4:	2201      	movlt	r2, #1
 80085d6:	f8c8 2000 	strlt.w	r2, [r8]
 80085da:	ea33 0309 	bics.w	r3, r3, r9
 80085de:	d11b      	bne.n	8008618 <_dtoa_r+0xb8>
 80085e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80085e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80085e6:	6013      	str	r3, [r2, #0]
 80085e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085ec:	4333      	orrs	r3, r6
 80085ee:	f000 857a 	beq.w	80090e6 <_dtoa_r+0xb86>
 80085f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085f4:	b963      	cbnz	r3, 8008610 <_dtoa_r+0xb0>
 80085f6:	4b9b      	ldr	r3, [pc, #620]	; (8008864 <_dtoa_r+0x304>)
 80085f8:	e024      	b.n	8008644 <_dtoa_r+0xe4>
 80085fa:	4b9b      	ldr	r3, [pc, #620]	; (8008868 <_dtoa_r+0x308>)
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	3308      	adds	r3, #8
 8008600:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008602:	6013      	str	r3, [r2, #0]
 8008604:	9800      	ldr	r0, [sp, #0]
 8008606:	b015      	add	sp, #84	; 0x54
 8008608:	ecbd 8b02 	vpop	{d8}
 800860c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008610:	4b94      	ldr	r3, [pc, #592]	; (8008864 <_dtoa_r+0x304>)
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	3303      	adds	r3, #3
 8008616:	e7f3      	b.n	8008600 <_dtoa_r+0xa0>
 8008618:	ed9d 7b02 	vldr	d7, [sp, #8]
 800861c:	2200      	movs	r2, #0
 800861e:	ec51 0b17 	vmov	r0, r1, d7
 8008622:	2300      	movs	r3, #0
 8008624:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008628:	f7f8 fa4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800862c:	4680      	mov	r8, r0
 800862e:	b158      	cbz	r0, 8008648 <_dtoa_r+0xe8>
 8008630:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008632:	2301      	movs	r3, #1
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 8551 	beq.w	80090e0 <_dtoa_r+0xb80>
 800863e:	488b      	ldr	r0, [pc, #556]	; (800886c <_dtoa_r+0x30c>)
 8008640:	6018      	str	r0, [r3, #0]
 8008642:	1e43      	subs	r3, r0, #1
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	e7dd      	b.n	8008604 <_dtoa_r+0xa4>
 8008648:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800864c:	aa12      	add	r2, sp, #72	; 0x48
 800864e:	a913      	add	r1, sp, #76	; 0x4c
 8008650:	4620      	mov	r0, r4
 8008652:	f001 f9a7 	bl	80099a4 <__d2b>
 8008656:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800865a:	4683      	mov	fp, r0
 800865c:	2d00      	cmp	r5, #0
 800865e:	d07c      	beq.n	800875a <_dtoa_r+0x1fa>
 8008660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008662:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800866a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800866e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008672:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008676:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800867a:	4b7d      	ldr	r3, [pc, #500]	; (8008870 <_dtoa_r+0x310>)
 800867c:	2200      	movs	r2, #0
 800867e:	4630      	mov	r0, r6
 8008680:	4639      	mov	r1, r7
 8008682:	f7f7 fe01 	bl	8000288 <__aeabi_dsub>
 8008686:	a36e      	add	r3, pc, #440	; (adr r3, 8008840 <_dtoa_r+0x2e0>)
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	f7f7 ffb4 	bl	80005f8 <__aeabi_dmul>
 8008690:	a36d      	add	r3, pc, #436	; (adr r3, 8008848 <_dtoa_r+0x2e8>)
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	f7f7 fdf9 	bl	800028c <__adddf3>
 800869a:	4606      	mov	r6, r0
 800869c:	4628      	mov	r0, r5
 800869e:	460f      	mov	r7, r1
 80086a0:	f7f7 ff40 	bl	8000524 <__aeabi_i2d>
 80086a4:	a36a      	add	r3, pc, #424	; (adr r3, 8008850 <_dtoa_r+0x2f0>)
 80086a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086aa:	f7f7 ffa5 	bl	80005f8 <__aeabi_dmul>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4630      	mov	r0, r6
 80086b4:	4639      	mov	r1, r7
 80086b6:	f7f7 fde9 	bl	800028c <__adddf3>
 80086ba:	4606      	mov	r6, r0
 80086bc:	460f      	mov	r7, r1
 80086be:	f7f8 fa4b 	bl	8000b58 <__aeabi_d2iz>
 80086c2:	2200      	movs	r2, #0
 80086c4:	4682      	mov	sl, r0
 80086c6:	2300      	movs	r3, #0
 80086c8:	4630      	mov	r0, r6
 80086ca:	4639      	mov	r1, r7
 80086cc:	f7f8 fa06 	bl	8000adc <__aeabi_dcmplt>
 80086d0:	b148      	cbz	r0, 80086e6 <_dtoa_r+0x186>
 80086d2:	4650      	mov	r0, sl
 80086d4:	f7f7 ff26 	bl	8000524 <__aeabi_i2d>
 80086d8:	4632      	mov	r2, r6
 80086da:	463b      	mov	r3, r7
 80086dc:	f7f8 f9f4 	bl	8000ac8 <__aeabi_dcmpeq>
 80086e0:	b908      	cbnz	r0, 80086e6 <_dtoa_r+0x186>
 80086e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086e6:	f1ba 0f16 	cmp.w	sl, #22
 80086ea:	d854      	bhi.n	8008796 <_dtoa_r+0x236>
 80086ec:	4b61      	ldr	r3, [pc, #388]	; (8008874 <_dtoa_r+0x314>)
 80086ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80086fa:	f7f8 f9ef 	bl	8000adc <__aeabi_dcmplt>
 80086fe:	2800      	cmp	r0, #0
 8008700:	d04b      	beq.n	800879a <_dtoa_r+0x23a>
 8008702:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008706:	2300      	movs	r3, #0
 8008708:	930e      	str	r3, [sp, #56]	; 0x38
 800870a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800870c:	1b5d      	subs	r5, r3, r5
 800870e:	1e6b      	subs	r3, r5, #1
 8008710:	9304      	str	r3, [sp, #16]
 8008712:	bf43      	ittte	mi
 8008714:	2300      	movmi	r3, #0
 8008716:	f1c5 0801 	rsbmi	r8, r5, #1
 800871a:	9304      	strmi	r3, [sp, #16]
 800871c:	f04f 0800 	movpl.w	r8, #0
 8008720:	f1ba 0f00 	cmp.w	sl, #0
 8008724:	db3b      	blt.n	800879e <_dtoa_r+0x23e>
 8008726:	9b04      	ldr	r3, [sp, #16]
 8008728:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800872c:	4453      	add	r3, sl
 800872e:	9304      	str	r3, [sp, #16]
 8008730:	2300      	movs	r3, #0
 8008732:	9306      	str	r3, [sp, #24]
 8008734:	9b05      	ldr	r3, [sp, #20]
 8008736:	2b09      	cmp	r3, #9
 8008738:	d869      	bhi.n	800880e <_dtoa_r+0x2ae>
 800873a:	2b05      	cmp	r3, #5
 800873c:	bfc4      	itt	gt
 800873e:	3b04      	subgt	r3, #4
 8008740:	9305      	strgt	r3, [sp, #20]
 8008742:	9b05      	ldr	r3, [sp, #20]
 8008744:	f1a3 0302 	sub.w	r3, r3, #2
 8008748:	bfcc      	ite	gt
 800874a:	2500      	movgt	r5, #0
 800874c:	2501      	movle	r5, #1
 800874e:	2b03      	cmp	r3, #3
 8008750:	d869      	bhi.n	8008826 <_dtoa_r+0x2c6>
 8008752:	e8df f003 	tbb	[pc, r3]
 8008756:	4e2c      	.short	0x4e2c
 8008758:	5a4c      	.short	0x5a4c
 800875a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800875e:	441d      	add	r5, r3
 8008760:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008764:	2b20      	cmp	r3, #32
 8008766:	bfc1      	itttt	gt
 8008768:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800876c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008770:	fa09 f303 	lslgt.w	r3, r9, r3
 8008774:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008778:	bfda      	itte	le
 800877a:	f1c3 0320 	rsble	r3, r3, #32
 800877e:	fa06 f003 	lslle.w	r0, r6, r3
 8008782:	4318      	orrgt	r0, r3
 8008784:	f7f7 febe 	bl	8000504 <__aeabi_ui2d>
 8008788:	2301      	movs	r3, #1
 800878a:	4606      	mov	r6, r0
 800878c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008790:	3d01      	subs	r5, #1
 8008792:	9310      	str	r3, [sp, #64]	; 0x40
 8008794:	e771      	b.n	800867a <_dtoa_r+0x11a>
 8008796:	2301      	movs	r3, #1
 8008798:	e7b6      	b.n	8008708 <_dtoa_r+0x1a8>
 800879a:	900e      	str	r0, [sp, #56]	; 0x38
 800879c:	e7b5      	b.n	800870a <_dtoa_r+0x1aa>
 800879e:	f1ca 0300 	rsb	r3, sl, #0
 80087a2:	9306      	str	r3, [sp, #24]
 80087a4:	2300      	movs	r3, #0
 80087a6:	eba8 080a 	sub.w	r8, r8, sl
 80087aa:	930d      	str	r3, [sp, #52]	; 0x34
 80087ac:	e7c2      	b.n	8008734 <_dtoa_r+0x1d4>
 80087ae:	2300      	movs	r3, #0
 80087b0:	9308      	str	r3, [sp, #32]
 80087b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	dc39      	bgt.n	800882c <_dtoa_r+0x2cc>
 80087b8:	f04f 0901 	mov.w	r9, #1
 80087bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80087c0:	464b      	mov	r3, r9
 80087c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80087c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80087c8:	2200      	movs	r2, #0
 80087ca:	6042      	str	r2, [r0, #4]
 80087cc:	2204      	movs	r2, #4
 80087ce:	f102 0614 	add.w	r6, r2, #20
 80087d2:	429e      	cmp	r6, r3
 80087d4:	6841      	ldr	r1, [r0, #4]
 80087d6:	d92f      	bls.n	8008838 <_dtoa_r+0x2d8>
 80087d8:	4620      	mov	r0, r4
 80087da:	f000 fdc1 	bl	8009360 <_Balloc>
 80087de:	9000      	str	r0, [sp, #0]
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d14b      	bne.n	800887c <_dtoa_r+0x31c>
 80087e4:	4b24      	ldr	r3, [pc, #144]	; (8008878 <_dtoa_r+0x318>)
 80087e6:	4602      	mov	r2, r0
 80087e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80087ec:	e6d1      	b.n	8008592 <_dtoa_r+0x32>
 80087ee:	2301      	movs	r3, #1
 80087f0:	e7de      	b.n	80087b0 <_dtoa_r+0x250>
 80087f2:	2300      	movs	r3, #0
 80087f4:	9308      	str	r3, [sp, #32]
 80087f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f8:	eb0a 0903 	add.w	r9, sl, r3
 80087fc:	f109 0301 	add.w	r3, r9, #1
 8008800:	2b01      	cmp	r3, #1
 8008802:	9301      	str	r3, [sp, #4]
 8008804:	bfb8      	it	lt
 8008806:	2301      	movlt	r3, #1
 8008808:	e7dd      	b.n	80087c6 <_dtoa_r+0x266>
 800880a:	2301      	movs	r3, #1
 800880c:	e7f2      	b.n	80087f4 <_dtoa_r+0x294>
 800880e:	2501      	movs	r5, #1
 8008810:	2300      	movs	r3, #0
 8008812:	9305      	str	r3, [sp, #20]
 8008814:	9508      	str	r5, [sp, #32]
 8008816:	f04f 39ff 	mov.w	r9, #4294967295
 800881a:	2200      	movs	r2, #0
 800881c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008820:	2312      	movs	r3, #18
 8008822:	9209      	str	r2, [sp, #36]	; 0x24
 8008824:	e7cf      	b.n	80087c6 <_dtoa_r+0x266>
 8008826:	2301      	movs	r3, #1
 8008828:	9308      	str	r3, [sp, #32]
 800882a:	e7f4      	b.n	8008816 <_dtoa_r+0x2b6>
 800882c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008830:	f8cd 9004 	str.w	r9, [sp, #4]
 8008834:	464b      	mov	r3, r9
 8008836:	e7c6      	b.n	80087c6 <_dtoa_r+0x266>
 8008838:	3101      	adds	r1, #1
 800883a:	6041      	str	r1, [r0, #4]
 800883c:	0052      	lsls	r2, r2, #1
 800883e:	e7c6      	b.n	80087ce <_dtoa_r+0x26e>
 8008840:	636f4361 	.word	0x636f4361
 8008844:	3fd287a7 	.word	0x3fd287a7
 8008848:	8b60c8b3 	.word	0x8b60c8b3
 800884c:	3fc68a28 	.word	0x3fc68a28
 8008850:	509f79fb 	.word	0x509f79fb
 8008854:	3fd34413 	.word	0x3fd34413
 8008858:	08017d15 	.word	0x08017d15
 800885c:	08017d2c 	.word	0x08017d2c
 8008860:	7ff00000 	.word	0x7ff00000
 8008864:	08017d11 	.word	0x08017d11
 8008868:	08017d08 	.word	0x08017d08
 800886c:	08017ce5 	.word	0x08017ce5
 8008870:	3ff80000 	.word	0x3ff80000
 8008874:	08017e88 	.word	0x08017e88
 8008878:	08017d8b 	.word	0x08017d8b
 800887c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800887e:	9a00      	ldr	r2, [sp, #0]
 8008880:	601a      	str	r2, [r3, #0]
 8008882:	9b01      	ldr	r3, [sp, #4]
 8008884:	2b0e      	cmp	r3, #14
 8008886:	f200 80ad 	bhi.w	80089e4 <_dtoa_r+0x484>
 800888a:	2d00      	cmp	r5, #0
 800888c:	f000 80aa 	beq.w	80089e4 <_dtoa_r+0x484>
 8008890:	f1ba 0f00 	cmp.w	sl, #0
 8008894:	dd36      	ble.n	8008904 <_dtoa_r+0x3a4>
 8008896:	4ac3      	ldr	r2, [pc, #780]	; (8008ba4 <_dtoa_r+0x644>)
 8008898:	f00a 030f 	and.w	r3, sl, #15
 800889c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80088a0:	ed93 7b00 	vldr	d7, [r3]
 80088a4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80088a8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80088ac:	eeb0 8a47 	vmov.f32	s16, s14
 80088b0:	eef0 8a67 	vmov.f32	s17, s15
 80088b4:	d016      	beq.n	80088e4 <_dtoa_r+0x384>
 80088b6:	4bbc      	ldr	r3, [pc, #752]	; (8008ba8 <_dtoa_r+0x648>)
 80088b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80088bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088c0:	f7f7 ffc4 	bl	800084c <__aeabi_ddiv>
 80088c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088c8:	f007 070f 	and.w	r7, r7, #15
 80088cc:	2503      	movs	r5, #3
 80088ce:	4eb6      	ldr	r6, [pc, #728]	; (8008ba8 <_dtoa_r+0x648>)
 80088d0:	b957      	cbnz	r7, 80088e8 <_dtoa_r+0x388>
 80088d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088d6:	ec53 2b18 	vmov	r2, r3, d8
 80088da:	f7f7 ffb7 	bl	800084c <__aeabi_ddiv>
 80088de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088e2:	e029      	b.n	8008938 <_dtoa_r+0x3d8>
 80088e4:	2502      	movs	r5, #2
 80088e6:	e7f2      	b.n	80088ce <_dtoa_r+0x36e>
 80088e8:	07f9      	lsls	r1, r7, #31
 80088ea:	d508      	bpl.n	80088fe <_dtoa_r+0x39e>
 80088ec:	ec51 0b18 	vmov	r0, r1, d8
 80088f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088f4:	f7f7 fe80 	bl	80005f8 <__aeabi_dmul>
 80088f8:	ec41 0b18 	vmov	d8, r0, r1
 80088fc:	3501      	adds	r5, #1
 80088fe:	107f      	asrs	r7, r7, #1
 8008900:	3608      	adds	r6, #8
 8008902:	e7e5      	b.n	80088d0 <_dtoa_r+0x370>
 8008904:	f000 80a6 	beq.w	8008a54 <_dtoa_r+0x4f4>
 8008908:	f1ca 0600 	rsb	r6, sl, #0
 800890c:	4ba5      	ldr	r3, [pc, #660]	; (8008ba4 <_dtoa_r+0x644>)
 800890e:	4fa6      	ldr	r7, [pc, #664]	; (8008ba8 <_dtoa_r+0x648>)
 8008910:	f006 020f 	and.w	r2, r6, #15
 8008914:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008920:	f7f7 fe6a 	bl	80005f8 <__aeabi_dmul>
 8008924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008928:	1136      	asrs	r6, r6, #4
 800892a:	2300      	movs	r3, #0
 800892c:	2502      	movs	r5, #2
 800892e:	2e00      	cmp	r6, #0
 8008930:	f040 8085 	bne.w	8008a3e <_dtoa_r+0x4de>
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1d2      	bne.n	80088de <_dtoa_r+0x37e>
 8008938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 808c 	beq.w	8008a58 <_dtoa_r+0x4f8>
 8008940:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008944:	4b99      	ldr	r3, [pc, #612]	; (8008bac <_dtoa_r+0x64c>)
 8008946:	2200      	movs	r2, #0
 8008948:	4630      	mov	r0, r6
 800894a:	4639      	mov	r1, r7
 800894c:	f7f8 f8c6 	bl	8000adc <__aeabi_dcmplt>
 8008950:	2800      	cmp	r0, #0
 8008952:	f000 8081 	beq.w	8008a58 <_dtoa_r+0x4f8>
 8008956:	9b01      	ldr	r3, [sp, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d07d      	beq.n	8008a58 <_dtoa_r+0x4f8>
 800895c:	f1b9 0f00 	cmp.w	r9, #0
 8008960:	dd3c      	ble.n	80089dc <_dtoa_r+0x47c>
 8008962:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008966:	9307      	str	r3, [sp, #28]
 8008968:	2200      	movs	r2, #0
 800896a:	4b91      	ldr	r3, [pc, #580]	; (8008bb0 <_dtoa_r+0x650>)
 800896c:	4630      	mov	r0, r6
 800896e:	4639      	mov	r1, r7
 8008970:	f7f7 fe42 	bl	80005f8 <__aeabi_dmul>
 8008974:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008978:	3501      	adds	r5, #1
 800897a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800897e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008982:	4628      	mov	r0, r5
 8008984:	f7f7 fdce 	bl	8000524 <__aeabi_i2d>
 8008988:	4632      	mov	r2, r6
 800898a:	463b      	mov	r3, r7
 800898c:	f7f7 fe34 	bl	80005f8 <__aeabi_dmul>
 8008990:	4b88      	ldr	r3, [pc, #544]	; (8008bb4 <_dtoa_r+0x654>)
 8008992:	2200      	movs	r2, #0
 8008994:	f7f7 fc7a 	bl	800028c <__adddf3>
 8008998:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800899c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089a0:	9303      	str	r3, [sp, #12]
 80089a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d15c      	bne.n	8008a62 <_dtoa_r+0x502>
 80089a8:	4b83      	ldr	r3, [pc, #524]	; (8008bb8 <_dtoa_r+0x658>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	4630      	mov	r0, r6
 80089ae:	4639      	mov	r1, r7
 80089b0:	f7f7 fc6a 	bl	8000288 <__aeabi_dsub>
 80089b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089b8:	4606      	mov	r6, r0
 80089ba:	460f      	mov	r7, r1
 80089bc:	f7f8 f8ac 	bl	8000b18 <__aeabi_dcmpgt>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	f040 8296 	bne.w	8008ef2 <_dtoa_r+0x992>
 80089c6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80089ca:	4630      	mov	r0, r6
 80089cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089d0:	4639      	mov	r1, r7
 80089d2:	f7f8 f883 	bl	8000adc <__aeabi_dcmplt>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	f040 8288 	bne.w	8008eec <_dtoa_r+0x98c>
 80089dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80089e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f2c0 8158 	blt.w	8008c9c <_dtoa_r+0x73c>
 80089ec:	f1ba 0f0e 	cmp.w	sl, #14
 80089f0:	f300 8154 	bgt.w	8008c9c <_dtoa_r+0x73c>
 80089f4:	4b6b      	ldr	r3, [pc, #428]	; (8008ba4 <_dtoa_r+0x644>)
 80089f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80089fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f280 80e3 	bge.w	8008bcc <_dtoa_r+0x66c>
 8008a06:	9b01      	ldr	r3, [sp, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f300 80df 	bgt.w	8008bcc <_dtoa_r+0x66c>
 8008a0e:	f040 826d 	bne.w	8008eec <_dtoa_r+0x98c>
 8008a12:	4b69      	ldr	r3, [pc, #420]	; (8008bb8 <_dtoa_r+0x658>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	4640      	mov	r0, r8
 8008a18:	4649      	mov	r1, r9
 8008a1a:	f7f7 fded 	bl	80005f8 <__aeabi_dmul>
 8008a1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a22:	f7f8 f86f 	bl	8000b04 <__aeabi_dcmpge>
 8008a26:	9e01      	ldr	r6, [sp, #4]
 8008a28:	4637      	mov	r7, r6
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	f040 8243 	bne.w	8008eb6 <_dtoa_r+0x956>
 8008a30:	9d00      	ldr	r5, [sp, #0]
 8008a32:	2331      	movs	r3, #49	; 0x31
 8008a34:	f805 3b01 	strb.w	r3, [r5], #1
 8008a38:	f10a 0a01 	add.w	sl, sl, #1
 8008a3c:	e23f      	b.n	8008ebe <_dtoa_r+0x95e>
 8008a3e:	07f2      	lsls	r2, r6, #31
 8008a40:	d505      	bpl.n	8008a4e <_dtoa_r+0x4ee>
 8008a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a46:	f7f7 fdd7 	bl	80005f8 <__aeabi_dmul>
 8008a4a:	3501      	adds	r5, #1
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	1076      	asrs	r6, r6, #1
 8008a50:	3708      	adds	r7, #8
 8008a52:	e76c      	b.n	800892e <_dtoa_r+0x3ce>
 8008a54:	2502      	movs	r5, #2
 8008a56:	e76f      	b.n	8008938 <_dtoa_r+0x3d8>
 8008a58:	9b01      	ldr	r3, [sp, #4]
 8008a5a:	f8cd a01c 	str.w	sl, [sp, #28]
 8008a5e:	930c      	str	r3, [sp, #48]	; 0x30
 8008a60:	e78d      	b.n	800897e <_dtoa_r+0x41e>
 8008a62:	9900      	ldr	r1, [sp, #0]
 8008a64:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008a66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a68:	4b4e      	ldr	r3, [pc, #312]	; (8008ba4 <_dtoa_r+0x644>)
 8008a6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a6e:	4401      	add	r1, r0
 8008a70:	9102      	str	r1, [sp, #8]
 8008a72:	9908      	ldr	r1, [sp, #32]
 8008a74:	eeb0 8a47 	vmov.f32	s16, s14
 8008a78:	eef0 8a67 	vmov.f32	s17, s15
 8008a7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a84:	2900      	cmp	r1, #0
 8008a86:	d045      	beq.n	8008b14 <_dtoa_r+0x5b4>
 8008a88:	494c      	ldr	r1, [pc, #304]	; (8008bbc <_dtoa_r+0x65c>)
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	f7f7 fede 	bl	800084c <__aeabi_ddiv>
 8008a90:	ec53 2b18 	vmov	r2, r3, d8
 8008a94:	f7f7 fbf8 	bl	8000288 <__aeabi_dsub>
 8008a98:	9d00      	ldr	r5, [sp, #0]
 8008a9a:	ec41 0b18 	vmov	d8, r0, r1
 8008a9e:	4639      	mov	r1, r7
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	f7f8 f859 	bl	8000b58 <__aeabi_d2iz>
 8008aa6:	900c      	str	r0, [sp, #48]	; 0x30
 8008aa8:	f7f7 fd3c 	bl	8000524 <__aeabi_i2d>
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	4639      	mov	r1, r7
 8008ab4:	f7f7 fbe8 	bl	8000288 <__aeabi_dsub>
 8008ab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aba:	3330      	adds	r3, #48	; 0x30
 8008abc:	f805 3b01 	strb.w	r3, [r5], #1
 8008ac0:	ec53 2b18 	vmov	r2, r3, d8
 8008ac4:	4606      	mov	r6, r0
 8008ac6:	460f      	mov	r7, r1
 8008ac8:	f7f8 f808 	bl	8000adc <__aeabi_dcmplt>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d165      	bne.n	8008b9c <_dtoa_r+0x63c>
 8008ad0:	4632      	mov	r2, r6
 8008ad2:	463b      	mov	r3, r7
 8008ad4:	4935      	ldr	r1, [pc, #212]	; (8008bac <_dtoa_r+0x64c>)
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	f7f7 fbd6 	bl	8000288 <__aeabi_dsub>
 8008adc:	ec53 2b18 	vmov	r2, r3, d8
 8008ae0:	f7f7 fffc 	bl	8000adc <__aeabi_dcmplt>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	f040 80b9 	bne.w	8008c5c <_dtoa_r+0x6fc>
 8008aea:	9b02      	ldr	r3, [sp, #8]
 8008aec:	429d      	cmp	r5, r3
 8008aee:	f43f af75 	beq.w	80089dc <_dtoa_r+0x47c>
 8008af2:	4b2f      	ldr	r3, [pc, #188]	; (8008bb0 <_dtoa_r+0x650>)
 8008af4:	ec51 0b18 	vmov	r0, r1, d8
 8008af8:	2200      	movs	r2, #0
 8008afa:	f7f7 fd7d 	bl	80005f8 <__aeabi_dmul>
 8008afe:	4b2c      	ldr	r3, [pc, #176]	; (8008bb0 <_dtoa_r+0x650>)
 8008b00:	ec41 0b18 	vmov	d8, r0, r1
 8008b04:	2200      	movs	r2, #0
 8008b06:	4630      	mov	r0, r6
 8008b08:	4639      	mov	r1, r7
 8008b0a:	f7f7 fd75 	bl	80005f8 <__aeabi_dmul>
 8008b0e:	4606      	mov	r6, r0
 8008b10:	460f      	mov	r7, r1
 8008b12:	e7c4      	b.n	8008a9e <_dtoa_r+0x53e>
 8008b14:	ec51 0b17 	vmov	r0, r1, d7
 8008b18:	f7f7 fd6e 	bl	80005f8 <__aeabi_dmul>
 8008b1c:	9b02      	ldr	r3, [sp, #8]
 8008b1e:	9d00      	ldr	r5, [sp, #0]
 8008b20:	930c      	str	r3, [sp, #48]	; 0x30
 8008b22:	ec41 0b18 	vmov	d8, r0, r1
 8008b26:	4639      	mov	r1, r7
 8008b28:	4630      	mov	r0, r6
 8008b2a:	f7f8 f815 	bl	8000b58 <__aeabi_d2iz>
 8008b2e:	9011      	str	r0, [sp, #68]	; 0x44
 8008b30:	f7f7 fcf8 	bl	8000524 <__aeabi_i2d>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4630      	mov	r0, r6
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	f7f7 fba4 	bl	8000288 <__aeabi_dsub>
 8008b40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b42:	3330      	adds	r3, #48	; 0x30
 8008b44:	f805 3b01 	strb.w	r3, [r5], #1
 8008b48:	9b02      	ldr	r3, [sp, #8]
 8008b4a:	429d      	cmp	r5, r3
 8008b4c:	4606      	mov	r6, r0
 8008b4e:	460f      	mov	r7, r1
 8008b50:	f04f 0200 	mov.w	r2, #0
 8008b54:	d134      	bne.n	8008bc0 <_dtoa_r+0x660>
 8008b56:	4b19      	ldr	r3, [pc, #100]	; (8008bbc <_dtoa_r+0x65c>)
 8008b58:	ec51 0b18 	vmov	r0, r1, d8
 8008b5c:	f7f7 fb96 	bl	800028c <__adddf3>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	4630      	mov	r0, r6
 8008b66:	4639      	mov	r1, r7
 8008b68:	f7f7 ffd6 	bl	8000b18 <__aeabi_dcmpgt>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d175      	bne.n	8008c5c <_dtoa_r+0x6fc>
 8008b70:	ec53 2b18 	vmov	r2, r3, d8
 8008b74:	4911      	ldr	r1, [pc, #68]	; (8008bbc <_dtoa_r+0x65c>)
 8008b76:	2000      	movs	r0, #0
 8008b78:	f7f7 fb86 	bl	8000288 <__aeabi_dsub>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4630      	mov	r0, r6
 8008b82:	4639      	mov	r1, r7
 8008b84:	f7f7 ffaa 	bl	8000adc <__aeabi_dcmplt>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	f43f af27 	beq.w	80089dc <_dtoa_r+0x47c>
 8008b8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b90:	1e6b      	subs	r3, r5, #1
 8008b92:	930c      	str	r3, [sp, #48]	; 0x30
 8008b94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b98:	2b30      	cmp	r3, #48	; 0x30
 8008b9a:	d0f8      	beq.n	8008b8e <_dtoa_r+0x62e>
 8008b9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008ba0:	e04a      	b.n	8008c38 <_dtoa_r+0x6d8>
 8008ba2:	bf00      	nop
 8008ba4:	08017e88 	.word	0x08017e88
 8008ba8:	08017e60 	.word	0x08017e60
 8008bac:	3ff00000 	.word	0x3ff00000
 8008bb0:	40240000 	.word	0x40240000
 8008bb4:	401c0000 	.word	0x401c0000
 8008bb8:	40140000 	.word	0x40140000
 8008bbc:	3fe00000 	.word	0x3fe00000
 8008bc0:	4baf      	ldr	r3, [pc, #700]	; (8008e80 <_dtoa_r+0x920>)
 8008bc2:	f7f7 fd19 	bl	80005f8 <__aeabi_dmul>
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	460f      	mov	r7, r1
 8008bca:	e7ac      	b.n	8008b26 <_dtoa_r+0x5c6>
 8008bcc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008bd0:	9d00      	ldr	r5, [sp, #0]
 8008bd2:	4642      	mov	r2, r8
 8008bd4:	464b      	mov	r3, r9
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	4639      	mov	r1, r7
 8008bda:	f7f7 fe37 	bl	800084c <__aeabi_ddiv>
 8008bde:	f7f7 ffbb 	bl	8000b58 <__aeabi_d2iz>
 8008be2:	9002      	str	r0, [sp, #8]
 8008be4:	f7f7 fc9e 	bl	8000524 <__aeabi_i2d>
 8008be8:	4642      	mov	r2, r8
 8008bea:	464b      	mov	r3, r9
 8008bec:	f7f7 fd04 	bl	80005f8 <__aeabi_dmul>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	4630      	mov	r0, r6
 8008bf6:	4639      	mov	r1, r7
 8008bf8:	f7f7 fb46 	bl	8000288 <__aeabi_dsub>
 8008bfc:	9e02      	ldr	r6, [sp, #8]
 8008bfe:	9f01      	ldr	r7, [sp, #4]
 8008c00:	3630      	adds	r6, #48	; 0x30
 8008c02:	f805 6b01 	strb.w	r6, [r5], #1
 8008c06:	9e00      	ldr	r6, [sp, #0]
 8008c08:	1bae      	subs	r6, r5, r6
 8008c0a:	42b7      	cmp	r7, r6
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	d137      	bne.n	8008c82 <_dtoa_r+0x722>
 8008c12:	f7f7 fb3b 	bl	800028c <__adddf3>
 8008c16:	4642      	mov	r2, r8
 8008c18:	464b      	mov	r3, r9
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	460f      	mov	r7, r1
 8008c1e:	f7f7 ff7b 	bl	8000b18 <__aeabi_dcmpgt>
 8008c22:	b9c8      	cbnz	r0, 8008c58 <_dtoa_r+0x6f8>
 8008c24:	4642      	mov	r2, r8
 8008c26:	464b      	mov	r3, r9
 8008c28:	4630      	mov	r0, r6
 8008c2a:	4639      	mov	r1, r7
 8008c2c:	f7f7 ff4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c30:	b110      	cbz	r0, 8008c38 <_dtoa_r+0x6d8>
 8008c32:	9b02      	ldr	r3, [sp, #8]
 8008c34:	07d9      	lsls	r1, r3, #31
 8008c36:	d40f      	bmi.n	8008c58 <_dtoa_r+0x6f8>
 8008c38:	4620      	mov	r0, r4
 8008c3a:	4659      	mov	r1, fp
 8008c3c:	f000 fbd0 	bl	80093e0 <_Bfree>
 8008c40:	2300      	movs	r3, #0
 8008c42:	702b      	strb	r3, [r5, #0]
 8008c44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c46:	f10a 0001 	add.w	r0, sl, #1
 8008c4a:	6018      	str	r0, [r3, #0]
 8008c4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f43f acd8 	beq.w	8008604 <_dtoa_r+0xa4>
 8008c54:	601d      	str	r5, [r3, #0]
 8008c56:	e4d5      	b.n	8008604 <_dtoa_r+0xa4>
 8008c58:	f8cd a01c 	str.w	sl, [sp, #28]
 8008c5c:	462b      	mov	r3, r5
 8008c5e:	461d      	mov	r5, r3
 8008c60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c64:	2a39      	cmp	r2, #57	; 0x39
 8008c66:	d108      	bne.n	8008c7a <_dtoa_r+0x71a>
 8008c68:	9a00      	ldr	r2, [sp, #0]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d1f7      	bne.n	8008c5e <_dtoa_r+0x6fe>
 8008c6e:	9a07      	ldr	r2, [sp, #28]
 8008c70:	9900      	ldr	r1, [sp, #0]
 8008c72:	3201      	adds	r2, #1
 8008c74:	9207      	str	r2, [sp, #28]
 8008c76:	2230      	movs	r2, #48	; 0x30
 8008c78:	700a      	strb	r2, [r1, #0]
 8008c7a:	781a      	ldrb	r2, [r3, #0]
 8008c7c:	3201      	adds	r2, #1
 8008c7e:	701a      	strb	r2, [r3, #0]
 8008c80:	e78c      	b.n	8008b9c <_dtoa_r+0x63c>
 8008c82:	4b7f      	ldr	r3, [pc, #508]	; (8008e80 <_dtoa_r+0x920>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	f7f7 fcb7 	bl	80005f8 <__aeabi_dmul>
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	4606      	mov	r6, r0
 8008c90:	460f      	mov	r7, r1
 8008c92:	f7f7 ff19 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d09b      	beq.n	8008bd2 <_dtoa_r+0x672>
 8008c9a:	e7cd      	b.n	8008c38 <_dtoa_r+0x6d8>
 8008c9c:	9a08      	ldr	r2, [sp, #32]
 8008c9e:	2a00      	cmp	r2, #0
 8008ca0:	f000 80c4 	beq.w	8008e2c <_dtoa_r+0x8cc>
 8008ca4:	9a05      	ldr	r2, [sp, #20]
 8008ca6:	2a01      	cmp	r2, #1
 8008ca8:	f300 80a8 	bgt.w	8008dfc <_dtoa_r+0x89c>
 8008cac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008cae:	2a00      	cmp	r2, #0
 8008cb0:	f000 80a0 	beq.w	8008df4 <_dtoa_r+0x894>
 8008cb4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008cb8:	9e06      	ldr	r6, [sp, #24]
 8008cba:	4645      	mov	r5, r8
 8008cbc:	9a04      	ldr	r2, [sp, #16]
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	441a      	add	r2, r3
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	4498      	add	r8, r3
 8008cc6:	9204      	str	r2, [sp, #16]
 8008cc8:	f000 fc46 	bl	8009558 <__i2b>
 8008ccc:	4607      	mov	r7, r0
 8008cce:	2d00      	cmp	r5, #0
 8008cd0:	dd0b      	ble.n	8008cea <_dtoa_r+0x78a>
 8008cd2:	9b04      	ldr	r3, [sp, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	dd08      	ble.n	8008cea <_dtoa_r+0x78a>
 8008cd8:	42ab      	cmp	r3, r5
 8008cda:	9a04      	ldr	r2, [sp, #16]
 8008cdc:	bfa8      	it	ge
 8008cde:	462b      	movge	r3, r5
 8008ce0:	eba8 0803 	sub.w	r8, r8, r3
 8008ce4:	1aed      	subs	r5, r5, r3
 8008ce6:	1ad3      	subs	r3, r2, r3
 8008ce8:	9304      	str	r3, [sp, #16]
 8008cea:	9b06      	ldr	r3, [sp, #24]
 8008cec:	b1fb      	cbz	r3, 8008d2e <_dtoa_r+0x7ce>
 8008cee:	9b08      	ldr	r3, [sp, #32]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 809f 	beq.w	8008e34 <_dtoa_r+0x8d4>
 8008cf6:	2e00      	cmp	r6, #0
 8008cf8:	dd11      	ble.n	8008d1e <_dtoa_r+0x7be>
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	4632      	mov	r2, r6
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f000 fce6 	bl	80096d0 <__pow5mult>
 8008d04:	465a      	mov	r2, fp
 8008d06:	4601      	mov	r1, r0
 8008d08:	4607      	mov	r7, r0
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f000 fc3a 	bl	8009584 <__multiply>
 8008d10:	4659      	mov	r1, fp
 8008d12:	9007      	str	r0, [sp, #28]
 8008d14:	4620      	mov	r0, r4
 8008d16:	f000 fb63 	bl	80093e0 <_Bfree>
 8008d1a:	9b07      	ldr	r3, [sp, #28]
 8008d1c:	469b      	mov	fp, r3
 8008d1e:	9b06      	ldr	r3, [sp, #24]
 8008d20:	1b9a      	subs	r2, r3, r6
 8008d22:	d004      	beq.n	8008d2e <_dtoa_r+0x7ce>
 8008d24:	4659      	mov	r1, fp
 8008d26:	4620      	mov	r0, r4
 8008d28:	f000 fcd2 	bl	80096d0 <__pow5mult>
 8008d2c:	4683      	mov	fp, r0
 8008d2e:	2101      	movs	r1, #1
 8008d30:	4620      	mov	r0, r4
 8008d32:	f000 fc11 	bl	8009558 <__i2b>
 8008d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	4606      	mov	r6, r0
 8008d3c:	dd7c      	ble.n	8008e38 <_dtoa_r+0x8d8>
 8008d3e:	461a      	mov	r2, r3
 8008d40:	4601      	mov	r1, r0
 8008d42:	4620      	mov	r0, r4
 8008d44:	f000 fcc4 	bl	80096d0 <__pow5mult>
 8008d48:	9b05      	ldr	r3, [sp, #20]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	4606      	mov	r6, r0
 8008d4e:	dd76      	ble.n	8008e3e <_dtoa_r+0x8de>
 8008d50:	2300      	movs	r3, #0
 8008d52:	9306      	str	r3, [sp, #24]
 8008d54:	6933      	ldr	r3, [r6, #16]
 8008d56:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d5a:	6918      	ldr	r0, [r3, #16]
 8008d5c:	f000 fbac 	bl	80094b8 <__hi0bits>
 8008d60:	f1c0 0020 	rsb	r0, r0, #32
 8008d64:	9b04      	ldr	r3, [sp, #16]
 8008d66:	4418      	add	r0, r3
 8008d68:	f010 001f 	ands.w	r0, r0, #31
 8008d6c:	f000 8086 	beq.w	8008e7c <_dtoa_r+0x91c>
 8008d70:	f1c0 0320 	rsb	r3, r0, #32
 8008d74:	2b04      	cmp	r3, #4
 8008d76:	dd7f      	ble.n	8008e78 <_dtoa_r+0x918>
 8008d78:	f1c0 001c 	rsb	r0, r0, #28
 8008d7c:	9b04      	ldr	r3, [sp, #16]
 8008d7e:	4403      	add	r3, r0
 8008d80:	4480      	add	r8, r0
 8008d82:	4405      	add	r5, r0
 8008d84:	9304      	str	r3, [sp, #16]
 8008d86:	f1b8 0f00 	cmp.w	r8, #0
 8008d8a:	dd05      	ble.n	8008d98 <_dtoa_r+0x838>
 8008d8c:	4659      	mov	r1, fp
 8008d8e:	4642      	mov	r2, r8
 8008d90:	4620      	mov	r0, r4
 8008d92:	f000 fcf7 	bl	8009784 <__lshift>
 8008d96:	4683      	mov	fp, r0
 8008d98:	9b04      	ldr	r3, [sp, #16]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	dd05      	ble.n	8008daa <_dtoa_r+0x84a>
 8008d9e:	4631      	mov	r1, r6
 8008da0:	461a      	mov	r2, r3
 8008da2:	4620      	mov	r0, r4
 8008da4:	f000 fcee 	bl	8009784 <__lshift>
 8008da8:	4606      	mov	r6, r0
 8008daa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d069      	beq.n	8008e84 <_dtoa_r+0x924>
 8008db0:	4631      	mov	r1, r6
 8008db2:	4658      	mov	r0, fp
 8008db4:	f000 fd52 	bl	800985c <__mcmp>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	da63      	bge.n	8008e84 <_dtoa_r+0x924>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	4659      	mov	r1, fp
 8008dc0:	220a      	movs	r2, #10
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 fb2e 	bl	8009424 <__multadd>
 8008dc8:	9b08      	ldr	r3, [sp, #32]
 8008dca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dce:	4683      	mov	fp, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 818f 	beq.w	80090f4 <_dtoa_r+0xb94>
 8008dd6:	4639      	mov	r1, r7
 8008dd8:	2300      	movs	r3, #0
 8008dda:	220a      	movs	r2, #10
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f000 fb21 	bl	8009424 <__multadd>
 8008de2:	f1b9 0f00 	cmp.w	r9, #0
 8008de6:	4607      	mov	r7, r0
 8008de8:	f300 808e 	bgt.w	8008f08 <_dtoa_r+0x9a8>
 8008dec:	9b05      	ldr	r3, [sp, #20]
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	dc50      	bgt.n	8008e94 <_dtoa_r+0x934>
 8008df2:	e089      	b.n	8008f08 <_dtoa_r+0x9a8>
 8008df4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008df6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008dfa:	e75d      	b.n	8008cb8 <_dtoa_r+0x758>
 8008dfc:	9b01      	ldr	r3, [sp, #4]
 8008dfe:	1e5e      	subs	r6, r3, #1
 8008e00:	9b06      	ldr	r3, [sp, #24]
 8008e02:	42b3      	cmp	r3, r6
 8008e04:	bfbf      	itttt	lt
 8008e06:	9b06      	ldrlt	r3, [sp, #24]
 8008e08:	9606      	strlt	r6, [sp, #24]
 8008e0a:	1af2      	sublt	r2, r6, r3
 8008e0c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008e0e:	bfb6      	itet	lt
 8008e10:	189b      	addlt	r3, r3, r2
 8008e12:	1b9e      	subge	r6, r3, r6
 8008e14:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008e16:	9b01      	ldr	r3, [sp, #4]
 8008e18:	bfb8      	it	lt
 8008e1a:	2600      	movlt	r6, #0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	bfb5      	itete	lt
 8008e20:	eba8 0503 	sublt.w	r5, r8, r3
 8008e24:	9b01      	ldrge	r3, [sp, #4]
 8008e26:	2300      	movlt	r3, #0
 8008e28:	4645      	movge	r5, r8
 8008e2a:	e747      	b.n	8008cbc <_dtoa_r+0x75c>
 8008e2c:	9e06      	ldr	r6, [sp, #24]
 8008e2e:	9f08      	ldr	r7, [sp, #32]
 8008e30:	4645      	mov	r5, r8
 8008e32:	e74c      	b.n	8008cce <_dtoa_r+0x76e>
 8008e34:	9a06      	ldr	r2, [sp, #24]
 8008e36:	e775      	b.n	8008d24 <_dtoa_r+0x7c4>
 8008e38:	9b05      	ldr	r3, [sp, #20]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	dc18      	bgt.n	8008e70 <_dtoa_r+0x910>
 8008e3e:	9b02      	ldr	r3, [sp, #8]
 8008e40:	b9b3      	cbnz	r3, 8008e70 <_dtoa_r+0x910>
 8008e42:	9b03      	ldr	r3, [sp, #12]
 8008e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e48:	b9a3      	cbnz	r3, 8008e74 <_dtoa_r+0x914>
 8008e4a:	9b03      	ldr	r3, [sp, #12]
 8008e4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e50:	0d1b      	lsrs	r3, r3, #20
 8008e52:	051b      	lsls	r3, r3, #20
 8008e54:	b12b      	cbz	r3, 8008e62 <_dtoa_r+0x902>
 8008e56:	9b04      	ldr	r3, [sp, #16]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	9304      	str	r3, [sp, #16]
 8008e5c:	f108 0801 	add.w	r8, r8, #1
 8008e60:	2301      	movs	r3, #1
 8008e62:	9306      	str	r3, [sp, #24]
 8008e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f47f af74 	bne.w	8008d54 <_dtoa_r+0x7f4>
 8008e6c:	2001      	movs	r0, #1
 8008e6e:	e779      	b.n	8008d64 <_dtoa_r+0x804>
 8008e70:	2300      	movs	r3, #0
 8008e72:	e7f6      	b.n	8008e62 <_dtoa_r+0x902>
 8008e74:	9b02      	ldr	r3, [sp, #8]
 8008e76:	e7f4      	b.n	8008e62 <_dtoa_r+0x902>
 8008e78:	d085      	beq.n	8008d86 <_dtoa_r+0x826>
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	301c      	adds	r0, #28
 8008e7e:	e77d      	b.n	8008d7c <_dtoa_r+0x81c>
 8008e80:	40240000 	.word	0x40240000
 8008e84:	9b01      	ldr	r3, [sp, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	dc38      	bgt.n	8008efc <_dtoa_r+0x99c>
 8008e8a:	9b05      	ldr	r3, [sp, #20]
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	dd35      	ble.n	8008efc <_dtoa_r+0x99c>
 8008e90:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008e94:	f1b9 0f00 	cmp.w	r9, #0
 8008e98:	d10d      	bne.n	8008eb6 <_dtoa_r+0x956>
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	464b      	mov	r3, r9
 8008e9e:	2205      	movs	r2, #5
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 fabf 	bl	8009424 <__multadd>
 8008ea6:	4601      	mov	r1, r0
 8008ea8:	4606      	mov	r6, r0
 8008eaa:	4658      	mov	r0, fp
 8008eac:	f000 fcd6 	bl	800985c <__mcmp>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	f73f adbd 	bgt.w	8008a30 <_dtoa_r+0x4d0>
 8008eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eb8:	9d00      	ldr	r5, [sp, #0]
 8008eba:	ea6f 0a03 	mvn.w	sl, r3
 8008ebe:	f04f 0800 	mov.w	r8, #0
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f000 fa8b 	bl	80093e0 <_Bfree>
 8008eca:	2f00      	cmp	r7, #0
 8008ecc:	f43f aeb4 	beq.w	8008c38 <_dtoa_r+0x6d8>
 8008ed0:	f1b8 0f00 	cmp.w	r8, #0
 8008ed4:	d005      	beq.n	8008ee2 <_dtoa_r+0x982>
 8008ed6:	45b8      	cmp	r8, r7
 8008ed8:	d003      	beq.n	8008ee2 <_dtoa_r+0x982>
 8008eda:	4641      	mov	r1, r8
 8008edc:	4620      	mov	r0, r4
 8008ede:	f000 fa7f 	bl	80093e0 <_Bfree>
 8008ee2:	4639      	mov	r1, r7
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f000 fa7b 	bl	80093e0 <_Bfree>
 8008eea:	e6a5      	b.n	8008c38 <_dtoa_r+0x6d8>
 8008eec:	2600      	movs	r6, #0
 8008eee:	4637      	mov	r7, r6
 8008ef0:	e7e1      	b.n	8008eb6 <_dtoa_r+0x956>
 8008ef2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008ef4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008ef8:	4637      	mov	r7, r6
 8008efa:	e599      	b.n	8008a30 <_dtoa_r+0x4d0>
 8008efc:	9b08      	ldr	r3, [sp, #32]
 8008efe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f000 80fd 	beq.w	8009102 <_dtoa_r+0xba2>
 8008f08:	2d00      	cmp	r5, #0
 8008f0a:	dd05      	ble.n	8008f18 <_dtoa_r+0x9b8>
 8008f0c:	4639      	mov	r1, r7
 8008f0e:	462a      	mov	r2, r5
 8008f10:	4620      	mov	r0, r4
 8008f12:	f000 fc37 	bl	8009784 <__lshift>
 8008f16:	4607      	mov	r7, r0
 8008f18:	9b06      	ldr	r3, [sp, #24]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d05c      	beq.n	8008fd8 <_dtoa_r+0xa78>
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	4620      	mov	r0, r4
 8008f22:	f000 fa1d 	bl	8009360 <_Balloc>
 8008f26:	4605      	mov	r5, r0
 8008f28:	b928      	cbnz	r0, 8008f36 <_dtoa_r+0x9d6>
 8008f2a:	4b80      	ldr	r3, [pc, #512]	; (800912c <_dtoa_r+0xbcc>)
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f32:	f7ff bb2e 	b.w	8008592 <_dtoa_r+0x32>
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	3202      	adds	r2, #2
 8008f3a:	0092      	lsls	r2, r2, #2
 8008f3c:	f107 010c 	add.w	r1, r7, #12
 8008f40:	300c      	adds	r0, #12
 8008f42:	f000 f9ff 	bl	8009344 <memcpy>
 8008f46:	2201      	movs	r2, #1
 8008f48:	4629      	mov	r1, r5
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 fc1a 	bl	8009784 <__lshift>
 8008f50:	9b00      	ldr	r3, [sp, #0]
 8008f52:	3301      	adds	r3, #1
 8008f54:	9301      	str	r3, [sp, #4]
 8008f56:	9b00      	ldr	r3, [sp, #0]
 8008f58:	444b      	add	r3, r9
 8008f5a:	9307      	str	r3, [sp, #28]
 8008f5c:	9b02      	ldr	r3, [sp, #8]
 8008f5e:	f003 0301 	and.w	r3, r3, #1
 8008f62:	46b8      	mov	r8, r7
 8008f64:	9306      	str	r3, [sp, #24]
 8008f66:	4607      	mov	r7, r0
 8008f68:	9b01      	ldr	r3, [sp, #4]
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	4658      	mov	r0, fp
 8008f70:	9302      	str	r3, [sp, #8]
 8008f72:	f7ff fa69 	bl	8008448 <quorem>
 8008f76:	4603      	mov	r3, r0
 8008f78:	3330      	adds	r3, #48	; 0x30
 8008f7a:	9004      	str	r0, [sp, #16]
 8008f7c:	4641      	mov	r1, r8
 8008f7e:	4658      	mov	r0, fp
 8008f80:	9308      	str	r3, [sp, #32]
 8008f82:	f000 fc6b 	bl	800985c <__mcmp>
 8008f86:	463a      	mov	r2, r7
 8008f88:	4681      	mov	r9, r0
 8008f8a:	4631      	mov	r1, r6
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f000 fc81 	bl	8009894 <__mdiff>
 8008f92:	68c2      	ldr	r2, [r0, #12]
 8008f94:	9b08      	ldr	r3, [sp, #32]
 8008f96:	4605      	mov	r5, r0
 8008f98:	bb02      	cbnz	r2, 8008fdc <_dtoa_r+0xa7c>
 8008f9a:	4601      	mov	r1, r0
 8008f9c:	4658      	mov	r0, fp
 8008f9e:	f000 fc5d 	bl	800985c <__mcmp>
 8008fa2:	9b08      	ldr	r3, [sp, #32]
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	4629      	mov	r1, r5
 8008fa8:	4620      	mov	r0, r4
 8008faa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008fae:	f000 fa17 	bl	80093e0 <_Bfree>
 8008fb2:	9b05      	ldr	r3, [sp, #20]
 8008fb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fb6:	9d01      	ldr	r5, [sp, #4]
 8008fb8:	ea43 0102 	orr.w	r1, r3, r2
 8008fbc:	9b06      	ldr	r3, [sp, #24]
 8008fbe:	430b      	orrs	r3, r1
 8008fc0:	9b08      	ldr	r3, [sp, #32]
 8008fc2:	d10d      	bne.n	8008fe0 <_dtoa_r+0xa80>
 8008fc4:	2b39      	cmp	r3, #57	; 0x39
 8008fc6:	d029      	beq.n	800901c <_dtoa_r+0xabc>
 8008fc8:	f1b9 0f00 	cmp.w	r9, #0
 8008fcc:	dd01      	ble.n	8008fd2 <_dtoa_r+0xa72>
 8008fce:	9b04      	ldr	r3, [sp, #16]
 8008fd0:	3331      	adds	r3, #49	; 0x31
 8008fd2:	9a02      	ldr	r2, [sp, #8]
 8008fd4:	7013      	strb	r3, [r2, #0]
 8008fd6:	e774      	b.n	8008ec2 <_dtoa_r+0x962>
 8008fd8:	4638      	mov	r0, r7
 8008fda:	e7b9      	b.n	8008f50 <_dtoa_r+0x9f0>
 8008fdc:	2201      	movs	r2, #1
 8008fde:	e7e2      	b.n	8008fa6 <_dtoa_r+0xa46>
 8008fe0:	f1b9 0f00 	cmp.w	r9, #0
 8008fe4:	db06      	blt.n	8008ff4 <_dtoa_r+0xa94>
 8008fe6:	9905      	ldr	r1, [sp, #20]
 8008fe8:	ea41 0909 	orr.w	r9, r1, r9
 8008fec:	9906      	ldr	r1, [sp, #24]
 8008fee:	ea59 0101 	orrs.w	r1, r9, r1
 8008ff2:	d120      	bne.n	8009036 <_dtoa_r+0xad6>
 8008ff4:	2a00      	cmp	r2, #0
 8008ff6:	ddec      	ble.n	8008fd2 <_dtoa_r+0xa72>
 8008ff8:	4659      	mov	r1, fp
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	9301      	str	r3, [sp, #4]
 8009000:	f000 fbc0 	bl	8009784 <__lshift>
 8009004:	4631      	mov	r1, r6
 8009006:	4683      	mov	fp, r0
 8009008:	f000 fc28 	bl	800985c <__mcmp>
 800900c:	2800      	cmp	r0, #0
 800900e:	9b01      	ldr	r3, [sp, #4]
 8009010:	dc02      	bgt.n	8009018 <_dtoa_r+0xab8>
 8009012:	d1de      	bne.n	8008fd2 <_dtoa_r+0xa72>
 8009014:	07da      	lsls	r2, r3, #31
 8009016:	d5dc      	bpl.n	8008fd2 <_dtoa_r+0xa72>
 8009018:	2b39      	cmp	r3, #57	; 0x39
 800901a:	d1d8      	bne.n	8008fce <_dtoa_r+0xa6e>
 800901c:	9a02      	ldr	r2, [sp, #8]
 800901e:	2339      	movs	r3, #57	; 0x39
 8009020:	7013      	strb	r3, [r2, #0]
 8009022:	462b      	mov	r3, r5
 8009024:	461d      	mov	r5, r3
 8009026:	3b01      	subs	r3, #1
 8009028:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800902c:	2a39      	cmp	r2, #57	; 0x39
 800902e:	d050      	beq.n	80090d2 <_dtoa_r+0xb72>
 8009030:	3201      	adds	r2, #1
 8009032:	701a      	strb	r2, [r3, #0]
 8009034:	e745      	b.n	8008ec2 <_dtoa_r+0x962>
 8009036:	2a00      	cmp	r2, #0
 8009038:	dd03      	ble.n	8009042 <_dtoa_r+0xae2>
 800903a:	2b39      	cmp	r3, #57	; 0x39
 800903c:	d0ee      	beq.n	800901c <_dtoa_r+0xabc>
 800903e:	3301      	adds	r3, #1
 8009040:	e7c7      	b.n	8008fd2 <_dtoa_r+0xa72>
 8009042:	9a01      	ldr	r2, [sp, #4]
 8009044:	9907      	ldr	r1, [sp, #28]
 8009046:	f802 3c01 	strb.w	r3, [r2, #-1]
 800904a:	428a      	cmp	r2, r1
 800904c:	d02a      	beq.n	80090a4 <_dtoa_r+0xb44>
 800904e:	4659      	mov	r1, fp
 8009050:	2300      	movs	r3, #0
 8009052:	220a      	movs	r2, #10
 8009054:	4620      	mov	r0, r4
 8009056:	f000 f9e5 	bl	8009424 <__multadd>
 800905a:	45b8      	cmp	r8, r7
 800905c:	4683      	mov	fp, r0
 800905e:	f04f 0300 	mov.w	r3, #0
 8009062:	f04f 020a 	mov.w	r2, #10
 8009066:	4641      	mov	r1, r8
 8009068:	4620      	mov	r0, r4
 800906a:	d107      	bne.n	800907c <_dtoa_r+0xb1c>
 800906c:	f000 f9da 	bl	8009424 <__multadd>
 8009070:	4680      	mov	r8, r0
 8009072:	4607      	mov	r7, r0
 8009074:	9b01      	ldr	r3, [sp, #4]
 8009076:	3301      	adds	r3, #1
 8009078:	9301      	str	r3, [sp, #4]
 800907a:	e775      	b.n	8008f68 <_dtoa_r+0xa08>
 800907c:	f000 f9d2 	bl	8009424 <__multadd>
 8009080:	4639      	mov	r1, r7
 8009082:	4680      	mov	r8, r0
 8009084:	2300      	movs	r3, #0
 8009086:	220a      	movs	r2, #10
 8009088:	4620      	mov	r0, r4
 800908a:	f000 f9cb 	bl	8009424 <__multadd>
 800908e:	4607      	mov	r7, r0
 8009090:	e7f0      	b.n	8009074 <_dtoa_r+0xb14>
 8009092:	f1b9 0f00 	cmp.w	r9, #0
 8009096:	9a00      	ldr	r2, [sp, #0]
 8009098:	bfcc      	ite	gt
 800909a:	464d      	movgt	r5, r9
 800909c:	2501      	movle	r5, #1
 800909e:	4415      	add	r5, r2
 80090a0:	f04f 0800 	mov.w	r8, #0
 80090a4:	4659      	mov	r1, fp
 80090a6:	2201      	movs	r2, #1
 80090a8:	4620      	mov	r0, r4
 80090aa:	9301      	str	r3, [sp, #4]
 80090ac:	f000 fb6a 	bl	8009784 <__lshift>
 80090b0:	4631      	mov	r1, r6
 80090b2:	4683      	mov	fp, r0
 80090b4:	f000 fbd2 	bl	800985c <__mcmp>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	dcb2      	bgt.n	8009022 <_dtoa_r+0xac2>
 80090bc:	d102      	bne.n	80090c4 <_dtoa_r+0xb64>
 80090be:	9b01      	ldr	r3, [sp, #4]
 80090c0:	07db      	lsls	r3, r3, #31
 80090c2:	d4ae      	bmi.n	8009022 <_dtoa_r+0xac2>
 80090c4:	462b      	mov	r3, r5
 80090c6:	461d      	mov	r5, r3
 80090c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090cc:	2a30      	cmp	r2, #48	; 0x30
 80090ce:	d0fa      	beq.n	80090c6 <_dtoa_r+0xb66>
 80090d0:	e6f7      	b.n	8008ec2 <_dtoa_r+0x962>
 80090d2:	9a00      	ldr	r2, [sp, #0]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d1a5      	bne.n	8009024 <_dtoa_r+0xac4>
 80090d8:	f10a 0a01 	add.w	sl, sl, #1
 80090dc:	2331      	movs	r3, #49	; 0x31
 80090de:	e779      	b.n	8008fd4 <_dtoa_r+0xa74>
 80090e0:	4b13      	ldr	r3, [pc, #76]	; (8009130 <_dtoa_r+0xbd0>)
 80090e2:	f7ff baaf 	b.w	8008644 <_dtoa_r+0xe4>
 80090e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f47f aa86 	bne.w	80085fa <_dtoa_r+0x9a>
 80090ee:	4b11      	ldr	r3, [pc, #68]	; (8009134 <_dtoa_r+0xbd4>)
 80090f0:	f7ff baa8 	b.w	8008644 <_dtoa_r+0xe4>
 80090f4:	f1b9 0f00 	cmp.w	r9, #0
 80090f8:	dc03      	bgt.n	8009102 <_dtoa_r+0xba2>
 80090fa:	9b05      	ldr	r3, [sp, #20]
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	f73f aec9 	bgt.w	8008e94 <_dtoa_r+0x934>
 8009102:	9d00      	ldr	r5, [sp, #0]
 8009104:	4631      	mov	r1, r6
 8009106:	4658      	mov	r0, fp
 8009108:	f7ff f99e 	bl	8008448 <quorem>
 800910c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009110:	f805 3b01 	strb.w	r3, [r5], #1
 8009114:	9a00      	ldr	r2, [sp, #0]
 8009116:	1aaa      	subs	r2, r5, r2
 8009118:	4591      	cmp	r9, r2
 800911a:	ddba      	ble.n	8009092 <_dtoa_r+0xb32>
 800911c:	4659      	mov	r1, fp
 800911e:	2300      	movs	r3, #0
 8009120:	220a      	movs	r2, #10
 8009122:	4620      	mov	r0, r4
 8009124:	f000 f97e 	bl	8009424 <__multadd>
 8009128:	4683      	mov	fp, r0
 800912a:	e7eb      	b.n	8009104 <_dtoa_r+0xba4>
 800912c:	08017d8b 	.word	0x08017d8b
 8009130:	08017ce4 	.word	0x08017ce4
 8009134:	08017d08 	.word	0x08017d08

08009138 <std>:
 8009138:	2300      	movs	r3, #0
 800913a:	b510      	push	{r4, lr}
 800913c:	4604      	mov	r4, r0
 800913e:	e9c0 3300 	strd	r3, r3, [r0]
 8009142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009146:	6083      	str	r3, [r0, #8]
 8009148:	8181      	strh	r1, [r0, #12]
 800914a:	6643      	str	r3, [r0, #100]	; 0x64
 800914c:	81c2      	strh	r2, [r0, #14]
 800914e:	6183      	str	r3, [r0, #24]
 8009150:	4619      	mov	r1, r3
 8009152:	2208      	movs	r2, #8
 8009154:	305c      	adds	r0, #92	; 0x5c
 8009156:	f7fe fccd 	bl	8007af4 <memset>
 800915a:	4b05      	ldr	r3, [pc, #20]	; (8009170 <std+0x38>)
 800915c:	6263      	str	r3, [r4, #36]	; 0x24
 800915e:	4b05      	ldr	r3, [pc, #20]	; (8009174 <std+0x3c>)
 8009160:	62a3      	str	r3, [r4, #40]	; 0x28
 8009162:	4b05      	ldr	r3, [pc, #20]	; (8009178 <std+0x40>)
 8009164:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009166:	4b05      	ldr	r3, [pc, #20]	; (800917c <std+0x44>)
 8009168:	6224      	str	r4, [r4, #32]
 800916a:	6323      	str	r3, [r4, #48]	; 0x30
 800916c:	bd10      	pop	{r4, pc}
 800916e:	bf00      	nop
 8009170:	0800a15d 	.word	0x0800a15d
 8009174:	0800a17f 	.word	0x0800a17f
 8009178:	0800a1b7 	.word	0x0800a1b7
 800917c:	0800a1db 	.word	0x0800a1db

08009180 <_cleanup_r>:
 8009180:	4901      	ldr	r1, [pc, #4]	; (8009188 <_cleanup_r+0x8>)
 8009182:	f000 b8af 	b.w	80092e4 <_fwalk_reent>
 8009186:	bf00      	nop
 8009188:	0800a4f1 	.word	0x0800a4f1

0800918c <__sfmoreglue>:
 800918c:	b570      	push	{r4, r5, r6, lr}
 800918e:	1e4a      	subs	r2, r1, #1
 8009190:	2568      	movs	r5, #104	; 0x68
 8009192:	4355      	muls	r5, r2
 8009194:	460e      	mov	r6, r1
 8009196:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800919a:	f000 fcbf 	bl	8009b1c <_malloc_r>
 800919e:	4604      	mov	r4, r0
 80091a0:	b140      	cbz	r0, 80091b4 <__sfmoreglue+0x28>
 80091a2:	2100      	movs	r1, #0
 80091a4:	e9c0 1600 	strd	r1, r6, [r0]
 80091a8:	300c      	adds	r0, #12
 80091aa:	60a0      	str	r0, [r4, #8]
 80091ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091b0:	f7fe fca0 	bl	8007af4 <memset>
 80091b4:	4620      	mov	r0, r4
 80091b6:	bd70      	pop	{r4, r5, r6, pc}

080091b8 <__sfp_lock_acquire>:
 80091b8:	4801      	ldr	r0, [pc, #4]	; (80091c0 <__sfp_lock_acquire+0x8>)
 80091ba:	f000 b8b8 	b.w	800932e <__retarget_lock_acquire_recursive>
 80091be:	bf00      	nop
 80091c0:	200004bc 	.word	0x200004bc

080091c4 <__sfp_lock_release>:
 80091c4:	4801      	ldr	r0, [pc, #4]	; (80091cc <__sfp_lock_release+0x8>)
 80091c6:	f000 b8b3 	b.w	8009330 <__retarget_lock_release_recursive>
 80091ca:	bf00      	nop
 80091cc:	200004bc 	.word	0x200004bc

080091d0 <__sinit_lock_acquire>:
 80091d0:	4801      	ldr	r0, [pc, #4]	; (80091d8 <__sinit_lock_acquire+0x8>)
 80091d2:	f000 b8ac 	b.w	800932e <__retarget_lock_acquire_recursive>
 80091d6:	bf00      	nop
 80091d8:	200004b7 	.word	0x200004b7

080091dc <__sinit_lock_release>:
 80091dc:	4801      	ldr	r0, [pc, #4]	; (80091e4 <__sinit_lock_release+0x8>)
 80091de:	f000 b8a7 	b.w	8009330 <__retarget_lock_release_recursive>
 80091e2:	bf00      	nop
 80091e4:	200004b7 	.word	0x200004b7

080091e8 <__sinit>:
 80091e8:	b510      	push	{r4, lr}
 80091ea:	4604      	mov	r4, r0
 80091ec:	f7ff fff0 	bl	80091d0 <__sinit_lock_acquire>
 80091f0:	69a3      	ldr	r3, [r4, #24]
 80091f2:	b11b      	cbz	r3, 80091fc <__sinit+0x14>
 80091f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f8:	f7ff bff0 	b.w	80091dc <__sinit_lock_release>
 80091fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009200:	6523      	str	r3, [r4, #80]	; 0x50
 8009202:	4b13      	ldr	r3, [pc, #76]	; (8009250 <__sinit+0x68>)
 8009204:	4a13      	ldr	r2, [pc, #76]	; (8009254 <__sinit+0x6c>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	62a2      	str	r2, [r4, #40]	; 0x28
 800920a:	42a3      	cmp	r3, r4
 800920c:	bf04      	itt	eq
 800920e:	2301      	moveq	r3, #1
 8009210:	61a3      	streq	r3, [r4, #24]
 8009212:	4620      	mov	r0, r4
 8009214:	f000 f820 	bl	8009258 <__sfp>
 8009218:	6060      	str	r0, [r4, #4]
 800921a:	4620      	mov	r0, r4
 800921c:	f000 f81c 	bl	8009258 <__sfp>
 8009220:	60a0      	str	r0, [r4, #8]
 8009222:	4620      	mov	r0, r4
 8009224:	f000 f818 	bl	8009258 <__sfp>
 8009228:	2200      	movs	r2, #0
 800922a:	60e0      	str	r0, [r4, #12]
 800922c:	2104      	movs	r1, #4
 800922e:	6860      	ldr	r0, [r4, #4]
 8009230:	f7ff ff82 	bl	8009138 <std>
 8009234:	68a0      	ldr	r0, [r4, #8]
 8009236:	2201      	movs	r2, #1
 8009238:	2109      	movs	r1, #9
 800923a:	f7ff ff7d 	bl	8009138 <std>
 800923e:	68e0      	ldr	r0, [r4, #12]
 8009240:	2202      	movs	r2, #2
 8009242:	2112      	movs	r1, #18
 8009244:	f7ff ff78 	bl	8009138 <std>
 8009248:	2301      	movs	r3, #1
 800924a:	61a3      	str	r3, [r4, #24]
 800924c:	e7d2      	b.n	80091f4 <__sinit+0xc>
 800924e:	bf00      	nop
 8009250:	08017cd0 	.word	0x08017cd0
 8009254:	08009181 	.word	0x08009181

08009258 <__sfp>:
 8009258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925a:	4607      	mov	r7, r0
 800925c:	f7ff ffac 	bl	80091b8 <__sfp_lock_acquire>
 8009260:	4b1e      	ldr	r3, [pc, #120]	; (80092dc <__sfp+0x84>)
 8009262:	681e      	ldr	r6, [r3, #0]
 8009264:	69b3      	ldr	r3, [r6, #24]
 8009266:	b913      	cbnz	r3, 800926e <__sfp+0x16>
 8009268:	4630      	mov	r0, r6
 800926a:	f7ff ffbd 	bl	80091e8 <__sinit>
 800926e:	3648      	adds	r6, #72	; 0x48
 8009270:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009274:	3b01      	subs	r3, #1
 8009276:	d503      	bpl.n	8009280 <__sfp+0x28>
 8009278:	6833      	ldr	r3, [r6, #0]
 800927a:	b30b      	cbz	r3, 80092c0 <__sfp+0x68>
 800927c:	6836      	ldr	r6, [r6, #0]
 800927e:	e7f7      	b.n	8009270 <__sfp+0x18>
 8009280:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009284:	b9d5      	cbnz	r5, 80092bc <__sfp+0x64>
 8009286:	4b16      	ldr	r3, [pc, #88]	; (80092e0 <__sfp+0x88>)
 8009288:	60e3      	str	r3, [r4, #12]
 800928a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800928e:	6665      	str	r5, [r4, #100]	; 0x64
 8009290:	f000 f84c 	bl	800932c <__retarget_lock_init_recursive>
 8009294:	f7ff ff96 	bl	80091c4 <__sfp_lock_release>
 8009298:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800929c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092a0:	6025      	str	r5, [r4, #0]
 80092a2:	61a5      	str	r5, [r4, #24]
 80092a4:	2208      	movs	r2, #8
 80092a6:	4629      	mov	r1, r5
 80092a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092ac:	f7fe fc22 	bl	8007af4 <memset>
 80092b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092b8:	4620      	mov	r0, r4
 80092ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092bc:	3468      	adds	r4, #104	; 0x68
 80092be:	e7d9      	b.n	8009274 <__sfp+0x1c>
 80092c0:	2104      	movs	r1, #4
 80092c2:	4638      	mov	r0, r7
 80092c4:	f7ff ff62 	bl	800918c <__sfmoreglue>
 80092c8:	4604      	mov	r4, r0
 80092ca:	6030      	str	r0, [r6, #0]
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d1d5      	bne.n	800927c <__sfp+0x24>
 80092d0:	f7ff ff78 	bl	80091c4 <__sfp_lock_release>
 80092d4:	230c      	movs	r3, #12
 80092d6:	603b      	str	r3, [r7, #0]
 80092d8:	e7ee      	b.n	80092b8 <__sfp+0x60>
 80092da:	bf00      	nop
 80092dc:	08017cd0 	.word	0x08017cd0
 80092e0:	ffff0001 	.word	0xffff0001

080092e4 <_fwalk_reent>:
 80092e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092e8:	4606      	mov	r6, r0
 80092ea:	4688      	mov	r8, r1
 80092ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092f0:	2700      	movs	r7, #0
 80092f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092f6:	f1b9 0901 	subs.w	r9, r9, #1
 80092fa:	d505      	bpl.n	8009308 <_fwalk_reent+0x24>
 80092fc:	6824      	ldr	r4, [r4, #0]
 80092fe:	2c00      	cmp	r4, #0
 8009300:	d1f7      	bne.n	80092f2 <_fwalk_reent+0xe>
 8009302:	4638      	mov	r0, r7
 8009304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009308:	89ab      	ldrh	r3, [r5, #12]
 800930a:	2b01      	cmp	r3, #1
 800930c:	d907      	bls.n	800931e <_fwalk_reent+0x3a>
 800930e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009312:	3301      	adds	r3, #1
 8009314:	d003      	beq.n	800931e <_fwalk_reent+0x3a>
 8009316:	4629      	mov	r1, r5
 8009318:	4630      	mov	r0, r6
 800931a:	47c0      	blx	r8
 800931c:	4307      	orrs	r7, r0
 800931e:	3568      	adds	r5, #104	; 0x68
 8009320:	e7e9      	b.n	80092f6 <_fwalk_reent+0x12>
	...

08009324 <_localeconv_r>:
 8009324:	4800      	ldr	r0, [pc, #0]	; (8009328 <_localeconv_r+0x4>)
 8009326:	4770      	bx	lr
 8009328:	200001f8 	.word	0x200001f8

0800932c <__retarget_lock_init_recursive>:
 800932c:	4770      	bx	lr

0800932e <__retarget_lock_acquire_recursive>:
 800932e:	4770      	bx	lr

08009330 <__retarget_lock_release_recursive>:
 8009330:	4770      	bx	lr
	...

08009334 <malloc>:
 8009334:	4b02      	ldr	r3, [pc, #8]	; (8009340 <malloc+0xc>)
 8009336:	4601      	mov	r1, r0
 8009338:	6818      	ldr	r0, [r3, #0]
 800933a:	f000 bbef 	b.w	8009b1c <_malloc_r>
 800933e:	bf00      	nop
 8009340:	200000a4 	.word	0x200000a4

08009344 <memcpy>:
 8009344:	440a      	add	r2, r1
 8009346:	4291      	cmp	r1, r2
 8009348:	f100 33ff 	add.w	r3, r0, #4294967295
 800934c:	d100      	bne.n	8009350 <memcpy+0xc>
 800934e:	4770      	bx	lr
 8009350:	b510      	push	{r4, lr}
 8009352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800935a:	4291      	cmp	r1, r2
 800935c:	d1f9      	bne.n	8009352 <memcpy+0xe>
 800935e:	bd10      	pop	{r4, pc}

08009360 <_Balloc>:
 8009360:	b570      	push	{r4, r5, r6, lr}
 8009362:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009364:	4604      	mov	r4, r0
 8009366:	460d      	mov	r5, r1
 8009368:	b976      	cbnz	r6, 8009388 <_Balloc+0x28>
 800936a:	2010      	movs	r0, #16
 800936c:	f7ff ffe2 	bl	8009334 <malloc>
 8009370:	4602      	mov	r2, r0
 8009372:	6260      	str	r0, [r4, #36]	; 0x24
 8009374:	b920      	cbnz	r0, 8009380 <_Balloc+0x20>
 8009376:	4b18      	ldr	r3, [pc, #96]	; (80093d8 <_Balloc+0x78>)
 8009378:	4818      	ldr	r0, [pc, #96]	; (80093dc <_Balloc+0x7c>)
 800937a:	2166      	movs	r1, #102	; 0x66
 800937c:	f001 f804 	bl	800a388 <__assert_func>
 8009380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009384:	6006      	str	r6, [r0, #0]
 8009386:	60c6      	str	r6, [r0, #12]
 8009388:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800938a:	68f3      	ldr	r3, [r6, #12]
 800938c:	b183      	cbz	r3, 80093b0 <_Balloc+0x50>
 800938e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009396:	b9b8      	cbnz	r0, 80093c8 <_Balloc+0x68>
 8009398:	2101      	movs	r1, #1
 800939a:	fa01 f605 	lsl.w	r6, r1, r5
 800939e:	1d72      	adds	r2, r6, #5
 80093a0:	0092      	lsls	r2, r2, #2
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 fb5a 	bl	8009a5c <_calloc_r>
 80093a8:	b160      	cbz	r0, 80093c4 <_Balloc+0x64>
 80093aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093ae:	e00e      	b.n	80093ce <_Balloc+0x6e>
 80093b0:	2221      	movs	r2, #33	; 0x21
 80093b2:	2104      	movs	r1, #4
 80093b4:	4620      	mov	r0, r4
 80093b6:	f000 fb51 	bl	8009a5c <_calloc_r>
 80093ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093bc:	60f0      	str	r0, [r6, #12]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1e4      	bne.n	800938e <_Balloc+0x2e>
 80093c4:	2000      	movs	r0, #0
 80093c6:	bd70      	pop	{r4, r5, r6, pc}
 80093c8:	6802      	ldr	r2, [r0, #0]
 80093ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093ce:	2300      	movs	r3, #0
 80093d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093d4:	e7f7      	b.n	80093c6 <_Balloc+0x66>
 80093d6:	bf00      	nop
 80093d8:	08017d15 	.word	0x08017d15
 80093dc:	08017dfc 	.word	0x08017dfc

080093e0 <_Bfree>:
 80093e0:	b570      	push	{r4, r5, r6, lr}
 80093e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093e4:	4605      	mov	r5, r0
 80093e6:	460c      	mov	r4, r1
 80093e8:	b976      	cbnz	r6, 8009408 <_Bfree+0x28>
 80093ea:	2010      	movs	r0, #16
 80093ec:	f7ff ffa2 	bl	8009334 <malloc>
 80093f0:	4602      	mov	r2, r0
 80093f2:	6268      	str	r0, [r5, #36]	; 0x24
 80093f4:	b920      	cbnz	r0, 8009400 <_Bfree+0x20>
 80093f6:	4b09      	ldr	r3, [pc, #36]	; (800941c <_Bfree+0x3c>)
 80093f8:	4809      	ldr	r0, [pc, #36]	; (8009420 <_Bfree+0x40>)
 80093fa:	218a      	movs	r1, #138	; 0x8a
 80093fc:	f000 ffc4 	bl	800a388 <__assert_func>
 8009400:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009404:	6006      	str	r6, [r0, #0]
 8009406:	60c6      	str	r6, [r0, #12]
 8009408:	b13c      	cbz	r4, 800941a <_Bfree+0x3a>
 800940a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800940c:	6862      	ldr	r2, [r4, #4]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009414:	6021      	str	r1, [r4, #0]
 8009416:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800941a:	bd70      	pop	{r4, r5, r6, pc}
 800941c:	08017d15 	.word	0x08017d15
 8009420:	08017dfc 	.word	0x08017dfc

08009424 <__multadd>:
 8009424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009428:	690e      	ldr	r6, [r1, #16]
 800942a:	4607      	mov	r7, r0
 800942c:	4698      	mov	r8, r3
 800942e:	460c      	mov	r4, r1
 8009430:	f101 0014 	add.w	r0, r1, #20
 8009434:	2300      	movs	r3, #0
 8009436:	6805      	ldr	r5, [r0, #0]
 8009438:	b2a9      	uxth	r1, r5
 800943a:	fb02 8101 	mla	r1, r2, r1, r8
 800943e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009442:	0c2d      	lsrs	r5, r5, #16
 8009444:	fb02 c505 	mla	r5, r2, r5, ip
 8009448:	b289      	uxth	r1, r1
 800944a:	3301      	adds	r3, #1
 800944c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009450:	429e      	cmp	r6, r3
 8009452:	f840 1b04 	str.w	r1, [r0], #4
 8009456:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800945a:	dcec      	bgt.n	8009436 <__multadd+0x12>
 800945c:	f1b8 0f00 	cmp.w	r8, #0
 8009460:	d022      	beq.n	80094a8 <__multadd+0x84>
 8009462:	68a3      	ldr	r3, [r4, #8]
 8009464:	42b3      	cmp	r3, r6
 8009466:	dc19      	bgt.n	800949c <__multadd+0x78>
 8009468:	6861      	ldr	r1, [r4, #4]
 800946a:	4638      	mov	r0, r7
 800946c:	3101      	adds	r1, #1
 800946e:	f7ff ff77 	bl	8009360 <_Balloc>
 8009472:	4605      	mov	r5, r0
 8009474:	b928      	cbnz	r0, 8009482 <__multadd+0x5e>
 8009476:	4602      	mov	r2, r0
 8009478:	4b0d      	ldr	r3, [pc, #52]	; (80094b0 <__multadd+0x8c>)
 800947a:	480e      	ldr	r0, [pc, #56]	; (80094b4 <__multadd+0x90>)
 800947c:	21b5      	movs	r1, #181	; 0xb5
 800947e:	f000 ff83 	bl	800a388 <__assert_func>
 8009482:	6922      	ldr	r2, [r4, #16]
 8009484:	3202      	adds	r2, #2
 8009486:	f104 010c 	add.w	r1, r4, #12
 800948a:	0092      	lsls	r2, r2, #2
 800948c:	300c      	adds	r0, #12
 800948e:	f7ff ff59 	bl	8009344 <memcpy>
 8009492:	4621      	mov	r1, r4
 8009494:	4638      	mov	r0, r7
 8009496:	f7ff ffa3 	bl	80093e0 <_Bfree>
 800949a:	462c      	mov	r4, r5
 800949c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80094a0:	3601      	adds	r6, #1
 80094a2:	f8c3 8014 	str.w	r8, [r3, #20]
 80094a6:	6126      	str	r6, [r4, #16]
 80094a8:	4620      	mov	r0, r4
 80094aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094ae:	bf00      	nop
 80094b0:	08017d8b 	.word	0x08017d8b
 80094b4:	08017dfc 	.word	0x08017dfc

080094b8 <__hi0bits>:
 80094b8:	0c03      	lsrs	r3, r0, #16
 80094ba:	041b      	lsls	r3, r3, #16
 80094bc:	b9d3      	cbnz	r3, 80094f4 <__hi0bits+0x3c>
 80094be:	0400      	lsls	r0, r0, #16
 80094c0:	2310      	movs	r3, #16
 80094c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80094c6:	bf04      	itt	eq
 80094c8:	0200      	lsleq	r0, r0, #8
 80094ca:	3308      	addeq	r3, #8
 80094cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80094d0:	bf04      	itt	eq
 80094d2:	0100      	lsleq	r0, r0, #4
 80094d4:	3304      	addeq	r3, #4
 80094d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094da:	bf04      	itt	eq
 80094dc:	0080      	lsleq	r0, r0, #2
 80094de:	3302      	addeq	r3, #2
 80094e0:	2800      	cmp	r0, #0
 80094e2:	db05      	blt.n	80094f0 <__hi0bits+0x38>
 80094e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094e8:	f103 0301 	add.w	r3, r3, #1
 80094ec:	bf08      	it	eq
 80094ee:	2320      	moveq	r3, #32
 80094f0:	4618      	mov	r0, r3
 80094f2:	4770      	bx	lr
 80094f4:	2300      	movs	r3, #0
 80094f6:	e7e4      	b.n	80094c2 <__hi0bits+0xa>

080094f8 <__lo0bits>:
 80094f8:	6803      	ldr	r3, [r0, #0]
 80094fa:	f013 0207 	ands.w	r2, r3, #7
 80094fe:	4601      	mov	r1, r0
 8009500:	d00b      	beq.n	800951a <__lo0bits+0x22>
 8009502:	07da      	lsls	r2, r3, #31
 8009504:	d424      	bmi.n	8009550 <__lo0bits+0x58>
 8009506:	0798      	lsls	r0, r3, #30
 8009508:	bf49      	itett	mi
 800950a:	085b      	lsrmi	r3, r3, #1
 800950c:	089b      	lsrpl	r3, r3, #2
 800950e:	2001      	movmi	r0, #1
 8009510:	600b      	strmi	r3, [r1, #0]
 8009512:	bf5c      	itt	pl
 8009514:	600b      	strpl	r3, [r1, #0]
 8009516:	2002      	movpl	r0, #2
 8009518:	4770      	bx	lr
 800951a:	b298      	uxth	r0, r3
 800951c:	b9b0      	cbnz	r0, 800954c <__lo0bits+0x54>
 800951e:	0c1b      	lsrs	r3, r3, #16
 8009520:	2010      	movs	r0, #16
 8009522:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009526:	bf04      	itt	eq
 8009528:	0a1b      	lsreq	r3, r3, #8
 800952a:	3008      	addeq	r0, #8
 800952c:	071a      	lsls	r2, r3, #28
 800952e:	bf04      	itt	eq
 8009530:	091b      	lsreq	r3, r3, #4
 8009532:	3004      	addeq	r0, #4
 8009534:	079a      	lsls	r2, r3, #30
 8009536:	bf04      	itt	eq
 8009538:	089b      	lsreq	r3, r3, #2
 800953a:	3002      	addeq	r0, #2
 800953c:	07da      	lsls	r2, r3, #31
 800953e:	d403      	bmi.n	8009548 <__lo0bits+0x50>
 8009540:	085b      	lsrs	r3, r3, #1
 8009542:	f100 0001 	add.w	r0, r0, #1
 8009546:	d005      	beq.n	8009554 <__lo0bits+0x5c>
 8009548:	600b      	str	r3, [r1, #0]
 800954a:	4770      	bx	lr
 800954c:	4610      	mov	r0, r2
 800954e:	e7e8      	b.n	8009522 <__lo0bits+0x2a>
 8009550:	2000      	movs	r0, #0
 8009552:	4770      	bx	lr
 8009554:	2020      	movs	r0, #32
 8009556:	4770      	bx	lr

08009558 <__i2b>:
 8009558:	b510      	push	{r4, lr}
 800955a:	460c      	mov	r4, r1
 800955c:	2101      	movs	r1, #1
 800955e:	f7ff feff 	bl	8009360 <_Balloc>
 8009562:	4602      	mov	r2, r0
 8009564:	b928      	cbnz	r0, 8009572 <__i2b+0x1a>
 8009566:	4b05      	ldr	r3, [pc, #20]	; (800957c <__i2b+0x24>)
 8009568:	4805      	ldr	r0, [pc, #20]	; (8009580 <__i2b+0x28>)
 800956a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800956e:	f000 ff0b 	bl	800a388 <__assert_func>
 8009572:	2301      	movs	r3, #1
 8009574:	6144      	str	r4, [r0, #20]
 8009576:	6103      	str	r3, [r0, #16]
 8009578:	bd10      	pop	{r4, pc}
 800957a:	bf00      	nop
 800957c:	08017d8b 	.word	0x08017d8b
 8009580:	08017dfc 	.word	0x08017dfc

08009584 <__multiply>:
 8009584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009588:	4614      	mov	r4, r2
 800958a:	690a      	ldr	r2, [r1, #16]
 800958c:	6923      	ldr	r3, [r4, #16]
 800958e:	429a      	cmp	r2, r3
 8009590:	bfb8      	it	lt
 8009592:	460b      	movlt	r3, r1
 8009594:	460d      	mov	r5, r1
 8009596:	bfbc      	itt	lt
 8009598:	4625      	movlt	r5, r4
 800959a:	461c      	movlt	r4, r3
 800959c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80095a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80095a4:	68ab      	ldr	r3, [r5, #8]
 80095a6:	6869      	ldr	r1, [r5, #4]
 80095a8:	eb0a 0709 	add.w	r7, sl, r9
 80095ac:	42bb      	cmp	r3, r7
 80095ae:	b085      	sub	sp, #20
 80095b0:	bfb8      	it	lt
 80095b2:	3101      	addlt	r1, #1
 80095b4:	f7ff fed4 	bl	8009360 <_Balloc>
 80095b8:	b930      	cbnz	r0, 80095c8 <__multiply+0x44>
 80095ba:	4602      	mov	r2, r0
 80095bc:	4b42      	ldr	r3, [pc, #264]	; (80096c8 <__multiply+0x144>)
 80095be:	4843      	ldr	r0, [pc, #268]	; (80096cc <__multiply+0x148>)
 80095c0:	f240 115d 	movw	r1, #349	; 0x15d
 80095c4:	f000 fee0 	bl	800a388 <__assert_func>
 80095c8:	f100 0614 	add.w	r6, r0, #20
 80095cc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80095d0:	4633      	mov	r3, r6
 80095d2:	2200      	movs	r2, #0
 80095d4:	4543      	cmp	r3, r8
 80095d6:	d31e      	bcc.n	8009616 <__multiply+0x92>
 80095d8:	f105 0c14 	add.w	ip, r5, #20
 80095dc:	f104 0314 	add.w	r3, r4, #20
 80095e0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80095e4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80095e8:	9202      	str	r2, [sp, #8]
 80095ea:	ebac 0205 	sub.w	r2, ip, r5
 80095ee:	3a15      	subs	r2, #21
 80095f0:	f022 0203 	bic.w	r2, r2, #3
 80095f4:	3204      	adds	r2, #4
 80095f6:	f105 0115 	add.w	r1, r5, #21
 80095fa:	458c      	cmp	ip, r1
 80095fc:	bf38      	it	cc
 80095fe:	2204      	movcc	r2, #4
 8009600:	9201      	str	r2, [sp, #4]
 8009602:	9a02      	ldr	r2, [sp, #8]
 8009604:	9303      	str	r3, [sp, #12]
 8009606:	429a      	cmp	r2, r3
 8009608:	d808      	bhi.n	800961c <__multiply+0x98>
 800960a:	2f00      	cmp	r7, #0
 800960c:	dc55      	bgt.n	80096ba <__multiply+0x136>
 800960e:	6107      	str	r7, [r0, #16]
 8009610:	b005      	add	sp, #20
 8009612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009616:	f843 2b04 	str.w	r2, [r3], #4
 800961a:	e7db      	b.n	80095d4 <__multiply+0x50>
 800961c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009620:	f1ba 0f00 	cmp.w	sl, #0
 8009624:	d020      	beq.n	8009668 <__multiply+0xe4>
 8009626:	f105 0e14 	add.w	lr, r5, #20
 800962a:	46b1      	mov	r9, r6
 800962c:	2200      	movs	r2, #0
 800962e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009632:	f8d9 b000 	ldr.w	fp, [r9]
 8009636:	b2a1      	uxth	r1, r4
 8009638:	fa1f fb8b 	uxth.w	fp, fp
 800963c:	fb0a b101 	mla	r1, sl, r1, fp
 8009640:	4411      	add	r1, r2
 8009642:	f8d9 2000 	ldr.w	r2, [r9]
 8009646:	0c24      	lsrs	r4, r4, #16
 8009648:	0c12      	lsrs	r2, r2, #16
 800964a:	fb0a 2404 	mla	r4, sl, r4, r2
 800964e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009652:	b289      	uxth	r1, r1
 8009654:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009658:	45f4      	cmp	ip, lr
 800965a:	f849 1b04 	str.w	r1, [r9], #4
 800965e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009662:	d8e4      	bhi.n	800962e <__multiply+0xaa>
 8009664:	9901      	ldr	r1, [sp, #4]
 8009666:	5072      	str	r2, [r6, r1]
 8009668:	9a03      	ldr	r2, [sp, #12]
 800966a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800966e:	3304      	adds	r3, #4
 8009670:	f1b9 0f00 	cmp.w	r9, #0
 8009674:	d01f      	beq.n	80096b6 <__multiply+0x132>
 8009676:	6834      	ldr	r4, [r6, #0]
 8009678:	f105 0114 	add.w	r1, r5, #20
 800967c:	46b6      	mov	lr, r6
 800967e:	f04f 0a00 	mov.w	sl, #0
 8009682:	880a      	ldrh	r2, [r1, #0]
 8009684:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009688:	fb09 b202 	mla	r2, r9, r2, fp
 800968c:	4492      	add	sl, r2
 800968e:	b2a4      	uxth	r4, r4
 8009690:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009694:	f84e 4b04 	str.w	r4, [lr], #4
 8009698:	f851 4b04 	ldr.w	r4, [r1], #4
 800969c:	f8be 2000 	ldrh.w	r2, [lr]
 80096a0:	0c24      	lsrs	r4, r4, #16
 80096a2:	fb09 2404 	mla	r4, r9, r4, r2
 80096a6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80096aa:	458c      	cmp	ip, r1
 80096ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80096b0:	d8e7      	bhi.n	8009682 <__multiply+0xfe>
 80096b2:	9a01      	ldr	r2, [sp, #4]
 80096b4:	50b4      	str	r4, [r6, r2]
 80096b6:	3604      	adds	r6, #4
 80096b8:	e7a3      	b.n	8009602 <__multiply+0x7e>
 80096ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1a5      	bne.n	800960e <__multiply+0x8a>
 80096c2:	3f01      	subs	r7, #1
 80096c4:	e7a1      	b.n	800960a <__multiply+0x86>
 80096c6:	bf00      	nop
 80096c8:	08017d8b 	.word	0x08017d8b
 80096cc:	08017dfc 	.word	0x08017dfc

080096d0 <__pow5mult>:
 80096d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096d4:	4615      	mov	r5, r2
 80096d6:	f012 0203 	ands.w	r2, r2, #3
 80096da:	4606      	mov	r6, r0
 80096dc:	460f      	mov	r7, r1
 80096de:	d007      	beq.n	80096f0 <__pow5mult+0x20>
 80096e0:	4c25      	ldr	r4, [pc, #148]	; (8009778 <__pow5mult+0xa8>)
 80096e2:	3a01      	subs	r2, #1
 80096e4:	2300      	movs	r3, #0
 80096e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096ea:	f7ff fe9b 	bl	8009424 <__multadd>
 80096ee:	4607      	mov	r7, r0
 80096f0:	10ad      	asrs	r5, r5, #2
 80096f2:	d03d      	beq.n	8009770 <__pow5mult+0xa0>
 80096f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096f6:	b97c      	cbnz	r4, 8009718 <__pow5mult+0x48>
 80096f8:	2010      	movs	r0, #16
 80096fa:	f7ff fe1b 	bl	8009334 <malloc>
 80096fe:	4602      	mov	r2, r0
 8009700:	6270      	str	r0, [r6, #36]	; 0x24
 8009702:	b928      	cbnz	r0, 8009710 <__pow5mult+0x40>
 8009704:	4b1d      	ldr	r3, [pc, #116]	; (800977c <__pow5mult+0xac>)
 8009706:	481e      	ldr	r0, [pc, #120]	; (8009780 <__pow5mult+0xb0>)
 8009708:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800970c:	f000 fe3c 	bl	800a388 <__assert_func>
 8009710:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009714:	6004      	str	r4, [r0, #0]
 8009716:	60c4      	str	r4, [r0, #12]
 8009718:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800971c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009720:	b94c      	cbnz	r4, 8009736 <__pow5mult+0x66>
 8009722:	f240 2171 	movw	r1, #625	; 0x271
 8009726:	4630      	mov	r0, r6
 8009728:	f7ff ff16 	bl	8009558 <__i2b>
 800972c:	2300      	movs	r3, #0
 800972e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009732:	4604      	mov	r4, r0
 8009734:	6003      	str	r3, [r0, #0]
 8009736:	f04f 0900 	mov.w	r9, #0
 800973a:	07eb      	lsls	r3, r5, #31
 800973c:	d50a      	bpl.n	8009754 <__pow5mult+0x84>
 800973e:	4639      	mov	r1, r7
 8009740:	4622      	mov	r2, r4
 8009742:	4630      	mov	r0, r6
 8009744:	f7ff ff1e 	bl	8009584 <__multiply>
 8009748:	4639      	mov	r1, r7
 800974a:	4680      	mov	r8, r0
 800974c:	4630      	mov	r0, r6
 800974e:	f7ff fe47 	bl	80093e0 <_Bfree>
 8009752:	4647      	mov	r7, r8
 8009754:	106d      	asrs	r5, r5, #1
 8009756:	d00b      	beq.n	8009770 <__pow5mult+0xa0>
 8009758:	6820      	ldr	r0, [r4, #0]
 800975a:	b938      	cbnz	r0, 800976c <__pow5mult+0x9c>
 800975c:	4622      	mov	r2, r4
 800975e:	4621      	mov	r1, r4
 8009760:	4630      	mov	r0, r6
 8009762:	f7ff ff0f 	bl	8009584 <__multiply>
 8009766:	6020      	str	r0, [r4, #0]
 8009768:	f8c0 9000 	str.w	r9, [r0]
 800976c:	4604      	mov	r4, r0
 800976e:	e7e4      	b.n	800973a <__pow5mult+0x6a>
 8009770:	4638      	mov	r0, r7
 8009772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009776:	bf00      	nop
 8009778:	08017f50 	.word	0x08017f50
 800977c:	08017d15 	.word	0x08017d15
 8009780:	08017dfc 	.word	0x08017dfc

08009784 <__lshift>:
 8009784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009788:	460c      	mov	r4, r1
 800978a:	6849      	ldr	r1, [r1, #4]
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009792:	68a3      	ldr	r3, [r4, #8]
 8009794:	4607      	mov	r7, r0
 8009796:	4691      	mov	r9, r2
 8009798:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800979c:	f108 0601 	add.w	r6, r8, #1
 80097a0:	42b3      	cmp	r3, r6
 80097a2:	db0b      	blt.n	80097bc <__lshift+0x38>
 80097a4:	4638      	mov	r0, r7
 80097a6:	f7ff fddb 	bl	8009360 <_Balloc>
 80097aa:	4605      	mov	r5, r0
 80097ac:	b948      	cbnz	r0, 80097c2 <__lshift+0x3e>
 80097ae:	4602      	mov	r2, r0
 80097b0:	4b28      	ldr	r3, [pc, #160]	; (8009854 <__lshift+0xd0>)
 80097b2:	4829      	ldr	r0, [pc, #164]	; (8009858 <__lshift+0xd4>)
 80097b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80097b8:	f000 fde6 	bl	800a388 <__assert_func>
 80097bc:	3101      	adds	r1, #1
 80097be:	005b      	lsls	r3, r3, #1
 80097c0:	e7ee      	b.n	80097a0 <__lshift+0x1c>
 80097c2:	2300      	movs	r3, #0
 80097c4:	f100 0114 	add.w	r1, r0, #20
 80097c8:	f100 0210 	add.w	r2, r0, #16
 80097cc:	4618      	mov	r0, r3
 80097ce:	4553      	cmp	r3, sl
 80097d0:	db33      	blt.n	800983a <__lshift+0xb6>
 80097d2:	6920      	ldr	r0, [r4, #16]
 80097d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097d8:	f104 0314 	add.w	r3, r4, #20
 80097dc:	f019 091f 	ands.w	r9, r9, #31
 80097e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097e8:	d02b      	beq.n	8009842 <__lshift+0xbe>
 80097ea:	f1c9 0e20 	rsb	lr, r9, #32
 80097ee:	468a      	mov	sl, r1
 80097f0:	2200      	movs	r2, #0
 80097f2:	6818      	ldr	r0, [r3, #0]
 80097f4:	fa00 f009 	lsl.w	r0, r0, r9
 80097f8:	4302      	orrs	r2, r0
 80097fa:	f84a 2b04 	str.w	r2, [sl], #4
 80097fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009802:	459c      	cmp	ip, r3
 8009804:	fa22 f20e 	lsr.w	r2, r2, lr
 8009808:	d8f3      	bhi.n	80097f2 <__lshift+0x6e>
 800980a:	ebac 0304 	sub.w	r3, ip, r4
 800980e:	3b15      	subs	r3, #21
 8009810:	f023 0303 	bic.w	r3, r3, #3
 8009814:	3304      	adds	r3, #4
 8009816:	f104 0015 	add.w	r0, r4, #21
 800981a:	4584      	cmp	ip, r0
 800981c:	bf38      	it	cc
 800981e:	2304      	movcc	r3, #4
 8009820:	50ca      	str	r2, [r1, r3]
 8009822:	b10a      	cbz	r2, 8009828 <__lshift+0xa4>
 8009824:	f108 0602 	add.w	r6, r8, #2
 8009828:	3e01      	subs	r6, #1
 800982a:	4638      	mov	r0, r7
 800982c:	612e      	str	r6, [r5, #16]
 800982e:	4621      	mov	r1, r4
 8009830:	f7ff fdd6 	bl	80093e0 <_Bfree>
 8009834:	4628      	mov	r0, r5
 8009836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800983a:	f842 0f04 	str.w	r0, [r2, #4]!
 800983e:	3301      	adds	r3, #1
 8009840:	e7c5      	b.n	80097ce <__lshift+0x4a>
 8009842:	3904      	subs	r1, #4
 8009844:	f853 2b04 	ldr.w	r2, [r3], #4
 8009848:	f841 2f04 	str.w	r2, [r1, #4]!
 800984c:	459c      	cmp	ip, r3
 800984e:	d8f9      	bhi.n	8009844 <__lshift+0xc0>
 8009850:	e7ea      	b.n	8009828 <__lshift+0xa4>
 8009852:	bf00      	nop
 8009854:	08017d8b 	.word	0x08017d8b
 8009858:	08017dfc 	.word	0x08017dfc

0800985c <__mcmp>:
 800985c:	b530      	push	{r4, r5, lr}
 800985e:	6902      	ldr	r2, [r0, #16]
 8009860:	690c      	ldr	r4, [r1, #16]
 8009862:	1b12      	subs	r2, r2, r4
 8009864:	d10e      	bne.n	8009884 <__mcmp+0x28>
 8009866:	f100 0314 	add.w	r3, r0, #20
 800986a:	3114      	adds	r1, #20
 800986c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009870:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009874:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009878:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800987c:	42a5      	cmp	r5, r4
 800987e:	d003      	beq.n	8009888 <__mcmp+0x2c>
 8009880:	d305      	bcc.n	800988e <__mcmp+0x32>
 8009882:	2201      	movs	r2, #1
 8009884:	4610      	mov	r0, r2
 8009886:	bd30      	pop	{r4, r5, pc}
 8009888:	4283      	cmp	r3, r0
 800988a:	d3f3      	bcc.n	8009874 <__mcmp+0x18>
 800988c:	e7fa      	b.n	8009884 <__mcmp+0x28>
 800988e:	f04f 32ff 	mov.w	r2, #4294967295
 8009892:	e7f7      	b.n	8009884 <__mcmp+0x28>

08009894 <__mdiff>:
 8009894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009898:	460c      	mov	r4, r1
 800989a:	4606      	mov	r6, r0
 800989c:	4611      	mov	r1, r2
 800989e:	4620      	mov	r0, r4
 80098a0:	4617      	mov	r7, r2
 80098a2:	f7ff ffdb 	bl	800985c <__mcmp>
 80098a6:	1e05      	subs	r5, r0, #0
 80098a8:	d110      	bne.n	80098cc <__mdiff+0x38>
 80098aa:	4629      	mov	r1, r5
 80098ac:	4630      	mov	r0, r6
 80098ae:	f7ff fd57 	bl	8009360 <_Balloc>
 80098b2:	b930      	cbnz	r0, 80098c2 <__mdiff+0x2e>
 80098b4:	4b39      	ldr	r3, [pc, #228]	; (800999c <__mdiff+0x108>)
 80098b6:	4602      	mov	r2, r0
 80098b8:	f240 2132 	movw	r1, #562	; 0x232
 80098bc:	4838      	ldr	r0, [pc, #224]	; (80099a0 <__mdiff+0x10c>)
 80098be:	f000 fd63 	bl	800a388 <__assert_func>
 80098c2:	2301      	movs	r3, #1
 80098c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098cc:	bfa4      	itt	ge
 80098ce:	463b      	movge	r3, r7
 80098d0:	4627      	movge	r7, r4
 80098d2:	4630      	mov	r0, r6
 80098d4:	6879      	ldr	r1, [r7, #4]
 80098d6:	bfa6      	itte	ge
 80098d8:	461c      	movge	r4, r3
 80098da:	2500      	movge	r5, #0
 80098dc:	2501      	movlt	r5, #1
 80098de:	f7ff fd3f 	bl	8009360 <_Balloc>
 80098e2:	b920      	cbnz	r0, 80098ee <__mdiff+0x5a>
 80098e4:	4b2d      	ldr	r3, [pc, #180]	; (800999c <__mdiff+0x108>)
 80098e6:	4602      	mov	r2, r0
 80098e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098ec:	e7e6      	b.n	80098bc <__mdiff+0x28>
 80098ee:	693e      	ldr	r6, [r7, #16]
 80098f0:	60c5      	str	r5, [r0, #12]
 80098f2:	6925      	ldr	r5, [r4, #16]
 80098f4:	f107 0114 	add.w	r1, r7, #20
 80098f8:	f104 0914 	add.w	r9, r4, #20
 80098fc:	f100 0e14 	add.w	lr, r0, #20
 8009900:	f107 0210 	add.w	r2, r7, #16
 8009904:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009908:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800990c:	46f2      	mov	sl, lr
 800990e:	2700      	movs	r7, #0
 8009910:	f859 3b04 	ldr.w	r3, [r9], #4
 8009914:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009918:	fa1f f883 	uxth.w	r8, r3
 800991c:	fa17 f78b 	uxtah	r7, r7, fp
 8009920:	0c1b      	lsrs	r3, r3, #16
 8009922:	eba7 0808 	sub.w	r8, r7, r8
 8009926:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800992a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800992e:	fa1f f888 	uxth.w	r8, r8
 8009932:	141f      	asrs	r7, r3, #16
 8009934:	454d      	cmp	r5, r9
 8009936:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800993a:	f84a 3b04 	str.w	r3, [sl], #4
 800993e:	d8e7      	bhi.n	8009910 <__mdiff+0x7c>
 8009940:	1b2b      	subs	r3, r5, r4
 8009942:	3b15      	subs	r3, #21
 8009944:	f023 0303 	bic.w	r3, r3, #3
 8009948:	3304      	adds	r3, #4
 800994a:	3415      	adds	r4, #21
 800994c:	42a5      	cmp	r5, r4
 800994e:	bf38      	it	cc
 8009950:	2304      	movcc	r3, #4
 8009952:	4419      	add	r1, r3
 8009954:	4473      	add	r3, lr
 8009956:	469e      	mov	lr, r3
 8009958:	460d      	mov	r5, r1
 800995a:	4565      	cmp	r5, ip
 800995c:	d30e      	bcc.n	800997c <__mdiff+0xe8>
 800995e:	f10c 0203 	add.w	r2, ip, #3
 8009962:	1a52      	subs	r2, r2, r1
 8009964:	f022 0203 	bic.w	r2, r2, #3
 8009968:	3903      	subs	r1, #3
 800996a:	458c      	cmp	ip, r1
 800996c:	bf38      	it	cc
 800996e:	2200      	movcc	r2, #0
 8009970:	441a      	add	r2, r3
 8009972:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009976:	b17b      	cbz	r3, 8009998 <__mdiff+0x104>
 8009978:	6106      	str	r6, [r0, #16]
 800997a:	e7a5      	b.n	80098c8 <__mdiff+0x34>
 800997c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009980:	fa17 f488 	uxtah	r4, r7, r8
 8009984:	1422      	asrs	r2, r4, #16
 8009986:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800998a:	b2a4      	uxth	r4, r4
 800998c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009990:	f84e 4b04 	str.w	r4, [lr], #4
 8009994:	1417      	asrs	r7, r2, #16
 8009996:	e7e0      	b.n	800995a <__mdiff+0xc6>
 8009998:	3e01      	subs	r6, #1
 800999a:	e7ea      	b.n	8009972 <__mdiff+0xde>
 800999c:	08017d8b 	.word	0x08017d8b
 80099a0:	08017dfc 	.word	0x08017dfc

080099a4 <__d2b>:
 80099a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099a8:	4689      	mov	r9, r1
 80099aa:	2101      	movs	r1, #1
 80099ac:	ec57 6b10 	vmov	r6, r7, d0
 80099b0:	4690      	mov	r8, r2
 80099b2:	f7ff fcd5 	bl	8009360 <_Balloc>
 80099b6:	4604      	mov	r4, r0
 80099b8:	b930      	cbnz	r0, 80099c8 <__d2b+0x24>
 80099ba:	4602      	mov	r2, r0
 80099bc:	4b25      	ldr	r3, [pc, #148]	; (8009a54 <__d2b+0xb0>)
 80099be:	4826      	ldr	r0, [pc, #152]	; (8009a58 <__d2b+0xb4>)
 80099c0:	f240 310a 	movw	r1, #778	; 0x30a
 80099c4:	f000 fce0 	bl	800a388 <__assert_func>
 80099c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80099cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80099d0:	bb35      	cbnz	r5, 8009a20 <__d2b+0x7c>
 80099d2:	2e00      	cmp	r6, #0
 80099d4:	9301      	str	r3, [sp, #4]
 80099d6:	d028      	beq.n	8009a2a <__d2b+0x86>
 80099d8:	4668      	mov	r0, sp
 80099da:	9600      	str	r6, [sp, #0]
 80099dc:	f7ff fd8c 	bl	80094f8 <__lo0bits>
 80099e0:	9900      	ldr	r1, [sp, #0]
 80099e2:	b300      	cbz	r0, 8009a26 <__d2b+0x82>
 80099e4:	9a01      	ldr	r2, [sp, #4]
 80099e6:	f1c0 0320 	rsb	r3, r0, #32
 80099ea:	fa02 f303 	lsl.w	r3, r2, r3
 80099ee:	430b      	orrs	r3, r1
 80099f0:	40c2      	lsrs	r2, r0
 80099f2:	6163      	str	r3, [r4, #20]
 80099f4:	9201      	str	r2, [sp, #4]
 80099f6:	9b01      	ldr	r3, [sp, #4]
 80099f8:	61a3      	str	r3, [r4, #24]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	bf14      	ite	ne
 80099fe:	2202      	movne	r2, #2
 8009a00:	2201      	moveq	r2, #1
 8009a02:	6122      	str	r2, [r4, #16]
 8009a04:	b1d5      	cbz	r5, 8009a3c <__d2b+0x98>
 8009a06:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a0a:	4405      	add	r5, r0
 8009a0c:	f8c9 5000 	str.w	r5, [r9]
 8009a10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a14:	f8c8 0000 	str.w	r0, [r8]
 8009a18:	4620      	mov	r0, r4
 8009a1a:	b003      	add	sp, #12
 8009a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a24:	e7d5      	b.n	80099d2 <__d2b+0x2e>
 8009a26:	6161      	str	r1, [r4, #20]
 8009a28:	e7e5      	b.n	80099f6 <__d2b+0x52>
 8009a2a:	a801      	add	r0, sp, #4
 8009a2c:	f7ff fd64 	bl	80094f8 <__lo0bits>
 8009a30:	9b01      	ldr	r3, [sp, #4]
 8009a32:	6163      	str	r3, [r4, #20]
 8009a34:	2201      	movs	r2, #1
 8009a36:	6122      	str	r2, [r4, #16]
 8009a38:	3020      	adds	r0, #32
 8009a3a:	e7e3      	b.n	8009a04 <__d2b+0x60>
 8009a3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a44:	f8c9 0000 	str.w	r0, [r9]
 8009a48:	6918      	ldr	r0, [r3, #16]
 8009a4a:	f7ff fd35 	bl	80094b8 <__hi0bits>
 8009a4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a52:	e7df      	b.n	8009a14 <__d2b+0x70>
 8009a54:	08017d8b 	.word	0x08017d8b
 8009a58:	08017dfc 	.word	0x08017dfc

08009a5c <_calloc_r>:
 8009a5c:	b513      	push	{r0, r1, r4, lr}
 8009a5e:	434a      	muls	r2, r1
 8009a60:	4611      	mov	r1, r2
 8009a62:	9201      	str	r2, [sp, #4]
 8009a64:	f000 f85a 	bl	8009b1c <_malloc_r>
 8009a68:	4604      	mov	r4, r0
 8009a6a:	b118      	cbz	r0, 8009a74 <_calloc_r+0x18>
 8009a6c:	9a01      	ldr	r2, [sp, #4]
 8009a6e:	2100      	movs	r1, #0
 8009a70:	f7fe f840 	bl	8007af4 <memset>
 8009a74:	4620      	mov	r0, r4
 8009a76:	b002      	add	sp, #8
 8009a78:	bd10      	pop	{r4, pc}
	...

08009a7c <_free_r>:
 8009a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a7e:	2900      	cmp	r1, #0
 8009a80:	d048      	beq.n	8009b14 <_free_r+0x98>
 8009a82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a86:	9001      	str	r0, [sp, #4]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f1a1 0404 	sub.w	r4, r1, #4
 8009a8e:	bfb8      	it	lt
 8009a90:	18e4      	addlt	r4, r4, r3
 8009a92:	f000 fe1d 	bl	800a6d0 <__malloc_lock>
 8009a96:	4a20      	ldr	r2, [pc, #128]	; (8009b18 <_free_r+0x9c>)
 8009a98:	9801      	ldr	r0, [sp, #4]
 8009a9a:	6813      	ldr	r3, [r2, #0]
 8009a9c:	4615      	mov	r5, r2
 8009a9e:	b933      	cbnz	r3, 8009aae <_free_r+0x32>
 8009aa0:	6063      	str	r3, [r4, #4]
 8009aa2:	6014      	str	r4, [r2, #0]
 8009aa4:	b003      	add	sp, #12
 8009aa6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009aaa:	f000 be17 	b.w	800a6dc <__malloc_unlock>
 8009aae:	42a3      	cmp	r3, r4
 8009ab0:	d90b      	bls.n	8009aca <_free_r+0x4e>
 8009ab2:	6821      	ldr	r1, [r4, #0]
 8009ab4:	1862      	adds	r2, r4, r1
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	bf04      	itt	eq
 8009aba:	681a      	ldreq	r2, [r3, #0]
 8009abc:	685b      	ldreq	r3, [r3, #4]
 8009abe:	6063      	str	r3, [r4, #4]
 8009ac0:	bf04      	itt	eq
 8009ac2:	1852      	addeq	r2, r2, r1
 8009ac4:	6022      	streq	r2, [r4, #0]
 8009ac6:	602c      	str	r4, [r5, #0]
 8009ac8:	e7ec      	b.n	8009aa4 <_free_r+0x28>
 8009aca:	461a      	mov	r2, r3
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	b10b      	cbz	r3, 8009ad4 <_free_r+0x58>
 8009ad0:	42a3      	cmp	r3, r4
 8009ad2:	d9fa      	bls.n	8009aca <_free_r+0x4e>
 8009ad4:	6811      	ldr	r1, [r2, #0]
 8009ad6:	1855      	adds	r5, r2, r1
 8009ad8:	42a5      	cmp	r5, r4
 8009ada:	d10b      	bne.n	8009af4 <_free_r+0x78>
 8009adc:	6824      	ldr	r4, [r4, #0]
 8009ade:	4421      	add	r1, r4
 8009ae0:	1854      	adds	r4, r2, r1
 8009ae2:	42a3      	cmp	r3, r4
 8009ae4:	6011      	str	r1, [r2, #0]
 8009ae6:	d1dd      	bne.n	8009aa4 <_free_r+0x28>
 8009ae8:	681c      	ldr	r4, [r3, #0]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	6053      	str	r3, [r2, #4]
 8009aee:	4421      	add	r1, r4
 8009af0:	6011      	str	r1, [r2, #0]
 8009af2:	e7d7      	b.n	8009aa4 <_free_r+0x28>
 8009af4:	d902      	bls.n	8009afc <_free_r+0x80>
 8009af6:	230c      	movs	r3, #12
 8009af8:	6003      	str	r3, [r0, #0]
 8009afa:	e7d3      	b.n	8009aa4 <_free_r+0x28>
 8009afc:	6825      	ldr	r5, [r4, #0]
 8009afe:	1961      	adds	r1, r4, r5
 8009b00:	428b      	cmp	r3, r1
 8009b02:	bf04      	itt	eq
 8009b04:	6819      	ldreq	r1, [r3, #0]
 8009b06:	685b      	ldreq	r3, [r3, #4]
 8009b08:	6063      	str	r3, [r4, #4]
 8009b0a:	bf04      	itt	eq
 8009b0c:	1949      	addeq	r1, r1, r5
 8009b0e:	6021      	streq	r1, [r4, #0]
 8009b10:	6054      	str	r4, [r2, #4]
 8009b12:	e7c7      	b.n	8009aa4 <_free_r+0x28>
 8009b14:	b003      	add	sp, #12
 8009b16:	bd30      	pop	{r4, r5, pc}
 8009b18:	2000029c 	.word	0x2000029c

08009b1c <_malloc_r>:
 8009b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1e:	1ccd      	adds	r5, r1, #3
 8009b20:	f025 0503 	bic.w	r5, r5, #3
 8009b24:	3508      	adds	r5, #8
 8009b26:	2d0c      	cmp	r5, #12
 8009b28:	bf38      	it	cc
 8009b2a:	250c      	movcc	r5, #12
 8009b2c:	2d00      	cmp	r5, #0
 8009b2e:	4606      	mov	r6, r0
 8009b30:	db01      	blt.n	8009b36 <_malloc_r+0x1a>
 8009b32:	42a9      	cmp	r1, r5
 8009b34:	d903      	bls.n	8009b3e <_malloc_r+0x22>
 8009b36:	230c      	movs	r3, #12
 8009b38:	6033      	str	r3, [r6, #0]
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b3e:	f000 fdc7 	bl	800a6d0 <__malloc_lock>
 8009b42:	4921      	ldr	r1, [pc, #132]	; (8009bc8 <_malloc_r+0xac>)
 8009b44:	680a      	ldr	r2, [r1, #0]
 8009b46:	4614      	mov	r4, r2
 8009b48:	b99c      	cbnz	r4, 8009b72 <_malloc_r+0x56>
 8009b4a:	4f20      	ldr	r7, [pc, #128]	; (8009bcc <_malloc_r+0xb0>)
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	b923      	cbnz	r3, 8009b5a <_malloc_r+0x3e>
 8009b50:	4621      	mov	r1, r4
 8009b52:	4630      	mov	r0, r6
 8009b54:	f000 faf2 	bl	800a13c <_sbrk_r>
 8009b58:	6038      	str	r0, [r7, #0]
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	f000 faed 	bl	800a13c <_sbrk_r>
 8009b62:	1c43      	adds	r3, r0, #1
 8009b64:	d123      	bne.n	8009bae <_malloc_r+0x92>
 8009b66:	230c      	movs	r3, #12
 8009b68:	6033      	str	r3, [r6, #0]
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f000 fdb6 	bl	800a6dc <__malloc_unlock>
 8009b70:	e7e3      	b.n	8009b3a <_malloc_r+0x1e>
 8009b72:	6823      	ldr	r3, [r4, #0]
 8009b74:	1b5b      	subs	r3, r3, r5
 8009b76:	d417      	bmi.n	8009ba8 <_malloc_r+0x8c>
 8009b78:	2b0b      	cmp	r3, #11
 8009b7a:	d903      	bls.n	8009b84 <_malloc_r+0x68>
 8009b7c:	6023      	str	r3, [r4, #0]
 8009b7e:	441c      	add	r4, r3
 8009b80:	6025      	str	r5, [r4, #0]
 8009b82:	e004      	b.n	8009b8e <_malloc_r+0x72>
 8009b84:	6863      	ldr	r3, [r4, #4]
 8009b86:	42a2      	cmp	r2, r4
 8009b88:	bf0c      	ite	eq
 8009b8a:	600b      	streq	r3, [r1, #0]
 8009b8c:	6053      	strne	r3, [r2, #4]
 8009b8e:	4630      	mov	r0, r6
 8009b90:	f000 fda4 	bl	800a6dc <__malloc_unlock>
 8009b94:	f104 000b 	add.w	r0, r4, #11
 8009b98:	1d23      	adds	r3, r4, #4
 8009b9a:	f020 0007 	bic.w	r0, r0, #7
 8009b9e:	1ac2      	subs	r2, r0, r3
 8009ba0:	d0cc      	beq.n	8009b3c <_malloc_r+0x20>
 8009ba2:	1a1b      	subs	r3, r3, r0
 8009ba4:	50a3      	str	r3, [r4, r2]
 8009ba6:	e7c9      	b.n	8009b3c <_malloc_r+0x20>
 8009ba8:	4622      	mov	r2, r4
 8009baa:	6864      	ldr	r4, [r4, #4]
 8009bac:	e7cc      	b.n	8009b48 <_malloc_r+0x2c>
 8009bae:	1cc4      	adds	r4, r0, #3
 8009bb0:	f024 0403 	bic.w	r4, r4, #3
 8009bb4:	42a0      	cmp	r0, r4
 8009bb6:	d0e3      	beq.n	8009b80 <_malloc_r+0x64>
 8009bb8:	1a21      	subs	r1, r4, r0
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f000 fabe 	bl	800a13c <_sbrk_r>
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	d1dd      	bne.n	8009b80 <_malloc_r+0x64>
 8009bc4:	e7cf      	b.n	8009b66 <_malloc_r+0x4a>
 8009bc6:	bf00      	nop
 8009bc8:	2000029c 	.word	0x2000029c
 8009bcc:	200002a0 	.word	0x200002a0

08009bd0 <__ssputs_r>:
 8009bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd4:	688e      	ldr	r6, [r1, #8]
 8009bd6:	429e      	cmp	r6, r3
 8009bd8:	4682      	mov	sl, r0
 8009bda:	460c      	mov	r4, r1
 8009bdc:	4690      	mov	r8, r2
 8009bde:	461f      	mov	r7, r3
 8009be0:	d838      	bhi.n	8009c54 <__ssputs_r+0x84>
 8009be2:	898a      	ldrh	r2, [r1, #12]
 8009be4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009be8:	d032      	beq.n	8009c50 <__ssputs_r+0x80>
 8009bea:	6825      	ldr	r5, [r4, #0]
 8009bec:	6909      	ldr	r1, [r1, #16]
 8009bee:	eba5 0901 	sub.w	r9, r5, r1
 8009bf2:	6965      	ldr	r5, [r4, #20]
 8009bf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	444b      	add	r3, r9
 8009c00:	106d      	asrs	r5, r5, #1
 8009c02:	429d      	cmp	r5, r3
 8009c04:	bf38      	it	cc
 8009c06:	461d      	movcc	r5, r3
 8009c08:	0553      	lsls	r3, r2, #21
 8009c0a:	d531      	bpl.n	8009c70 <__ssputs_r+0xa0>
 8009c0c:	4629      	mov	r1, r5
 8009c0e:	f7ff ff85 	bl	8009b1c <_malloc_r>
 8009c12:	4606      	mov	r6, r0
 8009c14:	b950      	cbnz	r0, 8009c2c <__ssputs_r+0x5c>
 8009c16:	230c      	movs	r3, #12
 8009c18:	f8ca 3000 	str.w	r3, [sl]
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c22:	81a3      	strh	r3, [r4, #12]
 8009c24:	f04f 30ff 	mov.w	r0, #4294967295
 8009c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c2c:	6921      	ldr	r1, [r4, #16]
 8009c2e:	464a      	mov	r2, r9
 8009c30:	f7ff fb88 	bl	8009344 <memcpy>
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c3e:	81a3      	strh	r3, [r4, #12]
 8009c40:	6126      	str	r6, [r4, #16]
 8009c42:	6165      	str	r5, [r4, #20]
 8009c44:	444e      	add	r6, r9
 8009c46:	eba5 0509 	sub.w	r5, r5, r9
 8009c4a:	6026      	str	r6, [r4, #0]
 8009c4c:	60a5      	str	r5, [r4, #8]
 8009c4e:	463e      	mov	r6, r7
 8009c50:	42be      	cmp	r6, r7
 8009c52:	d900      	bls.n	8009c56 <__ssputs_r+0x86>
 8009c54:	463e      	mov	r6, r7
 8009c56:	4632      	mov	r2, r6
 8009c58:	6820      	ldr	r0, [r4, #0]
 8009c5a:	4641      	mov	r1, r8
 8009c5c:	f000 fd1e 	bl	800a69c <memmove>
 8009c60:	68a3      	ldr	r3, [r4, #8]
 8009c62:	6822      	ldr	r2, [r4, #0]
 8009c64:	1b9b      	subs	r3, r3, r6
 8009c66:	4432      	add	r2, r6
 8009c68:	60a3      	str	r3, [r4, #8]
 8009c6a:	6022      	str	r2, [r4, #0]
 8009c6c:	2000      	movs	r0, #0
 8009c6e:	e7db      	b.n	8009c28 <__ssputs_r+0x58>
 8009c70:	462a      	mov	r2, r5
 8009c72:	f000 fd39 	bl	800a6e8 <_realloc_r>
 8009c76:	4606      	mov	r6, r0
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	d1e1      	bne.n	8009c40 <__ssputs_r+0x70>
 8009c7c:	6921      	ldr	r1, [r4, #16]
 8009c7e:	4650      	mov	r0, sl
 8009c80:	f7ff fefc 	bl	8009a7c <_free_r>
 8009c84:	e7c7      	b.n	8009c16 <__ssputs_r+0x46>
	...

08009c88 <_svfiprintf_r>:
 8009c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8c:	4698      	mov	r8, r3
 8009c8e:	898b      	ldrh	r3, [r1, #12]
 8009c90:	061b      	lsls	r3, r3, #24
 8009c92:	b09d      	sub	sp, #116	; 0x74
 8009c94:	4607      	mov	r7, r0
 8009c96:	460d      	mov	r5, r1
 8009c98:	4614      	mov	r4, r2
 8009c9a:	d50e      	bpl.n	8009cba <_svfiprintf_r+0x32>
 8009c9c:	690b      	ldr	r3, [r1, #16]
 8009c9e:	b963      	cbnz	r3, 8009cba <_svfiprintf_r+0x32>
 8009ca0:	2140      	movs	r1, #64	; 0x40
 8009ca2:	f7ff ff3b 	bl	8009b1c <_malloc_r>
 8009ca6:	6028      	str	r0, [r5, #0]
 8009ca8:	6128      	str	r0, [r5, #16]
 8009caa:	b920      	cbnz	r0, 8009cb6 <_svfiprintf_r+0x2e>
 8009cac:	230c      	movs	r3, #12
 8009cae:	603b      	str	r3, [r7, #0]
 8009cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb4:	e0d1      	b.n	8009e5a <_svfiprintf_r+0x1d2>
 8009cb6:	2340      	movs	r3, #64	; 0x40
 8009cb8:	616b      	str	r3, [r5, #20]
 8009cba:	2300      	movs	r3, #0
 8009cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8009cbe:	2320      	movs	r3, #32
 8009cc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cc8:	2330      	movs	r3, #48	; 0x30
 8009cca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e74 <_svfiprintf_r+0x1ec>
 8009cce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cd2:	f04f 0901 	mov.w	r9, #1
 8009cd6:	4623      	mov	r3, r4
 8009cd8:	469a      	mov	sl, r3
 8009cda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cde:	b10a      	cbz	r2, 8009ce4 <_svfiprintf_r+0x5c>
 8009ce0:	2a25      	cmp	r2, #37	; 0x25
 8009ce2:	d1f9      	bne.n	8009cd8 <_svfiprintf_r+0x50>
 8009ce4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ce8:	d00b      	beq.n	8009d02 <_svfiprintf_r+0x7a>
 8009cea:	465b      	mov	r3, fp
 8009cec:	4622      	mov	r2, r4
 8009cee:	4629      	mov	r1, r5
 8009cf0:	4638      	mov	r0, r7
 8009cf2:	f7ff ff6d 	bl	8009bd0 <__ssputs_r>
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	f000 80aa 	beq.w	8009e50 <_svfiprintf_r+0x1c8>
 8009cfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cfe:	445a      	add	r2, fp
 8009d00:	9209      	str	r2, [sp, #36]	; 0x24
 8009d02:	f89a 3000 	ldrb.w	r3, [sl]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f000 80a2 	beq.w	8009e50 <_svfiprintf_r+0x1c8>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d16:	f10a 0a01 	add.w	sl, sl, #1
 8009d1a:	9304      	str	r3, [sp, #16]
 8009d1c:	9307      	str	r3, [sp, #28]
 8009d1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d22:	931a      	str	r3, [sp, #104]	; 0x68
 8009d24:	4654      	mov	r4, sl
 8009d26:	2205      	movs	r2, #5
 8009d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d2c:	4851      	ldr	r0, [pc, #324]	; (8009e74 <_svfiprintf_r+0x1ec>)
 8009d2e:	f7f6 fa57 	bl	80001e0 <memchr>
 8009d32:	9a04      	ldr	r2, [sp, #16]
 8009d34:	b9d8      	cbnz	r0, 8009d6e <_svfiprintf_r+0xe6>
 8009d36:	06d0      	lsls	r0, r2, #27
 8009d38:	bf44      	itt	mi
 8009d3a:	2320      	movmi	r3, #32
 8009d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d40:	0711      	lsls	r1, r2, #28
 8009d42:	bf44      	itt	mi
 8009d44:	232b      	movmi	r3, #43	; 0x2b
 8009d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8009d50:	d015      	beq.n	8009d7e <_svfiprintf_r+0xf6>
 8009d52:	9a07      	ldr	r2, [sp, #28]
 8009d54:	4654      	mov	r4, sl
 8009d56:	2000      	movs	r0, #0
 8009d58:	f04f 0c0a 	mov.w	ip, #10
 8009d5c:	4621      	mov	r1, r4
 8009d5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d62:	3b30      	subs	r3, #48	; 0x30
 8009d64:	2b09      	cmp	r3, #9
 8009d66:	d94e      	bls.n	8009e06 <_svfiprintf_r+0x17e>
 8009d68:	b1b0      	cbz	r0, 8009d98 <_svfiprintf_r+0x110>
 8009d6a:	9207      	str	r2, [sp, #28]
 8009d6c:	e014      	b.n	8009d98 <_svfiprintf_r+0x110>
 8009d6e:	eba0 0308 	sub.w	r3, r0, r8
 8009d72:	fa09 f303 	lsl.w	r3, r9, r3
 8009d76:	4313      	orrs	r3, r2
 8009d78:	9304      	str	r3, [sp, #16]
 8009d7a:	46a2      	mov	sl, r4
 8009d7c:	e7d2      	b.n	8009d24 <_svfiprintf_r+0x9c>
 8009d7e:	9b03      	ldr	r3, [sp, #12]
 8009d80:	1d19      	adds	r1, r3, #4
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	9103      	str	r1, [sp, #12]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	bfbb      	ittet	lt
 8009d8a:	425b      	neglt	r3, r3
 8009d8c:	f042 0202 	orrlt.w	r2, r2, #2
 8009d90:	9307      	strge	r3, [sp, #28]
 8009d92:	9307      	strlt	r3, [sp, #28]
 8009d94:	bfb8      	it	lt
 8009d96:	9204      	strlt	r2, [sp, #16]
 8009d98:	7823      	ldrb	r3, [r4, #0]
 8009d9a:	2b2e      	cmp	r3, #46	; 0x2e
 8009d9c:	d10c      	bne.n	8009db8 <_svfiprintf_r+0x130>
 8009d9e:	7863      	ldrb	r3, [r4, #1]
 8009da0:	2b2a      	cmp	r3, #42	; 0x2a
 8009da2:	d135      	bne.n	8009e10 <_svfiprintf_r+0x188>
 8009da4:	9b03      	ldr	r3, [sp, #12]
 8009da6:	1d1a      	adds	r2, r3, #4
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	9203      	str	r2, [sp, #12]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	bfb8      	it	lt
 8009db0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009db4:	3402      	adds	r4, #2
 8009db6:	9305      	str	r3, [sp, #20]
 8009db8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e84 <_svfiprintf_r+0x1fc>
 8009dbc:	7821      	ldrb	r1, [r4, #0]
 8009dbe:	2203      	movs	r2, #3
 8009dc0:	4650      	mov	r0, sl
 8009dc2:	f7f6 fa0d 	bl	80001e0 <memchr>
 8009dc6:	b140      	cbz	r0, 8009dda <_svfiprintf_r+0x152>
 8009dc8:	2340      	movs	r3, #64	; 0x40
 8009dca:	eba0 000a 	sub.w	r0, r0, sl
 8009dce:	fa03 f000 	lsl.w	r0, r3, r0
 8009dd2:	9b04      	ldr	r3, [sp, #16]
 8009dd4:	4303      	orrs	r3, r0
 8009dd6:	3401      	adds	r4, #1
 8009dd8:	9304      	str	r3, [sp, #16]
 8009dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dde:	4826      	ldr	r0, [pc, #152]	; (8009e78 <_svfiprintf_r+0x1f0>)
 8009de0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009de4:	2206      	movs	r2, #6
 8009de6:	f7f6 f9fb 	bl	80001e0 <memchr>
 8009dea:	2800      	cmp	r0, #0
 8009dec:	d038      	beq.n	8009e60 <_svfiprintf_r+0x1d8>
 8009dee:	4b23      	ldr	r3, [pc, #140]	; (8009e7c <_svfiprintf_r+0x1f4>)
 8009df0:	bb1b      	cbnz	r3, 8009e3a <_svfiprintf_r+0x1b2>
 8009df2:	9b03      	ldr	r3, [sp, #12]
 8009df4:	3307      	adds	r3, #7
 8009df6:	f023 0307 	bic.w	r3, r3, #7
 8009dfa:	3308      	adds	r3, #8
 8009dfc:	9303      	str	r3, [sp, #12]
 8009dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e00:	4433      	add	r3, r6
 8009e02:	9309      	str	r3, [sp, #36]	; 0x24
 8009e04:	e767      	b.n	8009cd6 <_svfiprintf_r+0x4e>
 8009e06:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	2001      	movs	r0, #1
 8009e0e:	e7a5      	b.n	8009d5c <_svfiprintf_r+0xd4>
 8009e10:	2300      	movs	r3, #0
 8009e12:	3401      	adds	r4, #1
 8009e14:	9305      	str	r3, [sp, #20]
 8009e16:	4619      	mov	r1, r3
 8009e18:	f04f 0c0a 	mov.w	ip, #10
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e22:	3a30      	subs	r2, #48	; 0x30
 8009e24:	2a09      	cmp	r2, #9
 8009e26:	d903      	bls.n	8009e30 <_svfiprintf_r+0x1a8>
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d0c5      	beq.n	8009db8 <_svfiprintf_r+0x130>
 8009e2c:	9105      	str	r1, [sp, #20]
 8009e2e:	e7c3      	b.n	8009db8 <_svfiprintf_r+0x130>
 8009e30:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e34:	4604      	mov	r4, r0
 8009e36:	2301      	movs	r3, #1
 8009e38:	e7f0      	b.n	8009e1c <_svfiprintf_r+0x194>
 8009e3a:	ab03      	add	r3, sp, #12
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	462a      	mov	r2, r5
 8009e40:	4b0f      	ldr	r3, [pc, #60]	; (8009e80 <_svfiprintf_r+0x1f8>)
 8009e42:	a904      	add	r1, sp, #16
 8009e44:	4638      	mov	r0, r7
 8009e46:	f7fd fefd 	bl	8007c44 <_printf_float>
 8009e4a:	1c42      	adds	r2, r0, #1
 8009e4c:	4606      	mov	r6, r0
 8009e4e:	d1d6      	bne.n	8009dfe <_svfiprintf_r+0x176>
 8009e50:	89ab      	ldrh	r3, [r5, #12]
 8009e52:	065b      	lsls	r3, r3, #25
 8009e54:	f53f af2c 	bmi.w	8009cb0 <_svfiprintf_r+0x28>
 8009e58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e5a:	b01d      	add	sp, #116	; 0x74
 8009e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e60:	ab03      	add	r3, sp, #12
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	462a      	mov	r2, r5
 8009e66:	4b06      	ldr	r3, [pc, #24]	; (8009e80 <_svfiprintf_r+0x1f8>)
 8009e68:	a904      	add	r1, sp, #16
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	f7fe f98e 	bl	800818c <_printf_i>
 8009e70:	e7eb      	b.n	8009e4a <_svfiprintf_r+0x1c2>
 8009e72:	bf00      	nop
 8009e74:	08017f5c 	.word	0x08017f5c
 8009e78:	08017f66 	.word	0x08017f66
 8009e7c:	08007c45 	.word	0x08007c45
 8009e80:	08009bd1 	.word	0x08009bd1
 8009e84:	08017f62 	.word	0x08017f62

08009e88 <__sfputc_r>:
 8009e88:	6893      	ldr	r3, [r2, #8]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	b410      	push	{r4}
 8009e90:	6093      	str	r3, [r2, #8]
 8009e92:	da08      	bge.n	8009ea6 <__sfputc_r+0x1e>
 8009e94:	6994      	ldr	r4, [r2, #24]
 8009e96:	42a3      	cmp	r3, r4
 8009e98:	db01      	blt.n	8009e9e <__sfputc_r+0x16>
 8009e9a:	290a      	cmp	r1, #10
 8009e9c:	d103      	bne.n	8009ea6 <__sfputc_r+0x1e>
 8009e9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ea2:	f000 b99f 	b.w	800a1e4 <__swbuf_r>
 8009ea6:	6813      	ldr	r3, [r2, #0]
 8009ea8:	1c58      	adds	r0, r3, #1
 8009eaa:	6010      	str	r0, [r2, #0]
 8009eac:	7019      	strb	r1, [r3, #0]
 8009eae:	4608      	mov	r0, r1
 8009eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eb4:	4770      	bx	lr

08009eb6 <__sfputs_r>:
 8009eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb8:	4606      	mov	r6, r0
 8009eba:	460f      	mov	r7, r1
 8009ebc:	4614      	mov	r4, r2
 8009ebe:	18d5      	adds	r5, r2, r3
 8009ec0:	42ac      	cmp	r4, r5
 8009ec2:	d101      	bne.n	8009ec8 <__sfputs_r+0x12>
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	e007      	b.n	8009ed8 <__sfputs_r+0x22>
 8009ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ecc:	463a      	mov	r2, r7
 8009ece:	4630      	mov	r0, r6
 8009ed0:	f7ff ffda 	bl	8009e88 <__sfputc_r>
 8009ed4:	1c43      	adds	r3, r0, #1
 8009ed6:	d1f3      	bne.n	8009ec0 <__sfputs_r+0xa>
 8009ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009edc <_vfiprintf_r>:
 8009edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee0:	460d      	mov	r5, r1
 8009ee2:	b09d      	sub	sp, #116	; 0x74
 8009ee4:	4614      	mov	r4, r2
 8009ee6:	4698      	mov	r8, r3
 8009ee8:	4606      	mov	r6, r0
 8009eea:	b118      	cbz	r0, 8009ef4 <_vfiprintf_r+0x18>
 8009eec:	6983      	ldr	r3, [r0, #24]
 8009eee:	b90b      	cbnz	r3, 8009ef4 <_vfiprintf_r+0x18>
 8009ef0:	f7ff f97a 	bl	80091e8 <__sinit>
 8009ef4:	4b89      	ldr	r3, [pc, #548]	; (800a11c <_vfiprintf_r+0x240>)
 8009ef6:	429d      	cmp	r5, r3
 8009ef8:	d11b      	bne.n	8009f32 <_vfiprintf_r+0x56>
 8009efa:	6875      	ldr	r5, [r6, #4]
 8009efc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009efe:	07d9      	lsls	r1, r3, #31
 8009f00:	d405      	bmi.n	8009f0e <_vfiprintf_r+0x32>
 8009f02:	89ab      	ldrh	r3, [r5, #12]
 8009f04:	059a      	lsls	r2, r3, #22
 8009f06:	d402      	bmi.n	8009f0e <_vfiprintf_r+0x32>
 8009f08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f0a:	f7ff fa10 	bl	800932e <__retarget_lock_acquire_recursive>
 8009f0e:	89ab      	ldrh	r3, [r5, #12]
 8009f10:	071b      	lsls	r3, r3, #28
 8009f12:	d501      	bpl.n	8009f18 <_vfiprintf_r+0x3c>
 8009f14:	692b      	ldr	r3, [r5, #16]
 8009f16:	b9eb      	cbnz	r3, 8009f54 <_vfiprintf_r+0x78>
 8009f18:	4629      	mov	r1, r5
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	f000 f9c6 	bl	800a2ac <__swsetup_r>
 8009f20:	b1c0      	cbz	r0, 8009f54 <_vfiprintf_r+0x78>
 8009f22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f24:	07dc      	lsls	r4, r3, #31
 8009f26:	d50e      	bpl.n	8009f46 <_vfiprintf_r+0x6a>
 8009f28:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2c:	b01d      	add	sp, #116	; 0x74
 8009f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f32:	4b7b      	ldr	r3, [pc, #492]	; (800a120 <_vfiprintf_r+0x244>)
 8009f34:	429d      	cmp	r5, r3
 8009f36:	d101      	bne.n	8009f3c <_vfiprintf_r+0x60>
 8009f38:	68b5      	ldr	r5, [r6, #8]
 8009f3a:	e7df      	b.n	8009efc <_vfiprintf_r+0x20>
 8009f3c:	4b79      	ldr	r3, [pc, #484]	; (800a124 <_vfiprintf_r+0x248>)
 8009f3e:	429d      	cmp	r5, r3
 8009f40:	bf08      	it	eq
 8009f42:	68f5      	ldreq	r5, [r6, #12]
 8009f44:	e7da      	b.n	8009efc <_vfiprintf_r+0x20>
 8009f46:	89ab      	ldrh	r3, [r5, #12]
 8009f48:	0598      	lsls	r0, r3, #22
 8009f4a:	d4ed      	bmi.n	8009f28 <_vfiprintf_r+0x4c>
 8009f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f4e:	f7ff f9ef 	bl	8009330 <__retarget_lock_release_recursive>
 8009f52:	e7e9      	b.n	8009f28 <_vfiprintf_r+0x4c>
 8009f54:	2300      	movs	r3, #0
 8009f56:	9309      	str	r3, [sp, #36]	; 0x24
 8009f58:	2320      	movs	r3, #32
 8009f5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f62:	2330      	movs	r3, #48	; 0x30
 8009f64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a128 <_vfiprintf_r+0x24c>
 8009f68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f6c:	f04f 0901 	mov.w	r9, #1
 8009f70:	4623      	mov	r3, r4
 8009f72:	469a      	mov	sl, r3
 8009f74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f78:	b10a      	cbz	r2, 8009f7e <_vfiprintf_r+0xa2>
 8009f7a:	2a25      	cmp	r2, #37	; 0x25
 8009f7c:	d1f9      	bne.n	8009f72 <_vfiprintf_r+0x96>
 8009f7e:	ebba 0b04 	subs.w	fp, sl, r4
 8009f82:	d00b      	beq.n	8009f9c <_vfiprintf_r+0xc0>
 8009f84:	465b      	mov	r3, fp
 8009f86:	4622      	mov	r2, r4
 8009f88:	4629      	mov	r1, r5
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f7ff ff93 	bl	8009eb6 <__sfputs_r>
 8009f90:	3001      	adds	r0, #1
 8009f92:	f000 80aa 	beq.w	800a0ea <_vfiprintf_r+0x20e>
 8009f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f98:	445a      	add	r2, fp
 8009f9a:	9209      	str	r2, [sp, #36]	; 0x24
 8009f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f000 80a2 	beq.w	800a0ea <_vfiprintf_r+0x20e>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fb0:	f10a 0a01 	add.w	sl, sl, #1
 8009fb4:	9304      	str	r3, [sp, #16]
 8009fb6:	9307      	str	r3, [sp, #28]
 8009fb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fbc:	931a      	str	r3, [sp, #104]	; 0x68
 8009fbe:	4654      	mov	r4, sl
 8009fc0:	2205      	movs	r2, #5
 8009fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fc6:	4858      	ldr	r0, [pc, #352]	; (800a128 <_vfiprintf_r+0x24c>)
 8009fc8:	f7f6 f90a 	bl	80001e0 <memchr>
 8009fcc:	9a04      	ldr	r2, [sp, #16]
 8009fce:	b9d8      	cbnz	r0, 800a008 <_vfiprintf_r+0x12c>
 8009fd0:	06d1      	lsls	r1, r2, #27
 8009fd2:	bf44      	itt	mi
 8009fd4:	2320      	movmi	r3, #32
 8009fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fda:	0713      	lsls	r3, r2, #28
 8009fdc:	bf44      	itt	mi
 8009fde:	232b      	movmi	r3, #43	; 0x2b
 8009fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe8:	2b2a      	cmp	r3, #42	; 0x2a
 8009fea:	d015      	beq.n	800a018 <_vfiprintf_r+0x13c>
 8009fec:	9a07      	ldr	r2, [sp, #28]
 8009fee:	4654      	mov	r4, sl
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	f04f 0c0a 	mov.w	ip, #10
 8009ff6:	4621      	mov	r1, r4
 8009ff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ffc:	3b30      	subs	r3, #48	; 0x30
 8009ffe:	2b09      	cmp	r3, #9
 800a000:	d94e      	bls.n	800a0a0 <_vfiprintf_r+0x1c4>
 800a002:	b1b0      	cbz	r0, 800a032 <_vfiprintf_r+0x156>
 800a004:	9207      	str	r2, [sp, #28]
 800a006:	e014      	b.n	800a032 <_vfiprintf_r+0x156>
 800a008:	eba0 0308 	sub.w	r3, r0, r8
 800a00c:	fa09 f303 	lsl.w	r3, r9, r3
 800a010:	4313      	orrs	r3, r2
 800a012:	9304      	str	r3, [sp, #16]
 800a014:	46a2      	mov	sl, r4
 800a016:	e7d2      	b.n	8009fbe <_vfiprintf_r+0xe2>
 800a018:	9b03      	ldr	r3, [sp, #12]
 800a01a:	1d19      	adds	r1, r3, #4
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	9103      	str	r1, [sp, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	bfbb      	ittet	lt
 800a024:	425b      	neglt	r3, r3
 800a026:	f042 0202 	orrlt.w	r2, r2, #2
 800a02a:	9307      	strge	r3, [sp, #28]
 800a02c:	9307      	strlt	r3, [sp, #28]
 800a02e:	bfb8      	it	lt
 800a030:	9204      	strlt	r2, [sp, #16]
 800a032:	7823      	ldrb	r3, [r4, #0]
 800a034:	2b2e      	cmp	r3, #46	; 0x2e
 800a036:	d10c      	bne.n	800a052 <_vfiprintf_r+0x176>
 800a038:	7863      	ldrb	r3, [r4, #1]
 800a03a:	2b2a      	cmp	r3, #42	; 0x2a
 800a03c:	d135      	bne.n	800a0aa <_vfiprintf_r+0x1ce>
 800a03e:	9b03      	ldr	r3, [sp, #12]
 800a040:	1d1a      	adds	r2, r3, #4
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	9203      	str	r2, [sp, #12]
 800a046:	2b00      	cmp	r3, #0
 800a048:	bfb8      	it	lt
 800a04a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a04e:	3402      	adds	r4, #2
 800a050:	9305      	str	r3, [sp, #20]
 800a052:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a138 <_vfiprintf_r+0x25c>
 800a056:	7821      	ldrb	r1, [r4, #0]
 800a058:	2203      	movs	r2, #3
 800a05a:	4650      	mov	r0, sl
 800a05c:	f7f6 f8c0 	bl	80001e0 <memchr>
 800a060:	b140      	cbz	r0, 800a074 <_vfiprintf_r+0x198>
 800a062:	2340      	movs	r3, #64	; 0x40
 800a064:	eba0 000a 	sub.w	r0, r0, sl
 800a068:	fa03 f000 	lsl.w	r0, r3, r0
 800a06c:	9b04      	ldr	r3, [sp, #16]
 800a06e:	4303      	orrs	r3, r0
 800a070:	3401      	adds	r4, #1
 800a072:	9304      	str	r3, [sp, #16]
 800a074:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a078:	482c      	ldr	r0, [pc, #176]	; (800a12c <_vfiprintf_r+0x250>)
 800a07a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a07e:	2206      	movs	r2, #6
 800a080:	f7f6 f8ae 	bl	80001e0 <memchr>
 800a084:	2800      	cmp	r0, #0
 800a086:	d03f      	beq.n	800a108 <_vfiprintf_r+0x22c>
 800a088:	4b29      	ldr	r3, [pc, #164]	; (800a130 <_vfiprintf_r+0x254>)
 800a08a:	bb1b      	cbnz	r3, 800a0d4 <_vfiprintf_r+0x1f8>
 800a08c:	9b03      	ldr	r3, [sp, #12]
 800a08e:	3307      	adds	r3, #7
 800a090:	f023 0307 	bic.w	r3, r3, #7
 800a094:	3308      	adds	r3, #8
 800a096:	9303      	str	r3, [sp, #12]
 800a098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a09a:	443b      	add	r3, r7
 800a09c:	9309      	str	r3, [sp, #36]	; 0x24
 800a09e:	e767      	b.n	8009f70 <_vfiprintf_r+0x94>
 800a0a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	2001      	movs	r0, #1
 800a0a8:	e7a5      	b.n	8009ff6 <_vfiprintf_r+0x11a>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	3401      	adds	r4, #1
 800a0ae:	9305      	str	r3, [sp, #20]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	f04f 0c0a 	mov.w	ip, #10
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0bc:	3a30      	subs	r2, #48	; 0x30
 800a0be:	2a09      	cmp	r2, #9
 800a0c0:	d903      	bls.n	800a0ca <_vfiprintf_r+0x1ee>
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d0c5      	beq.n	800a052 <_vfiprintf_r+0x176>
 800a0c6:	9105      	str	r1, [sp, #20]
 800a0c8:	e7c3      	b.n	800a052 <_vfiprintf_r+0x176>
 800a0ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e7f0      	b.n	800a0b6 <_vfiprintf_r+0x1da>
 800a0d4:	ab03      	add	r3, sp, #12
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	462a      	mov	r2, r5
 800a0da:	4b16      	ldr	r3, [pc, #88]	; (800a134 <_vfiprintf_r+0x258>)
 800a0dc:	a904      	add	r1, sp, #16
 800a0de:	4630      	mov	r0, r6
 800a0e0:	f7fd fdb0 	bl	8007c44 <_printf_float>
 800a0e4:	4607      	mov	r7, r0
 800a0e6:	1c78      	adds	r0, r7, #1
 800a0e8:	d1d6      	bne.n	800a098 <_vfiprintf_r+0x1bc>
 800a0ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0ec:	07d9      	lsls	r1, r3, #31
 800a0ee:	d405      	bmi.n	800a0fc <_vfiprintf_r+0x220>
 800a0f0:	89ab      	ldrh	r3, [r5, #12]
 800a0f2:	059a      	lsls	r2, r3, #22
 800a0f4:	d402      	bmi.n	800a0fc <_vfiprintf_r+0x220>
 800a0f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0f8:	f7ff f91a 	bl	8009330 <__retarget_lock_release_recursive>
 800a0fc:	89ab      	ldrh	r3, [r5, #12]
 800a0fe:	065b      	lsls	r3, r3, #25
 800a100:	f53f af12 	bmi.w	8009f28 <_vfiprintf_r+0x4c>
 800a104:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a106:	e711      	b.n	8009f2c <_vfiprintf_r+0x50>
 800a108:	ab03      	add	r3, sp, #12
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	462a      	mov	r2, r5
 800a10e:	4b09      	ldr	r3, [pc, #36]	; (800a134 <_vfiprintf_r+0x258>)
 800a110:	a904      	add	r1, sp, #16
 800a112:	4630      	mov	r0, r6
 800a114:	f7fe f83a 	bl	800818c <_printf_i>
 800a118:	e7e4      	b.n	800a0e4 <_vfiprintf_r+0x208>
 800a11a:	bf00      	nop
 800a11c:	08017dbc 	.word	0x08017dbc
 800a120:	08017ddc 	.word	0x08017ddc
 800a124:	08017d9c 	.word	0x08017d9c
 800a128:	08017f5c 	.word	0x08017f5c
 800a12c:	08017f66 	.word	0x08017f66
 800a130:	08007c45 	.word	0x08007c45
 800a134:	08009eb7 	.word	0x08009eb7
 800a138:	08017f62 	.word	0x08017f62

0800a13c <_sbrk_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4d06      	ldr	r5, [pc, #24]	; (800a158 <_sbrk_r+0x1c>)
 800a140:	2300      	movs	r3, #0
 800a142:	4604      	mov	r4, r0
 800a144:	4608      	mov	r0, r1
 800a146:	602b      	str	r3, [r5, #0]
 800a148:	f7fb f85a 	bl	8005200 <_sbrk>
 800a14c:	1c43      	adds	r3, r0, #1
 800a14e:	d102      	bne.n	800a156 <_sbrk_r+0x1a>
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	b103      	cbz	r3, 800a156 <_sbrk_r+0x1a>
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	bd38      	pop	{r3, r4, r5, pc}
 800a158:	200004c0 	.word	0x200004c0

0800a15c <__sread>:
 800a15c:	b510      	push	{r4, lr}
 800a15e:	460c      	mov	r4, r1
 800a160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a164:	f000 fae6 	bl	800a734 <_read_r>
 800a168:	2800      	cmp	r0, #0
 800a16a:	bfab      	itete	ge
 800a16c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a16e:	89a3      	ldrhlt	r3, [r4, #12]
 800a170:	181b      	addge	r3, r3, r0
 800a172:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a176:	bfac      	ite	ge
 800a178:	6563      	strge	r3, [r4, #84]	; 0x54
 800a17a:	81a3      	strhlt	r3, [r4, #12]
 800a17c:	bd10      	pop	{r4, pc}

0800a17e <__swrite>:
 800a17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a182:	461f      	mov	r7, r3
 800a184:	898b      	ldrh	r3, [r1, #12]
 800a186:	05db      	lsls	r3, r3, #23
 800a188:	4605      	mov	r5, r0
 800a18a:	460c      	mov	r4, r1
 800a18c:	4616      	mov	r6, r2
 800a18e:	d505      	bpl.n	800a19c <__swrite+0x1e>
 800a190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a194:	2302      	movs	r3, #2
 800a196:	2200      	movs	r2, #0
 800a198:	f000 f9f8 	bl	800a58c <_lseek_r>
 800a19c:	89a3      	ldrh	r3, [r4, #12]
 800a19e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1a6:	81a3      	strh	r3, [r4, #12]
 800a1a8:	4632      	mov	r2, r6
 800a1aa:	463b      	mov	r3, r7
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b2:	f000 b869 	b.w	800a288 <_write_r>

0800a1b6 <__sseek>:
 800a1b6:	b510      	push	{r4, lr}
 800a1b8:	460c      	mov	r4, r1
 800a1ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1be:	f000 f9e5 	bl	800a58c <_lseek_r>
 800a1c2:	1c43      	adds	r3, r0, #1
 800a1c4:	89a3      	ldrh	r3, [r4, #12]
 800a1c6:	bf15      	itete	ne
 800a1c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1d2:	81a3      	strheq	r3, [r4, #12]
 800a1d4:	bf18      	it	ne
 800a1d6:	81a3      	strhne	r3, [r4, #12]
 800a1d8:	bd10      	pop	{r4, pc}

0800a1da <__sclose>:
 800a1da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1de:	f000 b8f1 	b.w	800a3c4 <_close_r>
	...

0800a1e4 <__swbuf_r>:
 800a1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e6:	460e      	mov	r6, r1
 800a1e8:	4614      	mov	r4, r2
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	b118      	cbz	r0, 800a1f6 <__swbuf_r+0x12>
 800a1ee:	6983      	ldr	r3, [r0, #24]
 800a1f0:	b90b      	cbnz	r3, 800a1f6 <__swbuf_r+0x12>
 800a1f2:	f7fe fff9 	bl	80091e8 <__sinit>
 800a1f6:	4b21      	ldr	r3, [pc, #132]	; (800a27c <__swbuf_r+0x98>)
 800a1f8:	429c      	cmp	r4, r3
 800a1fa:	d12b      	bne.n	800a254 <__swbuf_r+0x70>
 800a1fc:	686c      	ldr	r4, [r5, #4]
 800a1fe:	69a3      	ldr	r3, [r4, #24]
 800a200:	60a3      	str	r3, [r4, #8]
 800a202:	89a3      	ldrh	r3, [r4, #12]
 800a204:	071a      	lsls	r2, r3, #28
 800a206:	d52f      	bpl.n	800a268 <__swbuf_r+0x84>
 800a208:	6923      	ldr	r3, [r4, #16]
 800a20a:	b36b      	cbz	r3, 800a268 <__swbuf_r+0x84>
 800a20c:	6923      	ldr	r3, [r4, #16]
 800a20e:	6820      	ldr	r0, [r4, #0]
 800a210:	1ac0      	subs	r0, r0, r3
 800a212:	6963      	ldr	r3, [r4, #20]
 800a214:	b2f6      	uxtb	r6, r6
 800a216:	4283      	cmp	r3, r0
 800a218:	4637      	mov	r7, r6
 800a21a:	dc04      	bgt.n	800a226 <__swbuf_r+0x42>
 800a21c:	4621      	mov	r1, r4
 800a21e:	4628      	mov	r0, r5
 800a220:	f000 f966 	bl	800a4f0 <_fflush_r>
 800a224:	bb30      	cbnz	r0, 800a274 <__swbuf_r+0x90>
 800a226:	68a3      	ldr	r3, [r4, #8]
 800a228:	3b01      	subs	r3, #1
 800a22a:	60a3      	str	r3, [r4, #8]
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	1c5a      	adds	r2, r3, #1
 800a230:	6022      	str	r2, [r4, #0]
 800a232:	701e      	strb	r6, [r3, #0]
 800a234:	6963      	ldr	r3, [r4, #20]
 800a236:	3001      	adds	r0, #1
 800a238:	4283      	cmp	r3, r0
 800a23a:	d004      	beq.n	800a246 <__swbuf_r+0x62>
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	07db      	lsls	r3, r3, #31
 800a240:	d506      	bpl.n	800a250 <__swbuf_r+0x6c>
 800a242:	2e0a      	cmp	r6, #10
 800a244:	d104      	bne.n	800a250 <__swbuf_r+0x6c>
 800a246:	4621      	mov	r1, r4
 800a248:	4628      	mov	r0, r5
 800a24a:	f000 f951 	bl	800a4f0 <_fflush_r>
 800a24e:	b988      	cbnz	r0, 800a274 <__swbuf_r+0x90>
 800a250:	4638      	mov	r0, r7
 800a252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a254:	4b0a      	ldr	r3, [pc, #40]	; (800a280 <__swbuf_r+0x9c>)
 800a256:	429c      	cmp	r4, r3
 800a258:	d101      	bne.n	800a25e <__swbuf_r+0x7a>
 800a25a:	68ac      	ldr	r4, [r5, #8]
 800a25c:	e7cf      	b.n	800a1fe <__swbuf_r+0x1a>
 800a25e:	4b09      	ldr	r3, [pc, #36]	; (800a284 <__swbuf_r+0xa0>)
 800a260:	429c      	cmp	r4, r3
 800a262:	bf08      	it	eq
 800a264:	68ec      	ldreq	r4, [r5, #12]
 800a266:	e7ca      	b.n	800a1fe <__swbuf_r+0x1a>
 800a268:	4621      	mov	r1, r4
 800a26a:	4628      	mov	r0, r5
 800a26c:	f000 f81e 	bl	800a2ac <__swsetup_r>
 800a270:	2800      	cmp	r0, #0
 800a272:	d0cb      	beq.n	800a20c <__swbuf_r+0x28>
 800a274:	f04f 37ff 	mov.w	r7, #4294967295
 800a278:	e7ea      	b.n	800a250 <__swbuf_r+0x6c>
 800a27a:	bf00      	nop
 800a27c:	08017dbc 	.word	0x08017dbc
 800a280:	08017ddc 	.word	0x08017ddc
 800a284:	08017d9c 	.word	0x08017d9c

0800a288 <_write_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	4d07      	ldr	r5, [pc, #28]	; (800a2a8 <_write_r+0x20>)
 800a28c:	4604      	mov	r4, r0
 800a28e:	4608      	mov	r0, r1
 800a290:	4611      	mov	r1, r2
 800a292:	2200      	movs	r2, #0
 800a294:	602a      	str	r2, [r5, #0]
 800a296:	461a      	mov	r2, r3
 800a298:	f7fa ff61 	bl	800515e <_write>
 800a29c:	1c43      	adds	r3, r0, #1
 800a29e:	d102      	bne.n	800a2a6 <_write_r+0x1e>
 800a2a0:	682b      	ldr	r3, [r5, #0]
 800a2a2:	b103      	cbz	r3, 800a2a6 <_write_r+0x1e>
 800a2a4:	6023      	str	r3, [r4, #0]
 800a2a6:	bd38      	pop	{r3, r4, r5, pc}
 800a2a8:	200004c0 	.word	0x200004c0

0800a2ac <__swsetup_r>:
 800a2ac:	4b32      	ldr	r3, [pc, #200]	; (800a378 <__swsetup_r+0xcc>)
 800a2ae:	b570      	push	{r4, r5, r6, lr}
 800a2b0:	681d      	ldr	r5, [r3, #0]
 800a2b2:	4606      	mov	r6, r0
 800a2b4:	460c      	mov	r4, r1
 800a2b6:	b125      	cbz	r5, 800a2c2 <__swsetup_r+0x16>
 800a2b8:	69ab      	ldr	r3, [r5, #24]
 800a2ba:	b913      	cbnz	r3, 800a2c2 <__swsetup_r+0x16>
 800a2bc:	4628      	mov	r0, r5
 800a2be:	f7fe ff93 	bl	80091e8 <__sinit>
 800a2c2:	4b2e      	ldr	r3, [pc, #184]	; (800a37c <__swsetup_r+0xd0>)
 800a2c4:	429c      	cmp	r4, r3
 800a2c6:	d10f      	bne.n	800a2e8 <__swsetup_r+0x3c>
 800a2c8:	686c      	ldr	r4, [r5, #4]
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2d0:	0719      	lsls	r1, r3, #28
 800a2d2:	d42c      	bmi.n	800a32e <__swsetup_r+0x82>
 800a2d4:	06dd      	lsls	r5, r3, #27
 800a2d6:	d411      	bmi.n	800a2fc <__swsetup_r+0x50>
 800a2d8:	2309      	movs	r3, #9
 800a2da:	6033      	str	r3, [r6, #0]
 800a2dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2e0:	81a3      	strh	r3, [r4, #12]
 800a2e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e6:	e03e      	b.n	800a366 <__swsetup_r+0xba>
 800a2e8:	4b25      	ldr	r3, [pc, #148]	; (800a380 <__swsetup_r+0xd4>)
 800a2ea:	429c      	cmp	r4, r3
 800a2ec:	d101      	bne.n	800a2f2 <__swsetup_r+0x46>
 800a2ee:	68ac      	ldr	r4, [r5, #8]
 800a2f0:	e7eb      	b.n	800a2ca <__swsetup_r+0x1e>
 800a2f2:	4b24      	ldr	r3, [pc, #144]	; (800a384 <__swsetup_r+0xd8>)
 800a2f4:	429c      	cmp	r4, r3
 800a2f6:	bf08      	it	eq
 800a2f8:	68ec      	ldreq	r4, [r5, #12]
 800a2fa:	e7e6      	b.n	800a2ca <__swsetup_r+0x1e>
 800a2fc:	0758      	lsls	r0, r3, #29
 800a2fe:	d512      	bpl.n	800a326 <__swsetup_r+0x7a>
 800a300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a302:	b141      	cbz	r1, 800a316 <__swsetup_r+0x6a>
 800a304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a308:	4299      	cmp	r1, r3
 800a30a:	d002      	beq.n	800a312 <__swsetup_r+0x66>
 800a30c:	4630      	mov	r0, r6
 800a30e:	f7ff fbb5 	bl	8009a7c <_free_r>
 800a312:	2300      	movs	r3, #0
 800a314:	6363      	str	r3, [r4, #52]	; 0x34
 800a316:	89a3      	ldrh	r3, [r4, #12]
 800a318:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a31c:	81a3      	strh	r3, [r4, #12]
 800a31e:	2300      	movs	r3, #0
 800a320:	6063      	str	r3, [r4, #4]
 800a322:	6923      	ldr	r3, [r4, #16]
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	89a3      	ldrh	r3, [r4, #12]
 800a328:	f043 0308 	orr.w	r3, r3, #8
 800a32c:	81a3      	strh	r3, [r4, #12]
 800a32e:	6923      	ldr	r3, [r4, #16]
 800a330:	b94b      	cbnz	r3, 800a346 <__swsetup_r+0x9a>
 800a332:	89a3      	ldrh	r3, [r4, #12]
 800a334:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a33c:	d003      	beq.n	800a346 <__swsetup_r+0x9a>
 800a33e:	4621      	mov	r1, r4
 800a340:	4630      	mov	r0, r6
 800a342:	f000 f959 	bl	800a5f8 <__smakebuf_r>
 800a346:	89a0      	ldrh	r0, [r4, #12]
 800a348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a34c:	f010 0301 	ands.w	r3, r0, #1
 800a350:	d00a      	beq.n	800a368 <__swsetup_r+0xbc>
 800a352:	2300      	movs	r3, #0
 800a354:	60a3      	str	r3, [r4, #8]
 800a356:	6963      	ldr	r3, [r4, #20]
 800a358:	425b      	negs	r3, r3
 800a35a:	61a3      	str	r3, [r4, #24]
 800a35c:	6923      	ldr	r3, [r4, #16]
 800a35e:	b943      	cbnz	r3, 800a372 <__swsetup_r+0xc6>
 800a360:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a364:	d1ba      	bne.n	800a2dc <__swsetup_r+0x30>
 800a366:	bd70      	pop	{r4, r5, r6, pc}
 800a368:	0781      	lsls	r1, r0, #30
 800a36a:	bf58      	it	pl
 800a36c:	6963      	ldrpl	r3, [r4, #20]
 800a36e:	60a3      	str	r3, [r4, #8]
 800a370:	e7f4      	b.n	800a35c <__swsetup_r+0xb0>
 800a372:	2000      	movs	r0, #0
 800a374:	e7f7      	b.n	800a366 <__swsetup_r+0xba>
 800a376:	bf00      	nop
 800a378:	200000a4 	.word	0x200000a4
 800a37c:	08017dbc 	.word	0x08017dbc
 800a380:	08017ddc 	.word	0x08017ddc
 800a384:	08017d9c 	.word	0x08017d9c

0800a388 <__assert_func>:
 800a388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a38a:	4614      	mov	r4, r2
 800a38c:	461a      	mov	r2, r3
 800a38e:	4b09      	ldr	r3, [pc, #36]	; (800a3b4 <__assert_func+0x2c>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4605      	mov	r5, r0
 800a394:	68d8      	ldr	r0, [r3, #12]
 800a396:	b14c      	cbz	r4, 800a3ac <__assert_func+0x24>
 800a398:	4b07      	ldr	r3, [pc, #28]	; (800a3b8 <__assert_func+0x30>)
 800a39a:	9100      	str	r1, [sp, #0]
 800a39c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3a0:	4906      	ldr	r1, [pc, #24]	; (800a3bc <__assert_func+0x34>)
 800a3a2:	462b      	mov	r3, r5
 800a3a4:	f000 f8e0 	bl	800a568 <fiprintf>
 800a3a8:	f000 f9e3 	bl	800a772 <abort>
 800a3ac:	4b04      	ldr	r3, [pc, #16]	; (800a3c0 <__assert_func+0x38>)
 800a3ae:	461c      	mov	r4, r3
 800a3b0:	e7f3      	b.n	800a39a <__assert_func+0x12>
 800a3b2:	bf00      	nop
 800a3b4:	200000a4 	.word	0x200000a4
 800a3b8:	08017f6d 	.word	0x08017f6d
 800a3bc:	08017f7a 	.word	0x08017f7a
 800a3c0:	08017fa8 	.word	0x08017fa8

0800a3c4 <_close_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	4d06      	ldr	r5, [pc, #24]	; (800a3e0 <_close_r+0x1c>)
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	4608      	mov	r0, r1
 800a3ce:	602b      	str	r3, [r5, #0]
 800a3d0:	f7fa fee1 	bl	8005196 <_close>
 800a3d4:	1c43      	adds	r3, r0, #1
 800a3d6:	d102      	bne.n	800a3de <_close_r+0x1a>
 800a3d8:	682b      	ldr	r3, [r5, #0]
 800a3da:	b103      	cbz	r3, 800a3de <_close_r+0x1a>
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	bd38      	pop	{r3, r4, r5, pc}
 800a3e0:	200004c0 	.word	0x200004c0

0800a3e4 <__sflush_r>:
 800a3e4:	898a      	ldrh	r2, [r1, #12]
 800a3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	0710      	lsls	r0, r2, #28
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	d458      	bmi.n	800a4a4 <__sflush_r+0xc0>
 800a3f2:	684b      	ldr	r3, [r1, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	dc05      	bgt.n	800a404 <__sflush_r+0x20>
 800a3f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	dc02      	bgt.n	800a404 <__sflush_r+0x20>
 800a3fe:	2000      	movs	r0, #0
 800a400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a406:	2e00      	cmp	r6, #0
 800a408:	d0f9      	beq.n	800a3fe <__sflush_r+0x1a>
 800a40a:	2300      	movs	r3, #0
 800a40c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a410:	682f      	ldr	r7, [r5, #0]
 800a412:	602b      	str	r3, [r5, #0]
 800a414:	d032      	beq.n	800a47c <__sflush_r+0x98>
 800a416:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a418:	89a3      	ldrh	r3, [r4, #12]
 800a41a:	075a      	lsls	r2, r3, #29
 800a41c:	d505      	bpl.n	800a42a <__sflush_r+0x46>
 800a41e:	6863      	ldr	r3, [r4, #4]
 800a420:	1ac0      	subs	r0, r0, r3
 800a422:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a424:	b10b      	cbz	r3, 800a42a <__sflush_r+0x46>
 800a426:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a428:	1ac0      	subs	r0, r0, r3
 800a42a:	2300      	movs	r3, #0
 800a42c:	4602      	mov	r2, r0
 800a42e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a430:	6a21      	ldr	r1, [r4, #32]
 800a432:	4628      	mov	r0, r5
 800a434:	47b0      	blx	r6
 800a436:	1c43      	adds	r3, r0, #1
 800a438:	89a3      	ldrh	r3, [r4, #12]
 800a43a:	d106      	bne.n	800a44a <__sflush_r+0x66>
 800a43c:	6829      	ldr	r1, [r5, #0]
 800a43e:	291d      	cmp	r1, #29
 800a440:	d82c      	bhi.n	800a49c <__sflush_r+0xb8>
 800a442:	4a2a      	ldr	r2, [pc, #168]	; (800a4ec <__sflush_r+0x108>)
 800a444:	40ca      	lsrs	r2, r1
 800a446:	07d6      	lsls	r6, r2, #31
 800a448:	d528      	bpl.n	800a49c <__sflush_r+0xb8>
 800a44a:	2200      	movs	r2, #0
 800a44c:	6062      	str	r2, [r4, #4]
 800a44e:	04d9      	lsls	r1, r3, #19
 800a450:	6922      	ldr	r2, [r4, #16]
 800a452:	6022      	str	r2, [r4, #0]
 800a454:	d504      	bpl.n	800a460 <__sflush_r+0x7c>
 800a456:	1c42      	adds	r2, r0, #1
 800a458:	d101      	bne.n	800a45e <__sflush_r+0x7a>
 800a45a:	682b      	ldr	r3, [r5, #0]
 800a45c:	b903      	cbnz	r3, 800a460 <__sflush_r+0x7c>
 800a45e:	6560      	str	r0, [r4, #84]	; 0x54
 800a460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a462:	602f      	str	r7, [r5, #0]
 800a464:	2900      	cmp	r1, #0
 800a466:	d0ca      	beq.n	800a3fe <__sflush_r+0x1a>
 800a468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a46c:	4299      	cmp	r1, r3
 800a46e:	d002      	beq.n	800a476 <__sflush_r+0x92>
 800a470:	4628      	mov	r0, r5
 800a472:	f7ff fb03 	bl	8009a7c <_free_r>
 800a476:	2000      	movs	r0, #0
 800a478:	6360      	str	r0, [r4, #52]	; 0x34
 800a47a:	e7c1      	b.n	800a400 <__sflush_r+0x1c>
 800a47c:	6a21      	ldr	r1, [r4, #32]
 800a47e:	2301      	movs	r3, #1
 800a480:	4628      	mov	r0, r5
 800a482:	47b0      	blx	r6
 800a484:	1c41      	adds	r1, r0, #1
 800a486:	d1c7      	bne.n	800a418 <__sflush_r+0x34>
 800a488:	682b      	ldr	r3, [r5, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d0c4      	beq.n	800a418 <__sflush_r+0x34>
 800a48e:	2b1d      	cmp	r3, #29
 800a490:	d001      	beq.n	800a496 <__sflush_r+0xb2>
 800a492:	2b16      	cmp	r3, #22
 800a494:	d101      	bne.n	800a49a <__sflush_r+0xb6>
 800a496:	602f      	str	r7, [r5, #0]
 800a498:	e7b1      	b.n	800a3fe <__sflush_r+0x1a>
 800a49a:	89a3      	ldrh	r3, [r4, #12]
 800a49c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4a0:	81a3      	strh	r3, [r4, #12]
 800a4a2:	e7ad      	b.n	800a400 <__sflush_r+0x1c>
 800a4a4:	690f      	ldr	r7, [r1, #16]
 800a4a6:	2f00      	cmp	r7, #0
 800a4a8:	d0a9      	beq.n	800a3fe <__sflush_r+0x1a>
 800a4aa:	0793      	lsls	r3, r2, #30
 800a4ac:	680e      	ldr	r6, [r1, #0]
 800a4ae:	bf08      	it	eq
 800a4b0:	694b      	ldreq	r3, [r1, #20]
 800a4b2:	600f      	str	r7, [r1, #0]
 800a4b4:	bf18      	it	ne
 800a4b6:	2300      	movne	r3, #0
 800a4b8:	eba6 0807 	sub.w	r8, r6, r7
 800a4bc:	608b      	str	r3, [r1, #8]
 800a4be:	f1b8 0f00 	cmp.w	r8, #0
 800a4c2:	dd9c      	ble.n	800a3fe <__sflush_r+0x1a>
 800a4c4:	6a21      	ldr	r1, [r4, #32]
 800a4c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4c8:	4643      	mov	r3, r8
 800a4ca:	463a      	mov	r2, r7
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	47b0      	blx	r6
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	dc06      	bgt.n	800a4e2 <__sflush_r+0xfe>
 800a4d4:	89a3      	ldrh	r3, [r4, #12]
 800a4d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4da:	81a3      	strh	r3, [r4, #12]
 800a4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e0:	e78e      	b.n	800a400 <__sflush_r+0x1c>
 800a4e2:	4407      	add	r7, r0
 800a4e4:	eba8 0800 	sub.w	r8, r8, r0
 800a4e8:	e7e9      	b.n	800a4be <__sflush_r+0xda>
 800a4ea:	bf00      	nop
 800a4ec:	20400001 	.word	0x20400001

0800a4f0 <_fflush_r>:
 800a4f0:	b538      	push	{r3, r4, r5, lr}
 800a4f2:	690b      	ldr	r3, [r1, #16]
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	460c      	mov	r4, r1
 800a4f8:	b913      	cbnz	r3, 800a500 <_fflush_r+0x10>
 800a4fa:	2500      	movs	r5, #0
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	bd38      	pop	{r3, r4, r5, pc}
 800a500:	b118      	cbz	r0, 800a50a <_fflush_r+0x1a>
 800a502:	6983      	ldr	r3, [r0, #24]
 800a504:	b90b      	cbnz	r3, 800a50a <_fflush_r+0x1a>
 800a506:	f7fe fe6f 	bl	80091e8 <__sinit>
 800a50a:	4b14      	ldr	r3, [pc, #80]	; (800a55c <_fflush_r+0x6c>)
 800a50c:	429c      	cmp	r4, r3
 800a50e:	d11b      	bne.n	800a548 <_fflush_r+0x58>
 800a510:	686c      	ldr	r4, [r5, #4]
 800a512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d0ef      	beq.n	800a4fa <_fflush_r+0xa>
 800a51a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a51c:	07d0      	lsls	r0, r2, #31
 800a51e:	d404      	bmi.n	800a52a <_fflush_r+0x3a>
 800a520:	0599      	lsls	r1, r3, #22
 800a522:	d402      	bmi.n	800a52a <_fflush_r+0x3a>
 800a524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a526:	f7fe ff02 	bl	800932e <__retarget_lock_acquire_recursive>
 800a52a:	4628      	mov	r0, r5
 800a52c:	4621      	mov	r1, r4
 800a52e:	f7ff ff59 	bl	800a3e4 <__sflush_r>
 800a532:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a534:	07da      	lsls	r2, r3, #31
 800a536:	4605      	mov	r5, r0
 800a538:	d4e0      	bmi.n	800a4fc <_fflush_r+0xc>
 800a53a:	89a3      	ldrh	r3, [r4, #12]
 800a53c:	059b      	lsls	r3, r3, #22
 800a53e:	d4dd      	bmi.n	800a4fc <_fflush_r+0xc>
 800a540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a542:	f7fe fef5 	bl	8009330 <__retarget_lock_release_recursive>
 800a546:	e7d9      	b.n	800a4fc <_fflush_r+0xc>
 800a548:	4b05      	ldr	r3, [pc, #20]	; (800a560 <_fflush_r+0x70>)
 800a54a:	429c      	cmp	r4, r3
 800a54c:	d101      	bne.n	800a552 <_fflush_r+0x62>
 800a54e:	68ac      	ldr	r4, [r5, #8]
 800a550:	e7df      	b.n	800a512 <_fflush_r+0x22>
 800a552:	4b04      	ldr	r3, [pc, #16]	; (800a564 <_fflush_r+0x74>)
 800a554:	429c      	cmp	r4, r3
 800a556:	bf08      	it	eq
 800a558:	68ec      	ldreq	r4, [r5, #12]
 800a55a:	e7da      	b.n	800a512 <_fflush_r+0x22>
 800a55c:	08017dbc 	.word	0x08017dbc
 800a560:	08017ddc 	.word	0x08017ddc
 800a564:	08017d9c 	.word	0x08017d9c

0800a568 <fiprintf>:
 800a568:	b40e      	push	{r1, r2, r3}
 800a56a:	b503      	push	{r0, r1, lr}
 800a56c:	4601      	mov	r1, r0
 800a56e:	ab03      	add	r3, sp, #12
 800a570:	4805      	ldr	r0, [pc, #20]	; (800a588 <fiprintf+0x20>)
 800a572:	f853 2b04 	ldr.w	r2, [r3], #4
 800a576:	6800      	ldr	r0, [r0, #0]
 800a578:	9301      	str	r3, [sp, #4]
 800a57a:	f7ff fcaf 	bl	8009edc <_vfiprintf_r>
 800a57e:	b002      	add	sp, #8
 800a580:	f85d eb04 	ldr.w	lr, [sp], #4
 800a584:	b003      	add	sp, #12
 800a586:	4770      	bx	lr
 800a588:	200000a4 	.word	0x200000a4

0800a58c <_lseek_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	4d07      	ldr	r5, [pc, #28]	; (800a5ac <_lseek_r+0x20>)
 800a590:	4604      	mov	r4, r0
 800a592:	4608      	mov	r0, r1
 800a594:	4611      	mov	r1, r2
 800a596:	2200      	movs	r2, #0
 800a598:	602a      	str	r2, [r5, #0]
 800a59a:	461a      	mov	r2, r3
 800a59c:	f7fa fe22 	bl	80051e4 <_lseek>
 800a5a0:	1c43      	adds	r3, r0, #1
 800a5a2:	d102      	bne.n	800a5aa <_lseek_r+0x1e>
 800a5a4:	682b      	ldr	r3, [r5, #0]
 800a5a6:	b103      	cbz	r3, 800a5aa <_lseek_r+0x1e>
 800a5a8:	6023      	str	r3, [r4, #0]
 800a5aa:	bd38      	pop	{r3, r4, r5, pc}
 800a5ac:	200004c0 	.word	0x200004c0

0800a5b0 <__swhatbuf_r>:
 800a5b0:	b570      	push	{r4, r5, r6, lr}
 800a5b2:	460e      	mov	r6, r1
 800a5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b8:	2900      	cmp	r1, #0
 800a5ba:	b096      	sub	sp, #88	; 0x58
 800a5bc:	4614      	mov	r4, r2
 800a5be:	461d      	mov	r5, r3
 800a5c0:	da07      	bge.n	800a5d2 <__swhatbuf_r+0x22>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	602b      	str	r3, [r5, #0]
 800a5c6:	89b3      	ldrh	r3, [r6, #12]
 800a5c8:	061a      	lsls	r2, r3, #24
 800a5ca:	d410      	bmi.n	800a5ee <__swhatbuf_r+0x3e>
 800a5cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5d0:	e00e      	b.n	800a5f0 <__swhatbuf_r+0x40>
 800a5d2:	466a      	mov	r2, sp
 800a5d4:	f000 f8d4 	bl	800a780 <_fstat_r>
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	dbf2      	blt.n	800a5c2 <__swhatbuf_r+0x12>
 800a5dc:	9a01      	ldr	r2, [sp, #4]
 800a5de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a5e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a5e6:	425a      	negs	r2, r3
 800a5e8:	415a      	adcs	r2, r3
 800a5ea:	602a      	str	r2, [r5, #0]
 800a5ec:	e7ee      	b.n	800a5cc <__swhatbuf_r+0x1c>
 800a5ee:	2340      	movs	r3, #64	; 0x40
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	6023      	str	r3, [r4, #0]
 800a5f4:	b016      	add	sp, #88	; 0x58
 800a5f6:	bd70      	pop	{r4, r5, r6, pc}

0800a5f8 <__smakebuf_r>:
 800a5f8:	898b      	ldrh	r3, [r1, #12]
 800a5fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5fc:	079d      	lsls	r5, r3, #30
 800a5fe:	4606      	mov	r6, r0
 800a600:	460c      	mov	r4, r1
 800a602:	d507      	bpl.n	800a614 <__smakebuf_r+0x1c>
 800a604:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	6123      	str	r3, [r4, #16]
 800a60c:	2301      	movs	r3, #1
 800a60e:	6163      	str	r3, [r4, #20]
 800a610:	b002      	add	sp, #8
 800a612:	bd70      	pop	{r4, r5, r6, pc}
 800a614:	ab01      	add	r3, sp, #4
 800a616:	466a      	mov	r2, sp
 800a618:	f7ff ffca 	bl	800a5b0 <__swhatbuf_r>
 800a61c:	9900      	ldr	r1, [sp, #0]
 800a61e:	4605      	mov	r5, r0
 800a620:	4630      	mov	r0, r6
 800a622:	f7ff fa7b 	bl	8009b1c <_malloc_r>
 800a626:	b948      	cbnz	r0, 800a63c <__smakebuf_r+0x44>
 800a628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a62c:	059a      	lsls	r2, r3, #22
 800a62e:	d4ef      	bmi.n	800a610 <__smakebuf_r+0x18>
 800a630:	f023 0303 	bic.w	r3, r3, #3
 800a634:	f043 0302 	orr.w	r3, r3, #2
 800a638:	81a3      	strh	r3, [r4, #12]
 800a63a:	e7e3      	b.n	800a604 <__smakebuf_r+0xc>
 800a63c:	4b0d      	ldr	r3, [pc, #52]	; (800a674 <__smakebuf_r+0x7c>)
 800a63e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	6020      	str	r0, [r4, #0]
 800a644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a648:	81a3      	strh	r3, [r4, #12]
 800a64a:	9b00      	ldr	r3, [sp, #0]
 800a64c:	6163      	str	r3, [r4, #20]
 800a64e:	9b01      	ldr	r3, [sp, #4]
 800a650:	6120      	str	r0, [r4, #16]
 800a652:	b15b      	cbz	r3, 800a66c <__smakebuf_r+0x74>
 800a654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a658:	4630      	mov	r0, r6
 800a65a:	f000 f8a3 	bl	800a7a4 <_isatty_r>
 800a65e:	b128      	cbz	r0, 800a66c <__smakebuf_r+0x74>
 800a660:	89a3      	ldrh	r3, [r4, #12]
 800a662:	f023 0303 	bic.w	r3, r3, #3
 800a666:	f043 0301 	orr.w	r3, r3, #1
 800a66a:	81a3      	strh	r3, [r4, #12]
 800a66c:	89a0      	ldrh	r0, [r4, #12]
 800a66e:	4305      	orrs	r5, r0
 800a670:	81a5      	strh	r5, [r4, #12]
 800a672:	e7cd      	b.n	800a610 <__smakebuf_r+0x18>
 800a674:	08009181 	.word	0x08009181

0800a678 <__ascii_mbtowc>:
 800a678:	b082      	sub	sp, #8
 800a67a:	b901      	cbnz	r1, 800a67e <__ascii_mbtowc+0x6>
 800a67c:	a901      	add	r1, sp, #4
 800a67e:	b142      	cbz	r2, 800a692 <__ascii_mbtowc+0x1a>
 800a680:	b14b      	cbz	r3, 800a696 <__ascii_mbtowc+0x1e>
 800a682:	7813      	ldrb	r3, [r2, #0]
 800a684:	600b      	str	r3, [r1, #0]
 800a686:	7812      	ldrb	r2, [r2, #0]
 800a688:	1e10      	subs	r0, r2, #0
 800a68a:	bf18      	it	ne
 800a68c:	2001      	movne	r0, #1
 800a68e:	b002      	add	sp, #8
 800a690:	4770      	bx	lr
 800a692:	4610      	mov	r0, r2
 800a694:	e7fb      	b.n	800a68e <__ascii_mbtowc+0x16>
 800a696:	f06f 0001 	mvn.w	r0, #1
 800a69a:	e7f8      	b.n	800a68e <__ascii_mbtowc+0x16>

0800a69c <memmove>:
 800a69c:	4288      	cmp	r0, r1
 800a69e:	b510      	push	{r4, lr}
 800a6a0:	eb01 0402 	add.w	r4, r1, r2
 800a6a4:	d902      	bls.n	800a6ac <memmove+0x10>
 800a6a6:	4284      	cmp	r4, r0
 800a6a8:	4623      	mov	r3, r4
 800a6aa:	d807      	bhi.n	800a6bc <memmove+0x20>
 800a6ac:	1e43      	subs	r3, r0, #1
 800a6ae:	42a1      	cmp	r1, r4
 800a6b0:	d008      	beq.n	800a6c4 <memmove+0x28>
 800a6b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6ba:	e7f8      	b.n	800a6ae <memmove+0x12>
 800a6bc:	4402      	add	r2, r0
 800a6be:	4601      	mov	r1, r0
 800a6c0:	428a      	cmp	r2, r1
 800a6c2:	d100      	bne.n	800a6c6 <memmove+0x2a>
 800a6c4:	bd10      	pop	{r4, pc}
 800a6c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6ce:	e7f7      	b.n	800a6c0 <memmove+0x24>

0800a6d0 <__malloc_lock>:
 800a6d0:	4801      	ldr	r0, [pc, #4]	; (800a6d8 <__malloc_lock+0x8>)
 800a6d2:	f7fe be2c 	b.w	800932e <__retarget_lock_acquire_recursive>
 800a6d6:	bf00      	nop
 800a6d8:	200004b8 	.word	0x200004b8

0800a6dc <__malloc_unlock>:
 800a6dc:	4801      	ldr	r0, [pc, #4]	; (800a6e4 <__malloc_unlock+0x8>)
 800a6de:	f7fe be27 	b.w	8009330 <__retarget_lock_release_recursive>
 800a6e2:	bf00      	nop
 800a6e4:	200004b8 	.word	0x200004b8

0800a6e8 <_realloc_r>:
 800a6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ea:	4607      	mov	r7, r0
 800a6ec:	4614      	mov	r4, r2
 800a6ee:	460e      	mov	r6, r1
 800a6f0:	b921      	cbnz	r1, 800a6fc <_realloc_r+0x14>
 800a6f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	f7ff ba10 	b.w	8009b1c <_malloc_r>
 800a6fc:	b922      	cbnz	r2, 800a708 <_realloc_r+0x20>
 800a6fe:	f7ff f9bd 	bl	8009a7c <_free_r>
 800a702:	4625      	mov	r5, r4
 800a704:	4628      	mov	r0, r5
 800a706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a708:	f000 f85c 	bl	800a7c4 <_malloc_usable_size_r>
 800a70c:	42a0      	cmp	r0, r4
 800a70e:	d20f      	bcs.n	800a730 <_realloc_r+0x48>
 800a710:	4621      	mov	r1, r4
 800a712:	4638      	mov	r0, r7
 800a714:	f7ff fa02 	bl	8009b1c <_malloc_r>
 800a718:	4605      	mov	r5, r0
 800a71a:	2800      	cmp	r0, #0
 800a71c:	d0f2      	beq.n	800a704 <_realloc_r+0x1c>
 800a71e:	4631      	mov	r1, r6
 800a720:	4622      	mov	r2, r4
 800a722:	f7fe fe0f 	bl	8009344 <memcpy>
 800a726:	4631      	mov	r1, r6
 800a728:	4638      	mov	r0, r7
 800a72a:	f7ff f9a7 	bl	8009a7c <_free_r>
 800a72e:	e7e9      	b.n	800a704 <_realloc_r+0x1c>
 800a730:	4635      	mov	r5, r6
 800a732:	e7e7      	b.n	800a704 <_realloc_r+0x1c>

0800a734 <_read_r>:
 800a734:	b538      	push	{r3, r4, r5, lr}
 800a736:	4d07      	ldr	r5, [pc, #28]	; (800a754 <_read_r+0x20>)
 800a738:	4604      	mov	r4, r0
 800a73a:	4608      	mov	r0, r1
 800a73c:	4611      	mov	r1, r2
 800a73e:	2200      	movs	r2, #0
 800a740:	602a      	str	r2, [r5, #0]
 800a742:	461a      	mov	r2, r3
 800a744:	f7fa fcee 	bl	8005124 <_read>
 800a748:	1c43      	adds	r3, r0, #1
 800a74a:	d102      	bne.n	800a752 <_read_r+0x1e>
 800a74c:	682b      	ldr	r3, [r5, #0]
 800a74e:	b103      	cbz	r3, 800a752 <_read_r+0x1e>
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	bd38      	pop	{r3, r4, r5, pc}
 800a754:	200004c0 	.word	0x200004c0

0800a758 <__ascii_wctomb>:
 800a758:	b149      	cbz	r1, 800a76e <__ascii_wctomb+0x16>
 800a75a:	2aff      	cmp	r2, #255	; 0xff
 800a75c:	bf85      	ittet	hi
 800a75e:	238a      	movhi	r3, #138	; 0x8a
 800a760:	6003      	strhi	r3, [r0, #0]
 800a762:	700a      	strbls	r2, [r1, #0]
 800a764:	f04f 30ff 	movhi.w	r0, #4294967295
 800a768:	bf98      	it	ls
 800a76a:	2001      	movls	r0, #1
 800a76c:	4770      	bx	lr
 800a76e:	4608      	mov	r0, r1
 800a770:	4770      	bx	lr

0800a772 <abort>:
 800a772:	b508      	push	{r3, lr}
 800a774:	2006      	movs	r0, #6
 800a776:	f000 f855 	bl	800a824 <raise>
 800a77a:	2001      	movs	r0, #1
 800a77c:	f7fa fcc8 	bl	8005110 <_exit>

0800a780 <_fstat_r>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	4d07      	ldr	r5, [pc, #28]	; (800a7a0 <_fstat_r+0x20>)
 800a784:	2300      	movs	r3, #0
 800a786:	4604      	mov	r4, r0
 800a788:	4608      	mov	r0, r1
 800a78a:	4611      	mov	r1, r2
 800a78c:	602b      	str	r3, [r5, #0]
 800a78e:	f7fa fd0e 	bl	80051ae <_fstat>
 800a792:	1c43      	adds	r3, r0, #1
 800a794:	d102      	bne.n	800a79c <_fstat_r+0x1c>
 800a796:	682b      	ldr	r3, [r5, #0]
 800a798:	b103      	cbz	r3, 800a79c <_fstat_r+0x1c>
 800a79a:	6023      	str	r3, [r4, #0]
 800a79c:	bd38      	pop	{r3, r4, r5, pc}
 800a79e:	bf00      	nop
 800a7a0:	200004c0 	.word	0x200004c0

0800a7a4 <_isatty_r>:
 800a7a4:	b538      	push	{r3, r4, r5, lr}
 800a7a6:	4d06      	ldr	r5, [pc, #24]	; (800a7c0 <_isatty_r+0x1c>)
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	4608      	mov	r0, r1
 800a7ae:	602b      	str	r3, [r5, #0]
 800a7b0:	f7fa fd0d 	bl	80051ce <_isatty>
 800a7b4:	1c43      	adds	r3, r0, #1
 800a7b6:	d102      	bne.n	800a7be <_isatty_r+0x1a>
 800a7b8:	682b      	ldr	r3, [r5, #0]
 800a7ba:	b103      	cbz	r3, 800a7be <_isatty_r+0x1a>
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	bd38      	pop	{r3, r4, r5, pc}
 800a7c0:	200004c0 	.word	0x200004c0

0800a7c4 <_malloc_usable_size_r>:
 800a7c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7c8:	1f18      	subs	r0, r3, #4
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	bfbc      	itt	lt
 800a7ce:	580b      	ldrlt	r3, [r1, r0]
 800a7d0:	18c0      	addlt	r0, r0, r3
 800a7d2:	4770      	bx	lr

0800a7d4 <_raise_r>:
 800a7d4:	291f      	cmp	r1, #31
 800a7d6:	b538      	push	{r3, r4, r5, lr}
 800a7d8:	4604      	mov	r4, r0
 800a7da:	460d      	mov	r5, r1
 800a7dc:	d904      	bls.n	800a7e8 <_raise_r+0x14>
 800a7de:	2316      	movs	r3, #22
 800a7e0:	6003      	str	r3, [r0, #0]
 800a7e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e6:	bd38      	pop	{r3, r4, r5, pc}
 800a7e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a7ea:	b112      	cbz	r2, 800a7f2 <_raise_r+0x1e>
 800a7ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7f0:	b94b      	cbnz	r3, 800a806 <_raise_r+0x32>
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f000 f830 	bl	800a858 <_getpid_r>
 800a7f8:	462a      	mov	r2, r5
 800a7fa:	4601      	mov	r1, r0
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a802:	f000 b817 	b.w	800a834 <_kill_r>
 800a806:	2b01      	cmp	r3, #1
 800a808:	d00a      	beq.n	800a820 <_raise_r+0x4c>
 800a80a:	1c59      	adds	r1, r3, #1
 800a80c:	d103      	bne.n	800a816 <_raise_r+0x42>
 800a80e:	2316      	movs	r3, #22
 800a810:	6003      	str	r3, [r0, #0]
 800a812:	2001      	movs	r0, #1
 800a814:	e7e7      	b.n	800a7e6 <_raise_r+0x12>
 800a816:	2400      	movs	r4, #0
 800a818:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a81c:	4628      	mov	r0, r5
 800a81e:	4798      	blx	r3
 800a820:	2000      	movs	r0, #0
 800a822:	e7e0      	b.n	800a7e6 <_raise_r+0x12>

0800a824 <raise>:
 800a824:	4b02      	ldr	r3, [pc, #8]	; (800a830 <raise+0xc>)
 800a826:	4601      	mov	r1, r0
 800a828:	6818      	ldr	r0, [r3, #0]
 800a82a:	f7ff bfd3 	b.w	800a7d4 <_raise_r>
 800a82e:	bf00      	nop
 800a830:	200000a4 	.word	0x200000a4

0800a834 <_kill_r>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	4d07      	ldr	r5, [pc, #28]	; (800a854 <_kill_r+0x20>)
 800a838:	2300      	movs	r3, #0
 800a83a:	4604      	mov	r4, r0
 800a83c:	4608      	mov	r0, r1
 800a83e:	4611      	mov	r1, r2
 800a840:	602b      	str	r3, [r5, #0]
 800a842:	f7fa fc55 	bl	80050f0 <_kill>
 800a846:	1c43      	adds	r3, r0, #1
 800a848:	d102      	bne.n	800a850 <_kill_r+0x1c>
 800a84a:	682b      	ldr	r3, [r5, #0]
 800a84c:	b103      	cbz	r3, 800a850 <_kill_r+0x1c>
 800a84e:	6023      	str	r3, [r4, #0]
 800a850:	bd38      	pop	{r3, r4, r5, pc}
 800a852:	bf00      	nop
 800a854:	200004c0 	.word	0x200004c0

0800a858 <_getpid_r>:
 800a858:	f7fa bc42 	b.w	80050e0 <_getpid>
 800a85c:	0000      	movs	r0, r0
	...

0800a860 <atan>:
 800a860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a864:	ec55 4b10 	vmov	r4, r5, d0
 800a868:	4bc3      	ldr	r3, [pc, #780]	; (800ab78 <atan+0x318>)
 800a86a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a86e:	429e      	cmp	r6, r3
 800a870:	46ab      	mov	fp, r5
 800a872:	dd18      	ble.n	800a8a6 <atan+0x46>
 800a874:	4bc1      	ldr	r3, [pc, #772]	; (800ab7c <atan+0x31c>)
 800a876:	429e      	cmp	r6, r3
 800a878:	dc01      	bgt.n	800a87e <atan+0x1e>
 800a87a:	d109      	bne.n	800a890 <atan+0x30>
 800a87c:	b144      	cbz	r4, 800a890 <atan+0x30>
 800a87e:	4622      	mov	r2, r4
 800a880:	462b      	mov	r3, r5
 800a882:	4620      	mov	r0, r4
 800a884:	4629      	mov	r1, r5
 800a886:	f7f5 fd01 	bl	800028c <__adddf3>
 800a88a:	4604      	mov	r4, r0
 800a88c:	460d      	mov	r5, r1
 800a88e:	e006      	b.n	800a89e <atan+0x3e>
 800a890:	f1bb 0f00 	cmp.w	fp, #0
 800a894:	f300 8131 	bgt.w	800aafa <atan+0x29a>
 800a898:	a59b      	add	r5, pc, #620	; (adr r5, 800ab08 <atan+0x2a8>)
 800a89a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a89e:	ec45 4b10 	vmov	d0, r4, r5
 800a8a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a6:	4bb6      	ldr	r3, [pc, #728]	; (800ab80 <atan+0x320>)
 800a8a8:	429e      	cmp	r6, r3
 800a8aa:	dc14      	bgt.n	800a8d6 <atan+0x76>
 800a8ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a8b0:	429e      	cmp	r6, r3
 800a8b2:	dc0d      	bgt.n	800a8d0 <atan+0x70>
 800a8b4:	a396      	add	r3, pc, #600	; (adr r3, 800ab10 <atan+0x2b0>)
 800a8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ba:	ee10 0a10 	vmov	r0, s0
 800a8be:	4629      	mov	r1, r5
 800a8c0:	f7f5 fce4 	bl	800028c <__adddf3>
 800a8c4:	4baf      	ldr	r3, [pc, #700]	; (800ab84 <atan+0x324>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f7f6 f926 	bl	8000b18 <__aeabi_dcmpgt>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d1e6      	bne.n	800a89e <atan+0x3e>
 800a8d0:	f04f 3aff 	mov.w	sl, #4294967295
 800a8d4:	e02b      	b.n	800a92e <atan+0xce>
 800a8d6:	f000 f963 	bl	800aba0 <fabs>
 800a8da:	4bab      	ldr	r3, [pc, #684]	; (800ab88 <atan+0x328>)
 800a8dc:	429e      	cmp	r6, r3
 800a8de:	ec55 4b10 	vmov	r4, r5, d0
 800a8e2:	f300 80bf 	bgt.w	800aa64 <atan+0x204>
 800a8e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a8ea:	429e      	cmp	r6, r3
 800a8ec:	f300 80a0 	bgt.w	800aa30 <atan+0x1d0>
 800a8f0:	ee10 2a10 	vmov	r2, s0
 800a8f4:	ee10 0a10 	vmov	r0, s0
 800a8f8:	462b      	mov	r3, r5
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	f7f5 fcc6 	bl	800028c <__adddf3>
 800a900:	4ba0      	ldr	r3, [pc, #640]	; (800ab84 <atan+0x324>)
 800a902:	2200      	movs	r2, #0
 800a904:	f7f5 fcc0 	bl	8000288 <__aeabi_dsub>
 800a908:	2200      	movs	r2, #0
 800a90a:	4606      	mov	r6, r0
 800a90c:	460f      	mov	r7, r1
 800a90e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a912:	4620      	mov	r0, r4
 800a914:	4629      	mov	r1, r5
 800a916:	f7f5 fcb9 	bl	800028c <__adddf3>
 800a91a:	4602      	mov	r2, r0
 800a91c:	460b      	mov	r3, r1
 800a91e:	4630      	mov	r0, r6
 800a920:	4639      	mov	r1, r7
 800a922:	f7f5 ff93 	bl	800084c <__aeabi_ddiv>
 800a926:	f04f 0a00 	mov.w	sl, #0
 800a92a:	4604      	mov	r4, r0
 800a92c:	460d      	mov	r5, r1
 800a92e:	4622      	mov	r2, r4
 800a930:	462b      	mov	r3, r5
 800a932:	4620      	mov	r0, r4
 800a934:	4629      	mov	r1, r5
 800a936:	f7f5 fe5f 	bl	80005f8 <__aeabi_dmul>
 800a93a:	4602      	mov	r2, r0
 800a93c:	460b      	mov	r3, r1
 800a93e:	4680      	mov	r8, r0
 800a940:	4689      	mov	r9, r1
 800a942:	f7f5 fe59 	bl	80005f8 <__aeabi_dmul>
 800a946:	a374      	add	r3, pc, #464	; (adr r3, 800ab18 <atan+0x2b8>)
 800a948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94c:	4606      	mov	r6, r0
 800a94e:	460f      	mov	r7, r1
 800a950:	f7f5 fe52 	bl	80005f8 <__aeabi_dmul>
 800a954:	a372      	add	r3, pc, #456	; (adr r3, 800ab20 <atan+0x2c0>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	f7f5 fc97 	bl	800028c <__adddf3>
 800a95e:	4632      	mov	r2, r6
 800a960:	463b      	mov	r3, r7
 800a962:	f7f5 fe49 	bl	80005f8 <__aeabi_dmul>
 800a966:	a370      	add	r3, pc, #448	; (adr r3, 800ab28 <atan+0x2c8>)
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	f7f5 fc8e 	bl	800028c <__adddf3>
 800a970:	4632      	mov	r2, r6
 800a972:	463b      	mov	r3, r7
 800a974:	f7f5 fe40 	bl	80005f8 <__aeabi_dmul>
 800a978:	a36d      	add	r3, pc, #436	; (adr r3, 800ab30 <atan+0x2d0>)
 800a97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97e:	f7f5 fc85 	bl	800028c <__adddf3>
 800a982:	4632      	mov	r2, r6
 800a984:	463b      	mov	r3, r7
 800a986:	f7f5 fe37 	bl	80005f8 <__aeabi_dmul>
 800a98a:	a36b      	add	r3, pc, #428	; (adr r3, 800ab38 <atan+0x2d8>)
 800a98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a990:	f7f5 fc7c 	bl	800028c <__adddf3>
 800a994:	4632      	mov	r2, r6
 800a996:	463b      	mov	r3, r7
 800a998:	f7f5 fe2e 	bl	80005f8 <__aeabi_dmul>
 800a99c:	a368      	add	r3, pc, #416	; (adr r3, 800ab40 <atan+0x2e0>)
 800a99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a2:	f7f5 fc73 	bl	800028c <__adddf3>
 800a9a6:	4642      	mov	r2, r8
 800a9a8:	464b      	mov	r3, r9
 800a9aa:	f7f5 fe25 	bl	80005f8 <__aeabi_dmul>
 800a9ae:	a366      	add	r3, pc, #408	; (adr r3, 800ab48 <atan+0x2e8>)
 800a9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b4:	4680      	mov	r8, r0
 800a9b6:	4689      	mov	r9, r1
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	4639      	mov	r1, r7
 800a9bc:	f7f5 fe1c 	bl	80005f8 <__aeabi_dmul>
 800a9c0:	a363      	add	r3, pc, #396	; (adr r3, 800ab50 <atan+0x2f0>)
 800a9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c6:	f7f5 fc5f 	bl	8000288 <__aeabi_dsub>
 800a9ca:	4632      	mov	r2, r6
 800a9cc:	463b      	mov	r3, r7
 800a9ce:	f7f5 fe13 	bl	80005f8 <__aeabi_dmul>
 800a9d2:	a361      	add	r3, pc, #388	; (adr r3, 800ab58 <atan+0x2f8>)
 800a9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d8:	f7f5 fc56 	bl	8000288 <__aeabi_dsub>
 800a9dc:	4632      	mov	r2, r6
 800a9de:	463b      	mov	r3, r7
 800a9e0:	f7f5 fe0a 	bl	80005f8 <__aeabi_dmul>
 800a9e4:	a35e      	add	r3, pc, #376	; (adr r3, 800ab60 <atan+0x300>)
 800a9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ea:	f7f5 fc4d 	bl	8000288 <__aeabi_dsub>
 800a9ee:	4632      	mov	r2, r6
 800a9f0:	463b      	mov	r3, r7
 800a9f2:	f7f5 fe01 	bl	80005f8 <__aeabi_dmul>
 800a9f6:	a35c      	add	r3, pc, #368	; (adr r3, 800ab68 <atan+0x308>)
 800a9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fc:	f7f5 fc44 	bl	8000288 <__aeabi_dsub>
 800aa00:	4632      	mov	r2, r6
 800aa02:	463b      	mov	r3, r7
 800aa04:	f7f5 fdf8 	bl	80005f8 <__aeabi_dmul>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	4640      	mov	r0, r8
 800aa0e:	4649      	mov	r1, r9
 800aa10:	f7f5 fc3c 	bl	800028c <__adddf3>
 800aa14:	4622      	mov	r2, r4
 800aa16:	462b      	mov	r3, r5
 800aa18:	f7f5 fdee 	bl	80005f8 <__aeabi_dmul>
 800aa1c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800aa20:	4602      	mov	r2, r0
 800aa22:	460b      	mov	r3, r1
 800aa24:	d14b      	bne.n	800aabe <atan+0x25e>
 800aa26:	4620      	mov	r0, r4
 800aa28:	4629      	mov	r1, r5
 800aa2a:	f7f5 fc2d 	bl	8000288 <__aeabi_dsub>
 800aa2e:	e72c      	b.n	800a88a <atan+0x2a>
 800aa30:	ee10 0a10 	vmov	r0, s0
 800aa34:	4b53      	ldr	r3, [pc, #332]	; (800ab84 <atan+0x324>)
 800aa36:	2200      	movs	r2, #0
 800aa38:	4629      	mov	r1, r5
 800aa3a:	f7f5 fc25 	bl	8000288 <__aeabi_dsub>
 800aa3e:	4b51      	ldr	r3, [pc, #324]	; (800ab84 <atan+0x324>)
 800aa40:	4606      	mov	r6, r0
 800aa42:	460f      	mov	r7, r1
 800aa44:	2200      	movs	r2, #0
 800aa46:	4620      	mov	r0, r4
 800aa48:	4629      	mov	r1, r5
 800aa4a:	f7f5 fc1f 	bl	800028c <__adddf3>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	4630      	mov	r0, r6
 800aa54:	4639      	mov	r1, r7
 800aa56:	f7f5 fef9 	bl	800084c <__aeabi_ddiv>
 800aa5a:	f04f 0a01 	mov.w	sl, #1
 800aa5e:	4604      	mov	r4, r0
 800aa60:	460d      	mov	r5, r1
 800aa62:	e764      	b.n	800a92e <atan+0xce>
 800aa64:	4b49      	ldr	r3, [pc, #292]	; (800ab8c <atan+0x32c>)
 800aa66:	429e      	cmp	r6, r3
 800aa68:	da1d      	bge.n	800aaa6 <atan+0x246>
 800aa6a:	ee10 0a10 	vmov	r0, s0
 800aa6e:	4b48      	ldr	r3, [pc, #288]	; (800ab90 <atan+0x330>)
 800aa70:	2200      	movs	r2, #0
 800aa72:	4629      	mov	r1, r5
 800aa74:	f7f5 fc08 	bl	8000288 <__aeabi_dsub>
 800aa78:	4b45      	ldr	r3, [pc, #276]	; (800ab90 <atan+0x330>)
 800aa7a:	4606      	mov	r6, r0
 800aa7c:	460f      	mov	r7, r1
 800aa7e:	2200      	movs	r2, #0
 800aa80:	4620      	mov	r0, r4
 800aa82:	4629      	mov	r1, r5
 800aa84:	f7f5 fdb8 	bl	80005f8 <__aeabi_dmul>
 800aa88:	4b3e      	ldr	r3, [pc, #248]	; (800ab84 <atan+0x324>)
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f7f5 fbfe 	bl	800028c <__adddf3>
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	4630      	mov	r0, r6
 800aa96:	4639      	mov	r1, r7
 800aa98:	f7f5 fed8 	bl	800084c <__aeabi_ddiv>
 800aa9c:	f04f 0a02 	mov.w	sl, #2
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	460d      	mov	r5, r1
 800aaa4:	e743      	b.n	800a92e <atan+0xce>
 800aaa6:	462b      	mov	r3, r5
 800aaa8:	ee10 2a10 	vmov	r2, s0
 800aaac:	4939      	ldr	r1, [pc, #228]	; (800ab94 <atan+0x334>)
 800aaae:	2000      	movs	r0, #0
 800aab0:	f7f5 fecc 	bl	800084c <__aeabi_ddiv>
 800aab4:	f04f 0a03 	mov.w	sl, #3
 800aab8:	4604      	mov	r4, r0
 800aaba:	460d      	mov	r5, r1
 800aabc:	e737      	b.n	800a92e <atan+0xce>
 800aabe:	4b36      	ldr	r3, [pc, #216]	; (800ab98 <atan+0x338>)
 800aac0:	4e36      	ldr	r6, [pc, #216]	; (800ab9c <atan+0x33c>)
 800aac2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800aac6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800aaca:	e9da 2300 	ldrd	r2, r3, [sl]
 800aace:	f7f5 fbdb 	bl	8000288 <__aeabi_dsub>
 800aad2:	4622      	mov	r2, r4
 800aad4:	462b      	mov	r3, r5
 800aad6:	f7f5 fbd7 	bl	8000288 <__aeabi_dsub>
 800aada:	4602      	mov	r2, r0
 800aadc:	460b      	mov	r3, r1
 800aade:	e9d6 0100 	ldrd	r0, r1, [r6]
 800aae2:	f7f5 fbd1 	bl	8000288 <__aeabi_dsub>
 800aae6:	f1bb 0f00 	cmp.w	fp, #0
 800aaea:	4604      	mov	r4, r0
 800aaec:	460d      	mov	r5, r1
 800aaee:	f6bf aed6 	bge.w	800a89e <atan+0x3e>
 800aaf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aaf6:	461d      	mov	r5, r3
 800aaf8:	e6d1      	b.n	800a89e <atan+0x3e>
 800aafa:	a51d      	add	r5, pc, #116	; (adr r5, 800ab70 <atan+0x310>)
 800aafc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ab00:	e6cd      	b.n	800a89e <atan+0x3e>
 800ab02:	bf00      	nop
 800ab04:	f3af 8000 	nop.w
 800ab08:	54442d18 	.word	0x54442d18
 800ab0c:	bff921fb 	.word	0xbff921fb
 800ab10:	8800759c 	.word	0x8800759c
 800ab14:	7e37e43c 	.word	0x7e37e43c
 800ab18:	e322da11 	.word	0xe322da11
 800ab1c:	3f90ad3a 	.word	0x3f90ad3a
 800ab20:	24760deb 	.word	0x24760deb
 800ab24:	3fa97b4b 	.word	0x3fa97b4b
 800ab28:	a0d03d51 	.word	0xa0d03d51
 800ab2c:	3fb10d66 	.word	0x3fb10d66
 800ab30:	c54c206e 	.word	0xc54c206e
 800ab34:	3fb745cd 	.word	0x3fb745cd
 800ab38:	920083ff 	.word	0x920083ff
 800ab3c:	3fc24924 	.word	0x3fc24924
 800ab40:	5555550d 	.word	0x5555550d
 800ab44:	3fd55555 	.word	0x3fd55555
 800ab48:	2c6a6c2f 	.word	0x2c6a6c2f
 800ab4c:	bfa2b444 	.word	0xbfa2b444
 800ab50:	52defd9a 	.word	0x52defd9a
 800ab54:	3fadde2d 	.word	0x3fadde2d
 800ab58:	af749a6d 	.word	0xaf749a6d
 800ab5c:	3fb3b0f2 	.word	0x3fb3b0f2
 800ab60:	fe231671 	.word	0xfe231671
 800ab64:	3fbc71c6 	.word	0x3fbc71c6
 800ab68:	9998ebc4 	.word	0x9998ebc4
 800ab6c:	3fc99999 	.word	0x3fc99999
 800ab70:	54442d18 	.word	0x54442d18
 800ab74:	3ff921fb 	.word	0x3ff921fb
 800ab78:	440fffff 	.word	0x440fffff
 800ab7c:	7ff00000 	.word	0x7ff00000
 800ab80:	3fdbffff 	.word	0x3fdbffff
 800ab84:	3ff00000 	.word	0x3ff00000
 800ab88:	3ff2ffff 	.word	0x3ff2ffff
 800ab8c:	40038000 	.word	0x40038000
 800ab90:	3ff80000 	.word	0x3ff80000
 800ab94:	bff00000 	.word	0xbff00000
 800ab98:	080180d8 	.word	0x080180d8
 800ab9c:	080180b8 	.word	0x080180b8

0800aba0 <fabs>:
 800aba0:	ec51 0b10 	vmov	r0, r1, d0
 800aba4:	ee10 2a10 	vmov	r2, s0
 800aba8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800abac:	ec43 2b10 	vmov	d0, r2, r3
 800abb0:	4770      	bx	lr

0800abb2 <atan2>:
 800abb2:	f000 b835 	b.w	800ac20 <__ieee754_atan2>
	...

0800abb8 <sqrt>:
 800abb8:	b538      	push	{r3, r4, r5, lr}
 800abba:	ed2d 8b02 	vpush	{d8}
 800abbe:	ec55 4b10 	vmov	r4, r5, d0
 800abc2:	f000 f8f7 	bl	800adb4 <__ieee754_sqrt>
 800abc6:	4b15      	ldr	r3, [pc, #84]	; (800ac1c <sqrt+0x64>)
 800abc8:	eeb0 8a40 	vmov.f32	s16, s0
 800abcc:	eef0 8a60 	vmov.f32	s17, s1
 800abd0:	f993 3000 	ldrsb.w	r3, [r3]
 800abd4:	3301      	adds	r3, #1
 800abd6:	d019      	beq.n	800ac0c <sqrt+0x54>
 800abd8:	4622      	mov	r2, r4
 800abda:	462b      	mov	r3, r5
 800abdc:	4620      	mov	r0, r4
 800abde:	4629      	mov	r1, r5
 800abe0:	f7f5 ffa4 	bl	8000b2c <__aeabi_dcmpun>
 800abe4:	b990      	cbnz	r0, 800ac0c <sqrt+0x54>
 800abe6:	2200      	movs	r2, #0
 800abe8:	2300      	movs	r3, #0
 800abea:	4620      	mov	r0, r4
 800abec:	4629      	mov	r1, r5
 800abee:	f7f5 ff75 	bl	8000adc <__aeabi_dcmplt>
 800abf2:	b158      	cbz	r0, 800ac0c <sqrt+0x54>
 800abf4:	f7fc ff54 	bl	8007aa0 <__errno>
 800abf8:	2321      	movs	r3, #33	; 0x21
 800abfa:	6003      	str	r3, [r0, #0]
 800abfc:	2200      	movs	r2, #0
 800abfe:	2300      	movs	r3, #0
 800ac00:	4610      	mov	r0, r2
 800ac02:	4619      	mov	r1, r3
 800ac04:	f7f5 fe22 	bl	800084c <__aeabi_ddiv>
 800ac08:	ec41 0b18 	vmov	d8, r0, r1
 800ac0c:	eeb0 0a48 	vmov.f32	s0, s16
 800ac10:	eef0 0a68 	vmov.f32	s1, s17
 800ac14:	ecbd 8b02 	vpop	{d8}
 800ac18:	bd38      	pop	{r3, r4, r5, pc}
 800ac1a:	bf00      	nop
 800ac1c:	20000274 	.word	0x20000274

0800ac20 <__ieee754_atan2>:
 800ac20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac24:	ec57 6b11 	vmov	r6, r7, d1
 800ac28:	4273      	negs	r3, r6
 800ac2a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800adb0 <__ieee754_atan2+0x190>
 800ac2e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ac32:	4333      	orrs	r3, r6
 800ac34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ac38:	4573      	cmp	r3, lr
 800ac3a:	ec51 0b10 	vmov	r0, r1, d0
 800ac3e:	ee11 8a10 	vmov	r8, s2
 800ac42:	d80a      	bhi.n	800ac5a <__ieee754_atan2+0x3a>
 800ac44:	4244      	negs	r4, r0
 800ac46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac4a:	4304      	orrs	r4, r0
 800ac4c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ac50:	4574      	cmp	r4, lr
 800ac52:	ee10 9a10 	vmov	r9, s0
 800ac56:	468c      	mov	ip, r1
 800ac58:	d907      	bls.n	800ac6a <__ieee754_atan2+0x4a>
 800ac5a:	4632      	mov	r2, r6
 800ac5c:	463b      	mov	r3, r7
 800ac5e:	f7f5 fb15 	bl	800028c <__adddf3>
 800ac62:	ec41 0b10 	vmov	d0, r0, r1
 800ac66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac6a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ac6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ac72:	4334      	orrs	r4, r6
 800ac74:	d103      	bne.n	800ac7e <__ieee754_atan2+0x5e>
 800ac76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac7a:	f7ff bdf1 	b.w	800a860 <atan>
 800ac7e:	17bc      	asrs	r4, r7, #30
 800ac80:	f004 0402 	and.w	r4, r4, #2
 800ac84:	ea53 0909 	orrs.w	r9, r3, r9
 800ac88:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ac8c:	d107      	bne.n	800ac9e <__ieee754_atan2+0x7e>
 800ac8e:	2c02      	cmp	r4, #2
 800ac90:	d060      	beq.n	800ad54 <__ieee754_atan2+0x134>
 800ac92:	2c03      	cmp	r4, #3
 800ac94:	d1e5      	bne.n	800ac62 <__ieee754_atan2+0x42>
 800ac96:	a142      	add	r1, pc, #264	; (adr r1, 800ada0 <__ieee754_atan2+0x180>)
 800ac98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac9c:	e7e1      	b.n	800ac62 <__ieee754_atan2+0x42>
 800ac9e:	ea52 0808 	orrs.w	r8, r2, r8
 800aca2:	d106      	bne.n	800acb2 <__ieee754_atan2+0x92>
 800aca4:	f1bc 0f00 	cmp.w	ip, #0
 800aca8:	da5f      	bge.n	800ad6a <__ieee754_atan2+0x14a>
 800acaa:	a13f      	add	r1, pc, #252	; (adr r1, 800ada8 <__ieee754_atan2+0x188>)
 800acac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acb0:	e7d7      	b.n	800ac62 <__ieee754_atan2+0x42>
 800acb2:	4572      	cmp	r2, lr
 800acb4:	d10f      	bne.n	800acd6 <__ieee754_atan2+0xb6>
 800acb6:	4293      	cmp	r3, r2
 800acb8:	f104 34ff 	add.w	r4, r4, #4294967295
 800acbc:	d107      	bne.n	800acce <__ieee754_atan2+0xae>
 800acbe:	2c02      	cmp	r4, #2
 800acc0:	d84c      	bhi.n	800ad5c <__ieee754_atan2+0x13c>
 800acc2:	4b35      	ldr	r3, [pc, #212]	; (800ad98 <__ieee754_atan2+0x178>)
 800acc4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800acc8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800accc:	e7c9      	b.n	800ac62 <__ieee754_atan2+0x42>
 800acce:	2c02      	cmp	r4, #2
 800acd0:	d848      	bhi.n	800ad64 <__ieee754_atan2+0x144>
 800acd2:	4b32      	ldr	r3, [pc, #200]	; (800ad9c <__ieee754_atan2+0x17c>)
 800acd4:	e7f6      	b.n	800acc4 <__ieee754_atan2+0xa4>
 800acd6:	4573      	cmp	r3, lr
 800acd8:	d0e4      	beq.n	800aca4 <__ieee754_atan2+0x84>
 800acda:	1a9b      	subs	r3, r3, r2
 800acdc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ace0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ace4:	da1e      	bge.n	800ad24 <__ieee754_atan2+0x104>
 800ace6:	2f00      	cmp	r7, #0
 800ace8:	da01      	bge.n	800acee <__ieee754_atan2+0xce>
 800acea:	323c      	adds	r2, #60	; 0x3c
 800acec:	db1e      	blt.n	800ad2c <__ieee754_atan2+0x10c>
 800acee:	4632      	mov	r2, r6
 800acf0:	463b      	mov	r3, r7
 800acf2:	f7f5 fdab 	bl	800084c <__aeabi_ddiv>
 800acf6:	ec41 0b10 	vmov	d0, r0, r1
 800acfa:	f7ff ff51 	bl	800aba0 <fabs>
 800acfe:	f7ff fdaf 	bl	800a860 <atan>
 800ad02:	ec51 0b10 	vmov	r0, r1, d0
 800ad06:	2c01      	cmp	r4, #1
 800ad08:	d013      	beq.n	800ad32 <__ieee754_atan2+0x112>
 800ad0a:	2c02      	cmp	r4, #2
 800ad0c:	d015      	beq.n	800ad3a <__ieee754_atan2+0x11a>
 800ad0e:	2c00      	cmp	r4, #0
 800ad10:	d0a7      	beq.n	800ac62 <__ieee754_atan2+0x42>
 800ad12:	a319      	add	r3, pc, #100	; (adr r3, 800ad78 <__ieee754_atan2+0x158>)
 800ad14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad18:	f7f5 fab6 	bl	8000288 <__aeabi_dsub>
 800ad1c:	a318      	add	r3, pc, #96	; (adr r3, 800ad80 <__ieee754_atan2+0x160>)
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	e014      	b.n	800ad4e <__ieee754_atan2+0x12e>
 800ad24:	a118      	add	r1, pc, #96	; (adr r1, 800ad88 <__ieee754_atan2+0x168>)
 800ad26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad2a:	e7ec      	b.n	800ad06 <__ieee754_atan2+0xe6>
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	2100      	movs	r1, #0
 800ad30:	e7e9      	b.n	800ad06 <__ieee754_atan2+0xe6>
 800ad32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad36:	4619      	mov	r1, r3
 800ad38:	e793      	b.n	800ac62 <__ieee754_atan2+0x42>
 800ad3a:	a30f      	add	r3, pc, #60	; (adr r3, 800ad78 <__ieee754_atan2+0x158>)
 800ad3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad40:	f7f5 faa2 	bl	8000288 <__aeabi_dsub>
 800ad44:	4602      	mov	r2, r0
 800ad46:	460b      	mov	r3, r1
 800ad48:	a10d      	add	r1, pc, #52	; (adr r1, 800ad80 <__ieee754_atan2+0x160>)
 800ad4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad4e:	f7f5 fa9b 	bl	8000288 <__aeabi_dsub>
 800ad52:	e786      	b.n	800ac62 <__ieee754_atan2+0x42>
 800ad54:	a10a      	add	r1, pc, #40	; (adr r1, 800ad80 <__ieee754_atan2+0x160>)
 800ad56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad5a:	e782      	b.n	800ac62 <__ieee754_atan2+0x42>
 800ad5c:	a10c      	add	r1, pc, #48	; (adr r1, 800ad90 <__ieee754_atan2+0x170>)
 800ad5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad62:	e77e      	b.n	800ac62 <__ieee754_atan2+0x42>
 800ad64:	2000      	movs	r0, #0
 800ad66:	2100      	movs	r1, #0
 800ad68:	e77b      	b.n	800ac62 <__ieee754_atan2+0x42>
 800ad6a:	a107      	add	r1, pc, #28	; (adr r1, 800ad88 <__ieee754_atan2+0x168>)
 800ad6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad70:	e777      	b.n	800ac62 <__ieee754_atan2+0x42>
 800ad72:	bf00      	nop
 800ad74:	f3af 8000 	nop.w
 800ad78:	33145c07 	.word	0x33145c07
 800ad7c:	3ca1a626 	.word	0x3ca1a626
 800ad80:	54442d18 	.word	0x54442d18
 800ad84:	400921fb 	.word	0x400921fb
 800ad88:	54442d18 	.word	0x54442d18
 800ad8c:	3ff921fb 	.word	0x3ff921fb
 800ad90:	54442d18 	.word	0x54442d18
 800ad94:	3fe921fb 	.word	0x3fe921fb
 800ad98:	080180f8 	.word	0x080180f8
 800ad9c:	08018110 	.word	0x08018110
 800ada0:	54442d18 	.word	0x54442d18
 800ada4:	c00921fb 	.word	0xc00921fb
 800ada8:	54442d18 	.word	0x54442d18
 800adac:	bff921fb 	.word	0xbff921fb
 800adb0:	7ff00000 	.word	0x7ff00000

0800adb4 <__ieee754_sqrt>:
 800adb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adb8:	ec55 4b10 	vmov	r4, r5, d0
 800adbc:	4e56      	ldr	r6, [pc, #344]	; (800af18 <__ieee754_sqrt+0x164>)
 800adbe:	43ae      	bics	r6, r5
 800adc0:	ee10 0a10 	vmov	r0, s0
 800adc4:	ee10 3a10 	vmov	r3, s0
 800adc8:	4629      	mov	r1, r5
 800adca:	462a      	mov	r2, r5
 800adcc:	d110      	bne.n	800adf0 <__ieee754_sqrt+0x3c>
 800adce:	ee10 2a10 	vmov	r2, s0
 800add2:	462b      	mov	r3, r5
 800add4:	f7f5 fc10 	bl	80005f8 <__aeabi_dmul>
 800add8:	4602      	mov	r2, r0
 800adda:	460b      	mov	r3, r1
 800addc:	4620      	mov	r0, r4
 800adde:	4629      	mov	r1, r5
 800ade0:	f7f5 fa54 	bl	800028c <__adddf3>
 800ade4:	4604      	mov	r4, r0
 800ade6:	460d      	mov	r5, r1
 800ade8:	ec45 4b10 	vmov	d0, r4, r5
 800adec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf0:	2d00      	cmp	r5, #0
 800adf2:	dc10      	bgt.n	800ae16 <__ieee754_sqrt+0x62>
 800adf4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800adf8:	4330      	orrs	r0, r6
 800adfa:	d0f5      	beq.n	800ade8 <__ieee754_sqrt+0x34>
 800adfc:	b15d      	cbz	r5, 800ae16 <__ieee754_sqrt+0x62>
 800adfe:	ee10 2a10 	vmov	r2, s0
 800ae02:	462b      	mov	r3, r5
 800ae04:	ee10 0a10 	vmov	r0, s0
 800ae08:	f7f5 fa3e 	bl	8000288 <__aeabi_dsub>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	460b      	mov	r3, r1
 800ae10:	f7f5 fd1c 	bl	800084c <__aeabi_ddiv>
 800ae14:	e7e6      	b.n	800ade4 <__ieee754_sqrt+0x30>
 800ae16:	1509      	asrs	r1, r1, #20
 800ae18:	d076      	beq.n	800af08 <__ieee754_sqrt+0x154>
 800ae1a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ae1e:	07ce      	lsls	r6, r1, #31
 800ae20:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ae24:	bf5e      	ittt	pl
 800ae26:	0fda      	lsrpl	r2, r3, #31
 800ae28:	005b      	lslpl	r3, r3, #1
 800ae2a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800ae2e:	0fda      	lsrs	r2, r3, #31
 800ae30:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ae34:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800ae38:	2000      	movs	r0, #0
 800ae3a:	106d      	asrs	r5, r5, #1
 800ae3c:	005b      	lsls	r3, r3, #1
 800ae3e:	f04f 0e16 	mov.w	lr, #22
 800ae42:	4684      	mov	ip, r0
 800ae44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae48:	eb0c 0401 	add.w	r4, ip, r1
 800ae4c:	4294      	cmp	r4, r2
 800ae4e:	bfde      	ittt	le
 800ae50:	1b12      	suble	r2, r2, r4
 800ae52:	eb04 0c01 	addle.w	ip, r4, r1
 800ae56:	1840      	addle	r0, r0, r1
 800ae58:	0052      	lsls	r2, r2, #1
 800ae5a:	f1be 0e01 	subs.w	lr, lr, #1
 800ae5e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ae62:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ae66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae6a:	d1ed      	bne.n	800ae48 <__ieee754_sqrt+0x94>
 800ae6c:	4671      	mov	r1, lr
 800ae6e:	2720      	movs	r7, #32
 800ae70:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ae74:	4562      	cmp	r2, ip
 800ae76:	eb04 060e 	add.w	r6, r4, lr
 800ae7a:	dc02      	bgt.n	800ae82 <__ieee754_sqrt+0xce>
 800ae7c:	d113      	bne.n	800aea6 <__ieee754_sqrt+0xf2>
 800ae7e:	429e      	cmp	r6, r3
 800ae80:	d811      	bhi.n	800aea6 <__ieee754_sqrt+0xf2>
 800ae82:	2e00      	cmp	r6, #0
 800ae84:	eb06 0e04 	add.w	lr, r6, r4
 800ae88:	da43      	bge.n	800af12 <__ieee754_sqrt+0x15e>
 800ae8a:	f1be 0f00 	cmp.w	lr, #0
 800ae8e:	db40      	blt.n	800af12 <__ieee754_sqrt+0x15e>
 800ae90:	f10c 0801 	add.w	r8, ip, #1
 800ae94:	eba2 020c 	sub.w	r2, r2, ip
 800ae98:	429e      	cmp	r6, r3
 800ae9a:	bf88      	it	hi
 800ae9c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800aea0:	1b9b      	subs	r3, r3, r6
 800aea2:	4421      	add	r1, r4
 800aea4:	46c4      	mov	ip, r8
 800aea6:	0052      	lsls	r2, r2, #1
 800aea8:	3f01      	subs	r7, #1
 800aeaa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800aeae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800aeb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aeb6:	d1dd      	bne.n	800ae74 <__ieee754_sqrt+0xc0>
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	d006      	beq.n	800aeca <__ieee754_sqrt+0x116>
 800aebc:	1c4c      	adds	r4, r1, #1
 800aebe:	bf13      	iteet	ne
 800aec0:	3101      	addne	r1, #1
 800aec2:	3001      	addeq	r0, #1
 800aec4:	4639      	moveq	r1, r7
 800aec6:	f021 0101 	bicne.w	r1, r1, #1
 800aeca:	1043      	asrs	r3, r0, #1
 800aecc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800aed0:	0849      	lsrs	r1, r1, #1
 800aed2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800aed6:	07c2      	lsls	r2, r0, #31
 800aed8:	bf48      	it	mi
 800aeda:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800aede:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800aee2:	460c      	mov	r4, r1
 800aee4:	463d      	mov	r5, r7
 800aee6:	e77f      	b.n	800ade8 <__ieee754_sqrt+0x34>
 800aee8:	0ada      	lsrs	r2, r3, #11
 800aeea:	3815      	subs	r0, #21
 800aeec:	055b      	lsls	r3, r3, #21
 800aeee:	2a00      	cmp	r2, #0
 800aef0:	d0fa      	beq.n	800aee8 <__ieee754_sqrt+0x134>
 800aef2:	02d7      	lsls	r7, r2, #11
 800aef4:	d50a      	bpl.n	800af0c <__ieee754_sqrt+0x158>
 800aef6:	f1c1 0420 	rsb	r4, r1, #32
 800aefa:	fa23 f404 	lsr.w	r4, r3, r4
 800aefe:	1e4d      	subs	r5, r1, #1
 800af00:	408b      	lsls	r3, r1
 800af02:	4322      	orrs	r2, r4
 800af04:	1b41      	subs	r1, r0, r5
 800af06:	e788      	b.n	800ae1a <__ieee754_sqrt+0x66>
 800af08:	4608      	mov	r0, r1
 800af0a:	e7f0      	b.n	800aeee <__ieee754_sqrt+0x13a>
 800af0c:	0052      	lsls	r2, r2, #1
 800af0e:	3101      	adds	r1, #1
 800af10:	e7ef      	b.n	800aef2 <__ieee754_sqrt+0x13e>
 800af12:	46e0      	mov	r8, ip
 800af14:	e7be      	b.n	800ae94 <__ieee754_sqrt+0xe0>
 800af16:	bf00      	nop
 800af18:	7ff00000 	.word	0x7ff00000

0800af1c <_init>:
 800af1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af1e:	bf00      	nop
 800af20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af22:	bc08      	pop	{r3}
 800af24:	469e      	mov	lr, r3
 800af26:	4770      	bx	lr

0800af28 <_fini>:
 800af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2a:	bf00      	nop
 800af2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af2e:	bc08      	pop	{r3}
 800af30:	469e      	mov	lr, r3
 800af32:	4770      	bx	lr
