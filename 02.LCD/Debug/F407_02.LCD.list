
F407_02.LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006708  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000cdcc  08006898  08006898  00016898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013664  08013664  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08013664  08013664  00023664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801366c  0801366c  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801366c  0801366c  0002366c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013670  08013670  00023670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08013674  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000078  080136ec  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080136ec  000301ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3e3  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000257c  00000000  00000000  0003f48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  00041a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  000423b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229c4  00000000  00000000  00042c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3f0  00000000  00000000  00065634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c714a  00000000  00000000  00071a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00138b6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e80  00000000  00000000  00138bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006880 	.word	0x08006880

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006880 	.word	0x08006880

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b96e 	b.w	8000b70 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	4604      	mov	r4, r0
 80008b4:	468c      	mov	ip, r1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f040 8083 	bne.w	80009c2 <__udivmoddi4+0x116>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4617      	mov	r7, r2
 80008c0:	d947      	bls.n	8000952 <__udivmoddi4+0xa6>
 80008c2:	fab2 f282 	clz	r2, r2
 80008c6:	b142      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c8:	f1c2 0020 	rsb	r0, r2, #32
 80008cc:	fa24 f000 	lsr.w	r0, r4, r0
 80008d0:	4091      	lsls	r1, r2
 80008d2:	4097      	lsls	r7, r2
 80008d4:	ea40 0c01 	orr.w	ip, r0, r1
 80008d8:	4094      	lsls	r4, r2
 80008da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008de:	0c23      	lsrs	r3, r4, #16
 80008e0:	fbbc f6f8 	udiv	r6, ip, r8
 80008e4:	fa1f fe87 	uxth.w	lr, r7
 80008e8:	fb08 c116 	mls	r1, r8, r6, ip
 80008ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f0:	fb06 f10e 	mul.w	r1, r6, lr
 80008f4:	4299      	cmp	r1, r3
 80008f6:	d909      	bls.n	800090c <__udivmoddi4+0x60>
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80008fe:	f080 8119 	bcs.w	8000b34 <__udivmoddi4+0x288>
 8000902:	4299      	cmp	r1, r3
 8000904:	f240 8116 	bls.w	8000b34 <__udivmoddi4+0x288>
 8000908:	3e02      	subs	r6, #2
 800090a:	443b      	add	r3, r7
 800090c:	1a5b      	subs	r3, r3, r1
 800090e:	b2a4      	uxth	r4, r4
 8000910:	fbb3 f0f8 	udiv	r0, r3, r8
 8000914:	fb08 3310 	mls	r3, r8, r0, r3
 8000918:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800091c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000920:	45a6      	cmp	lr, r4
 8000922:	d909      	bls.n	8000938 <__udivmoddi4+0x8c>
 8000924:	193c      	adds	r4, r7, r4
 8000926:	f100 33ff 	add.w	r3, r0, #4294967295
 800092a:	f080 8105 	bcs.w	8000b38 <__udivmoddi4+0x28c>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f240 8102 	bls.w	8000b38 <__udivmoddi4+0x28c>
 8000934:	3802      	subs	r0, #2
 8000936:	443c      	add	r4, r7
 8000938:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800093c:	eba4 040e 	sub.w	r4, r4, lr
 8000940:	2600      	movs	r6, #0
 8000942:	b11d      	cbz	r5, 800094c <__udivmoddi4+0xa0>
 8000944:	40d4      	lsrs	r4, r2
 8000946:	2300      	movs	r3, #0
 8000948:	e9c5 4300 	strd	r4, r3, [r5]
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	b902      	cbnz	r2, 8000956 <__udivmoddi4+0xaa>
 8000954:	deff      	udf	#255	; 0xff
 8000956:	fab2 f282 	clz	r2, r2
 800095a:	2a00      	cmp	r2, #0
 800095c:	d150      	bne.n	8000a00 <__udivmoddi4+0x154>
 800095e:	1bcb      	subs	r3, r1, r7
 8000960:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000964:	fa1f f887 	uxth.w	r8, r7
 8000968:	2601      	movs	r6, #1
 800096a:	fbb3 fcfe 	udiv	ip, r3, lr
 800096e:	0c21      	lsrs	r1, r4, #16
 8000970:	fb0e 331c 	mls	r3, lr, ip, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb08 f30c 	mul.w	r3, r8, ip
 800097c:	428b      	cmp	r3, r1
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0xe4>
 8000980:	1879      	adds	r1, r7, r1
 8000982:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0xe2>
 8000988:	428b      	cmp	r3, r1
 800098a:	f200 80e9 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 800098e:	4684      	mov	ip, r0
 8000990:	1ac9      	subs	r1, r1, r3
 8000992:	b2a3      	uxth	r3, r4
 8000994:	fbb1 f0fe 	udiv	r0, r1, lr
 8000998:	fb0e 1110 	mls	r1, lr, r0, r1
 800099c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009a0:	fb08 f800 	mul.w	r8, r8, r0
 80009a4:	45a0      	cmp	r8, r4
 80009a6:	d907      	bls.n	80009b8 <__udivmoddi4+0x10c>
 80009a8:	193c      	adds	r4, r7, r4
 80009aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x10a>
 80009b0:	45a0      	cmp	r8, r4
 80009b2:	f200 80d9 	bhi.w	8000b68 <__udivmoddi4+0x2bc>
 80009b6:	4618      	mov	r0, r3
 80009b8:	eba4 0408 	sub.w	r4, r4, r8
 80009bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009c0:	e7bf      	b.n	8000942 <__udivmoddi4+0x96>
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d909      	bls.n	80009da <__udivmoddi4+0x12e>
 80009c6:	2d00      	cmp	r5, #0
 80009c8:	f000 80b1 	beq.w	8000b2e <__udivmoddi4+0x282>
 80009cc:	2600      	movs	r6, #0
 80009ce:	e9c5 0100 	strd	r0, r1, [r5]
 80009d2:	4630      	mov	r0, r6
 80009d4:	4631      	mov	r1, r6
 80009d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009da:	fab3 f683 	clz	r6, r3
 80009de:	2e00      	cmp	r6, #0
 80009e0:	d14a      	bne.n	8000a78 <__udivmoddi4+0x1cc>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d302      	bcc.n	80009ec <__udivmoddi4+0x140>
 80009e6:	4282      	cmp	r2, r0
 80009e8:	f200 80b8 	bhi.w	8000b5c <__udivmoddi4+0x2b0>
 80009ec:	1a84      	subs	r4, r0, r2
 80009ee:	eb61 0103 	sbc.w	r1, r1, r3
 80009f2:	2001      	movs	r0, #1
 80009f4:	468c      	mov	ip, r1
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d0a8      	beq.n	800094c <__udivmoddi4+0xa0>
 80009fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80009fe:	e7a5      	b.n	800094c <__udivmoddi4+0xa0>
 8000a00:	f1c2 0320 	rsb	r3, r2, #32
 8000a04:	fa20 f603 	lsr.w	r6, r0, r3
 8000a08:	4097      	lsls	r7, r2
 8000a0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a12:	40d9      	lsrs	r1, r3
 8000a14:	4330      	orrs	r0, r6
 8000a16:	0c03      	lsrs	r3, r0, #16
 8000a18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a1c:	fa1f f887 	uxth.w	r8, r7
 8000a20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f108 	mul.w	r1, r6, r8
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a32:	d909      	bls.n	8000a48 <__udivmoddi4+0x19c>
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a3a:	f080 808d 	bcs.w	8000b58 <__udivmoddi4+0x2ac>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 808a 	bls.w	8000b58 <__udivmoddi4+0x2ac>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	443b      	add	r3, r7
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b281      	uxth	r1, r0
 8000a4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a58:	fb00 f308 	mul.w	r3, r0, r8
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d907      	bls.n	8000a70 <__udivmoddi4+0x1c4>
 8000a60:	1879      	adds	r1, r7, r1
 8000a62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a66:	d273      	bcs.n	8000b50 <__udivmoddi4+0x2a4>
 8000a68:	428b      	cmp	r3, r1
 8000a6a:	d971      	bls.n	8000b50 <__udivmoddi4+0x2a4>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	4439      	add	r1, r7
 8000a70:	1acb      	subs	r3, r1, r3
 8000a72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a76:	e778      	b.n	800096a <__udivmoddi4+0xbe>
 8000a78:	f1c6 0c20 	rsb	ip, r6, #32
 8000a7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a84:	431c      	orrs	r4, r3
 8000a86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a96:	431f      	orrs	r7, r3
 8000a98:	0c3b      	lsrs	r3, r7, #16
 8000a9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9e:	fa1f f884 	uxth.w	r8, r4
 8000aa2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aa6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aaa:	fb09 fa08 	mul.w	sl, r9, r8
 8000aae:	458a      	cmp	sl, r1
 8000ab0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ab4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ab8:	d908      	bls.n	8000acc <__udivmoddi4+0x220>
 8000aba:	1861      	adds	r1, r4, r1
 8000abc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ac0:	d248      	bcs.n	8000b54 <__udivmoddi4+0x2a8>
 8000ac2:	458a      	cmp	sl, r1
 8000ac4:	d946      	bls.n	8000b54 <__udivmoddi4+0x2a8>
 8000ac6:	f1a9 0902 	sub.w	r9, r9, #2
 8000aca:	4421      	add	r1, r4
 8000acc:	eba1 010a 	sub.w	r1, r1, sl
 8000ad0:	b2bf      	uxth	r7, r7
 8000ad2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ada:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ade:	fb00 f808 	mul.w	r8, r0, r8
 8000ae2:	45b8      	cmp	r8, r7
 8000ae4:	d907      	bls.n	8000af6 <__udivmoddi4+0x24a>
 8000ae6:	19e7      	adds	r7, r4, r7
 8000ae8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aec:	d22e      	bcs.n	8000b4c <__udivmoddi4+0x2a0>
 8000aee:	45b8      	cmp	r8, r7
 8000af0:	d92c      	bls.n	8000b4c <__udivmoddi4+0x2a0>
 8000af2:	3802      	subs	r0, #2
 8000af4:	4427      	add	r7, r4
 8000af6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000afa:	eba7 0708 	sub.w	r7, r7, r8
 8000afe:	fba0 8902 	umull	r8, r9, r0, r2
 8000b02:	454f      	cmp	r7, r9
 8000b04:	46c6      	mov	lr, r8
 8000b06:	4649      	mov	r1, r9
 8000b08:	d31a      	bcc.n	8000b40 <__udivmoddi4+0x294>
 8000b0a:	d017      	beq.n	8000b3c <__udivmoddi4+0x290>
 8000b0c:	b15d      	cbz	r5, 8000b26 <__udivmoddi4+0x27a>
 8000b0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b12:	eb67 0701 	sbc.w	r7, r7, r1
 8000b16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b1a:	40f2      	lsrs	r2, r6
 8000b1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b20:	40f7      	lsrs	r7, r6
 8000b22:	e9c5 2700 	strd	r2, r7, [r5]
 8000b26:	2600      	movs	r6, #0
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	462e      	mov	r6, r5
 8000b30:	4628      	mov	r0, r5
 8000b32:	e70b      	b.n	800094c <__udivmoddi4+0xa0>
 8000b34:	4606      	mov	r6, r0
 8000b36:	e6e9      	b.n	800090c <__udivmoddi4+0x60>
 8000b38:	4618      	mov	r0, r3
 8000b3a:	e6fd      	b.n	8000938 <__udivmoddi4+0x8c>
 8000b3c:	4543      	cmp	r3, r8
 8000b3e:	d2e5      	bcs.n	8000b0c <__udivmoddi4+0x260>
 8000b40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b44:	eb69 0104 	sbc.w	r1, r9, r4
 8000b48:	3801      	subs	r0, #1
 8000b4a:	e7df      	b.n	8000b0c <__udivmoddi4+0x260>
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	e7d2      	b.n	8000af6 <__udivmoddi4+0x24a>
 8000b50:	4660      	mov	r0, ip
 8000b52:	e78d      	b.n	8000a70 <__udivmoddi4+0x1c4>
 8000b54:	4681      	mov	r9, r0
 8000b56:	e7b9      	b.n	8000acc <__udivmoddi4+0x220>
 8000b58:	4666      	mov	r6, ip
 8000b5a:	e775      	b.n	8000a48 <__udivmoddi4+0x19c>
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	e74a      	b.n	80009f6 <__udivmoddi4+0x14a>
 8000b60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b64:	4439      	add	r1, r7
 8000b66:	e713      	b.n	8000990 <__udivmoddi4+0xe4>
 8000b68:	3802      	subs	r0, #2
 8000b6a:	443c      	add	r4, r7
 8000b6c:	e724      	b.n	80009b8 <__udivmoddi4+0x10c>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_idiv0>:
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	; 0x38
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]
 8000b8a:	615a      	str	r2, [r3, #20]
 8000b8c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000b8e:	463b      	mov	r3, r7
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
 8000b9c:	615a      	str	r2, [r3, #20]
 8000b9e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000ba0:	4b2f      	ldr	r3, [pc, #188]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000ba2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ba6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ba8:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000baa:	4a2e      	ldr	r2, [pc, #184]	; (8000c64 <MX_FSMC_Init+0xf0>)
 8000bac:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 8000bae:	4b2c      	ldr	r3, [pc, #176]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bb0:	2206      	movs	r2, #6
 8000bb2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000bb4:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000bba:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000bc0:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bc2:	2210      	movs	r2, #16
 8000bc4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000bc6:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000bcc:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000bd8:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000be0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000be6:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000bec:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000c0a:	230f      	movs	r3, #15
 8000c0c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 15;
 8000c0e:	230f      	movs	r3, #15
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8000c12:	230f      	movs	r3, #15
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000c16:	2310      	movs	r3, #16
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000c1a:	2311      	movs	r3, #17
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000c26:	230f      	movs	r3, #15
 8000c28:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8000c2e:	230f      	movs	r3, #15
 8000c30:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000c32:	2310      	movs	r3, #16
 8000c34:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000c36:	2311      	movs	r3, #17
 8000c38:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000c3e:	463a      	mov	r2, r7
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4806      	ldr	r0, [pc, #24]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000c48:	f004 fb68 	bl	800531c <HAL_SRAM_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000c52:	f003 fa3f 	bl	80040d4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000c56:	bf00      	nop
 8000c58:	3738      	adds	r7, #56	; 0x38
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000a4 	.word	0x200000a4
 8000c64:	a0000104 	.word	0xa0000104

08000c68 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000c7c:	4b2c      	ldr	r3, [pc, #176]	; (8000d30 <HAL_FSMC_MspInit+0xc8>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d151      	bne.n	8000d28 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8000c84:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <HAL_FSMC_MspInit+0xc8>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <HAL_FSMC_MspInit+0xcc>)
 8000c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c92:	4a28      	ldr	r2, [pc, #160]	; (8000d34 <HAL_FSMC_MspInit+0xcc>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6393      	str	r3, [r2, #56]	; 0x38
 8000c9a:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <HAL_FSMC_MspInit+0xcc>)
 8000c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000caa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	481d      	ldr	r0, [pc, #116]	; (8000d38 <HAL_FSMC_MspInit+0xd0>)
 8000cc2:	f003 fd2d 	bl	8004720 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000cc6:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000cca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000cd8:	230c      	movs	r3, #12
 8000cda:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4816      	ldr	r0, [pc, #88]	; (8000d3c <HAL_FSMC_MspInit+0xd4>)
 8000ce2:	f003 fd1d 	bl	8004720 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000ce6:	f24c 7333 	movw	r3, #50995	; 0xc733
 8000cea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480f      	ldr	r0, [pc, #60]	; (8000d40 <HAL_FSMC_MspInit+0xd8>)
 8000d02:	f003 fd0d 	bl	8004720 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000d18:	230c      	movs	r3, #12
 8000d1a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4808      	ldr	r0, [pc, #32]	; (8000d44 <HAL_FSMC_MspInit+0xdc>)
 8000d22:	f003 fcfd 	bl	8004720 <HAL_GPIO_Init>
 8000d26:	e000      	b.n	8000d2a <HAL_FSMC_MspInit+0xc2>
    return;
 8000d28:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000094 	.word	0x20000094
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40021400 	.word	0x40021400
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40020c00 	.word	0x40020c00
 8000d44:	40021800 	.word	0x40021800

08000d48 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000d50:	f7ff ff8a 	bl	8000c68 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08e      	sub	sp, #56	; 0x38
 8000d60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
 8000d76:	4b43      	ldr	r3, [pc, #268]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a42      	ldr	r2, [pc, #264]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b40      	ldr	r3, [pc, #256]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	623b      	str	r3, [r7, #32]
 8000d8c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	4b3c      	ldr	r3, [pc, #240]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a3b      	ldr	r2, [pc, #236]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da6:	61fb      	str	r3, [r7, #28]
 8000da8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
 8000dae:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a34      	ldr	r2, [pc, #208]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000db4:	f043 0320 	orr.w	r3, r3, #32
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0320 	and.w	r3, r3, #32
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a2d      	ldr	r2, [pc, #180]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000dd0:	f043 0310 	orr.w	r3, r3, #16
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0310 	and.w	r3, r3, #16
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b27      	ldr	r3, [pc, #156]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a26      	ldr	r2, [pc, #152]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_GPIO_Init+0x128>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e58:	480b      	ldr	r0, [pc, #44]	; (8000e88 <MX_GPIO_Init+0x12c>)
 8000e5a:	f003 fdfd 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_GPIO_Init+0x12c>)
 8000e78:	f003 fc52 	bl	8004720 <HAL_GPIO_Init>

}
 8000e7c:	bf00      	nop
 8000e7e:	3738      	adds	r7, #56	; 0x38
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020400 	.word	0x40020400

08000e8c <LCD_WR_REG>:
_lcd_dev lcddev;

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(__IO uint16_t regval)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
	regval=regval;		//使用-O2优化的时候,必须插入的延时
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	80fb      	strh	r3, [r7, #6]
	TFT_LCD->LCD_REG=regval;//写入要写的寄存器序号
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <LCD_WR_REG+0x24>)
 8000e9e:	88fa      	ldrh	r2, [r7, #6]
 8000ea0:	b292      	uxth	r2, r2
 8000ea2:	801a      	strh	r2, [r3, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	6c00007e 	.word	0x6c00007e

08000eb4 <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(__IO uint16_t data)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]
	data=data;			//使用-O2优化的时候,必须插入的延时
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	80fb      	strh	r3, [r7, #6]
	TFT_LCD->LCD_RAM=data;
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <LCD_WR_DATA+0x24>)
 8000ec6:	88fa      	ldrh	r2, [r7, #6]
 8000ec8:	b292      	uxth	r2, r2
 8000eca:	805a      	strh	r2, [r3, #2]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	6c00007e 	.word	0x6c00007e

08000edc <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//防止被优化
	ram=TFT_LCD->LCD_RAM;
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <LCD_RD_DATA+0x20>)
 8000ee4:	885b      	ldrh	r3, [r3, #2]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	b29b      	uxth	r3, r3
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	6c00007e 	.word	0x6c00007e

08000f00 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	460a      	mov	r2, r1
 8000f0a:	80fb      	strh	r3, [r7, #6]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	80bb      	strh	r3, [r7, #4]
	TFT_LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 8000f10:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <LCD_WriteReg+0x28>)
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	8013      	strh	r3, [r2, #0]
	TFT_LCD->LCD_RAM = LCD_RegValue;//写入数据
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <LCD_WriteReg+0x28>)
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	8053      	strh	r3, [r2, #2]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	6c00007e 	.word	0x6c00007e

08000f2c <opt_delay>:

//当mdk -O1时间优化时需要设置
//延时i
void opt_delay(uint8_t i)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
	while(i--);
 8000f36:	bf00      	nop
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	1e5a      	subs	r2, r3, #1
 8000f3c:	71fa      	strb	r2, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1fa      	bne.n	8000f38 <opt_delay+0xc>
}
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <LCD_WriteRAM_Prepare>:
	opt_delay(5);
	return LCD_RD_DATA();		//返回读到的值
}
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
 	TFT_LCD->LCD_REG=lcddev.wramcmd;
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <LCD_WriteRAM_Prepare+0x18>)
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <LCD_WriteRAM_Prepare+0x1c>)
 8000f58:	8912      	ldrh	r2, [r2, #8]
 8000f5a:	801a      	strh	r2, [r3, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	6c00007e 	.word	0x6c00007e
 8000f6c:	20000144 	.word	0x20000144

08000f70 <LCD_SetCursor>:
}
//设置光标位置(对RGB屏无效)
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	460a      	mov	r2, r1
 8000f7a:	80fb      	strh	r3, [r7, #6]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8000f80:	4b6b      	ldr	r3, [pc, #428]	; (8001130 <LCD_SetCursor+0x1c0>)
 8000f82:	889b      	ldrh	r3, [r3, #4]
 8000f84:	f249 3241 	movw	r2, #37697	; 0x9341
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d005      	beq.n	8000f98 <LCD_SetCursor+0x28>
 8000f8c:	4b68      	ldr	r3, [pc, #416]	; (8001130 <LCD_SetCursor+0x1c0>)
 8000f8e:	889b      	ldrh	r3, [r3, #4]
 8000f90:	f245 3210 	movw	r2, #21264	; 0x5310
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d122      	bne.n	8000fde <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8000f98:	4b65      	ldr	r3, [pc, #404]	; (8001130 <LCD_SetCursor+0x1c0>)
 8000f9a:	895b      	ldrh	r3, [r3, #10]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff75 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff83 	bl	8000eb4 <LCD_WR_DATA>
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff7d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8000fba:	4b5d      	ldr	r3, [pc, #372]	; (8001130 <LCD_SetCursor+0x1c0>)
 8000fbc:	899b      	ldrh	r3, [r3, #12]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff64 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8000fc4:	88bb      	ldrh	r3, [r7, #4]
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff72 	bl	8000eb4 <LCD_WR_DATA>
 8000fd0:	88bb      	ldrh	r3, [r7, #4]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff6c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
	}
}
 8000fdc:	e0a3      	b.n	8001126 <LCD_SetCursor+0x1b6>
	}else if(lcddev.id==0X1963)
 8000fde:	4b54      	ldr	r3, [pc, #336]	; (8001130 <LCD_SetCursor+0x1c0>)
 8000fe0:	889b      	ldrh	r3, [r3, #4]
 8000fe2:	f641 1263 	movw	r2, #6499	; 0x1963
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d167      	bne.n	80010ba <LCD_SetCursor+0x14a>
		if(lcddev.dir==0)//x坐标需要变换
 8000fea:	4b51      	ldr	r3, [pc, #324]	; (8001130 <LCD_SetCursor+0x1c0>)
 8000fec:	799b      	ldrb	r3, [r3, #6]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d11e      	bne.n	8001030 <LCD_SetCursor+0xc0>
			Xpos=lcddev.width-1-Xpos;
 8000ff2:	4b4f      	ldr	r3, [pc, #316]	; (8001130 <LCD_SetCursor+0x1c0>)
 8000ff4:	881a      	ldrh	r2, [r3, #0]
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8001000:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <LCD_SetCursor+0x1c0>)
 8001002:	895b      	ldrh	r3, [r3, #10]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff41 	bl	8000e8c <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff ff52 	bl	8000eb4 <LCD_WR_DATA>
 8001010:	2000      	movs	r0, #0
 8001012:	f7ff ff4f 	bl	8000eb4 <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	b29b      	uxth	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff49 	bl	8000eb4 <LCD_WR_DATA>
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	b29b      	uxth	r3, r3
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff43 	bl	8000eb4 <LCD_WR_DATA>
 800102e:	e021      	b.n	8001074 <LCD_SetCursor+0x104>
			LCD_WR_REG(lcddev.setxcmd);
 8001030:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <LCD_SetCursor+0x1c0>)
 8001032:	895b      	ldrh	r3, [r3, #10]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff29 	bl	8000e8c <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	b29b      	uxth	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff37 	bl	8000eb4 <LCD_WR_DATA>
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	b29b      	uxth	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff31 	bl	8000eb4 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001052:	4b37      	ldr	r3, [pc, #220]	; (8001130 <LCD_SetCursor+0x1c0>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	3b01      	subs	r3, #1
 8001058:	121b      	asrs	r3, r3, #8
 800105a:	b29b      	uxth	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff29 	bl	8000eb4 <LCD_WR_DATA>
 8001062:	4b33      	ldr	r3, [pc, #204]	; (8001130 <LCD_SetCursor+0x1c0>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	3b01      	subs	r3, #1
 8001068:	b29b      	uxth	r3, r3
 800106a:	b2db      	uxtb	r3, r3
 800106c:	b29b      	uxth	r3, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff20 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001074:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <LCD_SetCursor+0x1c0>)
 8001076:	899b      	ldrh	r3, [r3, #12]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff07 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 800107e:	88bb      	ldrh	r3, [r7, #4]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	b29b      	uxth	r3, r3
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff15 	bl	8000eb4 <LCD_WR_DATA>
 800108a:	88bb      	ldrh	r3, [r7, #4]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	b29b      	uxth	r3, r3
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff0f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <LCD_SetCursor+0x1c0>)
 8001098:	885b      	ldrh	r3, [r3, #2]
 800109a:	3b01      	subs	r3, #1
 800109c:	121b      	asrs	r3, r3, #8
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff07 	bl	8000eb4 <LCD_WR_DATA>
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <LCD_SetCursor+0x1c0>)
 80010a8:	885b      	ldrh	r3, [r3, #2]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fefe 	bl	8000eb4 <LCD_WR_DATA>
}
 80010b8:	e035      	b.n	8001126 <LCD_SetCursor+0x1b6>
	}else if(lcddev.id==0X5510)
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <LCD_SetCursor+0x1c0>)
 80010bc:	889b      	ldrh	r3, [r3, #4]
 80010be:	f245 5210 	movw	r2, #21776	; 0x5510
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d12f      	bne.n	8001126 <LCD_SetCursor+0x1b6>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <LCD_SetCursor+0x1c0>)
 80010c8:	895b      	ldrh	r3, [r3, #10]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fede 	bl	8000e8c <LCD_WR_REG>
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	0a1b      	lsrs	r3, r3, #8
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff feec 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <LCD_SetCursor+0x1c0>)
 80010de:	895b      	ldrh	r3, [r3, #10]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fed1 	bl	8000e8c <LCD_WR_REG>
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fedf 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <LCD_SetCursor+0x1c0>)
 80010f8:	899b      	ldrh	r3, [r3, #12]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fec6 	bl	8000e8c <LCD_WR_REG>
 8001100:	88bb      	ldrh	r3, [r7, #4]
 8001102:	0a1b      	lsrs	r3, r3, #8
 8001104:	b29b      	uxth	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fed4 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <LCD_SetCursor+0x1c0>)
 800110e:	899b      	ldrh	r3, [r3, #12]
 8001110:	3301      	adds	r3, #1
 8001112:	b29b      	uxth	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff feb9 	bl	8000e8c <LCD_WR_REG>
 800111a:	88bb      	ldrh	r3, [r7, #4]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	b29b      	uxth	r3, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fec7 	bl	8000eb4 <LCD_WR_DATA>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000144 	.word	0x20000144

08001134 <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	uint16_t regval=0;
 800113e:	2300      	movs	r3, #0
 8001140:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg=0;
 8001142:	2300      	movs	r3, #0
 8001144:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if((lcddev.dir==1&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对1963不改变扫描方向！竖屏时1963改变方向
 8001146:	4ba9      	ldr	r3, [pc, #676]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 8001148:	799b      	ldrb	r3, [r3, #6]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d105      	bne.n	800115a <LCD_Scan_Dir+0x26>
 800114e:	4ba7      	ldr	r3, [pc, #668]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 8001150:	889b      	ldrh	r3, [r3, #4]
 8001152:	f641 1263 	movw	r2, #6499	; 0x1963
 8001156:	4293      	cmp	r3, r2
 8001158:	d109      	bne.n	800116e <LCD_Scan_Dir+0x3a>
 800115a:	4ba4      	ldr	r3, [pc, #656]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 800115c:	799b      	ldrb	r3, [r3, #6]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d134      	bne.n	80011cc <LCD_Scan_Dir+0x98>
 8001162:	4ba2      	ldr	r3, [pc, #648]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 8001164:	889b      	ldrh	r3, [r3, #4]
 8001166:	f641 1263 	movw	r2, #6499	; 0x1963
 800116a:	4293      	cmp	r3, r2
 800116c:	d12e      	bne.n	80011cc <LCD_Scan_Dir+0x98>
	{
		switch(dir)//方向转换
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2b07      	cmp	r3, #7
 8001172:	d82c      	bhi.n	80011ce <LCD_Scan_Dir+0x9a>
 8001174:	a201      	add	r2, pc, #4	; (adr r2, 800117c <LCD_Scan_Dir+0x48>)
 8001176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117a:	bf00      	nop
 800117c:	0800119d 	.word	0x0800119d
 8001180:	080011a3 	.word	0x080011a3
 8001184:	080011a9 	.word	0x080011a9
 8001188:	080011af 	.word	0x080011af
 800118c:	080011b5 	.word	0x080011b5
 8001190:	080011bb 	.word	0x080011bb
 8001194:	080011c1 	.word	0x080011c1
 8001198:	080011c7 	.word	0x080011c7
		{
			case 0:dir=6;break;
 800119c:	2306      	movs	r3, #6
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	e015      	b.n	80011ce <LCD_Scan_Dir+0x9a>
			case 1:dir=7;break;
 80011a2:	2307      	movs	r3, #7
 80011a4:	71fb      	strb	r3, [r7, #7]
 80011a6:	e012      	b.n	80011ce <LCD_Scan_Dir+0x9a>
			case 2:dir=4;break;
 80011a8:	2304      	movs	r3, #4
 80011aa:	71fb      	strb	r3, [r7, #7]
 80011ac:	e00f      	b.n	80011ce <LCD_Scan_Dir+0x9a>
			case 3:dir=5;break;
 80011ae:	2305      	movs	r3, #5
 80011b0:	71fb      	strb	r3, [r7, #7]
 80011b2:	e00c      	b.n	80011ce <LCD_Scan_Dir+0x9a>
			case 4:dir=1;break;
 80011b4:	2301      	movs	r3, #1
 80011b6:	71fb      	strb	r3, [r7, #7]
 80011b8:	e009      	b.n	80011ce <LCD_Scan_Dir+0x9a>
			case 5:dir=0;break;
 80011ba:	2300      	movs	r3, #0
 80011bc:	71fb      	strb	r3, [r7, #7]
 80011be:	e006      	b.n	80011ce <LCD_Scan_Dir+0x9a>
			case 6:dir=3;break;
 80011c0:	2303      	movs	r3, #3
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	e003      	b.n	80011ce <LCD_Scan_Dir+0x9a>
			case 7:dir=2;break;
 80011c6:	2302      	movs	r3, #2
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	e000      	b.n	80011ce <LCD_Scan_Dir+0x9a>
		}
	}
 80011cc:	bf00      	nop
	if(lcddev.id==0x9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/5310/5510/1963,特殊处理
 80011ce:	4b87      	ldr	r3, [pc, #540]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 80011d0:	889b      	ldrh	r3, [r3, #4]
 80011d2:	f249 3241 	movw	r2, #37697	; 0x9341
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d012      	beq.n	8001200 <LCD_Scan_Dir+0xcc>
 80011da:	4b84      	ldr	r3, [pc, #528]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 80011dc:	889b      	ldrh	r3, [r3, #4]
 80011de:	f245 3210 	movw	r2, #21264	; 0x5310
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d00c      	beq.n	8001200 <LCD_Scan_Dir+0xcc>
 80011e6:	4b81      	ldr	r3, [pc, #516]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 80011e8:	889b      	ldrh	r3, [r3, #4]
 80011ea:	f245 5210 	movw	r2, #21776	; 0x5510
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d006      	beq.n	8001200 <LCD_Scan_Dir+0xcc>
 80011f2:	4b7e      	ldr	r3, [pc, #504]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 80011f4:	889b      	ldrh	r3, [r3, #4]
 80011f6:	f641 1263 	movw	r2, #6499	; 0x1963
 80011fa:	4293      	cmp	r3, r2
 80011fc:	f040 8130 	bne.w	8001460 <LCD_Scan_Dir+0x32c>
	{
		switch(dir)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2b07      	cmp	r3, #7
 8001204:	d835      	bhi.n	8001272 <LCD_Scan_Dir+0x13e>
 8001206:	a201      	add	r2, pc, #4	; (adr r2, 800120c <LCD_Scan_Dir+0xd8>)
 8001208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120c:	08001273 	.word	0x08001273
 8001210:	0800122d 	.word	0x0800122d
 8001214:	08001237 	.word	0x08001237
 8001218:	08001241 	.word	0x08001241
 800121c:	0800124b 	.word	0x0800124b
 8001220:	08001255 	.word	0x08001255
 8001224:	0800125f 	.word	0x0800125f
 8001228:	08001269 	.word	0x08001269
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 800122c:	89fb      	ldrh	r3, [r7, #14]
 800122e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001232:	81fb      	strh	r3, [r7, #14]
				break;
 8001234:	e01d      	b.n	8001272 <LCD_Scan_Dir+0x13e>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 8001236:	89fb      	ldrh	r3, [r7, #14]
 8001238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800123c:	81fb      	strh	r3, [r7, #14]
				break;
 800123e:	e018      	b.n	8001272 <LCD_Scan_Dir+0x13e>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 8001240:	89fb      	ldrh	r3, [r7, #14]
 8001242:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001246:	81fb      	strh	r3, [r7, #14]
				break;
 8001248:	e013      	b.n	8001272 <LCD_Scan_Dir+0x13e>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 800124a:	89fb      	ldrh	r3, [r7, #14]
 800124c:	f043 0320 	orr.w	r3, r3, #32
 8001250:	81fb      	strh	r3, [r7, #14]
				break;
 8001252:	e00e      	b.n	8001272 <LCD_Scan_Dir+0x13e>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 8001254:	89fb      	ldrh	r3, [r7, #14]
 8001256:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800125a:	81fb      	strh	r3, [r7, #14]
				break;
 800125c:	e009      	b.n	8001272 <LCD_Scan_Dir+0x13e>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 800125e:	89fb      	ldrh	r3, [r7, #14]
 8001260:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001264:	81fb      	strh	r3, [r7, #14]
				break;
 8001266:	e004      	b.n	8001272 <LCD_Scan_Dir+0x13e>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 8001268:	89fb      	ldrh	r3, [r7, #14]
 800126a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800126e:	81fb      	strh	r3, [r7, #14]
				break;
 8001270:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 8001272:	4b5e      	ldr	r3, [pc, #376]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 8001274:	889b      	ldrh	r3, [r3, #4]
 8001276:	f245 5210 	movw	r2, #21776	; 0x5510
 800127a:	4293      	cmp	r3, r2
 800127c:	d103      	bne.n	8001286 <LCD_Scan_Dir+0x152>
 800127e:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8001282:	81bb      	strh	r3, [r7, #12]
 8001284:	e001      	b.n	800128a <LCD_Scan_Dir+0x156>
		else dirreg=0X36;
 8001286:	2336      	movs	r3, #54	; 0x36
 8001288:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 800128a:	4b58      	ldr	r3, [pc, #352]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 800128c:	889b      	ldrh	r3, [r3, #4]
 800128e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001292:	4293      	cmp	r3, r2
 8001294:	d00f      	beq.n	80012b6 <LCD_Scan_Dir+0x182>
 8001296:	4b55      	ldr	r3, [pc, #340]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 8001298:	889b      	ldrh	r3, [r3, #4]
 800129a:	f245 5210 	movw	r2, #21776	; 0x5510
 800129e:	4293      	cmp	r3, r2
 80012a0:	d009      	beq.n	80012b6 <LCD_Scan_Dir+0x182>
 80012a2:	4b52      	ldr	r3, [pc, #328]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 80012a4:	889b      	ldrh	r3, [r3, #4]
 80012a6:	f641 1263 	movw	r2, #6499	; 0x1963
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d003      	beq.n	80012b6 <LCD_Scan_Dir+0x182>
 80012ae:	89fb      	ldrh	r3, [r7, #14]
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	81fb      	strh	r3, [r7, #14]
 		LCD_WriteReg(dirreg,regval);
 80012b6:	89fa      	ldrh	r2, [r7, #14]
 80012b8:	89bb      	ldrh	r3, [r7, #12]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fe1f 	bl	8000f00 <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 80012c2:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 80012c4:	889b      	ldrh	r3, [r3, #4]
 80012c6:	f641 1263 	movw	r2, #6499	; 0x1963
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d025      	beq.n	800131a <LCD_Scan_Dir+0x1e6>
		{
			if(regval&0X20)
 80012ce:	89fb      	ldrh	r3, [r7, #14]
 80012d0:	f003 0320 	and.w	r3, r3, #32
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d010      	beq.n	80012fa <LCD_Scan_Dir+0x1c6>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 80012d8:	4b44      	ldr	r3, [pc, #272]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 80012da:	881a      	ldrh	r2, [r3, #0]
 80012dc:	4b43      	ldr	r3, [pc, #268]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 80012de:	885b      	ldrh	r3, [r3, #2]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d21a      	bcs.n	800131a <LCD_Scan_Dir+0x1e6>
				{
					temp=lcddev.width;
 80012e4:	4b41      	ldr	r3, [pc, #260]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 80012ea:	4b40      	ldr	r3, [pc, #256]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 80012ec:	885a      	ldrh	r2, [r3, #2]
 80012ee:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 80012f0:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 80012f2:	4a3e      	ldr	r2, [pc, #248]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 80012f4:	897b      	ldrh	r3, [r7, #10]
 80012f6:	8053      	strh	r3, [r2, #2]
 80012f8:	e00f      	b.n	800131a <LCD_Scan_Dir+0x1e6>
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 80012fa:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 80012fc:	881a      	ldrh	r2, [r3, #0]
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 8001300:	885b      	ldrh	r3, [r3, #2]
 8001302:	429a      	cmp	r2, r3
 8001304:	d909      	bls.n	800131a <LCD_Scan_Dir+0x1e6>
				{
					temp=lcddev.width;
 8001306:	4b39      	ldr	r3, [pc, #228]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 800130c:	4b37      	ldr	r3, [pc, #220]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 800130e:	885a      	ldrh	r2, [r3, #2]
 8001310:	4b36      	ldr	r3, [pc, #216]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 8001312:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8001314:	4a35      	ldr	r2, [pc, #212]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 8001316:	897b      	ldrh	r3, [r7, #10]
 8001318:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 800131a:	4b34      	ldr	r3, [pc, #208]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 800131c:	889b      	ldrh	r3, [r3, #4]
 800131e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001322:	4293      	cmp	r3, r2
 8001324:	d164      	bne.n	80013f0 <LCD_Scan_Dir+0x2bc>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 8001326:	4b31      	ldr	r3, [pc, #196]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 8001328:	895b      	ldrh	r3, [r3, #10]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fdae 	bl	8000e8c <LCD_WR_REG>
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff fdbf 	bl	8000eb4 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 8001336:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 8001338:	895b      	ldrh	r3, [r3, #10]
 800133a:	3301      	adds	r3, #1
 800133c:	b29b      	uxth	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fda4 	bl	8000e8c <LCD_WR_REG>
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fdb5 	bl	8000eb4 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 800134c:	895b      	ldrh	r3, [r3, #10]
 800134e:	3302      	adds	r3, #2
 8001350:	b29b      	uxth	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fd9a 	bl	8000e8c <LCD_WR_REG>
 8001358:	4b24      	ldr	r3, [pc, #144]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	3b01      	subs	r3, #1
 800135e:	121b      	asrs	r3, r3, #8
 8001360:	b29b      	uxth	r3, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fda6 	bl	8000eb4 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 800136a:	895b      	ldrh	r3, [r3, #10]
 800136c:	3303      	adds	r3, #3
 800136e:	b29b      	uxth	r3, r3
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fd8b 	bl	8000e8c <LCD_WR_REG>
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	3b01      	subs	r3, #1
 800137c:	b29b      	uxth	r3, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fd96 	bl	8000eb4 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 800138a:	899b      	ldrh	r3, [r3, #12]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fd7d 	bl	8000e8c <LCD_WR_REG>
 8001392:	2000      	movs	r0, #0
 8001394:	f7ff fd8e 	bl	8000eb4 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 800139a:	899b      	ldrh	r3, [r3, #12]
 800139c:	3301      	adds	r3, #1
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fd73 	bl	8000e8c <LCD_WR_REG>
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7ff fd84 	bl	8000eb4 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 80013ae:	899b      	ldrh	r3, [r3, #12]
 80013b0:	3302      	adds	r3, #2
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fd69 	bl	8000e8c <LCD_WR_REG>
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 80013bc:	885b      	ldrh	r3, [r3, #2]
 80013be:	3b01      	subs	r3, #1
 80013c0:	121b      	asrs	r3, r3, #8
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fd75 	bl	8000eb4 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 80013cc:	899b      	ldrh	r3, [r3, #12]
 80013ce:	3303      	adds	r3, #3
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fd5a 	bl	8000e8c <LCD_WR_REG>
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <LCD_Scan_Dir+0x2b8>)
 80013da:	885b      	ldrh	r3, [r3, #2]
 80013dc:	3b01      	subs	r3, #1
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fd65 	bl	8000eb4 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
			LCD_WR_DATA(0);LCD_WR_DATA(0);
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
		}
  	}
}
 80013ea:	e039      	b.n	8001460 <LCD_Scan_Dir+0x32c>
 80013ec:	20000144 	.word	0x20000144
			LCD_WR_REG(lcddev.setxcmd);
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <LCD_Scan_Dir+0x334>)
 80013f2:	895b      	ldrh	r3, [r3, #10]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fd49 	bl	8000e8c <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff fd5a 	bl	8000eb4 <LCD_WR_DATA>
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff fd57 	bl	8000eb4 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <LCD_Scan_Dir+0x334>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	3b01      	subs	r3, #1
 800140c:	121b      	asrs	r3, r3, #8
 800140e:	b29b      	uxth	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fd4f 	bl	8000eb4 <LCD_WR_DATA>
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <LCD_Scan_Dir+0x334>)
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	3b01      	subs	r3, #1
 800141c:	b29b      	uxth	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	b29b      	uxth	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fd46 	bl	8000eb4 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <LCD_Scan_Dir+0x334>)
 800142a:	899b      	ldrh	r3, [r3, #12]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fd2d 	bl	8000e8c <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff fd3e 	bl	8000eb4 <LCD_WR_DATA>
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff fd3b 	bl	8000eb4 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <LCD_Scan_Dir+0x334>)
 8001440:	885b      	ldrh	r3, [r3, #2]
 8001442:	3b01      	subs	r3, #1
 8001444:	121b      	asrs	r3, r3, #8
 8001446:	b29b      	uxth	r3, r3
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fd33 	bl	8000eb4 <LCD_WR_DATA>
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <LCD_Scan_Dir+0x334>)
 8001450:	885b      	ldrh	r3, [r3, #2]
 8001452:	3b01      	subs	r3, #1
 8001454:	b29b      	uxth	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	b29b      	uxth	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fd2a 	bl	8000eb4 <LCD_WR_DATA>
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000144 	.word	0x20000144

0800146c <LCD_Fast_DrawPoint>:
}
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint32_t color)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	603a      	str	r2, [r7, #0]
 8001476:	80fb      	strh	r3, [r7, #6]
 8001478:	460b      	mov	r3, r1
 800147a:	80bb      	strh	r3, [r7, #4]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 800147c:	4b85      	ldr	r3, [pc, #532]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 800147e:	889b      	ldrh	r3, [r3, #4]
 8001480:	f249 3241 	movw	r2, #37697	; 0x9341
 8001484:	4293      	cmp	r3, r2
 8001486:	d005      	beq.n	8001494 <LCD_Fast_DrawPoint+0x28>
 8001488:	4b82      	ldr	r3, [pc, #520]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 800148a:	889b      	ldrh	r3, [r3, #4]
 800148c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001490:	4293      	cmp	r3, r2
 8001492:	d122      	bne.n	80014da <LCD_Fast_DrawPoint+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8001494:	4b7f      	ldr	r3, [pc, #508]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 8001496:	895b      	ldrh	r3, [r3, #10]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fcf7 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fd05 	bl	8000eb4 <LCD_WR_DATA>
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fcff 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80014b6:	4b77      	ldr	r3, [pc, #476]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 80014b8:	899b      	ldrh	r3, [r3, #12]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fce6 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80014c0:	88bb      	ldrh	r3, [r7, #4]
 80014c2:	0a1b      	lsrs	r3, r3, #8
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fcf4 	bl	8000eb4 <LCD_WR_DATA>
 80014cc:	88bb      	ldrh	r3, [r7, #4]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fcee 	bl	8000eb4 <LCD_WR_DATA>
 80014d8:	e0cf      	b.n	800167a <LCD_Fast_DrawPoint+0x20e>
	}else if(lcddev.id==0X5510)
 80014da:	4b6e      	ldr	r3, [pc, #440]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 80014dc:	889b      	ldrh	r3, [r3, #4]
 80014de:	f245 5210 	movw	r2, #21776	; 0x5510
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d130      	bne.n	8001548 <LCD_Fast_DrawPoint+0xdc>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 80014e6:	4b6b      	ldr	r3, [pc, #428]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 80014e8:	895b      	ldrh	r3, [r3, #10]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fcce 	bl	8000e8c <LCD_WR_REG>
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	0a1b      	lsrs	r3, r3, #8
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fcdc 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 80014fc:	4b65      	ldr	r3, [pc, #404]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 80014fe:	895b      	ldrh	r3, [r3, #10]
 8001500:	3301      	adds	r3, #1
 8001502:	b29b      	uxth	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fcc1 	bl	8000e8c <LCD_WR_REG>
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	b29b      	uxth	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fccf 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 8001516:	4b5f      	ldr	r3, [pc, #380]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 8001518:	899b      	ldrh	r3, [r3, #12]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fcb6 	bl	8000e8c <LCD_WR_REG>
 8001520:	88bb      	ldrh	r3, [r7, #4]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	b29b      	uxth	r3, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fcc4 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 800152c:	4b59      	ldr	r3, [pc, #356]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 800152e:	899b      	ldrh	r3, [r3, #12]
 8001530:	3301      	adds	r3, #1
 8001532:	b29b      	uxth	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fca9 	bl	8000e8c <LCD_WR_REG>
 800153a:	88bb      	ldrh	r3, [r7, #4]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fcb7 	bl	8000eb4 <LCD_WR_DATA>
 8001546:	e098      	b.n	800167a <LCD_Fast_DrawPoint+0x20e>
	}else if(lcddev.id==0X1963)
 8001548:	4b52      	ldr	r3, [pc, #328]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 800154a:	889b      	ldrh	r3, [r3, #4]
 800154c:	f641 1263 	movw	r2, #6499	; 0x1963
 8001550:	4293      	cmp	r3, r2
 8001552:	d145      	bne.n	80015e0 <LCD_Fast_DrawPoint+0x174>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 8001554:	4b4f      	ldr	r3, [pc, #316]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 8001556:	799b      	ldrb	r3, [r3, #6]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d106      	bne.n	800156a <LCD_Fast_DrawPoint+0xfe>
 800155c:	4b4d      	ldr	r3, [pc, #308]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 800155e:	881a      	ldrh	r2, [r3, #0]
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	b29b      	uxth	r3, r3
 8001566:	3b01      	subs	r3, #1
 8001568:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 800156a:	4b4a      	ldr	r3, [pc, #296]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 800156c:	895b      	ldrh	r3, [r3, #10]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fc8c 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	b29b      	uxth	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fc9a 	bl	8000eb4 <LCD_WR_DATA>
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	b29b      	uxth	r3, r3
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fc94 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	0a1b      	lsrs	r3, r3, #8
 8001590:	b29b      	uxth	r3, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fc8e 	bl	8000eb4 <LCD_WR_DATA>
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	b29b      	uxth	r3, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fc88 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80015a4:	4b3b      	ldr	r3, [pc, #236]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 80015a6:	899b      	ldrh	r3, [r3, #12]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fc6f 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80015ae:	88bb      	ldrh	r3, [r7, #4]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fc7d 	bl	8000eb4 <LCD_WR_DATA>
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fc77 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80015c6:	88bb      	ldrh	r3, [r7, #4]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fc71 	bl	8000eb4 <LCD_WR_DATA>
 80015d2:	88bb      	ldrh	r3, [r7, #4]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fc6b 	bl	8000eb4 <LCD_WR_DATA>
 80015de:	e04c      	b.n	800167a <LCD_Fast_DrawPoint+0x20e>
	}else if(lcddev.id==0X6804)
 80015e0:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 80015e2:	889b      	ldrh	r3, [r3, #4]
 80015e4:	f646 0204 	movw	r2, #26628	; 0x6804
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d12d      	bne.n	8001648 <LCD_Fast_DrawPoint+0x1dc>
	{
		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏时处理
 80015ec:	4b29      	ldr	r3, [pc, #164]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 80015ee:	799b      	ldrb	r3, [r3, #6]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d106      	bne.n	8001602 <LCD_Fast_DrawPoint+0x196>
 80015f4:	4b27      	ldr	r3, [pc, #156]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 80015f6:	881a      	ldrh	r2, [r3, #0]
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	3b01      	subs	r3, #1
 8001600:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001602:	4b24      	ldr	r3, [pc, #144]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 8001604:	895b      	ldrh	r3, [r3, #10]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fc40 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	0a1b      	lsrs	r3, r3, #8
 8001610:	b29b      	uxth	r3, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fc4e 	bl	8000eb4 <LCD_WR_DATA>
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	b29b      	uxth	r3, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fc48 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 8001626:	899b      	ldrh	r3, [r3, #12]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fc2f 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 800162e:	88bb      	ldrh	r3, [r7, #4]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	b29b      	uxth	r3, r3
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fc3d 	bl	8000eb4 <LCD_WR_DATA>
 800163a:	88bb      	ldrh	r3, [r7, #4]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	b29b      	uxth	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fc37 	bl	8000eb4 <LCD_WR_DATA>
 8001646:	e018      	b.n	800167a <LCD_Fast_DrawPoint+0x20e>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏其实就是调转x,y坐标
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 800164a:	799b      	ldrb	r3, [r3, #6]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d106      	bne.n	800165e <LCD_Fast_DrawPoint+0x1f2>
 8001650:	4b10      	ldr	r3, [pc, #64]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 8001652:	881a      	ldrh	r2, [r3, #0]
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	b29b      	uxth	r3, r3
 800165a:	3b01      	subs	r3, #1
 800165c:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 8001660:	895b      	ldrh	r3, [r3, #10]
 8001662:	88fa      	ldrh	r2, [r7, #6]
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fc4a 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 800166e:	899b      	ldrh	r3, [r3, #12]
 8001670:	88ba      	ldrh	r2, [r7, #4]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fc43 	bl	8000f00 <LCD_WriteReg>
	}
	TFT_LCD->LCD_REG=lcddev.wramcmd;
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <LCD_Fast_DrawPoint+0x22c>)
 800167c:	4a05      	ldr	r2, [pc, #20]	; (8001694 <LCD_Fast_DrawPoint+0x228>)
 800167e:	8912      	ldrh	r2, [r2, #8]
 8001680:	801a      	strh	r2, [r3, #0]
	TFT_LCD->LCD_RAM=color;
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <LCD_Fast_DrawPoint+0x22c>)
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	b292      	uxth	r2, r2
 8001688:	805a      	strh	r2, [r3, #2]
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000144 	.word	0x20000144
 8001698:	6c00007e 	.word	0x6c00007e
 800169c:	00000000 	.word	0x00000000

080016a0 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 80016aa:	20be      	movs	r0, #190	; 0xbe
 80016ac:	f7ff fbee 	bl	8000e8c <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 80016b0:	2005      	movs	r0, #5
 80016b2:	f7ff fbff 	bl	8000eb4 <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff f855 	bl	8000768 <__aeabi_i2d>
 80016be:	a310      	add	r3, pc, #64	; (adr r3, 8001700 <LCD_SSD_BackLightSet+0x60>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe fdd4 	bl	8000270 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff f8b4 	bl	800083c <__aeabi_d2uiz>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fbeb 	bl	8000eb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff fbe8 	bl	8000eb4 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 80016e4:	20ff      	movs	r0, #255	; 0xff
 80016e6:	f7ff fbe5 	bl	8000eb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff fbe2 	bl	8000eb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 80016f0:	2000      	movs	r0, #0
 80016f2:	f7ff fbdf 	bl	8000eb4 <LCD_WR_DATA>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	66666666 	.word	0x66666666
 8001704:	40046666 	.word	0x40046666

08001708 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(uint8_t dir)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
	lcddev.dir=dir;		//竖屏/横屏
 8001712:	4a64      	ldr	r2, [pc, #400]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	7193      	strb	r3, [r2, #6]
	if(dir==0)			//竖屏
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d15e      	bne.n	80017dc <LCD_Display_Dir+0xd4>
	{
		lcddev.width=240;
 800171e:	4b61      	ldr	r3, [pc, #388]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001720:	22f0      	movs	r2, #240	; 0xf0
 8001722:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001724:	4b5f      	ldr	r3, [pc, #380]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001726:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800172a:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 800172c:	4b5d      	ldr	r3, [pc, #372]	; (80018a4 <LCD_Display_Dir+0x19c>)
 800172e:	889b      	ldrh	r3, [r3, #4]
 8001730:	f249 3241 	movw	r2, #37697	; 0x9341
 8001734:	4293      	cmp	r3, r2
 8001736:	d005      	beq.n	8001744 <LCD_Display_Dir+0x3c>
 8001738:	4b5a      	ldr	r3, [pc, #360]	; (80018a4 <LCD_Display_Dir+0x19c>)
 800173a:	889b      	ldrh	r3, [r3, #4]
 800173c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001740:	4293      	cmp	r3, r2
 8001742:	d118      	bne.n	8001776 <LCD_Display_Dir+0x6e>
		{
			lcddev.wramcmd=0X2C;
 8001744:	4b57      	ldr	r3, [pc, #348]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001746:	222c      	movs	r2, #44	; 0x2c
 8001748:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 800174a:	4b56      	ldr	r3, [pc, #344]	; (80018a4 <LCD_Display_Dir+0x19c>)
 800174c:	222a      	movs	r2, #42	; 0x2a
 800174e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001750:	4b54      	ldr	r3, [pc, #336]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001752:	222b      	movs	r2, #43	; 0x2b
 8001754:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X5310)
 8001756:	4b53      	ldr	r3, [pc, #332]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001758:	889b      	ldrh	r3, [r3, #4]
 800175a:	f245 3210 	movw	r2, #21264	; 0x5310
 800175e:	4293      	cmp	r3, r2
 8001760:	f040 8099 	bne.w	8001896 <LCD_Display_Dir+0x18e>
			{
				lcddev.width=320;
 8001764:	4b4f      	ldr	r3, [pc, #316]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001766:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800176a:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 800176c:	4b4d      	ldr	r3, [pc, #308]	; (80018a4 <LCD_Display_Dir+0x19c>)
 800176e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001772:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X5310)
 8001774:	e08f      	b.n	8001896 <LCD_Display_Dir+0x18e>
			}
		}else if(lcddev.id==0x5510)
 8001776:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001778:	889b      	ldrh	r3, [r3, #4]
 800177a:	f245 5210 	movw	r2, #21776	; 0x5510
 800177e:	4293      	cmp	r3, r2
 8001780:	d114      	bne.n	80017ac <LCD_Display_Dir+0xa4>
		{
			lcddev.wramcmd=0X2C00;
 8001782:	4b48      	ldr	r3, [pc, #288]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001784:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001788:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 800178a:	4b46      	ldr	r3, [pc, #280]	; (80018a4 <LCD_Display_Dir+0x19c>)
 800178c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001790:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8001792:	4b44      	ldr	r3, [pc, #272]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001794:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001798:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 800179a:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <LCD_Display_Dir+0x19c>)
 800179c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80017a0:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 80017a2:	4b40      	ldr	r3, [pc, #256]	; (80018a4 <LCD_Display_Dir+0x19c>)
 80017a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80017a8:	805a      	strh	r2, [r3, #2]
 80017aa:	e074      	b.n	8001896 <LCD_Display_Dir+0x18e>
		}else if(lcddev.id==0X1963)
 80017ac:	4b3d      	ldr	r3, [pc, #244]	; (80018a4 <LCD_Display_Dir+0x19c>)
 80017ae:	889b      	ldrh	r3, [r3, #4]
 80017b0:	f641 1263 	movw	r2, #6499	; 0x1963
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d16e      	bne.n	8001896 <LCD_Display_Dir+0x18e>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 80017b8:	4b3a      	ldr	r3, [pc, #232]	; (80018a4 <LCD_Display_Dir+0x19c>)
 80017ba:	222c      	movs	r2, #44	; 0x2c
 80017bc:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 80017be:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <LCD_Display_Dir+0x19c>)
 80017c0:	222b      	movs	r2, #43	; 0x2b
 80017c2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 80017c4:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <LCD_Display_Dir+0x19c>)
 80017c6:	222a      	movs	r2, #42	; 0x2a
 80017c8:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 80017ca:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <LCD_Display_Dir+0x19c>)
 80017cc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80017d0:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 80017d2:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <LCD_Display_Dir+0x19c>)
 80017d4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80017d8:	805a      	strh	r2, [r3, #2]
 80017da:	e05c      	b.n	8001896 <LCD_Display_Dir+0x18e>
		}
	}else 				//横屏
	{
		lcddev.width=320;
 80017dc:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <LCD_Display_Dir+0x19c>)
 80017de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017e2:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80017e4:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <LCD_Display_Dir+0x19c>)
 80017e6:	22f0      	movs	r2, #240	; 0xf0
 80017e8:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 80017ea:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <LCD_Display_Dir+0x19c>)
 80017ec:	889b      	ldrh	r3, [r3, #4]
 80017ee:	f249 3241 	movw	r2, #37697	; 0x9341
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d005      	beq.n	8001802 <LCD_Display_Dir+0xfa>
 80017f6:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <LCD_Display_Dir+0x19c>)
 80017f8:	889b      	ldrh	r3, [r3, #4]
 80017fa:	f245 3210 	movw	r2, #21264	; 0x5310
 80017fe:	4293      	cmp	r3, r2
 8001800:	d109      	bne.n	8001816 <LCD_Display_Dir+0x10e>
		{
			lcddev.wramcmd=0X2C;
 8001802:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001804:	222c      	movs	r2, #44	; 0x2c
 8001806:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8001808:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <LCD_Display_Dir+0x19c>)
 800180a:	222a      	movs	r2, #42	; 0x2a
 800180c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 800180e:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001810:	222b      	movs	r2, #43	; 0x2b
 8001812:	819a      	strh	r2, [r3, #12]
 8001814:	e031      	b.n	800187a <LCD_Display_Dir+0x172>
		}else if(lcddev.id==0x5510)
 8001816:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001818:	889b      	ldrh	r3, [r3, #4]
 800181a:	f245 5210 	movw	r2, #21776	; 0x5510
 800181e:	4293      	cmp	r3, r2
 8001820:	d114      	bne.n	800184c <LCD_Display_Dir+0x144>
		{
			lcddev.wramcmd=0X2C00;
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001824:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001828:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <LCD_Display_Dir+0x19c>)
 800182c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001830:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8001832:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001834:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001838:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <LCD_Display_Dir+0x19c>)
 800183c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001840:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001844:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001848:	805a      	strh	r2, [r3, #2]
 800184a:	e016      	b.n	800187a <LCD_Display_Dir+0x172>
		}else if(lcddev.id==0X1963)
 800184c:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <LCD_Display_Dir+0x19c>)
 800184e:	889b      	ldrh	r3, [r3, #4]
 8001850:	f641 1263 	movw	r2, #6499	; 0x1963
 8001854:	4293      	cmp	r3, r2
 8001856:	d110      	bne.n	800187a <LCD_Display_Dir+0x172>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <LCD_Display_Dir+0x19c>)
 800185a:	222c      	movs	r2, #44	; 0x2c
 800185c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001860:	222a      	movs	r2, #42	; 0x2a
 8001862:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001866:	222b      	movs	r2, #43	; 0x2b
 8001868:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <LCD_Display_Dir+0x19c>)
 800186c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001870:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001874:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001878:	805a      	strh	r2, [r3, #2]
		}
		if(lcddev.id==0X5310)
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <LCD_Display_Dir+0x19c>)
 800187c:	889b      	ldrh	r3, [r3, #4]
 800187e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001882:	4293      	cmp	r3, r2
 8001884:	d107      	bne.n	8001896 <LCD_Display_Dir+0x18e>
		{
			lcddev.width=480;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001888:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800188c:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <LCD_Display_Dir+0x19c>)
 8001890:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001894:	805a      	strh	r2, [r3, #2]
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001896:	2000      	movs	r0, #0
 8001898:	f7ff fc4c 	bl	8001134 <LCD_Scan_Dir>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000144 	.word	0x20000144

080018a8 <TFTLCD_Init>:


//初始化lcd
//该初始化函数可以初始化各种型号的LCD(详见本.c文件最前面的描述)
void TFTLCD_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	HAL_Delay(50); // delay 50 ms
 80018ac:	2032      	movs	r0, #50	; 0x32
 80018ae:	f002 fe2d 	bl	800450c <HAL_Delay>

	//尝试9341 ID的读取
	LCD_WR_REG(0XD3);
 80018b2:	20d3      	movs	r0, #211	; 0xd3
 80018b4:	f7ff faea 	bl	8000e8c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80018b8:	f7ff fb10 	bl	8000edc <LCD_RD_DATA>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	4b5e      	ldr	r3, [pc, #376]	; (8001a3c <TFTLCD_Init+0x194>)
 80018c2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();	//读到0X00
 80018c4:	f7ff fb0a 	bl	8000edc <LCD_RD_DATA>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b5b      	ldr	r3, [pc, #364]	; (8001a3c <TFTLCD_Init+0x194>)
 80018ce:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();   	//读取93
 80018d0:	f7ff fb04 	bl	8000edc <LCD_RD_DATA>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b58      	ldr	r3, [pc, #352]	; (8001a3c <TFTLCD_Init+0x194>)
 80018da:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80018dc:	4b57      	ldr	r3, [pc, #348]	; (8001a3c <TFTLCD_Init+0x194>)
 80018de:	889b      	ldrh	r3, [r3, #4]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b55      	ldr	r3, [pc, #340]	; (8001a3c <TFTLCD_Init+0x194>)
 80018e6:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();  	//读取41
 80018e8:	f7ff faf8 	bl	8000edc <LCD_RD_DATA>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b52      	ldr	r3, [pc, #328]	; (8001a3c <TFTLCD_Init+0x194>)
 80018f2:	889b      	ldrh	r3, [r3, #4]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	4b50      	ldr	r3, [pc, #320]	; (8001a3c <TFTLCD_Init+0x194>)
 80018fa:	809a      	strh	r2, [r3, #4]
	if(lcddev.id!=0X9341)		//非9341,尝试看看是不是NT35310
 80018fc:	4b4f      	ldr	r3, [pc, #316]	; (8001a3c <TFTLCD_Init+0x194>)
 80018fe:	889b      	ldrh	r3, [r3, #4]
 8001900:	f249 3241 	movw	r2, #37697	; 0x9341
 8001904:	4293      	cmp	r3, r2
 8001906:	f000 808b 	beq.w	8001a20 <TFTLCD_Init+0x178>
	{
		LCD_WR_REG(0XD4);
 800190a:	20d4      	movs	r0, #212	; 0xd4
 800190c:	f7ff fabe 	bl	8000e8c <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();//dummy read
 8001910:	f7ff fae4 	bl	8000edc <LCD_RD_DATA>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	4b48      	ldr	r3, [pc, #288]	; (8001a3c <TFTLCD_Init+0x194>)
 800191a:	809a      	strh	r2, [r3, #4]
		lcddev.id=LCD_RD_DATA();//读回0X01
 800191c:	f7ff fade 	bl	8000edc <LCD_RD_DATA>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	4b45      	ldr	r3, [pc, #276]	; (8001a3c <TFTLCD_Init+0x194>)
 8001926:	809a      	strh	r2, [r3, #4]
		lcddev.id=LCD_RD_DATA();//读回0X53
 8001928:	f7ff fad8 	bl	8000edc <LCD_RD_DATA>
 800192c:	4603      	mov	r3, r0
 800192e:	461a      	mov	r2, r3
 8001930:	4b42      	ldr	r3, [pc, #264]	; (8001a3c <TFTLCD_Init+0x194>)
 8001932:	809a      	strh	r2, [r3, #4]
		lcddev.id<<=8;
 8001934:	4b41      	ldr	r3, [pc, #260]	; (8001a3c <TFTLCD_Init+0x194>)
 8001936:	889b      	ldrh	r3, [r3, #4]
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	b29a      	uxth	r2, r3
 800193c:	4b3f      	ldr	r3, [pc, #252]	; (8001a3c <TFTLCD_Init+0x194>)
 800193e:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 8001940:	f7ff facc 	bl	8000edc <LCD_RD_DATA>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	4b3c      	ldr	r3, [pc, #240]	; (8001a3c <TFTLCD_Init+0x194>)
 800194a:	889b      	ldrh	r3, [r3, #4]
 800194c:	4313      	orrs	r3, r2
 800194e:	b29a      	uxth	r2, r3
 8001950:	4b3a      	ldr	r3, [pc, #232]	; (8001a3c <TFTLCD_Init+0x194>)
 8001952:	809a      	strh	r2, [r3, #4]
		if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001954:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <TFTLCD_Init+0x194>)
 8001956:	889b      	ldrh	r3, [r3, #4]
 8001958:	f245 3210 	movw	r2, #21264	; 0x5310
 800195c:	4293      	cmp	r3, r2
 800195e:	d05f      	beq.n	8001a20 <TFTLCD_Init+0x178>
		{
			LCD_WR_REG(0XDA00);
 8001960:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8001964:	f7ff fa92 	bl	8000e8c <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA();		//读回0X00
 8001968:	f7ff fab8 	bl	8000edc <LCD_RD_DATA>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <TFTLCD_Init+0x194>)
 8001972:	809a      	strh	r2, [r3, #4]
			LCD_WR_REG(0XDB00);
 8001974:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001978:	f7ff fa88 	bl	8000e8c <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA();		//读回0X80
 800197c:	f7ff faae 	bl	8000edc <LCD_RD_DATA>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <TFTLCD_Init+0x194>)
 8001986:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 8001988:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <TFTLCD_Init+0x194>)
 800198a:	889b      	ldrh	r3, [r3, #4]
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	b29a      	uxth	r2, r3
 8001990:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <TFTLCD_Init+0x194>)
 8001992:	809a      	strh	r2, [r3, #4]
			LCD_WR_REG(0XDC00);
 8001994:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8001998:	f7ff fa78 	bl	8000e8c <LCD_WR_REG>
			lcddev.id|=LCD_RD_DATA();		//读回0X00
 800199c:	f7ff fa9e 	bl	8000edc <LCD_RD_DATA>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <TFTLCD_Init+0x194>)
 80019a6:	889b      	ldrh	r3, [r3, #4]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <TFTLCD_Init+0x194>)
 80019ae:	809a      	strh	r2, [r3, #4]
			if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 80019b0:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <TFTLCD_Init+0x194>)
 80019b2:	889b      	ldrh	r3, [r3, #4]
 80019b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019b8:	d103      	bne.n	80019c2 <TFTLCD_Init+0x11a>
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <TFTLCD_Init+0x194>)
 80019bc:	f245 5210 	movw	r2, #21776	; 0x5510
 80019c0:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 80019c2:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <TFTLCD_Init+0x194>)
 80019c4:	889b      	ldrh	r3, [r3, #4]
 80019c6:	f245 5210 	movw	r2, #21776	; 0x5510
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d028      	beq.n	8001a20 <TFTLCD_Init+0x178>
			{
				LCD_WR_REG(0XA1);
 80019ce:	20a1      	movs	r0, #161	; 0xa1
 80019d0:	f7ff fa5c 	bl	8000e8c <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();
 80019d4:	f7ff fa82 	bl	8000edc <LCD_RD_DATA>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <TFTLCD_Init+0x194>)
 80019de:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();	//读回0X57
 80019e0:	f7ff fa7c 	bl	8000edc <LCD_RD_DATA>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <TFTLCD_Init+0x194>)
 80019ea:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <TFTLCD_Init+0x194>)
 80019ee:	889b      	ldrh	r3, [r3, #4]
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <TFTLCD_Init+0x194>)
 80019f6:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//读回0X61
 80019f8:	f7ff fa70 	bl	8000edc <LCD_RD_DATA>
 80019fc:	4603      	mov	r3, r0
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <TFTLCD_Init+0x194>)
 8001a02:	889b      	ldrh	r3, [r3, #4]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <TFTLCD_Init+0x194>)
 8001a0a:	809a      	strh	r2, [r3, #4]
				if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <TFTLCD_Init+0x194>)
 8001a0e:	889b      	ldrh	r3, [r3, #4]
 8001a10:	f245 7261 	movw	r2, #22369	; 0x5761
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d103      	bne.n	8001a20 <TFTLCD_Init+0x178>
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <TFTLCD_Init+0x194>)
 8001a1a:	f641 1263 	movw	r2, #6499	; 0x1963
 8001a1e:	809a      	strh	r2, [r3, #4]
			}
		}
	}
	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <TFTLCD_Init+0x194>)
 8001a22:	889b      	ldrh	r3, [r3, #4]
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <TFTLCD_Init+0x198>)
 8001a28:	f003 ffd4 	bl	80059d4 <iprintf>
	if(lcddev.id==0X9341)	//9341初始化
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <TFTLCD_Init+0x194>)
 8001a2e:	889b      	ldrh	r3, [r3, #4]
 8001a30:	f249 3241 	movw	r2, #37697	; 0x9341
 8001a34:	4293      	cmp	r3, r2
 8001a36:	f040 811b 	bne.w	8001c70 <TFTLCD_Init+0x3c8>
 8001a3a:	e003      	b.n	8001a44 <TFTLCD_Init+0x19c>
 8001a3c:	20000144 	.word	0x20000144
 8001a40:	08006898 	.word	0x08006898
	{
		LCD_WR_REG(0xCF);
 8001a44:	20cf      	movs	r0, #207	; 0xcf
 8001a46:	f7ff fa21 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f7ff fa32 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 8001a50:	20c1      	movs	r0, #193	; 0xc1
 8001a52:	f7ff fa2f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 8001a56:	2030      	movs	r0, #48	; 0x30
 8001a58:	f7ff fa2c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 8001a5c:	20ed      	movs	r0, #237	; 0xed
 8001a5e:	f7ff fa15 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 8001a62:	2064      	movs	r0, #100	; 0x64
 8001a64:	f7ff fa26 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8001a68:	2003      	movs	r0, #3
 8001a6a:	f7ff fa23 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 8001a6e:	2012      	movs	r0, #18
 8001a70:	f7ff fa20 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 8001a74:	2081      	movs	r0, #129	; 0x81
 8001a76:	f7ff fa1d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 8001a7a:	20e8      	movs	r0, #232	; 0xe8
 8001a7c:	f7ff fa06 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 8001a80:	2085      	movs	r0, #133	; 0x85
 8001a82:	f7ff fa17 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8001a86:	2010      	movs	r0, #16
 8001a88:	f7ff fa14 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8001a8c:	207a      	movs	r0, #122	; 0x7a
 8001a8e:	f7ff fa11 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 8001a92:	20cb      	movs	r0, #203	; 0xcb
 8001a94:	f7ff f9fa 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 8001a98:	2039      	movs	r0, #57	; 0x39
 8001a9a:	f7ff fa0b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8001a9e:	202c      	movs	r0, #44	; 0x2c
 8001aa0:	f7ff fa08 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f7ff fa05 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8001aaa:	2034      	movs	r0, #52	; 0x34
 8001aac:	f7ff fa02 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	f7ff f9ff 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 8001ab6:	20f7      	movs	r0, #247	; 0xf7
 8001ab8:	f7ff f9e8 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8001abc:	2020      	movs	r0, #32
 8001abe:	f7ff f9f9 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 8001ac2:	20ea      	movs	r0, #234	; 0xea
 8001ac4:	f7ff f9e2 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f7ff f9f3 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f7ff f9f0 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 8001ad4:	20c0      	movs	r0, #192	; 0xc0
 8001ad6:	f7ff f9d9 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001ada:	201b      	movs	r0, #27
 8001adc:	f7ff f9ea 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 8001ae0:	20c1      	movs	r0, #193	; 0xc1
 8001ae2:	f7ff f9d3 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f7ff f9e4 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 8001aec:	20c5      	movs	r0, #197	; 0xc5
 8001aee:	f7ff f9cd 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 8001af2:	2030      	movs	r0, #48	; 0x30
 8001af4:	f7ff f9de 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 8001af8:	2030      	movs	r0, #48	; 0x30
 8001afa:	f7ff f9db 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 8001afe:	20c7      	movs	r0, #199	; 0xc7
 8001b00:	f7ff f9c4 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 8001b04:	20b7      	movs	r0, #183	; 0xb7
 8001b06:	f7ff f9d5 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 8001b0a:	2036      	movs	r0, #54	; 0x36
 8001b0c:	f7ff f9be 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 8001b10:	2048      	movs	r0, #72	; 0x48
 8001b12:	f7ff f9cf 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 8001b16:	203a      	movs	r0, #58	; 0x3a
 8001b18:	f7ff f9b8 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 8001b1c:	2055      	movs	r0, #85	; 0x55
 8001b1e:	f7ff f9c9 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 8001b22:	20b1      	movs	r0, #177	; 0xb1
 8001b24:	f7ff f9b2 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7ff f9c3 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 8001b2e:	201a      	movs	r0, #26
 8001b30:	f7ff f9c0 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 8001b34:	20b6      	movs	r0, #182	; 0xb6
 8001b36:	f7ff f9a9 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8001b3a:	200a      	movs	r0, #10
 8001b3c:	f7ff f9ba 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8001b40:	20a2      	movs	r0, #162	; 0xa2
 8001b42:	f7ff f9b7 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001b46:	20f2      	movs	r0, #242	; 0xf2
 8001b48:	f7ff f9a0 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff f9b1 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 8001b52:	2026      	movs	r0, #38	; 0x26
 8001b54:	f7ff f99a 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f7ff f9ab 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 8001b5e:	20e0      	movs	r0, #224	; 0xe0
 8001b60:	f7ff f994 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 8001b64:	200f      	movs	r0, #15
 8001b66:	f7ff f9a5 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8001b6a:	202a      	movs	r0, #42	; 0x2a
 8001b6c:	f7ff f9a2 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 8001b70:	2028      	movs	r0, #40	; 0x28
 8001b72:	f7ff f99f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8001b76:	2008      	movs	r0, #8
 8001b78:	f7ff f99c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 8001b7c:	200e      	movs	r0, #14
 8001b7e:	f7ff f999 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8001b82:	2008      	movs	r0, #8
 8001b84:	f7ff f996 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8001b88:	2054      	movs	r0, #84	; 0x54
 8001b8a:	f7ff f993 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 8001b8e:	20a9      	movs	r0, #169	; 0xa9
 8001b90:	f7ff f990 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8001b94:	2043      	movs	r0, #67	; 0x43
 8001b96:	f7ff f98d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 8001b9a:	200a      	movs	r0, #10
 8001b9c:	f7ff f98a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8001ba0:	200f      	movs	r0, #15
 8001ba2:	f7ff f987 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7ff f984 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7ff f981 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f7ff f97e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f7ff f97b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 8001bbe:	20e1      	movs	r0, #225	; 0xe1
 8001bc0:	f7ff f964 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f7ff f975 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 8001bca:	2015      	movs	r0, #21
 8001bcc:	f7ff f972 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8001bd0:	2017      	movs	r0, #23
 8001bd2:	f7ff f96f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 8001bd6:	2007      	movs	r0, #7
 8001bd8:	f7ff f96c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8001bdc:	2011      	movs	r0, #17
 8001bde:	f7ff f969 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 8001be2:	2006      	movs	r0, #6
 8001be4:	f7ff f966 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 8001be8:	202b      	movs	r0, #43	; 0x2b
 8001bea:	f7ff f963 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8001bee:	2056      	movs	r0, #86	; 0x56
 8001bf0:	f7ff f960 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8001bf4:	203c      	movs	r0, #60	; 0x3c
 8001bf6:	f7ff f95d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8001bfa:	2005      	movs	r0, #5
 8001bfc:	f7ff f95a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8001c00:	2010      	movs	r0, #16
 8001c02:	f7ff f957 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8001c06:	200f      	movs	r0, #15
 8001c08:	f7ff f954 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8001c0c:	203f      	movs	r0, #63	; 0x3f
 8001c0e:	f7ff f951 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8001c12:	203f      	movs	r0, #63	; 0x3f
 8001c14:	f7ff f94e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8001c18:	200f      	movs	r0, #15
 8001c1a:	f7ff f94b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 8001c1e:	202b      	movs	r0, #43	; 0x2b
 8001c20:	f7ff f934 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff f945 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f7ff f942 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f7ff f93f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 8001c36:	203f      	movs	r0, #63	; 0x3f
 8001c38:	f7ff f93c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 8001c3c:	202a      	movs	r0, #42	; 0x2a
 8001c3e:	f7ff f925 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001c42:	2000      	movs	r0, #0
 8001c44:	f7ff f936 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff f933 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f7ff f930 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 8001c54:	20ef      	movs	r0, #239	; 0xef
 8001c56:	f7ff f92d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 8001c5a:	2011      	movs	r0, #17
 8001c5c:	f7ff f916 	bl	8000e8c <LCD_WR_REG>
		HAL_Delay(120);
 8001c60:	2078      	movs	r0, #120	; 0x78
 8001c62:	f002 fc53 	bl	800450c <HAL_Delay>
		LCD_WR_REG(0x29); //display on
 8001c66:	2029      	movs	r0, #41	; 0x29
 8001c68:	f7ff f910 	bl	8000e8c <LCD_WR_REG>
 8001c6c:	f001 bfca 	b.w	8003c04 <TFTLCD_Init+0x235c>
	}else if(lcddev.id==0x5310)
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <TFTLCD_Init+0x3d8>)
 8001c72:	889b      	ldrh	r3, [r3, #4]
 8001c74:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	f040 877c 	bne.w	8002b76 <TFTLCD_Init+0x12ce>
 8001c7e:	e001      	b.n	8001c84 <TFTLCD_Init+0x3dc>
 8001c80:	20000144 	.word	0x20000144
	{
		LCD_WR_REG(0xED);
 8001c84:	20ed      	movs	r0, #237	; 0xed
 8001c86:	f7ff f901 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f7ff f912 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 8001c90:	20fe      	movs	r0, #254	; 0xfe
 8001c92:	f7ff f90f 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 8001c96:	20ee      	movs	r0, #238	; 0xee
 8001c98:	f7ff f8f8 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 8001c9c:	20de      	movs	r0, #222	; 0xde
 8001c9e:	f7ff f909 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8001ca2:	2021      	movs	r0, #33	; 0x21
 8001ca4:	f7ff f906 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 8001ca8:	20f1      	movs	r0, #241	; 0xf1
 8001caa:	f7ff f8ef 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f7ff f900 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 8001cb4:	20df      	movs	r0, #223	; 0xdf
 8001cb6:	f7ff f8e9 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 8001cba:	2010      	movs	r0, #16
 8001cbc:	f7ff f8fa 	bl	8000eb4 <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8001cc0:	20c4      	movs	r0, #196	; 0xc4
 8001cc2:	f7ff f8e3 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 8001cc6:	208f      	movs	r0, #143	; 0x8f
 8001cc8:	f7ff f8f4 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8001ccc:	20c6      	movs	r0, #198	; 0xc6
 8001cce:	f7ff f8dd 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f7ff f8ee 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8001cd8:	20e2      	movs	r0, #226	; 0xe2
 8001cda:	f7ff f8eb 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8001cde:	20e2      	movs	r0, #226	; 0xe2
 8001ce0:	f7ff f8e8 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8001ce4:	20e2      	movs	r0, #226	; 0xe2
 8001ce6:	f7ff f8e5 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 8001cea:	20bf      	movs	r0, #191	; 0xbf
 8001cec:	f7ff f8ce 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8001cf0:	20aa      	movs	r0, #170	; 0xaa
 8001cf2:	f7ff f8df 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 8001cf6:	20b0      	movs	r0, #176	; 0xb0
 8001cf8:	f7ff f8c8 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 8001cfc:	200d      	movs	r0, #13
 8001cfe:	f7ff f8d9 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f7ff f8d6 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 8001d08:	200d      	movs	r0, #13
 8001d0a:	f7ff f8d3 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f7ff f8d0 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8001d14:	2011      	movs	r0, #17
 8001d16:	f7ff f8cd 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7ff f8ca 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 8001d20:	2019      	movs	r0, #25
 8001d22:	f7ff f8c7 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f7ff f8c4 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8001d2c:	2021      	movs	r0, #33	; 0x21
 8001d2e:	f7ff f8c1 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7ff f8be 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 8001d38:	202d      	movs	r0, #45	; 0x2d
 8001d3a:	f7ff f8bb 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff f8b8 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 8001d44:	203d      	movs	r0, #61	; 0x3d
 8001d46:	f7ff f8b5 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f7ff f8b2 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8001d50:	205d      	movs	r0, #93	; 0x5d
 8001d52:	f7ff f8af 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f7ff f8ac 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8001d5c:	205d      	movs	r0, #93	; 0x5d
 8001d5e:	f7ff f8a9 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f7ff f8a6 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 8001d68:	20b1      	movs	r0, #177	; 0xb1
 8001d6a:	f7ff f88f 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 8001d6e:	2080      	movs	r0, #128	; 0x80
 8001d70:	f7ff f8a0 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d74:	2000      	movs	r0, #0
 8001d76:	f7ff f89d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8001d7a:	208b      	movs	r0, #139	; 0x8b
 8001d7c:	f7ff f89a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d80:	2000      	movs	r0, #0
 8001d82:	f7ff f897 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8001d86:	2096      	movs	r0, #150	; 0x96
 8001d88:	f7ff f894 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff f891 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 8001d92:	20b2      	movs	r0, #178	; 0xb2
 8001d94:	f7ff f87a 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff f88b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f7ff f888 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8001da4:	2002      	movs	r0, #2
 8001da6:	f7ff f885 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f7ff f882 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8001db0:	2003      	movs	r0, #3
 8001db2:	f7ff f87f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff f87c 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 8001dbc:	20b3      	movs	r0, #179	; 0xb3
 8001dbe:	f7ff f865 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7ff f876 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f7ff f873 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7ff f870 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff f86d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7ff f86a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff f867 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7ff f864 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001dec:	2000      	movs	r0, #0
 8001dee:	f7ff f861 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001df2:	2000      	movs	r0, #0
 8001df4:	f7ff f85e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f7ff f85b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7ff f858 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff f855 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff f852 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff f84f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f7ff f84c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7ff f849 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7ff f846 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f7ff f843 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f7ff f840 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7ff f83d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f7ff f83a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e40:	2000      	movs	r0, #0
 8001e42:	f7ff f837 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff f834 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7ff f831 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 8001e52:	20b4      	movs	r0, #180	; 0xb4
 8001e54:	f7ff f81a 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 8001e58:	208b      	movs	r0, #139	; 0x8b
 8001e5a:	f7ff f82b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff f828 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8001e64:	2096      	movs	r0, #150	; 0x96
 8001e66:	f7ff f825 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f7ff f822 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 8001e70:	20a1      	movs	r0, #161	; 0xa1
 8001e72:	f7ff f81f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e76:	2000      	movs	r0, #0
 8001e78:	f7ff f81c 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 8001e7c:	20b5      	movs	r0, #181	; 0xb5
 8001e7e:	f7ff f805 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 8001e82:	2002      	movs	r0, #2
 8001e84:	f7ff f816 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f7ff f813 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8001e8e:	2003      	movs	r0, #3
 8001e90:	f7ff f810 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7ff f80d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8001e9a:	2004      	movs	r0, #4
 8001e9c:	f7ff f80a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff f807 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 8001ea6:	20b6      	movs	r0, #182	; 0xb6
 8001ea8:	f7fe fff0 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7ff f801 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7fe fffe 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 8001eb8:	20b7      	movs	r0, #183	; 0xb7
 8001eba:	f7fe ffe7 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7fe fff8 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7fe fff5 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8001eca:	203f      	movs	r0, #63	; 0x3f
 8001ecc:	f7fe fff2 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7fe ffef 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 8001ed6:	205e      	movs	r0, #94	; 0x5e
 8001ed8:	f7fe ffec 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7fe ffe9 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8001ee2:	2064      	movs	r0, #100	; 0x64
 8001ee4:	f7fe ffe6 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7fe ffe3 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 8001eee:	208c      	movs	r0, #140	; 0x8c
 8001ef0:	f7fe ffe0 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7fe ffdd 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 8001efa:	20ac      	movs	r0, #172	; 0xac
 8001efc:	f7fe ffda 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7fe ffd7 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8001f06:	20dc      	movs	r0, #220	; 0xdc
 8001f08:	f7fe ffd4 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7fe ffd1 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 8001f12:	2070      	movs	r0, #112	; 0x70
 8001f14:	f7fe ffce 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f7fe ffcb 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 8001f1e:	2090      	movs	r0, #144	; 0x90
 8001f20:	f7fe ffc8 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7fe ffc5 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 8001f2a:	20eb      	movs	r0, #235	; 0xeb
 8001f2c:	f7fe ffc2 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f30:	2000      	movs	r0, #0
 8001f32:	f7fe ffbf 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8001f36:	20dc      	movs	r0, #220	; 0xdc
 8001f38:	f7fe ffbc 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f7fe ffb9 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 8001f42:	20b8      	movs	r0, #184	; 0xb8
 8001f44:	f7fe ffa2 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f7fe ffb3 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7fe ffb0 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7fe ffad 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f7fe ffaa 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f60:	2000      	movs	r0, #0
 8001f62:	f7fe ffa7 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f7fe ffa4 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7fe ffa1 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7fe ff9e 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 8001f78:	20ba      	movs	r0, #186	; 0xba
 8001f7a:	f7fe ff87 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 8001f7e:	2024      	movs	r0, #36	; 0x24
 8001f80:	f7fe ff98 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7fe ff95 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7fe ff92 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7fe ff8f 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 8001f96:	20c1      	movs	r0, #193	; 0xc1
 8001f98:	f7fe ff78 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8001f9c:	2020      	movs	r0, #32
 8001f9e:	f7fe ff89 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7fe ff86 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8001fa8:	2054      	movs	r0, #84	; 0x54
 8001faa:	f7fe ff83 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f7fe ff80 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8001fb4:	20ff      	movs	r0, #255	; 0xff
 8001fb6:	f7fe ff7d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7fe ff7a 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 8001fc0:	20c2      	movs	r0, #194	; 0xc2
 8001fc2:	f7fe ff63 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8001fc6:	200a      	movs	r0, #10
 8001fc8:	f7fe ff74 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7fe ff71 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8001fd2:	2004      	movs	r0, #4
 8001fd4:	f7fe ff6e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7fe ff6b 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 8001fde:	20c3      	movs	r0, #195	; 0xc3
 8001fe0:	f7fe ff54 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 8001fe4:	203c      	movs	r0, #60	; 0x3c
 8001fe6:	f7fe ff65 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fea:	2000      	movs	r0, #0
 8001fec:	f7fe ff62 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 8001ff0:	203a      	movs	r0, #58	; 0x3a
 8001ff2:	f7fe ff5f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f7fe ff5c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 8001ffc:	2039      	movs	r0, #57	; 0x39
 8001ffe:	f7fe ff59 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002002:	2000      	movs	r0, #0
 8002004:	f7fe ff56 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 8002008:	2037      	movs	r0, #55	; 0x37
 800200a:	f7fe ff53 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800200e:	2000      	movs	r0, #0
 8002010:	f7fe ff50 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002014:	203c      	movs	r0, #60	; 0x3c
 8002016:	f7fe ff4d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800201a:	2000      	movs	r0, #0
 800201c:	f7fe ff4a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002020:	2036      	movs	r0, #54	; 0x36
 8002022:	f7fe ff47 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002026:	2000      	movs	r0, #0
 8002028:	f7fe ff44 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 800202c:	2032      	movs	r0, #50	; 0x32
 800202e:	f7fe ff41 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002032:	2000      	movs	r0, #0
 8002034:	f7fe ff3e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8002038:	202f      	movs	r0, #47	; 0x2f
 800203a:	f7fe ff3b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800203e:	2000      	movs	r0, #0
 8002040:	f7fe ff38 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002044:	202c      	movs	r0, #44	; 0x2c
 8002046:	f7fe ff35 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800204a:	2000      	movs	r0, #0
 800204c:	f7fe ff32 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002050:	2029      	movs	r0, #41	; 0x29
 8002052:	f7fe ff2f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002056:	2000      	movs	r0, #0
 8002058:	f7fe ff2c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 800205c:	2026      	movs	r0, #38	; 0x26
 800205e:	f7fe ff29 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002062:	2000      	movs	r0, #0
 8002064:	f7fe ff26 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002068:	2024      	movs	r0, #36	; 0x24
 800206a:	f7fe ff23 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800206e:	2000      	movs	r0, #0
 8002070:	f7fe ff20 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002074:	2024      	movs	r0, #36	; 0x24
 8002076:	f7fe ff1d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800207a:	2000      	movs	r0, #0
 800207c:	f7fe ff1a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002080:	2023      	movs	r0, #35	; 0x23
 8002082:	f7fe ff17 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002086:	2000      	movs	r0, #0
 8002088:	f7fe ff14 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 800208c:	203c      	movs	r0, #60	; 0x3c
 800208e:	f7fe ff11 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002092:	2000      	movs	r0, #0
 8002094:	f7fe ff0e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002098:	2036      	movs	r0, #54	; 0x36
 800209a:	f7fe ff0b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800209e:	2000      	movs	r0, #0
 80020a0:	f7fe ff08 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 80020a4:	2032      	movs	r0, #50	; 0x32
 80020a6:	f7fe ff05 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7fe ff02 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 80020b0:	202f      	movs	r0, #47	; 0x2f
 80020b2:	f7fe feff 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7fe fefc 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 80020bc:	202c      	movs	r0, #44	; 0x2c
 80020be:	f7fe fef9 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020c2:	2000      	movs	r0, #0
 80020c4:	f7fe fef6 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 80020c8:	2029      	movs	r0, #41	; 0x29
 80020ca:	f7fe fef3 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020ce:	2000      	movs	r0, #0
 80020d0:	f7fe fef0 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 80020d4:	2026      	movs	r0, #38	; 0x26
 80020d6:	f7fe feed 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020da:	2000      	movs	r0, #0
 80020dc:	f7fe feea 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 80020e0:	2024      	movs	r0, #36	; 0x24
 80020e2:	f7fe fee7 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020e6:	2000      	movs	r0, #0
 80020e8:	f7fe fee4 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 80020ec:	2024      	movs	r0, #36	; 0x24
 80020ee:	f7fe fee1 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020f2:	2000      	movs	r0, #0
 80020f4:	f7fe fede 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 80020f8:	2023      	movs	r0, #35	; 0x23
 80020fa:	f7fe fedb 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020fe:	2000      	movs	r0, #0
 8002100:	f7fe fed8 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 8002104:	20c4      	movs	r0, #196	; 0xc4
 8002106:	f7fe fec1 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 800210a:	2062      	movs	r0, #98	; 0x62
 800210c:	f7fe fed2 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002110:	2000      	movs	r0, #0
 8002112:	f7fe fecf 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8002116:	2005      	movs	r0, #5
 8002118:	f7fe fecc 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800211c:	2000      	movs	r0, #0
 800211e:	f7fe fec9 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002122:	2084      	movs	r0, #132	; 0x84
 8002124:	f7fe fec6 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002128:	2000      	movs	r0, #0
 800212a:	f7fe fec3 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 800212e:	20f0      	movs	r0, #240	; 0xf0
 8002130:	f7fe fec0 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002134:	2000      	movs	r0, #0
 8002136:	f7fe febd 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 800213a:	2018      	movs	r0, #24
 800213c:	f7fe feba 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002140:	2000      	movs	r0, #0
 8002142:	f7fe feb7 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 8002146:	20a4      	movs	r0, #164	; 0xa4
 8002148:	f7fe feb4 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800214c:	2000      	movs	r0, #0
 800214e:	f7fe feb1 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8002152:	2018      	movs	r0, #24
 8002154:	f7fe feae 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002158:	2000      	movs	r0, #0
 800215a:	f7fe feab 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 800215e:	2050      	movs	r0, #80	; 0x50
 8002160:	f7fe fea8 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002164:	2000      	movs	r0, #0
 8002166:	f7fe fea5 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 800216a:	200c      	movs	r0, #12
 800216c:	f7fe fea2 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002170:	2000      	movs	r0, #0
 8002172:	f7fe fe9f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8002176:	2017      	movs	r0, #23
 8002178:	f7fe fe9c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800217c:	2000      	movs	r0, #0
 800217e:	f7fe fe99 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 8002182:	2095      	movs	r0, #149	; 0x95
 8002184:	f7fe fe96 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002188:	2000      	movs	r0, #0
 800218a:	f7fe fe93 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800218e:	20f3      	movs	r0, #243	; 0xf3
 8002190:	f7fe fe90 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002194:	2000      	movs	r0, #0
 8002196:	f7fe fe8d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 800219a:	20e6      	movs	r0, #230	; 0xe6
 800219c:	f7fe fe8a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021a0:	2000      	movs	r0, #0
 80021a2:	f7fe fe87 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 80021a6:	20c5      	movs	r0, #197	; 0xc5
 80021a8:	f7fe fe70 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 80021ac:	2032      	movs	r0, #50	; 0x32
 80021ae:	f7fe fe81 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021b2:	2000      	movs	r0, #0
 80021b4:	f7fe fe7e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80021b8:	2044      	movs	r0, #68	; 0x44
 80021ba:	f7fe fe7b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021be:	2000      	movs	r0, #0
 80021c0:	f7fe fe78 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 80021c4:	2065      	movs	r0, #101	; 0x65
 80021c6:	f7fe fe75 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f7fe fe72 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80021d0:	2076      	movs	r0, #118	; 0x76
 80021d2:	f7fe fe6f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7fe fe6c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80021dc:	2088      	movs	r0, #136	; 0x88
 80021de:	f7fe fe69 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7fe fe66 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 80021e8:	20c6      	movs	r0, #198	; 0xc6
 80021ea:	f7fe fe4f 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 80021ee:	2020      	movs	r0, #32
 80021f0:	f7fe fe60 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021f4:	2000      	movs	r0, #0
 80021f6:	f7fe fe5d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 80021fa:	2017      	movs	r0, #23
 80021fc:	f7fe fe5a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002200:	2000      	movs	r0, #0
 8002202:	f7fe fe57 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8002206:	2001      	movs	r0, #1
 8002208:	f7fe fe54 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800220c:	2000      	movs	r0, #0
 800220e:	f7fe fe51 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 8002212:	20c7      	movs	r0, #199	; 0xc7
 8002214:	f7fe fe3a 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002218:	2000      	movs	r0, #0
 800221a:	f7fe fe4b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800221e:	2000      	movs	r0, #0
 8002220:	f7fe fe48 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002224:	2000      	movs	r0, #0
 8002226:	f7fe fe45 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800222a:	2000      	movs	r0, #0
 800222c:	f7fe fe42 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8002230:	20c8      	movs	r0, #200	; 0xc8
 8002232:	f7fe fe2b 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002236:	2000      	movs	r0, #0
 8002238:	f7fe fe3c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800223c:	2000      	movs	r0, #0
 800223e:	f7fe fe39 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002242:	2000      	movs	r0, #0
 8002244:	f7fe fe36 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002248:	2000      	movs	r0, #0
 800224a:	f7fe fe33 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 800224e:	20c9      	movs	r0, #201	; 0xc9
 8002250:	f7fe fe1c 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002254:	2000      	movs	r0, #0
 8002256:	f7fe fe2d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800225a:	2000      	movs	r0, #0
 800225c:	f7fe fe2a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002260:	2000      	movs	r0, #0
 8002262:	f7fe fe27 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002266:	2000      	movs	r0, #0
 8002268:	f7fe fe24 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800226c:	2000      	movs	r0, #0
 800226e:	f7fe fe21 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002272:	2000      	movs	r0, #0
 8002274:	f7fe fe1e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002278:	2000      	movs	r0, #0
 800227a:	f7fe fe1b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800227e:	2000      	movs	r0, #0
 8002280:	f7fe fe18 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002284:	2000      	movs	r0, #0
 8002286:	f7fe fe15 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800228a:	2000      	movs	r0, #0
 800228c:	f7fe fe12 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002290:	2000      	movs	r0, #0
 8002292:	f7fe fe0f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002296:	2000      	movs	r0, #0
 8002298:	f7fe fe0c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800229c:	2000      	movs	r0, #0
 800229e:	f7fe fe09 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022a2:	2000      	movs	r0, #0
 80022a4:	f7fe fe06 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022a8:	2000      	movs	r0, #0
 80022aa:	f7fe fe03 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ae:	2000      	movs	r0, #0
 80022b0:	f7fe fe00 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 80022b4:	20e0      	movs	r0, #224	; 0xe0
 80022b6:	f7fe fde9 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 80022ba:	2016      	movs	r0, #22
 80022bc:	f7fe fdfa 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7fe fdf7 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80022c6:	201c      	movs	r0, #28
 80022c8:	f7fe fdf4 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7fe fdf1 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 80022d2:	2021      	movs	r0, #33	; 0x21
 80022d4:	f7fe fdee 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022d8:	2000      	movs	r0, #0
 80022da:	f7fe fdeb 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80022de:	2036      	movs	r0, #54	; 0x36
 80022e0:	f7fe fde8 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7fe fde5 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 80022ea:	2046      	movs	r0, #70	; 0x46
 80022ec:	f7fe fde2 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022f0:	2000      	movs	r0, #0
 80022f2:	f7fe fddf 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80022f6:	2052      	movs	r0, #82	; 0x52
 80022f8:	f7fe fddc 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022fc:	2000      	movs	r0, #0
 80022fe:	f7fe fdd9 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002302:	2064      	movs	r0, #100	; 0x64
 8002304:	f7fe fdd6 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002308:	2000      	movs	r0, #0
 800230a:	f7fe fdd3 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 800230e:	207a      	movs	r0, #122	; 0x7a
 8002310:	f7fe fdd0 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002314:	2000      	movs	r0, #0
 8002316:	f7fe fdcd 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 800231a:	208b      	movs	r0, #139	; 0x8b
 800231c:	f7fe fdca 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002320:	2000      	movs	r0, #0
 8002322:	f7fe fdc7 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002326:	2099      	movs	r0, #153	; 0x99
 8002328:	f7fe fdc4 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800232c:	2000      	movs	r0, #0
 800232e:	f7fe fdc1 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002332:	20a8      	movs	r0, #168	; 0xa8
 8002334:	f7fe fdbe 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002338:	2000      	movs	r0, #0
 800233a:	f7fe fdbb 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 800233e:	20b9      	movs	r0, #185	; 0xb9
 8002340:	f7fe fdb8 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002344:	2000      	movs	r0, #0
 8002346:	f7fe fdb5 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800234a:	20c4      	movs	r0, #196	; 0xc4
 800234c:	f7fe fdb2 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002350:	2000      	movs	r0, #0
 8002352:	f7fe fdaf 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8002356:	20ca      	movs	r0, #202	; 0xca
 8002358:	f7fe fdac 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800235c:	2000      	movs	r0, #0
 800235e:	f7fe fda9 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002362:	20d2      	movs	r0, #210	; 0xd2
 8002364:	f7fe fda6 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002368:	2000      	movs	r0, #0
 800236a:	f7fe fda3 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 800236e:	20d9      	movs	r0, #217	; 0xd9
 8002370:	f7fe fda0 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002374:	2000      	movs	r0, #0
 8002376:	f7fe fd9d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 800237a:	20e0      	movs	r0, #224	; 0xe0
 800237c:	f7fe fd9a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002380:	2000      	movs	r0, #0
 8002382:	f7fe fd97 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002386:	20f3      	movs	r0, #243	; 0xf3
 8002388:	f7fe fd94 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800238c:	2000      	movs	r0, #0
 800238e:	f7fe fd91 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 8002392:	20e1      	movs	r0, #225	; 0xe1
 8002394:	f7fe fd7a 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8002398:	2016      	movs	r0, #22
 800239a:	f7fe fd8b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800239e:	2000      	movs	r0, #0
 80023a0:	f7fe fd88 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80023a4:	201c      	movs	r0, #28
 80023a6:	f7fe fd85 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023aa:	2000      	movs	r0, #0
 80023ac:	f7fe fd82 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 80023b0:	2022      	movs	r0, #34	; 0x22
 80023b2:	f7fe fd7f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023b6:	2000      	movs	r0, #0
 80023b8:	f7fe fd7c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80023bc:	2036      	movs	r0, #54	; 0x36
 80023be:	f7fe fd79 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7fe fd76 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80023c8:	2045      	movs	r0, #69	; 0x45
 80023ca:	f7fe fd73 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023ce:	2000      	movs	r0, #0
 80023d0:	f7fe fd70 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80023d4:	2052      	movs	r0, #82	; 0x52
 80023d6:	f7fe fd6d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023da:	2000      	movs	r0, #0
 80023dc:	f7fe fd6a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 80023e0:	2064      	movs	r0, #100	; 0x64
 80023e2:	f7fe fd67 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023e6:	2000      	movs	r0, #0
 80023e8:	f7fe fd64 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 80023ec:	207a      	movs	r0, #122	; 0x7a
 80023ee:	f7fe fd61 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023f2:	2000      	movs	r0, #0
 80023f4:	f7fe fd5e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 80023f8:	208b      	movs	r0, #139	; 0x8b
 80023fa:	f7fe fd5b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023fe:	2000      	movs	r0, #0
 8002400:	f7fe fd58 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002404:	2099      	movs	r0, #153	; 0x99
 8002406:	f7fe fd55 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800240a:	2000      	movs	r0, #0
 800240c:	f7fe fd52 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002410:	20a8      	movs	r0, #168	; 0xa8
 8002412:	f7fe fd4f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002416:	2000      	movs	r0, #0
 8002418:	f7fe fd4c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 800241c:	20b9      	movs	r0, #185	; 0xb9
 800241e:	f7fe fd49 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002422:	2000      	movs	r0, #0
 8002424:	f7fe fd46 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002428:	20c4      	movs	r0, #196	; 0xc4
 800242a:	f7fe fd43 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800242e:	2000      	movs	r0, #0
 8002430:	f7fe fd40 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8002434:	20ca      	movs	r0, #202	; 0xca
 8002436:	f7fe fd3d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800243a:	2000      	movs	r0, #0
 800243c:	f7fe fd3a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002440:	20d2      	movs	r0, #210	; 0xd2
 8002442:	f7fe fd37 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002446:	2000      	movs	r0, #0
 8002448:	f7fe fd34 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 800244c:	20d8      	movs	r0, #216	; 0xd8
 800244e:	f7fe fd31 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002452:	2000      	movs	r0, #0
 8002454:	f7fe fd2e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8002458:	20e0      	movs	r0, #224	; 0xe0
 800245a:	f7fe fd2b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800245e:	2000      	movs	r0, #0
 8002460:	f7fe fd28 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002464:	20f3      	movs	r0, #243	; 0xf3
 8002466:	f7fe fd25 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800246a:	2000      	movs	r0, #0
 800246c:	f7fe fd22 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 8002470:	20e2      	movs	r0, #226	; 0xe2
 8002472:	f7fe fd0b 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8002476:	2005      	movs	r0, #5
 8002478:	f7fe fd1c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800247c:	2000      	movs	r0, #0
 800247e:	f7fe fd19 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 8002482:	200b      	movs	r0, #11
 8002484:	f7fe fd16 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002488:	2000      	movs	r0, #0
 800248a:	f7fe fd13 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 800248e:	201b      	movs	r0, #27
 8002490:	f7fe fd10 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002494:	2000      	movs	r0, #0
 8002496:	f7fe fd0d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 800249a:	2034      	movs	r0, #52	; 0x34
 800249c:	f7fe fd0a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7fe fd07 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80024a6:	2044      	movs	r0, #68	; 0x44
 80024a8:	f7fe fd04 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024ac:	2000      	movs	r0, #0
 80024ae:	f7fe fd01 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 80024b2:	204f      	movs	r0, #79	; 0x4f
 80024b4:	f7fe fcfe 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7fe fcfb 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 80024be:	2061      	movs	r0, #97	; 0x61
 80024c0:	f7fe fcf8 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7fe fcf5 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 80024ca:	2079      	movs	r0, #121	; 0x79
 80024cc:	f7fe fcf2 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7fe fcef 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80024d6:	2088      	movs	r0, #136	; 0x88
 80024d8:	f7fe fcec 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024dc:	2000      	movs	r0, #0
 80024de:	f7fe fce9 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 80024e2:	2097      	movs	r0, #151	; 0x97
 80024e4:	f7fe fce6 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024e8:	2000      	movs	r0, #0
 80024ea:	f7fe fce3 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 80024ee:	20a6      	movs	r0, #166	; 0xa6
 80024f0:	f7fe fce0 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024f4:	2000      	movs	r0, #0
 80024f6:	f7fe fcdd 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 80024fa:	20b7      	movs	r0, #183	; 0xb7
 80024fc:	f7fe fcda 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002500:	2000      	movs	r0, #0
 8002502:	f7fe fcd7 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8002506:	20c2      	movs	r0, #194	; 0xc2
 8002508:	f7fe fcd4 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800250c:	2000      	movs	r0, #0
 800250e:	f7fe fcd1 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8002512:	20c7      	movs	r0, #199	; 0xc7
 8002514:	f7fe fcce 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002518:	2000      	movs	r0, #0
 800251a:	f7fe fccb 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 800251e:	20d1      	movs	r0, #209	; 0xd1
 8002520:	f7fe fcc8 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002524:	2000      	movs	r0, #0
 8002526:	f7fe fcc5 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 800252a:	20d6      	movs	r0, #214	; 0xd6
 800252c:	f7fe fcc2 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002530:	2000      	movs	r0, #0
 8002532:	f7fe fcbf 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002536:	20dd      	movs	r0, #221	; 0xdd
 8002538:	f7fe fcbc 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800253c:	2000      	movs	r0, #0
 800253e:	f7fe fcb9 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002542:	20f3      	movs	r0, #243	; 0xf3
 8002544:	f7fe fcb6 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002548:	2000      	movs	r0, #0
 800254a:	f7fe fcb3 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 800254e:	20e3      	movs	r0, #227	; 0xe3
 8002550:	f7fe fc9c 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8002554:	2005      	movs	r0, #5
 8002556:	f7fe fcad 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800255a:	2000      	movs	r0, #0
 800255c:	f7fe fcaa 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 8002560:	200a      	movs	r0, #10
 8002562:	f7fe fca7 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002566:	2000      	movs	r0, #0
 8002568:	f7fe fca4 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 800256c:	201c      	movs	r0, #28
 800256e:	f7fe fca1 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002572:	2000      	movs	r0, #0
 8002574:	f7fe fc9e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002578:	2033      	movs	r0, #51	; 0x33
 800257a:	f7fe fc9b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800257e:	2000      	movs	r0, #0
 8002580:	f7fe fc98 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002584:	2044      	movs	r0, #68	; 0x44
 8002586:	f7fe fc95 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800258a:	2000      	movs	r0, #0
 800258c:	f7fe fc92 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002590:	2050      	movs	r0, #80	; 0x50
 8002592:	f7fe fc8f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002596:	2000      	movs	r0, #0
 8002598:	f7fe fc8c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 800259c:	2062      	movs	r0, #98	; 0x62
 800259e:	f7fe fc89 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025a2:	2000      	movs	r0, #0
 80025a4:	f7fe fc86 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 80025a8:	2078      	movs	r0, #120	; 0x78
 80025aa:	f7fe fc83 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025ae:	2000      	movs	r0, #0
 80025b0:	f7fe fc80 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80025b4:	2088      	movs	r0, #136	; 0x88
 80025b6:	f7fe fc7d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7fe fc7a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 80025c0:	2097      	movs	r0, #151	; 0x97
 80025c2:	f7fe fc77 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f7fe fc74 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 80025cc:	20a6      	movs	r0, #166	; 0xa6
 80025ce:	f7fe fc71 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025d2:	2000      	movs	r0, #0
 80025d4:	f7fe fc6e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 80025d8:	20b7      	movs	r0, #183	; 0xb7
 80025da:	f7fe fc6b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025de:	2000      	movs	r0, #0
 80025e0:	f7fe fc68 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 80025e4:	20c2      	movs	r0, #194	; 0xc2
 80025e6:	f7fe fc65 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025ea:	2000      	movs	r0, #0
 80025ec:	f7fe fc62 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 80025f0:	20c7      	movs	r0, #199	; 0xc7
 80025f2:	f7fe fc5f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025f6:	2000      	movs	r0, #0
 80025f8:	f7fe fc5c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 80025fc:	20d1      	movs	r0, #209	; 0xd1
 80025fe:	f7fe fc59 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002602:	2000      	movs	r0, #0
 8002604:	f7fe fc56 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 8002608:	20d5      	movs	r0, #213	; 0xd5
 800260a:	f7fe fc53 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800260e:	2000      	movs	r0, #0
 8002610:	f7fe fc50 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002614:	20dd      	movs	r0, #221	; 0xdd
 8002616:	f7fe fc4d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800261a:	2000      	movs	r0, #0
 800261c:	f7fe fc4a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002620:	20f3      	movs	r0, #243	; 0xf3
 8002622:	f7fe fc47 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002626:	2000      	movs	r0, #0
 8002628:	f7fe fc44 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 800262c:	20e4      	movs	r0, #228	; 0xe4
 800262e:	f7fe fc2d 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002632:	2001      	movs	r0, #1
 8002634:	f7fe fc3e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002638:	2000      	movs	r0, #0
 800263a:	f7fe fc3b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 800263e:	2001      	movs	r0, #1
 8002640:	f7fe fc38 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002644:	2000      	movs	r0, #0
 8002646:	f7fe fc35 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800264a:	2002      	movs	r0, #2
 800264c:	f7fe fc32 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002650:	2000      	movs	r0, #0
 8002652:	f7fe fc2f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8002656:	202a      	movs	r0, #42	; 0x2a
 8002658:	f7fe fc2c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800265c:	2000      	movs	r0, #0
 800265e:	f7fe fc29 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002662:	203c      	movs	r0, #60	; 0x3c
 8002664:	f7fe fc26 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002668:	2000      	movs	r0, #0
 800266a:	f7fe fc23 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 800266e:	204b      	movs	r0, #75	; 0x4b
 8002670:	f7fe fc20 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002674:	2000      	movs	r0, #0
 8002676:	f7fe fc1d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 800267a:	205d      	movs	r0, #93	; 0x5d
 800267c:	f7fe fc1a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002680:	2000      	movs	r0, #0
 8002682:	f7fe fc17 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8002686:	2074      	movs	r0, #116	; 0x74
 8002688:	f7fe fc14 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800268c:	2000      	movs	r0, #0
 800268e:	f7fe fc11 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002692:	2084      	movs	r0, #132	; 0x84
 8002694:	f7fe fc0e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002698:	2000      	movs	r0, #0
 800269a:	f7fe fc0b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 800269e:	2093      	movs	r0, #147	; 0x93
 80026a0:	f7fe fc08 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026a4:	2000      	movs	r0, #0
 80026a6:	f7fe fc05 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 80026aa:	20a2      	movs	r0, #162	; 0xa2
 80026ac:	f7fe fc02 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026b0:	2000      	movs	r0, #0
 80026b2:	f7fe fbff 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 80026b6:	20b3      	movs	r0, #179	; 0xb3
 80026b8:	f7fe fbfc 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026bc:	2000      	movs	r0, #0
 80026be:	f7fe fbf9 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 80026c2:	20be      	movs	r0, #190	; 0xbe
 80026c4:	f7fe fbf6 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7fe fbf3 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 80026ce:	20c4      	movs	r0, #196	; 0xc4
 80026d0:	f7fe fbf0 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026d4:	2000      	movs	r0, #0
 80026d6:	f7fe fbed 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 80026da:	20cd      	movs	r0, #205	; 0xcd
 80026dc:	f7fe fbea 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026e0:	2000      	movs	r0, #0
 80026e2:	f7fe fbe7 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 80026e6:	20d3      	movs	r0, #211	; 0xd3
 80026e8:	f7fe fbe4 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026ec:	2000      	movs	r0, #0
 80026ee:	f7fe fbe1 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 80026f2:	20dd      	movs	r0, #221	; 0xdd
 80026f4:	f7fe fbde 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7fe fbdb 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80026fe:	20f3      	movs	r0, #243	; 0xf3
 8002700:	f7fe fbd8 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002704:	2000      	movs	r0, #0
 8002706:	f7fe fbd5 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 800270a:	20e5      	movs	r0, #229	; 0xe5
 800270c:	f7fe fbbe 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002710:	2000      	movs	r0, #0
 8002712:	f7fe fbcf 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002716:	2000      	movs	r0, #0
 8002718:	f7fe fbcc 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800271c:	2000      	movs	r0, #0
 800271e:	f7fe fbc9 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002722:	2000      	movs	r0, #0
 8002724:	f7fe fbc6 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002728:	2002      	movs	r0, #2
 800272a:	f7fe fbc3 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800272e:	2000      	movs	r0, #0
 8002730:	f7fe fbc0 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002734:	2029      	movs	r0, #41	; 0x29
 8002736:	f7fe fbbd 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800273a:	2000      	movs	r0, #0
 800273c:	f7fe fbba 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002740:	203c      	movs	r0, #60	; 0x3c
 8002742:	f7fe fbb7 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002746:	2000      	movs	r0, #0
 8002748:	f7fe fbb4 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 800274c:	204b      	movs	r0, #75	; 0x4b
 800274e:	f7fe fbb1 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002752:	2000      	movs	r0, #0
 8002754:	f7fe fbae 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002758:	205d      	movs	r0, #93	; 0x5d
 800275a:	f7fe fbab 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800275e:	2000      	movs	r0, #0
 8002760:	f7fe fba8 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8002764:	2074      	movs	r0, #116	; 0x74
 8002766:	f7fe fba5 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800276a:	2000      	movs	r0, #0
 800276c:	f7fe fba2 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002770:	2084      	movs	r0, #132	; 0x84
 8002772:	f7fe fb9f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002776:	2000      	movs	r0, #0
 8002778:	f7fe fb9c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 800277c:	2093      	movs	r0, #147	; 0x93
 800277e:	f7fe fb99 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002782:	2000      	movs	r0, #0
 8002784:	f7fe fb96 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002788:	20a2      	movs	r0, #162	; 0xa2
 800278a:	f7fe fb93 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800278e:	2000      	movs	r0, #0
 8002790:	f7fe fb90 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8002794:	20b3      	movs	r0, #179	; 0xb3
 8002796:	f7fe fb8d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800279a:	2000      	movs	r0, #0
 800279c:	f7fe fb8a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 80027a0:	20be      	movs	r0, #190	; 0xbe
 80027a2:	f7fe fb87 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7fe fb84 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 80027ac:	20c4      	movs	r0, #196	; 0xc4
 80027ae:	f7fe fb81 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7fe fb7e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 80027b8:	20cd      	movs	r0, #205	; 0xcd
 80027ba:	f7fe fb7b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027be:	2000      	movs	r0, #0
 80027c0:	f7fe fb78 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 80027c4:	20d3      	movs	r0, #211	; 0xd3
 80027c6:	f7fe fb75 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7fe fb72 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 80027d0:	20dc      	movs	r0, #220	; 0xdc
 80027d2:	f7fe fb6f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f7fe fb6c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80027dc:	20f3      	movs	r0, #243	; 0xf3
 80027de:	f7fe fb69 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027e2:	2000      	movs	r0, #0
 80027e4:	f7fe fb66 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 80027e8:	20e6      	movs	r0, #230	; 0xe6
 80027ea:	f7fe fb4f 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 80027ee:	2011      	movs	r0, #17
 80027f0:	f7fe fb60 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7fe fb5d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 80027fa:	2034      	movs	r0, #52	; 0x34
 80027fc:	f7fe fb5a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe fb57 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002806:	2056      	movs	r0, #86	; 0x56
 8002808:	f7fe fb54 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800280c:	2000      	movs	r0, #0
 800280e:	f7fe fb51 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002812:	2076      	movs	r0, #118	; 0x76
 8002814:	f7fe fb4e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002818:	2000      	movs	r0, #0
 800281a:	f7fe fb4b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 800281e:	2077      	movs	r0, #119	; 0x77
 8002820:	f7fe fb48 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002824:	2000      	movs	r0, #0
 8002826:	f7fe fb45 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800282a:	2066      	movs	r0, #102	; 0x66
 800282c:	f7fe fb42 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002830:	2000      	movs	r0, #0
 8002832:	f7fe fb3f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002836:	2088      	movs	r0, #136	; 0x88
 8002838:	f7fe fb3c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800283c:	2000      	movs	r0, #0
 800283e:	f7fe fb39 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002842:	2099      	movs	r0, #153	; 0x99
 8002844:	f7fe fb36 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002848:	2000      	movs	r0, #0
 800284a:	f7fe fb33 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 800284e:	20bb      	movs	r0, #187	; 0xbb
 8002850:	f7fe fb30 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002854:	2000      	movs	r0, #0
 8002856:	f7fe fb2d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800285a:	2099      	movs	r0, #153	; 0x99
 800285c:	f7fe fb2a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002860:	2000      	movs	r0, #0
 8002862:	f7fe fb27 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002866:	2066      	movs	r0, #102	; 0x66
 8002868:	f7fe fb24 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800286c:	2000      	movs	r0, #0
 800286e:	f7fe fb21 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002872:	2055      	movs	r0, #85	; 0x55
 8002874:	f7fe fb1e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002878:	2000      	movs	r0, #0
 800287a:	f7fe fb1b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800287e:	2055      	movs	r0, #85	; 0x55
 8002880:	f7fe fb18 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002884:	2000      	movs	r0, #0
 8002886:	f7fe fb15 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 800288a:	2045      	movs	r0, #69	; 0x45
 800288c:	f7fe fb12 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002890:	2000      	movs	r0, #0
 8002892:	f7fe fb0f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8002896:	2043      	movs	r0, #67	; 0x43
 8002898:	f7fe fb0c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800289c:	2000      	movs	r0, #0
 800289e:	f7fe fb09 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80028a2:	2044      	movs	r0, #68	; 0x44
 80028a4:	f7fe fb06 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028a8:	2000      	movs	r0, #0
 80028aa:	f7fe fb03 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 80028ae:	20e7      	movs	r0, #231	; 0xe7
 80028b0:	f7fe faec 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 80028b4:	2032      	movs	r0, #50	; 0x32
 80028b6:	f7fe fafd 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7fe fafa 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80028c0:	2055      	movs	r0, #85	; 0x55
 80028c2:	f7fe faf7 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f7fe faf4 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80028cc:	2076      	movs	r0, #118	; 0x76
 80028ce:	f7fe faf1 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7fe faee 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80028d8:	2066      	movs	r0, #102	; 0x66
 80028da:	f7fe faeb 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028de:	2000      	movs	r0, #0
 80028e0:	f7fe fae8 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 80028e4:	2067      	movs	r0, #103	; 0x67
 80028e6:	f7fe fae5 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7fe fae2 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 80028f0:	2067      	movs	r0, #103	; 0x67
 80028f2:	f7fe fadf 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7fe fadc 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 80028fc:	2087      	movs	r0, #135	; 0x87
 80028fe:	f7fe fad9 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002902:	2000      	movs	r0, #0
 8002904:	f7fe fad6 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002908:	2099      	movs	r0, #153	; 0x99
 800290a:	f7fe fad3 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800290e:	2000      	movs	r0, #0
 8002910:	f7fe fad0 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002914:	20bb      	movs	r0, #187	; 0xbb
 8002916:	f7fe facd 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800291a:	2000      	movs	r0, #0
 800291c:	f7fe faca 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002920:	2099      	movs	r0, #153	; 0x99
 8002922:	f7fe fac7 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002926:	2000      	movs	r0, #0
 8002928:	f7fe fac4 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 800292c:	2077      	movs	r0, #119	; 0x77
 800292e:	f7fe fac1 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002932:	2000      	movs	r0, #0
 8002934:	f7fe fabe 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002938:	2044      	movs	r0, #68	; 0x44
 800293a:	f7fe fabb 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800293e:	2000      	movs	r0, #0
 8002940:	f7fe fab8 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002944:	2056      	movs	r0, #86	; 0x56
 8002946:	f7fe fab5 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800294a:	2000      	movs	r0, #0
 800294c:	f7fe fab2 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002950:	2023      	movs	r0, #35	; 0x23
 8002952:	f7fe faaf 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002956:	2000      	movs	r0, #0
 8002958:	f7fe faac 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 800295c:	2033      	movs	r0, #51	; 0x33
 800295e:	f7fe faa9 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002962:	2000      	movs	r0, #0
 8002964:	f7fe faa6 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8002968:	2045      	movs	r0, #69	; 0x45
 800296a:	f7fe faa3 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800296e:	2000      	movs	r0, #0
 8002970:	f7fe faa0 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 8002974:	20e8      	movs	r0, #232	; 0xe8
 8002976:	f7fe fa89 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800297a:	2000      	movs	r0, #0
 800297c:	f7fe fa9a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002980:	2000      	movs	r0, #0
 8002982:	f7fe fa97 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002986:	2099      	movs	r0, #153	; 0x99
 8002988:	f7fe fa94 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800298c:	2000      	movs	r0, #0
 800298e:	f7fe fa91 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8002992:	2087      	movs	r0, #135	; 0x87
 8002994:	f7fe fa8e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002998:	2000      	movs	r0, #0
 800299a:	f7fe fa8b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 800299e:	2088      	movs	r0, #136	; 0x88
 80029a0:	f7fe fa88 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029a4:	2000      	movs	r0, #0
 80029a6:	f7fe fa85 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 80029aa:	2077      	movs	r0, #119	; 0x77
 80029ac:	f7fe fa82 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7fe fa7f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80029b6:	2066      	movs	r0, #102	; 0x66
 80029b8:	f7fe fa7c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029bc:	2000      	movs	r0, #0
 80029be:	f7fe fa79 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80029c2:	2088      	movs	r0, #136	; 0x88
 80029c4:	f7fe fa76 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7fe fa73 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 80029ce:	20aa      	movs	r0, #170	; 0xaa
 80029d0:	f7fe fa70 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7fe fa6d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 80029da:	20bb      	movs	r0, #187	; 0xbb
 80029dc:	f7fe fa6a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7fe fa67 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80029e6:	2099      	movs	r0, #153	; 0x99
 80029e8:	f7fe fa64 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029ec:	2000      	movs	r0, #0
 80029ee:	f7fe fa61 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80029f2:	2066      	movs	r0, #102	; 0x66
 80029f4:	f7fe fa5e 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7fe fa5b 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80029fe:	2055      	movs	r0, #85	; 0x55
 8002a00:	f7fe fa58 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7fe fa55 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002a0a:	2055      	movs	r0, #85	; 0x55
 8002a0c:	f7fe fa52 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7fe fa4f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002a16:	2044      	movs	r0, #68	; 0x44
 8002a18:	f7fe fa4c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7fe fa49 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002a22:	2044      	movs	r0, #68	; 0x44
 8002a24:	f7fe fa46 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7fe fa43 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002a2e:	2055      	movs	r0, #85	; 0x55
 8002a30:	f7fe fa40 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f7fe fa3d 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 8002a3a:	20e9      	movs	r0, #233	; 0xe9
 8002a3c:	f7fe fa26 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002a40:	20aa      	movs	r0, #170	; 0xaa
 8002a42:	f7fe fa37 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a46:	2000      	movs	r0, #0
 8002a48:	f7fe fa34 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7fe fa31 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a52:	2000      	movs	r0, #0
 8002a54:	f7fe fa2e 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7fe fa17 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002a5e:	20aa      	movs	r0, #170	; 0xaa
 8002a60:	f7fe fa28 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 8002a64:	20cf      	movs	r0, #207	; 0xcf
 8002a66:	f7fe fa11 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f7fe fa22 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f7fe fa1f 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7fe fa1c 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f7fe fa19 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a82:	2000      	movs	r0, #0
 8002a84:	f7fe fa16 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f7fe fa13 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7fe fa10 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a94:	2000      	movs	r0, #0
 8002a96:	f7fe fa0d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7fe fa0a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f7fe fa07 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7fe fa04 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7fe fa01 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f7fe f9fe 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f7fe f9fb 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7fe f9f8 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f7fe f9f5 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7fe f9f2 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 8002ad0:	20f0      	movs	r0, #240	; 0xf0
 8002ad2:	f7fe f9db 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7fe f9ec 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002adc:	2050      	movs	r0, #80	; 0x50
 8002ade:	f7fe f9e9 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f7fe f9e6 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f7fe f9e3 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7fe f9e0 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 8002af4:	20f3      	movs	r0, #243	; 0xf3
 8002af6:	f7fe f9c9 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002afa:	2000      	movs	r0, #0
 8002afc:	f7fe f9da 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 8002b00:	20f9      	movs	r0, #249	; 0xf9
 8002b02:	f7fe f9c3 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 8002b06:	2006      	movs	r0, #6
 8002b08:	f7fe f9d4 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8002b0c:	2010      	movs	r0, #16
 8002b0e:	f7fe f9d1 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002b12:	2029      	movs	r0, #41	; 0x29
 8002b14:	f7fe f9ce 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7fe f9cb 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 8002b1e:	203a      	movs	r0, #58	; 0x3a
 8002b20:	f7fe f9b4 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8002b24:	2055      	movs	r0, #85	; 0x55
 8002b26:	f7fe f9c5 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 8002b2a:	2011      	movs	r0, #17
 8002b2c:	f7fe f9ae 	bl	8000e8c <LCD_WR_REG>
		HAL_Delay(100);
 8002b30:	2064      	movs	r0, #100	; 0x64
 8002b32:	f001 fceb 	bl	800450c <HAL_Delay>
		LCD_WR_REG(0x29);
 8002b36:	2029      	movs	r0, #41	; 0x29
 8002b38:	f7fe f9a8 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8002b3c:	2035      	movs	r0, #53	; 0x35
 8002b3e:	f7fe f9a5 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002b42:	2000      	movs	r0, #0
 8002b44:	f7fe f9b6 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 8002b48:	2051      	movs	r0, #81	; 0x51
 8002b4a:	f7fe f99f 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 8002b4e:	20ff      	movs	r0, #255	; 0xff
 8002b50:	f7fe f9b0 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 8002b54:	2053      	movs	r0, #83	; 0x53
 8002b56:	f7fe f999 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 8002b5a:	202c      	movs	r0, #44	; 0x2c
 8002b5c:	f7fe f9aa 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 8002b60:	2055      	movs	r0, #85	; 0x55
 8002b62:	f7fe f993 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 8002b66:	2082      	movs	r0, #130	; 0x82
 8002b68:	f7fe f9a4 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8002b6c:	202c      	movs	r0, #44	; 0x2c
 8002b6e:	f7fe f98d 	bl	8000e8c <LCD_WR_REG>
 8002b72:	f001 b847 	b.w	8003c04 <TFTLCD_Init+0x235c>
	}else if(lcddev.id==0x5510)
 8002b76:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <TFTLCD_Init+0x12e0>)
 8002b78:	889b      	ldrh	r3, [r3, #4]
 8002b7a:	f245 5210 	movw	r2, #21776	; 0x5510
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	f040 8781 	bne.w	8003a86 <TFTLCD_Init+0x21de>
 8002b84:	e002      	b.n	8002b8c <TFTLCD_Init+0x12e4>
 8002b86:	bf00      	nop
 8002b88:	20000144 	.word	0x20000144
	{
		LCD_WriteReg(0xF000,0x55);
 8002b8c:	2155      	movs	r1, #85	; 0x55
 8002b8e:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8002b92:	f7fe f9b5 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8002b96:	21aa      	movs	r1, #170	; 0xaa
 8002b98:	f24f 0001 	movw	r0, #61441	; 0xf001
 8002b9c:	f7fe f9b0 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8002ba0:	2152      	movs	r1, #82	; 0x52
 8002ba2:	f24f 0002 	movw	r0, #61442	; 0xf002
 8002ba6:	f7fe f9ab 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8002baa:	2108      	movs	r1, #8
 8002bac:	f24f 0003 	movw	r0, #61443	; 0xf003
 8002bb0:	f7fe f9a6 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	f24f 0004 	movw	r0, #61444	; 0xf004
 8002bba:	f7fe f9a1 	bl	8000f00 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 8002bbe:	210d      	movs	r1, #13
 8002bc0:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8002bc4:	f7fe f99c 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 8002bc8:	210d      	movs	r1, #13
 8002bca:	f24b 0001 	movw	r0, #45057	; 0xb001
 8002bce:	f7fe f997 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 8002bd2:	210d      	movs	r1, #13
 8002bd4:	f24b 0002 	movw	r0, #45058	; 0xb002
 8002bd8:	f7fe f992 	bl	8000f00 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 8002bdc:	2134      	movs	r1, #52	; 0x34
 8002bde:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8002be2:	f7fe f98d 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 8002be6:	2134      	movs	r1, #52	; 0x34
 8002be8:	f24b 6001 	movw	r0, #46593	; 0xb601
 8002bec:	f7fe f988 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 8002bf0:	2134      	movs	r1, #52	; 0x34
 8002bf2:	f24b 6002 	movw	r0, #46594	; 0xb602
 8002bf6:	f7fe f983 	bl	8000f00 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 8002bfa:	210d      	movs	r1, #13
 8002bfc:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8002c00:	f7fe f97e 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 8002c04:	210d      	movs	r1, #13
 8002c06:	f24b 1001 	movw	r0, #45313	; 0xb101
 8002c0a:	f7fe f979 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 8002c0e:	210d      	movs	r1, #13
 8002c10:	f24b 1002 	movw	r0, #45314	; 0xb102
 8002c14:	f7fe f974 	bl	8000f00 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 8002c18:	2134      	movs	r1, #52	; 0x34
 8002c1a:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8002c1e:	f7fe f96f 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 8002c22:	2134      	movs	r1, #52	; 0x34
 8002c24:	f24b 7001 	movw	r0, #46849	; 0xb701
 8002c28:	f7fe f96a 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 8002c2c:	2134      	movs	r1, #52	; 0x34
 8002c2e:	f24b 7002 	movw	r0, #46850	; 0xb702
 8002c32:	f7fe f965 	bl	8000f00 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 8002c36:	2100      	movs	r1, #0
 8002c38:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8002c3c:	f7fe f960 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 8002c40:	2100      	movs	r1, #0
 8002c42:	f24b 2001 	movw	r0, #45569	; 0xb201
 8002c46:	f7fe f95b 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	f24b 2002 	movw	r0, #45570	; 0xb202
 8002c50:	f7fe f956 	bl	8000f00 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 8002c54:	2124      	movs	r1, #36	; 0x24
 8002c56:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8002c5a:	f7fe f951 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 8002c5e:	2124      	movs	r1, #36	; 0x24
 8002c60:	f64b 0001 	movw	r0, #47105	; 0xb801
 8002c64:	f7fe f94c 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 8002c68:	2124      	movs	r1, #36	; 0x24
 8002c6a:	f64b 0002 	movw	r0, #47106	; 0xb802
 8002c6e:	f7fe f947 	bl	8000f00 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 8002c72:	2101      	movs	r1, #1
 8002c74:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8002c78:	f7fe f942 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 8002c7c:	210f      	movs	r1, #15
 8002c7e:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8002c82:	f7fe f93d 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 8002c86:	210f      	movs	r1, #15
 8002c88:	f24b 3001 	movw	r0, #45825	; 0xb301
 8002c8c:	f7fe f938 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 8002c90:	210f      	movs	r1, #15
 8002c92:	f24b 3002 	movw	r0, #45826	; 0xb302
 8002c96:	f7fe f933 	bl	8000f00 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 8002c9a:	2134      	movs	r1, #52	; 0x34
 8002c9c:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8002ca0:	f7fe f92e 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 8002ca4:	2134      	movs	r1, #52	; 0x34
 8002ca6:	f64b 1001 	movw	r0, #47361	; 0xb901
 8002caa:	f7fe f929 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 8002cae:	2134      	movs	r1, #52	; 0x34
 8002cb0:	f64b 1002 	movw	r0, #47362	; 0xb902
 8002cb4:	f7fe f924 	bl	8000f00 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 8002cb8:	2108      	movs	r1, #8
 8002cba:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8002cbe:	f7fe f91f 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 8002cc2:	2108      	movs	r1, #8
 8002cc4:	f24b 5001 	movw	r0, #46337	; 0xb501
 8002cc8:	f7fe f91a 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 8002ccc:	2108      	movs	r1, #8
 8002cce:	f24b 5002 	movw	r0, #46338	; 0xb502
 8002cd2:	f7fe f915 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 8002cd6:	2103      	movs	r1, #3
 8002cd8:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8002cdc:	f7fe f910 	bl	8000f00 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 8002ce0:	2124      	movs	r1, #36	; 0x24
 8002ce2:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8002ce6:	f7fe f90b 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 8002cea:	2124      	movs	r1, #36	; 0x24
 8002cec:	f64b 2001 	movw	r0, #47617	; 0xba01
 8002cf0:	f7fe f906 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 8002cf4:	2124      	movs	r1, #36	; 0x24
 8002cf6:	f64b 2002 	movw	r0, #47618	; 0xba02
 8002cfa:	f7fe f901 	bl	8000f00 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 8002cfe:	2100      	movs	r1, #0
 8002d00:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8002d04:	f7fe f8fc 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 8002d08:	2178      	movs	r1, #120	; 0x78
 8002d0a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8002d0e:	f7fe f8f7 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8002d12:	2100      	movs	r1, #0
 8002d14:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8002d18:	f7fe f8f2 	bl	8000f00 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8002d22:	f7fe f8ed 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 8002d26:	2178      	movs	r1, #120	; 0x78
 8002d28:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8002d2c:	f7fe f8e8 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8002d30:	2100      	movs	r1, #0
 8002d32:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8002d36:	f7fe f8e3 	bl	8000f00 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8002d40:	f7fe f8de 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 8002d44:	2164      	movs	r1, #100	; 0x64
 8002d46:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8002d4a:	f7fe f8d9 	bl	8000f00 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 8002d4e:	2100      	movs	r1, #0
 8002d50:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8002d54:	f7fe f8d4 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 8002d58:	2133      	movs	r1, #51	; 0x33
 8002d5a:	f24d 1001 	movw	r0, #53505	; 0xd101
 8002d5e:	f7fe f8cf 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 8002d62:	2100      	movs	r1, #0
 8002d64:	f24d 1002 	movw	r0, #53506	; 0xd102
 8002d68:	f7fe f8ca 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 8002d6c:	2134      	movs	r1, #52	; 0x34
 8002d6e:	f24d 1003 	movw	r0, #53507	; 0xd103
 8002d72:	f7fe f8c5 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 8002d76:	2100      	movs	r1, #0
 8002d78:	f24d 1004 	movw	r0, #53508	; 0xd104
 8002d7c:	f7fe f8c0 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 8002d80:	213a      	movs	r1, #58	; 0x3a
 8002d82:	f24d 1005 	movw	r0, #53509	; 0xd105
 8002d86:	f7fe f8bb 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	f24d 1006 	movw	r0, #53510	; 0xd106
 8002d90:	f7fe f8b6 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 8002d94:	214a      	movs	r1, #74	; 0x4a
 8002d96:	f24d 1007 	movw	r0, #53511	; 0xd107
 8002d9a:	f7fe f8b1 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 8002d9e:	2100      	movs	r1, #0
 8002da0:	f24d 1008 	movw	r0, #53512	; 0xd108
 8002da4:	f7fe f8ac 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 8002da8:	215c      	movs	r1, #92	; 0x5c
 8002daa:	f24d 1009 	movw	r0, #53513	; 0xd109
 8002dae:	f7fe f8a7 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 8002db2:	2100      	movs	r1, #0
 8002db4:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8002db8:	f7fe f8a2 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 8002dbc:	2181      	movs	r1, #129	; 0x81
 8002dbe:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8002dc2:	f7fe f89d 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8002dcc:	f7fe f898 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 8002dd0:	21a6      	movs	r1, #166	; 0xa6
 8002dd2:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8002dd6:	f7fe f893 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 8002dda:	2100      	movs	r1, #0
 8002ddc:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8002de0:	f7fe f88e 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 8002de4:	21e5      	movs	r1, #229	; 0xe5
 8002de6:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8002dea:	f7fe f889 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 8002dee:	2101      	movs	r1, #1
 8002df0:	f24d 1010 	movw	r0, #53520	; 0xd110
 8002df4:	f7fe f884 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 8002df8:	2113      	movs	r1, #19
 8002dfa:	f24d 1011 	movw	r0, #53521	; 0xd111
 8002dfe:	f7fe f87f 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 8002e02:	2101      	movs	r1, #1
 8002e04:	f24d 1012 	movw	r0, #53522	; 0xd112
 8002e08:	f7fe f87a 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 8002e0c:	2154      	movs	r1, #84	; 0x54
 8002e0e:	f24d 1013 	movw	r0, #53523	; 0xd113
 8002e12:	f7fe f875 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 8002e16:	2101      	movs	r1, #1
 8002e18:	f24d 1014 	movw	r0, #53524	; 0xd114
 8002e1c:	f7fe f870 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8002e20:	2182      	movs	r1, #130	; 0x82
 8002e22:	f24d 1015 	movw	r0, #53525	; 0xd115
 8002e26:	f7fe f86b 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	f24d 1016 	movw	r0, #53526	; 0xd116
 8002e30:	f7fe f866 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 8002e34:	21ca      	movs	r1, #202	; 0xca
 8002e36:	f24d 1017 	movw	r0, #53527	; 0xd117
 8002e3a:	f7fe f861 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 8002e3e:	2102      	movs	r1, #2
 8002e40:	f24d 1018 	movw	r0, #53528	; 0xd118
 8002e44:	f7fe f85c 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 8002e48:	2100      	movs	r1, #0
 8002e4a:	f24d 1019 	movw	r0, #53529	; 0xd119
 8002e4e:	f7fe f857 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 8002e52:	2102      	movs	r1, #2
 8002e54:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8002e58:	f7fe f852 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8002e62:	f7fe f84d 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 8002e66:	2102      	movs	r1, #2
 8002e68:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8002e6c:	f7fe f848 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 8002e70:	2134      	movs	r1, #52	; 0x34
 8002e72:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8002e76:	f7fe f843 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 8002e7a:	2102      	movs	r1, #2
 8002e7c:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8002e80:	f7fe f83e 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 8002e84:	2167      	movs	r1, #103	; 0x67
 8002e86:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8002e8a:	f7fe f839 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 8002e8e:	2102      	movs	r1, #2
 8002e90:	f24d 1020 	movw	r0, #53536	; 0xd120
 8002e94:	f7fe f834 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 8002e98:	2184      	movs	r1, #132	; 0x84
 8002e9a:	f24d 1021 	movw	r0, #53537	; 0xd121
 8002e9e:	f7fe f82f 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 8002ea2:	2102      	movs	r1, #2
 8002ea4:	f24d 1022 	movw	r0, #53538	; 0xd122
 8002ea8:	f7fe f82a 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 8002eac:	21a4      	movs	r1, #164	; 0xa4
 8002eae:	f24d 1023 	movw	r0, #53539	; 0xd123
 8002eb2:	f7fe f825 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	f24d 1024 	movw	r0, #53540	; 0xd124
 8002ebc:	f7fe f820 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 8002ec0:	21b7      	movs	r1, #183	; 0xb7
 8002ec2:	f24d 1025 	movw	r0, #53541	; 0xd125
 8002ec6:	f7fe f81b 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 8002eca:	2102      	movs	r1, #2
 8002ecc:	f24d 1026 	movw	r0, #53542	; 0xd126
 8002ed0:	f7fe f816 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 8002ed4:	21cf      	movs	r1, #207	; 0xcf
 8002ed6:	f24d 1027 	movw	r0, #53543	; 0xd127
 8002eda:	f7fe f811 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 8002ede:	2102      	movs	r1, #2
 8002ee0:	f24d 1028 	movw	r0, #53544	; 0xd128
 8002ee4:	f7fe f80c 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 8002ee8:	21de      	movs	r1, #222	; 0xde
 8002eea:	f24d 1029 	movw	r0, #53545	; 0xd129
 8002eee:	f7fe f807 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 8002ef2:	2102      	movs	r1, #2
 8002ef4:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8002ef8:	f7fe f802 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 8002efc:	21f2      	movs	r1, #242	; 0xf2
 8002efe:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8002f02:	f7fd fffd 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 8002f06:	2102      	movs	r1, #2
 8002f08:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8002f0c:	f7fd fff8 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8002f10:	21fe      	movs	r1, #254	; 0xfe
 8002f12:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8002f16:	f7fd fff3 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 8002f1a:	2103      	movs	r1, #3
 8002f1c:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8002f20:	f7fd ffee 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 8002f24:	2110      	movs	r1, #16
 8002f26:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8002f2a:	f7fd ffe9 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 8002f2e:	2103      	movs	r1, #3
 8002f30:	f24d 1030 	movw	r0, #53552	; 0xd130
 8002f34:	f7fd ffe4 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 8002f38:	2133      	movs	r1, #51	; 0x33
 8002f3a:	f24d 1031 	movw	r0, #53553	; 0xd131
 8002f3e:	f7fd ffdf 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 8002f42:	2103      	movs	r1, #3
 8002f44:	f24d 1032 	movw	r0, #53554	; 0xd132
 8002f48:	f7fd ffda 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 8002f4c:	216d      	movs	r1, #109	; 0x6d
 8002f4e:	f24d 1033 	movw	r0, #53555	; 0xd133
 8002f52:	f7fd ffd5 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 8002f56:	2100      	movs	r1, #0
 8002f58:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8002f5c:	f7fd ffd0 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 8002f60:	2133      	movs	r1, #51	; 0x33
 8002f62:	f24d 2001 	movw	r0, #53761	; 0xd201
 8002f66:	f7fd ffcb 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	f24d 2002 	movw	r0, #53762	; 0xd202
 8002f70:	f7fd ffc6 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 8002f74:	2134      	movs	r1, #52	; 0x34
 8002f76:	f24d 2003 	movw	r0, #53763	; 0xd203
 8002f7a:	f7fd ffc1 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 8002f7e:	2100      	movs	r1, #0
 8002f80:	f24d 2004 	movw	r0, #53764	; 0xd204
 8002f84:	f7fd ffbc 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 8002f88:	213a      	movs	r1, #58	; 0x3a
 8002f8a:	f24d 2005 	movw	r0, #53765	; 0xd205
 8002f8e:	f7fd ffb7 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 8002f92:	2100      	movs	r1, #0
 8002f94:	f24d 2006 	movw	r0, #53766	; 0xd206
 8002f98:	f7fd ffb2 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 8002f9c:	214a      	movs	r1, #74	; 0x4a
 8002f9e:	f24d 2007 	movw	r0, #53767	; 0xd207
 8002fa2:	f7fd ffad 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	f24d 2008 	movw	r0, #53768	; 0xd208
 8002fac:	f7fd ffa8 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 8002fb0:	215c      	movs	r1, #92	; 0x5c
 8002fb2:	f24d 2009 	movw	r0, #53769	; 0xd209
 8002fb6:	f7fd ffa3 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 8002fba:	2100      	movs	r1, #0
 8002fbc:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8002fc0:	f7fd ff9e 	bl	8000f00 <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 8002fc4:	2181      	movs	r1, #129	; 0x81
 8002fc6:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8002fca:	f7fd ff99 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 8002fce:	2100      	movs	r1, #0
 8002fd0:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8002fd4:	f7fd ff94 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 8002fd8:	21a6      	movs	r1, #166	; 0xa6
 8002fda:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8002fde:	f7fd ff8f 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8002fe8:	f7fd ff8a 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 8002fec:	21e5      	movs	r1, #229	; 0xe5
 8002fee:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8002ff2:	f7fd ff85 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	f24d 2010 	movw	r0, #53776	; 0xd210
 8002ffc:	f7fd ff80 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 8003000:	2113      	movs	r1, #19
 8003002:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003006:	f7fd ff7b 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 800300a:	2101      	movs	r1, #1
 800300c:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003010:	f7fd ff76 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 8003014:	2154      	movs	r1, #84	; 0x54
 8003016:	f24d 2013 	movw	r0, #53779	; 0xd213
 800301a:	f7fd ff71 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 800301e:	2101      	movs	r1, #1
 8003020:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003024:	f7fd ff6c 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 8003028:	2182      	movs	r1, #130	; 0x82
 800302a:	f24d 2015 	movw	r0, #53781	; 0xd215
 800302e:	f7fd ff67 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 8003032:	2101      	movs	r1, #1
 8003034:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003038:	f7fd ff62 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 800303c:	21ca      	movs	r1, #202	; 0xca
 800303e:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003042:	f7fd ff5d 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 8003046:	2102      	movs	r1, #2
 8003048:	f24d 2018 	movw	r0, #53784	; 0xd218
 800304c:	f7fd ff58 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 8003050:	2100      	movs	r1, #0
 8003052:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003056:	f7fd ff53 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 800305a:	2102      	movs	r1, #2
 800305c:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003060:	f7fd ff4e 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 8003064:	2101      	movs	r1, #1
 8003066:	f24d 201b 	movw	r0, #53787	; 0xd21b
 800306a:	f7fd ff49 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 800306e:	2102      	movs	r1, #2
 8003070:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003074:	f7fd ff44 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 8003078:	2134      	movs	r1, #52	; 0x34
 800307a:	f24d 201d 	movw	r0, #53789	; 0xd21d
 800307e:	f7fd ff3f 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 8003082:	2102      	movs	r1, #2
 8003084:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003088:	f7fd ff3a 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 800308c:	2167      	movs	r1, #103	; 0x67
 800308e:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003092:	f7fd ff35 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 8003096:	2102      	movs	r1, #2
 8003098:	f24d 2020 	movw	r0, #53792	; 0xd220
 800309c:	f7fd ff30 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 80030a0:	2184      	movs	r1, #132	; 0x84
 80030a2:	f24d 2021 	movw	r0, #53793	; 0xd221
 80030a6:	f7fd ff2b 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 80030aa:	2102      	movs	r1, #2
 80030ac:	f24d 2022 	movw	r0, #53794	; 0xd222
 80030b0:	f7fd ff26 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 80030b4:	21a4      	movs	r1, #164	; 0xa4
 80030b6:	f24d 2023 	movw	r0, #53795	; 0xd223
 80030ba:	f7fd ff21 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 80030be:	2102      	movs	r1, #2
 80030c0:	f24d 2024 	movw	r0, #53796	; 0xd224
 80030c4:	f7fd ff1c 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 80030c8:	21b7      	movs	r1, #183	; 0xb7
 80030ca:	f24d 2025 	movw	r0, #53797	; 0xd225
 80030ce:	f7fd ff17 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 80030d2:	2102      	movs	r1, #2
 80030d4:	f24d 2026 	movw	r0, #53798	; 0xd226
 80030d8:	f7fd ff12 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 80030dc:	21cf      	movs	r1, #207	; 0xcf
 80030de:	f24d 2027 	movw	r0, #53799	; 0xd227
 80030e2:	f7fd ff0d 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 80030e6:	2102      	movs	r1, #2
 80030e8:	f24d 2028 	movw	r0, #53800	; 0xd228
 80030ec:	f7fd ff08 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 80030f0:	21de      	movs	r1, #222	; 0xde
 80030f2:	f24d 2029 	movw	r0, #53801	; 0xd229
 80030f6:	f7fd ff03 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 80030fa:	2102      	movs	r1, #2
 80030fc:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003100:	f7fd fefe 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 8003104:	21f2      	movs	r1, #242	; 0xf2
 8003106:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800310a:	f7fd fef9 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 800310e:	2102      	movs	r1, #2
 8003110:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003114:	f7fd fef4 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 8003118:	21fe      	movs	r1, #254	; 0xfe
 800311a:	f24d 202d 	movw	r0, #53805	; 0xd22d
 800311e:	f7fd feef 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 8003122:	2103      	movs	r1, #3
 8003124:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003128:	f7fd feea 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 800312c:	2110      	movs	r1, #16
 800312e:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003132:	f7fd fee5 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 8003136:	2103      	movs	r1, #3
 8003138:	f24d 2030 	movw	r0, #53808	; 0xd230
 800313c:	f7fd fee0 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8003140:	2133      	movs	r1, #51	; 0x33
 8003142:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003146:	f7fd fedb 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 800314a:	2103      	movs	r1, #3
 800314c:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003150:	f7fd fed6 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 8003154:	216d      	movs	r1, #109	; 0x6d
 8003156:	f24d 2033 	movw	r0, #53811	; 0xd233
 800315a:	f7fd fed1 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 800315e:	2100      	movs	r1, #0
 8003160:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003164:	f7fd fecc 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 8003168:	2133      	movs	r1, #51	; 0x33
 800316a:	f24d 3001 	movw	r0, #54017	; 0xd301
 800316e:	f7fd fec7 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 8003172:	2100      	movs	r1, #0
 8003174:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003178:	f7fd fec2 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 800317c:	2134      	movs	r1, #52	; 0x34
 800317e:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003182:	f7fd febd 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 8003186:	2100      	movs	r1, #0
 8003188:	f24d 3004 	movw	r0, #54020	; 0xd304
 800318c:	f7fd feb8 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 8003190:	213a      	movs	r1, #58	; 0x3a
 8003192:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003196:	f7fd feb3 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 800319a:	2100      	movs	r1, #0
 800319c:	f24d 3006 	movw	r0, #54022	; 0xd306
 80031a0:	f7fd feae 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 80031a4:	214a      	movs	r1, #74	; 0x4a
 80031a6:	f24d 3007 	movw	r0, #54023	; 0xd307
 80031aa:	f7fd fea9 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 80031ae:	2100      	movs	r1, #0
 80031b0:	f24d 3008 	movw	r0, #54024	; 0xd308
 80031b4:	f7fd fea4 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 80031b8:	215c      	movs	r1, #92	; 0x5c
 80031ba:	f24d 3009 	movw	r0, #54025	; 0xd309
 80031be:	f7fd fe9f 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 80031c2:	2100      	movs	r1, #0
 80031c4:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80031c8:	f7fd fe9a 	bl	8000f00 <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 80031cc:	2181      	movs	r1, #129	; 0x81
 80031ce:	f24d 300b 	movw	r0, #54027	; 0xd30b
 80031d2:	f7fd fe95 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 80031d6:	2100      	movs	r1, #0
 80031d8:	f24d 300c 	movw	r0, #54028	; 0xd30c
 80031dc:	f7fd fe90 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 80031e0:	21a6      	movs	r1, #166	; 0xa6
 80031e2:	f24d 300d 	movw	r0, #54029	; 0xd30d
 80031e6:	f7fd fe8b 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 80031ea:	2100      	movs	r1, #0
 80031ec:	f24d 300e 	movw	r0, #54030	; 0xd30e
 80031f0:	f7fd fe86 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 80031f4:	21e5      	movs	r1, #229	; 0xe5
 80031f6:	f24d 300f 	movw	r0, #54031	; 0xd30f
 80031fa:	f7fd fe81 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 80031fe:	2101      	movs	r1, #1
 8003200:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003204:	f7fd fe7c 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 8003208:	2113      	movs	r1, #19
 800320a:	f24d 3011 	movw	r0, #54033	; 0xd311
 800320e:	f7fd fe77 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 8003212:	2101      	movs	r1, #1
 8003214:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003218:	f7fd fe72 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 800321c:	2154      	movs	r1, #84	; 0x54
 800321e:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003222:	f7fd fe6d 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 8003226:	2101      	movs	r1, #1
 8003228:	f24d 3014 	movw	r0, #54036	; 0xd314
 800322c:	f7fd fe68 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8003230:	2182      	movs	r1, #130	; 0x82
 8003232:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003236:	f7fd fe63 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 800323a:	2101      	movs	r1, #1
 800323c:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003240:	f7fd fe5e 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 8003244:	21ca      	movs	r1, #202	; 0xca
 8003246:	f24d 3017 	movw	r0, #54039	; 0xd317
 800324a:	f7fd fe59 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 800324e:	2102      	movs	r1, #2
 8003250:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003254:	f7fd fe54 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 8003258:	2100      	movs	r1, #0
 800325a:	f24d 3019 	movw	r0, #54041	; 0xd319
 800325e:	f7fd fe4f 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 8003262:	2102      	movs	r1, #2
 8003264:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003268:	f7fd fe4a 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 800326c:	2101      	movs	r1, #1
 800326e:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003272:	f7fd fe45 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 8003276:	2102      	movs	r1, #2
 8003278:	f24d 301c 	movw	r0, #54044	; 0xd31c
 800327c:	f7fd fe40 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 8003280:	2134      	movs	r1, #52	; 0x34
 8003282:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003286:	f7fd fe3b 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 800328a:	2102      	movs	r1, #2
 800328c:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003290:	f7fd fe36 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 8003294:	2167      	movs	r1, #103	; 0x67
 8003296:	f24d 301f 	movw	r0, #54047	; 0xd31f
 800329a:	f7fd fe31 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 800329e:	2102      	movs	r1, #2
 80032a0:	f24d 3020 	movw	r0, #54048	; 0xd320
 80032a4:	f7fd fe2c 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 80032a8:	2184      	movs	r1, #132	; 0x84
 80032aa:	f24d 3021 	movw	r0, #54049	; 0xd321
 80032ae:	f7fd fe27 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 80032b2:	2102      	movs	r1, #2
 80032b4:	f24d 3022 	movw	r0, #54050	; 0xd322
 80032b8:	f7fd fe22 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 80032bc:	21a4      	movs	r1, #164	; 0xa4
 80032be:	f24d 3023 	movw	r0, #54051	; 0xd323
 80032c2:	f7fd fe1d 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 80032c6:	2102      	movs	r1, #2
 80032c8:	f24d 3024 	movw	r0, #54052	; 0xd324
 80032cc:	f7fd fe18 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 80032d0:	21b7      	movs	r1, #183	; 0xb7
 80032d2:	f24d 3025 	movw	r0, #54053	; 0xd325
 80032d6:	f7fd fe13 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 80032da:	2102      	movs	r1, #2
 80032dc:	f24d 3026 	movw	r0, #54054	; 0xd326
 80032e0:	f7fd fe0e 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 80032e4:	21cf      	movs	r1, #207	; 0xcf
 80032e6:	f24d 3027 	movw	r0, #54055	; 0xd327
 80032ea:	f7fd fe09 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 80032ee:	2102      	movs	r1, #2
 80032f0:	f24d 3028 	movw	r0, #54056	; 0xd328
 80032f4:	f7fd fe04 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 80032f8:	21de      	movs	r1, #222	; 0xde
 80032fa:	f24d 3029 	movw	r0, #54057	; 0xd329
 80032fe:	f7fd fdff 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 8003302:	2102      	movs	r1, #2
 8003304:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003308:	f7fd fdfa 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 800330c:	21f2      	movs	r1, #242	; 0xf2
 800330e:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003312:	f7fd fdf5 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 8003316:	2102      	movs	r1, #2
 8003318:	f24d 302c 	movw	r0, #54060	; 0xd32c
 800331c:	f7fd fdf0 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8003320:	21fe      	movs	r1, #254	; 0xfe
 8003322:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003326:	f7fd fdeb 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 800332a:	2103      	movs	r1, #3
 800332c:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003330:	f7fd fde6 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 8003334:	2110      	movs	r1, #16
 8003336:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800333a:	f7fd fde1 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 800333e:	2103      	movs	r1, #3
 8003340:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003344:	f7fd fddc 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 8003348:	2133      	movs	r1, #51	; 0x33
 800334a:	f24d 3031 	movw	r0, #54065	; 0xd331
 800334e:	f7fd fdd7 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 8003352:	2103      	movs	r1, #3
 8003354:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003358:	f7fd fdd2 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 800335c:	216d      	movs	r1, #109	; 0x6d
 800335e:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003362:	f7fd fdcd 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 8003366:	2100      	movs	r1, #0
 8003368:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 800336c:	f7fd fdc8 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 8003370:	2133      	movs	r1, #51	; 0x33
 8003372:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003376:	f7fd fdc3 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 800337a:	2100      	movs	r1, #0
 800337c:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003380:	f7fd fdbe 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 8003384:	2134      	movs	r1, #52	; 0x34
 8003386:	f24d 4003 	movw	r0, #54275	; 0xd403
 800338a:	f7fd fdb9 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 800338e:	2100      	movs	r1, #0
 8003390:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003394:	f7fd fdb4 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 8003398:	213a      	movs	r1, #58	; 0x3a
 800339a:	f24d 4005 	movw	r0, #54277	; 0xd405
 800339e:	f7fd fdaf 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 80033a2:	2100      	movs	r1, #0
 80033a4:	f24d 4006 	movw	r0, #54278	; 0xd406
 80033a8:	f7fd fdaa 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 80033ac:	214a      	movs	r1, #74	; 0x4a
 80033ae:	f24d 4007 	movw	r0, #54279	; 0xd407
 80033b2:	f7fd fda5 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 80033b6:	2100      	movs	r1, #0
 80033b8:	f24d 4008 	movw	r0, #54280	; 0xd408
 80033bc:	f7fd fda0 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 80033c0:	215c      	movs	r1, #92	; 0x5c
 80033c2:	f24d 4009 	movw	r0, #54281	; 0xd409
 80033c6:	f7fd fd9b 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 80033ca:	2100      	movs	r1, #0
 80033cc:	f24d 400a 	movw	r0, #54282	; 0xd40a
 80033d0:	f7fd fd96 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 80033d4:	2181      	movs	r1, #129	; 0x81
 80033d6:	f24d 400b 	movw	r0, #54283	; 0xd40b
 80033da:	f7fd fd91 	bl	8000f00 <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 80033de:	2100      	movs	r1, #0
 80033e0:	f24d 400c 	movw	r0, #54284	; 0xd40c
 80033e4:	f7fd fd8c 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 80033e8:	21a6      	movs	r1, #166	; 0xa6
 80033ea:	f24d 400d 	movw	r0, #54285	; 0xd40d
 80033ee:	f7fd fd87 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 80033f2:	2100      	movs	r1, #0
 80033f4:	f24d 400e 	movw	r0, #54286	; 0xd40e
 80033f8:	f7fd fd82 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 80033fc:	21e5      	movs	r1, #229	; 0xe5
 80033fe:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003402:	f7fd fd7d 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 8003406:	2101      	movs	r1, #1
 8003408:	f24d 4010 	movw	r0, #54288	; 0xd410
 800340c:	f7fd fd78 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 8003410:	2113      	movs	r1, #19
 8003412:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003416:	f7fd fd73 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 800341a:	2101      	movs	r1, #1
 800341c:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003420:	f7fd fd6e 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 8003424:	2154      	movs	r1, #84	; 0x54
 8003426:	f24d 4013 	movw	r0, #54291	; 0xd413
 800342a:	f7fd fd69 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 800342e:	2101      	movs	r1, #1
 8003430:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003434:	f7fd fd64 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 8003438:	2182      	movs	r1, #130	; 0x82
 800343a:	f24d 4015 	movw	r0, #54293	; 0xd415
 800343e:	f7fd fd5f 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 8003442:	2101      	movs	r1, #1
 8003444:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003448:	f7fd fd5a 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 800344c:	21ca      	movs	r1, #202	; 0xca
 800344e:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003452:	f7fd fd55 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 8003456:	2102      	movs	r1, #2
 8003458:	f24d 4018 	movw	r0, #54296	; 0xd418
 800345c:	f7fd fd50 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 8003460:	2100      	movs	r1, #0
 8003462:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003466:	f7fd fd4b 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 800346a:	2102      	movs	r1, #2
 800346c:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003470:	f7fd fd46 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 8003474:	2101      	movs	r1, #1
 8003476:	f24d 401b 	movw	r0, #54299	; 0xd41b
 800347a:	f7fd fd41 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 800347e:	2102      	movs	r1, #2
 8003480:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003484:	f7fd fd3c 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 8003488:	2134      	movs	r1, #52	; 0x34
 800348a:	f24d 401d 	movw	r0, #54301	; 0xd41d
 800348e:	f7fd fd37 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 8003492:	2102      	movs	r1, #2
 8003494:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003498:	f7fd fd32 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 800349c:	2167      	movs	r1, #103	; 0x67
 800349e:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80034a2:	f7fd fd2d 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 80034a6:	2102      	movs	r1, #2
 80034a8:	f24d 4020 	movw	r0, #54304	; 0xd420
 80034ac:	f7fd fd28 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 80034b0:	2184      	movs	r1, #132	; 0x84
 80034b2:	f24d 4021 	movw	r0, #54305	; 0xd421
 80034b6:	f7fd fd23 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 80034ba:	2102      	movs	r1, #2
 80034bc:	f24d 4022 	movw	r0, #54306	; 0xd422
 80034c0:	f7fd fd1e 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 80034c4:	21a4      	movs	r1, #164	; 0xa4
 80034c6:	f24d 4023 	movw	r0, #54307	; 0xd423
 80034ca:	f7fd fd19 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 80034ce:	2102      	movs	r1, #2
 80034d0:	f24d 4024 	movw	r0, #54308	; 0xd424
 80034d4:	f7fd fd14 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 80034d8:	21b7      	movs	r1, #183	; 0xb7
 80034da:	f24d 4025 	movw	r0, #54309	; 0xd425
 80034de:	f7fd fd0f 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 80034e2:	2102      	movs	r1, #2
 80034e4:	f24d 4026 	movw	r0, #54310	; 0xd426
 80034e8:	f7fd fd0a 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 80034ec:	21cf      	movs	r1, #207	; 0xcf
 80034ee:	f24d 4027 	movw	r0, #54311	; 0xd427
 80034f2:	f7fd fd05 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 80034f6:	2102      	movs	r1, #2
 80034f8:	f24d 4028 	movw	r0, #54312	; 0xd428
 80034fc:	f7fd fd00 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 8003500:	21de      	movs	r1, #222	; 0xde
 8003502:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003506:	f7fd fcfb 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 800350a:	2102      	movs	r1, #2
 800350c:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003510:	f7fd fcf6 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 8003514:	21f2      	movs	r1, #242	; 0xf2
 8003516:	f24d 402b 	movw	r0, #54315	; 0xd42b
 800351a:	f7fd fcf1 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 800351e:	2102      	movs	r1, #2
 8003520:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003524:	f7fd fcec 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 8003528:	21fe      	movs	r1, #254	; 0xfe
 800352a:	f24d 402d 	movw	r0, #54317	; 0xd42d
 800352e:	f7fd fce7 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 8003532:	2103      	movs	r1, #3
 8003534:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003538:	f7fd fce2 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 800353c:	2110      	movs	r1, #16
 800353e:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003542:	f7fd fcdd 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 8003546:	2103      	movs	r1, #3
 8003548:	f24d 4030 	movw	r0, #54320	; 0xd430
 800354c:	f7fd fcd8 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 8003550:	2133      	movs	r1, #51	; 0x33
 8003552:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003556:	f7fd fcd3 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 800355a:	2103      	movs	r1, #3
 800355c:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003560:	f7fd fcce 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 8003564:	216d      	movs	r1, #109	; 0x6d
 8003566:	f24d 4033 	movw	r0, #54323	; 0xd433
 800356a:	f7fd fcc9 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 800356e:	2100      	movs	r1, #0
 8003570:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003574:	f7fd fcc4 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 8003578:	2133      	movs	r1, #51	; 0x33
 800357a:	f24d 5001 	movw	r0, #54529	; 0xd501
 800357e:	f7fd fcbf 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 8003582:	2100      	movs	r1, #0
 8003584:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003588:	f7fd fcba 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 800358c:	2134      	movs	r1, #52	; 0x34
 800358e:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003592:	f7fd fcb5 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 8003596:	2100      	movs	r1, #0
 8003598:	f24d 5004 	movw	r0, #54532	; 0xd504
 800359c:	f7fd fcb0 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 80035a0:	213a      	movs	r1, #58	; 0x3a
 80035a2:	f24d 5005 	movw	r0, #54533	; 0xd505
 80035a6:	f7fd fcab 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 80035aa:	2100      	movs	r1, #0
 80035ac:	f24d 5006 	movw	r0, #54534	; 0xd506
 80035b0:	f7fd fca6 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 80035b4:	214a      	movs	r1, #74	; 0x4a
 80035b6:	f24d 5007 	movw	r0, #54535	; 0xd507
 80035ba:	f7fd fca1 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 80035be:	2100      	movs	r1, #0
 80035c0:	f24d 5008 	movw	r0, #54536	; 0xd508
 80035c4:	f7fd fc9c 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 80035c8:	215c      	movs	r1, #92	; 0x5c
 80035ca:	f24d 5009 	movw	r0, #54537	; 0xd509
 80035ce:	f7fd fc97 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 80035d2:	2100      	movs	r1, #0
 80035d4:	f24d 500a 	movw	r0, #54538	; 0xd50a
 80035d8:	f7fd fc92 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 80035dc:	2181      	movs	r1, #129	; 0x81
 80035de:	f24d 500b 	movw	r0, #54539	; 0xd50b
 80035e2:	f7fd fc8d 	bl	8000f00 <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 80035e6:	2100      	movs	r1, #0
 80035e8:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80035ec:	f7fd fc88 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 80035f0:	21a6      	movs	r1, #166	; 0xa6
 80035f2:	f24d 500d 	movw	r0, #54541	; 0xd50d
 80035f6:	f7fd fc83 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 80035fa:	2100      	movs	r1, #0
 80035fc:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003600:	f7fd fc7e 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 8003604:	21e5      	movs	r1, #229	; 0xe5
 8003606:	f24d 500f 	movw	r0, #54543	; 0xd50f
 800360a:	f7fd fc79 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 800360e:	2101      	movs	r1, #1
 8003610:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003614:	f7fd fc74 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 8003618:	2113      	movs	r1, #19
 800361a:	f24d 5011 	movw	r0, #54545	; 0xd511
 800361e:	f7fd fc6f 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 8003622:	2101      	movs	r1, #1
 8003624:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003628:	f7fd fc6a 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 800362c:	2154      	movs	r1, #84	; 0x54
 800362e:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003632:	f7fd fc65 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 8003636:	2101      	movs	r1, #1
 8003638:	f24d 5014 	movw	r0, #54548	; 0xd514
 800363c:	f7fd fc60 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 8003640:	2182      	movs	r1, #130	; 0x82
 8003642:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003646:	f7fd fc5b 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 800364a:	2101      	movs	r1, #1
 800364c:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003650:	f7fd fc56 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 8003654:	21ca      	movs	r1, #202	; 0xca
 8003656:	f24d 5017 	movw	r0, #54551	; 0xd517
 800365a:	f7fd fc51 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 800365e:	2102      	movs	r1, #2
 8003660:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003664:	f7fd fc4c 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 8003668:	2100      	movs	r1, #0
 800366a:	f24d 5019 	movw	r0, #54553	; 0xd519
 800366e:	f7fd fc47 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 8003672:	2102      	movs	r1, #2
 8003674:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003678:	f7fd fc42 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 800367c:	2101      	movs	r1, #1
 800367e:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003682:	f7fd fc3d 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 8003686:	2102      	movs	r1, #2
 8003688:	f24d 501c 	movw	r0, #54556	; 0xd51c
 800368c:	f7fd fc38 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 8003690:	2134      	movs	r1, #52	; 0x34
 8003692:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003696:	f7fd fc33 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 800369a:	2102      	movs	r1, #2
 800369c:	f24d 501e 	movw	r0, #54558	; 0xd51e
 80036a0:	f7fd fc2e 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 80036a4:	2167      	movs	r1, #103	; 0x67
 80036a6:	f24d 501f 	movw	r0, #54559	; 0xd51f
 80036aa:	f7fd fc29 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 80036ae:	2102      	movs	r1, #2
 80036b0:	f24d 5020 	movw	r0, #54560	; 0xd520
 80036b4:	f7fd fc24 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 80036b8:	2184      	movs	r1, #132	; 0x84
 80036ba:	f24d 5021 	movw	r0, #54561	; 0xd521
 80036be:	f7fd fc1f 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 80036c2:	2102      	movs	r1, #2
 80036c4:	f24d 5022 	movw	r0, #54562	; 0xd522
 80036c8:	f7fd fc1a 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 80036cc:	21a4      	movs	r1, #164	; 0xa4
 80036ce:	f24d 5023 	movw	r0, #54563	; 0xd523
 80036d2:	f7fd fc15 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 80036d6:	2102      	movs	r1, #2
 80036d8:	f24d 5024 	movw	r0, #54564	; 0xd524
 80036dc:	f7fd fc10 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 80036e0:	21b7      	movs	r1, #183	; 0xb7
 80036e2:	f24d 5025 	movw	r0, #54565	; 0xd525
 80036e6:	f7fd fc0b 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 80036ea:	2102      	movs	r1, #2
 80036ec:	f24d 5026 	movw	r0, #54566	; 0xd526
 80036f0:	f7fd fc06 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 80036f4:	21cf      	movs	r1, #207	; 0xcf
 80036f6:	f24d 5027 	movw	r0, #54567	; 0xd527
 80036fa:	f7fd fc01 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 80036fe:	2102      	movs	r1, #2
 8003700:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003704:	f7fd fbfc 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 8003708:	21de      	movs	r1, #222	; 0xde
 800370a:	f24d 5029 	movw	r0, #54569	; 0xd529
 800370e:	f7fd fbf7 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 8003712:	2102      	movs	r1, #2
 8003714:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003718:	f7fd fbf2 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 800371c:	21f2      	movs	r1, #242	; 0xf2
 800371e:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003722:	f7fd fbed 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 8003726:	2102      	movs	r1, #2
 8003728:	f24d 502c 	movw	r0, #54572	; 0xd52c
 800372c:	f7fd fbe8 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 8003730:	21fe      	movs	r1, #254	; 0xfe
 8003732:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003736:	f7fd fbe3 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 800373a:	2103      	movs	r1, #3
 800373c:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003740:	f7fd fbde 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 8003744:	2110      	movs	r1, #16
 8003746:	f24d 502f 	movw	r0, #54575	; 0xd52f
 800374a:	f7fd fbd9 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 800374e:	2103      	movs	r1, #3
 8003750:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003754:	f7fd fbd4 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 8003758:	2133      	movs	r1, #51	; 0x33
 800375a:	f24d 5031 	movw	r0, #54577	; 0xd531
 800375e:	f7fd fbcf 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 8003762:	2103      	movs	r1, #3
 8003764:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003768:	f7fd fbca 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 800376c:	216d      	movs	r1, #109	; 0x6d
 800376e:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003772:	f7fd fbc5 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 8003776:	2100      	movs	r1, #0
 8003778:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 800377c:	f7fd fbc0 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 8003780:	2133      	movs	r1, #51	; 0x33
 8003782:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003786:	f7fd fbbb 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 800378a:	2100      	movs	r1, #0
 800378c:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003790:	f7fd fbb6 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 8003794:	2134      	movs	r1, #52	; 0x34
 8003796:	f24d 6003 	movw	r0, #54787	; 0xd603
 800379a:	f7fd fbb1 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 800379e:	2100      	movs	r1, #0
 80037a0:	f24d 6004 	movw	r0, #54788	; 0xd604
 80037a4:	f7fd fbac 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 80037a8:	213a      	movs	r1, #58	; 0x3a
 80037aa:	f24d 6005 	movw	r0, #54789	; 0xd605
 80037ae:	f7fd fba7 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 80037b2:	2100      	movs	r1, #0
 80037b4:	f24d 6006 	movw	r0, #54790	; 0xd606
 80037b8:	f7fd fba2 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 80037bc:	214a      	movs	r1, #74	; 0x4a
 80037be:	f24d 6007 	movw	r0, #54791	; 0xd607
 80037c2:	f7fd fb9d 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 80037c6:	2100      	movs	r1, #0
 80037c8:	f24d 6008 	movw	r0, #54792	; 0xd608
 80037cc:	f7fd fb98 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 80037d0:	215c      	movs	r1, #92	; 0x5c
 80037d2:	f24d 6009 	movw	r0, #54793	; 0xd609
 80037d6:	f7fd fb93 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 80037da:	2100      	movs	r1, #0
 80037dc:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80037e0:	f7fd fb8e 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 80037e4:	2181      	movs	r1, #129	; 0x81
 80037e6:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80037ea:	f7fd fb89 	bl	8000f00 <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 80037ee:	2100      	movs	r1, #0
 80037f0:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80037f4:	f7fd fb84 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 80037f8:	21a6      	movs	r1, #166	; 0xa6
 80037fa:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80037fe:	f7fd fb7f 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 8003802:	2100      	movs	r1, #0
 8003804:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003808:	f7fd fb7a 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 800380c:	21e5      	movs	r1, #229	; 0xe5
 800380e:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003812:	f7fd fb75 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 8003816:	2101      	movs	r1, #1
 8003818:	f24d 6010 	movw	r0, #54800	; 0xd610
 800381c:	f7fd fb70 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 8003820:	2113      	movs	r1, #19
 8003822:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003826:	f7fd fb6b 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 800382a:	2101      	movs	r1, #1
 800382c:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003830:	f7fd fb66 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8003834:	2154      	movs	r1, #84	; 0x54
 8003836:	f24d 6013 	movw	r0, #54803	; 0xd613
 800383a:	f7fd fb61 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 800383e:	2101      	movs	r1, #1
 8003840:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003844:	f7fd fb5c 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 8003848:	2182      	movs	r1, #130	; 0x82
 800384a:	f24d 6015 	movw	r0, #54805	; 0xd615
 800384e:	f7fd fb57 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 8003852:	2101      	movs	r1, #1
 8003854:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003858:	f7fd fb52 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 800385c:	21ca      	movs	r1, #202	; 0xca
 800385e:	f24d 6017 	movw	r0, #54807	; 0xd617
 8003862:	f7fd fb4d 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 8003866:	2102      	movs	r1, #2
 8003868:	f24d 6018 	movw	r0, #54808	; 0xd618
 800386c:	f7fd fb48 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 8003870:	2100      	movs	r1, #0
 8003872:	f24d 6019 	movw	r0, #54809	; 0xd619
 8003876:	f7fd fb43 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 800387a:	2102      	movs	r1, #2
 800387c:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8003880:	f7fd fb3e 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 8003884:	2101      	movs	r1, #1
 8003886:	f24d 601b 	movw	r0, #54811	; 0xd61b
 800388a:	f7fd fb39 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 800388e:	2102      	movs	r1, #2
 8003890:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8003894:	f7fd fb34 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 8003898:	2134      	movs	r1, #52	; 0x34
 800389a:	f24d 601d 	movw	r0, #54813	; 0xd61d
 800389e:	f7fd fb2f 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 80038a2:	2102      	movs	r1, #2
 80038a4:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80038a8:	f7fd fb2a 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 80038ac:	2167      	movs	r1, #103	; 0x67
 80038ae:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80038b2:	f7fd fb25 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 80038b6:	2102      	movs	r1, #2
 80038b8:	f24d 6020 	movw	r0, #54816	; 0xd620
 80038bc:	f7fd fb20 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 80038c0:	2184      	movs	r1, #132	; 0x84
 80038c2:	f24d 6021 	movw	r0, #54817	; 0xd621
 80038c6:	f7fd fb1b 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 80038ca:	2102      	movs	r1, #2
 80038cc:	f24d 6022 	movw	r0, #54818	; 0xd622
 80038d0:	f7fd fb16 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 80038d4:	21a4      	movs	r1, #164	; 0xa4
 80038d6:	f24d 6023 	movw	r0, #54819	; 0xd623
 80038da:	f7fd fb11 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 80038de:	2102      	movs	r1, #2
 80038e0:	f24d 6024 	movw	r0, #54820	; 0xd624
 80038e4:	f7fd fb0c 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 80038e8:	21b7      	movs	r1, #183	; 0xb7
 80038ea:	f24d 6025 	movw	r0, #54821	; 0xd625
 80038ee:	f7fd fb07 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 80038f2:	2102      	movs	r1, #2
 80038f4:	f24d 6026 	movw	r0, #54822	; 0xd626
 80038f8:	f7fd fb02 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 80038fc:	21cf      	movs	r1, #207	; 0xcf
 80038fe:	f24d 6027 	movw	r0, #54823	; 0xd627
 8003902:	f7fd fafd 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 8003906:	2102      	movs	r1, #2
 8003908:	f24d 6028 	movw	r0, #54824	; 0xd628
 800390c:	f7fd faf8 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 8003910:	21de      	movs	r1, #222	; 0xde
 8003912:	f24d 6029 	movw	r0, #54825	; 0xd629
 8003916:	f7fd faf3 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 800391a:	2102      	movs	r1, #2
 800391c:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8003920:	f7fd faee 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8003924:	21f2      	movs	r1, #242	; 0xf2
 8003926:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800392a:	f7fd fae9 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 800392e:	2102      	movs	r1, #2
 8003930:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003934:	f7fd fae4 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 8003938:	21fe      	movs	r1, #254	; 0xfe
 800393a:	f24d 602d 	movw	r0, #54829	; 0xd62d
 800393e:	f7fd fadf 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 8003942:	2103      	movs	r1, #3
 8003944:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003948:	f7fd fada 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 800394c:	2110      	movs	r1, #16
 800394e:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8003952:	f7fd fad5 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 8003956:	2103      	movs	r1, #3
 8003958:	f24d 6030 	movw	r0, #54832	; 0xd630
 800395c:	f7fd fad0 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 8003960:	2133      	movs	r1, #51	; 0x33
 8003962:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003966:	f7fd facb 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 800396a:	2103      	movs	r1, #3
 800396c:	f24d 6032 	movw	r0, #54834	; 0xd632
 8003970:	f7fd fac6 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 8003974:	216d      	movs	r1, #109	; 0x6d
 8003976:	f24d 6033 	movw	r0, #54835	; 0xd633
 800397a:	f7fd fac1 	bl	8000f00 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 800397e:	2155      	movs	r1, #85	; 0x55
 8003980:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003984:	f7fd fabc 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8003988:	21aa      	movs	r1, #170	; 0xaa
 800398a:	f24f 0001 	movw	r0, #61441	; 0xf001
 800398e:	f7fd fab7 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8003992:	2152      	movs	r1, #82	; 0x52
 8003994:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003998:	f7fd fab2 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 800399c:	2108      	movs	r1, #8
 800399e:	f24f 0003 	movw	r0, #61443	; 0xf003
 80039a2:	f7fd faad 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 80039a6:	2100      	movs	r1, #0
 80039a8:	f24f 0004 	movw	r0, #61444	; 0xf004
 80039ac:	f7fd faa8 	bl	8000f00 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 80039b0:	21cc      	movs	r1, #204	; 0xcc
 80039b2:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80039b6:	f7fd faa3 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 80039ba:	2100      	movs	r1, #0
 80039bc:	f24b 1001 	movw	r0, #45313	; 0xb101
 80039c0:	f7fd fa9e 	bl	8000f00 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 80039c4:	2105      	movs	r1, #5
 80039c6:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80039ca:	f7fd fa99 	bl	8000f00 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 80039ce:	2170      	movs	r1, #112	; 0x70
 80039d0:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80039d4:	f7fd fa94 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 80039d8:	2170      	movs	r1, #112	; 0x70
 80039da:	f24b 7001 	movw	r0, #46849	; 0xb701
 80039de:	f7fd fa8f 	bl	8000f00 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 80039e2:	2101      	movs	r1, #1
 80039e4:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80039e8:	f7fd fa8a 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 80039ec:	2103      	movs	r1, #3
 80039ee:	f64b 0001 	movw	r0, #47105	; 0xb801
 80039f2:	f7fd fa85 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 80039f6:	2103      	movs	r1, #3
 80039f8:	f64b 0002 	movw	r0, #47106	; 0xb802
 80039fc:	f7fd fa80 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 8003a00:	2103      	movs	r1, #3
 8003a02:	f64b 0003 	movw	r0, #47107	; 0xb803
 8003a06:	f7fd fa7b 	bl	8000f00 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 8003a0a:	2102      	movs	r1, #2
 8003a0c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003a10:	f7fd fa76 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 8003a14:	2100      	movs	r1, #0
 8003a16:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003a1a:	f7fd fa71 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8003a1e:	2100      	movs	r1, #0
 8003a20:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003a24:	f7fd fa6c 	bl	8000f00 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 8003a28:	21d0      	movs	r1, #208	; 0xd0
 8003a2a:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8003a2e:	f7fd fa67 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 8003a32:	2102      	movs	r1, #2
 8003a34:	f64c 1001 	movw	r0, #51457	; 0xc901
 8003a38:	f7fd fa62 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 8003a3c:	2150      	movs	r1, #80	; 0x50
 8003a3e:	f64c 1002 	movw	r0, #51458	; 0xc902
 8003a42:	f7fd fa5d 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 8003a46:	2150      	movs	r1, #80	; 0x50
 8003a48:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003a4c:	f7fd fa58 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 8003a50:	2150      	movs	r1, #80	; 0x50
 8003a52:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003a56:	f7fd fa53 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8003a60:	f7fd fa4e 	bl	8000f00 <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 8003a64:	2155      	movs	r1, #85	; 0x55
 8003a66:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003a6a:	f7fd fa49 	bl	8000f00 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8003a6e:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8003a72:	f7fd fa0b 	bl	8000e8c <LCD_WR_REG>
		opt_delay(120);
 8003a76:	2078      	movs	r0, #120	; 0x78
 8003a78:	f7fd fa58 	bl	8000f2c <opt_delay>
		LCD_WR_REG(0x2900);
 8003a7c:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8003a80:	f7fd fa04 	bl	8000e8c <LCD_WR_REG>
 8003a84:	e0be      	b.n	8003c04 <TFTLCD_Init+0x235c>
	}else if(lcddev.id==0X1963)
 8003a86:	4b7f      	ldr	r3, [pc, #508]	; (8003c84 <TFTLCD_Init+0x23dc>)
 8003a88:	889b      	ldrh	r3, [r3, #4]
 8003a8a:	f641 1263 	movw	r2, #6499	; 0x1963
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	f040 80b8 	bne.w	8003c04 <TFTLCD_Init+0x235c>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8003a94:	20e2      	movs	r0, #226	; 0xe2
 8003a96:	f7fd f9f9 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 8003a9a:	201d      	movs	r0, #29
 8003a9c:	f7fd fa0a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8003aa0:	2002      	movs	r0, #2
 8003aa2:	f7fd fa07 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 8003aa6:	2004      	movs	r0, #4
 8003aa8:	f7fd fa04 	bl	8000eb4 <LCD_WR_DATA>
		opt_delay(100);
 8003aac:	2064      	movs	r0, #100	; 0x64
 8003aae:	f7fd fa3d 	bl	8000f2c <opt_delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8003ab2:	20e0      	movs	r0, #224	; 0xe0
 8003ab4:	f7fd f9ea 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8003ab8:	2001      	movs	r0, #1
 8003aba:	f7fd f9fb 	bl	8000eb4 <LCD_WR_DATA>
		HAL_Delay(10);
 8003abe:	200a      	movs	r0, #10
 8003ac0:	f000 fd24 	bl	800450c <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8003ac4:	20e0      	movs	r0, #224	; 0xe0
 8003ac6:	f7fd f9e1 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 8003aca:	2003      	movs	r0, #3
 8003acc:	f7fd f9f2 	bl	8000eb4 <LCD_WR_DATA>
		HAL_Delay(12);
 8003ad0:	200c      	movs	r0, #12
 8003ad2:	f000 fd1b 	bl	800450c <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f7fd f9d8 	bl	8000e8c <LCD_WR_REG>
		HAL_Delay(10);
 8003adc:	200a      	movs	r0, #10
 8003ade:	f000 fd15 	bl	800450c <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8003ae2:	20e6      	movs	r0, #230	; 0xe6
 8003ae4:	f7fd f9d2 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8003ae8:	202f      	movs	r0, #47	; 0x2f
 8003aea:	f7fd f9e3 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8003aee:	20ff      	movs	r0, #255	; 0xff
 8003af0:	f7fd f9e0 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8003af4:	20ff      	movs	r0, #255	; 0xff
 8003af6:	f7fd f9dd 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 8003afa:	20b0      	movs	r0, #176	; 0xb0
 8003afc:	f7fd f9c6 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8003b00:	2020      	movs	r0, #32
 8003b02:	f7fd f9d7 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 8003b06:	2000      	movs	r0, #0
 8003b08:	f7fd f9d4 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 8003b0c:	2003      	movs	r0, #3
 8003b0e:	f7fd f9d1 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8003b12:	f240 301f 	movw	r0, #799	; 0x31f
 8003b16:	f7fd f9cd 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	f7fd f9ca 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8003b20:	f240 10df 	movw	r0, #479	; 0x1df
 8003b24:	f7fd f9c6 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 8003b28:	2000      	movs	r0, #0
 8003b2a:	f7fd f9c3 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 8003b2e:	20b4      	movs	r0, #180	; 0xb4
 8003b30:	f7fd f9ac 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8003b34:	2004      	movs	r0, #4
 8003b36:	f7fd f9bd 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 8003b3a:	f240 401f 	movw	r0, #1055	; 0x41f
 8003b3e:	f7fd f9b9 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 8003b42:	2000      	movs	r0, #0
 8003b44:	f7fd f9b6 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 8003b48:	202e      	movs	r0, #46	; 0x2e
 8003b4a:	f7fd f9b3 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8003b4e:	2000      	movs	r0, #0
 8003b50:	f7fd f9b0 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b54:	2000      	movs	r0, #0
 8003b56:	f7fd f9ad 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	f7fd f9aa 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b60:	2000      	movs	r0, #0
 8003b62:	f7fd f9a7 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 8003b66:	20b6      	movs	r0, #182	; 0xb6
 8003b68:	f7fd f990 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8003b6c:	2002      	movs	r0, #2
 8003b6e:	f7fd f9a1 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 8003b72:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8003b76:	f7fd f99d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f7fd f99a 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 8003b80:	2017      	movs	r0, #23
 8003b82:	f7fd f997 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8003b86:	2015      	movs	r0, #21
 8003b88:	f7fd f994 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	f7fd f991 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b92:	2000      	movs	r0, #0
 8003b94:	f7fd f98e 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 8003b98:	20f0      	movs	r0, #240	; 0xf0
 8003b9a:	f7fd f977 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 8003b9e:	2003      	movs	r0, #3
 8003ba0:	f7fd f988 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 8003ba4:	2029      	movs	r0, #41	; 0x29
 8003ba6:	f7fd f971 	bl	8000e8c <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8003baa:	20d0      	movs	r0, #208	; 0xd0
 8003bac:	f7fd f96e 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	f7fd f97f 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 8003bb6:	20be      	movs	r0, #190	; 0xbe
 8003bb8:	f7fd f968 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8003bbc:	2005      	movs	r0, #5
 8003bbe:	f7fd f979 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8003bc2:	20fe      	movs	r0, #254	; 0xfe
 8003bc4:	f7fd f976 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 8003bc8:	2001      	movs	r0, #1
 8003bca:	f7fd f973 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 8003bce:	2000      	movs	r0, #0
 8003bd0:	f7fd f970 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	f7fd f96d 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 8003bda:	2000      	movs	r0, #0
 8003bdc:	f7fd f96a 	bl	8000eb4 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8003be0:	20b8      	movs	r0, #184	; 0xb8
 8003be2:	f7fd f953 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8003be6:	2003      	movs	r0, #3
 8003be8:	f7fd f964 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 8003bec:	2001      	movs	r0, #1
 8003bee:	f7fd f961 	bl	8000eb4 <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 8003bf2:	20ba      	movs	r0, #186	; 0xba
 8003bf4:	f7fd f94a 	bl	8000e8c <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	f7fd f95b 	bl	8000eb4 <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 8003bfe:	2064      	movs	r0, #100	; 0x64
 8003c00:	f7fd fd4e 	bl	80016a0 <LCD_SSD_BackLightSet>
	}
	//初始化完成以后,提速
	if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//如果是这几个IC,则设置WR时序为最快
 8003c04:	4b1f      	ldr	r3, [pc, #124]	; (8003c84 <TFTLCD_Init+0x23dc>)
 8003c06:	889b      	ldrh	r3, [r3, #4]
 8003c08:	f249 3241 	movw	r2, #37697	; 0x9341
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d011      	beq.n	8003c34 <TFTLCD_Init+0x238c>
 8003c10:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <TFTLCD_Init+0x23dc>)
 8003c12:	889b      	ldrh	r3, [r3, #4]
 8003c14:	f245 3210 	movw	r2, #21264	; 0x5310
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00b      	beq.n	8003c34 <TFTLCD_Init+0x238c>
 8003c1c:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <TFTLCD_Init+0x23dc>)
 8003c1e:	889b      	ldrh	r3, [r3, #4]
 8003c20:	f245 5210 	movw	r2, #21776	; 0x5510
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d005      	beq.n	8003c34 <TFTLCD_Init+0x238c>
 8003c28:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <TFTLCD_Init+0x23dc>)
 8003c2a:	889b      	ldrh	r3, [r3, #4]
 8003c2c:	f641 1263 	movw	r2, #6499	; 0x1963
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d117      	bne.n	8003c64 <TFTLCD_Init+0x23bc>
	{
		//重新配置写时序控制寄存器的时序
		FSMC_Bank1E->BWTR[6]&=~(0XF<<0);//地址建立时间(ADDSET)清零
 8003c34:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <TFTLCD_Init+0x23e0>)
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	4a13      	ldr	r2, [pc, #76]	; (8003c88 <TFTLCD_Init+0x23e0>)
 8003c3a:	f023 030f 	bic.w	r3, r3, #15
 8003c3e:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]&=~(0XF<<8);//数据保存时间清零
 8003c40:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <TFTLCD_Init+0x23e0>)
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	4a10      	ldr	r2, [pc, #64]	; (8003c88 <TFTLCD_Init+0x23e0>)
 8003c46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c4a:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=3<<0;		//地址建立时间(ADDSET)为3个HCLK =18ns
 8003c4c:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <TFTLCD_Init+0x23e0>)
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	4a0d      	ldr	r2, [pc, #52]	; (8003c88 <TFTLCD_Init+0x23e0>)
 8003c52:	f043 0303 	orr.w	r3, r3, #3
 8003c56:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=2<<8; 	//数据保存时间(DATAST)为6ns*3个HCLK=18ns
 8003c58:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <TFTLCD_Init+0x23e0>)
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	4a0a      	ldr	r2, [pc, #40]	; (8003c88 <TFTLCD_Init+0x23e0>)
 8003c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c62:	6193      	str	r3, [r2, #24]
	}
	LCD_Display_Dir(0);		//默认为竖屏
 8003c64:	2000      	movs	r0, #0
 8003c66:	f7fd fd4f 	bl	8001708 <LCD_Display_Dir>
	GPIOB->ODR |= 1<<15;					//点亮背光
 8003c6a:	4b08      	ldr	r3, [pc, #32]	; (8003c8c <TFTLCD_Init+0x23e4>)
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	4a07      	ldr	r2, [pc, #28]	; (8003c8c <TFTLCD_Init+0x23e4>)
 8003c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c74:	6153      	str	r3, [r2, #20]
	LCD_Clear(WHITE);
 8003c76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003c7a:	f000 f809 	bl	8003c90 <LCD_Clear>
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000144 	.word	0x20000144
 8003c88:	a0000104 	.word	0xa0000104
 8003c8c:	40020400 	.word	0x40020400

08003c90 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(uint32_t color)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	uint32_t index=0;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint=lcddev.width;
 8003c9c:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <LCD_Clear+0x54>)
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 8003ca2:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <LCD_Clear+0x54>)
 8003ca4:	885b      	ldrh	r3, [r3, #2]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	fb02 f303 	mul.w	r3, r2, r3
 8003cae:	60bb      	str	r3, [r7, #8]
	LCD_SetCursor(0x00,0x0000);			//设置光标位置
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f7fd f95c 	bl	8000f70 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 8003cb8:	f7fd f94a 	bl	8000f50 <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	e006      	b.n	8003cd0 <LCD_Clear+0x40>
	{
		TFT_LCD->LCD_RAM=color;
 8003cc2:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <LCD_Clear+0x58>)
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	b292      	uxth	r2, r2
 8003cc8:	805a      	strh	r2, [r3, #2]
	for(index=0;index<totalpoint;index++)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d3f4      	bcc.n	8003cc2 <LCD_Clear+0x32>
	}
}
 8003cd8:	bf00      	nop
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000144 	.word	0x20000144
 8003ce8:	6c00007e 	.word	0x6c00007e

08003cec <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24/32
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 8003cec:	b590      	push	{r4, r7, lr}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	4608      	mov	r0, r1
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4623      	mov	r3, r4
 8003cfc:	80fb      	strh	r3, [r7, #6]
 8003cfe:	4603      	mov	r3, r0
 8003d00:	80bb      	strh	r3, [r7, #4]
 8003d02:	460b      	mov	r3, r1
 8003d04:	70fb      	strb	r3, [r7, #3]
 8003d06:	4613      	mov	r3, r2
 8003d08:	70bb      	strb	r3, [r7, #2]
    uint8_t temp,t1,t;
	uint16_t y0=y;
 8003d0a:	88bb      	ldrh	r3, [r7, #4]
 8003d0c:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 8003d0e:	78bb      	ldrb	r3, [r7, #2]
 8003d10:	08db      	lsrs	r3, r3, #3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	461a      	mov	r2, r3
 8003d16:	78bb      	ldrb	r3, [r7, #2]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	bf14      	ite	ne
 8003d22:	2301      	movne	r3, #1
 8003d24:	2300      	moveq	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	4413      	add	r3, r2
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	78bb      	ldrb	r3, [r7, #2]
 8003d2e:	085b      	lsrs	r3, r3, #1
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	fb12 f303 	smulbb	r3, r2, r3
 8003d36:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	3b20      	subs	r3, #32
 8003d3c:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 8003d3e:	2300      	movs	r3, #0
 8003d40:	737b      	strb	r3, [r7, #13]
 8003d42:	e08f      	b.n	8003e64 <LCD_ShowChar+0x178>
	{
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
 8003d44:	78bb      	ldrb	r3, [r7, #2]
 8003d46:	2b0c      	cmp	r3, #12
 8003d48:	d10b      	bne.n	8003d62 <LCD_ShowChar+0x76>
 8003d4a:	78fa      	ldrb	r2, [r7, #3]
 8003d4c:	7b79      	ldrb	r1, [r7, #13]
 8003d4e:	484b      	ldr	r0, [pc, #300]	; (8003e7c <LCD_ShowChar+0x190>)
 8003d50:	4613      	mov	r3, r2
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4403      	add	r3, r0
 8003d5a:	440b      	add	r3, r1
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	73fb      	strb	r3, [r7, #15]
 8003d60:	e03f      	b.n	8003de2 <LCD_ShowChar+0xf6>
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
 8003d62:	78bb      	ldrb	r3, [r7, #2]
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	d108      	bne.n	8003d7a <LCD_ShowChar+0x8e>
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	7b7b      	ldrb	r3, [r7, #13]
 8003d6c:	4944      	ldr	r1, [pc, #272]	; (8003e80 <LCD_ShowChar+0x194>)
 8003d6e:	0112      	lsls	r2, r2, #4
 8003d70:	440a      	add	r2, r1
 8003d72:	4413      	add	r3, r2
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	73fb      	strb	r3, [r7, #15]
 8003d78:	e033      	b.n	8003de2 <LCD_ShowChar+0xf6>
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
 8003d7a:	78bb      	ldrb	r3, [r7, #2]
 8003d7c:	2b18      	cmp	r3, #24
 8003d7e:	d10b      	bne.n	8003d98 <LCD_ShowChar+0xac>
 8003d80:	78fa      	ldrb	r2, [r7, #3]
 8003d82:	7b79      	ldrb	r1, [r7, #13]
 8003d84:	483f      	ldr	r0, [pc, #252]	; (8003e84 <LCD_ShowChar+0x198>)
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4403      	add	r3, r0
 8003d90:	440b      	add	r3, r1
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	73fb      	strb	r3, [r7, #15]
 8003d96:	e024      	b.n	8003de2 <LCD_ShowChar+0xf6>
		else if(size==32)temp=asc2_3216[num][t];	//调用3216字体
 8003d98:	78bb      	ldrb	r3, [r7, #2]
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d108      	bne.n	8003db0 <LCD_ShowChar+0xc4>
 8003d9e:	78fa      	ldrb	r2, [r7, #3]
 8003da0:	7b7b      	ldrb	r3, [r7, #13]
 8003da2:	4939      	ldr	r1, [pc, #228]	; (8003e88 <LCD_ShowChar+0x19c>)
 8003da4:	0192      	lsls	r2, r2, #6
 8003da6:	440a      	add	r2, r1
 8003da8:	4413      	add	r3, r2
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	73fb      	strb	r3, [r7, #15]
 8003dae:	e018      	b.n	8003de2 <LCD_ShowChar+0xf6>
		else if(size==48)temp=asc2_4824[num][t];	//调用4824字体
 8003db0:	78bb      	ldrb	r3, [r7, #2]
 8003db2:	2b30      	cmp	r3, #48	; 0x30
 8003db4:	d10a      	bne.n	8003dcc <LCD_ShowChar+0xe0>
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	7b7b      	ldrb	r3, [r7, #13]
 8003dba:	4934      	ldr	r1, [pc, #208]	; (8003e8c <LCD_ShowChar+0x1a0>)
 8003dbc:	20a8      	movs	r0, #168	; 0xa8
 8003dbe:	fb00 f202 	mul.w	r2, r0, r2
 8003dc2:	440a      	add	r2, r1
 8003dc4:	4413      	add	r3, r2
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	73fb      	strb	r3, [r7, #15]
 8003dca:	e00a      	b.n	8003de2 <LCD_ShowChar+0xf6>
		else if(size==64)temp=asc2_6432[num][t];	//调用6432字体
 8003dcc:	78bb      	ldrb	r3, [r7, #2]
 8003dce:	2b40      	cmp	r3, #64	; 0x40
 8003dd0:	d14e      	bne.n	8003e70 <LCD_ShowChar+0x184>
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	7b7b      	ldrb	r3, [r7, #13]
 8003dd6:	492e      	ldr	r1, [pc, #184]	; (8003e90 <LCD_ShowChar+0x1a4>)
 8003dd8:	0212      	lsls	r2, r2, #8
 8003dda:	440a      	add	r2, r1
 8003ddc:	4413      	add	r3, r2
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 8003de2:	2300      	movs	r3, #0
 8003de4:	73bb      	strb	r3, [r7, #14]
 8003de6:	e035      	b.n	8003e54 <LCD_ShowChar+0x168>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 8003de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	da07      	bge.n	8003e00 <LCD_ShowChar+0x114>
 8003df0:	4b28      	ldr	r3, [pc, #160]	; (8003e94 <LCD_ShowChar+0x1a8>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	88b9      	ldrh	r1, [r7, #4]
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fd fb37 	bl	800146c <LCD_Fast_DrawPoint>
 8003dfe:	e00a      	b.n	8003e16 <LCD_ShowChar+0x12a>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 8003e00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d106      	bne.n	8003e16 <LCD_ShowChar+0x12a>
 8003e08:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <LCD_ShowChar+0x1ac>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	88b9      	ldrh	r1, [r7, #4]
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fd fb2b 	bl	800146c <LCD_Fast_DrawPoint>
			temp<<=1;
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]
			y++;
 8003e1c:	88bb      	ldrh	r3, [r7, #4]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 8003e22:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <LCD_ShowChar+0x1b0>)
 8003e24:	885b      	ldrh	r3, [r3, #2]
 8003e26:	88ba      	ldrh	r2, [r7, #4]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d223      	bcs.n	8003e74 <LCD_ShowChar+0x188>
			if((y-y0)==size)
 8003e2c:	88ba      	ldrh	r2, [r7, #4]
 8003e2e:	897b      	ldrh	r3, [r7, #10]
 8003e30:	1ad2      	subs	r2, r2, r3
 8003e32:	78bb      	ldrb	r3, [r7, #2]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d10a      	bne.n	8003e4e <LCD_ShowChar+0x162>
			{
				y=y0;
 8003e38:	897b      	ldrh	r3, [r7, #10]
 8003e3a:	80bb      	strh	r3, [r7, #4]
				x++;
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 8003e42:	4b16      	ldr	r3, [pc, #88]	; (8003e9c <LCD_ShowChar+0x1b0>)
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d307      	bcc.n	8003e5c <LCD_ShowChar+0x170>
 8003e4c:	e013      	b.n	8003e76 <LCD_ShowChar+0x18a>
		for(t1=0;t1<8;t1++)
 8003e4e:	7bbb      	ldrb	r3, [r7, #14]
 8003e50:	3301      	adds	r3, #1
 8003e52:	73bb      	strb	r3, [r7, #14]
 8003e54:	7bbb      	ldrb	r3, [r7, #14]
 8003e56:	2b07      	cmp	r3, #7
 8003e58:	d9c6      	bls.n	8003de8 <LCD_ShowChar+0xfc>
 8003e5a:	e000      	b.n	8003e5e <LCD_ShowChar+0x172>
				break;
 8003e5c:	bf00      	nop
	for(t=0;t<csize;t++)
 8003e5e:	7b7b      	ldrb	r3, [r7, #13]
 8003e60:	3301      	adds	r3, #1
 8003e62:	737b      	strb	r3, [r7, #13]
 8003e64:	7b7a      	ldrb	r2, [r7, #13]
 8003e66:	7a7b      	ldrb	r3, [r7, #9]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	f4ff af6b 	bcc.w	8003d44 <LCD_ShowChar+0x58>
 8003e6e:	e002      	b.n	8003e76 <LCD_ShowChar+0x18a>
		else return;								//没有的字库
 8003e70:	bf00      	nop
 8003e72:	e000      	b.n	8003e76 <LCD_ShowChar+0x18a>
			if(y>=lcddev.height)return;		//超区域了
 8003e74:	bf00      	nop
			}
		}
	}
}
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd90      	pop	{r4, r7, pc}
 8003e7c:	080068dc 	.word	0x080068dc
 8003e80:	08006d50 	.word	0x08006d50
 8003e84:	08007340 	.word	0x08007340
 8003e88:	0800809c 	.word	0x0800809c
 8003e8c:	0800985c 	.word	0x0800985c
 8003e90:	0800d6b4 	.word	0x0800d6b4
 8003e94:	20000000 	.word	0x20000000
 8003e98:	20000004 	.word	0x20000004
 8003e9c:	20000144 	.word	0x20000144

08003ea0 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{
 8003ea0:	b590      	push	{r4, r7, lr}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	4608      	mov	r0, r1
 8003eaa:	4611      	mov	r1, r2
 8003eac:	461a      	mov	r2, r3
 8003eae:	4623      	mov	r3, r4
 8003eb0:	80fb      	strh	r3, [r7, #6]
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	80bb      	strh	r3, [r7, #4]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	807b      	strh	r3, [r7, #2]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8003ec2:	887a      	ldrh	r2, [r7, #2]
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	807b      	strh	r3, [r7, #2]
	height+=y;
 8003eca:	883a      	ldrh	r2, [r7, #0]
 8003ecc:	88bb      	ldrh	r3, [r7, #4]
 8003ece:	4413      	add	r3, r2
 8003ed0:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8003ed2:	e024      	b.n	8003f1e <LCD_ShowString+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 8003ed4:	88fa      	ldrh	r2, [r7, #6]
 8003ed6:	887b      	ldrh	r3, [r7, #2]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d307      	bcc.n	8003eec <LCD_ShowString+0x4c>
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	80fb      	strh	r3, [r7, #6]
 8003ee0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	88bb      	ldrh	r3, [r7, #4]
 8003ee8:	4413      	add	r3, r2
 8003eea:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 8003eec:	88ba      	ldrh	r2, [r7, #4]
 8003eee:	883b      	ldrh	r3, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d21d      	bcs.n	8003f30 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	781a      	ldrb	r2, [r3, #0]
 8003ef8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003efc:	88b9      	ldrh	r1, [r7, #4]
 8003efe:	88f8      	ldrh	r0, [r7, #6]
 8003f00:	2400      	movs	r4, #0
 8003f02:	9400      	str	r4, [sp, #0]
 8003f04:	f7ff fef2 	bl	8003cec <LCD_ShowChar>
        x+=size/2;
 8003f08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f0c:	085b      	lsrs	r3, r3, #1
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	88fb      	ldrh	r3, [r7, #6]
 8003f14:	4413      	add	r3, r2
 8003f16:	80fb      	strh	r3, [r7, #6]
        p++;
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b7e      	cmp	r3, #126	; 0x7e
 8003f24:	d805      	bhi.n	8003f32 <LCD_ShowString+0x92>
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b1f      	cmp	r3, #31
 8003f2c:	d8d2      	bhi.n	8003ed4 <LCD_ShowString+0x34>
    }
}
 8003f2e:	e000      	b.n	8003f32 <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 8003f30:	bf00      	nop
}
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd90      	pop	{r4, r7, pc}
	...

08003f3c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003f42:	f000 fa71 	bl	8004428 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003f46:	f000 f843 	bl	8003fd0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003f4a:	f7fc ff07 	bl	8000d5c <MX_GPIO_Init>
	MX_FSMC_Init();
 8003f4e:	f7fc fe11 	bl	8000b74 <MX_FSMC_Init>
	MX_USART1_UART_Init();
 8003f52:	f000 f9cd 	bl	80042f0 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	TFTLCD_Init();
 8003f56:	f7fd fca7 	bl	80018a8 <TFTLCD_Init>
	LCD_Clear(WHITE);
 8003f5a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003f5e:	f7ff fe97 	bl	8003c90 <LCD_Clear>
	POINT_COLOR = BLACK;
 8003f62:	4b16      	ldr	r3, [pc, #88]	; (8003fbc <main+0x80>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		LCD_ShowString(30, 30, 400, 48, 48, "STM32F407");
 8003f68:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <main+0x84>)
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	2330      	movs	r3, #48	; 0x30
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	2330      	movs	r3, #48	; 0x30
 8003f72:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003f76:	211e      	movs	r1, #30
 8003f78:	201e      	movs	r0, #30
 8003f7a:	f7ff ff91 	bl	8003ea0 <LCD_ShowString>
		LCD_ShowString(30, 100, 200, 32, 32, "This is a test");
 8003f7e:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <main+0x88>)
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	2320      	movs	r3, #32
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	2320      	movs	r3, #32
 8003f88:	22c8      	movs	r2, #200	; 0xc8
 8003f8a:	2164      	movs	r1, #100	; 0x64
 8003f8c:	201e      	movs	r0, #30
 8003f8e:	f7ff ff87 	bl	8003ea0 <LCD_ShowString>
		LCD_ShowString(30, 150, 200, 32, 32, "Auth:Aaron");
 8003f92:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <main+0x8c>)
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	2320      	movs	r3, #32
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	2320      	movs	r3, #32
 8003f9c:	22c8      	movs	r2, #200	; 0xc8
 8003f9e:	2196      	movs	r1, #150	; 0x96
 8003fa0:	201e      	movs	r0, #30
 8003fa2:	f7ff ff7d 	bl	8003ea0 <LCD_ShowString>
		LCD_ShowString(30, 200, 200, 32, 32, "2021/05/04");
 8003fa6:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <main+0x90>)
 8003fa8:	9301      	str	r3, [sp, #4]
 8003faa:	2320      	movs	r3, #32
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	2320      	movs	r3, #32
 8003fb0:	22c8      	movs	r2, #200	; 0xc8
 8003fb2:	21c8      	movs	r1, #200	; 0xc8
 8003fb4:	201e      	movs	r0, #30
 8003fb6:	f7ff ff73 	bl	8003ea0 <LCD_ShowString>
		LCD_ShowString(30, 30, 400, 48, 48, "STM32F407");
 8003fba:	e7d5      	b.n	8003f68 <main+0x2c>
 8003fbc:	20000000 	.word	0x20000000
 8003fc0:	080068a8 	.word	0x080068a8
 8003fc4:	080068b4 	.word	0x080068b4
 8003fc8:	080068c4 	.word	0x080068c4
 8003fcc:	080068d0 	.word	0x080068d0

08003fd0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b094      	sub	sp, #80	; 0x50
 8003fd4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003fd6:	f107 0320 	add.w	r3, r7, #32
 8003fda:	2230      	movs	r2, #48	; 0x30
 8003fdc:	2100      	movs	r1, #0
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f001 fcf0 	bl	80059c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003fe4:	f107 030c 	add.w	r3, r7, #12
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	609a      	str	r2, [r3, #8]
 8003ff0:	60da      	str	r2, [r3, #12]
 8003ff2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	4b28      	ldr	r3, [pc, #160]	; (800409c <SystemClock_Config+0xcc>)
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	4a27      	ldr	r2, [pc, #156]	; (800409c <SystemClock_Config+0xcc>)
 8003ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004002:	6413      	str	r3, [r2, #64]	; 0x40
 8004004:	4b25      	ldr	r3, [pc, #148]	; (800409c <SystemClock_Config+0xcc>)
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004010:	2300      	movs	r3, #0
 8004012:	607b      	str	r3, [r7, #4]
 8004014:	4b22      	ldr	r3, [pc, #136]	; (80040a0 <SystemClock_Config+0xd0>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a21      	ldr	r2, [pc, #132]	; (80040a0 <SystemClock_Config+0xd0>)
 800401a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	4b1f      	ldr	r3, [pc, #124]	; (80040a0 <SystemClock_Config+0xd0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004028:	607b      	str	r3, [r7, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800402c:	2301      	movs	r3, #1
 800402e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004036:	2302      	movs	r3, #2
 8004038:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800403a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800403e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8004040:	2319      	movs	r3, #25
 8004042:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8004044:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004048:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800404a:	2302      	movs	r3, #2
 800404c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800404e:	2304      	movs	r3, #4
 8004050:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004052:	f107 0320 	add.w	r3, r7, #32
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fd18 	bl	8004a8c <HAL_RCC_OscConfig>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <SystemClock_Config+0x96>
		Error_Handler();
 8004062:	f000 f837 	bl	80040d4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004066:	230f      	movs	r3, #15
 8004068:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800406a:	2302      	movs	r3, #2
 800406c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004072:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004076:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800407c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800407e:	f107 030c 	add.w	r3, r7, #12
 8004082:	2105      	movs	r1, #5
 8004084:	4618      	mov	r0, r3
 8004086:	f000 ff79 	bl	8004f7c <HAL_RCC_ClockConfig>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <SystemClock_Config+0xc4>
		Error_Handler();
 8004090:	f000 f820 	bl	80040d4 <Error_Handler>
	}
}
 8004094:	bf00      	nop
 8004096:	3750      	adds	r7, #80	; 0x50
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40023800 	.word	0x40023800
 80040a0:	40007000 	.word	0x40007000

080040a4 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 80040ac:	bf00      	nop
 80040ae:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <__io_putchar+0x2c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f9      	beq.n	80040ae <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <__io_putchar+0x2c>)
 80040c0:	605a      	str	r2, [r3, #4]

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

	return ch;
 80040c2:	687b      	ldr	r3, [r7, #4]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	40011000 	.word	0x40011000

080040d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040d8:	b672      	cpsid	i
}
 80040da:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80040dc:	e7fe      	b.n	80040dc <Error_Handler+0x8>
	...

080040e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	4b10      	ldr	r3, [pc, #64]	; (800412c <HAL_MspInit+0x4c>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	4a0f      	ldr	r2, [pc, #60]	; (800412c <HAL_MspInit+0x4c>)
 80040f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040f4:	6453      	str	r3, [r2, #68]	; 0x44
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <HAL_MspInit+0x4c>)
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	603b      	str	r3, [r7, #0]
 8004106:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_MspInit+0x4c>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	4a08      	ldr	r2, [pc, #32]	; (800412c <HAL_MspInit+0x4c>)
 800410c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004110:	6413      	str	r3, [r2, #64]	; 0x40
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_MspInit+0x4c>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800

08004130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004134:	e7fe      	b.n	8004134 <NMI_Handler+0x4>

08004136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004136:	b480      	push	{r7}
 8004138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800413a:	e7fe      	b.n	800413a <HardFault_Handler+0x4>

0800413c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004140:	e7fe      	b.n	8004140 <MemManage_Handler+0x4>

08004142 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004142:	b480      	push	{r7}
 8004144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004146:	e7fe      	b.n	8004146 <BusFault_Handler+0x4>

08004148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800414c:	e7fe      	b.n	800414c <UsageFault_Handler+0x4>

0800414e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800414e:	b480      	push	{r7}
 8004150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004152:	bf00      	nop
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004160:	bf00      	nop
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800416a:	b480      	push	{r7}
 800416c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800416e:	bf00      	nop
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800417c:	f000 f9a6 	bl	80044cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004180:	bf00      	nop
 8004182:	bd80      	pop	{r7, pc}

08004184 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	e00a      	b.n	80041ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004196:	f3af 8000 	nop.w
 800419a:	4601      	mov	r1, r0
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	60ba      	str	r2, [r7, #8]
 80041a2:	b2ca      	uxtb	r2, r1
 80041a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	3301      	adds	r3, #1
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	dbf0      	blt.n	8004196 <_read+0x12>
	}

return len;
 80041b4:	687b      	ldr	r3, [r7, #4]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b086      	sub	sp, #24
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	e009      	b.n	80041e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	60ba      	str	r2, [r7, #8]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff ff63 	bl	80040a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	3301      	adds	r3, #1
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	dbf1      	blt.n	80041d0 <_write+0x12>
	}
	return len;
 80041ec:	687b      	ldr	r3, [r7, #4]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <_close>:

int _close(int file)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
	return -1;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004202:	4618      	mov	r0, r3
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800421e:	605a      	str	r2, [r3, #4]
	return 0;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <_isatty>:

int _isatty(int file)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
	return 1;
 8004236:	2301      	movs	r3, #1
}
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
	return 0;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004268:	4a14      	ldr	r2, [pc, #80]	; (80042bc <_sbrk+0x5c>)
 800426a:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <_sbrk+0x60>)
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004274:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <_sbrk+0x64>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d102      	bne.n	8004282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800427c:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <_sbrk+0x64>)
 800427e:	4a12      	ldr	r2, [pc, #72]	; (80042c8 <_sbrk+0x68>)
 8004280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004282:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <_sbrk+0x64>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4413      	add	r3, r2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	429a      	cmp	r2, r3
 800428e:	d207      	bcs.n	80042a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004290:	f001 fb6e 	bl	8005970 <__errno>
 8004294:	4603      	mov	r3, r0
 8004296:	220c      	movs	r2, #12
 8004298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800429a:	f04f 33ff 	mov.w	r3, #4294967295
 800429e:	e009      	b.n	80042b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042a0:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <_sbrk+0x64>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042a6:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <_sbrk+0x64>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	4a05      	ldr	r2, [pc, #20]	; (80042c4 <_sbrk+0x64>)
 80042b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042b2:	68fb      	ldr	r3, [r7, #12]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20020000 	.word	0x20020000
 80042c0:	00000400 	.word	0x00000400
 80042c4:	20000098 	.word	0x20000098
 80042c8:	200001b0 	.word	0x200001b0

080042cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042d0:	4b06      	ldr	r3, [pc, #24]	; (80042ec <SystemInit+0x20>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d6:	4a05      	ldr	r2, [pc, #20]	; (80042ec <SystemInit+0x20>)
 80042d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042e0:	bf00      	nop
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	e000ed00 	.word	0xe000ed00

080042f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80042f4:	4b11      	ldr	r3, [pc, #68]	; (800433c <MX_USART1_UART_Init+0x4c>)
 80042f6:	4a12      	ldr	r2, [pc, #72]	; (8004340 <MX_USART1_UART_Init+0x50>)
 80042f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80042fa:	4b10      	ldr	r3, [pc, #64]	; (800433c <MX_USART1_UART_Init+0x4c>)
 80042fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004302:	4b0e      	ldr	r3, [pc, #56]	; (800433c <MX_USART1_UART_Init+0x4c>)
 8004304:	2200      	movs	r2, #0
 8004306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <MX_USART1_UART_Init+0x4c>)
 800430a:	2200      	movs	r2, #0
 800430c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800430e:	4b0b      	ldr	r3, [pc, #44]	; (800433c <MX_USART1_UART_Init+0x4c>)
 8004310:	2200      	movs	r2, #0
 8004312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <MX_USART1_UART_Init+0x4c>)
 8004316:	220c      	movs	r2, #12
 8004318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800431a:	4b08      	ldr	r3, [pc, #32]	; (800433c <MX_USART1_UART_Init+0x4c>)
 800431c:	2200      	movs	r2, #0
 800431e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004320:	4b06      	ldr	r3, [pc, #24]	; (800433c <MX_USART1_UART_Init+0x4c>)
 8004322:	2200      	movs	r2, #0
 8004324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004326:	4805      	ldr	r0, [pc, #20]	; (800433c <MX_USART1_UART_Init+0x4c>)
 8004328:	f001 f83c 	bl	80053a4 <HAL_UART_Init>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004332:	f7ff fecf 	bl	80040d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20000154 	.word	0x20000154
 8004340:	40011000 	.word	0x40011000

08004344 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800434c:	f107 0314 	add.w	r3, r7, #20
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	605a      	str	r2, [r3, #4]
 8004356:	609a      	str	r2, [r3, #8]
 8004358:	60da      	str	r2, [r3, #12]
 800435a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a19      	ldr	r2, [pc, #100]	; (80043c8 <HAL_UART_MspInit+0x84>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d12c      	bne.n	80043c0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004366:	2300      	movs	r3, #0
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	4b18      	ldr	r3, [pc, #96]	; (80043cc <HAL_UART_MspInit+0x88>)
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	4a17      	ldr	r2, [pc, #92]	; (80043cc <HAL_UART_MspInit+0x88>)
 8004370:	f043 0310 	orr.w	r3, r3, #16
 8004374:	6453      	str	r3, [r2, #68]	; 0x44
 8004376:	4b15      	ldr	r3, [pc, #84]	; (80043cc <HAL_UART_MspInit+0x88>)
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	f003 0310 	and.w	r3, r3, #16
 800437e:	613b      	str	r3, [r7, #16]
 8004380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	4b11      	ldr	r3, [pc, #68]	; (80043cc <HAL_UART_MspInit+0x88>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	4a10      	ldr	r2, [pc, #64]	; (80043cc <HAL_UART_MspInit+0x88>)
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	6313      	str	r3, [r2, #48]	; 0x30
 8004392:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <HAL_UART_MspInit+0x88>)
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800439e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80043a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a4:	2302      	movs	r3, #2
 80043a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ac:	2303      	movs	r3, #3
 80043ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043b0:	2307      	movs	r3, #7
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043b4:	f107 0314 	add.w	r3, r7, #20
 80043b8:	4619      	mov	r1, r3
 80043ba:	4805      	ldr	r0, [pc, #20]	; (80043d0 <HAL_UART_MspInit+0x8c>)
 80043bc:	f000 f9b0 	bl	8004720 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80043c0:	bf00      	nop
 80043c2:	3728      	adds	r7, #40	; 0x28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40011000 	.word	0x40011000
 80043cc:	40023800 	.word	0x40023800
 80043d0:	40020000 	.word	0x40020000

080043d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80043d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800440c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043d8:	480d      	ldr	r0, [pc, #52]	; (8004410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043da:	490e      	ldr	r1, [pc, #56]	; (8004414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043dc:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043e0:	e002      	b.n	80043e8 <LoopCopyDataInit>

080043e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043e6:	3304      	adds	r3, #4

080043e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043ec:	d3f9      	bcc.n	80043e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ee:	4a0b      	ldr	r2, [pc, #44]	; (800441c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043f0:	4c0b      	ldr	r4, [pc, #44]	; (8004420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80043f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043f4:	e001      	b.n	80043fa <LoopFillZerobss>

080043f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043f8:	3204      	adds	r2, #4

080043fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043fc:	d3fb      	bcc.n	80043f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043fe:	f7ff ff65 	bl	80042cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004402:	f001 fabb 	bl	800597c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004406:	f7ff fd99 	bl	8003f3c <main>
  bx  lr    
 800440a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800440c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004414:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004418:	08013674 	.word	0x08013674
  ldr r2, =_sbss
 800441c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004420:	200001ac 	.word	0x200001ac

08004424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004424:	e7fe      	b.n	8004424 <ADC_IRQHandler>
	...

08004428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800442c:	4b0e      	ldr	r3, [pc, #56]	; (8004468 <HAL_Init+0x40>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a0d      	ldr	r2, [pc, #52]	; (8004468 <HAL_Init+0x40>)
 8004432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_Init+0x40>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a0a      	ldr	r2, [pc, #40]	; (8004468 <HAL_Init+0x40>)
 800443e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004444:	4b08      	ldr	r3, [pc, #32]	; (8004468 <HAL_Init+0x40>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a07      	ldr	r2, [pc, #28]	; (8004468 <HAL_Init+0x40>)
 800444a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004450:	2003      	movs	r0, #3
 8004452:	f000 f931 	bl	80046b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004456:	2000      	movs	r0, #0
 8004458:	f000 f808 	bl	800446c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800445c:	f7ff fe40 	bl	80040e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40023c00 	.word	0x40023c00

0800446c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004474:	4b12      	ldr	r3, [pc, #72]	; (80044c0 <HAL_InitTick+0x54>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	4b12      	ldr	r3, [pc, #72]	; (80044c4 <HAL_InitTick+0x58>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	4619      	mov	r1, r3
 800447e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004482:	fbb3 f3f1 	udiv	r3, r3, r1
 8004486:	fbb2 f3f3 	udiv	r3, r2, r3
 800448a:	4618      	mov	r0, r3
 800448c:	f000 f93b 	bl	8004706 <HAL_SYSTICK_Config>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e00e      	b.n	80044b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b0f      	cmp	r3, #15
 800449e:	d80a      	bhi.n	80044b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044a0:	2200      	movs	r2, #0
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	f04f 30ff 	mov.w	r0, #4294967295
 80044a8:	f000 f911 	bl	80046ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044ac:	4a06      	ldr	r2, [pc, #24]	; (80044c8 <HAL_InitTick+0x5c>)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20000008 	.word	0x20000008
 80044c4:	20000010 	.word	0x20000010
 80044c8:	2000000c 	.word	0x2000000c

080044cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044d0:	4b06      	ldr	r3, [pc, #24]	; (80044ec <HAL_IncTick+0x20>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <HAL_IncTick+0x24>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4413      	add	r3, r2
 80044dc:	4a04      	ldr	r2, [pc, #16]	; (80044f0 <HAL_IncTick+0x24>)
 80044de:	6013      	str	r3, [r2, #0]
}
 80044e0:	bf00      	nop
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	20000010 	.word	0x20000010
 80044f0:	20000198 	.word	0x20000198

080044f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return uwTick;
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <HAL_GetTick+0x14>)
 80044fa:	681b      	ldr	r3, [r3, #0]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000198 	.word	0x20000198

0800450c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004514:	f7ff ffee 	bl	80044f4 <HAL_GetTick>
 8004518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d005      	beq.n	8004532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <HAL_Delay+0x44>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004532:	bf00      	nop
 8004534:	f7ff ffde 	bl	80044f4 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	429a      	cmp	r2, r3
 8004542:	d8f7      	bhi.n	8004534 <HAL_Delay+0x28>
  {
  }
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000010 	.word	0x20000010

08004554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004564:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <__NVIC_SetPriorityGrouping+0x44>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004570:	4013      	ands	r3, r2
 8004572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800457c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004586:	4a04      	ldr	r2, [pc, #16]	; (8004598 <__NVIC_SetPriorityGrouping+0x44>)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	60d3      	str	r3, [r2, #12]
}
 800458c:	bf00      	nop
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	e000ed00 	.word	0xe000ed00

0800459c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <__NVIC_GetPriorityGrouping+0x18>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	0a1b      	lsrs	r3, r3, #8
 80045a6:	f003 0307 	and.w	r3, r3, #7
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	e000ed00 	.word	0xe000ed00

080045b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	6039      	str	r1, [r7, #0]
 80045c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	db0a      	blt.n	80045e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	490c      	ldr	r1, [pc, #48]	; (8004604 <__NVIC_SetPriority+0x4c>)
 80045d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d6:	0112      	lsls	r2, r2, #4
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	440b      	add	r3, r1
 80045dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045e0:	e00a      	b.n	80045f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	4908      	ldr	r1, [pc, #32]	; (8004608 <__NVIC_SetPriority+0x50>)
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	3b04      	subs	r3, #4
 80045f0:	0112      	lsls	r2, r2, #4
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	440b      	add	r3, r1
 80045f6:	761a      	strb	r2, [r3, #24]
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	e000e100 	.word	0xe000e100
 8004608:	e000ed00 	.word	0xe000ed00

0800460c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800460c:	b480      	push	{r7}
 800460e:	b089      	sub	sp, #36	; 0x24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f1c3 0307 	rsb	r3, r3, #7
 8004626:	2b04      	cmp	r3, #4
 8004628:	bf28      	it	cs
 800462a:	2304      	movcs	r3, #4
 800462c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3304      	adds	r3, #4
 8004632:	2b06      	cmp	r3, #6
 8004634:	d902      	bls.n	800463c <NVIC_EncodePriority+0x30>
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	3b03      	subs	r3, #3
 800463a:	e000      	b.n	800463e <NVIC_EncodePriority+0x32>
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004640:	f04f 32ff 	mov.w	r2, #4294967295
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43da      	mvns	r2, r3
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	401a      	ands	r2, r3
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004654:	f04f 31ff 	mov.w	r1, #4294967295
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	fa01 f303 	lsl.w	r3, r1, r3
 800465e:	43d9      	mvns	r1, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004664:	4313      	orrs	r3, r2
         );
}
 8004666:	4618      	mov	r0, r3
 8004668:	3724      	adds	r7, #36	; 0x24
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
	...

08004674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3b01      	subs	r3, #1
 8004680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004684:	d301      	bcc.n	800468a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004686:	2301      	movs	r3, #1
 8004688:	e00f      	b.n	80046aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800468a:	4a0a      	ldr	r2, [pc, #40]	; (80046b4 <SysTick_Config+0x40>)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3b01      	subs	r3, #1
 8004690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004692:	210f      	movs	r1, #15
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	f7ff ff8e 	bl	80045b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <SysTick_Config+0x40>)
 800469e:	2200      	movs	r2, #0
 80046a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046a2:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <SysTick_Config+0x40>)
 80046a4:	2207      	movs	r2, #7
 80046a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	e000e010 	.word	0xe000e010

080046b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff ff47 	bl	8004554 <__NVIC_SetPriorityGrouping>
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b086      	sub	sp, #24
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	4603      	mov	r3, r0
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
 80046da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046e0:	f7ff ff5c 	bl	800459c <__NVIC_GetPriorityGrouping>
 80046e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	6978      	ldr	r0, [r7, #20]
 80046ec:	f7ff ff8e 	bl	800460c <NVIC_EncodePriority>
 80046f0:	4602      	mov	r2, r0
 80046f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046f6:	4611      	mov	r1, r2
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff ff5d 	bl	80045b8 <__NVIC_SetPriority>
}
 80046fe:	bf00      	nop
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff ffb0 	bl	8004674 <SysTick_Config>
 8004714:	4603      	mov	r3, r0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004720:	b480      	push	{r7}
 8004722:	b089      	sub	sp, #36	; 0x24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800472e:	2300      	movs	r3, #0
 8004730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004732:	2300      	movs	r3, #0
 8004734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004736:	2300      	movs	r3, #0
 8004738:	61fb      	str	r3, [r7, #28]
 800473a:	e16b      	b.n	8004a14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800473c:	2201      	movs	r2, #1
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4013      	ands	r3, r2
 800474e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	429a      	cmp	r2, r3
 8004756:	f040 815a 	bne.w	8004a0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b01      	cmp	r3, #1
 8004764:	d005      	beq.n	8004772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800476e:	2b02      	cmp	r3, #2
 8004770:	d130      	bne.n	80047d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	2203      	movs	r2, #3
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43db      	mvns	r3, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	4013      	ands	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4313      	orrs	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047a8:	2201      	movs	r2, #1
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	43db      	mvns	r3, r3
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	4013      	ands	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	091b      	lsrs	r3, r3, #4
 80047be:	f003 0201 	and.w	r2, r3, #1
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d017      	beq.n	8004810 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	2203      	movs	r2, #3
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4313      	orrs	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d123      	bne.n	8004864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	08da      	lsrs	r2, r3, #3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3208      	adds	r2, #8
 8004824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	220f      	movs	r2, #15
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4313      	orrs	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	08da      	lsrs	r2, r3, #3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3208      	adds	r2, #8
 800485e:	69b9      	ldr	r1, [r7, #24]
 8004860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	2203      	movs	r2, #3
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4013      	ands	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f003 0203 	and.w	r2, r3, #3
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4313      	orrs	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80b4 	beq.w	8004a0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	4b60      	ldr	r3, [pc, #384]	; (8004a2c <HAL_GPIO_Init+0x30c>)
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	4a5f      	ldr	r2, [pc, #380]	; (8004a2c <HAL_GPIO_Init+0x30c>)
 80048b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048b4:	6453      	str	r3, [r2, #68]	; 0x44
 80048b6:	4b5d      	ldr	r3, [pc, #372]	; (8004a2c <HAL_GPIO_Init+0x30c>)
 80048b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048c2:	4a5b      	ldr	r2, [pc, #364]	; (8004a30 <HAL_GPIO_Init+0x310>)
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	089b      	lsrs	r3, r3, #2
 80048c8:	3302      	adds	r3, #2
 80048ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	220f      	movs	r2, #15
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43db      	mvns	r3, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4013      	ands	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a52      	ldr	r2, [pc, #328]	; (8004a34 <HAL_GPIO_Init+0x314>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d02b      	beq.n	8004946 <HAL_GPIO_Init+0x226>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a51      	ldr	r2, [pc, #324]	; (8004a38 <HAL_GPIO_Init+0x318>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d025      	beq.n	8004942 <HAL_GPIO_Init+0x222>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a50      	ldr	r2, [pc, #320]	; (8004a3c <HAL_GPIO_Init+0x31c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01f      	beq.n	800493e <HAL_GPIO_Init+0x21e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a4f      	ldr	r2, [pc, #316]	; (8004a40 <HAL_GPIO_Init+0x320>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d019      	beq.n	800493a <HAL_GPIO_Init+0x21a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a4e      	ldr	r2, [pc, #312]	; (8004a44 <HAL_GPIO_Init+0x324>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <HAL_GPIO_Init+0x216>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a4d      	ldr	r2, [pc, #308]	; (8004a48 <HAL_GPIO_Init+0x328>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00d      	beq.n	8004932 <HAL_GPIO_Init+0x212>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a4c      	ldr	r2, [pc, #304]	; (8004a4c <HAL_GPIO_Init+0x32c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d007      	beq.n	800492e <HAL_GPIO_Init+0x20e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a4b      	ldr	r2, [pc, #300]	; (8004a50 <HAL_GPIO_Init+0x330>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d101      	bne.n	800492a <HAL_GPIO_Init+0x20a>
 8004926:	2307      	movs	r3, #7
 8004928:	e00e      	b.n	8004948 <HAL_GPIO_Init+0x228>
 800492a:	2308      	movs	r3, #8
 800492c:	e00c      	b.n	8004948 <HAL_GPIO_Init+0x228>
 800492e:	2306      	movs	r3, #6
 8004930:	e00a      	b.n	8004948 <HAL_GPIO_Init+0x228>
 8004932:	2305      	movs	r3, #5
 8004934:	e008      	b.n	8004948 <HAL_GPIO_Init+0x228>
 8004936:	2304      	movs	r3, #4
 8004938:	e006      	b.n	8004948 <HAL_GPIO_Init+0x228>
 800493a:	2303      	movs	r3, #3
 800493c:	e004      	b.n	8004948 <HAL_GPIO_Init+0x228>
 800493e:	2302      	movs	r3, #2
 8004940:	e002      	b.n	8004948 <HAL_GPIO_Init+0x228>
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <HAL_GPIO_Init+0x228>
 8004946:	2300      	movs	r3, #0
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	f002 0203 	and.w	r2, r2, #3
 800494e:	0092      	lsls	r2, r2, #2
 8004950:	4093      	lsls	r3, r2
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4313      	orrs	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004958:	4935      	ldr	r1, [pc, #212]	; (8004a30 <HAL_GPIO_Init+0x310>)
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	089b      	lsrs	r3, r3, #2
 800495e:	3302      	adds	r3, #2
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004966:	4b3b      	ldr	r3, [pc, #236]	; (8004a54 <HAL_GPIO_Init+0x334>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	43db      	mvns	r3, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4013      	ands	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	4313      	orrs	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800498a:	4a32      	ldr	r2, [pc, #200]	; (8004a54 <HAL_GPIO_Init+0x334>)
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004990:	4b30      	ldr	r3, [pc, #192]	; (8004a54 <HAL_GPIO_Init+0x334>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	43db      	mvns	r3, r3
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	4013      	ands	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049b4:	4a27      	ldr	r2, [pc, #156]	; (8004a54 <HAL_GPIO_Init+0x334>)
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049ba:	4b26      	ldr	r3, [pc, #152]	; (8004a54 <HAL_GPIO_Init+0x334>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	43db      	mvns	r3, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4013      	ands	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	4313      	orrs	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049de:	4a1d      	ldr	r2, [pc, #116]	; (8004a54 <HAL_GPIO_Init+0x334>)
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049e4:	4b1b      	ldr	r3, [pc, #108]	; (8004a54 <HAL_GPIO_Init+0x334>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	43db      	mvns	r3, r3
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	4013      	ands	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a08:	4a12      	ldr	r2, [pc, #72]	; (8004a54 <HAL_GPIO_Init+0x334>)
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	3301      	adds	r3, #1
 8004a12:	61fb      	str	r3, [r7, #28]
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	2b0f      	cmp	r3, #15
 8004a18:	f67f ae90 	bls.w	800473c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a1c:	bf00      	nop
 8004a1e:	bf00      	nop
 8004a20:	3724      	adds	r7, #36	; 0x24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	40013800 	.word	0x40013800
 8004a34:	40020000 	.word	0x40020000
 8004a38:	40020400 	.word	0x40020400
 8004a3c:	40020800 	.word	0x40020800
 8004a40:	40020c00 	.word	0x40020c00
 8004a44:	40021000 	.word	0x40021000
 8004a48:	40021400 	.word	0x40021400
 8004a4c:	40021800 	.word	0x40021800
 8004a50:	40021c00 	.word	0x40021c00
 8004a54:	40013c00 	.word	0x40013c00

08004a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	807b      	strh	r3, [r7, #2]
 8004a64:	4613      	mov	r3, r2
 8004a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a68:	787b      	ldrb	r3, [r7, #1]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a6e:	887a      	ldrh	r2, [r7, #2]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a74:	e003      	b.n	8004a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a76:	887b      	ldrh	r3, [r7, #2]
 8004a78:	041a      	lsls	r2, r3, #16
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	619a      	str	r2, [r3, #24]
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
	...

08004a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e264      	b.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d075      	beq.n	8004b96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aaa:	4ba3      	ldr	r3, [pc, #652]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 030c 	and.w	r3, r3, #12
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d00c      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ab6:	4ba0      	ldr	r3, [pc, #640]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d112      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ac2:	4b9d      	ldr	r3, [pc, #628]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ace:	d10b      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad0:	4b99      	ldr	r3, [pc, #612]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d05b      	beq.n	8004b94 <HAL_RCC_OscConfig+0x108>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d157      	bne.n	8004b94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e23f      	b.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af0:	d106      	bne.n	8004b00 <HAL_RCC_OscConfig+0x74>
 8004af2:	4b91      	ldr	r3, [pc, #580]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a90      	ldr	r2, [pc, #576]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	e01d      	b.n	8004b3c <HAL_RCC_OscConfig+0xb0>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b08:	d10c      	bne.n	8004b24 <HAL_RCC_OscConfig+0x98>
 8004b0a:	4b8b      	ldr	r3, [pc, #556]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a8a      	ldr	r2, [pc, #552]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	4b88      	ldr	r3, [pc, #544]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a87      	ldr	r2, [pc, #540]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	e00b      	b.n	8004b3c <HAL_RCC_OscConfig+0xb0>
 8004b24:	4b84      	ldr	r3, [pc, #528]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a83      	ldr	r2, [pc, #524]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	4b81      	ldr	r3, [pc, #516]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a80      	ldr	r2, [pc, #512]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d013      	beq.n	8004b6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b44:	f7ff fcd6 	bl	80044f4 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b4c:	f7ff fcd2 	bl	80044f4 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b64      	cmp	r3, #100	; 0x64
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e204      	b.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5e:	4b76      	ldr	r3, [pc, #472]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0f0      	beq.n	8004b4c <HAL_RCC_OscConfig+0xc0>
 8004b6a:	e014      	b.n	8004b96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6c:	f7ff fcc2 	bl	80044f4 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b74:	f7ff fcbe 	bl	80044f4 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b64      	cmp	r3, #100	; 0x64
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e1f0      	b.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b86:	4b6c      	ldr	r3, [pc, #432]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f0      	bne.n	8004b74 <HAL_RCC_OscConfig+0xe8>
 8004b92:	e000      	b.n	8004b96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d063      	beq.n	8004c6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ba2:	4b65      	ldr	r3, [pc, #404]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00b      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bae:	4b62      	ldr	r3, [pc, #392]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d11c      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bba:	4b5f      	ldr	r3, [pc, #380]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d116      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bc6:	4b5c      	ldr	r3, [pc, #368]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <HAL_RCC_OscConfig+0x152>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d001      	beq.n	8004bde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e1c4      	b.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bde:	4b56      	ldr	r3, [pc, #344]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	4952      	ldr	r1, [pc, #328]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bf2:	e03a      	b.n	8004c6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d020      	beq.n	8004c3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bfc:	4b4f      	ldr	r3, [pc, #316]	; (8004d3c <HAL_RCC_OscConfig+0x2b0>)
 8004bfe:	2201      	movs	r2, #1
 8004c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c02:	f7ff fc77 	bl	80044f4 <HAL_GetTick>
 8004c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c08:	e008      	b.n	8004c1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c0a:	f7ff fc73 	bl	80044f4 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e1a5      	b.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1c:	4b46      	ldr	r3, [pc, #280]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0f0      	beq.n	8004c0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c28:	4b43      	ldr	r3, [pc, #268]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	4940      	ldr	r1, [pc, #256]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	600b      	str	r3, [r1, #0]
 8004c3c:	e015      	b.n	8004c6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c3e:	4b3f      	ldr	r3, [pc, #252]	; (8004d3c <HAL_RCC_OscConfig+0x2b0>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c44:	f7ff fc56 	bl	80044f4 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c4c:	f7ff fc52 	bl	80044f4 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e184      	b.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c5e:	4b36      	ldr	r3, [pc, #216]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d030      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d016      	beq.n	8004cac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c7e:	4b30      	ldr	r3, [pc, #192]	; (8004d40 <HAL_RCC_OscConfig+0x2b4>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c84:	f7ff fc36 	bl	80044f4 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c8c:	f7ff fc32 	bl	80044f4 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e164      	b.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c9e:	4b26      	ldr	r3, [pc, #152]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCC_OscConfig+0x200>
 8004caa:	e015      	b.n	8004cd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cac:	4b24      	ldr	r3, [pc, #144]	; (8004d40 <HAL_RCC_OscConfig+0x2b4>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cb2:	f7ff fc1f 	bl	80044f4 <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb8:	e008      	b.n	8004ccc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cba:	f7ff fc1b 	bl	80044f4 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e14d      	b.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ccc:	4b1a      	ldr	r3, [pc, #104]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1f0      	bne.n	8004cba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80a0 	beq.w	8004e26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cea:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10f      	bne.n	8004d16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	4b0f      	ldr	r3, [pc, #60]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	4a0e      	ldr	r2, [pc, #56]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d04:	6413      	str	r3, [r2, #64]	; 0x40
 8004d06:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <HAL_RCC_OscConfig+0x2ac>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d12:	2301      	movs	r3, #1
 8004d14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d16:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <HAL_RCC_OscConfig+0x2b8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d121      	bne.n	8004d66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d22:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <HAL_RCC_OscConfig+0x2b8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a07      	ldr	r2, [pc, #28]	; (8004d44 <HAL_RCC_OscConfig+0x2b8>)
 8004d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d2e:	f7ff fbe1 	bl	80044f4 <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d34:	e011      	b.n	8004d5a <HAL_RCC_OscConfig+0x2ce>
 8004d36:	bf00      	nop
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	42470000 	.word	0x42470000
 8004d40:	42470e80 	.word	0x42470e80
 8004d44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d48:	f7ff fbd4 	bl	80044f4 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e106      	b.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5a:	4b85      	ldr	r3, [pc, #532]	; (8004f70 <HAL_RCC_OscConfig+0x4e4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d106      	bne.n	8004d7c <HAL_RCC_OscConfig+0x2f0>
 8004d6e:	4b81      	ldr	r3, [pc, #516]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d72:	4a80      	ldr	r2, [pc, #512]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004d74:	f043 0301 	orr.w	r3, r3, #1
 8004d78:	6713      	str	r3, [r2, #112]	; 0x70
 8004d7a:	e01c      	b.n	8004db6 <HAL_RCC_OscConfig+0x32a>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	2b05      	cmp	r3, #5
 8004d82:	d10c      	bne.n	8004d9e <HAL_RCC_OscConfig+0x312>
 8004d84:	4b7b      	ldr	r3, [pc, #492]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d88:	4a7a      	ldr	r2, [pc, #488]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004d8a:	f043 0304 	orr.w	r3, r3, #4
 8004d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d90:	4b78      	ldr	r3, [pc, #480]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d94:	4a77      	ldr	r2, [pc, #476]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d9c:	e00b      	b.n	8004db6 <HAL_RCC_OscConfig+0x32a>
 8004d9e:	4b75      	ldr	r3, [pc, #468]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	4a74      	ldr	r2, [pc, #464]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004da4:	f023 0301 	bic.w	r3, r3, #1
 8004da8:	6713      	str	r3, [r2, #112]	; 0x70
 8004daa:	4b72      	ldr	r3, [pc, #456]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	4a71      	ldr	r2, [pc, #452]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004db0:	f023 0304 	bic.w	r3, r3, #4
 8004db4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d015      	beq.n	8004dea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dbe:	f7ff fb99 	bl	80044f4 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc4:	e00a      	b.n	8004ddc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dc6:	f7ff fb95 	bl	80044f4 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e0c5      	b.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ddc:	4b65      	ldr	r3, [pc, #404]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0ee      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x33a>
 8004de8:	e014      	b.n	8004e14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dea:	f7ff fb83 	bl	80044f4 <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004df0:	e00a      	b.n	8004e08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004df2:	f7ff fb7f 	bl	80044f4 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e0af      	b.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e08:	4b5a      	ldr	r3, [pc, #360]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1ee      	bne.n	8004df2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e14:	7dfb      	ldrb	r3, [r7, #23]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d105      	bne.n	8004e26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e1a:	4b56      	ldr	r3, [pc, #344]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	4a55      	ldr	r2, [pc, #340]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 809b 	beq.w	8004f66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e30:	4b50      	ldr	r3, [pc, #320]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 030c 	and.w	r3, r3, #12
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d05c      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d141      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e44:	4b4c      	ldr	r3, [pc, #304]	; (8004f78 <HAL_RCC_OscConfig+0x4ec>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e4a:	f7ff fb53 	bl	80044f4 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e50:	e008      	b.n	8004e64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e52:	f7ff fb4f 	bl	80044f4 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e081      	b.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e64:	4b43      	ldr	r3, [pc, #268]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1f0      	bne.n	8004e52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69da      	ldr	r2, [r3, #28]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	019b      	lsls	r3, r3, #6
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e86:	085b      	lsrs	r3, r3, #1
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	041b      	lsls	r3, r3, #16
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	061b      	lsls	r3, r3, #24
 8004e94:	4937      	ldr	r1, [pc, #220]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e9a:	4b37      	ldr	r3, [pc, #220]	; (8004f78 <HAL_RCC_OscConfig+0x4ec>)
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea0:	f7ff fb28 	bl	80044f4 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea8:	f7ff fb24 	bl	80044f4 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e056      	b.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eba:	4b2e      	ldr	r3, [pc, #184]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x41c>
 8004ec6:	e04e      	b.n	8004f66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ec8:	4b2b      	ldr	r3, [pc, #172]	; (8004f78 <HAL_RCC_OscConfig+0x4ec>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ece:	f7ff fb11 	bl	80044f4 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed6:	f7ff fb0d 	bl	80044f4 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e03f      	b.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee8:	4b22      	ldr	r3, [pc, #136]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1f0      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x44a>
 8004ef4:	e037      	b.n	8004f66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e032      	b.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f02:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <HAL_RCC_OscConfig+0x4e8>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d028      	beq.n	8004f62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d121      	bne.n	8004f62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d11a      	bne.n	8004f62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f32:	4013      	ands	r3, r2
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d111      	bne.n	8004f62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	085b      	lsrs	r3, r3, #1
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d107      	bne.n	8004f62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d001      	beq.n	8004f66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40007000 	.word	0x40007000
 8004f74:	40023800 	.word	0x40023800
 8004f78:	42470060 	.word	0x42470060

08004f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0cc      	b.n	800512a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f90:	4b68      	ldr	r3, [pc, #416]	; (8005134 <HAL_RCC_ClockConfig+0x1b8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d90c      	bls.n	8004fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f9e:	4b65      	ldr	r3, [pc, #404]	; (8005134 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa6:	4b63      	ldr	r3, [pc, #396]	; (8005134 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d001      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e0b8      	b.n	800512a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d020      	beq.n	8005006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fd0:	4b59      	ldr	r3, [pc, #356]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	4a58      	ldr	r2, [pc, #352]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d005      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fe8:	4b53      	ldr	r3, [pc, #332]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	4a52      	ldr	r2, [pc, #328]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 8004fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ff4:	4b50      	ldr	r3, [pc, #320]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	494d      	ldr	r1, [pc, #308]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	4313      	orrs	r3, r2
 8005004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d044      	beq.n	800509c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d107      	bne.n	800502a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800501a:	4b47      	ldr	r3, [pc, #284]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d119      	bne.n	800505a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e07f      	b.n	800512a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d003      	beq.n	800503a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005036:	2b03      	cmp	r3, #3
 8005038:	d107      	bne.n	800504a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800503a:	4b3f      	ldr	r3, [pc, #252]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e06f      	b.n	800512a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800504a:	4b3b      	ldr	r3, [pc, #236]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e067      	b.n	800512a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800505a:	4b37      	ldr	r3, [pc, #220]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f023 0203 	bic.w	r2, r3, #3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4934      	ldr	r1, [pc, #208]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 8005068:	4313      	orrs	r3, r2
 800506a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800506c:	f7ff fa42 	bl	80044f4 <HAL_GetTick>
 8005070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005072:	e00a      	b.n	800508a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005074:	f7ff fa3e 	bl	80044f4 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e04f      	b.n	800512a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508a:	4b2b      	ldr	r3, [pc, #172]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 020c 	and.w	r2, r3, #12
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	429a      	cmp	r2, r3
 800509a:	d1eb      	bne.n	8005074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800509c:	4b25      	ldr	r3, [pc, #148]	; (8005134 <HAL_RCC_ClockConfig+0x1b8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d20c      	bcs.n	80050c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050aa:	4b22      	ldr	r3, [pc, #136]	; (8005134 <HAL_RCC_ClockConfig+0x1b8>)
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b2:	4b20      	ldr	r3, [pc, #128]	; (8005134 <HAL_RCC_ClockConfig+0x1b8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d001      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e032      	b.n	800512a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d008      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050d0:	4b19      	ldr	r3, [pc, #100]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	4916      	ldr	r1, [pc, #88]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d009      	beq.n	8005102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050ee:	4b12      	ldr	r3, [pc, #72]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	490e      	ldr	r1, [pc, #56]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005102:	f000 f821 	bl	8005148 <HAL_RCC_GetSysClockFreq>
 8005106:	4602      	mov	r2, r0
 8005108:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	490a      	ldr	r1, [pc, #40]	; (800513c <HAL_RCC_ClockConfig+0x1c0>)
 8005114:	5ccb      	ldrb	r3, [r1, r3]
 8005116:	fa22 f303 	lsr.w	r3, r2, r3
 800511a:	4a09      	ldr	r2, [pc, #36]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 800511c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800511e:	4b09      	ldr	r3, [pc, #36]	; (8005144 <HAL_RCC_ClockConfig+0x1c8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff f9a2 	bl	800446c <HAL_InitTick>

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40023c00 	.word	0x40023c00
 8005138:	40023800 	.word	0x40023800
 800513c:	080135b4 	.word	0x080135b4
 8005140:	20000008 	.word	0x20000008
 8005144:	2000000c 	.word	0x2000000c

08005148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005148:	b5b0      	push	{r4, r5, r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800514e:	2100      	movs	r1, #0
 8005150:	6079      	str	r1, [r7, #4]
 8005152:	2100      	movs	r1, #0
 8005154:	60f9      	str	r1, [r7, #12]
 8005156:	2100      	movs	r1, #0
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800515a:	2100      	movs	r1, #0
 800515c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800515e:	4952      	ldr	r1, [pc, #328]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005160:	6889      	ldr	r1, [r1, #8]
 8005162:	f001 010c 	and.w	r1, r1, #12
 8005166:	2908      	cmp	r1, #8
 8005168:	d00d      	beq.n	8005186 <HAL_RCC_GetSysClockFreq+0x3e>
 800516a:	2908      	cmp	r1, #8
 800516c:	f200 8094 	bhi.w	8005298 <HAL_RCC_GetSysClockFreq+0x150>
 8005170:	2900      	cmp	r1, #0
 8005172:	d002      	beq.n	800517a <HAL_RCC_GetSysClockFreq+0x32>
 8005174:	2904      	cmp	r1, #4
 8005176:	d003      	beq.n	8005180 <HAL_RCC_GetSysClockFreq+0x38>
 8005178:	e08e      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800517a:	4b4c      	ldr	r3, [pc, #304]	; (80052ac <HAL_RCC_GetSysClockFreq+0x164>)
 800517c:	60bb      	str	r3, [r7, #8]
       break;
 800517e:	e08e      	b.n	800529e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005180:	4b4b      	ldr	r3, [pc, #300]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x168>)
 8005182:	60bb      	str	r3, [r7, #8]
      break;
 8005184:	e08b      	b.n	800529e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005186:	4948      	ldr	r1, [pc, #288]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005188:	6849      	ldr	r1, [r1, #4]
 800518a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800518e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005190:	4945      	ldr	r1, [pc, #276]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005192:	6849      	ldr	r1, [r1, #4]
 8005194:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005198:	2900      	cmp	r1, #0
 800519a:	d024      	beq.n	80051e6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800519c:	4942      	ldr	r1, [pc, #264]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800519e:	6849      	ldr	r1, [r1, #4]
 80051a0:	0989      	lsrs	r1, r1, #6
 80051a2:	4608      	mov	r0, r1
 80051a4:	f04f 0100 	mov.w	r1, #0
 80051a8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80051ac:	f04f 0500 	mov.w	r5, #0
 80051b0:	ea00 0204 	and.w	r2, r0, r4
 80051b4:	ea01 0305 	and.w	r3, r1, r5
 80051b8:	493d      	ldr	r1, [pc, #244]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80051ba:	fb01 f003 	mul.w	r0, r1, r3
 80051be:	2100      	movs	r1, #0
 80051c0:	fb01 f102 	mul.w	r1, r1, r2
 80051c4:	1844      	adds	r4, r0, r1
 80051c6:	493a      	ldr	r1, [pc, #232]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80051c8:	fba2 0101 	umull	r0, r1, r2, r1
 80051cc:	1863      	adds	r3, r4, r1
 80051ce:	4619      	mov	r1, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	461a      	mov	r2, r3
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	f7fb fb50 	bl	800087c <__aeabi_uldivmod>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4613      	mov	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	e04a      	b.n	800527c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e6:	4b30      	ldr	r3, [pc, #192]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	099b      	lsrs	r3, r3, #6
 80051ec:	461a      	mov	r2, r3
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051f6:	f04f 0100 	mov.w	r1, #0
 80051fa:	ea02 0400 	and.w	r4, r2, r0
 80051fe:	ea03 0501 	and.w	r5, r3, r1
 8005202:	4620      	mov	r0, r4
 8005204:	4629      	mov	r1, r5
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	014b      	lsls	r3, r1, #5
 8005210:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005214:	0142      	lsls	r2, r0, #5
 8005216:	4610      	mov	r0, r2
 8005218:	4619      	mov	r1, r3
 800521a:	1b00      	subs	r0, r0, r4
 800521c:	eb61 0105 	sbc.w	r1, r1, r5
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	018b      	lsls	r3, r1, #6
 800522a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800522e:	0182      	lsls	r2, r0, #6
 8005230:	1a12      	subs	r2, r2, r0
 8005232:	eb63 0301 	sbc.w	r3, r3, r1
 8005236:	f04f 0000 	mov.w	r0, #0
 800523a:	f04f 0100 	mov.w	r1, #0
 800523e:	00d9      	lsls	r1, r3, #3
 8005240:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005244:	00d0      	lsls	r0, r2, #3
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	1912      	adds	r2, r2, r4
 800524c:	eb45 0303 	adc.w	r3, r5, r3
 8005250:	f04f 0000 	mov.w	r0, #0
 8005254:	f04f 0100 	mov.w	r1, #0
 8005258:	0299      	lsls	r1, r3, #10
 800525a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800525e:	0290      	lsls	r0, r2, #10
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4610      	mov	r0, r2
 8005266:	4619      	mov	r1, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	461a      	mov	r2, r3
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	f7fb fb04 	bl	800087c <__aeabi_uldivmod>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4613      	mov	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800527c:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	0c1b      	lsrs	r3, r3, #16
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	3301      	adds	r3, #1
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	fbb2 f3f3 	udiv	r3, r2, r3
 8005294:	60bb      	str	r3, [r7, #8]
      break;
 8005296:	e002      	b.n	800529e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005298:	4b04      	ldr	r3, [pc, #16]	; (80052ac <HAL_RCC_GetSysClockFreq+0x164>)
 800529a:	60bb      	str	r3, [r7, #8]
      break;
 800529c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800529e:	68bb      	ldr	r3, [r7, #8]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bdb0      	pop	{r4, r5, r7, pc}
 80052a8:	40023800 	.word	0x40023800
 80052ac:	00f42400 	.word	0x00f42400
 80052b0:	017d7840 	.word	0x017d7840

080052b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b8:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052ba:	681b      	ldr	r3, [r3, #0]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	20000008 	.word	0x20000008

080052cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052d0:	f7ff fff0 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 80052d4:	4602      	mov	r2, r0
 80052d6:	4b05      	ldr	r3, [pc, #20]	; (80052ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	0a9b      	lsrs	r3, r3, #10
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	4903      	ldr	r1, [pc, #12]	; (80052f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052e2:	5ccb      	ldrb	r3, [r1, r3]
 80052e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40023800 	.word	0x40023800
 80052f0:	080135c4 	.word	0x080135c4

080052f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052f8:	f7ff ffdc 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 80052fc:	4602      	mov	r2, r0
 80052fe:	4b05      	ldr	r3, [pc, #20]	; (8005314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	0b5b      	lsrs	r3, r3, #13
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	4903      	ldr	r1, [pc, #12]	; (8005318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800530a:	5ccb      	ldrb	r3, [r1, r3]
 800530c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005310:	4618      	mov	r0, r3
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40023800 	.word	0x40023800
 8005318:	080135c4 	.word	0x080135c4

0800531c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e034      	b.n	800539c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f7fb fcfe 	bl	8000d48 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	3308      	adds	r3, #8
 8005354:	4619      	mov	r1, r3
 8005356:	4610      	mov	r0, r2
 8005358:	f000 fa3a 	bl	80057d0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	461a      	mov	r2, r3
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	f000 fa84 	bl	8005874 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6858      	ldr	r0, [r3, #4]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	f000 fab9 	bl	80058f0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	6892      	ldr	r2, [r2, #8]
 8005386:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	6892      	ldr	r2, [r2, #8]
 8005392:	f041 0101 	orr.w	r1, r1, #1
 8005396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e03f      	b.n	8005436 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7fe ffba 	bl	8004344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2224      	movs	r2, #36	; 0x24
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f829 	bl	8005440 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	691a      	ldr	r2, [r3, #16]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	695a      	ldr	r2, [r3, #20]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800540c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800541c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005444:	b09f      	sub	sp, #124	; 0x7c
 8005446:	af00      	add	r7, sp, #0
 8005448:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800544a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005456:	68d9      	ldr	r1, [r3, #12]
 8005458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	ea40 0301 	orr.w	r3, r0, r1
 8005460:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	431a      	orrs	r2, r3
 800546c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	431a      	orrs	r2, r3
 8005472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	4313      	orrs	r3, r2
 8005478:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800547a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005484:	f021 010c 	bic.w	r1, r1, #12
 8005488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800548e:	430b      	orrs	r3, r1
 8005490:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800549c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549e:	6999      	ldr	r1, [r3, #24]
 80054a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	ea40 0301 	orr.w	r3, r0, r1
 80054a8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4bc5      	ldr	r3, [pc, #788]	; (80057c4 <UART_SetConfig+0x384>)
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d004      	beq.n	80054be <UART_SetConfig+0x7e>
 80054b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	4bc3      	ldr	r3, [pc, #780]	; (80057c8 <UART_SetConfig+0x388>)
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d103      	bne.n	80054c6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054be:	f7ff ff19 	bl	80052f4 <HAL_RCC_GetPCLK2Freq>
 80054c2:	6778      	str	r0, [r7, #116]	; 0x74
 80054c4:	e002      	b.n	80054cc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054c6:	f7ff ff01 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 80054ca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d4:	f040 80b6 	bne.w	8005644 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054da:	461c      	mov	r4, r3
 80054dc:	f04f 0500 	mov.w	r5, #0
 80054e0:	4622      	mov	r2, r4
 80054e2:	462b      	mov	r3, r5
 80054e4:	1891      	adds	r1, r2, r2
 80054e6:	6439      	str	r1, [r7, #64]	; 0x40
 80054e8:	415b      	adcs	r3, r3
 80054ea:	647b      	str	r3, [r7, #68]	; 0x44
 80054ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054f0:	1912      	adds	r2, r2, r4
 80054f2:	eb45 0303 	adc.w	r3, r5, r3
 80054f6:	f04f 0000 	mov.w	r0, #0
 80054fa:	f04f 0100 	mov.w	r1, #0
 80054fe:	00d9      	lsls	r1, r3, #3
 8005500:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005504:	00d0      	lsls	r0, r2, #3
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	1911      	adds	r1, r2, r4
 800550c:	6639      	str	r1, [r7, #96]	; 0x60
 800550e:	416b      	adcs	r3, r5
 8005510:	667b      	str	r3, [r7, #100]	; 0x64
 8005512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	461a      	mov	r2, r3
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	1891      	adds	r1, r2, r2
 800551e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005520:	415b      	adcs	r3, r3
 8005522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005524:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005528:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800552c:	f7fb f9a6 	bl	800087c <__aeabi_uldivmod>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4ba5      	ldr	r3, [pc, #660]	; (80057cc <UART_SetConfig+0x38c>)
 8005536:	fba3 2302 	umull	r2, r3, r3, r2
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	011e      	lsls	r6, r3, #4
 800553e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005540:	461c      	mov	r4, r3
 8005542:	f04f 0500 	mov.w	r5, #0
 8005546:	4622      	mov	r2, r4
 8005548:	462b      	mov	r3, r5
 800554a:	1891      	adds	r1, r2, r2
 800554c:	6339      	str	r1, [r7, #48]	; 0x30
 800554e:	415b      	adcs	r3, r3
 8005550:	637b      	str	r3, [r7, #52]	; 0x34
 8005552:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005556:	1912      	adds	r2, r2, r4
 8005558:	eb45 0303 	adc.w	r3, r5, r3
 800555c:	f04f 0000 	mov.w	r0, #0
 8005560:	f04f 0100 	mov.w	r1, #0
 8005564:	00d9      	lsls	r1, r3, #3
 8005566:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800556a:	00d0      	lsls	r0, r2, #3
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	1911      	adds	r1, r2, r4
 8005572:	65b9      	str	r1, [r7, #88]	; 0x58
 8005574:	416b      	adcs	r3, r5
 8005576:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	461a      	mov	r2, r3
 800557e:	f04f 0300 	mov.w	r3, #0
 8005582:	1891      	adds	r1, r2, r2
 8005584:	62b9      	str	r1, [r7, #40]	; 0x28
 8005586:	415b      	adcs	r3, r3
 8005588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800558a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800558e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005592:	f7fb f973 	bl	800087c <__aeabi_uldivmod>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4b8c      	ldr	r3, [pc, #560]	; (80057cc <UART_SetConfig+0x38c>)
 800559c:	fba3 1302 	umull	r1, r3, r3, r2
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	2164      	movs	r1, #100	; 0x64
 80055a4:	fb01 f303 	mul.w	r3, r1, r3
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	3332      	adds	r3, #50	; 0x32
 80055ae:	4a87      	ldr	r2, [pc, #540]	; (80057cc <UART_SetConfig+0x38c>)
 80055b0:	fba2 2303 	umull	r2, r3, r2, r3
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055bc:	441e      	add	r6, r3
 80055be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055c0:	4618      	mov	r0, r3
 80055c2:	f04f 0100 	mov.w	r1, #0
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	1894      	adds	r4, r2, r2
 80055cc:	623c      	str	r4, [r7, #32]
 80055ce:	415b      	adcs	r3, r3
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
 80055d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055d6:	1812      	adds	r2, r2, r0
 80055d8:	eb41 0303 	adc.w	r3, r1, r3
 80055dc:	f04f 0400 	mov.w	r4, #0
 80055e0:	f04f 0500 	mov.w	r5, #0
 80055e4:	00dd      	lsls	r5, r3, #3
 80055e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80055ea:	00d4      	lsls	r4, r2, #3
 80055ec:	4622      	mov	r2, r4
 80055ee:	462b      	mov	r3, r5
 80055f0:	1814      	adds	r4, r2, r0
 80055f2:	653c      	str	r4, [r7, #80]	; 0x50
 80055f4:	414b      	adcs	r3, r1
 80055f6:	657b      	str	r3, [r7, #84]	; 0x54
 80055f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	461a      	mov	r2, r3
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	1891      	adds	r1, r2, r2
 8005604:	61b9      	str	r1, [r7, #24]
 8005606:	415b      	adcs	r3, r3
 8005608:	61fb      	str	r3, [r7, #28]
 800560a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800560e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005612:	f7fb f933 	bl	800087c <__aeabi_uldivmod>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4b6c      	ldr	r3, [pc, #432]	; (80057cc <UART_SetConfig+0x38c>)
 800561c:	fba3 1302 	umull	r1, r3, r3, r2
 8005620:	095b      	lsrs	r3, r3, #5
 8005622:	2164      	movs	r1, #100	; 0x64
 8005624:	fb01 f303 	mul.w	r3, r1, r3
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	3332      	adds	r3, #50	; 0x32
 800562e:	4a67      	ldr	r2, [pc, #412]	; (80057cc <UART_SetConfig+0x38c>)
 8005630:	fba2 2303 	umull	r2, r3, r2, r3
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	f003 0207 	and.w	r2, r3, #7
 800563a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4432      	add	r2, r6
 8005640:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005642:	e0b9      	b.n	80057b8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005646:	461c      	mov	r4, r3
 8005648:	f04f 0500 	mov.w	r5, #0
 800564c:	4622      	mov	r2, r4
 800564e:	462b      	mov	r3, r5
 8005650:	1891      	adds	r1, r2, r2
 8005652:	6139      	str	r1, [r7, #16]
 8005654:	415b      	adcs	r3, r3
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800565c:	1912      	adds	r2, r2, r4
 800565e:	eb45 0303 	adc.w	r3, r5, r3
 8005662:	f04f 0000 	mov.w	r0, #0
 8005666:	f04f 0100 	mov.w	r1, #0
 800566a:	00d9      	lsls	r1, r3, #3
 800566c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005670:	00d0      	lsls	r0, r2, #3
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	eb12 0804 	adds.w	r8, r2, r4
 800567a:	eb43 0905 	adc.w	r9, r3, r5
 800567e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	4618      	mov	r0, r3
 8005684:	f04f 0100 	mov.w	r1, #0
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	f04f 0300 	mov.w	r3, #0
 8005690:	008b      	lsls	r3, r1, #2
 8005692:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005696:	0082      	lsls	r2, r0, #2
 8005698:	4640      	mov	r0, r8
 800569a:	4649      	mov	r1, r9
 800569c:	f7fb f8ee 	bl	800087c <__aeabi_uldivmod>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4b49      	ldr	r3, [pc, #292]	; (80057cc <UART_SetConfig+0x38c>)
 80056a6:	fba3 2302 	umull	r2, r3, r3, r2
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	011e      	lsls	r6, r3, #4
 80056ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056b0:	4618      	mov	r0, r3
 80056b2:	f04f 0100 	mov.w	r1, #0
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	1894      	adds	r4, r2, r2
 80056bc:	60bc      	str	r4, [r7, #8]
 80056be:	415b      	adcs	r3, r3
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056c6:	1812      	adds	r2, r2, r0
 80056c8:	eb41 0303 	adc.w	r3, r1, r3
 80056cc:	f04f 0400 	mov.w	r4, #0
 80056d0:	f04f 0500 	mov.w	r5, #0
 80056d4:	00dd      	lsls	r5, r3, #3
 80056d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056da:	00d4      	lsls	r4, r2, #3
 80056dc:	4622      	mov	r2, r4
 80056de:	462b      	mov	r3, r5
 80056e0:	1814      	adds	r4, r2, r0
 80056e2:	64bc      	str	r4, [r7, #72]	; 0x48
 80056e4:	414b      	adcs	r3, r1
 80056e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f04f 0100 	mov.w	r1, #0
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	008b      	lsls	r3, r1, #2
 80056fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005700:	0082      	lsls	r2, r0, #2
 8005702:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005706:	f7fb f8b9 	bl	800087c <__aeabi_uldivmod>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	4b2f      	ldr	r3, [pc, #188]	; (80057cc <UART_SetConfig+0x38c>)
 8005710:	fba3 1302 	umull	r1, r3, r3, r2
 8005714:	095b      	lsrs	r3, r3, #5
 8005716:	2164      	movs	r1, #100	; 0x64
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	3332      	adds	r3, #50	; 0x32
 8005722:	4a2a      	ldr	r2, [pc, #168]	; (80057cc <UART_SetConfig+0x38c>)
 8005724:	fba2 2303 	umull	r2, r3, r2, r3
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800572e:	441e      	add	r6, r3
 8005730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005732:	4618      	mov	r0, r3
 8005734:	f04f 0100 	mov.w	r1, #0
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	1894      	adds	r4, r2, r2
 800573e:	603c      	str	r4, [r7, #0]
 8005740:	415b      	adcs	r3, r3
 8005742:	607b      	str	r3, [r7, #4]
 8005744:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005748:	1812      	adds	r2, r2, r0
 800574a:	eb41 0303 	adc.w	r3, r1, r3
 800574e:	f04f 0400 	mov.w	r4, #0
 8005752:	f04f 0500 	mov.w	r5, #0
 8005756:	00dd      	lsls	r5, r3, #3
 8005758:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800575c:	00d4      	lsls	r4, r2, #3
 800575e:	4622      	mov	r2, r4
 8005760:	462b      	mov	r3, r5
 8005762:	eb12 0a00 	adds.w	sl, r2, r0
 8005766:	eb43 0b01 	adc.w	fp, r3, r1
 800576a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	4618      	mov	r0, r3
 8005770:	f04f 0100 	mov.w	r1, #0
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	008b      	lsls	r3, r1, #2
 800577e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005782:	0082      	lsls	r2, r0, #2
 8005784:	4650      	mov	r0, sl
 8005786:	4659      	mov	r1, fp
 8005788:	f7fb f878 	bl	800087c <__aeabi_uldivmod>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4b0e      	ldr	r3, [pc, #56]	; (80057cc <UART_SetConfig+0x38c>)
 8005792:	fba3 1302 	umull	r1, r3, r3, r2
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	2164      	movs	r1, #100	; 0x64
 800579a:	fb01 f303 	mul.w	r3, r1, r3
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	3332      	adds	r3, #50	; 0x32
 80057a4:	4a09      	ldr	r2, [pc, #36]	; (80057cc <UART_SetConfig+0x38c>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	f003 020f 	and.w	r2, r3, #15
 80057b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4432      	add	r2, r6
 80057b6:	609a      	str	r2, [r3, #8]
}
 80057b8:	bf00      	nop
 80057ba:	377c      	adds	r7, #124	; 0x7c
 80057bc:	46bd      	mov	sp, r7
 80057be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c2:	bf00      	nop
 80057c4:	40011000 	.word	0x40011000
 80057c8:	40011400 	.word	0x40011400
 80057cc:	51eb851f 	.word	0x51eb851f

080057d0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4b20      	ldr	r3, [pc, #128]	; (8005870 <FSMC_NORSRAM_Init+0xa0>)
 80057ee:	4013      	ands	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80057fa:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8005800:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8005806:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800580c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8005812:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8005818:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800581e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8005824:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800582a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8005830:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8005836:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800583c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	2b08      	cmp	r3, #8
 800584a:	d103      	bne.n	8005854 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005852:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68f9      	ldr	r1, [r7, #12]
 800585c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	fff00080 	.word	0xfff00080

08005874 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800588e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005896:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80058a2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80058aa:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80058b2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80058bc:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	3b02      	subs	r3, #2
 80058c4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80058c6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80058cc:	4313      	orrs	r3, r2
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6979      	ldr	r1, [r7, #20]
 80058dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	371c      	adds	r7, #28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
	...

080058f0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005908:	d122      	bne.n	8005950 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005912:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4b15      	ldr	r3, [pc, #84]	; (800596c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005918:	4013      	ands	r3, r2
 800591a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005926:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800592e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005936:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800593c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	4313      	orrs	r3, r2
 8005942:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6979      	ldr	r1, [r7, #20]
 800594a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800594e:	e005      	b.n	800595c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	cff00000 	.word	0xcff00000

08005970 <__errno>:
 8005970:	4b01      	ldr	r3, [pc, #4]	; (8005978 <__errno+0x8>)
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	20000014 	.word	0x20000014

0800597c <__libc_init_array>:
 800597c:	b570      	push	{r4, r5, r6, lr}
 800597e:	4d0d      	ldr	r5, [pc, #52]	; (80059b4 <__libc_init_array+0x38>)
 8005980:	4c0d      	ldr	r4, [pc, #52]	; (80059b8 <__libc_init_array+0x3c>)
 8005982:	1b64      	subs	r4, r4, r5
 8005984:	10a4      	asrs	r4, r4, #2
 8005986:	2600      	movs	r6, #0
 8005988:	42a6      	cmp	r6, r4
 800598a:	d109      	bne.n	80059a0 <__libc_init_array+0x24>
 800598c:	4d0b      	ldr	r5, [pc, #44]	; (80059bc <__libc_init_array+0x40>)
 800598e:	4c0c      	ldr	r4, [pc, #48]	; (80059c0 <__libc_init_array+0x44>)
 8005990:	f000 ff76 	bl	8006880 <_init>
 8005994:	1b64      	subs	r4, r4, r5
 8005996:	10a4      	asrs	r4, r4, #2
 8005998:	2600      	movs	r6, #0
 800599a:	42a6      	cmp	r6, r4
 800599c:	d105      	bne.n	80059aa <__libc_init_array+0x2e>
 800599e:	bd70      	pop	{r4, r5, r6, pc}
 80059a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a4:	4798      	blx	r3
 80059a6:	3601      	adds	r6, #1
 80059a8:	e7ee      	b.n	8005988 <__libc_init_array+0xc>
 80059aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ae:	4798      	blx	r3
 80059b0:	3601      	adds	r6, #1
 80059b2:	e7f2      	b.n	800599a <__libc_init_array+0x1e>
 80059b4:	0801366c 	.word	0x0801366c
 80059b8:	0801366c 	.word	0x0801366c
 80059bc:	0801366c 	.word	0x0801366c
 80059c0:	08013670 	.word	0x08013670

080059c4 <memset>:
 80059c4:	4402      	add	r2, r0
 80059c6:	4603      	mov	r3, r0
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d100      	bne.n	80059ce <memset+0xa>
 80059cc:	4770      	bx	lr
 80059ce:	f803 1b01 	strb.w	r1, [r3], #1
 80059d2:	e7f9      	b.n	80059c8 <memset+0x4>

080059d4 <iprintf>:
 80059d4:	b40f      	push	{r0, r1, r2, r3}
 80059d6:	4b0a      	ldr	r3, [pc, #40]	; (8005a00 <iprintf+0x2c>)
 80059d8:	b513      	push	{r0, r1, r4, lr}
 80059da:	681c      	ldr	r4, [r3, #0]
 80059dc:	b124      	cbz	r4, 80059e8 <iprintf+0x14>
 80059de:	69a3      	ldr	r3, [r4, #24]
 80059e0:	b913      	cbnz	r3, 80059e8 <iprintf+0x14>
 80059e2:	4620      	mov	r0, r4
 80059e4:	f000 f866 	bl	8005ab4 <__sinit>
 80059e8:	ab05      	add	r3, sp, #20
 80059ea:	9a04      	ldr	r2, [sp, #16]
 80059ec:	68a1      	ldr	r1, [r4, #8]
 80059ee:	9301      	str	r3, [sp, #4]
 80059f0:	4620      	mov	r0, r4
 80059f2:	f000 f983 	bl	8005cfc <_vfiprintf_r>
 80059f6:	b002      	add	sp, #8
 80059f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059fc:	b004      	add	sp, #16
 80059fe:	4770      	bx	lr
 8005a00:	20000014 	.word	0x20000014

08005a04 <std>:
 8005a04:	2300      	movs	r3, #0
 8005a06:	b510      	push	{r4, lr}
 8005a08:	4604      	mov	r4, r0
 8005a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a12:	6083      	str	r3, [r0, #8]
 8005a14:	8181      	strh	r1, [r0, #12]
 8005a16:	6643      	str	r3, [r0, #100]	; 0x64
 8005a18:	81c2      	strh	r2, [r0, #14]
 8005a1a:	6183      	str	r3, [r0, #24]
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	2208      	movs	r2, #8
 8005a20:	305c      	adds	r0, #92	; 0x5c
 8005a22:	f7ff ffcf 	bl	80059c4 <memset>
 8005a26:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <std+0x38>)
 8005a28:	6263      	str	r3, [r4, #36]	; 0x24
 8005a2a:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <std+0x3c>)
 8005a2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a2e:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <std+0x40>)
 8005a30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a32:	4b05      	ldr	r3, [pc, #20]	; (8005a48 <std+0x44>)
 8005a34:	6224      	str	r4, [r4, #32]
 8005a36:	6323      	str	r3, [r4, #48]	; 0x30
 8005a38:	bd10      	pop	{r4, pc}
 8005a3a:	bf00      	nop
 8005a3c:	080062a5 	.word	0x080062a5
 8005a40:	080062c7 	.word	0x080062c7
 8005a44:	080062ff 	.word	0x080062ff
 8005a48:	08006323 	.word	0x08006323

08005a4c <_cleanup_r>:
 8005a4c:	4901      	ldr	r1, [pc, #4]	; (8005a54 <_cleanup_r+0x8>)
 8005a4e:	f000 b8af 	b.w	8005bb0 <_fwalk_reent>
 8005a52:	bf00      	nop
 8005a54:	080065fd 	.word	0x080065fd

08005a58 <__sfmoreglue>:
 8005a58:	b570      	push	{r4, r5, r6, lr}
 8005a5a:	1e4a      	subs	r2, r1, #1
 8005a5c:	2568      	movs	r5, #104	; 0x68
 8005a5e:	4355      	muls	r5, r2
 8005a60:	460e      	mov	r6, r1
 8005a62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a66:	f000 f8c5 	bl	8005bf4 <_malloc_r>
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	b140      	cbz	r0, 8005a80 <__sfmoreglue+0x28>
 8005a6e:	2100      	movs	r1, #0
 8005a70:	e9c0 1600 	strd	r1, r6, [r0]
 8005a74:	300c      	adds	r0, #12
 8005a76:	60a0      	str	r0, [r4, #8]
 8005a78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a7c:	f7ff ffa2 	bl	80059c4 <memset>
 8005a80:	4620      	mov	r0, r4
 8005a82:	bd70      	pop	{r4, r5, r6, pc}

08005a84 <__sfp_lock_acquire>:
 8005a84:	4801      	ldr	r0, [pc, #4]	; (8005a8c <__sfp_lock_acquire+0x8>)
 8005a86:	f000 b8b3 	b.w	8005bf0 <__retarget_lock_acquire_recursive>
 8005a8a:	bf00      	nop
 8005a8c:	200001a4 	.word	0x200001a4

08005a90 <__sfp_lock_release>:
 8005a90:	4801      	ldr	r0, [pc, #4]	; (8005a98 <__sfp_lock_release+0x8>)
 8005a92:	f000 b8ae 	b.w	8005bf2 <__retarget_lock_release_recursive>
 8005a96:	bf00      	nop
 8005a98:	200001a4 	.word	0x200001a4

08005a9c <__sinit_lock_acquire>:
 8005a9c:	4801      	ldr	r0, [pc, #4]	; (8005aa4 <__sinit_lock_acquire+0x8>)
 8005a9e:	f000 b8a7 	b.w	8005bf0 <__retarget_lock_acquire_recursive>
 8005aa2:	bf00      	nop
 8005aa4:	2000019f 	.word	0x2000019f

08005aa8 <__sinit_lock_release>:
 8005aa8:	4801      	ldr	r0, [pc, #4]	; (8005ab0 <__sinit_lock_release+0x8>)
 8005aaa:	f000 b8a2 	b.w	8005bf2 <__retarget_lock_release_recursive>
 8005aae:	bf00      	nop
 8005ab0:	2000019f 	.word	0x2000019f

08005ab4 <__sinit>:
 8005ab4:	b510      	push	{r4, lr}
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	f7ff fff0 	bl	8005a9c <__sinit_lock_acquire>
 8005abc:	69a3      	ldr	r3, [r4, #24]
 8005abe:	b11b      	cbz	r3, 8005ac8 <__sinit+0x14>
 8005ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ac4:	f7ff bff0 	b.w	8005aa8 <__sinit_lock_release>
 8005ac8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005acc:	6523      	str	r3, [r4, #80]	; 0x50
 8005ace:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <__sinit+0x68>)
 8005ad0:	4a13      	ldr	r2, [pc, #76]	; (8005b20 <__sinit+0x6c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ad6:	42a3      	cmp	r3, r4
 8005ad8:	bf04      	itt	eq
 8005ada:	2301      	moveq	r3, #1
 8005adc:	61a3      	streq	r3, [r4, #24]
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f000 f820 	bl	8005b24 <__sfp>
 8005ae4:	6060      	str	r0, [r4, #4]
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f000 f81c 	bl	8005b24 <__sfp>
 8005aec:	60a0      	str	r0, [r4, #8]
 8005aee:	4620      	mov	r0, r4
 8005af0:	f000 f818 	bl	8005b24 <__sfp>
 8005af4:	2200      	movs	r2, #0
 8005af6:	60e0      	str	r0, [r4, #12]
 8005af8:	2104      	movs	r1, #4
 8005afa:	6860      	ldr	r0, [r4, #4]
 8005afc:	f7ff ff82 	bl	8005a04 <std>
 8005b00:	68a0      	ldr	r0, [r4, #8]
 8005b02:	2201      	movs	r2, #1
 8005b04:	2109      	movs	r1, #9
 8005b06:	f7ff ff7d 	bl	8005a04 <std>
 8005b0a:	68e0      	ldr	r0, [r4, #12]
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	2112      	movs	r1, #18
 8005b10:	f7ff ff78 	bl	8005a04 <std>
 8005b14:	2301      	movs	r3, #1
 8005b16:	61a3      	str	r3, [r4, #24]
 8005b18:	e7d2      	b.n	8005ac0 <__sinit+0xc>
 8005b1a:	bf00      	nop
 8005b1c:	080135cc 	.word	0x080135cc
 8005b20:	08005a4d 	.word	0x08005a4d

08005b24 <__sfp>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	4607      	mov	r7, r0
 8005b28:	f7ff ffac 	bl	8005a84 <__sfp_lock_acquire>
 8005b2c:	4b1e      	ldr	r3, [pc, #120]	; (8005ba8 <__sfp+0x84>)
 8005b2e:	681e      	ldr	r6, [r3, #0]
 8005b30:	69b3      	ldr	r3, [r6, #24]
 8005b32:	b913      	cbnz	r3, 8005b3a <__sfp+0x16>
 8005b34:	4630      	mov	r0, r6
 8005b36:	f7ff ffbd 	bl	8005ab4 <__sinit>
 8005b3a:	3648      	adds	r6, #72	; 0x48
 8005b3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	d503      	bpl.n	8005b4c <__sfp+0x28>
 8005b44:	6833      	ldr	r3, [r6, #0]
 8005b46:	b30b      	cbz	r3, 8005b8c <__sfp+0x68>
 8005b48:	6836      	ldr	r6, [r6, #0]
 8005b4a:	e7f7      	b.n	8005b3c <__sfp+0x18>
 8005b4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b50:	b9d5      	cbnz	r5, 8005b88 <__sfp+0x64>
 8005b52:	4b16      	ldr	r3, [pc, #88]	; (8005bac <__sfp+0x88>)
 8005b54:	60e3      	str	r3, [r4, #12]
 8005b56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b5a:	6665      	str	r5, [r4, #100]	; 0x64
 8005b5c:	f000 f847 	bl	8005bee <__retarget_lock_init_recursive>
 8005b60:	f7ff ff96 	bl	8005a90 <__sfp_lock_release>
 8005b64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b6c:	6025      	str	r5, [r4, #0]
 8005b6e:	61a5      	str	r5, [r4, #24]
 8005b70:	2208      	movs	r2, #8
 8005b72:	4629      	mov	r1, r5
 8005b74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b78:	f7ff ff24 	bl	80059c4 <memset>
 8005b7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b84:	4620      	mov	r0, r4
 8005b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b88:	3468      	adds	r4, #104	; 0x68
 8005b8a:	e7d9      	b.n	8005b40 <__sfp+0x1c>
 8005b8c:	2104      	movs	r1, #4
 8005b8e:	4638      	mov	r0, r7
 8005b90:	f7ff ff62 	bl	8005a58 <__sfmoreglue>
 8005b94:	4604      	mov	r4, r0
 8005b96:	6030      	str	r0, [r6, #0]
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	d1d5      	bne.n	8005b48 <__sfp+0x24>
 8005b9c:	f7ff ff78 	bl	8005a90 <__sfp_lock_release>
 8005ba0:	230c      	movs	r3, #12
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	e7ee      	b.n	8005b84 <__sfp+0x60>
 8005ba6:	bf00      	nop
 8005ba8:	080135cc 	.word	0x080135cc
 8005bac:	ffff0001 	.word	0xffff0001

08005bb0 <_fwalk_reent>:
 8005bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	4688      	mov	r8, r1
 8005bb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005bbc:	2700      	movs	r7, #0
 8005bbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bc2:	f1b9 0901 	subs.w	r9, r9, #1
 8005bc6:	d505      	bpl.n	8005bd4 <_fwalk_reent+0x24>
 8005bc8:	6824      	ldr	r4, [r4, #0]
 8005bca:	2c00      	cmp	r4, #0
 8005bcc:	d1f7      	bne.n	8005bbe <_fwalk_reent+0xe>
 8005bce:	4638      	mov	r0, r7
 8005bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bd4:	89ab      	ldrh	r3, [r5, #12]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d907      	bls.n	8005bea <_fwalk_reent+0x3a>
 8005bda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bde:	3301      	adds	r3, #1
 8005be0:	d003      	beq.n	8005bea <_fwalk_reent+0x3a>
 8005be2:	4629      	mov	r1, r5
 8005be4:	4630      	mov	r0, r6
 8005be6:	47c0      	blx	r8
 8005be8:	4307      	orrs	r7, r0
 8005bea:	3568      	adds	r5, #104	; 0x68
 8005bec:	e7e9      	b.n	8005bc2 <_fwalk_reent+0x12>

08005bee <__retarget_lock_init_recursive>:
 8005bee:	4770      	bx	lr

08005bf0 <__retarget_lock_acquire_recursive>:
 8005bf0:	4770      	bx	lr

08005bf2 <__retarget_lock_release_recursive>:
 8005bf2:	4770      	bx	lr

08005bf4 <_malloc_r>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	1ccd      	adds	r5, r1, #3
 8005bf8:	f025 0503 	bic.w	r5, r5, #3
 8005bfc:	3508      	adds	r5, #8
 8005bfe:	2d0c      	cmp	r5, #12
 8005c00:	bf38      	it	cc
 8005c02:	250c      	movcc	r5, #12
 8005c04:	2d00      	cmp	r5, #0
 8005c06:	4606      	mov	r6, r0
 8005c08:	db01      	blt.n	8005c0e <_malloc_r+0x1a>
 8005c0a:	42a9      	cmp	r1, r5
 8005c0c:	d903      	bls.n	8005c16 <_malloc_r+0x22>
 8005c0e:	230c      	movs	r3, #12
 8005c10:	6033      	str	r3, [r6, #0]
 8005c12:	2000      	movs	r0, #0
 8005c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c16:	f000 fda3 	bl	8006760 <__malloc_lock>
 8005c1a:	4921      	ldr	r1, [pc, #132]	; (8005ca0 <_malloc_r+0xac>)
 8005c1c:	680a      	ldr	r2, [r1, #0]
 8005c1e:	4614      	mov	r4, r2
 8005c20:	b99c      	cbnz	r4, 8005c4a <_malloc_r+0x56>
 8005c22:	4f20      	ldr	r7, [pc, #128]	; (8005ca4 <_malloc_r+0xb0>)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	b923      	cbnz	r3, 8005c32 <_malloc_r+0x3e>
 8005c28:	4621      	mov	r1, r4
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f000 fb2a 	bl	8006284 <_sbrk_r>
 8005c30:	6038      	str	r0, [r7, #0]
 8005c32:	4629      	mov	r1, r5
 8005c34:	4630      	mov	r0, r6
 8005c36:	f000 fb25 	bl	8006284 <_sbrk_r>
 8005c3a:	1c43      	adds	r3, r0, #1
 8005c3c:	d123      	bne.n	8005c86 <_malloc_r+0x92>
 8005c3e:	230c      	movs	r3, #12
 8005c40:	6033      	str	r3, [r6, #0]
 8005c42:	4630      	mov	r0, r6
 8005c44:	f000 fd92 	bl	800676c <__malloc_unlock>
 8005c48:	e7e3      	b.n	8005c12 <_malloc_r+0x1e>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	1b5b      	subs	r3, r3, r5
 8005c4e:	d417      	bmi.n	8005c80 <_malloc_r+0x8c>
 8005c50:	2b0b      	cmp	r3, #11
 8005c52:	d903      	bls.n	8005c5c <_malloc_r+0x68>
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	441c      	add	r4, r3
 8005c58:	6025      	str	r5, [r4, #0]
 8005c5a:	e004      	b.n	8005c66 <_malloc_r+0x72>
 8005c5c:	6863      	ldr	r3, [r4, #4]
 8005c5e:	42a2      	cmp	r2, r4
 8005c60:	bf0c      	ite	eq
 8005c62:	600b      	streq	r3, [r1, #0]
 8005c64:	6053      	strne	r3, [r2, #4]
 8005c66:	4630      	mov	r0, r6
 8005c68:	f000 fd80 	bl	800676c <__malloc_unlock>
 8005c6c:	f104 000b 	add.w	r0, r4, #11
 8005c70:	1d23      	adds	r3, r4, #4
 8005c72:	f020 0007 	bic.w	r0, r0, #7
 8005c76:	1ac2      	subs	r2, r0, r3
 8005c78:	d0cc      	beq.n	8005c14 <_malloc_r+0x20>
 8005c7a:	1a1b      	subs	r3, r3, r0
 8005c7c:	50a3      	str	r3, [r4, r2]
 8005c7e:	e7c9      	b.n	8005c14 <_malloc_r+0x20>
 8005c80:	4622      	mov	r2, r4
 8005c82:	6864      	ldr	r4, [r4, #4]
 8005c84:	e7cc      	b.n	8005c20 <_malloc_r+0x2c>
 8005c86:	1cc4      	adds	r4, r0, #3
 8005c88:	f024 0403 	bic.w	r4, r4, #3
 8005c8c:	42a0      	cmp	r0, r4
 8005c8e:	d0e3      	beq.n	8005c58 <_malloc_r+0x64>
 8005c90:	1a21      	subs	r1, r4, r0
 8005c92:	4630      	mov	r0, r6
 8005c94:	f000 faf6 	bl	8006284 <_sbrk_r>
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d1dd      	bne.n	8005c58 <_malloc_r+0x64>
 8005c9c:	e7cf      	b.n	8005c3e <_malloc_r+0x4a>
 8005c9e:	bf00      	nop
 8005ca0:	2000009c 	.word	0x2000009c
 8005ca4:	200000a0 	.word	0x200000a0

08005ca8 <__sfputc_r>:
 8005ca8:	6893      	ldr	r3, [r2, #8]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	b410      	push	{r4}
 8005cb0:	6093      	str	r3, [r2, #8]
 8005cb2:	da08      	bge.n	8005cc6 <__sfputc_r+0x1e>
 8005cb4:	6994      	ldr	r4, [r2, #24]
 8005cb6:	42a3      	cmp	r3, r4
 8005cb8:	db01      	blt.n	8005cbe <__sfputc_r+0x16>
 8005cba:	290a      	cmp	r1, #10
 8005cbc:	d103      	bne.n	8005cc6 <__sfputc_r+0x1e>
 8005cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cc2:	f000 bb33 	b.w	800632c <__swbuf_r>
 8005cc6:	6813      	ldr	r3, [r2, #0]
 8005cc8:	1c58      	adds	r0, r3, #1
 8005cca:	6010      	str	r0, [r2, #0]
 8005ccc:	7019      	strb	r1, [r3, #0]
 8005cce:	4608      	mov	r0, r1
 8005cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <__sfputs_r>:
 8005cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd8:	4606      	mov	r6, r0
 8005cda:	460f      	mov	r7, r1
 8005cdc:	4614      	mov	r4, r2
 8005cde:	18d5      	adds	r5, r2, r3
 8005ce0:	42ac      	cmp	r4, r5
 8005ce2:	d101      	bne.n	8005ce8 <__sfputs_r+0x12>
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	e007      	b.n	8005cf8 <__sfputs_r+0x22>
 8005ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cec:	463a      	mov	r2, r7
 8005cee:	4630      	mov	r0, r6
 8005cf0:	f7ff ffda 	bl	8005ca8 <__sfputc_r>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	d1f3      	bne.n	8005ce0 <__sfputs_r+0xa>
 8005cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cfc <_vfiprintf_r>:
 8005cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d00:	460d      	mov	r5, r1
 8005d02:	b09d      	sub	sp, #116	; 0x74
 8005d04:	4614      	mov	r4, r2
 8005d06:	4698      	mov	r8, r3
 8005d08:	4606      	mov	r6, r0
 8005d0a:	b118      	cbz	r0, 8005d14 <_vfiprintf_r+0x18>
 8005d0c:	6983      	ldr	r3, [r0, #24]
 8005d0e:	b90b      	cbnz	r3, 8005d14 <_vfiprintf_r+0x18>
 8005d10:	f7ff fed0 	bl	8005ab4 <__sinit>
 8005d14:	4b89      	ldr	r3, [pc, #548]	; (8005f3c <_vfiprintf_r+0x240>)
 8005d16:	429d      	cmp	r5, r3
 8005d18:	d11b      	bne.n	8005d52 <_vfiprintf_r+0x56>
 8005d1a:	6875      	ldr	r5, [r6, #4]
 8005d1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d1e:	07d9      	lsls	r1, r3, #31
 8005d20:	d405      	bmi.n	8005d2e <_vfiprintf_r+0x32>
 8005d22:	89ab      	ldrh	r3, [r5, #12]
 8005d24:	059a      	lsls	r2, r3, #22
 8005d26:	d402      	bmi.n	8005d2e <_vfiprintf_r+0x32>
 8005d28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d2a:	f7ff ff61 	bl	8005bf0 <__retarget_lock_acquire_recursive>
 8005d2e:	89ab      	ldrh	r3, [r5, #12]
 8005d30:	071b      	lsls	r3, r3, #28
 8005d32:	d501      	bpl.n	8005d38 <_vfiprintf_r+0x3c>
 8005d34:	692b      	ldr	r3, [r5, #16]
 8005d36:	b9eb      	cbnz	r3, 8005d74 <_vfiprintf_r+0x78>
 8005d38:	4629      	mov	r1, r5
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f000 fb5a 	bl	80063f4 <__swsetup_r>
 8005d40:	b1c0      	cbz	r0, 8005d74 <_vfiprintf_r+0x78>
 8005d42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d44:	07dc      	lsls	r4, r3, #31
 8005d46:	d50e      	bpl.n	8005d66 <_vfiprintf_r+0x6a>
 8005d48:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4c:	b01d      	add	sp, #116	; 0x74
 8005d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d52:	4b7b      	ldr	r3, [pc, #492]	; (8005f40 <_vfiprintf_r+0x244>)
 8005d54:	429d      	cmp	r5, r3
 8005d56:	d101      	bne.n	8005d5c <_vfiprintf_r+0x60>
 8005d58:	68b5      	ldr	r5, [r6, #8]
 8005d5a:	e7df      	b.n	8005d1c <_vfiprintf_r+0x20>
 8005d5c:	4b79      	ldr	r3, [pc, #484]	; (8005f44 <_vfiprintf_r+0x248>)
 8005d5e:	429d      	cmp	r5, r3
 8005d60:	bf08      	it	eq
 8005d62:	68f5      	ldreq	r5, [r6, #12]
 8005d64:	e7da      	b.n	8005d1c <_vfiprintf_r+0x20>
 8005d66:	89ab      	ldrh	r3, [r5, #12]
 8005d68:	0598      	lsls	r0, r3, #22
 8005d6a:	d4ed      	bmi.n	8005d48 <_vfiprintf_r+0x4c>
 8005d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d6e:	f7ff ff40 	bl	8005bf2 <__retarget_lock_release_recursive>
 8005d72:	e7e9      	b.n	8005d48 <_vfiprintf_r+0x4c>
 8005d74:	2300      	movs	r3, #0
 8005d76:	9309      	str	r3, [sp, #36]	; 0x24
 8005d78:	2320      	movs	r3, #32
 8005d7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d82:	2330      	movs	r3, #48	; 0x30
 8005d84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005f48 <_vfiprintf_r+0x24c>
 8005d88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d8c:	f04f 0901 	mov.w	r9, #1
 8005d90:	4623      	mov	r3, r4
 8005d92:	469a      	mov	sl, r3
 8005d94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d98:	b10a      	cbz	r2, 8005d9e <_vfiprintf_r+0xa2>
 8005d9a:	2a25      	cmp	r2, #37	; 0x25
 8005d9c:	d1f9      	bne.n	8005d92 <_vfiprintf_r+0x96>
 8005d9e:	ebba 0b04 	subs.w	fp, sl, r4
 8005da2:	d00b      	beq.n	8005dbc <_vfiprintf_r+0xc0>
 8005da4:	465b      	mov	r3, fp
 8005da6:	4622      	mov	r2, r4
 8005da8:	4629      	mov	r1, r5
 8005daa:	4630      	mov	r0, r6
 8005dac:	f7ff ff93 	bl	8005cd6 <__sfputs_r>
 8005db0:	3001      	adds	r0, #1
 8005db2:	f000 80aa 	beq.w	8005f0a <_vfiprintf_r+0x20e>
 8005db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005db8:	445a      	add	r2, fp
 8005dba:	9209      	str	r2, [sp, #36]	; 0x24
 8005dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 80a2 	beq.w	8005f0a <_vfiprintf_r+0x20e>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dd0:	f10a 0a01 	add.w	sl, sl, #1
 8005dd4:	9304      	str	r3, [sp, #16]
 8005dd6:	9307      	str	r3, [sp, #28]
 8005dd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ddc:	931a      	str	r3, [sp, #104]	; 0x68
 8005dde:	4654      	mov	r4, sl
 8005de0:	2205      	movs	r2, #5
 8005de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005de6:	4858      	ldr	r0, [pc, #352]	; (8005f48 <_vfiprintf_r+0x24c>)
 8005de8:	f7fa f9f2 	bl	80001d0 <memchr>
 8005dec:	9a04      	ldr	r2, [sp, #16]
 8005dee:	b9d8      	cbnz	r0, 8005e28 <_vfiprintf_r+0x12c>
 8005df0:	06d1      	lsls	r1, r2, #27
 8005df2:	bf44      	itt	mi
 8005df4:	2320      	movmi	r3, #32
 8005df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dfa:	0713      	lsls	r3, r2, #28
 8005dfc:	bf44      	itt	mi
 8005dfe:	232b      	movmi	r3, #43	; 0x2b
 8005e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e04:	f89a 3000 	ldrb.w	r3, [sl]
 8005e08:	2b2a      	cmp	r3, #42	; 0x2a
 8005e0a:	d015      	beq.n	8005e38 <_vfiprintf_r+0x13c>
 8005e0c:	9a07      	ldr	r2, [sp, #28]
 8005e0e:	4654      	mov	r4, sl
 8005e10:	2000      	movs	r0, #0
 8005e12:	f04f 0c0a 	mov.w	ip, #10
 8005e16:	4621      	mov	r1, r4
 8005e18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e1c:	3b30      	subs	r3, #48	; 0x30
 8005e1e:	2b09      	cmp	r3, #9
 8005e20:	d94e      	bls.n	8005ec0 <_vfiprintf_r+0x1c4>
 8005e22:	b1b0      	cbz	r0, 8005e52 <_vfiprintf_r+0x156>
 8005e24:	9207      	str	r2, [sp, #28]
 8005e26:	e014      	b.n	8005e52 <_vfiprintf_r+0x156>
 8005e28:	eba0 0308 	sub.w	r3, r0, r8
 8005e2c:	fa09 f303 	lsl.w	r3, r9, r3
 8005e30:	4313      	orrs	r3, r2
 8005e32:	9304      	str	r3, [sp, #16]
 8005e34:	46a2      	mov	sl, r4
 8005e36:	e7d2      	b.n	8005dde <_vfiprintf_r+0xe2>
 8005e38:	9b03      	ldr	r3, [sp, #12]
 8005e3a:	1d19      	adds	r1, r3, #4
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	9103      	str	r1, [sp, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	bfbb      	ittet	lt
 8005e44:	425b      	neglt	r3, r3
 8005e46:	f042 0202 	orrlt.w	r2, r2, #2
 8005e4a:	9307      	strge	r3, [sp, #28]
 8005e4c:	9307      	strlt	r3, [sp, #28]
 8005e4e:	bfb8      	it	lt
 8005e50:	9204      	strlt	r2, [sp, #16]
 8005e52:	7823      	ldrb	r3, [r4, #0]
 8005e54:	2b2e      	cmp	r3, #46	; 0x2e
 8005e56:	d10c      	bne.n	8005e72 <_vfiprintf_r+0x176>
 8005e58:	7863      	ldrb	r3, [r4, #1]
 8005e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e5c:	d135      	bne.n	8005eca <_vfiprintf_r+0x1ce>
 8005e5e:	9b03      	ldr	r3, [sp, #12]
 8005e60:	1d1a      	adds	r2, r3, #4
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	9203      	str	r2, [sp, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	bfb8      	it	lt
 8005e6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e6e:	3402      	adds	r4, #2
 8005e70:	9305      	str	r3, [sp, #20]
 8005e72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005f58 <_vfiprintf_r+0x25c>
 8005e76:	7821      	ldrb	r1, [r4, #0]
 8005e78:	2203      	movs	r2, #3
 8005e7a:	4650      	mov	r0, sl
 8005e7c:	f7fa f9a8 	bl	80001d0 <memchr>
 8005e80:	b140      	cbz	r0, 8005e94 <_vfiprintf_r+0x198>
 8005e82:	2340      	movs	r3, #64	; 0x40
 8005e84:	eba0 000a 	sub.w	r0, r0, sl
 8005e88:	fa03 f000 	lsl.w	r0, r3, r0
 8005e8c:	9b04      	ldr	r3, [sp, #16]
 8005e8e:	4303      	orrs	r3, r0
 8005e90:	3401      	adds	r4, #1
 8005e92:	9304      	str	r3, [sp, #16]
 8005e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e98:	482c      	ldr	r0, [pc, #176]	; (8005f4c <_vfiprintf_r+0x250>)
 8005e9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e9e:	2206      	movs	r2, #6
 8005ea0:	f7fa f996 	bl	80001d0 <memchr>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d03f      	beq.n	8005f28 <_vfiprintf_r+0x22c>
 8005ea8:	4b29      	ldr	r3, [pc, #164]	; (8005f50 <_vfiprintf_r+0x254>)
 8005eaa:	bb1b      	cbnz	r3, 8005ef4 <_vfiprintf_r+0x1f8>
 8005eac:	9b03      	ldr	r3, [sp, #12]
 8005eae:	3307      	adds	r3, #7
 8005eb0:	f023 0307 	bic.w	r3, r3, #7
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	9303      	str	r3, [sp, #12]
 8005eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eba:	443b      	add	r3, r7
 8005ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8005ebe:	e767      	b.n	8005d90 <_vfiprintf_r+0x94>
 8005ec0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	2001      	movs	r0, #1
 8005ec8:	e7a5      	b.n	8005e16 <_vfiprintf_r+0x11a>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	3401      	adds	r4, #1
 8005ece:	9305      	str	r3, [sp, #20]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	f04f 0c0a 	mov.w	ip, #10
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005edc:	3a30      	subs	r2, #48	; 0x30
 8005ede:	2a09      	cmp	r2, #9
 8005ee0:	d903      	bls.n	8005eea <_vfiprintf_r+0x1ee>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0c5      	beq.n	8005e72 <_vfiprintf_r+0x176>
 8005ee6:	9105      	str	r1, [sp, #20]
 8005ee8:	e7c3      	b.n	8005e72 <_vfiprintf_r+0x176>
 8005eea:	fb0c 2101 	mla	r1, ip, r1, r2
 8005eee:	4604      	mov	r4, r0
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e7f0      	b.n	8005ed6 <_vfiprintf_r+0x1da>
 8005ef4:	ab03      	add	r3, sp, #12
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	462a      	mov	r2, r5
 8005efa:	4b16      	ldr	r3, [pc, #88]	; (8005f54 <_vfiprintf_r+0x258>)
 8005efc:	a904      	add	r1, sp, #16
 8005efe:	4630      	mov	r0, r6
 8005f00:	f3af 8000 	nop.w
 8005f04:	4607      	mov	r7, r0
 8005f06:	1c78      	adds	r0, r7, #1
 8005f08:	d1d6      	bne.n	8005eb8 <_vfiprintf_r+0x1bc>
 8005f0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f0c:	07d9      	lsls	r1, r3, #31
 8005f0e:	d405      	bmi.n	8005f1c <_vfiprintf_r+0x220>
 8005f10:	89ab      	ldrh	r3, [r5, #12]
 8005f12:	059a      	lsls	r2, r3, #22
 8005f14:	d402      	bmi.n	8005f1c <_vfiprintf_r+0x220>
 8005f16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f18:	f7ff fe6b 	bl	8005bf2 <__retarget_lock_release_recursive>
 8005f1c:	89ab      	ldrh	r3, [r5, #12]
 8005f1e:	065b      	lsls	r3, r3, #25
 8005f20:	f53f af12 	bmi.w	8005d48 <_vfiprintf_r+0x4c>
 8005f24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f26:	e711      	b.n	8005d4c <_vfiprintf_r+0x50>
 8005f28:	ab03      	add	r3, sp, #12
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	462a      	mov	r2, r5
 8005f2e:	4b09      	ldr	r3, [pc, #36]	; (8005f54 <_vfiprintf_r+0x258>)
 8005f30:	a904      	add	r1, sp, #16
 8005f32:	4630      	mov	r0, r6
 8005f34:	f000 f880 	bl	8006038 <_printf_i>
 8005f38:	e7e4      	b.n	8005f04 <_vfiprintf_r+0x208>
 8005f3a:	bf00      	nop
 8005f3c:	080135f0 	.word	0x080135f0
 8005f40:	08013610 	.word	0x08013610
 8005f44:	080135d0 	.word	0x080135d0
 8005f48:	08013630 	.word	0x08013630
 8005f4c:	0801363a 	.word	0x0801363a
 8005f50:	00000000 	.word	0x00000000
 8005f54:	08005cd7 	.word	0x08005cd7
 8005f58:	08013636 	.word	0x08013636

08005f5c <_printf_common>:
 8005f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f60:	4616      	mov	r6, r2
 8005f62:	4699      	mov	r9, r3
 8005f64:	688a      	ldr	r2, [r1, #8]
 8005f66:	690b      	ldr	r3, [r1, #16]
 8005f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	bfb8      	it	lt
 8005f70:	4613      	movlt	r3, r2
 8005f72:	6033      	str	r3, [r6, #0]
 8005f74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f78:	4607      	mov	r7, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	b10a      	cbz	r2, 8005f82 <_printf_common+0x26>
 8005f7e:	3301      	adds	r3, #1
 8005f80:	6033      	str	r3, [r6, #0]
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	0699      	lsls	r1, r3, #26
 8005f86:	bf42      	ittt	mi
 8005f88:	6833      	ldrmi	r3, [r6, #0]
 8005f8a:	3302      	addmi	r3, #2
 8005f8c:	6033      	strmi	r3, [r6, #0]
 8005f8e:	6825      	ldr	r5, [r4, #0]
 8005f90:	f015 0506 	ands.w	r5, r5, #6
 8005f94:	d106      	bne.n	8005fa4 <_printf_common+0x48>
 8005f96:	f104 0a19 	add.w	sl, r4, #25
 8005f9a:	68e3      	ldr	r3, [r4, #12]
 8005f9c:	6832      	ldr	r2, [r6, #0]
 8005f9e:	1a9b      	subs	r3, r3, r2
 8005fa0:	42ab      	cmp	r3, r5
 8005fa2:	dc26      	bgt.n	8005ff2 <_printf_common+0x96>
 8005fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fa8:	1e13      	subs	r3, r2, #0
 8005faa:	6822      	ldr	r2, [r4, #0]
 8005fac:	bf18      	it	ne
 8005fae:	2301      	movne	r3, #1
 8005fb0:	0692      	lsls	r2, r2, #26
 8005fb2:	d42b      	bmi.n	800600c <_printf_common+0xb0>
 8005fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fb8:	4649      	mov	r1, r9
 8005fba:	4638      	mov	r0, r7
 8005fbc:	47c0      	blx	r8
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	d01e      	beq.n	8006000 <_printf_common+0xa4>
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	68e5      	ldr	r5, [r4, #12]
 8005fc6:	6832      	ldr	r2, [r6, #0]
 8005fc8:	f003 0306 	and.w	r3, r3, #6
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	bf08      	it	eq
 8005fd0:	1aad      	subeq	r5, r5, r2
 8005fd2:	68a3      	ldr	r3, [r4, #8]
 8005fd4:	6922      	ldr	r2, [r4, #16]
 8005fd6:	bf0c      	ite	eq
 8005fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fdc:	2500      	movne	r5, #0
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	bfc4      	itt	gt
 8005fe2:	1a9b      	subgt	r3, r3, r2
 8005fe4:	18ed      	addgt	r5, r5, r3
 8005fe6:	2600      	movs	r6, #0
 8005fe8:	341a      	adds	r4, #26
 8005fea:	42b5      	cmp	r5, r6
 8005fec:	d11a      	bne.n	8006024 <_printf_common+0xc8>
 8005fee:	2000      	movs	r0, #0
 8005ff0:	e008      	b.n	8006004 <_printf_common+0xa8>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	4652      	mov	r2, sl
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	4638      	mov	r0, r7
 8005ffa:	47c0      	blx	r8
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d103      	bne.n	8006008 <_printf_common+0xac>
 8006000:	f04f 30ff 	mov.w	r0, #4294967295
 8006004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006008:	3501      	adds	r5, #1
 800600a:	e7c6      	b.n	8005f9a <_printf_common+0x3e>
 800600c:	18e1      	adds	r1, r4, r3
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	2030      	movs	r0, #48	; 0x30
 8006012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006016:	4422      	add	r2, r4
 8006018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800601c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006020:	3302      	adds	r3, #2
 8006022:	e7c7      	b.n	8005fb4 <_printf_common+0x58>
 8006024:	2301      	movs	r3, #1
 8006026:	4622      	mov	r2, r4
 8006028:	4649      	mov	r1, r9
 800602a:	4638      	mov	r0, r7
 800602c:	47c0      	blx	r8
 800602e:	3001      	adds	r0, #1
 8006030:	d0e6      	beq.n	8006000 <_printf_common+0xa4>
 8006032:	3601      	adds	r6, #1
 8006034:	e7d9      	b.n	8005fea <_printf_common+0x8e>
	...

08006038 <_printf_i>:
 8006038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800603c:	460c      	mov	r4, r1
 800603e:	4691      	mov	r9, r2
 8006040:	7e27      	ldrb	r7, [r4, #24]
 8006042:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006044:	2f78      	cmp	r7, #120	; 0x78
 8006046:	4680      	mov	r8, r0
 8006048:	469a      	mov	sl, r3
 800604a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800604e:	d807      	bhi.n	8006060 <_printf_i+0x28>
 8006050:	2f62      	cmp	r7, #98	; 0x62
 8006052:	d80a      	bhi.n	800606a <_printf_i+0x32>
 8006054:	2f00      	cmp	r7, #0
 8006056:	f000 80d8 	beq.w	800620a <_printf_i+0x1d2>
 800605a:	2f58      	cmp	r7, #88	; 0x58
 800605c:	f000 80a3 	beq.w	80061a6 <_printf_i+0x16e>
 8006060:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006068:	e03a      	b.n	80060e0 <_printf_i+0xa8>
 800606a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800606e:	2b15      	cmp	r3, #21
 8006070:	d8f6      	bhi.n	8006060 <_printf_i+0x28>
 8006072:	a001      	add	r0, pc, #4	; (adr r0, 8006078 <_printf_i+0x40>)
 8006074:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006078:	080060d1 	.word	0x080060d1
 800607c:	080060e5 	.word	0x080060e5
 8006080:	08006061 	.word	0x08006061
 8006084:	08006061 	.word	0x08006061
 8006088:	08006061 	.word	0x08006061
 800608c:	08006061 	.word	0x08006061
 8006090:	080060e5 	.word	0x080060e5
 8006094:	08006061 	.word	0x08006061
 8006098:	08006061 	.word	0x08006061
 800609c:	08006061 	.word	0x08006061
 80060a0:	08006061 	.word	0x08006061
 80060a4:	080061f1 	.word	0x080061f1
 80060a8:	08006115 	.word	0x08006115
 80060ac:	080061d3 	.word	0x080061d3
 80060b0:	08006061 	.word	0x08006061
 80060b4:	08006061 	.word	0x08006061
 80060b8:	08006213 	.word	0x08006213
 80060bc:	08006061 	.word	0x08006061
 80060c0:	08006115 	.word	0x08006115
 80060c4:	08006061 	.word	0x08006061
 80060c8:	08006061 	.word	0x08006061
 80060cc:	080061db 	.word	0x080061db
 80060d0:	680b      	ldr	r3, [r1, #0]
 80060d2:	1d1a      	adds	r2, r3, #4
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	600a      	str	r2, [r1, #0]
 80060d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060e0:	2301      	movs	r3, #1
 80060e2:	e0a3      	b.n	800622c <_printf_i+0x1f4>
 80060e4:	6825      	ldr	r5, [r4, #0]
 80060e6:	6808      	ldr	r0, [r1, #0]
 80060e8:	062e      	lsls	r6, r5, #24
 80060ea:	f100 0304 	add.w	r3, r0, #4
 80060ee:	d50a      	bpl.n	8006106 <_printf_i+0xce>
 80060f0:	6805      	ldr	r5, [r0, #0]
 80060f2:	600b      	str	r3, [r1, #0]
 80060f4:	2d00      	cmp	r5, #0
 80060f6:	da03      	bge.n	8006100 <_printf_i+0xc8>
 80060f8:	232d      	movs	r3, #45	; 0x2d
 80060fa:	426d      	negs	r5, r5
 80060fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006100:	485e      	ldr	r0, [pc, #376]	; (800627c <_printf_i+0x244>)
 8006102:	230a      	movs	r3, #10
 8006104:	e019      	b.n	800613a <_printf_i+0x102>
 8006106:	f015 0f40 	tst.w	r5, #64	; 0x40
 800610a:	6805      	ldr	r5, [r0, #0]
 800610c:	600b      	str	r3, [r1, #0]
 800610e:	bf18      	it	ne
 8006110:	b22d      	sxthne	r5, r5
 8006112:	e7ef      	b.n	80060f4 <_printf_i+0xbc>
 8006114:	680b      	ldr	r3, [r1, #0]
 8006116:	6825      	ldr	r5, [r4, #0]
 8006118:	1d18      	adds	r0, r3, #4
 800611a:	6008      	str	r0, [r1, #0]
 800611c:	0628      	lsls	r0, r5, #24
 800611e:	d501      	bpl.n	8006124 <_printf_i+0xec>
 8006120:	681d      	ldr	r5, [r3, #0]
 8006122:	e002      	b.n	800612a <_printf_i+0xf2>
 8006124:	0669      	lsls	r1, r5, #25
 8006126:	d5fb      	bpl.n	8006120 <_printf_i+0xe8>
 8006128:	881d      	ldrh	r5, [r3, #0]
 800612a:	4854      	ldr	r0, [pc, #336]	; (800627c <_printf_i+0x244>)
 800612c:	2f6f      	cmp	r7, #111	; 0x6f
 800612e:	bf0c      	ite	eq
 8006130:	2308      	moveq	r3, #8
 8006132:	230a      	movne	r3, #10
 8006134:	2100      	movs	r1, #0
 8006136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800613a:	6866      	ldr	r6, [r4, #4]
 800613c:	60a6      	str	r6, [r4, #8]
 800613e:	2e00      	cmp	r6, #0
 8006140:	bfa2      	ittt	ge
 8006142:	6821      	ldrge	r1, [r4, #0]
 8006144:	f021 0104 	bicge.w	r1, r1, #4
 8006148:	6021      	strge	r1, [r4, #0]
 800614a:	b90d      	cbnz	r5, 8006150 <_printf_i+0x118>
 800614c:	2e00      	cmp	r6, #0
 800614e:	d04d      	beq.n	80061ec <_printf_i+0x1b4>
 8006150:	4616      	mov	r6, r2
 8006152:	fbb5 f1f3 	udiv	r1, r5, r3
 8006156:	fb03 5711 	mls	r7, r3, r1, r5
 800615a:	5dc7      	ldrb	r7, [r0, r7]
 800615c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006160:	462f      	mov	r7, r5
 8006162:	42bb      	cmp	r3, r7
 8006164:	460d      	mov	r5, r1
 8006166:	d9f4      	bls.n	8006152 <_printf_i+0x11a>
 8006168:	2b08      	cmp	r3, #8
 800616a:	d10b      	bne.n	8006184 <_printf_i+0x14c>
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	07df      	lsls	r7, r3, #31
 8006170:	d508      	bpl.n	8006184 <_printf_i+0x14c>
 8006172:	6923      	ldr	r3, [r4, #16]
 8006174:	6861      	ldr	r1, [r4, #4]
 8006176:	4299      	cmp	r1, r3
 8006178:	bfde      	ittt	le
 800617a:	2330      	movle	r3, #48	; 0x30
 800617c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006180:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006184:	1b92      	subs	r2, r2, r6
 8006186:	6122      	str	r2, [r4, #16]
 8006188:	f8cd a000 	str.w	sl, [sp]
 800618c:	464b      	mov	r3, r9
 800618e:	aa03      	add	r2, sp, #12
 8006190:	4621      	mov	r1, r4
 8006192:	4640      	mov	r0, r8
 8006194:	f7ff fee2 	bl	8005f5c <_printf_common>
 8006198:	3001      	adds	r0, #1
 800619a:	d14c      	bne.n	8006236 <_printf_i+0x1fe>
 800619c:	f04f 30ff 	mov.w	r0, #4294967295
 80061a0:	b004      	add	sp, #16
 80061a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a6:	4835      	ldr	r0, [pc, #212]	; (800627c <_printf_i+0x244>)
 80061a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	680e      	ldr	r6, [r1, #0]
 80061b0:	061f      	lsls	r7, r3, #24
 80061b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80061b6:	600e      	str	r6, [r1, #0]
 80061b8:	d514      	bpl.n	80061e4 <_printf_i+0x1ac>
 80061ba:	07d9      	lsls	r1, r3, #31
 80061bc:	bf44      	itt	mi
 80061be:	f043 0320 	orrmi.w	r3, r3, #32
 80061c2:	6023      	strmi	r3, [r4, #0]
 80061c4:	b91d      	cbnz	r5, 80061ce <_printf_i+0x196>
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	f023 0320 	bic.w	r3, r3, #32
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	2310      	movs	r3, #16
 80061d0:	e7b0      	b.n	8006134 <_printf_i+0xfc>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	f043 0320 	orr.w	r3, r3, #32
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	2378      	movs	r3, #120	; 0x78
 80061dc:	4828      	ldr	r0, [pc, #160]	; (8006280 <_printf_i+0x248>)
 80061de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061e2:	e7e3      	b.n	80061ac <_printf_i+0x174>
 80061e4:	065e      	lsls	r6, r3, #25
 80061e6:	bf48      	it	mi
 80061e8:	b2ad      	uxthmi	r5, r5
 80061ea:	e7e6      	b.n	80061ba <_printf_i+0x182>
 80061ec:	4616      	mov	r6, r2
 80061ee:	e7bb      	b.n	8006168 <_printf_i+0x130>
 80061f0:	680b      	ldr	r3, [r1, #0]
 80061f2:	6826      	ldr	r6, [r4, #0]
 80061f4:	6960      	ldr	r0, [r4, #20]
 80061f6:	1d1d      	adds	r5, r3, #4
 80061f8:	600d      	str	r5, [r1, #0]
 80061fa:	0635      	lsls	r5, r6, #24
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	d501      	bpl.n	8006204 <_printf_i+0x1cc>
 8006200:	6018      	str	r0, [r3, #0]
 8006202:	e002      	b.n	800620a <_printf_i+0x1d2>
 8006204:	0671      	lsls	r1, r6, #25
 8006206:	d5fb      	bpl.n	8006200 <_printf_i+0x1c8>
 8006208:	8018      	strh	r0, [r3, #0]
 800620a:	2300      	movs	r3, #0
 800620c:	6123      	str	r3, [r4, #16]
 800620e:	4616      	mov	r6, r2
 8006210:	e7ba      	b.n	8006188 <_printf_i+0x150>
 8006212:	680b      	ldr	r3, [r1, #0]
 8006214:	1d1a      	adds	r2, r3, #4
 8006216:	600a      	str	r2, [r1, #0]
 8006218:	681e      	ldr	r6, [r3, #0]
 800621a:	6862      	ldr	r2, [r4, #4]
 800621c:	2100      	movs	r1, #0
 800621e:	4630      	mov	r0, r6
 8006220:	f7f9 ffd6 	bl	80001d0 <memchr>
 8006224:	b108      	cbz	r0, 800622a <_printf_i+0x1f2>
 8006226:	1b80      	subs	r0, r0, r6
 8006228:	6060      	str	r0, [r4, #4]
 800622a:	6863      	ldr	r3, [r4, #4]
 800622c:	6123      	str	r3, [r4, #16]
 800622e:	2300      	movs	r3, #0
 8006230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006234:	e7a8      	b.n	8006188 <_printf_i+0x150>
 8006236:	6923      	ldr	r3, [r4, #16]
 8006238:	4632      	mov	r2, r6
 800623a:	4649      	mov	r1, r9
 800623c:	4640      	mov	r0, r8
 800623e:	47d0      	blx	sl
 8006240:	3001      	adds	r0, #1
 8006242:	d0ab      	beq.n	800619c <_printf_i+0x164>
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	079b      	lsls	r3, r3, #30
 8006248:	d413      	bmi.n	8006272 <_printf_i+0x23a>
 800624a:	68e0      	ldr	r0, [r4, #12]
 800624c:	9b03      	ldr	r3, [sp, #12]
 800624e:	4298      	cmp	r0, r3
 8006250:	bfb8      	it	lt
 8006252:	4618      	movlt	r0, r3
 8006254:	e7a4      	b.n	80061a0 <_printf_i+0x168>
 8006256:	2301      	movs	r3, #1
 8006258:	4632      	mov	r2, r6
 800625a:	4649      	mov	r1, r9
 800625c:	4640      	mov	r0, r8
 800625e:	47d0      	blx	sl
 8006260:	3001      	adds	r0, #1
 8006262:	d09b      	beq.n	800619c <_printf_i+0x164>
 8006264:	3501      	adds	r5, #1
 8006266:	68e3      	ldr	r3, [r4, #12]
 8006268:	9903      	ldr	r1, [sp, #12]
 800626a:	1a5b      	subs	r3, r3, r1
 800626c:	42ab      	cmp	r3, r5
 800626e:	dcf2      	bgt.n	8006256 <_printf_i+0x21e>
 8006270:	e7eb      	b.n	800624a <_printf_i+0x212>
 8006272:	2500      	movs	r5, #0
 8006274:	f104 0619 	add.w	r6, r4, #25
 8006278:	e7f5      	b.n	8006266 <_printf_i+0x22e>
 800627a:	bf00      	nop
 800627c:	08013641 	.word	0x08013641
 8006280:	08013652 	.word	0x08013652

08006284 <_sbrk_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4d06      	ldr	r5, [pc, #24]	; (80062a0 <_sbrk_r+0x1c>)
 8006288:	2300      	movs	r3, #0
 800628a:	4604      	mov	r4, r0
 800628c:	4608      	mov	r0, r1
 800628e:	602b      	str	r3, [r5, #0]
 8006290:	f7fd ffe6 	bl	8004260 <_sbrk>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	d102      	bne.n	800629e <_sbrk_r+0x1a>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	b103      	cbz	r3, 800629e <_sbrk_r+0x1a>
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	bd38      	pop	{r3, r4, r5, pc}
 80062a0:	200001a8 	.word	0x200001a8

080062a4 <__sread>:
 80062a4:	b510      	push	{r4, lr}
 80062a6:	460c      	mov	r4, r1
 80062a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ac:	f000 fab4 	bl	8006818 <_read_r>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	bfab      	itete	ge
 80062b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062b6:	89a3      	ldrhlt	r3, [r4, #12]
 80062b8:	181b      	addge	r3, r3, r0
 80062ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062be:	bfac      	ite	ge
 80062c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80062c2:	81a3      	strhlt	r3, [r4, #12]
 80062c4:	bd10      	pop	{r4, pc}

080062c6 <__swrite>:
 80062c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ca:	461f      	mov	r7, r3
 80062cc:	898b      	ldrh	r3, [r1, #12]
 80062ce:	05db      	lsls	r3, r3, #23
 80062d0:	4605      	mov	r5, r0
 80062d2:	460c      	mov	r4, r1
 80062d4:	4616      	mov	r6, r2
 80062d6:	d505      	bpl.n	80062e4 <__swrite+0x1e>
 80062d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062dc:	2302      	movs	r3, #2
 80062de:	2200      	movs	r2, #0
 80062e0:	f000 f9c8 	bl	8006674 <_lseek_r>
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ee:	81a3      	strh	r3, [r4, #12]
 80062f0:	4632      	mov	r2, r6
 80062f2:	463b      	mov	r3, r7
 80062f4:	4628      	mov	r0, r5
 80062f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062fa:	f000 b869 	b.w	80063d0 <_write_r>

080062fe <__sseek>:
 80062fe:	b510      	push	{r4, lr}
 8006300:	460c      	mov	r4, r1
 8006302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006306:	f000 f9b5 	bl	8006674 <_lseek_r>
 800630a:	1c43      	adds	r3, r0, #1
 800630c:	89a3      	ldrh	r3, [r4, #12]
 800630e:	bf15      	itete	ne
 8006310:	6560      	strne	r0, [r4, #84]	; 0x54
 8006312:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006316:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800631a:	81a3      	strheq	r3, [r4, #12]
 800631c:	bf18      	it	ne
 800631e:	81a3      	strhne	r3, [r4, #12]
 8006320:	bd10      	pop	{r4, pc}

08006322 <__sclose>:
 8006322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006326:	f000 b8d3 	b.w	80064d0 <_close_r>
	...

0800632c <__swbuf_r>:
 800632c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800632e:	460e      	mov	r6, r1
 8006330:	4614      	mov	r4, r2
 8006332:	4605      	mov	r5, r0
 8006334:	b118      	cbz	r0, 800633e <__swbuf_r+0x12>
 8006336:	6983      	ldr	r3, [r0, #24]
 8006338:	b90b      	cbnz	r3, 800633e <__swbuf_r+0x12>
 800633a:	f7ff fbbb 	bl	8005ab4 <__sinit>
 800633e:	4b21      	ldr	r3, [pc, #132]	; (80063c4 <__swbuf_r+0x98>)
 8006340:	429c      	cmp	r4, r3
 8006342:	d12b      	bne.n	800639c <__swbuf_r+0x70>
 8006344:	686c      	ldr	r4, [r5, #4]
 8006346:	69a3      	ldr	r3, [r4, #24]
 8006348:	60a3      	str	r3, [r4, #8]
 800634a:	89a3      	ldrh	r3, [r4, #12]
 800634c:	071a      	lsls	r2, r3, #28
 800634e:	d52f      	bpl.n	80063b0 <__swbuf_r+0x84>
 8006350:	6923      	ldr	r3, [r4, #16]
 8006352:	b36b      	cbz	r3, 80063b0 <__swbuf_r+0x84>
 8006354:	6923      	ldr	r3, [r4, #16]
 8006356:	6820      	ldr	r0, [r4, #0]
 8006358:	1ac0      	subs	r0, r0, r3
 800635a:	6963      	ldr	r3, [r4, #20]
 800635c:	b2f6      	uxtb	r6, r6
 800635e:	4283      	cmp	r3, r0
 8006360:	4637      	mov	r7, r6
 8006362:	dc04      	bgt.n	800636e <__swbuf_r+0x42>
 8006364:	4621      	mov	r1, r4
 8006366:	4628      	mov	r0, r5
 8006368:	f000 f948 	bl	80065fc <_fflush_r>
 800636c:	bb30      	cbnz	r0, 80063bc <__swbuf_r+0x90>
 800636e:	68a3      	ldr	r3, [r4, #8]
 8006370:	3b01      	subs	r3, #1
 8006372:	60a3      	str	r3, [r4, #8]
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	6022      	str	r2, [r4, #0]
 800637a:	701e      	strb	r6, [r3, #0]
 800637c:	6963      	ldr	r3, [r4, #20]
 800637e:	3001      	adds	r0, #1
 8006380:	4283      	cmp	r3, r0
 8006382:	d004      	beq.n	800638e <__swbuf_r+0x62>
 8006384:	89a3      	ldrh	r3, [r4, #12]
 8006386:	07db      	lsls	r3, r3, #31
 8006388:	d506      	bpl.n	8006398 <__swbuf_r+0x6c>
 800638a:	2e0a      	cmp	r6, #10
 800638c:	d104      	bne.n	8006398 <__swbuf_r+0x6c>
 800638e:	4621      	mov	r1, r4
 8006390:	4628      	mov	r0, r5
 8006392:	f000 f933 	bl	80065fc <_fflush_r>
 8006396:	b988      	cbnz	r0, 80063bc <__swbuf_r+0x90>
 8006398:	4638      	mov	r0, r7
 800639a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800639c:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <__swbuf_r+0x9c>)
 800639e:	429c      	cmp	r4, r3
 80063a0:	d101      	bne.n	80063a6 <__swbuf_r+0x7a>
 80063a2:	68ac      	ldr	r4, [r5, #8]
 80063a4:	e7cf      	b.n	8006346 <__swbuf_r+0x1a>
 80063a6:	4b09      	ldr	r3, [pc, #36]	; (80063cc <__swbuf_r+0xa0>)
 80063a8:	429c      	cmp	r4, r3
 80063aa:	bf08      	it	eq
 80063ac:	68ec      	ldreq	r4, [r5, #12]
 80063ae:	e7ca      	b.n	8006346 <__swbuf_r+0x1a>
 80063b0:	4621      	mov	r1, r4
 80063b2:	4628      	mov	r0, r5
 80063b4:	f000 f81e 	bl	80063f4 <__swsetup_r>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d0cb      	beq.n	8006354 <__swbuf_r+0x28>
 80063bc:	f04f 37ff 	mov.w	r7, #4294967295
 80063c0:	e7ea      	b.n	8006398 <__swbuf_r+0x6c>
 80063c2:	bf00      	nop
 80063c4:	080135f0 	.word	0x080135f0
 80063c8:	08013610 	.word	0x08013610
 80063cc:	080135d0 	.word	0x080135d0

080063d0 <_write_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	4d07      	ldr	r5, [pc, #28]	; (80063f0 <_write_r+0x20>)
 80063d4:	4604      	mov	r4, r0
 80063d6:	4608      	mov	r0, r1
 80063d8:	4611      	mov	r1, r2
 80063da:	2200      	movs	r2, #0
 80063dc:	602a      	str	r2, [r5, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	f7fd feed 	bl	80041be <_write>
 80063e4:	1c43      	adds	r3, r0, #1
 80063e6:	d102      	bne.n	80063ee <_write_r+0x1e>
 80063e8:	682b      	ldr	r3, [r5, #0]
 80063ea:	b103      	cbz	r3, 80063ee <_write_r+0x1e>
 80063ec:	6023      	str	r3, [r4, #0]
 80063ee:	bd38      	pop	{r3, r4, r5, pc}
 80063f0:	200001a8 	.word	0x200001a8

080063f4 <__swsetup_r>:
 80063f4:	4b32      	ldr	r3, [pc, #200]	; (80064c0 <__swsetup_r+0xcc>)
 80063f6:	b570      	push	{r4, r5, r6, lr}
 80063f8:	681d      	ldr	r5, [r3, #0]
 80063fa:	4606      	mov	r6, r0
 80063fc:	460c      	mov	r4, r1
 80063fe:	b125      	cbz	r5, 800640a <__swsetup_r+0x16>
 8006400:	69ab      	ldr	r3, [r5, #24]
 8006402:	b913      	cbnz	r3, 800640a <__swsetup_r+0x16>
 8006404:	4628      	mov	r0, r5
 8006406:	f7ff fb55 	bl	8005ab4 <__sinit>
 800640a:	4b2e      	ldr	r3, [pc, #184]	; (80064c4 <__swsetup_r+0xd0>)
 800640c:	429c      	cmp	r4, r3
 800640e:	d10f      	bne.n	8006430 <__swsetup_r+0x3c>
 8006410:	686c      	ldr	r4, [r5, #4]
 8006412:	89a3      	ldrh	r3, [r4, #12]
 8006414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006418:	0719      	lsls	r1, r3, #28
 800641a:	d42c      	bmi.n	8006476 <__swsetup_r+0x82>
 800641c:	06dd      	lsls	r5, r3, #27
 800641e:	d411      	bmi.n	8006444 <__swsetup_r+0x50>
 8006420:	2309      	movs	r3, #9
 8006422:	6033      	str	r3, [r6, #0]
 8006424:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006428:	81a3      	strh	r3, [r4, #12]
 800642a:	f04f 30ff 	mov.w	r0, #4294967295
 800642e:	e03e      	b.n	80064ae <__swsetup_r+0xba>
 8006430:	4b25      	ldr	r3, [pc, #148]	; (80064c8 <__swsetup_r+0xd4>)
 8006432:	429c      	cmp	r4, r3
 8006434:	d101      	bne.n	800643a <__swsetup_r+0x46>
 8006436:	68ac      	ldr	r4, [r5, #8]
 8006438:	e7eb      	b.n	8006412 <__swsetup_r+0x1e>
 800643a:	4b24      	ldr	r3, [pc, #144]	; (80064cc <__swsetup_r+0xd8>)
 800643c:	429c      	cmp	r4, r3
 800643e:	bf08      	it	eq
 8006440:	68ec      	ldreq	r4, [r5, #12]
 8006442:	e7e6      	b.n	8006412 <__swsetup_r+0x1e>
 8006444:	0758      	lsls	r0, r3, #29
 8006446:	d512      	bpl.n	800646e <__swsetup_r+0x7a>
 8006448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800644a:	b141      	cbz	r1, 800645e <__swsetup_r+0x6a>
 800644c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006450:	4299      	cmp	r1, r3
 8006452:	d002      	beq.n	800645a <__swsetup_r+0x66>
 8006454:	4630      	mov	r0, r6
 8006456:	f000 f98f 	bl	8006778 <_free_r>
 800645a:	2300      	movs	r3, #0
 800645c:	6363      	str	r3, [r4, #52]	; 0x34
 800645e:	89a3      	ldrh	r3, [r4, #12]
 8006460:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006464:	81a3      	strh	r3, [r4, #12]
 8006466:	2300      	movs	r3, #0
 8006468:	6063      	str	r3, [r4, #4]
 800646a:	6923      	ldr	r3, [r4, #16]
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	89a3      	ldrh	r3, [r4, #12]
 8006470:	f043 0308 	orr.w	r3, r3, #8
 8006474:	81a3      	strh	r3, [r4, #12]
 8006476:	6923      	ldr	r3, [r4, #16]
 8006478:	b94b      	cbnz	r3, 800648e <__swsetup_r+0x9a>
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006484:	d003      	beq.n	800648e <__swsetup_r+0x9a>
 8006486:	4621      	mov	r1, r4
 8006488:	4630      	mov	r0, r6
 800648a:	f000 f929 	bl	80066e0 <__smakebuf_r>
 800648e:	89a0      	ldrh	r0, [r4, #12]
 8006490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006494:	f010 0301 	ands.w	r3, r0, #1
 8006498:	d00a      	beq.n	80064b0 <__swsetup_r+0xbc>
 800649a:	2300      	movs	r3, #0
 800649c:	60a3      	str	r3, [r4, #8]
 800649e:	6963      	ldr	r3, [r4, #20]
 80064a0:	425b      	negs	r3, r3
 80064a2:	61a3      	str	r3, [r4, #24]
 80064a4:	6923      	ldr	r3, [r4, #16]
 80064a6:	b943      	cbnz	r3, 80064ba <__swsetup_r+0xc6>
 80064a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064ac:	d1ba      	bne.n	8006424 <__swsetup_r+0x30>
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
 80064b0:	0781      	lsls	r1, r0, #30
 80064b2:	bf58      	it	pl
 80064b4:	6963      	ldrpl	r3, [r4, #20]
 80064b6:	60a3      	str	r3, [r4, #8]
 80064b8:	e7f4      	b.n	80064a4 <__swsetup_r+0xb0>
 80064ba:	2000      	movs	r0, #0
 80064bc:	e7f7      	b.n	80064ae <__swsetup_r+0xba>
 80064be:	bf00      	nop
 80064c0:	20000014 	.word	0x20000014
 80064c4:	080135f0 	.word	0x080135f0
 80064c8:	08013610 	.word	0x08013610
 80064cc:	080135d0 	.word	0x080135d0

080064d0 <_close_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4d06      	ldr	r5, [pc, #24]	; (80064ec <_close_r+0x1c>)
 80064d4:	2300      	movs	r3, #0
 80064d6:	4604      	mov	r4, r0
 80064d8:	4608      	mov	r0, r1
 80064da:	602b      	str	r3, [r5, #0]
 80064dc:	f7fd fe8b 	bl	80041f6 <_close>
 80064e0:	1c43      	adds	r3, r0, #1
 80064e2:	d102      	bne.n	80064ea <_close_r+0x1a>
 80064e4:	682b      	ldr	r3, [r5, #0]
 80064e6:	b103      	cbz	r3, 80064ea <_close_r+0x1a>
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	bd38      	pop	{r3, r4, r5, pc}
 80064ec:	200001a8 	.word	0x200001a8

080064f0 <__sflush_r>:
 80064f0:	898a      	ldrh	r2, [r1, #12]
 80064f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f6:	4605      	mov	r5, r0
 80064f8:	0710      	lsls	r0, r2, #28
 80064fa:	460c      	mov	r4, r1
 80064fc:	d458      	bmi.n	80065b0 <__sflush_r+0xc0>
 80064fe:	684b      	ldr	r3, [r1, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	dc05      	bgt.n	8006510 <__sflush_r+0x20>
 8006504:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006506:	2b00      	cmp	r3, #0
 8006508:	dc02      	bgt.n	8006510 <__sflush_r+0x20>
 800650a:	2000      	movs	r0, #0
 800650c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006512:	2e00      	cmp	r6, #0
 8006514:	d0f9      	beq.n	800650a <__sflush_r+0x1a>
 8006516:	2300      	movs	r3, #0
 8006518:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800651c:	682f      	ldr	r7, [r5, #0]
 800651e:	602b      	str	r3, [r5, #0]
 8006520:	d032      	beq.n	8006588 <__sflush_r+0x98>
 8006522:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	075a      	lsls	r2, r3, #29
 8006528:	d505      	bpl.n	8006536 <__sflush_r+0x46>
 800652a:	6863      	ldr	r3, [r4, #4]
 800652c:	1ac0      	subs	r0, r0, r3
 800652e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006530:	b10b      	cbz	r3, 8006536 <__sflush_r+0x46>
 8006532:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006534:	1ac0      	subs	r0, r0, r3
 8006536:	2300      	movs	r3, #0
 8006538:	4602      	mov	r2, r0
 800653a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800653c:	6a21      	ldr	r1, [r4, #32]
 800653e:	4628      	mov	r0, r5
 8006540:	47b0      	blx	r6
 8006542:	1c43      	adds	r3, r0, #1
 8006544:	89a3      	ldrh	r3, [r4, #12]
 8006546:	d106      	bne.n	8006556 <__sflush_r+0x66>
 8006548:	6829      	ldr	r1, [r5, #0]
 800654a:	291d      	cmp	r1, #29
 800654c:	d82c      	bhi.n	80065a8 <__sflush_r+0xb8>
 800654e:	4a2a      	ldr	r2, [pc, #168]	; (80065f8 <__sflush_r+0x108>)
 8006550:	40ca      	lsrs	r2, r1
 8006552:	07d6      	lsls	r6, r2, #31
 8006554:	d528      	bpl.n	80065a8 <__sflush_r+0xb8>
 8006556:	2200      	movs	r2, #0
 8006558:	6062      	str	r2, [r4, #4]
 800655a:	04d9      	lsls	r1, r3, #19
 800655c:	6922      	ldr	r2, [r4, #16]
 800655e:	6022      	str	r2, [r4, #0]
 8006560:	d504      	bpl.n	800656c <__sflush_r+0x7c>
 8006562:	1c42      	adds	r2, r0, #1
 8006564:	d101      	bne.n	800656a <__sflush_r+0x7a>
 8006566:	682b      	ldr	r3, [r5, #0]
 8006568:	b903      	cbnz	r3, 800656c <__sflush_r+0x7c>
 800656a:	6560      	str	r0, [r4, #84]	; 0x54
 800656c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800656e:	602f      	str	r7, [r5, #0]
 8006570:	2900      	cmp	r1, #0
 8006572:	d0ca      	beq.n	800650a <__sflush_r+0x1a>
 8006574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006578:	4299      	cmp	r1, r3
 800657a:	d002      	beq.n	8006582 <__sflush_r+0x92>
 800657c:	4628      	mov	r0, r5
 800657e:	f000 f8fb 	bl	8006778 <_free_r>
 8006582:	2000      	movs	r0, #0
 8006584:	6360      	str	r0, [r4, #52]	; 0x34
 8006586:	e7c1      	b.n	800650c <__sflush_r+0x1c>
 8006588:	6a21      	ldr	r1, [r4, #32]
 800658a:	2301      	movs	r3, #1
 800658c:	4628      	mov	r0, r5
 800658e:	47b0      	blx	r6
 8006590:	1c41      	adds	r1, r0, #1
 8006592:	d1c7      	bne.n	8006524 <__sflush_r+0x34>
 8006594:	682b      	ldr	r3, [r5, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0c4      	beq.n	8006524 <__sflush_r+0x34>
 800659a:	2b1d      	cmp	r3, #29
 800659c:	d001      	beq.n	80065a2 <__sflush_r+0xb2>
 800659e:	2b16      	cmp	r3, #22
 80065a0:	d101      	bne.n	80065a6 <__sflush_r+0xb6>
 80065a2:	602f      	str	r7, [r5, #0]
 80065a4:	e7b1      	b.n	800650a <__sflush_r+0x1a>
 80065a6:	89a3      	ldrh	r3, [r4, #12]
 80065a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ac:	81a3      	strh	r3, [r4, #12]
 80065ae:	e7ad      	b.n	800650c <__sflush_r+0x1c>
 80065b0:	690f      	ldr	r7, [r1, #16]
 80065b2:	2f00      	cmp	r7, #0
 80065b4:	d0a9      	beq.n	800650a <__sflush_r+0x1a>
 80065b6:	0793      	lsls	r3, r2, #30
 80065b8:	680e      	ldr	r6, [r1, #0]
 80065ba:	bf08      	it	eq
 80065bc:	694b      	ldreq	r3, [r1, #20]
 80065be:	600f      	str	r7, [r1, #0]
 80065c0:	bf18      	it	ne
 80065c2:	2300      	movne	r3, #0
 80065c4:	eba6 0807 	sub.w	r8, r6, r7
 80065c8:	608b      	str	r3, [r1, #8]
 80065ca:	f1b8 0f00 	cmp.w	r8, #0
 80065ce:	dd9c      	ble.n	800650a <__sflush_r+0x1a>
 80065d0:	6a21      	ldr	r1, [r4, #32]
 80065d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065d4:	4643      	mov	r3, r8
 80065d6:	463a      	mov	r2, r7
 80065d8:	4628      	mov	r0, r5
 80065da:	47b0      	blx	r6
 80065dc:	2800      	cmp	r0, #0
 80065de:	dc06      	bgt.n	80065ee <__sflush_r+0xfe>
 80065e0:	89a3      	ldrh	r3, [r4, #12]
 80065e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065e6:	81a3      	strh	r3, [r4, #12]
 80065e8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ec:	e78e      	b.n	800650c <__sflush_r+0x1c>
 80065ee:	4407      	add	r7, r0
 80065f0:	eba8 0800 	sub.w	r8, r8, r0
 80065f4:	e7e9      	b.n	80065ca <__sflush_r+0xda>
 80065f6:	bf00      	nop
 80065f8:	20400001 	.word	0x20400001

080065fc <_fflush_r>:
 80065fc:	b538      	push	{r3, r4, r5, lr}
 80065fe:	690b      	ldr	r3, [r1, #16]
 8006600:	4605      	mov	r5, r0
 8006602:	460c      	mov	r4, r1
 8006604:	b913      	cbnz	r3, 800660c <_fflush_r+0x10>
 8006606:	2500      	movs	r5, #0
 8006608:	4628      	mov	r0, r5
 800660a:	bd38      	pop	{r3, r4, r5, pc}
 800660c:	b118      	cbz	r0, 8006616 <_fflush_r+0x1a>
 800660e:	6983      	ldr	r3, [r0, #24]
 8006610:	b90b      	cbnz	r3, 8006616 <_fflush_r+0x1a>
 8006612:	f7ff fa4f 	bl	8005ab4 <__sinit>
 8006616:	4b14      	ldr	r3, [pc, #80]	; (8006668 <_fflush_r+0x6c>)
 8006618:	429c      	cmp	r4, r3
 800661a:	d11b      	bne.n	8006654 <_fflush_r+0x58>
 800661c:	686c      	ldr	r4, [r5, #4]
 800661e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0ef      	beq.n	8006606 <_fflush_r+0xa>
 8006626:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006628:	07d0      	lsls	r0, r2, #31
 800662a:	d404      	bmi.n	8006636 <_fflush_r+0x3a>
 800662c:	0599      	lsls	r1, r3, #22
 800662e:	d402      	bmi.n	8006636 <_fflush_r+0x3a>
 8006630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006632:	f7ff fadd 	bl	8005bf0 <__retarget_lock_acquire_recursive>
 8006636:	4628      	mov	r0, r5
 8006638:	4621      	mov	r1, r4
 800663a:	f7ff ff59 	bl	80064f0 <__sflush_r>
 800663e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006640:	07da      	lsls	r2, r3, #31
 8006642:	4605      	mov	r5, r0
 8006644:	d4e0      	bmi.n	8006608 <_fflush_r+0xc>
 8006646:	89a3      	ldrh	r3, [r4, #12]
 8006648:	059b      	lsls	r3, r3, #22
 800664a:	d4dd      	bmi.n	8006608 <_fflush_r+0xc>
 800664c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800664e:	f7ff fad0 	bl	8005bf2 <__retarget_lock_release_recursive>
 8006652:	e7d9      	b.n	8006608 <_fflush_r+0xc>
 8006654:	4b05      	ldr	r3, [pc, #20]	; (800666c <_fflush_r+0x70>)
 8006656:	429c      	cmp	r4, r3
 8006658:	d101      	bne.n	800665e <_fflush_r+0x62>
 800665a:	68ac      	ldr	r4, [r5, #8]
 800665c:	e7df      	b.n	800661e <_fflush_r+0x22>
 800665e:	4b04      	ldr	r3, [pc, #16]	; (8006670 <_fflush_r+0x74>)
 8006660:	429c      	cmp	r4, r3
 8006662:	bf08      	it	eq
 8006664:	68ec      	ldreq	r4, [r5, #12]
 8006666:	e7da      	b.n	800661e <_fflush_r+0x22>
 8006668:	080135f0 	.word	0x080135f0
 800666c:	08013610 	.word	0x08013610
 8006670:	080135d0 	.word	0x080135d0

08006674 <_lseek_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4d07      	ldr	r5, [pc, #28]	; (8006694 <_lseek_r+0x20>)
 8006678:	4604      	mov	r4, r0
 800667a:	4608      	mov	r0, r1
 800667c:	4611      	mov	r1, r2
 800667e:	2200      	movs	r2, #0
 8006680:	602a      	str	r2, [r5, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	f7fd fdde 	bl	8004244 <_lseek>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	d102      	bne.n	8006692 <_lseek_r+0x1e>
 800668c:	682b      	ldr	r3, [r5, #0]
 800668e:	b103      	cbz	r3, 8006692 <_lseek_r+0x1e>
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	200001a8 	.word	0x200001a8

08006698 <__swhatbuf_r>:
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	460e      	mov	r6, r1
 800669c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a0:	2900      	cmp	r1, #0
 80066a2:	b096      	sub	sp, #88	; 0x58
 80066a4:	4614      	mov	r4, r2
 80066a6:	461d      	mov	r5, r3
 80066a8:	da07      	bge.n	80066ba <__swhatbuf_r+0x22>
 80066aa:	2300      	movs	r3, #0
 80066ac:	602b      	str	r3, [r5, #0]
 80066ae:	89b3      	ldrh	r3, [r6, #12]
 80066b0:	061a      	lsls	r2, r3, #24
 80066b2:	d410      	bmi.n	80066d6 <__swhatbuf_r+0x3e>
 80066b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066b8:	e00e      	b.n	80066d8 <__swhatbuf_r+0x40>
 80066ba:	466a      	mov	r2, sp
 80066bc:	f000 f8be 	bl	800683c <_fstat_r>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	dbf2      	blt.n	80066aa <__swhatbuf_r+0x12>
 80066c4:	9a01      	ldr	r2, [sp, #4]
 80066c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80066ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80066ce:	425a      	negs	r2, r3
 80066d0:	415a      	adcs	r2, r3
 80066d2:	602a      	str	r2, [r5, #0]
 80066d4:	e7ee      	b.n	80066b4 <__swhatbuf_r+0x1c>
 80066d6:	2340      	movs	r3, #64	; 0x40
 80066d8:	2000      	movs	r0, #0
 80066da:	6023      	str	r3, [r4, #0]
 80066dc:	b016      	add	sp, #88	; 0x58
 80066de:	bd70      	pop	{r4, r5, r6, pc}

080066e0 <__smakebuf_r>:
 80066e0:	898b      	ldrh	r3, [r1, #12]
 80066e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066e4:	079d      	lsls	r5, r3, #30
 80066e6:	4606      	mov	r6, r0
 80066e8:	460c      	mov	r4, r1
 80066ea:	d507      	bpl.n	80066fc <__smakebuf_r+0x1c>
 80066ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	6123      	str	r3, [r4, #16]
 80066f4:	2301      	movs	r3, #1
 80066f6:	6163      	str	r3, [r4, #20]
 80066f8:	b002      	add	sp, #8
 80066fa:	bd70      	pop	{r4, r5, r6, pc}
 80066fc:	ab01      	add	r3, sp, #4
 80066fe:	466a      	mov	r2, sp
 8006700:	f7ff ffca 	bl	8006698 <__swhatbuf_r>
 8006704:	9900      	ldr	r1, [sp, #0]
 8006706:	4605      	mov	r5, r0
 8006708:	4630      	mov	r0, r6
 800670a:	f7ff fa73 	bl	8005bf4 <_malloc_r>
 800670e:	b948      	cbnz	r0, 8006724 <__smakebuf_r+0x44>
 8006710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006714:	059a      	lsls	r2, r3, #22
 8006716:	d4ef      	bmi.n	80066f8 <__smakebuf_r+0x18>
 8006718:	f023 0303 	bic.w	r3, r3, #3
 800671c:	f043 0302 	orr.w	r3, r3, #2
 8006720:	81a3      	strh	r3, [r4, #12]
 8006722:	e7e3      	b.n	80066ec <__smakebuf_r+0xc>
 8006724:	4b0d      	ldr	r3, [pc, #52]	; (800675c <__smakebuf_r+0x7c>)
 8006726:	62b3      	str	r3, [r6, #40]	; 0x28
 8006728:	89a3      	ldrh	r3, [r4, #12]
 800672a:	6020      	str	r0, [r4, #0]
 800672c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	9b00      	ldr	r3, [sp, #0]
 8006734:	6163      	str	r3, [r4, #20]
 8006736:	9b01      	ldr	r3, [sp, #4]
 8006738:	6120      	str	r0, [r4, #16]
 800673a:	b15b      	cbz	r3, 8006754 <__smakebuf_r+0x74>
 800673c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006740:	4630      	mov	r0, r6
 8006742:	f000 f88d 	bl	8006860 <_isatty_r>
 8006746:	b128      	cbz	r0, 8006754 <__smakebuf_r+0x74>
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	f023 0303 	bic.w	r3, r3, #3
 800674e:	f043 0301 	orr.w	r3, r3, #1
 8006752:	81a3      	strh	r3, [r4, #12]
 8006754:	89a0      	ldrh	r0, [r4, #12]
 8006756:	4305      	orrs	r5, r0
 8006758:	81a5      	strh	r5, [r4, #12]
 800675a:	e7cd      	b.n	80066f8 <__smakebuf_r+0x18>
 800675c:	08005a4d 	.word	0x08005a4d

08006760 <__malloc_lock>:
 8006760:	4801      	ldr	r0, [pc, #4]	; (8006768 <__malloc_lock+0x8>)
 8006762:	f7ff ba45 	b.w	8005bf0 <__retarget_lock_acquire_recursive>
 8006766:	bf00      	nop
 8006768:	200001a0 	.word	0x200001a0

0800676c <__malloc_unlock>:
 800676c:	4801      	ldr	r0, [pc, #4]	; (8006774 <__malloc_unlock+0x8>)
 800676e:	f7ff ba40 	b.w	8005bf2 <__retarget_lock_release_recursive>
 8006772:	bf00      	nop
 8006774:	200001a0 	.word	0x200001a0

08006778 <_free_r>:
 8006778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800677a:	2900      	cmp	r1, #0
 800677c:	d048      	beq.n	8006810 <_free_r+0x98>
 800677e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006782:	9001      	str	r0, [sp, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	f1a1 0404 	sub.w	r4, r1, #4
 800678a:	bfb8      	it	lt
 800678c:	18e4      	addlt	r4, r4, r3
 800678e:	f7ff ffe7 	bl	8006760 <__malloc_lock>
 8006792:	4a20      	ldr	r2, [pc, #128]	; (8006814 <_free_r+0x9c>)
 8006794:	9801      	ldr	r0, [sp, #4]
 8006796:	6813      	ldr	r3, [r2, #0]
 8006798:	4615      	mov	r5, r2
 800679a:	b933      	cbnz	r3, 80067aa <_free_r+0x32>
 800679c:	6063      	str	r3, [r4, #4]
 800679e:	6014      	str	r4, [r2, #0]
 80067a0:	b003      	add	sp, #12
 80067a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067a6:	f7ff bfe1 	b.w	800676c <__malloc_unlock>
 80067aa:	42a3      	cmp	r3, r4
 80067ac:	d90b      	bls.n	80067c6 <_free_r+0x4e>
 80067ae:	6821      	ldr	r1, [r4, #0]
 80067b0:	1862      	adds	r2, r4, r1
 80067b2:	4293      	cmp	r3, r2
 80067b4:	bf04      	itt	eq
 80067b6:	681a      	ldreq	r2, [r3, #0]
 80067b8:	685b      	ldreq	r3, [r3, #4]
 80067ba:	6063      	str	r3, [r4, #4]
 80067bc:	bf04      	itt	eq
 80067be:	1852      	addeq	r2, r2, r1
 80067c0:	6022      	streq	r2, [r4, #0]
 80067c2:	602c      	str	r4, [r5, #0]
 80067c4:	e7ec      	b.n	80067a0 <_free_r+0x28>
 80067c6:	461a      	mov	r2, r3
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	b10b      	cbz	r3, 80067d0 <_free_r+0x58>
 80067cc:	42a3      	cmp	r3, r4
 80067ce:	d9fa      	bls.n	80067c6 <_free_r+0x4e>
 80067d0:	6811      	ldr	r1, [r2, #0]
 80067d2:	1855      	adds	r5, r2, r1
 80067d4:	42a5      	cmp	r5, r4
 80067d6:	d10b      	bne.n	80067f0 <_free_r+0x78>
 80067d8:	6824      	ldr	r4, [r4, #0]
 80067da:	4421      	add	r1, r4
 80067dc:	1854      	adds	r4, r2, r1
 80067de:	42a3      	cmp	r3, r4
 80067e0:	6011      	str	r1, [r2, #0]
 80067e2:	d1dd      	bne.n	80067a0 <_free_r+0x28>
 80067e4:	681c      	ldr	r4, [r3, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	6053      	str	r3, [r2, #4]
 80067ea:	4421      	add	r1, r4
 80067ec:	6011      	str	r1, [r2, #0]
 80067ee:	e7d7      	b.n	80067a0 <_free_r+0x28>
 80067f0:	d902      	bls.n	80067f8 <_free_r+0x80>
 80067f2:	230c      	movs	r3, #12
 80067f4:	6003      	str	r3, [r0, #0]
 80067f6:	e7d3      	b.n	80067a0 <_free_r+0x28>
 80067f8:	6825      	ldr	r5, [r4, #0]
 80067fa:	1961      	adds	r1, r4, r5
 80067fc:	428b      	cmp	r3, r1
 80067fe:	bf04      	itt	eq
 8006800:	6819      	ldreq	r1, [r3, #0]
 8006802:	685b      	ldreq	r3, [r3, #4]
 8006804:	6063      	str	r3, [r4, #4]
 8006806:	bf04      	itt	eq
 8006808:	1949      	addeq	r1, r1, r5
 800680a:	6021      	streq	r1, [r4, #0]
 800680c:	6054      	str	r4, [r2, #4]
 800680e:	e7c7      	b.n	80067a0 <_free_r+0x28>
 8006810:	b003      	add	sp, #12
 8006812:	bd30      	pop	{r4, r5, pc}
 8006814:	2000009c 	.word	0x2000009c

08006818 <_read_r>:
 8006818:	b538      	push	{r3, r4, r5, lr}
 800681a:	4d07      	ldr	r5, [pc, #28]	; (8006838 <_read_r+0x20>)
 800681c:	4604      	mov	r4, r0
 800681e:	4608      	mov	r0, r1
 8006820:	4611      	mov	r1, r2
 8006822:	2200      	movs	r2, #0
 8006824:	602a      	str	r2, [r5, #0]
 8006826:	461a      	mov	r2, r3
 8006828:	f7fd fcac 	bl	8004184 <_read>
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	d102      	bne.n	8006836 <_read_r+0x1e>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	b103      	cbz	r3, 8006836 <_read_r+0x1e>
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	bd38      	pop	{r3, r4, r5, pc}
 8006838:	200001a8 	.word	0x200001a8

0800683c <_fstat_r>:
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	4d07      	ldr	r5, [pc, #28]	; (800685c <_fstat_r+0x20>)
 8006840:	2300      	movs	r3, #0
 8006842:	4604      	mov	r4, r0
 8006844:	4608      	mov	r0, r1
 8006846:	4611      	mov	r1, r2
 8006848:	602b      	str	r3, [r5, #0]
 800684a:	f7fd fce0 	bl	800420e <_fstat>
 800684e:	1c43      	adds	r3, r0, #1
 8006850:	d102      	bne.n	8006858 <_fstat_r+0x1c>
 8006852:	682b      	ldr	r3, [r5, #0]
 8006854:	b103      	cbz	r3, 8006858 <_fstat_r+0x1c>
 8006856:	6023      	str	r3, [r4, #0]
 8006858:	bd38      	pop	{r3, r4, r5, pc}
 800685a:	bf00      	nop
 800685c:	200001a8 	.word	0x200001a8

08006860 <_isatty_r>:
 8006860:	b538      	push	{r3, r4, r5, lr}
 8006862:	4d06      	ldr	r5, [pc, #24]	; (800687c <_isatty_r+0x1c>)
 8006864:	2300      	movs	r3, #0
 8006866:	4604      	mov	r4, r0
 8006868:	4608      	mov	r0, r1
 800686a:	602b      	str	r3, [r5, #0]
 800686c:	f7fd fcdf 	bl	800422e <_isatty>
 8006870:	1c43      	adds	r3, r0, #1
 8006872:	d102      	bne.n	800687a <_isatty_r+0x1a>
 8006874:	682b      	ldr	r3, [r5, #0]
 8006876:	b103      	cbz	r3, 800687a <_isatty_r+0x1a>
 8006878:	6023      	str	r3, [r4, #0]
 800687a:	bd38      	pop	{r3, r4, r5, pc}
 800687c:	200001a8 	.word	0x200001a8

08006880 <_init>:
 8006880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006882:	bf00      	nop
 8006884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006886:	bc08      	pop	{r3}
 8006888:	469e      	mov	lr, r3
 800688a:	4770      	bx	lr

0800688c <_fini>:
 800688c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688e:	bf00      	nop
 8006890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006892:	bc08      	pop	{r3}
 8006894:	469e      	mov	lr, r3
 8006896:	4770      	bx	lr
