
F407_05.REMOTE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009db4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d1f4  08009f48  08009f48  00019f48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801713c  0801713c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801713c  0801713c  0002713c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017144  08017144  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017144  08017144  00027144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017148  08017148  00027148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801714c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  200001e4  08017330  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08017330  000303e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d61  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d6c  00000000  00000000  00043f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00046ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  00047c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004c59  00000000  00000000  00048aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126b3  00000000  00000000  0004d6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf85b  00000000  00000000  0005fdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012f607  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005008  00000000  00000000  0012f65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f2c 	.word	0x08009f2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009f2c 	.word	0x08009f2c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <HAL_TIM_PeriodElapsedCallback>:
uint16_t Dval;		//下降沿时计数器的值
uint32_t RmtRec = 0;	//红外接收到的数据
uint8_t RmtCnt = 0;	//按键按下的次数

//定时器更新（溢出）中断回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d133      	bne.n	8000f5a <HAL_TIM_PeriodElapsedCallback+0x7a>
		if (RmtSta & 0x80)	//上次有数据被接收到了
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b25b      	sxtb	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	da2e      	bge.n	8000f5a <HAL_TIM_PeriodElapsedCallback+0x7a>
				{
			RmtSta &= ~0X10;						//取消上升沿已经被捕获标记
 8000efc:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	f023 0310 	bic.w	r3, r3, #16
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f08:	701a      	strb	r2, [r3, #0]
			if ((RmtSta & 0X0F) == 0X00)
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d106      	bne.n	8000f24 <HAL_TIM_PeriodElapsedCallback+0x44>
				RmtSta |= 1 << 6;						//标记已经完成一次按键的键值信息采集
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f22:	701a      	strb	r2, [r3, #0]
			if ((RmtSta & 0X0F) < 14)
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	f003 030f 	and.w	r3, r3, #15
 8000f2c:	2b0d      	cmp	r3, #13
 8000f2e:	dc06      	bgt.n	8000f3e <HAL_TIM_PeriodElapsedCallback+0x5e>
				RmtSta++;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f3a:	701a      	strb	r2, [r3, #0]
				RmtSta &= 0XF0;	//清空计数器
			}
		}

	}
}
 8000f3c:	e00d      	b.n	8000f5a <HAL_TIM_PeriodElapsedCallback+0x7a>
				RmtSta &= ~(1 << 7);						//清空引导标识
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f4a:	701a      	strb	r2, [r3, #0]
				RmtSta &= 0XF0;	//清空计数器
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	f023 030f 	bic.w	r3, r3, #15
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f58:	701a      	strb	r2, [r3, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40010000 	.word	0x40010000
 8000f6c:	20000200 	.word	0x20000200

08000f70 <HAL_TIM_IC_CaptureCallback>:

//定时器输入捕获中断回调函数
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)	//捕获中断发生时执行
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a56      	ldr	r2, [pc, #344]	; (80010d8 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	f040 80a6 	bne.w	80010d0 <HAL_TIM_IC_CaptureCallback+0x160>
		if (RDATA)	//上升沿捕获
 8000f84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f88:	4854      	ldr	r0, [pc, #336]	; (80010dc <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000f8a:	f004 fc85 	bl	8005898 <HAL_GPIO_ReadPin>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d01b      	beq.n	8000fcc <HAL_TIM_IC_CaptureCallback+0x5c>
		{
			TIM_RESET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1);   //一定要先清除原来的设置！！
 8000f94:	4b52      	ldr	r3, [pc, #328]	; (80010e0 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6a1a      	ldr	r2, [r3, #32]
 8000f9a:	4b51      	ldr	r3, [pc, #324]	; (80010e0 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 020a 	bic.w	r2, r2, #10
 8000fa2:	621a      	str	r2, [r3, #32]
			TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1,
 8000fa4:	4b4e      	ldr	r3, [pc, #312]	; (80010e0 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6a1a      	ldr	r2, [r3, #32]
 8000faa:	4b4d      	ldr	r3, [pc, #308]	; (80010e0 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 0202 	orr.w	r2, r2, #2
 8000fb2:	621a      	str	r2, [r3, #32]
					TIM_ICPOLARITY_FALLING);   //CC1P=1 设置为下降沿捕获
			__HAL_TIM_SET_COUNTER(&htim1, 0);  //清空定时器值
 8000fb4:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24
			RmtSta |= 0X10;					//标记上升沿已经被捕获
 8000fbc:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <HAL_TIM_IC_CaptureCallback+0x174>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b47      	ldr	r3, [pc, #284]	; (80010e4 <HAL_TIM_IC_CaptureCallback+0x174>)
 8000fc8:	701a      	strb	r2, [r3, #0]
				}
			}
			RmtSta &= ~(1 << 4);
		}
	}
}
 8000fca:	e081      	b.n	80010d0 <HAL_TIM_IC_CaptureCallback+0x160>
			Dval = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1); //读取CCR1也可以清CC1IF标志位
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4844      	ldr	r0, [pc, #272]	; (80010e0 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000fd0:	f005 fc54 	bl	800687c <HAL_TIM_ReadCapturedValue>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000fda:	801a      	strh	r2, [r3, #0]
			TIM_RESET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1);   //一定要先清除原来的设置！！
 8000fdc:	4b40      	ldr	r3, [pc, #256]	; (80010e0 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6a1a      	ldr	r2, [r3, #32]
 8000fe2:	4b3f      	ldr	r3, [pc, #252]	; (80010e0 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 020a 	bic.w	r2, r2, #10
 8000fea:	621a      	str	r2, [r3, #32]
			TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1,
 8000fec:	4b3c      	ldr	r3, [pc, #240]	; (80010e0 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6a12      	ldr	r2, [r2, #32]
 8000ff6:	621a      	str	r2, [r3, #32]
			if (RmtSta & 0X10)					//完成一次高电平捕获
 8000ff8:	4b3a      	ldr	r3, [pc, #232]	; (80010e4 <HAL_TIM_IC_CaptureCallback+0x174>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	f003 0310 	and.w	r3, r3, #16
 8001000:	2b00      	cmp	r3, #0
 8001002:	d05e      	beq.n	80010c2 <HAL_TIM_IC_CaptureCallback+0x152>
				if (RmtSta & 0X80)					//接收到了引导码
 8001004:	4b37      	ldr	r3, [pc, #220]	; (80010e4 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b25b      	sxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	da43      	bge.n	8001096 <HAL_TIM_IC_CaptureCallback+0x126>
					if (Dval > 300 && Dval < 800)			//560为标准值,560us
 800100e:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001016:	d90e      	bls.n	8001036 <HAL_TIM_IC_CaptureCallback+0xc6>
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <HAL_TIM_IC_CaptureCallback+0x178>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001020:	d209      	bcs.n	8001036 <HAL_TIM_IC_CaptureCallback+0xc6>
						RmtRec <<= 1;	//左移一位.
 8001022:	4b32      	ldr	r3, [pc, #200]	; (80010ec <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4a30      	ldr	r2, [pc, #192]	; (80010ec <HAL_TIM_IC_CaptureCallback+0x17c>)
 800102a:	6013      	str	r3, [r2, #0]
						RmtRec |= 0;	//接收到0
 800102c:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <HAL_TIM_IC_CaptureCallback+0x17c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a2e      	ldr	r2, [pc, #184]	; (80010ec <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	e045      	b.n	80010c2 <HAL_TIM_IC_CaptureCallback+0x152>
					} else if (Dval > 1400 && Dval < 1800)	//1680为标准值,1680us
 8001036:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800103e:	d910      	bls.n	8001062 <HAL_TIM_IC_CaptureCallback+0xf2>
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001048:	d20b      	bcs.n	8001062 <HAL_TIM_IC_CaptureCallback+0xf2>
						RmtRec <<= 1;	//左移一位.
 800104a:	4b28      	ldr	r3, [pc, #160]	; (80010ec <HAL_TIM_IC_CaptureCallback+0x17c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4a26      	ldr	r2, [pc, #152]	; (80010ec <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001052:	6013      	str	r3, [r2, #0]
						RmtRec |= 1;	//接收到1
 8001054:	4b25      	ldr	r3, [pc, #148]	; (80010ec <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	4a23      	ldr	r2, [pc, #140]	; (80010ec <HAL_TIM_IC_CaptureCallback+0x17c>)
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	e02f      	b.n	80010c2 <HAL_TIM_IC_CaptureCallback+0x152>
					} else if (Dval > 2200 && Dval < 2600)//得到按键键值增加的信息 2500为标准值2.5ms
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	f640 0298 	movw	r2, #2200	; 0x898
 800106a:	4293      	cmp	r3, r2
 800106c:	d929      	bls.n	80010c2 <HAL_TIM_IC_CaptureCallback+0x152>
 800106e:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	f640 2227 	movw	r2, #2599	; 0xa27
 8001076:	4293      	cmp	r3, r2
 8001078:	d823      	bhi.n	80010c2 <HAL_TIM_IC_CaptureCallback+0x152>
						RmtCnt++; 		//按键次数增加1次
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x180>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001084:	701a      	strb	r2, [r3, #0]
						RmtSta &= 0XF0;	//清空计时器
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	f023 030f 	bic.w	r3, r3, #15
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	e015      	b.n	80010c2 <HAL_TIM_IC_CaptureCallback+0x152>
				} else if (Dval > 4200 && Dval < 4700)		//4500为标准值4.5ms
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	f241 0268 	movw	r2, #4200	; 0x1068
 800109e:	4293      	cmp	r3, r2
 80010a0:	d90f      	bls.n	80010c2 <HAL_TIM_IC_CaptureCallback+0x152>
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_TIM_IC_CaptureCallback+0x178>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	f241 225b 	movw	r2, #4699	; 0x125b
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d809      	bhi.n	80010c2 <HAL_TIM_IC_CaptureCallback+0x152>
					RmtSta |= 1 << 7;	//标记成功接收到了引导码
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <HAL_TIM_IC_CaptureCallback+0x174>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_TIM_IC_CaptureCallback+0x174>)
 80010ba:	701a      	strb	r2, [r3, #0]
					RmtCnt = 0;		//清除按键次数计数器
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x180>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
			RmtSta &= ~(1 << 4);
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_TIM_IC_CaptureCallback+0x174>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	f023 0310 	bic.w	r3, r3, #16
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_TIM_IC_CaptureCallback+0x174>)
 80010ce:	701a      	strb	r2, [r3, #0]
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40010000 	.word	0x40010000
 80010dc:	40020000 	.word	0x40020000
 80010e0:	20000340 	.word	0x20000340
 80010e4:	20000200 	.word	0x20000200
 80010e8:	20000220 	.word	0x20000220
 80010ec:	20000204 	.word	0x20000204
 80010f0:	20000208 	.word	0x20000208

080010f4 <Remote_Scan>:

//处理红外键盘
//返回值:
//	 0,没有任何按键按下
//其他,按下的按键键值.
uint8_t Remote_Scan(void) {
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
	uint8_t sta = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	71fb      	strb	r3, [r7, #7]
	uint8_t t1, t2;
	if (RmtSta & (1 << 6))		//得到一个按键的所有信息了
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <Remote_Scan+0x88>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001106:	2b00      	cmp	r3, #0
 8001108:	d031      	beq.n	800116e <Remote_Scan+0x7a>
			{
		t1 = RmtRec >> 24;			//得到地址码
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <Remote_Scan+0x8c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	0e1b      	lsrs	r3, r3, #24
 8001110:	71bb      	strb	r3, [r7, #6]
		t2 = (RmtRec >> 16) & 0xff;	//得到地址反码
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <Remote_Scan+0x8c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	0c1b      	lsrs	r3, r3, #16
 8001118:	717b      	strb	r3, [r7, #5]
		if ((t1 == (uint8_t) ~t2) && t1 == REMOTE_ID)	//检验遥控识别码(ID)及地址
 800111a:	797b      	ldrb	r3, [r7, #5]
 800111c:	43db      	mvns	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	79ba      	ldrb	r2, [r7, #6]
 8001122:	429a      	cmp	r2, r3
 8001124:	d111      	bne.n	800114a <Remote_Scan+0x56>
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10e      	bne.n	800114a <Remote_Scan+0x56>
		{
			t1 = RmtRec >> 8;
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <Remote_Scan+0x8c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	71bb      	strb	r3, [r7, #6]
			t2 = RmtRec;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <Remote_Scan+0x8c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	717b      	strb	r3, [r7, #5]
			if (t1 == (uint8_t) ~t2)
 800113a:	797b      	ldrb	r3, [r7, #5]
 800113c:	43db      	mvns	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	79ba      	ldrb	r2, [r7, #6]
 8001142:	429a      	cmp	r2, r3
 8001144:	d101      	bne.n	800114a <Remote_Scan+0x56>
				sta = t1;	//键值正确
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	71fb      	strb	r3, [r7, #7]
		}
		if ((sta == 0) || ((RmtSta & 0X80) == 0))	//按键数据错误/遥控已经没有按下了
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d004      	beq.n	800115a <Remote_Scan+0x66>
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <Remote_Scan+0x88>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b25b      	sxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	db09      	blt.n	800116e <Remote_Scan+0x7a>
				{
			RmtSta &= ~(1 << 6);	//清除接收到有效按键标识
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <Remote_Scan+0x88>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001162:	b2da      	uxtb	r2, r3
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <Remote_Scan+0x88>)
 8001166:	701a      	strb	r2, [r3, #0]
			RmtCnt = 0;		//清除按键次数计数器
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <Remote_Scan+0x90>)
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
		}
	}
	return sta;
 800116e:	79fb      	ldrb	r3, [r7, #7]
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	20000200 	.word	0x20000200
 8001180:	20000204 	.word	0x20000204
 8001184:	20000208 	.word	0x20000208

08001188 <LCD_WR_REG>:
_lcd_dev lcddev;

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(__IO uint16_t regval)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	80fb      	strh	r3, [r7, #6]
	regval=regval;		//使用-O2优化的时候,必须插入的延时
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	b29b      	uxth	r3, r3
 8001196:	80fb      	strh	r3, [r7, #6]
	TFT_LCD->LCD_REG=regval;//写入要写的寄存器序号
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <LCD_WR_REG+0x24>)
 800119a:	88fa      	ldrh	r2, [r7, #6]
 800119c:	b292      	uxth	r2, r2
 800119e:	801a      	strh	r2, [r3, #0]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	6c00007e 	.word	0x6c00007e

080011b0 <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(__IO uint16_t data)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
	data=data;			//使用-O2优化的时候,必须插入的延时
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	80fb      	strh	r3, [r7, #6]
	TFT_LCD->LCD_RAM=data;
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <LCD_WR_DATA+0x24>)
 80011c2:	88fa      	ldrh	r2, [r7, #6]
 80011c4:	b292      	uxth	r2, r2
 80011c6:	805a      	strh	r2, [r3, #2]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	6c00007e 	.word	0x6c00007e

080011d8 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//防止被优化
	ram=TFT_LCD->LCD_RAM;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <LCD_RD_DATA+0x20>)
 80011e0:	885b      	ldrh	r3, [r3, #2]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	80fb      	strh	r3, [r7, #6]
	return ram;
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	b29b      	uxth	r3, r3
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	6c00007e 	.word	0x6c00007e

080011fc <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	460a      	mov	r2, r1
 8001206:	80fb      	strh	r3, [r7, #6]
 8001208:	4613      	mov	r3, r2
 800120a:	80bb      	strh	r3, [r7, #4]
	TFT_LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 800120c:	4a05      	ldr	r2, [pc, #20]	; (8001224 <LCD_WriteReg+0x28>)
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	8013      	strh	r3, [r2, #0]
	TFT_LCD->LCD_RAM = LCD_RegValue;//写入数据
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <LCD_WriteReg+0x28>)
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	8053      	strh	r3, [r2, #2]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	6c00007e 	.word	0x6c00007e

08001228 <opt_delay>:

//当mdk -O1时间优化时需要设置
//延时i
void opt_delay(uint8_t i)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	while(i--);
 8001232:	bf00      	nop
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	1e5a      	subs	r2, r3, #1
 8001238:	71fa      	strb	r2, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1fa      	bne.n	8001234 <opt_delay+0xc>
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LCD_WriteRAM_Prepare>:
	opt_delay(5);
	return LCD_RD_DATA();		//返回读到的值
}
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
 	TFT_LCD->LCD_REG=lcddev.wramcmd;
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <LCD_WriteRAM_Prepare+0x18>)
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <LCD_WriteRAM_Prepare+0x1c>)
 8001254:	8912      	ldrh	r2, [r2, #8]
 8001256:	801a      	strh	r2, [r3, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	6c00007e 	.word	0x6c00007e
 8001268:	20000274 	.word	0x20000274

0800126c <LCD_SetCursor>:
}
//设置光标位置(对RGB屏无效)
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	460a      	mov	r2, r1
 8001276:	80fb      	strh	r3, [r7, #6]
 8001278:	4613      	mov	r3, r2
 800127a:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 800127c:	4b6b      	ldr	r3, [pc, #428]	; (800142c <LCD_SetCursor+0x1c0>)
 800127e:	889b      	ldrh	r3, [r3, #4]
 8001280:	f249 3241 	movw	r2, #37697	; 0x9341
 8001284:	4293      	cmp	r3, r2
 8001286:	d005      	beq.n	8001294 <LCD_SetCursor+0x28>
 8001288:	4b68      	ldr	r3, [pc, #416]	; (800142c <LCD_SetCursor+0x1c0>)
 800128a:	889b      	ldrh	r3, [r3, #4]
 800128c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001290:	4293      	cmp	r3, r2
 8001292:	d122      	bne.n	80012da <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8001294:	4b65      	ldr	r3, [pc, #404]	; (800142c <LCD_SetCursor+0x1c0>)
 8001296:	895b      	ldrh	r3, [r3, #10]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff75 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff83 	bl	80011b0 <LCD_WR_DATA>
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff7d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80012b6:	4b5d      	ldr	r3, [pc, #372]	; (800142c <LCD_SetCursor+0x1c0>)
 80012b8:	899b      	ldrh	r3, [r3, #12]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff64 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff72 	bl	80011b0 <LCD_WR_DATA>
 80012cc:	88bb      	ldrh	r3, [r7, #4]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff6c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
	}
}
 80012d8:	e0a3      	b.n	8001422 <LCD_SetCursor+0x1b6>
	}else if(lcddev.id==0X1963)
 80012da:	4b54      	ldr	r3, [pc, #336]	; (800142c <LCD_SetCursor+0x1c0>)
 80012dc:	889b      	ldrh	r3, [r3, #4]
 80012de:	f641 1263 	movw	r2, #6499	; 0x1963
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d167      	bne.n	80013b6 <LCD_SetCursor+0x14a>
		if(lcddev.dir==0)//x坐标需要变换
 80012e6:	4b51      	ldr	r3, [pc, #324]	; (800142c <LCD_SetCursor+0x1c0>)
 80012e8:	799b      	ldrb	r3, [r3, #6]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d11e      	bne.n	800132c <LCD_SetCursor+0xc0>
			Xpos=lcddev.width-1-Xpos;
 80012ee:	4b4f      	ldr	r3, [pc, #316]	; (800142c <LCD_SetCursor+0x1c0>)
 80012f0:	881a      	ldrh	r2, [r3, #0]
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	3b01      	subs	r3, #1
 80012fa:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 80012fc:	4b4b      	ldr	r3, [pc, #300]	; (800142c <LCD_SetCursor+0x1c0>)
 80012fe:	895b      	ldrh	r3, [r3, #10]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff41 	bl	8001188 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff ff52 	bl	80011b0 <LCD_WR_DATA>
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff ff4f 	bl	80011b0 <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	b29b      	uxth	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff49 	bl	80011b0 <LCD_WR_DATA>
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	b29b      	uxth	r3, r3
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff43 	bl	80011b0 <LCD_WR_DATA>
 800132a:	e021      	b.n	8001370 <LCD_SetCursor+0x104>
			LCD_WR_REG(lcddev.setxcmd);
 800132c:	4b3f      	ldr	r3, [pc, #252]	; (800142c <LCD_SetCursor+0x1c0>)
 800132e:	895b      	ldrh	r3, [r3, #10]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff29 	bl	8001188 <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	b29b      	uxth	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff37 	bl	80011b0 <LCD_WR_DATA>
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	b29b      	uxth	r3, r3
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff31 	bl	80011b0 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 800134e:	4b37      	ldr	r3, [pc, #220]	; (800142c <LCD_SetCursor+0x1c0>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	3b01      	subs	r3, #1
 8001354:	121b      	asrs	r3, r3, #8
 8001356:	b29b      	uxth	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff29 	bl	80011b0 <LCD_WR_DATA>
 800135e:	4b33      	ldr	r3, [pc, #204]	; (800142c <LCD_SetCursor+0x1c0>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	3b01      	subs	r3, #1
 8001364:	b29b      	uxth	r3, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	b29b      	uxth	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff20 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001370:	4b2e      	ldr	r3, [pc, #184]	; (800142c <LCD_SetCursor+0x1c0>)
 8001372:	899b      	ldrh	r3, [r3, #12]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff07 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 800137a:	88bb      	ldrh	r3, [r7, #4]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	b29b      	uxth	r3, r3
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff15 	bl	80011b0 <LCD_WR_DATA>
 8001386:	88bb      	ldrh	r3, [r7, #4]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	b29b      	uxth	r3, r3
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff0f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <LCD_SetCursor+0x1c0>)
 8001394:	885b      	ldrh	r3, [r3, #2]
 8001396:	3b01      	subs	r3, #1
 8001398:	121b      	asrs	r3, r3, #8
 800139a:	b29b      	uxth	r3, r3
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff07 	bl	80011b0 <LCD_WR_DATA>
 80013a2:	4b22      	ldr	r3, [pc, #136]	; (800142c <LCD_SetCursor+0x1c0>)
 80013a4:	885b      	ldrh	r3, [r3, #2]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fefe 	bl	80011b0 <LCD_WR_DATA>
}
 80013b4:	e035      	b.n	8001422 <LCD_SetCursor+0x1b6>
	}else if(lcddev.id==0X5510)
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <LCD_SetCursor+0x1c0>)
 80013b8:	889b      	ldrh	r3, [r3, #4]
 80013ba:	f245 5210 	movw	r2, #21776	; 0x5510
 80013be:	4293      	cmp	r3, r2
 80013c0:	d12f      	bne.n	8001422 <LCD_SetCursor+0x1b6>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <LCD_SetCursor+0x1c0>)
 80013c4:	895b      	ldrh	r3, [r3, #10]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fede 	bl	8001188 <LCD_WR_REG>
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff feec 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <LCD_SetCursor+0x1c0>)
 80013da:	895b      	ldrh	r3, [r3, #10]
 80013dc:	3301      	adds	r3, #1
 80013de:	b29b      	uxth	r3, r3
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fed1 	bl	8001188 <LCD_WR_REG>
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fedf 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <LCD_SetCursor+0x1c0>)
 80013f4:	899b      	ldrh	r3, [r3, #12]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fec6 	bl	8001188 <LCD_WR_REG>
 80013fc:	88bb      	ldrh	r3, [r7, #4]
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	b29b      	uxth	r3, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fed4 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <LCD_SetCursor+0x1c0>)
 800140a:	899b      	ldrh	r3, [r3, #12]
 800140c:	3301      	adds	r3, #1
 800140e:	b29b      	uxth	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff feb9 	bl	8001188 <LCD_WR_REG>
 8001416:	88bb      	ldrh	r3, [r7, #4]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	b29b      	uxth	r3, r3
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fec7 	bl	80011b0 <LCD_WR_DATA>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000274 	.word	0x20000274

08001430 <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
	uint16_t regval=0;
 800143a:	2300      	movs	r3, #0
 800143c:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg=0;
 800143e:	2300      	movs	r3, #0
 8001440:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if((lcddev.dir==1&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对1963不改变扫描方向！竖屏时1963改变方向
 8001442:	4ba9      	ldr	r3, [pc, #676]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 8001444:	799b      	ldrb	r3, [r3, #6]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d105      	bne.n	8001456 <LCD_Scan_Dir+0x26>
 800144a:	4ba7      	ldr	r3, [pc, #668]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 800144c:	889b      	ldrh	r3, [r3, #4]
 800144e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001452:	4293      	cmp	r3, r2
 8001454:	d109      	bne.n	800146a <LCD_Scan_Dir+0x3a>
 8001456:	4ba4      	ldr	r3, [pc, #656]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 8001458:	799b      	ldrb	r3, [r3, #6]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d134      	bne.n	80014c8 <LCD_Scan_Dir+0x98>
 800145e:	4ba2      	ldr	r3, [pc, #648]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 8001460:	889b      	ldrh	r3, [r3, #4]
 8001462:	f641 1263 	movw	r2, #6499	; 0x1963
 8001466:	4293      	cmp	r3, r2
 8001468:	d12e      	bne.n	80014c8 <LCD_Scan_Dir+0x98>
	{
		switch(dir)//方向转换
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b07      	cmp	r3, #7
 800146e:	d82c      	bhi.n	80014ca <LCD_Scan_Dir+0x9a>
 8001470:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <LCD_Scan_Dir+0x48>)
 8001472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001476:	bf00      	nop
 8001478:	08001499 	.word	0x08001499
 800147c:	0800149f 	.word	0x0800149f
 8001480:	080014a5 	.word	0x080014a5
 8001484:	080014ab 	.word	0x080014ab
 8001488:	080014b1 	.word	0x080014b1
 800148c:	080014b7 	.word	0x080014b7
 8001490:	080014bd 	.word	0x080014bd
 8001494:	080014c3 	.word	0x080014c3
		{
			case 0:dir=6;break;
 8001498:	2306      	movs	r3, #6
 800149a:	71fb      	strb	r3, [r7, #7]
 800149c:	e015      	b.n	80014ca <LCD_Scan_Dir+0x9a>
			case 1:dir=7;break;
 800149e:	2307      	movs	r3, #7
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	e012      	b.n	80014ca <LCD_Scan_Dir+0x9a>
			case 2:dir=4;break;
 80014a4:	2304      	movs	r3, #4
 80014a6:	71fb      	strb	r3, [r7, #7]
 80014a8:	e00f      	b.n	80014ca <LCD_Scan_Dir+0x9a>
			case 3:dir=5;break;
 80014aa:	2305      	movs	r3, #5
 80014ac:	71fb      	strb	r3, [r7, #7]
 80014ae:	e00c      	b.n	80014ca <LCD_Scan_Dir+0x9a>
			case 4:dir=1;break;
 80014b0:	2301      	movs	r3, #1
 80014b2:	71fb      	strb	r3, [r7, #7]
 80014b4:	e009      	b.n	80014ca <LCD_Scan_Dir+0x9a>
			case 5:dir=0;break;
 80014b6:	2300      	movs	r3, #0
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	e006      	b.n	80014ca <LCD_Scan_Dir+0x9a>
			case 6:dir=3;break;
 80014bc:	2303      	movs	r3, #3
 80014be:	71fb      	strb	r3, [r7, #7]
 80014c0:	e003      	b.n	80014ca <LCD_Scan_Dir+0x9a>
			case 7:dir=2;break;
 80014c2:	2302      	movs	r3, #2
 80014c4:	71fb      	strb	r3, [r7, #7]
 80014c6:	e000      	b.n	80014ca <LCD_Scan_Dir+0x9a>
		}
	}
 80014c8:	bf00      	nop
	if(lcddev.id==0x9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/5310/5510/1963,特殊处理
 80014ca:	4b87      	ldr	r3, [pc, #540]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 80014cc:	889b      	ldrh	r3, [r3, #4]
 80014ce:	f249 3241 	movw	r2, #37697	; 0x9341
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d012      	beq.n	80014fc <LCD_Scan_Dir+0xcc>
 80014d6:	4b84      	ldr	r3, [pc, #528]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 80014d8:	889b      	ldrh	r3, [r3, #4]
 80014da:	f245 3210 	movw	r2, #21264	; 0x5310
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00c      	beq.n	80014fc <LCD_Scan_Dir+0xcc>
 80014e2:	4b81      	ldr	r3, [pc, #516]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 80014e4:	889b      	ldrh	r3, [r3, #4]
 80014e6:	f245 5210 	movw	r2, #21776	; 0x5510
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d006      	beq.n	80014fc <LCD_Scan_Dir+0xcc>
 80014ee:	4b7e      	ldr	r3, [pc, #504]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 80014f0:	889b      	ldrh	r3, [r3, #4]
 80014f2:	f641 1263 	movw	r2, #6499	; 0x1963
 80014f6:	4293      	cmp	r3, r2
 80014f8:	f040 8130 	bne.w	800175c <LCD_Scan_Dir+0x32c>
	{
		switch(dir)
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	2b07      	cmp	r3, #7
 8001500:	d835      	bhi.n	800156e <LCD_Scan_Dir+0x13e>
 8001502:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <LCD_Scan_Dir+0xd8>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	0800156f 	.word	0x0800156f
 800150c:	08001529 	.word	0x08001529
 8001510:	08001533 	.word	0x08001533
 8001514:	0800153d 	.word	0x0800153d
 8001518:	08001547 	.word	0x08001547
 800151c:	08001551 	.word	0x08001551
 8001520:	0800155b 	.word	0x0800155b
 8001524:	08001565 	.word	0x08001565
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 8001528:	89fb      	ldrh	r3, [r7, #14]
 800152a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800152e:	81fb      	strh	r3, [r7, #14]
				break;
 8001530:	e01d      	b.n	800156e <LCD_Scan_Dir+0x13e>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 8001532:	89fb      	ldrh	r3, [r7, #14]
 8001534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001538:	81fb      	strh	r3, [r7, #14]
				break;
 800153a:	e018      	b.n	800156e <LCD_Scan_Dir+0x13e>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 800153c:	89fb      	ldrh	r3, [r7, #14]
 800153e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001542:	81fb      	strh	r3, [r7, #14]
				break;
 8001544:	e013      	b.n	800156e <LCD_Scan_Dir+0x13e>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 8001546:	89fb      	ldrh	r3, [r7, #14]
 8001548:	f043 0320 	orr.w	r3, r3, #32
 800154c:	81fb      	strh	r3, [r7, #14]
				break;
 800154e:	e00e      	b.n	800156e <LCD_Scan_Dir+0x13e>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 8001550:	89fb      	ldrh	r3, [r7, #14]
 8001552:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001556:	81fb      	strh	r3, [r7, #14]
				break;
 8001558:	e009      	b.n	800156e <LCD_Scan_Dir+0x13e>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001560:	81fb      	strh	r3, [r7, #14]
				break;
 8001562:	e004      	b.n	800156e <LCD_Scan_Dir+0x13e>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 8001564:	89fb      	ldrh	r3, [r7, #14]
 8001566:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800156a:	81fb      	strh	r3, [r7, #14]
				break;
 800156c:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 800156e:	4b5e      	ldr	r3, [pc, #376]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 8001570:	889b      	ldrh	r3, [r3, #4]
 8001572:	f245 5210 	movw	r2, #21776	; 0x5510
 8001576:	4293      	cmp	r3, r2
 8001578:	d103      	bne.n	8001582 <LCD_Scan_Dir+0x152>
 800157a:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800157e:	81bb      	strh	r3, [r7, #12]
 8001580:	e001      	b.n	8001586 <LCD_Scan_Dir+0x156>
		else dirreg=0X36;
 8001582:	2336      	movs	r3, #54	; 0x36
 8001584:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 8001586:	4b58      	ldr	r3, [pc, #352]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 8001588:	889b      	ldrh	r3, [r3, #4]
 800158a:	f245 3210 	movw	r2, #21264	; 0x5310
 800158e:	4293      	cmp	r3, r2
 8001590:	d00f      	beq.n	80015b2 <LCD_Scan_Dir+0x182>
 8001592:	4b55      	ldr	r3, [pc, #340]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 8001594:	889b      	ldrh	r3, [r3, #4]
 8001596:	f245 5210 	movw	r2, #21776	; 0x5510
 800159a:	4293      	cmp	r3, r2
 800159c:	d009      	beq.n	80015b2 <LCD_Scan_Dir+0x182>
 800159e:	4b52      	ldr	r3, [pc, #328]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 80015a0:	889b      	ldrh	r3, [r3, #4]
 80015a2:	f641 1263 	movw	r2, #6499	; 0x1963
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d003      	beq.n	80015b2 <LCD_Scan_Dir+0x182>
 80015aa:	89fb      	ldrh	r3, [r7, #14]
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	81fb      	strh	r3, [r7, #14]
 		LCD_WriteReg(dirreg,regval);
 80015b2:	89fa      	ldrh	r2, [r7, #14]
 80015b4:	89bb      	ldrh	r3, [r7, #12]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fe1f 	bl	80011fc <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 80015be:	4b4a      	ldr	r3, [pc, #296]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 80015c0:	889b      	ldrh	r3, [r3, #4]
 80015c2:	f641 1263 	movw	r2, #6499	; 0x1963
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d025      	beq.n	8001616 <LCD_Scan_Dir+0x1e6>
		{
			if(regval&0X20)
 80015ca:	89fb      	ldrh	r3, [r7, #14]
 80015cc:	f003 0320 	and.w	r3, r3, #32
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d010      	beq.n	80015f6 <LCD_Scan_Dir+0x1c6>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 80015d4:	4b44      	ldr	r3, [pc, #272]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 80015d6:	881a      	ldrh	r2, [r3, #0]
 80015d8:	4b43      	ldr	r3, [pc, #268]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 80015da:	885b      	ldrh	r3, [r3, #2]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d21a      	bcs.n	8001616 <LCD_Scan_Dir+0x1e6>
				{
					temp=lcddev.width;
 80015e0:	4b41      	ldr	r3, [pc, #260]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 80015e6:	4b40      	ldr	r3, [pc, #256]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 80015e8:	885a      	ldrh	r2, [r3, #2]
 80015ea:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 80015ec:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 80015ee:	4a3e      	ldr	r2, [pc, #248]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 80015f0:	897b      	ldrh	r3, [r7, #10]
 80015f2:	8053      	strh	r3, [r2, #2]
 80015f4:	e00f      	b.n	8001616 <LCD_Scan_Dir+0x1e6>
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 80015f6:	4b3c      	ldr	r3, [pc, #240]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 80015f8:	881a      	ldrh	r2, [r3, #0]
 80015fa:	4b3b      	ldr	r3, [pc, #236]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 80015fc:	885b      	ldrh	r3, [r3, #2]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d909      	bls.n	8001616 <LCD_Scan_Dir+0x1e6>
				{
					temp=lcddev.width;
 8001602:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 8001608:	4b37      	ldr	r3, [pc, #220]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 800160a:	885a      	ldrh	r2, [r3, #2]
 800160c:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 800160e:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8001610:	4a35      	ldr	r2, [pc, #212]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 8001612:	897b      	ldrh	r3, [r7, #10]
 8001614:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 8001616:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 8001618:	889b      	ldrh	r3, [r3, #4]
 800161a:	f245 5210 	movw	r2, #21776	; 0x5510
 800161e:	4293      	cmp	r3, r2
 8001620:	d164      	bne.n	80016ec <LCD_Scan_Dir+0x2bc>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 8001622:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 8001624:	895b      	ldrh	r3, [r3, #10]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fdae 	bl	8001188 <LCD_WR_REG>
 800162c:	2000      	movs	r0, #0
 800162e:	f7ff fdbf 	bl	80011b0 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 8001632:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 8001634:	895b      	ldrh	r3, [r3, #10]
 8001636:	3301      	adds	r3, #1
 8001638:	b29b      	uxth	r3, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fda4 	bl	8001188 <LCD_WR_REG>
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff fdb5 	bl	80011b0 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 8001646:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 8001648:	895b      	ldrh	r3, [r3, #10]
 800164a:	3302      	adds	r3, #2
 800164c:	b29b      	uxth	r3, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fd9a 	bl	8001188 <LCD_WR_REG>
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	3b01      	subs	r3, #1
 800165a:	121b      	asrs	r3, r3, #8
 800165c:	b29b      	uxth	r3, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fda6 	bl	80011b0 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001664:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 8001666:	895b      	ldrh	r3, [r3, #10]
 8001668:	3303      	adds	r3, #3
 800166a:	b29b      	uxth	r3, r3
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fd8b 	bl	8001188 <LCD_WR_REG>
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	3b01      	subs	r3, #1
 8001678:	b29b      	uxth	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	b29b      	uxth	r3, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fd96 	bl	80011b0 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 8001686:	899b      	ldrh	r3, [r3, #12]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fd7d 	bl	8001188 <LCD_WR_REG>
 800168e:	2000      	movs	r0, #0
 8001690:	f7ff fd8e 	bl	80011b0 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 8001696:	899b      	ldrh	r3, [r3, #12]
 8001698:	3301      	adds	r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fd73 	bl	8001188 <LCD_WR_REG>
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff fd84 	bl	80011b0 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 80016aa:	899b      	ldrh	r3, [r3, #12]
 80016ac:	3302      	adds	r3, #2
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fd69 	bl	8001188 <LCD_WR_REG>
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 80016b8:	885b      	ldrh	r3, [r3, #2]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	121b      	asrs	r3, r3, #8
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fd75 	bl	80011b0 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 80016c8:	899b      	ldrh	r3, [r3, #12]
 80016ca:	3303      	adds	r3, #3
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fd5a 	bl	8001188 <LCD_WR_REG>
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <LCD_Scan_Dir+0x2b8>)
 80016d6:	885b      	ldrh	r3, [r3, #2]
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29b      	uxth	r3, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fd65 	bl	80011b0 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
			LCD_WR_DATA(0);LCD_WR_DATA(0);
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
		}
  	}
}
 80016e6:	e039      	b.n	800175c <LCD_Scan_Dir+0x32c>
 80016e8:	20000274 	.word	0x20000274
			LCD_WR_REG(lcddev.setxcmd);
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <LCD_Scan_Dir+0x334>)
 80016ee:	895b      	ldrh	r3, [r3, #10]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fd49 	bl	8001188 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f7ff fd5a 	bl	80011b0 <LCD_WR_DATA>
 80016fc:	2000      	movs	r0, #0
 80016fe:	f7ff fd57 	bl	80011b0 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <LCD_Scan_Dir+0x334>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	3b01      	subs	r3, #1
 8001708:	121b      	asrs	r3, r3, #8
 800170a:	b29b      	uxth	r3, r3
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fd4f 	bl	80011b0 <LCD_WR_DATA>
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <LCD_Scan_Dir+0x334>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	3b01      	subs	r3, #1
 8001718:	b29b      	uxth	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	b29b      	uxth	r3, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fd46 	bl	80011b0 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <LCD_Scan_Dir+0x334>)
 8001726:	899b      	ldrh	r3, [r3, #12]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fd2d 	bl	8001188 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 800172e:	2000      	movs	r0, #0
 8001730:	f7ff fd3e 	bl	80011b0 <LCD_WR_DATA>
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff fd3b 	bl	80011b0 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <LCD_Scan_Dir+0x334>)
 800173c:	885b      	ldrh	r3, [r3, #2]
 800173e:	3b01      	subs	r3, #1
 8001740:	121b      	asrs	r3, r3, #8
 8001742:	b29b      	uxth	r3, r3
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fd33 	bl	80011b0 <LCD_WR_DATA>
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <LCD_Scan_Dir+0x334>)
 800174c:	885b      	ldrh	r3, [r3, #2]
 800174e:	3b01      	subs	r3, #1
 8001750:	b29b      	uxth	r3, r3
 8001752:	b2db      	uxtb	r3, r3
 8001754:	b29b      	uxth	r3, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fd2a 	bl	80011b0 <LCD_WR_DATA>
}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000274 	.word	0x20000274

08001768 <LCD_Fast_DrawPoint>:
}
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint32_t color)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	603a      	str	r2, [r7, #0]
 8001772:	80fb      	strh	r3, [r7, #6]
 8001774:	460b      	mov	r3, r1
 8001776:	80bb      	strh	r3, [r7, #4]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001778:	4b85      	ldr	r3, [pc, #532]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 800177a:	889b      	ldrh	r3, [r3, #4]
 800177c:	f249 3241 	movw	r2, #37697	; 0x9341
 8001780:	4293      	cmp	r3, r2
 8001782:	d005      	beq.n	8001790 <LCD_Fast_DrawPoint+0x28>
 8001784:	4b82      	ldr	r3, [pc, #520]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 8001786:	889b      	ldrh	r3, [r3, #4]
 8001788:	f245 3210 	movw	r2, #21264	; 0x5310
 800178c:	4293      	cmp	r3, r2
 800178e:	d122      	bne.n	80017d6 <LCD_Fast_DrawPoint+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8001790:	4b7f      	ldr	r3, [pc, #508]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 8001792:	895b      	ldrh	r3, [r3, #10]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fcf7 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fd05 	bl	80011b0 <LCD_WR_DATA>
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fcff 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80017b2:	4b77      	ldr	r3, [pc, #476]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 80017b4:	899b      	ldrh	r3, [r3, #12]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fce6 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80017bc:	88bb      	ldrh	r3, [r7, #4]
 80017be:	0a1b      	lsrs	r3, r3, #8
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fcf4 	bl	80011b0 <LCD_WR_DATA>
 80017c8:	88bb      	ldrh	r3, [r7, #4]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fcee 	bl	80011b0 <LCD_WR_DATA>
 80017d4:	e0cf      	b.n	8001976 <LCD_Fast_DrawPoint+0x20e>
	}else if(lcddev.id==0X5510)
 80017d6:	4b6e      	ldr	r3, [pc, #440]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 80017d8:	889b      	ldrh	r3, [r3, #4]
 80017da:	f245 5210 	movw	r2, #21776	; 0x5510
 80017de:	4293      	cmp	r3, r2
 80017e0:	d130      	bne.n	8001844 <LCD_Fast_DrawPoint+0xdc>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 80017e2:	4b6b      	ldr	r3, [pc, #428]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 80017e4:	895b      	ldrh	r3, [r3, #10]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fcce 	bl	8001188 <LCD_WR_REG>
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fcdc 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 80017f8:	4b65      	ldr	r3, [pc, #404]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 80017fa:	895b      	ldrh	r3, [r3, #10]
 80017fc:	3301      	adds	r3, #1
 80017fe:	b29b      	uxth	r3, r3
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fcc1 	bl	8001188 <LCD_WR_REG>
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	b29b      	uxth	r3, r3
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fccf 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 8001812:	4b5f      	ldr	r3, [pc, #380]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 8001814:	899b      	ldrh	r3, [r3, #12]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fcb6 	bl	8001188 <LCD_WR_REG>
 800181c:	88bb      	ldrh	r3, [r7, #4]
 800181e:	0a1b      	lsrs	r3, r3, #8
 8001820:	b29b      	uxth	r3, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fcc4 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 8001828:	4b59      	ldr	r3, [pc, #356]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 800182a:	899b      	ldrh	r3, [r3, #12]
 800182c:	3301      	adds	r3, #1
 800182e:	b29b      	uxth	r3, r3
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fca9 	bl	8001188 <LCD_WR_REG>
 8001836:	88bb      	ldrh	r3, [r7, #4]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	b29b      	uxth	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fcb7 	bl	80011b0 <LCD_WR_DATA>
 8001842:	e098      	b.n	8001976 <LCD_Fast_DrawPoint+0x20e>
	}else if(lcddev.id==0X1963)
 8001844:	4b52      	ldr	r3, [pc, #328]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 8001846:	889b      	ldrh	r3, [r3, #4]
 8001848:	f641 1263 	movw	r2, #6499	; 0x1963
 800184c:	4293      	cmp	r3, r2
 800184e:	d145      	bne.n	80018dc <LCD_Fast_DrawPoint+0x174>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 8001850:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 8001852:	799b      	ldrb	r3, [r3, #6]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d106      	bne.n	8001866 <LCD_Fast_DrawPoint+0xfe>
 8001858:	4b4d      	ldr	r3, [pc, #308]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 800185a:	881a      	ldrh	r2, [r3, #0]
 800185c:	88fb      	ldrh	r3, [r7, #6]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	b29b      	uxth	r3, r3
 8001862:	3b01      	subs	r3, #1
 8001864:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001866:	4b4a      	ldr	r3, [pc, #296]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 8001868:	895b      	ldrh	r3, [r3, #10]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fc8c 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	0a1b      	lsrs	r3, r3, #8
 8001874:	b29b      	uxth	r3, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fc9a 	bl	80011b0 <LCD_WR_DATA>
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	b29b      	uxth	r3, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fc94 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	b29b      	uxth	r3, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fc8e 	bl	80011b0 <LCD_WR_DATA>
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	b29b      	uxth	r3, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fc88 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80018a0:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 80018a2:	899b      	ldrh	r3, [r3, #12]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fc6f 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80018aa:	88bb      	ldrh	r3, [r7, #4]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fc7d 	bl	80011b0 <LCD_WR_DATA>
 80018b6:	88bb      	ldrh	r3, [r7, #4]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fc77 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80018c2:	88bb      	ldrh	r3, [r7, #4]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fc71 	bl	80011b0 <LCD_WR_DATA>
 80018ce:	88bb      	ldrh	r3, [r7, #4]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fc6b 	bl	80011b0 <LCD_WR_DATA>
 80018da:	e04c      	b.n	8001976 <LCD_Fast_DrawPoint+0x20e>
	}else if(lcddev.id==0X6804)
 80018dc:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 80018de:	889b      	ldrh	r3, [r3, #4]
 80018e0:	f646 0204 	movw	r2, #26628	; 0x6804
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d12d      	bne.n	8001944 <LCD_Fast_DrawPoint+0x1dc>
	{
		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏时处理
 80018e8:	4b29      	ldr	r3, [pc, #164]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 80018ea:	799b      	ldrb	r3, [r3, #6]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d106      	bne.n	80018fe <LCD_Fast_DrawPoint+0x196>
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 80018f2:	881a      	ldrh	r2, [r3, #0]
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	3b01      	subs	r3, #1
 80018fc:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80018fe:	4b24      	ldr	r3, [pc, #144]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 8001900:	895b      	ldrh	r3, [r3, #10]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fc40 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	b29b      	uxth	r3, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fc4e 	bl	80011b0 <LCD_WR_DATA>
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	b29b      	uxth	r3, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fc48 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 8001922:	899b      	ldrh	r3, [r3, #12]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fc2f 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 800192a:	88bb      	ldrh	r3, [r7, #4]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	b29b      	uxth	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fc3d 	bl	80011b0 <LCD_WR_DATA>
 8001936:	88bb      	ldrh	r3, [r7, #4]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	b29b      	uxth	r3, r3
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fc37 	bl	80011b0 <LCD_WR_DATA>
 8001942:	e018      	b.n	8001976 <LCD_Fast_DrawPoint+0x20e>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏其实就是调转x,y坐标
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 8001946:	799b      	ldrb	r3, [r3, #6]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d106      	bne.n	800195a <LCD_Fast_DrawPoint+0x1f2>
 800194c:	4b10      	ldr	r3, [pc, #64]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 800194e:	881a      	ldrh	r2, [r3, #0]
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	b29b      	uxth	r3, r3
 8001956:	3b01      	subs	r3, #1
 8001958:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 800195c:	895b      	ldrh	r3, [r3, #10]
 800195e:	88fa      	ldrh	r2, [r7, #6]
 8001960:	4611      	mov	r1, r2
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fc4a 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 800196a:	899b      	ldrh	r3, [r3, #12]
 800196c:	88ba      	ldrh	r2, [r7, #4]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fc43 	bl	80011fc <LCD_WriteReg>
	}
	TFT_LCD->LCD_REG=lcddev.wramcmd;
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <LCD_Fast_DrawPoint+0x22c>)
 8001978:	4a05      	ldr	r2, [pc, #20]	; (8001990 <LCD_Fast_DrawPoint+0x228>)
 800197a:	8912      	ldrh	r2, [r2, #8]
 800197c:	801a      	strh	r2, [r3, #0]
	TFT_LCD->LCD_RAM=color;
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <LCD_Fast_DrawPoint+0x22c>)
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	b292      	uxth	r2, r2
 8001984:	805a      	strh	r2, [r3, #2]
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000274 	.word	0x20000274
 8001994:	6c00007e 	.word	0x6c00007e

08001998 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 80019a2:	20be      	movs	r0, #190	; 0xbe
 80019a4:	f7ff fbf0 	bl	8001188 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 80019a8:	2005      	movs	r0, #5
 80019aa:	f7ff fc01 	bl	80011b0 <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fdb7 	bl	8000524 <__aeabi_i2d>
 80019b6:	a310      	add	r3, pc, #64	; (adr r3, 80019f8 <LCD_SSD_BackLightSet+0x60>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7fe fe1c 	bl	80005f8 <__aeabi_dmul>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	f7ff f8ee 	bl	8000ba8 <__aeabi_d2uiz>
 80019cc:	4603      	mov	r3, r0
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fbed 	bl	80011b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 80019d6:	2001      	movs	r0, #1
 80019d8:	f7ff fbea 	bl	80011b0 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 80019dc:	20ff      	movs	r0, #255	; 0xff
 80019de:	f7ff fbe7 	bl	80011b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 80019e2:	2000      	movs	r0, #0
 80019e4:	f7ff fbe4 	bl	80011b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff fbe1 	bl	80011b0 <LCD_WR_DATA>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	66666666 	.word	0x66666666
 80019fc:	40046666 	.word	0x40046666

08001a00 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(uint8_t dir)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
	lcddev.dir=dir;		//竖屏/横屏
 8001a0a:	4a64      	ldr	r2, [pc, #400]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	7193      	strb	r3, [r2, #6]
	if(dir==0)			//竖屏
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d15e      	bne.n	8001ad4 <LCD_Display_Dir+0xd4>
	{
		lcddev.width=240;
 8001a16:	4b61      	ldr	r3, [pc, #388]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001a18:	22f0      	movs	r2, #240	; 0xf0
 8001a1a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001a1c:	4b5f      	ldr	r3, [pc, #380]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001a1e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a22:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001a24:	4b5d      	ldr	r3, [pc, #372]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001a26:	889b      	ldrh	r3, [r3, #4]
 8001a28:	f249 3241 	movw	r2, #37697	; 0x9341
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d005      	beq.n	8001a3c <LCD_Display_Dir+0x3c>
 8001a30:	4b5a      	ldr	r3, [pc, #360]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001a32:	889b      	ldrh	r3, [r3, #4]
 8001a34:	f245 3210 	movw	r2, #21264	; 0x5310
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d118      	bne.n	8001a6e <LCD_Display_Dir+0x6e>
		{
			lcddev.wramcmd=0X2C;
 8001a3c:	4b57      	ldr	r3, [pc, #348]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001a3e:	222c      	movs	r2, #44	; 0x2c
 8001a40:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8001a42:	4b56      	ldr	r3, [pc, #344]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001a44:	222a      	movs	r2, #42	; 0x2a
 8001a46:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001a48:	4b54      	ldr	r3, [pc, #336]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001a4a:	222b      	movs	r2, #43	; 0x2b
 8001a4c:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X5310)
 8001a4e:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001a50:	889b      	ldrh	r3, [r3, #4]
 8001a52:	f245 3210 	movw	r2, #21264	; 0x5310
 8001a56:	4293      	cmp	r3, r2
 8001a58:	f040 8099 	bne.w	8001b8e <LCD_Display_Dir+0x18e>
			{
				lcddev.width=320;
 8001a5c:	4b4f      	ldr	r3, [pc, #316]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001a5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a62:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 8001a64:	4b4d      	ldr	r3, [pc, #308]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001a66:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a6a:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X5310)
 8001a6c:	e08f      	b.n	8001b8e <LCD_Display_Dir+0x18e>
			}
		}else if(lcddev.id==0x5510)
 8001a6e:	4b4b      	ldr	r3, [pc, #300]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001a70:	889b      	ldrh	r3, [r3, #4]
 8001a72:	f245 5210 	movw	r2, #21776	; 0x5510
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d114      	bne.n	8001aa4 <LCD_Display_Dir+0xa4>
		{
			lcddev.wramcmd=0X2C00;
 8001a7a:	4b48      	ldr	r3, [pc, #288]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001a7c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001a80:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8001a82:	4b46      	ldr	r3, [pc, #280]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001a84:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001a88:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8001a8a:	4b44      	ldr	r3, [pc, #272]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001a8c:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001a90:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 8001a92:	4b42      	ldr	r3, [pc, #264]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001a94:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a98:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 8001a9a:	4b40      	ldr	r3, [pc, #256]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001a9c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001aa0:	805a      	strh	r2, [r3, #2]
 8001aa2:	e074      	b.n	8001b8e <LCD_Display_Dir+0x18e>
		}else if(lcddev.id==0X1963)
 8001aa4:	4b3d      	ldr	r3, [pc, #244]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001aa6:	889b      	ldrh	r3, [r3, #4]
 8001aa8:	f641 1263 	movw	r2, #6499	; 0x1963
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d16e      	bne.n	8001b8e <LCD_Display_Dir+0x18e>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8001ab0:	4b3a      	ldr	r3, [pc, #232]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001ab2:	222c      	movs	r2, #44	; 0x2c
 8001ab4:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 8001ab6:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001ab8:	222b      	movs	r2, #43	; 0x2b
 8001aba:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 8001abc:	4b37      	ldr	r3, [pc, #220]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001abe:	222a      	movs	r2, #42	; 0x2a
 8001ac0:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 8001ac2:	4b36      	ldr	r3, [pc, #216]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001ac4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ac8:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 8001aca:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001acc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001ad0:	805a      	strh	r2, [r3, #2]
 8001ad2:	e05c      	b.n	8001b8e <LCD_Display_Dir+0x18e>
		}
	}else 				//横屏
	{
		lcddev.width=320;
 8001ad4:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001ad6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ada:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001adc:	4b2f      	ldr	r3, [pc, #188]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001ade:	22f0      	movs	r2, #240	; 0xf0
 8001ae0:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001ae4:	889b      	ldrh	r3, [r3, #4]
 8001ae6:	f249 3241 	movw	r2, #37697	; 0x9341
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d005      	beq.n	8001afa <LCD_Display_Dir+0xfa>
 8001aee:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001af0:	889b      	ldrh	r3, [r3, #4]
 8001af2:	f245 3210 	movw	r2, #21264	; 0x5310
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d109      	bne.n	8001b0e <LCD_Display_Dir+0x10e>
		{
			lcddev.wramcmd=0X2C;
 8001afa:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001afc:	222c      	movs	r2, #44	; 0x2c
 8001afe:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8001b00:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001b02:	222a      	movs	r2, #42	; 0x2a
 8001b04:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001b06:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001b08:	222b      	movs	r2, #43	; 0x2b
 8001b0a:	819a      	strh	r2, [r3, #12]
 8001b0c:	e031      	b.n	8001b72 <LCD_Display_Dir+0x172>
		}else if(lcddev.id==0x5510)
 8001b0e:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001b10:	889b      	ldrh	r3, [r3, #4]
 8001b12:	f245 5210 	movw	r2, #21776	; 0x5510
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d114      	bne.n	8001b44 <LCD_Display_Dir+0x144>
		{
			lcddev.wramcmd=0X2C00;
 8001b1a:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001b1c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001b20:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8001b22:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001b24:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001b28:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001b2c:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001b30:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 8001b32:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001b34:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b38:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001b3c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b40:	805a      	strh	r2, [r3, #2]
 8001b42:	e016      	b.n	8001b72 <LCD_Display_Dir+0x172>
		}else if(lcddev.id==0X1963)
 8001b44:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001b46:	889b      	ldrh	r3, [r3, #4]
 8001b48:	f641 1263 	movw	r2, #6499	; 0x1963
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d110      	bne.n	8001b72 <LCD_Display_Dir+0x172>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001b52:	222c      	movs	r2, #44	; 0x2c
 8001b54:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001b58:	222a      	movs	r2, #42	; 0x2a
 8001b5a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001b5e:	222b      	movs	r2, #43	; 0x2b
 8001b60:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001b64:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b68:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001b6c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b70:	805a      	strh	r2, [r3, #2]
		}
		if(lcddev.id==0X5310)
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001b74:	889b      	ldrh	r3, [r3, #4]
 8001b76:	f245 3210 	movw	r2, #21264	; 0x5310
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d107      	bne.n	8001b8e <LCD_Display_Dir+0x18e>
		{
			lcddev.width=480;
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001b80:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b84:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <LCD_Display_Dir+0x19c>)
 8001b88:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b8c:	805a      	strh	r2, [r3, #2]
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f7ff fc4e 	bl	8001430 <LCD_Scan_Dir>
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000274 	.word	0x20000274

08001ba0 <TFTLCD_Init>:


//初始化lcd
//该初始化函数可以初始化各种型号的LCD(详见本.c文件最前面的描述)
void TFTLCD_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	HAL_Delay(50); // delay 50 ms
 8001ba4:	2032      	movs	r0, #50	; 0x32
 8001ba6:	f003 fba5 	bl	80052f4 <HAL_Delay>

	//尝试9341 ID的读取
	LCD_WR_REG(0XD3);
 8001baa:	20d3      	movs	r0, #211	; 0xd3
 8001bac:	f7ff faec 	bl	8001188 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001bb0:	f7ff fb12 	bl	80011d8 <LCD_RD_DATA>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b5e      	ldr	r3, [pc, #376]	; (8001d34 <TFTLCD_Init+0x194>)
 8001bba:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();	//读到0X00
 8001bbc:	f7ff fb0c 	bl	80011d8 <LCD_RD_DATA>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b5b      	ldr	r3, [pc, #364]	; (8001d34 <TFTLCD_Init+0x194>)
 8001bc6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();   	//读取93
 8001bc8:	f7ff fb06 	bl	80011d8 <LCD_RD_DATA>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4b58      	ldr	r3, [pc, #352]	; (8001d34 <TFTLCD_Init+0x194>)
 8001bd2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001bd4:	4b57      	ldr	r3, [pc, #348]	; (8001d34 <TFTLCD_Init+0x194>)
 8001bd6:	889b      	ldrh	r3, [r3, #4]
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	4b55      	ldr	r3, [pc, #340]	; (8001d34 <TFTLCD_Init+0x194>)
 8001bde:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();  	//读取41
 8001be0:	f7ff fafa 	bl	80011d8 <LCD_RD_DATA>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	4b52      	ldr	r3, [pc, #328]	; (8001d34 <TFTLCD_Init+0x194>)
 8001bea:	889b      	ldrh	r3, [r3, #4]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	4b50      	ldr	r3, [pc, #320]	; (8001d34 <TFTLCD_Init+0x194>)
 8001bf2:	809a      	strh	r2, [r3, #4]
	if(lcddev.id!=0X9341)		//非9341,尝试看看是不是NT35310
 8001bf4:	4b4f      	ldr	r3, [pc, #316]	; (8001d34 <TFTLCD_Init+0x194>)
 8001bf6:	889b      	ldrh	r3, [r3, #4]
 8001bf8:	f249 3241 	movw	r2, #37697	; 0x9341
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	f000 808b 	beq.w	8001d18 <TFTLCD_Init+0x178>
	{
		LCD_WR_REG(0XD4);
 8001c02:	20d4      	movs	r0, #212	; 0xd4
 8001c04:	f7ff fac0 	bl	8001188 <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();//dummy read
 8001c08:	f7ff fae6 	bl	80011d8 <LCD_RD_DATA>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4b48      	ldr	r3, [pc, #288]	; (8001d34 <TFTLCD_Init+0x194>)
 8001c12:	809a      	strh	r2, [r3, #4]
		lcddev.id=LCD_RD_DATA();//读回0X01
 8001c14:	f7ff fae0 	bl	80011d8 <LCD_RD_DATA>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b45      	ldr	r3, [pc, #276]	; (8001d34 <TFTLCD_Init+0x194>)
 8001c1e:	809a      	strh	r2, [r3, #4]
		lcddev.id=LCD_RD_DATA();//读回0X53
 8001c20:	f7ff fada 	bl	80011d8 <LCD_RD_DATA>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b42      	ldr	r3, [pc, #264]	; (8001d34 <TFTLCD_Init+0x194>)
 8001c2a:	809a      	strh	r2, [r3, #4]
		lcddev.id<<=8;
 8001c2c:	4b41      	ldr	r3, [pc, #260]	; (8001d34 <TFTLCD_Init+0x194>)
 8001c2e:	889b      	ldrh	r3, [r3, #4]
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	4b3f      	ldr	r3, [pc, #252]	; (8001d34 <TFTLCD_Init+0x194>)
 8001c36:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 8001c38:	f7ff face 	bl	80011d8 <LCD_RD_DATA>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b3c      	ldr	r3, [pc, #240]	; (8001d34 <TFTLCD_Init+0x194>)
 8001c42:	889b      	ldrh	r3, [r3, #4]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	4b3a      	ldr	r3, [pc, #232]	; (8001d34 <TFTLCD_Init+0x194>)
 8001c4a:	809a      	strh	r2, [r3, #4]
		if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001c4c:	4b39      	ldr	r3, [pc, #228]	; (8001d34 <TFTLCD_Init+0x194>)
 8001c4e:	889b      	ldrh	r3, [r3, #4]
 8001c50:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d05f      	beq.n	8001d18 <TFTLCD_Init+0x178>
		{
			LCD_WR_REG(0XDA00);
 8001c58:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8001c5c:	f7ff fa94 	bl	8001188 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA();		//读回0X00
 8001c60:	f7ff faba 	bl	80011d8 <LCD_RD_DATA>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b32      	ldr	r3, [pc, #200]	; (8001d34 <TFTLCD_Init+0x194>)
 8001c6a:	809a      	strh	r2, [r3, #4]
			LCD_WR_REG(0XDB00);
 8001c6c:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001c70:	f7ff fa8a 	bl	8001188 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA();		//读回0X80
 8001c74:	f7ff fab0 	bl	80011d8 <LCD_RD_DATA>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <TFTLCD_Init+0x194>)
 8001c7e:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 8001c80:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <TFTLCD_Init+0x194>)
 8001c82:	889b      	ldrh	r3, [r3, #4]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <TFTLCD_Init+0x194>)
 8001c8a:	809a      	strh	r2, [r3, #4]
			LCD_WR_REG(0XDC00);
 8001c8c:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8001c90:	f7ff fa7a 	bl	8001188 <LCD_WR_REG>
			lcddev.id|=LCD_RD_DATA();		//读回0X00
 8001c94:	f7ff faa0 	bl	80011d8 <LCD_RD_DATA>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <TFTLCD_Init+0x194>)
 8001c9e:	889b      	ldrh	r3, [r3, #4]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <TFTLCD_Init+0x194>)
 8001ca6:	809a      	strh	r2, [r3, #4]
			if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <TFTLCD_Init+0x194>)
 8001caa:	889b      	ldrh	r3, [r3, #4]
 8001cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cb0:	d103      	bne.n	8001cba <TFTLCD_Init+0x11a>
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <TFTLCD_Init+0x194>)
 8001cb4:	f245 5210 	movw	r2, #21776	; 0x5510
 8001cb8:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8001cba:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <TFTLCD_Init+0x194>)
 8001cbc:	889b      	ldrh	r3, [r3, #4]
 8001cbe:	f245 5210 	movw	r2, #21776	; 0x5510
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d028      	beq.n	8001d18 <TFTLCD_Init+0x178>
			{
				LCD_WR_REG(0XA1);
 8001cc6:	20a1      	movs	r0, #161	; 0xa1
 8001cc8:	f7ff fa5e 	bl	8001188 <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();
 8001ccc:	f7ff fa84 	bl	80011d8 <LCD_RD_DATA>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <TFTLCD_Init+0x194>)
 8001cd6:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();	//读回0X57
 8001cd8:	f7ff fa7e 	bl	80011d8 <LCD_RD_DATA>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <TFTLCD_Init+0x194>)
 8001ce2:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <TFTLCD_Init+0x194>)
 8001ce6:	889b      	ldrh	r3, [r3, #4]
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <TFTLCD_Init+0x194>)
 8001cee:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//读回0X61
 8001cf0:	f7ff fa72 	bl	80011d8 <LCD_RD_DATA>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <TFTLCD_Init+0x194>)
 8001cfa:	889b      	ldrh	r3, [r3, #4]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <TFTLCD_Init+0x194>)
 8001d02:	809a      	strh	r2, [r3, #4]
				if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <TFTLCD_Init+0x194>)
 8001d06:	889b      	ldrh	r3, [r3, #4]
 8001d08:	f245 7261 	movw	r2, #22369	; 0x5761
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d103      	bne.n	8001d18 <TFTLCD_Init+0x178>
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <TFTLCD_Init+0x194>)
 8001d12:	f641 1263 	movw	r2, #6499	; 0x1963
 8001d16:	809a      	strh	r2, [r3, #4]
			}
		}
	}
	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <TFTLCD_Init+0x194>)
 8001d1a:	889b      	ldrh	r3, [r3, #4]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4806      	ldr	r0, [pc, #24]	; (8001d38 <TFTLCD_Init+0x198>)
 8001d20:	f006 f884 	bl	8007e2c <iprintf>
	if(lcddev.id==0X9341)	//9341初始化
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <TFTLCD_Init+0x194>)
 8001d26:	889b      	ldrh	r3, [r3, #4]
 8001d28:	f249 3241 	movw	r2, #37697	; 0x9341
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	f040 811b 	bne.w	8001f68 <TFTLCD_Init+0x3c8>
 8001d32:	e003      	b.n	8001d3c <TFTLCD_Init+0x19c>
 8001d34:	20000274 	.word	0x20000274
 8001d38:	08009f48 	.word	0x08009f48
	{
		LCD_WR_REG(0xCF);
 8001d3c:	20cf      	movs	r0, #207	; 0xcf
 8001d3e:	f7ff fa23 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f7ff fa34 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 8001d48:	20c1      	movs	r0, #193	; 0xc1
 8001d4a:	f7ff fa31 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 8001d4e:	2030      	movs	r0, #48	; 0x30
 8001d50:	f7ff fa2e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 8001d54:	20ed      	movs	r0, #237	; 0xed
 8001d56:	f7ff fa17 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 8001d5a:	2064      	movs	r0, #100	; 0x64
 8001d5c:	f7ff fa28 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f7ff fa25 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 8001d66:	2012      	movs	r0, #18
 8001d68:	f7ff fa22 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 8001d6c:	2081      	movs	r0, #129	; 0x81
 8001d6e:	f7ff fa1f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 8001d72:	20e8      	movs	r0, #232	; 0xe8
 8001d74:	f7ff fa08 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 8001d78:	2085      	movs	r0, #133	; 0x85
 8001d7a:	f7ff fa19 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8001d7e:	2010      	movs	r0, #16
 8001d80:	f7ff fa16 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8001d84:	207a      	movs	r0, #122	; 0x7a
 8001d86:	f7ff fa13 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 8001d8a:	20cb      	movs	r0, #203	; 0xcb
 8001d8c:	f7ff f9fc 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 8001d90:	2039      	movs	r0, #57	; 0x39
 8001d92:	f7ff fa0d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8001d96:	202c      	movs	r0, #44	; 0x2c
 8001d98:	f7ff fa0a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f7ff fa07 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8001da2:	2034      	movs	r0, #52	; 0x34
 8001da4:	f7ff fa04 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8001da8:	2002      	movs	r0, #2
 8001daa:	f7ff fa01 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 8001dae:	20f7      	movs	r0, #247	; 0xf7
 8001db0:	f7ff f9ea 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8001db4:	2020      	movs	r0, #32
 8001db6:	f7ff f9fb 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 8001dba:	20ea      	movs	r0, #234	; 0xea
 8001dbc:	f7ff f9e4 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7ff f9f5 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff f9f2 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 8001dcc:	20c0      	movs	r0, #192	; 0xc0
 8001dce:	f7ff f9db 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001dd2:	201b      	movs	r0, #27
 8001dd4:	f7ff f9ec 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 8001dd8:	20c1      	movs	r0, #193	; 0xc1
 8001dda:	f7ff f9d5 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001dde:	2001      	movs	r0, #1
 8001de0:	f7ff f9e6 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 8001de4:	20c5      	movs	r0, #197	; 0xc5
 8001de6:	f7ff f9cf 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 8001dea:	2030      	movs	r0, #48	; 0x30
 8001dec:	f7ff f9e0 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 8001df0:	2030      	movs	r0, #48	; 0x30
 8001df2:	f7ff f9dd 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 8001df6:	20c7      	movs	r0, #199	; 0xc7
 8001df8:	f7ff f9c6 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 8001dfc:	20b7      	movs	r0, #183	; 0xb7
 8001dfe:	f7ff f9d7 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 8001e02:	2036      	movs	r0, #54	; 0x36
 8001e04:	f7ff f9c0 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 8001e08:	2048      	movs	r0, #72	; 0x48
 8001e0a:	f7ff f9d1 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 8001e0e:	203a      	movs	r0, #58	; 0x3a
 8001e10:	f7ff f9ba 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 8001e14:	2055      	movs	r0, #85	; 0x55
 8001e16:	f7ff f9cb 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 8001e1a:	20b1      	movs	r0, #177	; 0xb1
 8001e1c:	f7ff f9b4 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff f9c5 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 8001e26:	201a      	movs	r0, #26
 8001e28:	f7ff f9c2 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 8001e2c:	20b6      	movs	r0, #182	; 0xb6
 8001e2e:	f7ff f9ab 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8001e32:	200a      	movs	r0, #10
 8001e34:	f7ff f9bc 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8001e38:	20a2      	movs	r0, #162	; 0xa2
 8001e3a:	f7ff f9b9 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001e3e:	20f2      	movs	r0, #242	; 0xf2
 8001e40:	f7ff f9a2 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7ff f9b3 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 8001e4a:	2026      	movs	r0, #38	; 0x26
 8001e4c:	f7ff f99c 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8001e50:	2001      	movs	r0, #1
 8001e52:	f7ff f9ad 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 8001e56:	20e0      	movs	r0, #224	; 0xe0
 8001e58:	f7ff f996 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 8001e5c:	200f      	movs	r0, #15
 8001e5e:	f7ff f9a7 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8001e62:	202a      	movs	r0, #42	; 0x2a
 8001e64:	f7ff f9a4 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 8001e68:	2028      	movs	r0, #40	; 0x28
 8001e6a:	f7ff f9a1 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8001e6e:	2008      	movs	r0, #8
 8001e70:	f7ff f99e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 8001e74:	200e      	movs	r0, #14
 8001e76:	f7ff f99b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8001e7a:	2008      	movs	r0, #8
 8001e7c:	f7ff f998 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8001e80:	2054      	movs	r0, #84	; 0x54
 8001e82:	f7ff f995 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 8001e86:	20a9      	movs	r0, #169	; 0xa9
 8001e88:	f7ff f992 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8001e8c:	2043      	movs	r0, #67	; 0x43
 8001e8e:	f7ff f98f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 8001e92:	200a      	movs	r0, #10
 8001e94:	f7ff f98c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8001e98:	200f      	movs	r0, #15
 8001e9a:	f7ff f989 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff f986 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7ff f983 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f7ff f980 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7ff f97d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 8001eb6:	20e1      	movs	r0, #225	; 0xe1
 8001eb8:	f7ff f966 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f7ff f977 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 8001ec2:	2015      	movs	r0, #21
 8001ec4:	f7ff f974 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8001ec8:	2017      	movs	r0, #23
 8001eca:	f7ff f971 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 8001ece:	2007      	movs	r0, #7
 8001ed0:	f7ff f96e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8001ed4:	2011      	movs	r0, #17
 8001ed6:	f7ff f96b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 8001eda:	2006      	movs	r0, #6
 8001edc:	f7ff f968 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 8001ee0:	202b      	movs	r0, #43	; 0x2b
 8001ee2:	f7ff f965 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8001ee6:	2056      	movs	r0, #86	; 0x56
 8001ee8:	f7ff f962 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8001eec:	203c      	movs	r0, #60	; 0x3c
 8001eee:	f7ff f95f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8001ef2:	2005      	movs	r0, #5
 8001ef4:	f7ff f95c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8001ef8:	2010      	movs	r0, #16
 8001efa:	f7ff f959 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8001efe:	200f      	movs	r0, #15
 8001f00:	f7ff f956 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8001f04:	203f      	movs	r0, #63	; 0x3f
 8001f06:	f7ff f953 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8001f0a:	203f      	movs	r0, #63	; 0x3f
 8001f0c:	f7ff f950 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8001f10:	200f      	movs	r0, #15
 8001f12:	f7ff f94d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 8001f16:	202b      	movs	r0, #43	; 0x2b
 8001f18:	f7ff f936 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f7ff f947 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f7ff f944 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f7ff f941 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 8001f2e:	203f      	movs	r0, #63	; 0x3f
 8001f30:	f7ff f93e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 8001f34:	202a      	movs	r0, #42	; 0x2a
 8001f36:	f7ff f927 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff f938 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff f935 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f46:	2000      	movs	r0, #0
 8001f48:	f7ff f932 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 8001f4c:	20ef      	movs	r0, #239	; 0xef
 8001f4e:	f7ff f92f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 8001f52:	2011      	movs	r0, #17
 8001f54:	f7ff f918 	bl	8001188 <LCD_WR_REG>
		HAL_Delay(120);
 8001f58:	2078      	movs	r0, #120	; 0x78
 8001f5a:	f003 f9cb 	bl	80052f4 <HAL_Delay>
		LCD_WR_REG(0x29); //display on
 8001f5e:	2029      	movs	r0, #41	; 0x29
 8001f60:	f7ff f912 	bl	8001188 <LCD_WR_REG>
 8001f64:	f001 bfca 	b.w	8003efc <TFTLCD_Init+0x235c>
	}else if(lcddev.id==0x5310)
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <TFTLCD_Init+0x3d8>)
 8001f6a:	889b      	ldrh	r3, [r3, #4]
 8001f6c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f70:	4293      	cmp	r3, r2
 8001f72:	f040 877c 	bne.w	8002e6e <TFTLCD_Init+0x12ce>
 8001f76:	e001      	b.n	8001f7c <TFTLCD_Init+0x3dc>
 8001f78:	20000274 	.word	0x20000274
	{
		LCD_WR_REG(0xED);
 8001f7c:	20ed      	movs	r0, #237	; 0xed
 8001f7e:	f7ff f903 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8001f82:	2001      	movs	r0, #1
 8001f84:	f7ff f914 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 8001f88:	20fe      	movs	r0, #254	; 0xfe
 8001f8a:	f7ff f911 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 8001f8e:	20ee      	movs	r0, #238	; 0xee
 8001f90:	f7ff f8fa 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 8001f94:	20de      	movs	r0, #222	; 0xde
 8001f96:	f7ff f90b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8001f9a:	2021      	movs	r0, #33	; 0x21
 8001f9c:	f7ff f908 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 8001fa0:	20f1      	movs	r0, #241	; 0xf1
 8001fa2:	f7ff f8f1 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f7ff f902 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 8001fac:	20df      	movs	r0, #223	; 0xdf
 8001fae:	f7ff f8eb 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 8001fb2:	2010      	movs	r0, #16
 8001fb4:	f7ff f8fc 	bl	80011b0 <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8001fb8:	20c4      	movs	r0, #196	; 0xc4
 8001fba:	f7ff f8e5 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 8001fbe:	208f      	movs	r0, #143	; 0x8f
 8001fc0:	f7ff f8f6 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8001fc4:	20c6      	movs	r0, #198	; 0xc6
 8001fc6:	f7ff f8df 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7ff f8f0 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8001fd0:	20e2      	movs	r0, #226	; 0xe2
 8001fd2:	f7ff f8ed 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8001fd6:	20e2      	movs	r0, #226	; 0xe2
 8001fd8:	f7ff f8ea 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8001fdc:	20e2      	movs	r0, #226	; 0xe2
 8001fde:	f7ff f8e7 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 8001fe2:	20bf      	movs	r0, #191	; 0xbf
 8001fe4:	f7ff f8d0 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8001fe8:	20aa      	movs	r0, #170	; 0xaa
 8001fea:	f7ff f8e1 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 8001fee:	20b0      	movs	r0, #176	; 0xb0
 8001ff0:	f7ff f8ca 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 8001ff4:	200d      	movs	r0, #13
 8001ff6:	f7ff f8db 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f7ff f8d8 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 8002000:	200d      	movs	r0, #13
 8002002:	f7ff f8d5 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002006:	2000      	movs	r0, #0
 8002008:	f7ff f8d2 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 800200c:	2011      	movs	r0, #17
 800200e:	f7ff f8cf 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002012:	2000      	movs	r0, #0
 8002014:	f7ff f8cc 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 8002018:	2019      	movs	r0, #25
 800201a:	f7ff f8c9 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800201e:	2000      	movs	r0, #0
 8002020:	f7ff f8c6 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8002024:	2021      	movs	r0, #33	; 0x21
 8002026:	f7ff f8c3 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800202a:	2000      	movs	r0, #0
 800202c:	f7ff f8c0 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 8002030:	202d      	movs	r0, #45	; 0x2d
 8002032:	f7ff f8bd 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002036:	2000      	movs	r0, #0
 8002038:	f7ff f8ba 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 800203c:	203d      	movs	r0, #61	; 0x3d
 800203e:	f7ff f8b7 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002042:	2000      	movs	r0, #0
 8002044:	f7ff f8b4 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002048:	205d      	movs	r0, #93	; 0x5d
 800204a:	f7ff f8b1 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800204e:	2000      	movs	r0, #0
 8002050:	f7ff f8ae 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002054:	205d      	movs	r0, #93	; 0x5d
 8002056:	f7ff f8ab 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800205a:	2000      	movs	r0, #0
 800205c:	f7ff f8a8 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 8002060:	20b1      	movs	r0, #177	; 0xb1
 8002062:	f7ff f891 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 8002066:	2080      	movs	r0, #128	; 0x80
 8002068:	f7ff f8a2 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800206c:	2000      	movs	r0, #0
 800206e:	f7ff f89f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8002072:	208b      	movs	r0, #139	; 0x8b
 8002074:	f7ff f89c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002078:	2000      	movs	r0, #0
 800207a:	f7ff f899 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 800207e:	2096      	movs	r0, #150	; 0x96
 8002080:	f7ff f896 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002084:	2000      	movs	r0, #0
 8002086:	f7ff f893 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 800208a:	20b2      	movs	r0, #178	; 0xb2
 800208c:	f7ff f87c 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002090:	2000      	movs	r0, #0
 8002092:	f7ff f88d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002096:	2000      	movs	r0, #0
 8002098:	f7ff f88a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800209c:	2002      	movs	r0, #2
 800209e:	f7ff f887 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020a2:	2000      	movs	r0, #0
 80020a4:	f7ff f884 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 80020a8:	2003      	movs	r0, #3
 80020aa:	f7ff f881 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020ae:	2000      	movs	r0, #0
 80020b0:	f7ff f87e 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 80020b4:	20b3      	movs	r0, #179	; 0xb3
 80020b6:	f7ff f867 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80020ba:	2000      	movs	r0, #0
 80020bc:	f7ff f878 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020c0:	2000      	movs	r0, #0
 80020c2:	f7ff f875 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7ff f872 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020cc:	2000      	movs	r0, #0
 80020ce:	f7ff f86f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020d2:	2000      	movs	r0, #0
 80020d4:	f7ff f86c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020d8:	2000      	movs	r0, #0
 80020da:	f7ff f869 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020de:	2000      	movs	r0, #0
 80020e0:	f7ff f866 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff f863 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020ea:	2000      	movs	r0, #0
 80020ec:	f7ff f860 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7ff f85d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020f6:	2000      	movs	r0, #0
 80020f8:	f7ff f85a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7ff f857 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002102:	2000      	movs	r0, #0
 8002104:	f7ff f854 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002108:	2000      	movs	r0, #0
 800210a:	f7ff f851 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800210e:	2000      	movs	r0, #0
 8002110:	f7ff f84e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002114:	2000      	movs	r0, #0
 8002116:	f7ff f84b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800211a:	2000      	movs	r0, #0
 800211c:	f7ff f848 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002120:	2000      	movs	r0, #0
 8002122:	f7ff f845 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002126:	2000      	movs	r0, #0
 8002128:	f7ff f842 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800212c:	2000      	movs	r0, #0
 800212e:	f7ff f83f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002132:	2000      	movs	r0, #0
 8002134:	f7ff f83c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002138:	2000      	movs	r0, #0
 800213a:	f7ff f839 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800213e:	2000      	movs	r0, #0
 8002140:	f7ff f836 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002144:	2000      	movs	r0, #0
 8002146:	f7ff f833 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 800214a:	20b4      	movs	r0, #180	; 0xb4
 800214c:	f7ff f81c 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 8002150:	208b      	movs	r0, #139	; 0x8b
 8002152:	f7ff f82d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002156:	2000      	movs	r0, #0
 8002158:	f7ff f82a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 800215c:	2096      	movs	r0, #150	; 0x96
 800215e:	f7ff f827 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002162:	2000      	movs	r0, #0
 8002164:	f7ff f824 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 8002168:	20a1      	movs	r0, #161	; 0xa1
 800216a:	f7ff f821 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800216e:	2000      	movs	r0, #0
 8002170:	f7ff f81e 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 8002174:	20b5      	movs	r0, #181	; 0xb5
 8002176:	f7ff f807 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 800217a:	2002      	movs	r0, #2
 800217c:	f7ff f818 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002180:	2000      	movs	r0, #0
 8002182:	f7ff f815 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8002186:	2003      	movs	r0, #3
 8002188:	f7ff f812 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800218c:	2000      	movs	r0, #0
 800218e:	f7ff f80f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8002192:	2004      	movs	r0, #4
 8002194:	f7ff f80c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002198:	2000      	movs	r0, #0
 800219a:	f7ff f809 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 800219e:	20b6      	movs	r0, #182	; 0xb6
 80021a0:	f7fe fff2 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80021a4:	2000      	movs	r0, #0
 80021a6:	f7ff f803 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7ff f800 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 80021b0:	20b7      	movs	r0, #183	; 0xb7
 80021b2:	f7fe ffe9 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f7fe fffa 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021bc:	2000      	movs	r0, #0
 80021be:	f7fe fff7 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80021c2:	203f      	movs	r0, #63	; 0x3f
 80021c4:	f7fe fff4 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021c8:	2000      	movs	r0, #0
 80021ca:	f7fe fff1 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 80021ce:	205e      	movs	r0, #94	; 0x5e
 80021d0:	f7fe ffee 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7fe ffeb 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 80021da:	2064      	movs	r0, #100	; 0x64
 80021dc:	f7fe ffe8 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7fe ffe5 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 80021e6:	208c      	movs	r0, #140	; 0x8c
 80021e8:	f7fe ffe2 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021ec:	2000      	movs	r0, #0
 80021ee:	f7fe ffdf 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 80021f2:	20ac      	movs	r0, #172	; 0xac
 80021f4:	f7fe ffdc 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021f8:	2000      	movs	r0, #0
 80021fa:	f7fe ffd9 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 80021fe:	20dc      	movs	r0, #220	; 0xdc
 8002200:	f7fe ffd6 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002204:	2000      	movs	r0, #0
 8002206:	f7fe ffd3 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 800220a:	2070      	movs	r0, #112	; 0x70
 800220c:	f7fe ffd0 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002210:	2000      	movs	r0, #0
 8002212:	f7fe ffcd 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 8002216:	2090      	movs	r0, #144	; 0x90
 8002218:	f7fe ffca 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800221c:	2000      	movs	r0, #0
 800221e:	f7fe ffc7 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 8002222:	20eb      	movs	r0, #235	; 0xeb
 8002224:	f7fe ffc4 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002228:	2000      	movs	r0, #0
 800222a:	f7fe ffc1 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 800222e:	20dc      	movs	r0, #220	; 0xdc
 8002230:	f7fe ffbe 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002234:	2000      	movs	r0, #0
 8002236:	f7fe ffbb 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 800223a:	20b8      	movs	r0, #184	; 0xb8
 800223c:	f7fe ffa4 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002240:	2000      	movs	r0, #0
 8002242:	f7fe ffb5 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002246:	2000      	movs	r0, #0
 8002248:	f7fe ffb2 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800224c:	2000      	movs	r0, #0
 800224e:	f7fe ffaf 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002252:	2000      	movs	r0, #0
 8002254:	f7fe ffac 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002258:	2000      	movs	r0, #0
 800225a:	f7fe ffa9 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800225e:	2000      	movs	r0, #0
 8002260:	f7fe ffa6 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002264:	2000      	movs	r0, #0
 8002266:	f7fe ffa3 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800226a:	2000      	movs	r0, #0
 800226c:	f7fe ffa0 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 8002270:	20ba      	movs	r0, #186	; 0xba
 8002272:	f7fe ff89 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 8002276:	2024      	movs	r0, #36	; 0x24
 8002278:	f7fe ff9a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800227c:	2000      	movs	r0, #0
 800227e:	f7fe ff97 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002282:	2000      	movs	r0, #0
 8002284:	f7fe ff94 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002288:	2000      	movs	r0, #0
 800228a:	f7fe ff91 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 800228e:	20c1      	movs	r0, #193	; 0xc1
 8002290:	f7fe ff7a 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8002294:	2020      	movs	r0, #32
 8002296:	f7fe ff8b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800229a:	2000      	movs	r0, #0
 800229c:	f7fe ff88 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 80022a0:	2054      	movs	r0, #84	; 0x54
 80022a2:	f7fe ff85 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022a6:	2000      	movs	r0, #0
 80022a8:	f7fe ff82 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 80022ac:	20ff      	movs	r0, #255	; 0xff
 80022ae:	f7fe ff7f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022b2:	2000      	movs	r0, #0
 80022b4:	f7fe ff7c 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 80022b8:	20c2      	movs	r0, #194	; 0xc2
 80022ba:	f7fe ff65 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 80022be:	200a      	movs	r0, #10
 80022c0:	f7fe ff76 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022c4:	2000      	movs	r0, #0
 80022c6:	f7fe ff73 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 80022ca:	2004      	movs	r0, #4
 80022cc:	f7fe ff70 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022d0:	2000      	movs	r0, #0
 80022d2:	f7fe ff6d 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 80022d6:	20c3      	movs	r0, #195	; 0xc3
 80022d8:	f7fe ff56 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 80022dc:	203c      	movs	r0, #60	; 0x3c
 80022de:	f7fe ff67 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7fe ff64 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 80022e8:	203a      	movs	r0, #58	; 0x3a
 80022ea:	f7fe ff61 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ee:	2000      	movs	r0, #0
 80022f0:	f7fe ff5e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 80022f4:	2039      	movs	r0, #57	; 0x39
 80022f6:	f7fe ff5b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f7fe ff58 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 8002300:	2037      	movs	r0, #55	; 0x37
 8002302:	f7fe ff55 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002306:	2000      	movs	r0, #0
 8002308:	f7fe ff52 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 800230c:	203c      	movs	r0, #60	; 0x3c
 800230e:	f7fe ff4f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002312:	2000      	movs	r0, #0
 8002314:	f7fe ff4c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002318:	2036      	movs	r0, #54	; 0x36
 800231a:	f7fe ff49 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800231e:	2000      	movs	r0, #0
 8002320:	f7fe ff46 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8002324:	2032      	movs	r0, #50	; 0x32
 8002326:	f7fe ff43 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800232a:	2000      	movs	r0, #0
 800232c:	f7fe ff40 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8002330:	202f      	movs	r0, #47	; 0x2f
 8002332:	f7fe ff3d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002336:	2000      	movs	r0, #0
 8002338:	f7fe ff3a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 800233c:	202c      	movs	r0, #44	; 0x2c
 800233e:	f7fe ff37 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002342:	2000      	movs	r0, #0
 8002344:	f7fe ff34 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002348:	2029      	movs	r0, #41	; 0x29
 800234a:	f7fe ff31 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800234e:	2000      	movs	r0, #0
 8002350:	f7fe ff2e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8002354:	2026      	movs	r0, #38	; 0x26
 8002356:	f7fe ff2b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800235a:	2000      	movs	r0, #0
 800235c:	f7fe ff28 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002360:	2024      	movs	r0, #36	; 0x24
 8002362:	f7fe ff25 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002366:	2000      	movs	r0, #0
 8002368:	f7fe ff22 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 800236c:	2024      	movs	r0, #36	; 0x24
 800236e:	f7fe ff1f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002372:	2000      	movs	r0, #0
 8002374:	f7fe ff1c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002378:	2023      	movs	r0, #35	; 0x23
 800237a:	f7fe ff19 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800237e:	2000      	movs	r0, #0
 8002380:	f7fe ff16 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002384:	203c      	movs	r0, #60	; 0x3c
 8002386:	f7fe ff13 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800238a:	2000      	movs	r0, #0
 800238c:	f7fe ff10 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002390:	2036      	movs	r0, #54	; 0x36
 8002392:	f7fe ff0d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002396:	2000      	movs	r0, #0
 8002398:	f7fe ff0a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 800239c:	2032      	movs	r0, #50	; 0x32
 800239e:	f7fe ff07 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7fe ff04 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 80023a8:	202f      	movs	r0, #47	; 0x2f
 80023aa:	f7fe ff01 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023ae:	2000      	movs	r0, #0
 80023b0:	f7fe fefe 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 80023b4:	202c      	movs	r0, #44	; 0x2c
 80023b6:	f7fe fefb 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023ba:	2000      	movs	r0, #0
 80023bc:	f7fe fef8 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 80023c0:	2029      	movs	r0, #41	; 0x29
 80023c2:	f7fe fef5 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7fe fef2 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 80023cc:	2026      	movs	r0, #38	; 0x26
 80023ce:	f7fe feef 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7fe feec 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 80023d8:	2024      	movs	r0, #36	; 0x24
 80023da:	f7fe fee9 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023de:	2000      	movs	r0, #0
 80023e0:	f7fe fee6 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 80023e4:	2024      	movs	r0, #36	; 0x24
 80023e6:	f7fe fee3 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7fe fee0 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 80023f0:	2023      	movs	r0, #35	; 0x23
 80023f2:	f7fe fedd 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7fe feda 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 80023fc:	20c4      	movs	r0, #196	; 0xc4
 80023fe:	f7fe fec3 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 8002402:	2062      	movs	r0, #98	; 0x62
 8002404:	f7fe fed4 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002408:	2000      	movs	r0, #0
 800240a:	f7fe fed1 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 800240e:	2005      	movs	r0, #5
 8002410:	f7fe fece 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002414:	2000      	movs	r0, #0
 8002416:	f7fe fecb 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 800241a:	2084      	movs	r0, #132	; 0x84
 800241c:	f7fe fec8 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002420:	2000      	movs	r0, #0
 8002422:	f7fe fec5 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 8002426:	20f0      	movs	r0, #240	; 0xf0
 8002428:	f7fe fec2 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800242c:	2000      	movs	r0, #0
 800242e:	f7fe febf 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8002432:	2018      	movs	r0, #24
 8002434:	f7fe febc 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe feb9 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 800243e:	20a4      	movs	r0, #164	; 0xa4
 8002440:	f7fe feb6 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002444:	2000      	movs	r0, #0
 8002446:	f7fe feb3 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 800244a:	2018      	movs	r0, #24
 800244c:	f7fe feb0 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002450:	2000      	movs	r0, #0
 8002452:	f7fe fead 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002456:	2050      	movs	r0, #80	; 0x50
 8002458:	f7fe feaa 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800245c:	2000      	movs	r0, #0
 800245e:	f7fe fea7 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 8002462:	200c      	movs	r0, #12
 8002464:	f7fe fea4 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002468:	2000      	movs	r0, #0
 800246a:	f7fe fea1 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 800246e:	2017      	movs	r0, #23
 8002470:	f7fe fe9e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002474:	2000      	movs	r0, #0
 8002476:	f7fe fe9b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 800247a:	2095      	movs	r0, #149	; 0x95
 800247c:	f7fe fe98 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002480:	2000      	movs	r0, #0
 8002482:	f7fe fe95 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002486:	20f3      	movs	r0, #243	; 0xf3
 8002488:	f7fe fe92 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800248c:	2000      	movs	r0, #0
 800248e:	f7fe fe8f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 8002492:	20e6      	movs	r0, #230	; 0xe6
 8002494:	f7fe fe8c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002498:	2000      	movs	r0, #0
 800249a:	f7fe fe89 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 800249e:	20c5      	movs	r0, #197	; 0xc5
 80024a0:	f7fe fe72 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 80024a4:	2032      	movs	r0, #50	; 0x32
 80024a6:	f7fe fe83 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7fe fe80 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80024b0:	2044      	movs	r0, #68	; 0x44
 80024b2:	f7fe fe7d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024b6:	2000      	movs	r0, #0
 80024b8:	f7fe fe7a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 80024bc:	2065      	movs	r0, #101	; 0x65
 80024be:	f7fe fe77 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7fe fe74 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80024c8:	2076      	movs	r0, #118	; 0x76
 80024ca:	f7fe fe71 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7fe fe6e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80024d4:	2088      	movs	r0, #136	; 0x88
 80024d6:	f7fe fe6b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024da:	2000      	movs	r0, #0
 80024dc:	f7fe fe68 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 80024e0:	20c6      	movs	r0, #198	; 0xc6
 80024e2:	f7fe fe51 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 80024e6:	2020      	movs	r0, #32
 80024e8:	f7fe fe62 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7fe fe5f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 80024f2:	2017      	movs	r0, #23
 80024f4:	f7fe fe5c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7fe fe59 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 80024fe:	2001      	movs	r0, #1
 8002500:	f7fe fe56 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002504:	2000      	movs	r0, #0
 8002506:	f7fe fe53 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 800250a:	20c7      	movs	r0, #199	; 0xc7
 800250c:	f7fe fe3c 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002510:	2000      	movs	r0, #0
 8002512:	f7fe fe4d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe fe4a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800251c:	2000      	movs	r0, #0
 800251e:	f7fe fe47 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002522:	2000      	movs	r0, #0
 8002524:	f7fe fe44 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8002528:	20c8      	movs	r0, #200	; 0xc8
 800252a:	f7fe fe2d 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800252e:	2000      	movs	r0, #0
 8002530:	f7fe fe3e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002534:	2000      	movs	r0, #0
 8002536:	f7fe fe3b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800253a:	2000      	movs	r0, #0
 800253c:	f7fe fe38 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002540:	2000      	movs	r0, #0
 8002542:	f7fe fe35 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 8002546:	20c9      	movs	r0, #201	; 0xc9
 8002548:	f7fe fe1e 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800254c:	2000      	movs	r0, #0
 800254e:	f7fe fe2f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002552:	2000      	movs	r0, #0
 8002554:	f7fe fe2c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002558:	2000      	movs	r0, #0
 800255a:	f7fe fe29 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800255e:	2000      	movs	r0, #0
 8002560:	f7fe fe26 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002564:	2000      	movs	r0, #0
 8002566:	f7fe fe23 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800256a:	2000      	movs	r0, #0
 800256c:	f7fe fe20 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002570:	2000      	movs	r0, #0
 8002572:	f7fe fe1d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002576:	2000      	movs	r0, #0
 8002578:	f7fe fe1a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800257c:	2000      	movs	r0, #0
 800257e:	f7fe fe17 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002582:	2000      	movs	r0, #0
 8002584:	f7fe fe14 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002588:	2000      	movs	r0, #0
 800258a:	f7fe fe11 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800258e:	2000      	movs	r0, #0
 8002590:	f7fe fe0e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002594:	2000      	movs	r0, #0
 8002596:	f7fe fe0b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800259a:	2000      	movs	r0, #0
 800259c:	f7fe fe08 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025a0:	2000      	movs	r0, #0
 80025a2:	f7fe fe05 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7fe fe02 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 80025ac:	20e0      	movs	r0, #224	; 0xe0
 80025ae:	f7fe fdeb 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 80025b2:	2016      	movs	r0, #22
 80025b4:	f7fe fdfc 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7fe fdf9 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80025be:	201c      	movs	r0, #28
 80025c0:	f7fe fdf6 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025c4:	2000      	movs	r0, #0
 80025c6:	f7fe fdf3 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 80025ca:	2021      	movs	r0, #33	; 0x21
 80025cc:	f7fe fdf0 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025d0:	2000      	movs	r0, #0
 80025d2:	f7fe fded 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80025d6:	2036      	movs	r0, #54	; 0x36
 80025d8:	f7fe fdea 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025dc:	2000      	movs	r0, #0
 80025de:	f7fe fde7 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 80025e2:	2046      	movs	r0, #70	; 0x46
 80025e4:	f7fe fde4 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7fe fde1 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80025ee:	2052      	movs	r0, #82	; 0x52
 80025f0:	f7fe fdde 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7fe fddb 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 80025fa:	2064      	movs	r0, #100	; 0x64
 80025fc:	f7fe fdd8 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002600:	2000      	movs	r0, #0
 8002602:	f7fe fdd5 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8002606:	207a      	movs	r0, #122	; 0x7a
 8002608:	f7fe fdd2 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800260c:	2000      	movs	r0, #0
 800260e:	f7fe fdcf 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8002612:	208b      	movs	r0, #139	; 0x8b
 8002614:	f7fe fdcc 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002618:	2000      	movs	r0, #0
 800261a:	f7fe fdc9 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800261e:	2099      	movs	r0, #153	; 0x99
 8002620:	f7fe fdc6 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002624:	2000      	movs	r0, #0
 8002626:	f7fe fdc3 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 800262a:	20a8      	movs	r0, #168	; 0xa8
 800262c:	f7fe fdc0 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002630:	2000      	movs	r0, #0
 8002632:	f7fe fdbd 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8002636:	20b9      	movs	r0, #185	; 0xb9
 8002638:	f7fe fdba 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800263c:	2000      	movs	r0, #0
 800263e:	f7fe fdb7 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002642:	20c4      	movs	r0, #196	; 0xc4
 8002644:	f7fe fdb4 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002648:	2000      	movs	r0, #0
 800264a:	f7fe fdb1 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 800264e:	20ca      	movs	r0, #202	; 0xca
 8002650:	f7fe fdae 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002654:	2000      	movs	r0, #0
 8002656:	f7fe fdab 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 800265a:	20d2      	movs	r0, #210	; 0xd2
 800265c:	f7fe fda8 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002660:	2000      	movs	r0, #0
 8002662:	f7fe fda5 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 8002666:	20d9      	movs	r0, #217	; 0xd9
 8002668:	f7fe fda2 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800266c:	2000      	movs	r0, #0
 800266e:	f7fe fd9f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8002672:	20e0      	movs	r0, #224	; 0xe0
 8002674:	f7fe fd9c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002678:	2000      	movs	r0, #0
 800267a:	f7fe fd99 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800267e:	20f3      	movs	r0, #243	; 0xf3
 8002680:	f7fe fd96 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002684:	2000      	movs	r0, #0
 8002686:	f7fe fd93 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 800268a:	20e1      	movs	r0, #225	; 0xe1
 800268c:	f7fe fd7c 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8002690:	2016      	movs	r0, #22
 8002692:	f7fe fd8d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002696:	2000      	movs	r0, #0
 8002698:	f7fe fd8a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 800269c:	201c      	movs	r0, #28
 800269e:	f7fe fd87 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f7fe fd84 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 80026a8:	2022      	movs	r0, #34	; 0x22
 80026aa:	f7fe fd81 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7fe fd7e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80026b4:	2036      	movs	r0, #54	; 0x36
 80026b6:	f7fe fd7b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026ba:	2000      	movs	r0, #0
 80026bc:	f7fe fd78 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80026c0:	2045      	movs	r0, #69	; 0x45
 80026c2:	f7fe fd75 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026c6:	2000      	movs	r0, #0
 80026c8:	f7fe fd72 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80026cc:	2052      	movs	r0, #82	; 0x52
 80026ce:	f7fe fd6f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026d2:	2000      	movs	r0, #0
 80026d4:	f7fe fd6c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 80026d8:	2064      	movs	r0, #100	; 0x64
 80026da:	f7fe fd69 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026de:	2000      	movs	r0, #0
 80026e0:	f7fe fd66 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 80026e4:	207a      	movs	r0, #122	; 0x7a
 80026e6:	f7fe fd63 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f7fe fd60 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 80026f0:	208b      	movs	r0, #139	; 0x8b
 80026f2:	f7fe fd5d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7fe fd5a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80026fc:	2099      	movs	r0, #153	; 0x99
 80026fe:	f7fe fd57 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe fd54 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002708:	20a8      	movs	r0, #168	; 0xa8
 800270a:	f7fe fd51 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800270e:	2000      	movs	r0, #0
 8002710:	f7fe fd4e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8002714:	20b9      	movs	r0, #185	; 0xb9
 8002716:	f7fe fd4b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800271a:	2000      	movs	r0, #0
 800271c:	f7fe fd48 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002720:	20c4      	movs	r0, #196	; 0xc4
 8002722:	f7fe fd45 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002726:	2000      	movs	r0, #0
 8002728:	f7fe fd42 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 800272c:	20ca      	movs	r0, #202	; 0xca
 800272e:	f7fe fd3f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002732:	2000      	movs	r0, #0
 8002734:	f7fe fd3c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002738:	20d2      	movs	r0, #210	; 0xd2
 800273a:	f7fe fd39 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800273e:	2000      	movs	r0, #0
 8002740:	f7fe fd36 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 8002744:	20d8      	movs	r0, #216	; 0xd8
 8002746:	f7fe fd33 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800274a:	2000      	movs	r0, #0
 800274c:	f7fe fd30 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8002750:	20e0      	movs	r0, #224	; 0xe0
 8002752:	f7fe fd2d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002756:	2000      	movs	r0, #0
 8002758:	f7fe fd2a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800275c:	20f3      	movs	r0, #243	; 0xf3
 800275e:	f7fe fd27 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002762:	2000      	movs	r0, #0
 8002764:	f7fe fd24 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 8002768:	20e2      	movs	r0, #226	; 0xe2
 800276a:	f7fe fd0d 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 800276e:	2005      	movs	r0, #5
 8002770:	f7fe fd1e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002774:	2000      	movs	r0, #0
 8002776:	f7fe fd1b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 800277a:	200b      	movs	r0, #11
 800277c:	f7fe fd18 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002780:	2000      	movs	r0, #0
 8002782:	f7fe fd15 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 8002786:	201b      	movs	r0, #27
 8002788:	f7fe fd12 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800278c:	2000      	movs	r0, #0
 800278e:	f7fe fd0f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8002792:	2034      	movs	r0, #52	; 0x34
 8002794:	f7fe fd0c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002798:	2000      	movs	r0, #0
 800279a:	f7fe fd09 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800279e:	2044      	movs	r0, #68	; 0x44
 80027a0:	f7fe fd06 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7fe fd03 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 80027aa:	204f      	movs	r0, #79	; 0x4f
 80027ac:	f7fe fd00 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7fe fcfd 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 80027b6:	2061      	movs	r0, #97	; 0x61
 80027b8:	f7fe fcfa 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027bc:	2000      	movs	r0, #0
 80027be:	f7fe fcf7 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 80027c2:	2079      	movs	r0, #121	; 0x79
 80027c4:	f7fe fcf4 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7fe fcf1 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80027ce:	2088      	movs	r0, #136	; 0x88
 80027d0:	f7fe fcee 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7fe fceb 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 80027da:	2097      	movs	r0, #151	; 0x97
 80027dc:	f7fe fce8 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7fe fce5 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 80027e6:	20a6      	movs	r0, #166	; 0xa6
 80027e8:	f7fe fce2 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7fe fcdf 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 80027f2:	20b7      	movs	r0, #183	; 0xb7
 80027f4:	f7fe fcdc 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7fe fcd9 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 80027fe:	20c2      	movs	r0, #194	; 0xc2
 8002800:	f7fe fcd6 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002804:	2000      	movs	r0, #0
 8002806:	f7fe fcd3 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 800280a:	20c7      	movs	r0, #199	; 0xc7
 800280c:	f7fe fcd0 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002810:	2000      	movs	r0, #0
 8002812:	f7fe fccd 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8002816:	20d1      	movs	r0, #209	; 0xd1
 8002818:	f7fe fcca 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800281c:	2000      	movs	r0, #0
 800281e:	f7fe fcc7 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 8002822:	20d6      	movs	r0, #214	; 0xd6
 8002824:	f7fe fcc4 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002828:	2000      	movs	r0, #0
 800282a:	f7fe fcc1 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 800282e:	20dd      	movs	r0, #221	; 0xdd
 8002830:	f7fe fcbe 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002834:	2000      	movs	r0, #0
 8002836:	f7fe fcbb 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800283a:	20f3      	movs	r0, #243	; 0xf3
 800283c:	f7fe fcb8 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002840:	2000      	movs	r0, #0
 8002842:	f7fe fcb5 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 8002846:	20e3      	movs	r0, #227	; 0xe3
 8002848:	f7fe fc9e 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 800284c:	2005      	movs	r0, #5
 800284e:	f7fe fcaf 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002852:	2000      	movs	r0, #0
 8002854:	f7fe fcac 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 8002858:	200a      	movs	r0, #10
 800285a:	f7fe fca9 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800285e:	2000      	movs	r0, #0
 8002860:	f7fe fca6 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8002864:	201c      	movs	r0, #28
 8002866:	f7fe fca3 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800286a:	2000      	movs	r0, #0
 800286c:	f7fe fca0 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002870:	2033      	movs	r0, #51	; 0x33
 8002872:	f7fe fc9d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002876:	2000      	movs	r0, #0
 8002878:	f7fe fc9a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800287c:	2044      	movs	r0, #68	; 0x44
 800287e:	f7fe fc97 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002882:	2000      	movs	r0, #0
 8002884:	f7fe fc94 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002888:	2050      	movs	r0, #80	; 0x50
 800288a:	f7fe fc91 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800288e:	2000      	movs	r0, #0
 8002890:	f7fe fc8e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 8002894:	2062      	movs	r0, #98	; 0x62
 8002896:	f7fe fc8b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800289a:	2000      	movs	r0, #0
 800289c:	f7fe fc88 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 80028a0:	2078      	movs	r0, #120	; 0x78
 80028a2:	f7fe fc85 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028a6:	2000      	movs	r0, #0
 80028a8:	f7fe fc82 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80028ac:	2088      	movs	r0, #136	; 0x88
 80028ae:	f7fe fc7f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7fe fc7c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 80028b8:	2097      	movs	r0, #151	; 0x97
 80028ba:	f7fe fc79 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028be:	2000      	movs	r0, #0
 80028c0:	f7fe fc76 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 80028c4:	20a6      	movs	r0, #166	; 0xa6
 80028c6:	f7fe fc73 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ca:	2000      	movs	r0, #0
 80028cc:	f7fe fc70 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 80028d0:	20b7      	movs	r0, #183	; 0xb7
 80028d2:	f7fe fc6d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7fe fc6a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 80028dc:	20c2      	movs	r0, #194	; 0xc2
 80028de:	f7fe fc67 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028e2:	2000      	movs	r0, #0
 80028e4:	f7fe fc64 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 80028e8:	20c7      	movs	r0, #199	; 0xc7
 80028ea:	f7fe fc61 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7fe fc5e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 80028f4:	20d1      	movs	r0, #209	; 0xd1
 80028f6:	f7fe fc5b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028fa:	2000      	movs	r0, #0
 80028fc:	f7fe fc58 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 8002900:	20d5      	movs	r0, #213	; 0xd5
 8002902:	f7fe fc55 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002906:	2000      	movs	r0, #0
 8002908:	f7fe fc52 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 800290c:	20dd      	movs	r0, #221	; 0xdd
 800290e:	f7fe fc4f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002912:	2000      	movs	r0, #0
 8002914:	f7fe fc4c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002918:	20f3      	movs	r0, #243	; 0xf3
 800291a:	f7fe fc49 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800291e:	2000      	movs	r0, #0
 8002920:	f7fe fc46 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 8002924:	20e4      	movs	r0, #228	; 0xe4
 8002926:	f7fe fc2f 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 800292a:	2001      	movs	r0, #1
 800292c:	f7fe fc40 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002930:	2000      	movs	r0, #0
 8002932:	f7fe fc3d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8002936:	2001      	movs	r0, #1
 8002938:	f7fe fc3a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800293c:	2000      	movs	r0, #0
 800293e:	f7fe fc37 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002942:	2002      	movs	r0, #2
 8002944:	f7fe fc34 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002948:	2000      	movs	r0, #0
 800294a:	f7fe fc31 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 800294e:	202a      	movs	r0, #42	; 0x2a
 8002950:	f7fe fc2e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002954:	2000      	movs	r0, #0
 8002956:	f7fe fc2b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 800295a:	203c      	movs	r0, #60	; 0x3c
 800295c:	f7fe fc28 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002960:	2000      	movs	r0, #0
 8002962:	f7fe fc25 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8002966:	204b      	movs	r0, #75	; 0x4b
 8002968:	f7fe fc22 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800296c:	2000      	movs	r0, #0
 800296e:	f7fe fc1f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002972:	205d      	movs	r0, #93	; 0x5d
 8002974:	f7fe fc1c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002978:	2000      	movs	r0, #0
 800297a:	f7fe fc19 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 800297e:	2074      	movs	r0, #116	; 0x74
 8002980:	f7fe fc16 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002984:	2000      	movs	r0, #0
 8002986:	f7fe fc13 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 800298a:	2084      	movs	r0, #132	; 0x84
 800298c:	f7fe fc10 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002990:	2000      	movs	r0, #0
 8002992:	f7fe fc0d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8002996:	2093      	movs	r0, #147	; 0x93
 8002998:	f7fe fc0a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800299c:	2000      	movs	r0, #0
 800299e:	f7fe fc07 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 80029a2:	20a2      	movs	r0, #162	; 0xa2
 80029a4:	f7fe fc04 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7fe fc01 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 80029ae:	20b3      	movs	r0, #179	; 0xb3
 80029b0:	f7fe fbfe 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7fe fbfb 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 80029ba:	20be      	movs	r0, #190	; 0xbe
 80029bc:	f7fe fbf8 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7fe fbf5 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 80029c6:	20c4      	movs	r0, #196	; 0xc4
 80029c8:	f7fe fbf2 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7fe fbef 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 80029d2:	20cd      	movs	r0, #205	; 0xcd
 80029d4:	f7fe fbec 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029d8:	2000      	movs	r0, #0
 80029da:	f7fe fbe9 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 80029de:	20d3      	movs	r0, #211	; 0xd3
 80029e0:	f7fe fbe6 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7fe fbe3 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 80029ea:	20dd      	movs	r0, #221	; 0xdd
 80029ec:	f7fe fbe0 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7fe fbdd 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80029f6:	20f3      	movs	r0, #243	; 0xf3
 80029f8:	f7fe fbda 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7fe fbd7 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 8002a02:	20e5      	movs	r0, #229	; 0xe5
 8002a04:	f7fe fbc0 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7fe fbd1 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f7fe fbce 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fe fbcb 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f7fe fbc8 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002a20:	2002      	movs	r0, #2
 8002a22:	f7fe fbc5 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a26:	2000      	movs	r0, #0
 8002a28:	f7fe fbc2 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002a2c:	2029      	movs	r0, #41	; 0x29
 8002a2e:	f7fe fbbf 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a32:	2000      	movs	r0, #0
 8002a34:	f7fe fbbc 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002a38:	203c      	movs	r0, #60	; 0x3c
 8002a3a:	f7fe fbb9 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7fe fbb6 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8002a44:	204b      	movs	r0, #75	; 0x4b
 8002a46:	f7fe fbb3 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f7fe fbb0 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002a50:	205d      	movs	r0, #93	; 0x5d
 8002a52:	f7fe fbad 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a56:	2000      	movs	r0, #0
 8002a58:	f7fe fbaa 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8002a5c:	2074      	movs	r0, #116	; 0x74
 8002a5e:	f7fe fba7 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7fe fba4 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002a68:	2084      	movs	r0, #132	; 0x84
 8002a6a:	f7fe fba1 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7fe fb9e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8002a74:	2093      	movs	r0, #147	; 0x93
 8002a76:	f7fe fb9b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f7fe fb98 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002a80:	20a2      	movs	r0, #162	; 0xa2
 8002a82:	f7fe fb95 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7fe fb92 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8002a8c:	20b3      	movs	r0, #179	; 0xb3
 8002a8e:	f7fe fb8f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f7fe fb8c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8002a98:	20be      	movs	r0, #190	; 0xbe
 8002a9a:	f7fe fb89 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7fe fb86 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002aa4:	20c4      	movs	r0, #196	; 0xc4
 8002aa6:	f7fe fb83 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7fe fb80 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 8002ab0:	20cd      	movs	r0, #205	; 0xcd
 8002ab2:	f7fe fb7d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7fe fb7a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8002abc:	20d3      	movs	r0, #211	; 0xd3
 8002abe:	f7fe fb77 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f7fe fb74 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002ac8:	20dc      	movs	r0, #220	; 0xdc
 8002aca:	f7fe fb71 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f7fe fb6e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002ad4:	20f3      	movs	r0, #243	; 0xf3
 8002ad6:	f7fe fb6b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7fe fb68 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 8002ae0:	20e6      	movs	r0, #230	; 0xe6
 8002ae2:	f7fe fb51 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 8002ae6:	2011      	movs	r0, #17
 8002ae8:	f7fe fb62 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7fe fb5f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8002af2:	2034      	movs	r0, #52	; 0x34
 8002af4:	f7fe fb5c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002af8:	2000      	movs	r0, #0
 8002afa:	f7fe fb59 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002afe:	2056      	movs	r0, #86	; 0x56
 8002b00:	f7fe fb56 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7fe fb53 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002b0a:	2076      	movs	r0, #118	; 0x76
 8002b0c:	f7fe fb50 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7fe fb4d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002b16:	2077      	movs	r0, #119	; 0x77
 8002b18:	f7fe fb4a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7fe fb47 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002b22:	2066      	movs	r0, #102	; 0x66
 8002b24:	f7fe fb44 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f7fe fb41 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002b2e:	2088      	movs	r0, #136	; 0x88
 8002b30:	f7fe fb3e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b34:	2000      	movs	r0, #0
 8002b36:	f7fe fb3b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002b3a:	2099      	movs	r0, #153	; 0x99
 8002b3c:	f7fe fb38 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7fe fb35 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002b46:	20bb      	movs	r0, #187	; 0xbb
 8002b48:	f7fe fb32 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f7fe fb2f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002b52:	2099      	movs	r0, #153	; 0x99
 8002b54:	f7fe fb2c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f7fe fb29 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002b5e:	2066      	movs	r0, #102	; 0x66
 8002b60:	f7fe fb26 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7fe fb23 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002b6a:	2055      	movs	r0, #85	; 0x55
 8002b6c:	f7fe fb20 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b70:	2000      	movs	r0, #0
 8002b72:	f7fe fb1d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002b76:	2055      	movs	r0, #85	; 0x55
 8002b78:	f7fe fb1a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7fe fb17 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8002b82:	2045      	movs	r0, #69	; 0x45
 8002b84:	f7fe fb14 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f7fe fb11 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8002b8e:	2043      	movs	r0, #67	; 0x43
 8002b90:	f7fe fb0e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7fe fb0b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002b9a:	2044      	movs	r0, #68	; 0x44
 8002b9c:	f7fe fb08 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f7fe fb05 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 8002ba6:	20e7      	movs	r0, #231	; 0xe7
 8002ba8:	f7fe faee 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8002bac:	2032      	movs	r0, #50	; 0x32
 8002bae:	f7fe faff 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f7fe fafc 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002bb8:	2055      	movs	r0, #85	; 0x55
 8002bba:	f7fe faf9 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f7fe faf6 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002bc4:	2076      	movs	r0, #118	; 0x76
 8002bc6:	f7fe faf3 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f7fe faf0 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002bd0:	2066      	movs	r0, #102	; 0x66
 8002bd2:	f7fe faed 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f7fe faea 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8002bdc:	2067      	movs	r0, #103	; 0x67
 8002bde:	f7fe fae7 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f7fe fae4 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8002be8:	2067      	movs	r0, #103	; 0x67
 8002bea:	f7fe fae1 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7fe fade 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8002bf4:	2087      	movs	r0, #135	; 0x87
 8002bf6:	f7fe fadb 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7fe fad8 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002c00:	2099      	movs	r0, #153	; 0x99
 8002c02:	f7fe fad5 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c06:	2000      	movs	r0, #0
 8002c08:	f7fe fad2 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002c0c:	20bb      	movs	r0, #187	; 0xbb
 8002c0e:	f7fe facf 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c12:	2000      	movs	r0, #0
 8002c14:	f7fe facc 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002c18:	2099      	movs	r0, #153	; 0x99
 8002c1a:	f7fe fac9 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f7fe fac6 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002c24:	2077      	movs	r0, #119	; 0x77
 8002c26:	f7fe fac3 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f7fe fac0 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002c30:	2044      	movs	r0, #68	; 0x44
 8002c32:	f7fe fabd 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f7fe faba 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002c3c:	2056      	movs	r0, #86	; 0x56
 8002c3e:	f7fe fab7 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7fe fab4 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002c48:	2023      	movs	r0, #35	; 0x23
 8002c4a:	f7fe fab1 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f7fe faae 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002c54:	2033      	movs	r0, #51	; 0x33
 8002c56:	f7fe faab 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f7fe faa8 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8002c60:	2045      	movs	r0, #69	; 0x45
 8002c62:	f7fe faa5 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7fe faa2 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 8002c6c:	20e8      	movs	r0, #232	; 0xe8
 8002c6e:	f7fe fa8b 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002c72:	2000      	movs	r0, #0
 8002c74:	f7fe fa9c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f7fe fa99 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002c7e:	2099      	movs	r0, #153	; 0x99
 8002c80:	f7fe fa96 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c84:	2000      	movs	r0, #0
 8002c86:	f7fe fa93 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8002c8a:	2087      	movs	r0, #135	; 0x87
 8002c8c:	f7fe fa90 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c90:	2000      	movs	r0, #0
 8002c92:	f7fe fa8d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002c96:	2088      	movs	r0, #136	; 0x88
 8002c98:	f7fe fa8a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7fe fa87 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002ca2:	2077      	movs	r0, #119	; 0x77
 8002ca4:	f7fe fa84 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f7fe fa81 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002cae:	2066      	movs	r0, #102	; 0x66
 8002cb0:	f7fe fa7e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f7fe fa7b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002cba:	2088      	movs	r0, #136	; 0x88
 8002cbc:	f7fe fa78 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7fe fa75 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 8002cc6:	20aa      	movs	r0, #170	; 0xaa
 8002cc8:	f7fe fa72 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f7fe fa6f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002cd2:	20bb      	movs	r0, #187	; 0xbb
 8002cd4:	f7fe fa6c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f7fe fa69 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002cde:	2099      	movs	r0, #153	; 0x99
 8002ce0:	f7fe fa66 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7fe fa63 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002cea:	2066      	movs	r0, #102	; 0x66
 8002cec:	f7fe fa60 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f7fe fa5d 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002cf6:	2055      	movs	r0, #85	; 0x55
 8002cf8:	f7fe fa5a 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f7fe fa57 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002d02:	2055      	movs	r0, #85	; 0x55
 8002d04:	f7fe fa54 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f7fe fa51 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002d0e:	2044      	movs	r0, #68	; 0x44
 8002d10:	f7fe fa4e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d14:	2000      	movs	r0, #0
 8002d16:	f7fe fa4b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002d1a:	2044      	movs	r0, #68	; 0x44
 8002d1c:	f7fe fa48 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d20:	2000      	movs	r0, #0
 8002d22:	f7fe fa45 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002d26:	2055      	movs	r0, #85	; 0x55
 8002d28:	f7fe fa42 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f7fe fa3f 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 8002d32:	20e9      	movs	r0, #233	; 0xe9
 8002d34:	f7fe fa28 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002d38:	20aa      	movs	r0, #170	; 0xaa
 8002d3a:	f7fe fa39 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f7fe fa36 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7fe fa33 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7fe fa30 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 8002d50:	2000      	movs	r0, #0
 8002d52:	f7fe fa19 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002d56:	20aa      	movs	r0, #170	; 0xaa
 8002d58:	f7fe fa2a 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 8002d5c:	20cf      	movs	r0, #207	; 0xcf
 8002d5e:	f7fe fa13 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002d62:	2000      	movs	r0, #0
 8002d64:	f7fe fa24 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7fe fa21 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f7fe fa1e 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7fe fa1b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	f7fe fa18 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7fe fa15 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f7fe fa12 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f7fe fa0f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d92:	2000      	movs	r0, #0
 8002d94:	f7fe fa0c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f7fe fa09 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f7fe fa06 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002da4:	2000      	movs	r0, #0
 8002da6:	f7fe fa03 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7fe fa00 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002db0:	2000      	movs	r0, #0
 8002db2:	f7fe f9fd 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002db6:	2000      	movs	r0, #0
 8002db8:	f7fe f9fa 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f7fe f9f7 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f7fe f9f4 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 8002dc8:	20f0      	movs	r0, #240	; 0xf0
 8002dca:	f7fe f9dd 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f7fe f9ee 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002dd4:	2050      	movs	r0, #80	; 0x50
 8002dd6:	f7fe f9eb 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7fe f9e8 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002de0:	2000      	movs	r0, #0
 8002de2:	f7fe f9e5 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002de6:	2000      	movs	r0, #0
 8002de8:	f7fe f9e2 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 8002dec:	20f3      	movs	r0, #243	; 0xf3
 8002dee:	f7fe f9cb 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002df2:	2000      	movs	r0, #0
 8002df4:	f7fe f9dc 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 8002df8:	20f9      	movs	r0, #249	; 0xf9
 8002dfa:	f7fe f9c5 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 8002dfe:	2006      	movs	r0, #6
 8002e00:	f7fe f9d6 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8002e04:	2010      	movs	r0, #16
 8002e06:	f7fe f9d3 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002e0a:	2029      	movs	r0, #41	; 0x29
 8002e0c:	f7fe f9d0 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e10:	2000      	movs	r0, #0
 8002e12:	f7fe f9cd 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 8002e16:	203a      	movs	r0, #58	; 0x3a
 8002e18:	f7fe f9b6 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8002e1c:	2055      	movs	r0, #85	; 0x55
 8002e1e:	f7fe f9c7 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 8002e22:	2011      	movs	r0, #17
 8002e24:	f7fe f9b0 	bl	8001188 <LCD_WR_REG>
		HAL_Delay(100);
 8002e28:	2064      	movs	r0, #100	; 0x64
 8002e2a:	f002 fa63 	bl	80052f4 <HAL_Delay>
		LCD_WR_REG(0x29);
 8002e2e:	2029      	movs	r0, #41	; 0x29
 8002e30:	f7fe f9aa 	bl	8001188 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8002e34:	2035      	movs	r0, #53	; 0x35
 8002e36:	f7fe f9a7 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7fe f9b8 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 8002e40:	2051      	movs	r0, #81	; 0x51
 8002e42:	f7fe f9a1 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 8002e46:	20ff      	movs	r0, #255	; 0xff
 8002e48:	f7fe f9b2 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 8002e4c:	2053      	movs	r0, #83	; 0x53
 8002e4e:	f7fe f99b 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 8002e52:	202c      	movs	r0, #44	; 0x2c
 8002e54:	f7fe f9ac 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 8002e58:	2055      	movs	r0, #85	; 0x55
 8002e5a:	f7fe f995 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 8002e5e:	2082      	movs	r0, #130	; 0x82
 8002e60:	f7fe f9a6 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8002e64:	202c      	movs	r0, #44	; 0x2c
 8002e66:	f7fe f98f 	bl	8001188 <LCD_WR_REG>
 8002e6a:	f001 b847 	b.w	8003efc <TFTLCD_Init+0x235c>
	}else if(lcddev.id==0x5510)
 8002e6e:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <TFTLCD_Init+0x12e0>)
 8002e70:	889b      	ldrh	r3, [r3, #4]
 8002e72:	f245 5210 	movw	r2, #21776	; 0x5510
 8002e76:	4293      	cmp	r3, r2
 8002e78:	f040 8781 	bne.w	8003d7e <TFTLCD_Init+0x21de>
 8002e7c:	e002      	b.n	8002e84 <TFTLCD_Init+0x12e4>
 8002e7e:	bf00      	nop
 8002e80:	20000274 	.word	0x20000274
	{
		LCD_WriteReg(0xF000,0x55);
 8002e84:	2155      	movs	r1, #85	; 0x55
 8002e86:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8002e8a:	f7fe f9b7 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8002e8e:	21aa      	movs	r1, #170	; 0xaa
 8002e90:	f24f 0001 	movw	r0, #61441	; 0xf001
 8002e94:	f7fe f9b2 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8002e98:	2152      	movs	r1, #82	; 0x52
 8002e9a:	f24f 0002 	movw	r0, #61442	; 0xf002
 8002e9e:	f7fe f9ad 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8002ea2:	2108      	movs	r1, #8
 8002ea4:	f24f 0003 	movw	r0, #61443	; 0xf003
 8002ea8:	f7fe f9a8 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 8002eac:	2101      	movs	r1, #1
 8002eae:	f24f 0004 	movw	r0, #61444	; 0xf004
 8002eb2:	f7fe f9a3 	bl	80011fc <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 8002eb6:	210d      	movs	r1, #13
 8002eb8:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8002ebc:	f7fe f99e 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 8002ec0:	210d      	movs	r1, #13
 8002ec2:	f24b 0001 	movw	r0, #45057	; 0xb001
 8002ec6:	f7fe f999 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 8002eca:	210d      	movs	r1, #13
 8002ecc:	f24b 0002 	movw	r0, #45058	; 0xb002
 8002ed0:	f7fe f994 	bl	80011fc <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 8002ed4:	2134      	movs	r1, #52	; 0x34
 8002ed6:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8002eda:	f7fe f98f 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 8002ede:	2134      	movs	r1, #52	; 0x34
 8002ee0:	f24b 6001 	movw	r0, #46593	; 0xb601
 8002ee4:	f7fe f98a 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 8002ee8:	2134      	movs	r1, #52	; 0x34
 8002eea:	f24b 6002 	movw	r0, #46594	; 0xb602
 8002eee:	f7fe f985 	bl	80011fc <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 8002ef2:	210d      	movs	r1, #13
 8002ef4:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8002ef8:	f7fe f980 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 8002efc:	210d      	movs	r1, #13
 8002efe:	f24b 1001 	movw	r0, #45313	; 0xb101
 8002f02:	f7fe f97b 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 8002f06:	210d      	movs	r1, #13
 8002f08:	f24b 1002 	movw	r0, #45314	; 0xb102
 8002f0c:	f7fe f976 	bl	80011fc <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 8002f10:	2134      	movs	r1, #52	; 0x34
 8002f12:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8002f16:	f7fe f971 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 8002f1a:	2134      	movs	r1, #52	; 0x34
 8002f1c:	f24b 7001 	movw	r0, #46849	; 0xb701
 8002f20:	f7fe f96c 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 8002f24:	2134      	movs	r1, #52	; 0x34
 8002f26:	f24b 7002 	movw	r0, #46850	; 0xb702
 8002f2a:	f7fe f967 	bl	80011fc <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 8002f2e:	2100      	movs	r1, #0
 8002f30:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8002f34:	f7fe f962 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 8002f38:	2100      	movs	r1, #0
 8002f3a:	f24b 2001 	movw	r0, #45569	; 0xb201
 8002f3e:	f7fe f95d 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 8002f42:	2100      	movs	r1, #0
 8002f44:	f24b 2002 	movw	r0, #45570	; 0xb202
 8002f48:	f7fe f958 	bl	80011fc <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 8002f4c:	2124      	movs	r1, #36	; 0x24
 8002f4e:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8002f52:	f7fe f953 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 8002f56:	2124      	movs	r1, #36	; 0x24
 8002f58:	f64b 0001 	movw	r0, #47105	; 0xb801
 8002f5c:	f7fe f94e 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 8002f60:	2124      	movs	r1, #36	; 0x24
 8002f62:	f64b 0002 	movw	r0, #47106	; 0xb802
 8002f66:	f7fe f949 	bl	80011fc <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8002f70:	f7fe f944 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 8002f74:	210f      	movs	r1, #15
 8002f76:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8002f7a:	f7fe f93f 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 8002f7e:	210f      	movs	r1, #15
 8002f80:	f24b 3001 	movw	r0, #45825	; 0xb301
 8002f84:	f7fe f93a 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 8002f88:	210f      	movs	r1, #15
 8002f8a:	f24b 3002 	movw	r0, #45826	; 0xb302
 8002f8e:	f7fe f935 	bl	80011fc <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 8002f92:	2134      	movs	r1, #52	; 0x34
 8002f94:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8002f98:	f7fe f930 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 8002f9c:	2134      	movs	r1, #52	; 0x34
 8002f9e:	f64b 1001 	movw	r0, #47361	; 0xb901
 8002fa2:	f7fe f92b 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 8002fa6:	2134      	movs	r1, #52	; 0x34
 8002fa8:	f64b 1002 	movw	r0, #47362	; 0xb902
 8002fac:	f7fe f926 	bl	80011fc <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 8002fb0:	2108      	movs	r1, #8
 8002fb2:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8002fb6:	f7fe f921 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 8002fba:	2108      	movs	r1, #8
 8002fbc:	f24b 5001 	movw	r0, #46337	; 0xb501
 8002fc0:	f7fe f91c 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 8002fc4:	2108      	movs	r1, #8
 8002fc6:	f24b 5002 	movw	r0, #46338	; 0xb502
 8002fca:	f7fe f917 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 8002fce:	2103      	movs	r1, #3
 8002fd0:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8002fd4:	f7fe f912 	bl	80011fc <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 8002fd8:	2124      	movs	r1, #36	; 0x24
 8002fda:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8002fde:	f7fe f90d 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 8002fe2:	2124      	movs	r1, #36	; 0x24
 8002fe4:	f64b 2001 	movw	r0, #47617	; 0xba01
 8002fe8:	f7fe f908 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 8002fec:	2124      	movs	r1, #36	; 0x24
 8002fee:	f64b 2002 	movw	r0, #47618	; 0xba02
 8002ff2:	f7fe f903 	bl	80011fc <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8002ffc:	f7fe f8fe 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 8003000:	2178      	movs	r1, #120	; 0x78
 8003002:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003006:	f7fe f8f9 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 800300a:	2100      	movs	r1, #0
 800300c:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003010:	f7fe f8f4 	bl	80011fc <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 8003014:	2100      	movs	r1, #0
 8003016:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 800301a:	f7fe f8ef 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 800301e:	2178      	movs	r1, #120	; 0x78
 8003020:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003024:	f7fe f8ea 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8003028:	2100      	movs	r1, #0
 800302a:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800302e:	f7fe f8e5 	bl	80011fc <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 8003032:	2100      	movs	r1, #0
 8003034:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003038:	f7fe f8e0 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 800303c:	2164      	movs	r1, #100	; 0x64
 800303e:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8003042:	f7fe f8db 	bl	80011fc <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 8003046:	2100      	movs	r1, #0
 8003048:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 800304c:	f7fe f8d6 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 8003050:	2133      	movs	r1, #51	; 0x33
 8003052:	f24d 1001 	movw	r0, #53505	; 0xd101
 8003056:	f7fe f8d1 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 800305a:	2100      	movs	r1, #0
 800305c:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003060:	f7fe f8cc 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 8003064:	2134      	movs	r1, #52	; 0x34
 8003066:	f24d 1003 	movw	r0, #53507	; 0xd103
 800306a:	f7fe f8c7 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 800306e:	2100      	movs	r1, #0
 8003070:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003074:	f7fe f8c2 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 8003078:	213a      	movs	r1, #58	; 0x3a
 800307a:	f24d 1005 	movw	r0, #53509	; 0xd105
 800307e:	f7fe f8bd 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 8003082:	2100      	movs	r1, #0
 8003084:	f24d 1006 	movw	r0, #53510	; 0xd106
 8003088:	f7fe f8b8 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 800308c:	214a      	movs	r1, #74	; 0x4a
 800308e:	f24d 1007 	movw	r0, #53511	; 0xd107
 8003092:	f7fe f8b3 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 8003096:	2100      	movs	r1, #0
 8003098:	f24d 1008 	movw	r0, #53512	; 0xd108
 800309c:	f7fe f8ae 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 80030a0:	215c      	movs	r1, #92	; 0x5c
 80030a2:	f24d 1009 	movw	r0, #53513	; 0xd109
 80030a6:	f7fe f8a9 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 80030aa:	2100      	movs	r1, #0
 80030ac:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80030b0:	f7fe f8a4 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 80030b4:	2181      	movs	r1, #129	; 0x81
 80030b6:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80030ba:	f7fe f89f 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 80030be:	2100      	movs	r1, #0
 80030c0:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80030c4:	f7fe f89a 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 80030c8:	21a6      	movs	r1, #166	; 0xa6
 80030ca:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80030ce:	f7fe f895 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 80030d2:	2100      	movs	r1, #0
 80030d4:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80030d8:	f7fe f890 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 80030dc:	21e5      	movs	r1, #229	; 0xe5
 80030de:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80030e2:	f7fe f88b 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 80030e6:	2101      	movs	r1, #1
 80030e8:	f24d 1010 	movw	r0, #53520	; 0xd110
 80030ec:	f7fe f886 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 80030f0:	2113      	movs	r1, #19
 80030f2:	f24d 1011 	movw	r0, #53521	; 0xd111
 80030f6:	f7fe f881 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 80030fa:	2101      	movs	r1, #1
 80030fc:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003100:	f7fe f87c 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 8003104:	2154      	movs	r1, #84	; 0x54
 8003106:	f24d 1013 	movw	r0, #53523	; 0xd113
 800310a:	f7fe f877 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 800310e:	2101      	movs	r1, #1
 8003110:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003114:	f7fe f872 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8003118:	2182      	movs	r1, #130	; 0x82
 800311a:	f24d 1015 	movw	r0, #53525	; 0xd115
 800311e:	f7fe f86d 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 8003122:	2101      	movs	r1, #1
 8003124:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003128:	f7fe f868 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 800312c:	21ca      	movs	r1, #202	; 0xca
 800312e:	f24d 1017 	movw	r0, #53527	; 0xd117
 8003132:	f7fe f863 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 8003136:	2102      	movs	r1, #2
 8003138:	f24d 1018 	movw	r0, #53528	; 0xd118
 800313c:	f7fe f85e 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 8003140:	2100      	movs	r1, #0
 8003142:	f24d 1019 	movw	r0, #53529	; 0xd119
 8003146:	f7fe f859 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 800314a:	2102      	movs	r1, #2
 800314c:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003150:	f7fe f854 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 8003154:	2101      	movs	r1, #1
 8003156:	f24d 101b 	movw	r0, #53531	; 0xd11b
 800315a:	f7fe f84f 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 800315e:	2102      	movs	r1, #2
 8003160:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003164:	f7fe f84a 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 8003168:	2134      	movs	r1, #52	; 0x34
 800316a:	f24d 101d 	movw	r0, #53533	; 0xd11d
 800316e:	f7fe f845 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 8003172:	2102      	movs	r1, #2
 8003174:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8003178:	f7fe f840 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 800317c:	2167      	movs	r1, #103	; 0x67
 800317e:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8003182:	f7fe f83b 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 8003186:	2102      	movs	r1, #2
 8003188:	f24d 1020 	movw	r0, #53536	; 0xd120
 800318c:	f7fe f836 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 8003190:	2184      	movs	r1, #132	; 0x84
 8003192:	f24d 1021 	movw	r0, #53537	; 0xd121
 8003196:	f7fe f831 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 800319a:	2102      	movs	r1, #2
 800319c:	f24d 1022 	movw	r0, #53538	; 0xd122
 80031a0:	f7fe f82c 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 80031a4:	21a4      	movs	r1, #164	; 0xa4
 80031a6:	f24d 1023 	movw	r0, #53539	; 0xd123
 80031aa:	f7fe f827 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 80031ae:	2102      	movs	r1, #2
 80031b0:	f24d 1024 	movw	r0, #53540	; 0xd124
 80031b4:	f7fe f822 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 80031b8:	21b7      	movs	r1, #183	; 0xb7
 80031ba:	f24d 1025 	movw	r0, #53541	; 0xd125
 80031be:	f7fe f81d 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 80031c2:	2102      	movs	r1, #2
 80031c4:	f24d 1026 	movw	r0, #53542	; 0xd126
 80031c8:	f7fe f818 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 80031cc:	21cf      	movs	r1, #207	; 0xcf
 80031ce:	f24d 1027 	movw	r0, #53543	; 0xd127
 80031d2:	f7fe f813 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 80031d6:	2102      	movs	r1, #2
 80031d8:	f24d 1028 	movw	r0, #53544	; 0xd128
 80031dc:	f7fe f80e 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 80031e0:	21de      	movs	r1, #222	; 0xde
 80031e2:	f24d 1029 	movw	r0, #53545	; 0xd129
 80031e6:	f7fe f809 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 80031ea:	2102      	movs	r1, #2
 80031ec:	f24d 102a 	movw	r0, #53546	; 0xd12a
 80031f0:	f7fe f804 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 80031f4:	21f2      	movs	r1, #242	; 0xf2
 80031f6:	f24d 102b 	movw	r0, #53547	; 0xd12b
 80031fa:	f7fd ffff 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 80031fe:	2102      	movs	r1, #2
 8003200:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003204:	f7fd fffa 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8003208:	21fe      	movs	r1, #254	; 0xfe
 800320a:	f24d 102d 	movw	r0, #53549	; 0xd12d
 800320e:	f7fd fff5 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 8003212:	2103      	movs	r1, #3
 8003214:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003218:	f7fd fff0 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 800321c:	2110      	movs	r1, #16
 800321e:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8003222:	f7fd ffeb 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 8003226:	2103      	movs	r1, #3
 8003228:	f24d 1030 	movw	r0, #53552	; 0xd130
 800322c:	f7fd ffe6 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 8003230:	2133      	movs	r1, #51	; 0x33
 8003232:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003236:	f7fd ffe1 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 800323a:	2103      	movs	r1, #3
 800323c:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003240:	f7fd ffdc 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 8003244:	216d      	movs	r1, #109	; 0x6d
 8003246:	f24d 1033 	movw	r0, #53555	; 0xd133
 800324a:	f7fd ffd7 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 800324e:	2100      	movs	r1, #0
 8003250:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003254:	f7fd ffd2 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 8003258:	2133      	movs	r1, #51	; 0x33
 800325a:	f24d 2001 	movw	r0, #53761	; 0xd201
 800325e:	f7fd ffcd 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 8003262:	2100      	movs	r1, #0
 8003264:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003268:	f7fd ffc8 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 800326c:	2134      	movs	r1, #52	; 0x34
 800326e:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003272:	f7fd ffc3 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 8003276:	2100      	movs	r1, #0
 8003278:	f24d 2004 	movw	r0, #53764	; 0xd204
 800327c:	f7fd ffbe 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 8003280:	213a      	movs	r1, #58	; 0x3a
 8003282:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003286:	f7fd ffb9 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 800328a:	2100      	movs	r1, #0
 800328c:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003290:	f7fd ffb4 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 8003294:	214a      	movs	r1, #74	; 0x4a
 8003296:	f24d 2007 	movw	r0, #53767	; 0xd207
 800329a:	f7fd ffaf 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 800329e:	2100      	movs	r1, #0
 80032a0:	f24d 2008 	movw	r0, #53768	; 0xd208
 80032a4:	f7fd ffaa 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 80032a8:	215c      	movs	r1, #92	; 0x5c
 80032aa:	f24d 2009 	movw	r0, #53769	; 0xd209
 80032ae:	f7fd ffa5 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 80032b2:	2100      	movs	r1, #0
 80032b4:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80032b8:	f7fd ffa0 	bl	80011fc <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 80032bc:	2181      	movs	r1, #129	; 0x81
 80032be:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80032c2:	f7fd ff9b 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 80032c6:	2100      	movs	r1, #0
 80032c8:	f24d 200c 	movw	r0, #53772	; 0xd20c
 80032cc:	f7fd ff96 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 80032d0:	21a6      	movs	r1, #166	; 0xa6
 80032d2:	f24d 200d 	movw	r0, #53773	; 0xd20d
 80032d6:	f7fd ff91 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 80032da:	2100      	movs	r1, #0
 80032dc:	f24d 200e 	movw	r0, #53774	; 0xd20e
 80032e0:	f7fd ff8c 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 80032e4:	21e5      	movs	r1, #229	; 0xe5
 80032e6:	f24d 200f 	movw	r0, #53775	; 0xd20f
 80032ea:	f7fd ff87 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 80032ee:	2101      	movs	r1, #1
 80032f0:	f24d 2010 	movw	r0, #53776	; 0xd210
 80032f4:	f7fd ff82 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 80032f8:	2113      	movs	r1, #19
 80032fa:	f24d 2011 	movw	r0, #53777	; 0xd211
 80032fe:	f7fd ff7d 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 8003302:	2101      	movs	r1, #1
 8003304:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003308:	f7fd ff78 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 800330c:	2154      	movs	r1, #84	; 0x54
 800330e:	f24d 2013 	movw	r0, #53779	; 0xd213
 8003312:	f7fd ff73 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 8003316:	2101      	movs	r1, #1
 8003318:	f24d 2014 	movw	r0, #53780	; 0xd214
 800331c:	f7fd ff6e 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 8003320:	2182      	movs	r1, #130	; 0x82
 8003322:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003326:	f7fd ff69 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 800332a:	2101      	movs	r1, #1
 800332c:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003330:	f7fd ff64 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 8003334:	21ca      	movs	r1, #202	; 0xca
 8003336:	f24d 2017 	movw	r0, #53783	; 0xd217
 800333a:	f7fd ff5f 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 800333e:	2102      	movs	r1, #2
 8003340:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003344:	f7fd ff5a 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 8003348:	2100      	movs	r1, #0
 800334a:	f24d 2019 	movw	r0, #53785	; 0xd219
 800334e:	f7fd ff55 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 8003352:	2102      	movs	r1, #2
 8003354:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003358:	f7fd ff50 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 800335c:	2101      	movs	r1, #1
 800335e:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003362:	f7fd ff4b 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 8003366:	2102      	movs	r1, #2
 8003368:	f24d 201c 	movw	r0, #53788	; 0xd21c
 800336c:	f7fd ff46 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 8003370:	2134      	movs	r1, #52	; 0x34
 8003372:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003376:	f7fd ff41 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 800337a:	2102      	movs	r1, #2
 800337c:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003380:	f7fd ff3c 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 8003384:	2167      	movs	r1, #103	; 0x67
 8003386:	f24d 201f 	movw	r0, #53791	; 0xd21f
 800338a:	f7fd ff37 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 800338e:	2102      	movs	r1, #2
 8003390:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003394:	f7fd ff32 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 8003398:	2184      	movs	r1, #132	; 0x84
 800339a:	f24d 2021 	movw	r0, #53793	; 0xd221
 800339e:	f7fd ff2d 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 80033a2:	2102      	movs	r1, #2
 80033a4:	f24d 2022 	movw	r0, #53794	; 0xd222
 80033a8:	f7fd ff28 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 80033ac:	21a4      	movs	r1, #164	; 0xa4
 80033ae:	f24d 2023 	movw	r0, #53795	; 0xd223
 80033b2:	f7fd ff23 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 80033b6:	2102      	movs	r1, #2
 80033b8:	f24d 2024 	movw	r0, #53796	; 0xd224
 80033bc:	f7fd ff1e 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 80033c0:	21b7      	movs	r1, #183	; 0xb7
 80033c2:	f24d 2025 	movw	r0, #53797	; 0xd225
 80033c6:	f7fd ff19 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 80033ca:	2102      	movs	r1, #2
 80033cc:	f24d 2026 	movw	r0, #53798	; 0xd226
 80033d0:	f7fd ff14 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 80033d4:	21cf      	movs	r1, #207	; 0xcf
 80033d6:	f24d 2027 	movw	r0, #53799	; 0xd227
 80033da:	f7fd ff0f 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 80033de:	2102      	movs	r1, #2
 80033e0:	f24d 2028 	movw	r0, #53800	; 0xd228
 80033e4:	f7fd ff0a 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 80033e8:	21de      	movs	r1, #222	; 0xde
 80033ea:	f24d 2029 	movw	r0, #53801	; 0xd229
 80033ee:	f7fd ff05 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 80033f2:	2102      	movs	r1, #2
 80033f4:	f24d 202a 	movw	r0, #53802	; 0xd22a
 80033f8:	f7fd ff00 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 80033fc:	21f2      	movs	r1, #242	; 0xf2
 80033fe:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003402:	f7fd fefb 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 8003406:	2102      	movs	r1, #2
 8003408:	f24d 202c 	movw	r0, #53804	; 0xd22c
 800340c:	f7fd fef6 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 8003410:	21fe      	movs	r1, #254	; 0xfe
 8003412:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003416:	f7fd fef1 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 800341a:	2103      	movs	r1, #3
 800341c:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003420:	f7fd feec 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 8003424:	2110      	movs	r1, #16
 8003426:	f24d 202f 	movw	r0, #53807	; 0xd22f
 800342a:	f7fd fee7 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 800342e:	2103      	movs	r1, #3
 8003430:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003434:	f7fd fee2 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8003438:	2133      	movs	r1, #51	; 0x33
 800343a:	f24d 2031 	movw	r0, #53809	; 0xd231
 800343e:	f7fd fedd 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 8003442:	2103      	movs	r1, #3
 8003444:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003448:	f7fd fed8 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 800344c:	216d      	movs	r1, #109	; 0x6d
 800344e:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003452:	f7fd fed3 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 8003456:	2100      	movs	r1, #0
 8003458:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 800345c:	f7fd fece 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 8003460:	2133      	movs	r1, #51	; 0x33
 8003462:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003466:	f7fd fec9 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 800346a:	2100      	movs	r1, #0
 800346c:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003470:	f7fd fec4 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 8003474:	2134      	movs	r1, #52	; 0x34
 8003476:	f24d 3003 	movw	r0, #54019	; 0xd303
 800347a:	f7fd febf 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 800347e:	2100      	movs	r1, #0
 8003480:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003484:	f7fd feba 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 8003488:	213a      	movs	r1, #58	; 0x3a
 800348a:	f24d 3005 	movw	r0, #54021	; 0xd305
 800348e:	f7fd feb5 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 8003492:	2100      	movs	r1, #0
 8003494:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003498:	f7fd feb0 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 800349c:	214a      	movs	r1, #74	; 0x4a
 800349e:	f24d 3007 	movw	r0, #54023	; 0xd307
 80034a2:	f7fd feab 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 80034a6:	2100      	movs	r1, #0
 80034a8:	f24d 3008 	movw	r0, #54024	; 0xd308
 80034ac:	f7fd fea6 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 80034b0:	215c      	movs	r1, #92	; 0x5c
 80034b2:	f24d 3009 	movw	r0, #54025	; 0xd309
 80034b6:	f7fd fea1 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 80034ba:	2100      	movs	r1, #0
 80034bc:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80034c0:	f7fd fe9c 	bl	80011fc <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 80034c4:	2181      	movs	r1, #129	; 0x81
 80034c6:	f24d 300b 	movw	r0, #54027	; 0xd30b
 80034ca:	f7fd fe97 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 80034ce:	2100      	movs	r1, #0
 80034d0:	f24d 300c 	movw	r0, #54028	; 0xd30c
 80034d4:	f7fd fe92 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 80034d8:	21a6      	movs	r1, #166	; 0xa6
 80034da:	f24d 300d 	movw	r0, #54029	; 0xd30d
 80034de:	f7fd fe8d 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 80034e2:	2100      	movs	r1, #0
 80034e4:	f24d 300e 	movw	r0, #54030	; 0xd30e
 80034e8:	f7fd fe88 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 80034ec:	21e5      	movs	r1, #229	; 0xe5
 80034ee:	f24d 300f 	movw	r0, #54031	; 0xd30f
 80034f2:	f7fd fe83 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 80034f6:	2101      	movs	r1, #1
 80034f8:	f24d 3010 	movw	r0, #54032	; 0xd310
 80034fc:	f7fd fe7e 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 8003500:	2113      	movs	r1, #19
 8003502:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003506:	f7fd fe79 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 800350a:	2101      	movs	r1, #1
 800350c:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003510:	f7fd fe74 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 8003514:	2154      	movs	r1, #84	; 0x54
 8003516:	f24d 3013 	movw	r0, #54035	; 0xd313
 800351a:	f7fd fe6f 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 800351e:	2101      	movs	r1, #1
 8003520:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003524:	f7fd fe6a 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8003528:	2182      	movs	r1, #130	; 0x82
 800352a:	f24d 3015 	movw	r0, #54037	; 0xd315
 800352e:	f7fd fe65 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 8003532:	2101      	movs	r1, #1
 8003534:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003538:	f7fd fe60 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 800353c:	21ca      	movs	r1, #202	; 0xca
 800353e:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003542:	f7fd fe5b 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 8003546:	2102      	movs	r1, #2
 8003548:	f24d 3018 	movw	r0, #54040	; 0xd318
 800354c:	f7fd fe56 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 8003550:	2100      	movs	r1, #0
 8003552:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003556:	f7fd fe51 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 800355a:	2102      	movs	r1, #2
 800355c:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003560:	f7fd fe4c 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 8003564:	2101      	movs	r1, #1
 8003566:	f24d 301b 	movw	r0, #54043	; 0xd31b
 800356a:	f7fd fe47 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 800356e:	2102      	movs	r1, #2
 8003570:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003574:	f7fd fe42 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 8003578:	2134      	movs	r1, #52	; 0x34
 800357a:	f24d 301d 	movw	r0, #54045	; 0xd31d
 800357e:	f7fd fe3d 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 8003582:	2102      	movs	r1, #2
 8003584:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003588:	f7fd fe38 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 800358c:	2167      	movs	r1, #103	; 0x67
 800358e:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003592:	f7fd fe33 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 8003596:	2102      	movs	r1, #2
 8003598:	f24d 3020 	movw	r0, #54048	; 0xd320
 800359c:	f7fd fe2e 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 80035a0:	2184      	movs	r1, #132	; 0x84
 80035a2:	f24d 3021 	movw	r0, #54049	; 0xd321
 80035a6:	f7fd fe29 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 80035aa:	2102      	movs	r1, #2
 80035ac:	f24d 3022 	movw	r0, #54050	; 0xd322
 80035b0:	f7fd fe24 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 80035b4:	21a4      	movs	r1, #164	; 0xa4
 80035b6:	f24d 3023 	movw	r0, #54051	; 0xd323
 80035ba:	f7fd fe1f 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 80035be:	2102      	movs	r1, #2
 80035c0:	f24d 3024 	movw	r0, #54052	; 0xd324
 80035c4:	f7fd fe1a 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 80035c8:	21b7      	movs	r1, #183	; 0xb7
 80035ca:	f24d 3025 	movw	r0, #54053	; 0xd325
 80035ce:	f7fd fe15 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 80035d2:	2102      	movs	r1, #2
 80035d4:	f24d 3026 	movw	r0, #54054	; 0xd326
 80035d8:	f7fd fe10 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 80035dc:	21cf      	movs	r1, #207	; 0xcf
 80035de:	f24d 3027 	movw	r0, #54055	; 0xd327
 80035e2:	f7fd fe0b 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 80035e6:	2102      	movs	r1, #2
 80035e8:	f24d 3028 	movw	r0, #54056	; 0xd328
 80035ec:	f7fd fe06 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 80035f0:	21de      	movs	r1, #222	; 0xde
 80035f2:	f24d 3029 	movw	r0, #54057	; 0xd329
 80035f6:	f7fd fe01 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 80035fa:	2102      	movs	r1, #2
 80035fc:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003600:	f7fd fdfc 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 8003604:	21f2      	movs	r1, #242	; 0xf2
 8003606:	f24d 302b 	movw	r0, #54059	; 0xd32b
 800360a:	f7fd fdf7 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 800360e:	2102      	movs	r1, #2
 8003610:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003614:	f7fd fdf2 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8003618:	21fe      	movs	r1, #254	; 0xfe
 800361a:	f24d 302d 	movw	r0, #54061	; 0xd32d
 800361e:	f7fd fded 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 8003622:	2103      	movs	r1, #3
 8003624:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003628:	f7fd fde8 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 800362c:	2110      	movs	r1, #16
 800362e:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003632:	f7fd fde3 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 8003636:	2103      	movs	r1, #3
 8003638:	f24d 3030 	movw	r0, #54064	; 0xd330
 800363c:	f7fd fdde 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 8003640:	2133      	movs	r1, #51	; 0x33
 8003642:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003646:	f7fd fdd9 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 800364a:	2103      	movs	r1, #3
 800364c:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003650:	f7fd fdd4 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 8003654:	216d      	movs	r1, #109	; 0x6d
 8003656:	f24d 3033 	movw	r0, #54067	; 0xd333
 800365a:	f7fd fdcf 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 800365e:	2100      	movs	r1, #0
 8003660:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003664:	f7fd fdca 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 8003668:	2133      	movs	r1, #51	; 0x33
 800366a:	f24d 4001 	movw	r0, #54273	; 0xd401
 800366e:	f7fd fdc5 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 8003672:	2100      	movs	r1, #0
 8003674:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003678:	f7fd fdc0 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 800367c:	2134      	movs	r1, #52	; 0x34
 800367e:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003682:	f7fd fdbb 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 8003686:	2100      	movs	r1, #0
 8003688:	f24d 4004 	movw	r0, #54276	; 0xd404
 800368c:	f7fd fdb6 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 8003690:	213a      	movs	r1, #58	; 0x3a
 8003692:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003696:	f7fd fdb1 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 800369a:	2100      	movs	r1, #0
 800369c:	f24d 4006 	movw	r0, #54278	; 0xd406
 80036a0:	f7fd fdac 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 80036a4:	214a      	movs	r1, #74	; 0x4a
 80036a6:	f24d 4007 	movw	r0, #54279	; 0xd407
 80036aa:	f7fd fda7 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 80036ae:	2100      	movs	r1, #0
 80036b0:	f24d 4008 	movw	r0, #54280	; 0xd408
 80036b4:	f7fd fda2 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 80036b8:	215c      	movs	r1, #92	; 0x5c
 80036ba:	f24d 4009 	movw	r0, #54281	; 0xd409
 80036be:	f7fd fd9d 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 80036c2:	2100      	movs	r1, #0
 80036c4:	f24d 400a 	movw	r0, #54282	; 0xd40a
 80036c8:	f7fd fd98 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 80036cc:	2181      	movs	r1, #129	; 0x81
 80036ce:	f24d 400b 	movw	r0, #54283	; 0xd40b
 80036d2:	f7fd fd93 	bl	80011fc <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 80036d6:	2100      	movs	r1, #0
 80036d8:	f24d 400c 	movw	r0, #54284	; 0xd40c
 80036dc:	f7fd fd8e 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 80036e0:	21a6      	movs	r1, #166	; 0xa6
 80036e2:	f24d 400d 	movw	r0, #54285	; 0xd40d
 80036e6:	f7fd fd89 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 80036ea:	2100      	movs	r1, #0
 80036ec:	f24d 400e 	movw	r0, #54286	; 0xd40e
 80036f0:	f7fd fd84 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 80036f4:	21e5      	movs	r1, #229	; 0xe5
 80036f6:	f24d 400f 	movw	r0, #54287	; 0xd40f
 80036fa:	f7fd fd7f 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 80036fe:	2101      	movs	r1, #1
 8003700:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003704:	f7fd fd7a 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 8003708:	2113      	movs	r1, #19
 800370a:	f24d 4011 	movw	r0, #54289	; 0xd411
 800370e:	f7fd fd75 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 8003712:	2101      	movs	r1, #1
 8003714:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003718:	f7fd fd70 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 800371c:	2154      	movs	r1, #84	; 0x54
 800371e:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003722:	f7fd fd6b 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 8003726:	2101      	movs	r1, #1
 8003728:	f24d 4014 	movw	r0, #54292	; 0xd414
 800372c:	f7fd fd66 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 8003730:	2182      	movs	r1, #130	; 0x82
 8003732:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003736:	f7fd fd61 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 800373a:	2101      	movs	r1, #1
 800373c:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003740:	f7fd fd5c 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 8003744:	21ca      	movs	r1, #202	; 0xca
 8003746:	f24d 4017 	movw	r0, #54295	; 0xd417
 800374a:	f7fd fd57 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 800374e:	2102      	movs	r1, #2
 8003750:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003754:	f7fd fd52 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 8003758:	2100      	movs	r1, #0
 800375a:	f24d 4019 	movw	r0, #54297	; 0xd419
 800375e:	f7fd fd4d 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 8003762:	2102      	movs	r1, #2
 8003764:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003768:	f7fd fd48 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 800376c:	2101      	movs	r1, #1
 800376e:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003772:	f7fd fd43 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 8003776:	2102      	movs	r1, #2
 8003778:	f24d 401c 	movw	r0, #54300	; 0xd41c
 800377c:	f7fd fd3e 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 8003780:	2134      	movs	r1, #52	; 0x34
 8003782:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003786:	f7fd fd39 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 800378a:	2102      	movs	r1, #2
 800378c:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003790:	f7fd fd34 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 8003794:	2167      	movs	r1, #103	; 0x67
 8003796:	f24d 401f 	movw	r0, #54303	; 0xd41f
 800379a:	f7fd fd2f 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 800379e:	2102      	movs	r1, #2
 80037a0:	f24d 4020 	movw	r0, #54304	; 0xd420
 80037a4:	f7fd fd2a 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 80037a8:	2184      	movs	r1, #132	; 0x84
 80037aa:	f24d 4021 	movw	r0, #54305	; 0xd421
 80037ae:	f7fd fd25 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 80037b2:	2102      	movs	r1, #2
 80037b4:	f24d 4022 	movw	r0, #54306	; 0xd422
 80037b8:	f7fd fd20 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 80037bc:	21a4      	movs	r1, #164	; 0xa4
 80037be:	f24d 4023 	movw	r0, #54307	; 0xd423
 80037c2:	f7fd fd1b 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 80037c6:	2102      	movs	r1, #2
 80037c8:	f24d 4024 	movw	r0, #54308	; 0xd424
 80037cc:	f7fd fd16 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 80037d0:	21b7      	movs	r1, #183	; 0xb7
 80037d2:	f24d 4025 	movw	r0, #54309	; 0xd425
 80037d6:	f7fd fd11 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 80037da:	2102      	movs	r1, #2
 80037dc:	f24d 4026 	movw	r0, #54310	; 0xd426
 80037e0:	f7fd fd0c 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 80037e4:	21cf      	movs	r1, #207	; 0xcf
 80037e6:	f24d 4027 	movw	r0, #54311	; 0xd427
 80037ea:	f7fd fd07 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 80037ee:	2102      	movs	r1, #2
 80037f0:	f24d 4028 	movw	r0, #54312	; 0xd428
 80037f4:	f7fd fd02 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 80037f8:	21de      	movs	r1, #222	; 0xde
 80037fa:	f24d 4029 	movw	r0, #54313	; 0xd429
 80037fe:	f7fd fcfd 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 8003802:	2102      	movs	r1, #2
 8003804:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003808:	f7fd fcf8 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 800380c:	21f2      	movs	r1, #242	; 0xf2
 800380e:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003812:	f7fd fcf3 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 8003816:	2102      	movs	r1, #2
 8003818:	f24d 402c 	movw	r0, #54316	; 0xd42c
 800381c:	f7fd fcee 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 8003820:	21fe      	movs	r1, #254	; 0xfe
 8003822:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003826:	f7fd fce9 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 800382a:	2103      	movs	r1, #3
 800382c:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003830:	f7fd fce4 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 8003834:	2110      	movs	r1, #16
 8003836:	f24d 402f 	movw	r0, #54319	; 0xd42f
 800383a:	f7fd fcdf 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 800383e:	2103      	movs	r1, #3
 8003840:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003844:	f7fd fcda 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 8003848:	2133      	movs	r1, #51	; 0x33
 800384a:	f24d 4031 	movw	r0, #54321	; 0xd431
 800384e:	f7fd fcd5 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 8003852:	2103      	movs	r1, #3
 8003854:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003858:	f7fd fcd0 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 800385c:	216d      	movs	r1, #109	; 0x6d
 800385e:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003862:	f7fd fccb 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 8003866:	2100      	movs	r1, #0
 8003868:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 800386c:	f7fd fcc6 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 8003870:	2133      	movs	r1, #51	; 0x33
 8003872:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003876:	f7fd fcc1 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 800387a:	2100      	movs	r1, #0
 800387c:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003880:	f7fd fcbc 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 8003884:	2134      	movs	r1, #52	; 0x34
 8003886:	f24d 5003 	movw	r0, #54531	; 0xd503
 800388a:	f7fd fcb7 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 800388e:	2100      	movs	r1, #0
 8003890:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003894:	f7fd fcb2 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 8003898:	213a      	movs	r1, #58	; 0x3a
 800389a:	f24d 5005 	movw	r0, #54533	; 0xd505
 800389e:	f7fd fcad 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 80038a2:	2100      	movs	r1, #0
 80038a4:	f24d 5006 	movw	r0, #54534	; 0xd506
 80038a8:	f7fd fca8 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 80038ac:	214a      	movs	r1, #74	; 0x4a
 80038ae:	f24d 5007 	movw	r0, #54535	; 0xd507
 80038b2:	f7fd fca3 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 80038b6:	2100      	movs	r1, #0
 80038b8:	f24d 5008 	movw	r0, #54536	; 0xd508
 80038bc:	f7fd fc9e 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 80038c0:	215c      	movs	r1, #92	; 0x5c
 80038c2:	f24d 5009 	movw	r0, #54537	; 0xd509
 80038c6:	f7fd fc99 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 80038ca:	2100      	movs	r1, #0
 80038cc:	f24d 500a 	movw	r0, #54538	; 0xd50a
 80038d0:	f7fd fc94 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 80038d4:	2181      	movs	r1, #129	; 0x81
 80038d6:	f24d 500b 	movw	r0, #54539	; 0xd50b
 80038da:	f7fd fc8f 	bl	80011fc <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 80038de:	2100      	movs	r1, #0
 80038e0:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80038e4:	f7fd fc8a 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 80038e8:	21a6      	movs	r1, #166	; 0xa6
 80038ea:	f24d 500d 	movw	r0, #54541	; 0xd50d
 80038ee:	f7fd fc85 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 80038f2:	2100      	movs	r1, #0
 80038f4:	f24d 500e 	movw	r0, #54542	; 0xd50e
 80038f8:	f7fd fc80 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 80038fc:	21e5      	movs	r1, #229	; 0xe5
 80038fe:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003902:	f7fd fc7b 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 8003906:	2101      	movs	r1, #1
 8003908:	f24d 5010 	movw	r0, #54544	; 0xd510
 800390c:	f7fd fc76 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 8003910:	2113      	movs	r1, #19
 8003912:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003916:	f7fd fc71 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 800391a:	2101      	movs	r1, #1
 800391c:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003920:	f7fd fc6c 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 8003924:	2154      	movs	r1, #84	; 0x54
 8003926:	f24d 5013 	movw	r0, #54547	; 0xd513
 800392a:	f7fd fc67 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 800392e:	2101      	movs	r1, #1
 8003930:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003934:	f7fd fc62 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 8003938:	2182      	movs	r1, #130	; 0x82
 800393a:	f24d 5015 	movw	r0, #54549	; 0xd515
 800393e:	f7fd fc5d 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 8003942:	2101      	movs	r1, #1
 8003944:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003948:	f7fd fc58 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 800394c:	21ca      	movs	r1, #202	; 0xca
 800394e:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003952:	f7fd fc53 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 8003956:	2102      	movs	r1, #2
 8003958:	f24d 5018 	movw	r0, #54552	; 0xd518
 800395c:	f7fd fc4e 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 8003960:	2100      	movs	r1, #0
 8003962:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003966:	f7fd fc49 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 800396a:	2102      	movs	r1, #2
 800396c:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003970:	f7fd fc44 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 8003974:	2101      	movs	r1, #1
 8003976:	f24d 501b 	movw	r0, #54555	; 0xd51b
 800397a:	f7fd fc3f 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 800397e:	2102      	movs	r1, #2
 8003980:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003984:	f7fd fc3a 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 8003988:	2134      	movs	r1, #52	; 0x34
 800398a:	f24d 501d 	movw	r0, #54557	; 0xd51d
 800398e:	f7fd fc35 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 8003992:	2102      	movs	r1, #2
 8003994:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003998:	f7fd fc30 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 800399c:	2167      	movs	r1, #103	; 0x67
 800399e:	f24d 501f 	movw	r0, #54559	; 0xd51f
 80039a2:	f7fd fc2b 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 80039a6:	2102      	movs	r1, #2
 80039a8:	f24d 5020 	movw	r0, #54560	; 0xd520
 80039ac:	f7fd fc26 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 80039b0:	2184      	movs	r1, #132	; 0x84
 80039b2:	f24d 5021 	movw	r0, #54561	; 0xd521
 80039b6:	f7fd fc21 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 80039ba:	2102      	movs	r1, #2
 80039bc:	f24d 5022 	movw	r0, #54562	; 0xd522
 80039c0:	f7fd fc1c 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 80039c4:	21a4      	movs	r1, #164	; 0xa4
 80039c6:	f24d 5023 	movw	r0, #54563	; 0xd523
 80039ca:	f7fd fc17 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 80039ce:	2102      	movs	r1, #2
 80039d0:	f24d 5024 	movw	r0, #54564	; 0xd524
 80039d4:	f7fd fc12 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 80039d8:	21b7      	movs	r1, #183	; 0xb7
 80039da:	f24d 5025 	movw	r0, #54565	; 0xd525
 80039de:	f7fd fc0d 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 80039e2:	2102      	movs	r1, #2
 80039e4:	f24d 5026 	movw	r0, #54566	; 0xd526
 80039e8:	f7fd fc08 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 80039ec:	21cf      	movs	r1, #207	; 0xcf
 80039ee:	f24d 5027 	movw	r0, #54567	; 0xd527
 80039f2:	f7fd fc03 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 80039f6:	2102      	movs	r1, #2
 80039f8:	f24d 5028 	movw	r0, #54568	; 0xd528
 80039fc:	f7fd fbfe 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 8003a00:	21de      	movs	r1, #222	; 0xde
 8003a02:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003a06:	f7fd fbf9 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 8003a0a:	2102      	movs	r1, #2
 8003a0c:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003a10:	f7fd fbf4 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 8003a14:	21f2      	movs	r1, #242	; 0xf2
 8003a16:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003a1a:	f7fd fbef 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 8003a1e:	2102      	movs	r1, #2
 8003a20:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003a24:	f7fd fbea 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 8003a28:	21fe      	movs	r1, #254	; 0xfe
 8003a2a:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003a2e:	f7fd fbe5 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 8003a32:	2103      	movs	r1, #3
 8003a34:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003a38:	f7fd fbe0 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 8003a3c:	2110      	movs	r1, #16
 8003a3e:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003a42:	f7fd fbdb 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 8003a46:	2103      	movs	r1, #3
 8003a48:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003a4c:	f7fd fbd6 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 8003a50:	2133      	movs	r1, #51	; 0x33
 8003a52:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003a56:	f7fd fbd1 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 8003a5a:	2103      	movs	r1, #3
 8003a5c:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003a60:	f7fd fbcc 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 8003a64:	216d      	movs	r1, #109	; 0x6d
 8003a66:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003a6a:	f7fd fbc7 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 8003a6e:	2100      	movs	r1, #0
 8003a70:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003a74:	f7fd fbc2 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 8003a78:	2133      	movs	r1, #51	; 0x33
 8003a7a:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003a7e:	f7fd fbbd 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 8003a82:	2100      	movs	r1, #0
 8003a84:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003a88:	f7fd fbb8 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 8003a8c:	2134      	movs	r1, #52	; 0x34
 8003a8e:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003a92:	f7fd fbb3 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 8003a96:	2100      	movs	r1, #0
 8003a98:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003a9c:	f7fd fbae 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 8003aa0:	213a      	movs	r1, #58	; 0x3a
 8003aa2:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003aa6:	f7fd fba9 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 8003aaa:	2100      	movs	r1, #0
 8003aac:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003ab0:	f7fd fba4 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 8003ab4:	214a      	movs	r1, #74	; 0x4a
 8003ab6:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003aba:	f7fd fb9f 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 8003abe:	2100      	movs	r1, #0
 8003ac0:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003ac4:	f7fd fb9a 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 8003ac8:	215c      	movs	r1, #92	; 0x5c
 8003aca:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003ace:	f7fd fb95 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003ad8:	f7fd fb90 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 8003adc:	2181      	movs	r1, #129	; 0x81
 8003ade:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003ae2:	f7fd fb8b 	bl	80011fc <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003aec:	f7fd fb86 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 8003af0:	21a6      	movs	r1, #166	; 0xa6
 8003af2:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003af6:	f7fd fb81 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 8003afa:	2100      	movs	r1, #0
 8003afc:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003b00:	f7fd fb7c 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 8003b04:	21e5      	movs	r1, #229	; 0xe5
 8003b06:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003b0a:	f7fd fb77 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 8003b0e:	2101      	movs	r1, #1
 8003b10:	f24d 6010 	movw	r0, #54800	; 0xd610
 8003b14:	f7fd fb72 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 8003b18:	2113      	movs	r1, #19
 8003b1a:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003b1e:	f7fd fb6d 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 8003b22:	2101      	movs	r1, #1
 8003b24:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003b28:	f7fd fb68 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8003b2c:	2154      	movs	r1, #84	; 0x54
 8003b2e:	f24d 6013 	movw	r0, #54803	; 0xd613
 8003b32:	f7fd fb63 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 8003b36:	2101      	movs	r1, #1
 8003b38:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003b3c:	f7fd fb5e 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 8003b40:	2182      	movs	r1, #130	; 0x82
 8003b42:	f24d 6015 	movw	r0, #54805	; 0xd615
 8003b46:	f7fd fb59 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003b50:	f7fd fb54 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 8003b54:	21ca      	movs	r1, #202	; 0xca
 8003b56:	f24d 6017 	movw	r0, #54807	; 0xd617
 8003b5a:	f7fd fb4f 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 8003b5e:	2102      	movs	r1, #2
 8003b60:	f24d 6018 	movw	r0, #54808	; 0xd618
 8003b64:	f7fd fb4a 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 8003b68:	2100      	movs	r1, #0
 8003b6a:	f24d 6019 	movw	r0, #54809	; 0xd619
 8003b6e:	f7fd fb45 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 8003b72:	2102      	movs	r1, #2
 8003b74:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8003b78:	f7fd fb40 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8003b82:	f7fd fb3b 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 8003b86:	2102      	movs	r1, #2
 8003b88:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8003b8c:	f7fd fb36 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 8003b90:	2134      	movs	r1, #52	; 0x34
 8003b92:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8003b96:	f7fd fb31 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8003ba0:	f7fd fb2c 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 8003ba4:	2167      	movs	r1, #103	; 0x67
 8003ba6:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8003baa:	f7fd fb27 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 8003bae:	2102      	movs	r1, #2
 8003bb0:	f24d 6020 	movw	r0, #54816	; 0xd620
 8003bb4:	f7fd fb22 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 8003bb8:	2184      	movs	r1, #132	; 0x84
 8003bba:	f24d 6021 	movw	r0, #54817	; 0xd621
 8003bbe:	f7fd fb1d 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	f24d 6022 	movw	r0, #54818	; 0xd622
 8003bc8:	f7fd fb18 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 8003bcc:	21a4      	movs	r1, #164	; 0xa4
 8003bce:	f24d 6023 	movw	r0, #54819	; 0xd623
 8003bd2:	f7fd fb13 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 8003bd6:	2102      	movs	r1, #2
 8003bd8:	f24d 6024 	movw	r0, #54820	; 0xd624
 8003bdc:	f7fd fb0e 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 8003be0:	21b7      	movs	r1, #183	; 0xb7
 8003be2:	f24d 6025 	movw	r0, #54821	; 0xd625
 8003be6:	f7fd fb09 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 8003bea:	2102      	movs	r1, #2
 8003bec:	f24d 6026 	movw	r0, #54822	; 0xd626
 8003bf0:	f7fd fb04 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 8003bf4:	21cf      	movs	r1, #207	; 0xcf
 8003bf6:	f24d 6027 	movw	r0, #54823	; 0xd627
 8003bfa:	f7fd faff 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 8003bfe:	2102      	movs	r1, #2
 8003c00:	f24d 6028 	movw	r0, #54824	; 0xd628
 8003c04:	f7fd fafa 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 8003c08:	21de      	movs	r1, #222	; 0xde
 8003c0a:	f24d 6029 	movw	r0, #54825	; 0xd629
 8003c0e:	f7fd faf5 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 8003c12:	2102      	movs	r1, #2
 8003c14:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8003c18:	f7fd faf0 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8003c1c:	21f2      	movs	r1, #242	; 0xf2
 8003c1e:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8003c22:	f7fd faeb 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 8003c26:	2102      	movs	r1, #2
 8003c28:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003c2c:	f7fd fae6 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 8003c30:	21fe      	movs	r1, #254	; 0xfe
 8003c32:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8003c36:	f7fd fae1 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 8003c3a:	2103      	movs	r1, #3
 8003c3c:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003c40:	f7fd fadc 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 8003c44:	2110      	movs	r1, #16
 8003c46:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8003c4a:	f7fd fad7 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 8003c4e:	2103      	movs	r1, #3
 8003c50:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003c54:	f7fd fad2 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 8003c58:	2133      	movs	r1, #51	; 0x33
 8003c5a:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003c5e:	f7fd facd 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 8003c62:	2103      	movs	r1, #3
 8003c64:	f24d 6032 	movw	r0, #54834	; 0xd632
 8003c68:	f7fd fac8 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 8003c6c:	216d      	movs	r1, #109	; 0x6d
 8003c6e:	f24d 6033 	movw	r0, #54835	; 0xd633
 8003c72:	f7fd fac3 	bl	80011fc <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 8003c76:	2155      	movs	r1, #85	; 0x55
 8003c78:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003c7c:	f7fd fabe 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8003c80:	21aa      	movs	r1, #170	; 0xaa
 8003c82:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003c86:	f7fd fab9 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8003c8a:	2152      	movs	r1, #82	; 0x52
 8003c8c:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003c90:	f7fd fab4 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8003c94:	2108      	movs	r1, #8
 8003c96:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003c9a:	f7fd faaf 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003ca4:	f7fd faaa 	bl	80011fc <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8003ca8:	21cc      	movs	r1, #204	; 0xcc
 8003caa:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003cae:	f7fd faa5 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003cb8:	f7fd faa0 	bl	80011fc <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 8003cbc:	2105      	movs	r1, #5
 8003cbe:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003cc2:	f7fd fa9b 	bl	80011fc <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 8003cc6:	2170      	movs	r1, #112	; 0x70
 8003cc8:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003ccc:	f7fd fa96 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 8003cd0:	2170      	movs	r1, #112	; 0x70
 8003cd2:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003cd6:	f7fd fa91 	bl	80011fc <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 8003cda:	2101      	movs	r1, #1
 8003cdc:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003ce0:	f7fd fa8c 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 8003ce4:	2103      	movs	r1, #3
 8003ce6:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003cea:	f7fd fa87 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 8003cee:	2103      	movs	r1, #3
 8003cf0:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003cf4:	f7fd fa82 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 8003cf8:	2103      	movs	r1, #3
 8003cfa:	f64b 0003 	movw	r0, #47107	; 0xb803
 8003cfe:	f7fd fa7d 	bl	80011fc <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 8003d02:	2102      	movs	r1, #2
 8003d04:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003d08:	f7fd fa78 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003d12:	f7fd fa73 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8003d16:	2100      	movs	r1, #0
 8003d18:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003d1c:	f7fd fa6e 	bl	80011fc <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 8003d20:	21d0      	movs	r1, #208	; 0xd0
 8003d22:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8003d26:	f7fd fa69 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	f64c 1001 	movw	r0, #51457	; 0xc901
 8003d30:	f7fd fa64 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 8003d34:	2150      	movs	r1, #80	; 0x50
 8003d36:	f64c 1002 	movw	r0, #51458	; 0xc902
 8003d3a:	f7fd fa5f 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 8003d3e:	2150      	movs	r1, #80	; 0x50
 8003d40:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003d44:	f7fd fa5a 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 8003d48:	2150      	movs	r1, #80	; 0x50
 8003d4a:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003d4e:	f7fd fa55 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 8003d52:	2100      	movs	r1, #0
 8003d54:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8003d58:	f7fd fa50 	bl	80011fc <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 8003d5c:	2155      	movs	r1, #85	; 0x55
 8003d5e:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003d62:	f7fd fa4b 	bl	80011fc <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8003d66:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8003d6a:	f7fd fa0d 	bl	8001188 <LCD_WR_REG>
		opt_delay(120);
 8003d6e:	2078      	movs	r0, #120	; 0x78
 8003d70:	f7fd fa5a 	bl	8001228 <opt_delay>
		LCD_WR_REG(0x2900);
 8003d74:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8003d78:	f7fd fa06 	bl	8001188 <LCD_WR_REG>
 8003d7c:	e0be      	b.n	8003efc <TFTLCD_Init+0x235c>
	}else if(lcddev.id==0X1963)
 8003d7e:	4b7f      	ldr	r3, [pc, #508]	; (8003f7c <TFTLCD_Init+0x23dc>)
 8003d80:	889b      	ldrh	r3, [r3, #4]
 8003d82:	f641 1263 	movw	r2, #6499	; 0x1963
 8003d86:	4293      	cmp	r3, r2
 8003d88:	f040 80b8 	bne.w	8003efc <TFTLCD_Init+0x235c>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8003d8c:	20e2      	movs	r0, #226	; 0xe2
 8003d8e:	f7fd f9fb 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 8003d92:	201d      	movs	r0, #29
 8003d94:	f7fd fa0c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8003d98:	2002      	movs	r0, #2
 8003d9a:	f7fd fa09 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 8003d9e:	2004      	movs	r0, #4
 8003da0:	f7fd fa06 	bl	80011b0 <LCD_WR_DATA>
		opt_delay(100);
 8003da4:	2064      	movs	r0, #100	; 0x64
 8003da6:	f7fd fa3f 	bl	8001228 <opt_delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8003daa:	20e0      	movs	r0, #224	; 0xe0
 8003dac:	f7fd f9ec 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8003db0:	2001      	movs	r0, #1
 8003db2:	f7fd f9fd 	bl	80011b0 <LCD_WR_DATA>
		HAL_Delay(10);
 8003db6:	200a      	movs	r0, #10
 8003db8:	f001 fa9c 	bl	80052f4 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8003dbc:	20e0      	movs	r0, #224	; 0xe0
 8003dbe:	f7fd f9e3 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 8003dc2:	2003      	movs	r0, #3
 8003dc4:	f7fd f9f4 	bl	80011b0 <LCD_WR_DATA>
		HAL_Delay(12);
 8003dc8:	200c      	movs	r0, #12
 8003dca:	f001 fa93 	bl	80052f4 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8003dce:	2001      	movs	r0, #1
 8003dd0:	f7fd f9da 	bl	8001188 <LCD_WR_REG>
		HAL_Delay(10);
 8003dd4:	200a      	movs	r0, #10
 8003dd6:	f001 fa8d 	bl	80052f4 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8003dda:	20e6      	movs	r0, #230	; 0xe6
 8003ddc:	f7fd f9d4 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8003de0:	202f      	movs	r0, #47	; 0x2f
 8003de2:	f7fd f9e5 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8003de6:	20ff      	movs	r0, #255	; 0xff
 8003de8:	f7fd f9e2 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8003dec:	20ff      	movs	r0, #255	; 0xff
 8003dee:	f7fd f9df 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 8003df2:	20b0      	movs	r0, #176	; 0xb0
 8003df4:	f7fd f9c8 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8003df8:	2020      	movs	r0, #32
 8003dfa:	f7fd f9d9 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f7fd f9d6 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 8003e04:	2003      	movs	r0, #3
 8003e06:	f7fd f9d3 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8003e0a:	f240 301f 	movw	r0, #799	; 0x31f
 8003e0e:	f7fd f9cf 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 8003e12:	2001      	movs	r0, #1
 8003e14:	f7fd f9cc 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8003e18:	f240 10df 	movw	r0, #479	; 0x1df
 8003e1c:	f7fd f9c8 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 8003e20:	2000      	movs	r0, #0
 8003e22:	f7fd f9c5 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 8003e26:	20b4      	movs	r0, #180	; 0xb4
 8003e28:	f7fd f9ae 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8003e2c:	2004      	movs	r0, #4
 8003e2e:	f7fd f9bf 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 8003e32:	f240 401f 	movw	r0, #1055	; 0x41f
 8003e36:	f7fd f9bb 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	f7fd f9b8 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 8003e40:	202e      	movs	r0, #46	; 0x2e
 8003e42:	f7fd f9b5 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8003e46:	2000      	movs	r0, #0
 8003e48:	f7fd f9b2 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	f7fd f9af 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e52:	2000      	movs	r0, #0
 8003e54:	f7fd f9ac 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e58:	2000      	movs	r0, #0
 8003e5a:	f7fd f9a9 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 8003e5e:	20b6      	movs	r0, #182	; 0xb6
 8003e60:	f7fd f992 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8003e64:	2002      	movs	r0, #2
 8003e66:	f7fd f9a3 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 8003e6a:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8003e6e:	f7fd f99f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 8003e72:	2000      	movs	r0, #0
 8003e74:	f7fd f99c 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 8003e78:	2017      	movs	r0, #23
 8003e7a:	f7fd f999 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8003e7e:	2015      	movs	r0, #21
 8003e80:	f7fd f996 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e84:	2000      	movs	r0, #0
 8003e86:	f7fd f993 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	f7fd f990 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 8003e90:	20f0      	movs	r0, #240	; 0xf0
 8003e92:	f7fd f979 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 8003e96:	2003      	movs	r0, #3
 8003e98:	f7fd f98a 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 8003e9c:	2029      	movs	r0, #41	; 0x29
 8003e9e:	f7fd f973 	bl	8001188 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8003ea2:	20d0      	movs	r0, #208	; 0xd0
 8003ea4:	f7fd f970 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	f7fd f981 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 8003eae:	20be      	movs	r0, #190	; 0xbe
 8003eb0:	f7fd f96a 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8003eb4:	2005      	movs	r0, #5
 8003eb6:	f7fd f97b 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8003eba:	20fe      	movs	r0, #254	; 0xfe
 8003ebc:	f7fd f978 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	f7fd f975 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	f7fd f972 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 8003ecc:	2000      	movs	r0, #0
 8003ece:	f7fd f96f 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	f7fd f96c 	bl	80011b0 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8003ed8:	20b8      	movs	r0, #184	; 0xb8
 8003eda:	f7fd f955 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8003ede:	2003      	movs	r0, #3
 8003ee0:	f7fd f966 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	f7fd f963 	bl	80011b0 <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 8003eea:	20ba      	movs	r0, #186	; 0xba
 8003eec:	f7fd f94c 	bl	8001188 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8003ef0:	2001      	movs	r0, #1
 8003ef2:	f7fd f95d 	bl	80011b0 <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 8003ef6:	2064      	movs	r0, #100	; 0x64
 8003ef8:	f7fd fd4e 	bl	8001998 <LCD_SSD_BackLightSet>
	}
	//初始化完成以后,提速
	if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//如果是这几个IC,则设置WR时序为最快
 8003efc:	4b1f      	ldr	r3, [pc, #124]	; (8003f7c <TFTLCD_Init+0x23dc>)
 8003efe:	889b      	ldrh	r3, [r3, #4]
 8003f00:	f249 3241 	movw	r2, #37697	; 0x9341
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d011      	beq.n	8003f2c <TFTLCD_Init+0x238c>
 8003f08:	4b1c      	ldr	r3, [pc, #112]	; (8003f7c <TFTLCD_Init+0x23dc>)
 8003f0a:	889b      	ldrh	r3, [r3, #4]
 8003f0c:	f245 3210 	movw	r2, #21264	; 0x5310
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00b      	beq.n	8003f2c <TFTLCD_Init+0x238c>
 8003f14:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <TFTLCD_Init+0x23dc>)
 8003f16:	889b      	ldrh	r3, [r3, #4]
 8003f18:	f245 5210 	movw	r2, #21776	; 0x5510
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d005      	beq.n	8003f2c <TFTLCD_Init+0x238c>
 8003f20:	4b16      	ldr	r3, [pc, #88]	; (8003f7c <TFTLCD_Init+0x23dc>)
 8003f22:	889b      	ldrh	r3, [r3, #4]
 8003f24:	f641 1263 	movw	r2, #6499	; 0x1963
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d117      	bne.n	8003f5c <TFTLCD_Init+0x23bc>
	{
		//重新配置写时序控制寄存器的时序
		FSMC_Bank1E->BWTR[6]&=~(0XF<<0);//地址建立时间(ADDSET)清零
 8003f2c:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <TFTLCD_Init+0x23e0>)
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	4a13      	ldr	r2, [pc, #76]	; (8003f80 <TFTLCD_Init+0x23e0>)
 8003f32:	f023 030f 	bic.w	r3, r3, #15
 8003f36:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]&=~(0XF<<8);//数据保存时间清零
 8003f38:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <TFTLCD_Init+0x23e0>)
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	4a10      	ldr	r2, [pc, #64]	; (8003f80 <TFTLCD_Init+0x23e0>)
 8003f3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f42:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=3<<0;		//地址建立时间(ADDSET)为3个HCLK =18ns
 8003f44:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <TFTLCD_Init+0x23e0>)
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	4a0d      	ldr	r2, [pc, #52]	; (8003f80 <TFTLCD_Init+0x23e0>)
 8003f4a:	f043 0303 	orr.w	r3, r3, #3
 8003f4e:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=2<<8; 	//数据保存时间(DATAST)为6ns*3个HCLK=18ns
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <TFTLCD_Init+0x23e0>)
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	4a0a      	ldr	r2, [pc, #40]	; (8003f80 <TFTLCD_Init+0x23e0>)
 8003f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f5a:	6193      	str	r3, [r2, #24]
	}
	LCD_Display_Dir(0);		//默认为竖屏
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	f7fd fd4f 	bl	8001a00 <LCD_Display_Dir>
	GPIOB->ODR |= 1<<15;					//点亮背光
 8003f62:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <TFTLCD_Init+0x23e4>)
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	4a07      	ldr	r2, [pc, #28]	; (8003f84 <TFTLCD_Init+0x23e4>)
 8003f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f6c:	6153      	str	r3, [r2, #20]
	LCD_Clear(WHITE);
 8003f6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003f72:	f000 f809 	bl	8003f88 <LCD_Clear>
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000274 	.word	0x20000274
 8003f80:	a0000104 	.word	0xa0000104
 8003f84:	40020400 	.word	0x40020400

08003f88 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(uint32_t color)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
	uint32_t index=0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint=lcddev.width;
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <LCD_Clear+0x54>)
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 8003f9a:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <LCD_Clear+0x54>)
 8003f9c:	885b      	ldrh	r3, [r3, #2]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	fb02 f303 	mul.w	r3, r2, r3
 8003fa6:	60bb      	str	r3, [r7, #8]
	LCD_SetCursor(0x00,0x0000);			//设置光标位置
 8003fa8:	2100      	movs	r1, #0
 8003faa:	2000      	movs	r0, #0
 8003fac:	f7fd f95e 	bl	800126c <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 8003fb0:	f7fd f94c 	bl	800124c <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	e006      	b.n	8003fc8 <LCD_Clear+0x40>
	{
		TFT_LCD->LCD_RAM=color;
 8003fba:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <LCD_Clear+0x58>)
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	b292      	uxth	r2, r2
 8003fc0:	805a      	strh	r2, [r3, #2]
	for(index=0;index<totalpoint;index++)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d3f4      	bcc.n	8003fba <LCD_Clear+0x32>
	}
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000274 	.word	0x20000274
 8003fe0:	6c00007e 	.word	0x6c00007e

08003fe4 <LCD_Fill>:
//在指定区域内填充单个颜色
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
//color:要填充的颜色
void LCD_Fill(uint16_t sx,uint16_t sy,uint16_t ex,uint16_t ey,uint32_t color)
{
 8003fe4:	b590      	push	{r4, r7, lr}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4604      	mov	r4, r0
 8003fec:	4608      	mov	r0, r1
 8003fee:	4611      	mov	r1, r2
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4623      	mov	r3, r4
 8003ff4:	80fb      	strh	r3, [r7, #6]
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	80bb      	strh	r3, [r7, #4]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	807b      	strh	r3, [r7, #2]
 8003ffe:	4613      	mov	r3, r2
 8004000:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	uint16_t xlen=0;
 8004002:	2300      	movs	r3, #0
 8004004:	817b      	strh	r3, [r7, #10]
	xlen=ex-sx+1;
 8004006:	887a      	ldrh	r2, [r7, #2]
 8004008:	88fb      	ldrh	r3, [r7, #6]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	b29b      	uxth	r3, r3
 800400e:	3301      	adds	r3, #1
 8004010:	817b      	strh	r3, [r7, #10]
	for(i=sy;i<=ey;i++)
 8004012:	88bb      	ldrh	r3, [r7, #4]
 8004014:	81fb      	strh	r3, [r7, #14]
 8004016:	e018      	b.n	800404a <LCD_Fill+0x66>
	{
		LCD_SetCursor(sx,i);      				//设置光标位置
 8004018:	89fa      	ldrh	r2, [r7, #14]
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	4611      	mov	r1, r2
 800401e:	4618      	mov	r0, r3
 8004020:	f7fd f924 	bl	800126c <LCD_SetCursor>
		LCD_WriteRAM_Prepare();     			//开始写入GRAM
 8004024:	f7fd f912 	bl	800124c <LCD_WriteRAM_Prepare>
		for(j=0;j<xlen;j++)TFT_LCD->LCD_RAM=color;	//显示颜色
 8004028:	2300      	movs	r3, #0
 800402a:	81bb      	strh	r3, [r7, #12]
 800402c:	e006      	b.n	800403c <LCD_Fill+0x58>
 800402e:	4b0b      	ldr	r3, [pc, #44]	; (800405c <LCD_Fill+0x78>)
 8004030:	6a3a      	ldr	r2, [r7, #32]
 8004032:	b292      	uxth	r2, r2
 8004034:	805a      	strh	r2, [r3, #2]
 8004036:	89bb      	ldrh	r3, [r7, #12]
 8004038:	3301      	adds	r3, #1
 800403a:	81bb      	strh	r3, [r7, #12]
 800403c:	89ba      	ldrh	r2, [r7, #12]
 800403e:	897b      	ldrh	r3, [r7, #10]
 8004040:	429a      	cmp	r2, r3
 8004042:	d3f4      	bcc.n	800402e <LCD_Fill+0x4a>
	for(i=sy;i<=ey;i++)
 8004044:	89fb      	ldrh	r3, [r7, #14]
 8004046:	3301      	adds	r3, #1
 8004048:	81fb      	strh	r3, [r7, #14]
 800404a:	89fa      	ldrh	r2, [r7, #14]
 800404c:	883b      	ldrh	r3, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d9e2      	bls.n	8004018 <LCD_Fill+0x34>
	}
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	bd90      	pop	{r4, r7, pc}
 800405c:	6c00007e 	.word	0x6c00007e

08004060 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24/32
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 8004060:	b590      	push	{r4, r7, lr}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	4604      	mov	r4, r0
 8004068:	4608      	mov	r0, r1
 800406a:	4611      	mov	r1, r2
 800406c:	461a      	mov	r2, r3
 800406e:	4623      	mov	r3, r4
 8004070:	80fb      	strh	r3, [r7, #6]
 8004072:	4603      	mov	r3, r0
 8004074:	80bb      	strh	r3, [r7, #4]
 8004076:	460b      	mov	r3, r1
 8004078:	70fb      	strb	r3, [r7, #3]
 800407a:	4613      	mov	r3, r2
 800407c:	70bb      	strb	r3, [r7, #2]
    uint8_t temp,t1,t;
	uint16_t y0=y;
 800407e:	88bb      	ldrh	r3, [r7, #4]
 8004080:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 8004082:	78bb      	ldrb	r3, [r7, #2]
 8004084:	08db      	lsrs	r3, r3, #3
 8004086:	b2db      	uxtb	r3, r3
 8004088:	461a      	mov	r2, r3
 800408a:	78bb      	ldrb	r3, [r7, #2]
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf14      	ite	ne
 8004096:	2301      	movne	r3, #1
 8004098:	2300      	moveq	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	4413      	add	r3, r2
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	78bb      	ldrb	r3, [r7, #2]
 80040a2:	085b      	lsrs	r3, r3, #1
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	fb12 f303 	smulbb	r3, r2, r3
 80040aa:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	3b20      	subs	r3, #32
 80040b0:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 80040b2:	2300      	movs	r3, #0
 80040b4:	737b      	strb	r3, [r7, #13]
 80040b6:	e08f      	b.n	80041d8 <LCD_ShowChar+0x178>
	{
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
 80040b8:	78bb      	ldrb	r3, [r7, #2]
 80040ba:	2b0c      	cmp	r3, #12
 80040bc:	d10b      	bne.n	80040d6 <LCD_ShowChar+0x76>
 80040be:	78fa      	ldrb	r2, [r7, #3]
 80040c0:	7b79      	ldrb	r1, [r7, #13]
 80040c2:	484b      	ldr	r0, [pc, #300]	; (80041f0 <LCD_ShowChar+0x190>)
 80040c4:	4613      	mov	r3, r2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4403      	add	r3, r0
 80040ce:	440b      	add	r3, r1
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	73fb      	strb	r3, [r7, #15]
 80040d4:	e03f      	b.n	8004156 <LCD_ShowChar+0xf6>
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
 80040d6:	78bb      	ldrb	r3, [r7, #2]
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d108      	bne.n	80040ee <LCD_ShowChar+0x8e>
 80040dc:	78fa      	ldrb	r2, [r7, #3]
 80040de:	7b7b      	ldrb	r3, [r7, #13]
 80040e0:	4944      	ldr	r1, [pc, #272]	; (80041f4 <LCD_ShowChar+0x194>)
 80040e2:	0112      	lsls	r2, r2, #4
 80040e4:	440a      	add	r2, r1
 80040e6:	4413      	add	r3, r2
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	73fb      	strb	r3, [r7, #15]
 80040ec:	e033      	b.n	8004156 <LCD_ShowChar+0xf6>
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
 80040ee:	78bb      	ldrb	r3, [r7, #2]
 80040f0:	2b18      	cmp	r3, #24
 80040f2:	d10b      	bne.n	800410c <LCD_ShowChar+0xac>
 80040f4:	78fa      	ldrb	r2, [r7, #3]
 80040f6:	7b79      	ldrb	r1, [r7, #13]
 80040f8:	483f      	ldr	r0, [pc, #252]	; (80041f8 <LCD_ShowChar+0x198>)
 80040fa:	4613      	mov	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4403      	add	r3, r0
 8004104:	440b      	add	r3, r1
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	73fb      	strb	r3, [r7, #15]
 800410a:	e024      	b.n	8004156 <LCD_ShowChar+0xf6>
		else if(size==32)temp=asc2_3216[num][t];	//调用3216字体
 800410c:	78bb      	ldrb	r3, [r7, #2]
 800410e:	2b20      	cmp	r3, #32
 8004110:	d108      	bne.n	8004124 <LCD_ShowChar+0xc4>
 8004112:	78fa      	ldrb	r2, [r7, #3]
 8004114:	7b7b      	ldrb	r3, [r7, #13]
 8004116:	4939      	ldr	r1, [pc, #228]	; (80041fc <LCD_ShowChar+0x19c>)
 8004118:	0192      	lsls	r2, r2, #6
 800411a:	440a      	add	r2, r1
 800411c:	4413      	add	r3, r2
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	73fb      	strb	r3, [r7, #15]
 8004122:	e018      	b.n	8004156 <LCD_ShowChar+0xf6>
		else if(size==48)temp=asc2_4824[num][t];	//调用4824字体
 8004124:	78bb      	ldrb	r3, [r7, #2]
 8004126:	2b30      	cmp	r3, #48	; 0x30
 8004128:	d10a      	bne.n	8004140 <LCD_ShowChar+0xe0>
 800412a:	78fa      	ldrb	r2, [r7, #3]
 800412c:	7b7b      	ldrb	r3, [r7, #13]
 800412e:	4934      	ldr	r1, [pc, #208]	; (8004200 <LCD_ShowChar+0x1a0>)
 8004130:	20a8      	movs	r0, #168	; 0xa8
 8004132:	fb00 f202 	mul.w	r2, r0, r2
 8004136:	440a      	add	r2, r1
 8004138:	4413      	add	r3, r2
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	73fb      	strb	r3, [r7, #15]
 800413e:	e00a      	b.n	8004156 <LCD_ShowChar+0xf6>
		else if(size==64)temp=asc2_6432[num][t];	//调用6432字体
 8004140:	78bb      	ldrb	r3, [r7, #2]
 8004142:	2b40      	cmp	r3, #64	; 0x40
 8004144:	d14e      	bne.n	80041e4 <LCD_ShowChar+0x184>
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	7b7b      	ldrb	r3, [r7, #13]
 800414a:	492e      	ldr	r1, [pc, #184]	; (8004204 <LCD_ShowChar+0x1a4>)
 800414c:	0212      	lsls	r2, r2, #8
 800414e:	440a      	add	r2, r1
 8004150:	4413      	add	r3, r2
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 8004156:	2300      	movs	r3, #0
 8004158:	73bb      	strb	r3, [r7, #14]
 800415a:	e035      	b.n	80041c8 <LCD_ShowChar+0x168>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 800415c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004160:	2b00      	cmp	r3, #0
 8004162:	da07      	bge.n	8004174 <LCD_ShowChar+0x114>
 8004164:	4b28      	ldr	r3, [pc, #160]	; (8004208 <LCD_ShowChar+0x1a8>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	88b9      	ldrh	r1, [r7, #4]
 800416a:	88fb      	ldrh	r3, [r7, #6]
 800416c:	4618      	mov	r0, r3
 800416e:	f7fd fafb 	bl	8001768 <LCD_Fast_DrawPoint>
 8004172:	e00a      	b.n	800418a <LCD_ShowChar+0x12a>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 8004174:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <LCD_ShowChar+0x12a>
 800417c:	4b23      	ldr	r3, [pc, #140]	; (800420c <LCD_ShowChar+0x1ac>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	88b9      	ldrh	r1, [r7, #4]
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	4618      	mov	r0, r3
 8004186:	f7fd faef 	bl	8001768 <LCD_Fast_DrawPoint>
			temp<<=1;
 800418a:	7bfb      	ldrb	r3, [r7, #15]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
			y++;
 8004190:	88bb      	ldrh	r3, [r7, #4]
 8004192:	3301      	adds	r3, #1
 8004194:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 8004196:	4b1e      	ldr	r3, [pc, #120]	; (8004210 <LCD_ShowChar+0x1b0>)
 8004198:	885b      	ldrh	r3, [r3, #2]
 800419a:	88ba      	ldrh	r2, [r7, #4]
 800419c:	429a      	cmp	r2, r3
 800419e:	d223      	bcs.n	80041e8 <LCD_ShowChar+0x188>
			if((y-y0)==size)
 80041a0:	88ba      	ldrh	r2, [r7, #4]
 80041a2:	897b      	ldrh	r3, [r7, #10]
 80041a4:	1ad2      	subs	r2, r2, r3
 80041a6:	78bb      	ldrb	r3, [r7, #2]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d10a      	bne.n	80041c2 <LCD_ShowChar+0x162>
			{
				y=y0;
 80041ac:	897b      	ldrh	r3, [r7, #10]
 80041ae:	80bb      	strh	r3, [r7, #4]
				x++;
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	3301      	adds	r3, #1
 80041b4:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 80041b6:	4b16      	ldr	r3, [pc, #88]	; (8004210 <LCD_ShowChar+0x1b0>)
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	88fa      	ldrh	r2, [r7, #6]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d307      	bcc.n	80041d0 <LCD_ShowChar+0x170>
 80041c0:	e013      	b.n	80041ea <LCD_ShowChar+0x18a>
		for(t1=0;t1<8;t1++)
 80041c2:	7bbb      	ldrb	r3, [r7, #14]
 80041c4:	3301      	adds	r3, #1
 80041c6:	73bb      	strb	r3, [r7, #14]
 80041c8:	7bbb      	ldrb	r3, [r7, #14]
 80041ca:	2b07      	cmp	r3, #7
 80041cc:	d9c6      	bls.n	800415c <LCD_ShowChar+0xfc>
 80041ce:	e000      	b.n	80041d2 <LCD_ShowChar+0x172>
				break;
 80041d0:	bf00      	nop
	for(t=0;t<csize;t++)
 80041d2:	7b7b      	ldrb	r3, [r7, #13]
 80041d4:	3301      	adds	r3, #1
 80041d6:	737b      	strb	r3, [r7, #13]
 80041d8:	7b7a      	ldrb	r2, [r7, #13]
 80041da:	7a7b      	ldrb	r3, [r7, #9]
 80041dc:	429a      	cmp	r2, r3
 80041de:	f4ff af6b 	bcc.w	80040b8 <LCD_ShowChar+0x58>
 80041e2:	e002      	b.n	80041ea <LCD_ShowChar+0x18a>
		else return;								//没有的字库
 80041e4:	bf00      	nop
 80041e6:	e000      	b.n	80041ea <LCD_ShowChar+0x18a>
			if(y>=lcddev.height)return;		//超区域了
 80041e8:	bf00      	nop
			}
		}
	}
}
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd90      	pop	{r4, r7, pc}
 80041f0:	0800a068 	.word	0x0800a068
 80041f4:	0800a4dc 	.word	0x0800a4dc
 80041f8:	0800aacc 	.word	0x0800aacc
 80041fc:	0800b828 	.word	0x0800b828
 8004200:	0800cfe8 	.word	0x0800cfe8
 8004204:	08010e40 	.word	0x08010e40
 8004208:	20000000 	.word	0x20000000
 800420c:	20000004 	.word	0x20000004
 8004210:	20000274 	.word	0x20000274

08004214 <LCD_Pow>:
//m^n函数
//返回值:m^n次方.
uint32_t LCD_Pow(uint8_t m,uint8_t n)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	460a      	mov	r2, r1
 800421e:	71fb      	strb	r3, [r7, #7]
 8004220:	4613      	mov	r3, r2
 8004222:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8004224:	2301      	movs	r3, #1
 8004226:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8004228:	e004      	b.n	8004234 <LCD_Pow+0x20>
 800422a:	79fa      	ldrb	r2, [r7, #7]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	fb02 f303 	mul.w	r3, r2, r3
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	79bb      	ldrb	r3, [r7, #6]
 8004236:	1e5a      	subs	r2, r3, #1
 8004238:	71ba      	strb	r2, [r7, #6]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f5      	bne.n	800422a <LCD_Pow+0x16>
	return result;
 800423e:	68fb      	ldr	r3, [r7, #12]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <LCD_ShowNum>:
//len :数字的位数
//size:字体大小
//color:颜色
//num:数值(0~4294967295);
void LCD_ShowNum(uint16_t x,uint16_t y,uint32_t num,uint8_t len,uint8_t size)
{
 800424c:	b590      	push	{r4, r7, lr}
 800424e:	b089      	sub	sp, #36	; 0x24
 8004250:	af02      	add	r7, sp, #8
 8004252:	60ba      	str	r2, [r7, #8]
 8004254:	461a      	mov	r2, r3
 8004256:	4603      	mov	r3, r0
 8004258:	81fb      	strh	r3, [r7, #14]
 800425a:	460b      	mov	r3, r1
 800425c:	81bb      	strh	r3, [r7, #12]
 800425e:	4613      	mov	r3, r2
 8004260:	71fb      	strb	r3, [r7, #7]
	uint8_t t,temp;
	uint8_t enshow=0;
 8004262:	2300      	movs	r3, #0
 8004264:	75bb      	strb	r3, [r7, #22]
	for(t=0;t<len;t++)
 8004266:	2300      	movs	r3, #0
 8004268:	75fb      	strb	r3, [r7, #23]
 800426a:	e055      	b.n	8004318 <LCD_ShowNum+0xcc>
	{
		temp=(num/LCD_Pow(10,len-t-1))%10;
 800426c:	79fa      	ldrb	r2, [r7, #7]
 800426e:	7dfb      	ldrb	r3, [r7, #23]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	b2db      	uxtb	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	b2db      	uxtb	r3, r3
 8004278:	4619      	mov	r1, r3
 800427a:	200a      	movs	r0, #10
 800427c:	f7ff ffca 	bl	8004214 <LCD_Pow>
 8004280:	4602      	mov	r2, r0
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	fbb3 f1f2 	udiv	r1, r3, r2
 8004288:	4b28      	ldr	r3, [pc, #160]	; (800432c <LCD_ShowNum+0xe0>)
 800428a:	fba3 2301 	umull	r2, r3, r3, r1
 800428e:	08da      	lsrs	r2, r3, #3
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	1aca      	subs	r2, r1, r3
 800429a:	4613      	mov	r3, r2
 800429c:	757b      	strb	r3, [r7, #21]
		if(enshow==0&&t<(len-1))
 800429e:	7dbb      	ldrb	r3, [r7, #22]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d11f      	bne.n	80042e4 <LCD_ShowNum+0x98>
 80042a4:	7dfa      	ldrb	r2, [r7, #23]
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	429a      	cmp	r2, r3
 80042ac:	da1a      	bge.n	80042e4 <LCD_ShowNum+0x98>
		{
			if(temp==0)
 80042ae:	7d7b      	ldrb	r3, [r7, #21]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d115      	bne.n	80042e0 <LCD_ShowNum+0x94>
			{
				LCD_ShowChar(x+(size/2)*t,y,' ',size,0);
 80042b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042b8:	085b      	lsrs	r3, r3, #1
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	b29a      	uxth	r2, r3
 80042be:	7dfb      	ldrb	r3, [r7, #23]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	fb12 f303 	smulbb	r3, r2, r3
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	89fb      	ldrh	r3, [r7, #14]
 80042ca:	4413      	add	r3, r2
 80042cc:	b298      	uxth	r0, r3
 80042ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042d2:	89b9      	ldrh	r1, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	9200      	str	r2, [sp, #0]
 80042d8:	2220      	movs	r2, #32
 80042da:	f7ff fec1 	bl	8004060 <LCD_ShowChar>
				continue;
 80042de:	e018      	b.n	8004312 <LCD_ShowNum+0xc6>
			}else enshow=1;
 80042e0:	2301      	movs	r3, #1
 80042e2:	75bb      	strb	r3, [r7, #22]

		}
	 	LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,0);
 80042e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042e8:	085b      	lsrs	r3, r3, #1
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	7dfb      	ldrb	r3, [r7, #23]
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	fb12 f303 	smulbb	r3, r2, r3
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	89fb      	ldrh	r3, [r7, #14]
 80042fa:	4413      	add	r3, r2
 80042fc:	b298      	uxth	r0, r3
 80042fe:	7d7b      	ldrb	r3, [r7, #21]
 8004300:	3330      	adds	r3, #48	; 0x30
 8004302:	b2da      	uxtb	r2, r3
 8004304:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004308:	89b9      	ldrh	r1, [r7, #12]
 800430a:	2400      	movs	r4, #0
 800430c:	9400      	str	r4, [sp, #0]
 800430e:	f7ff fea7 	bl	8004060 <LCD_ShowChar>
	for(t=0;t<len;t++)
 8004312:	7dfb      	ldrb	r3, [r7, #23]
 8004314:	3301      	adds	r3, #1
 8004316:	75fb      	strb	r3, [r7, #23]
 8004318:	7dfa      	ldrb	r2, [r7, #23]
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	429a      	cmp	r2, r3
 800431e:	d3a5      	bcc.n	800426c <LCD_ShowNum+0x20>
	}
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	bd90      	pop	{r4, r7, pc}
 800432a:	bf00      	nop
 800432c:	cccccccd 	.word	0xcccccccd

08004330 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{
 8004330:	b590      	push	{r4, r7, lr}
 8004332:	b087      	sub	sp, #28
 8004334:	af02      	add	r7, sp, #8
 8004336:	4604      	mov	r4, r0
 8004338:	4608      	mov	r0, r1
 800433a:	4611      	mov	r1, r2
 800433c:	461a      	mov	r2, r3
 800433e:	4623      	mov	r3, r4
 8004340:	80fb      	strh	r3, [r7, #6]
 8004342:	4603      	mov	r3, r0
 8004344:	80bb      	strh	r3, [r7, #4]
 8004346:	460b      	mov	r3, r1
 8004348:	807b      	strh	r3, [r7, #2]
 800434a:	4613      	mov	r3, r2
 800434c:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 800434e:	88fb      	ldrh	r3, [r7, #6]
 8004350:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8004352:	887a      	ldrh	r2, [r7, #2]
 8004354:	88fb      	ldrh	r3, [r7, #6]
 8004356:	4413      	add	r3, r2
 8004358:	807b      	strh	r3, [r7, #2]
	height+=y;
 800435a:	883a      	ldrh	r2, [r7, #0]
 800435c:	88bb      	ldrh	r3, [r7, #4]
 800435e:	4413      	add	r3, r2
 8004360:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8004362:	e024      	b.n	80043ae <LCD_ShowString+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 8004364:	88fa      	ldrh	r2, [r7, #6]
 8004366:	887b      	ldrh	r3, [r7, #2]
 8004368:	429a      	cmp	r2, r3
 800436a:	d307      	bcc.n	800437c <LCD_ShowString+0x4c>
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	80fb      	strh	r3, [r7, #6]
 8004370:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004374:	b29a      	uxth	r2, r3
 8004376:	88bb      	ldrh	r3, [r7, #4]
 8004378:	4413      	add	r3, r2
 800437a:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 800437c:	88ba      	ldrh	r2, [r7, #4]
 800437e:	883b      	ldrh	r3, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d21d      	bcs.n	80043c0 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	781a      	ldrb	r2, [r3, #0]
 8004388:	f897 3020 	ldrb.w	r3, [r7, #32]
 800438c:	88b9      	ldrh	r1, [r7, #4]
 800438e:	88f8      	ldrh	r0, [r7, #6]
 8004390:	2400      	movs	r4, #0
 8004392:	9400      	str	r4, [sp, #0]
 8004394:	f7ff fe64 	bl	8004060 <LCD_ShowChar>
        x+=size/2;
 8004398:	f897 3020 	ldrb.w	r3, [r7, #32]
 800439c:	085b      	lsrs	r3, r3, #1
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	88fb      	ldrh	r3, [r7, #6]
 80043a4:	4413      	add	r3, r2
 80043a6:	80fb      	strh	r3, [r7, #6]
        p++;
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	3301      	adds	r3, #1
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b7e      	cmp	r3, #126	; 0x7e
 80043b4:	d805      	bhi.n	80043c2 <LCD_ShowString+0x92>
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b1f      	cmp	r3, #31
 80043bc:	d8d2      	bhi.n	8004364 <LCD_ShowString+0x34>
    }
}
 80043be:	e000      	b.n	80043c2 <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 80043c0:	bf00      	nop
}
 80043c2:	bf00      	nop
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd90      	pop	{r4, r7, pc}
	...

080043cc <app_main_init>:
#include "irmp.h"

uint8_t key;
char *str = 0;

void app_main_init() {
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af02      	add	r7, sp, #8
	TFTLCD_Init();
 80043d2:	f7fd fbe5 	bl	8001ba0 <TFTLCD_Init>
	POINT_COLOR = BLUE;
 80043d6:	4b27      	ldr	r3, [pc, #156]	; (8004474 <app_main_init+0xa8>)
 80043d8:	221f      	movs	r2, #31
 80043da:	601a      	str	r2, [r3, #0]
	LCD_ShowString(30, 50, 200, 16, 16, (uint8_t*)"Explorer STM32F4");
 80043dc:	4b26      	ldr	r3, [pc, #152]	; (8004478 <app_main_init+0xac>)
 80043de:	9301      	str	r3, [sp, #4]
 80043e0:	2310      	movs	r3, #16
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	2310      	movs	r3, #16
 80043e6:	22c8      	movs	r2, #200	; 0xc8
 80043e8:	2132      	movs	r1, #50	; 0x32
 80043ea:	201e      	movs	r0, #30
 80043ec:	f7ff ffa0 	bl	8004330 <LCD_ShowString>
	LCD_ShowString(30, 70, 200, 16, 16, (uint8_t*)"REMOTE TEST");
 80043f0:	4b22      	ldr	r3, [pc, #136]	; (800447c <app_main_init+0xb0>)
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	2310      	movs	r3, #16
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	2310      	movs	r3, #16
 80043fa:	22c8      	movs	r2, #200	; 0xc8
 80043fc:	2146      	movs	r1, #70	; 0x46
 80043fe:	201e      	movs	r0, #30
 8004400:	f7ff ff96 	bl	8004330 <LCD_ShowString>
	LCD_ShowString(30, 90, 200, 16, 16, (uint8_t*)"ATOM@ALIENTEK");
 8004404:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <app_main_init+0xb4>)
 8004406:	9301      	str	r3, [sp, #4]
 8004408:	2310      	movs	r3, #16
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	2310      	movs	r3, #16
 800440e:	22c8      	movs	r2, #200	; 0xc8
 8004410:	215a      	movs	r1, #90	; 0x5a
 8004412:	201e      	movs	r0, #30
 8004414:	f7ff ff8c 	bl	8004330 <LCD_ShowString>
	LCD_ShowString(30, 110, 200, 16, 16, (uint8_t*)"2017/4/15");
 8004418:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <app_main_init+0xb8>)
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	2310      	movs	r3, #16
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2310      	movs	r3, #16
 8004422:	22c8      	movs	r2, #200	; 0xc8
 8004424:	216e      	movs	r1, #110	; 0x6e
 8004426:	201e      	movs	r0, #30
 8004428:	f7ff ff82 	bl	8004330 <LCD_ShowString>
	LCD_ShowString(30, 130, 200, 16, 16, (uint8_t*)"KEYVAL:");
 800442c:	4b16      	ldr	r3, [pc, #88]	; (8004488 <app_main_init+0xbc>)
 800442e:	9301      	str	r3, [sp, #4]
 8004430:	2310      	movs	r3, #16
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	2310      	movs	r3, #16
 8004436:	22c8      	movs	r2, #200	; 0xc8
 8004438:	2182      	movs	r1, #130	; 0x82
 800443a:	201e      	movs	r0, #30
 800443c:	f7ff ff78 	bl	8004330 <LCD_ShowString>
	LCD_ShowString(30, 150, 200, 16, 16, (uint8_t*)"KEYCNT:");
 8004440:	4b12      	ldr	r3, [pc, #72]	; (800448c <app_main_init+0xc0>)
 8004442:	9301      	str	r3, [sp, #4]
 8004444:	2310      	movs	r3, #16
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	2310      	movs	r3, #16
 800444a:	22c8      	movs	r2, #200	; 0xc8
 800444c:	2196      	movs	r1, #150	; 0x96
 800444e:	201e      	movs	r0, #30
 8004450:	f7ff ff6e 	bl	8004330 <LCD_ShowString>
	LCD_ShowString(30, 170, 200, 16, 16, (uint8_t*)"SYMBOL:");
 8004454:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <app_main_init+0xc4>)
 8004456:	9301      	str	r3, [sp, #4]
 8004458:	2310      	movs	r3, #16
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	2310      	movs	r3, #16
 800445e:	22c8      	movs	r2, #200	; 0xc8
 8004460:	21aa      	movs	r1, #170	; 0xaa
 8004462:	201e      	movs	r0, #30
 8004464:	f7ff ff64 	bl	8004330 <LCD_ShowString>
	printf("starting......");
 8004468:	480a      	ldr	r0, [pc, #40]	; (8004494 <app_main_init+0xc8>)
 800446a:	f003 fcdf 	bl	8007e2c <iprintf>
}
 800446e:	bf00      	nop
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20000000 	.word	0x20000000
 8004478:	08009f58 	.word	0x08009f58
 800447c:	08009f6c 	.word	0x08009f6c
 8004480:	08009f78 	.word	0x08009f78
 8004484:	08009f88 	.word	0x08009f88
 8004488:	08009f94 	.word	0x08009f94
 800448c:	08009f9c 	.word	0x08009f9c
 8004490:	08009fa4 	.word	0x08009fa4
 8004494:	08009fac 	.word	0x08009fac

08004498 <app_main>:

void app_main() {
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af02      	add	r7, sp, #8
	key = Remote_Scan();
 800449e:	f7fc fe29 	bl	80010f4 <Remote_Scan>
 80044a2:	4603      	mov	r3, r0
 80044a4:	461a      	mov	r2, r3
 80044a6:	4bc9      	ldr	r3, [pc, #804]	; (80047cc <app_main+0x334>)
 80044a8:	701a      	strb	r2, [r3, #0]
	if (key) {
 80044aa:	4bc8      	ldr	r3, [pc, #800]	; (80047cc <app_main+0x334>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 81df 	beq.w	8004872 <app_main+0x3da>
		LCD_ShowNum(86, 130, key, 3, 16);		//显示键值
 80044b4:	4bc5      	ldr	r3, [pc, #788]	; (80047cc <app_main+0x334>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	2310      	movs	r3, #16
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	2303      	movs	r3, #3
 80044c0:	2182      	movs	r1, #130	; 0x82
 80044c2:	2056      	movs	r0, #86	; 0x56
 80044c4:	f7ff fec2 	bl	800424c <LCD_ShowNum>
		LCD_ShowNum(86, 150, RmtCnt, 3, 16);	//显示按键次数
 80044c8:	4bc1      	ldr	r3, [pc, #772]	; (80047d0 <app_main+0x338>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	2310      	movs	r3, #16
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	2303      	movs	r3, #3
 80044d4:	2196      	movs	r1, #150	; 0x96
 80044d6:	2056      	movs	r0, #86	; 0x56
 80044d8:	f7ff feb8 	bl	800424c <LCD_ShowNum>
		printf("键值：%d", key);
 80044dc:	4bbb      	ldr	r3, [pc, #748]	; (80047cc <app_main+0x334>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	4619      	mov	r1, r3
 80044e2:	48bc      	ldr	r0, [pc, #752]	; (80047d4 <app_main+0x33c>)
 80044e4:	f003 fca2 	bl	8007e2c <iprintf>
		printf("按键次数：%d", RmtCnt);
 80044e8:	4bb9      	ldr	r3, [pc, #740]	; (80047d0 <app_main+0x338>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	4619      	mov	r1, r3
 80044ee:	48ba      	ldr	r0, [pc, #744]	; (80047d8 <app_main+0x340>)
 80044f0:	f003 fc9c 	bl	8007e2c <iprintf>
		switch (key) {
 80044f4:	4bb5      	ldr	r3, [pc, #724]	; (80047cc <app_main+0x334>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2be2      	cmp	r3, #226	; 0xe2
 80044fa:	f000 812a 	beq.w	8004752 <app_main+0x2ba>
 80044fe:	2be2      	cmp	r3, #226	; 0xe2
 8004500:	f300 819c 	bgt.w	800483c <app_main+0x3a4>
 8004504:	2be0      	cmp	r3, #224	; 0xe0
 8004506:	f000 8130 	beq.w	800476a <app_main+0x2d2>
 800450a:	2be0      	cmp	r3, #224	; 0xe0
 800450c:	f300 8196 	bgt.w	800483c <app_main+0x3a4>
 8004510:	2bc2      	cmp	r3, #194	; 0xc2
 8004512:	f000 8122 	beq.w	800475a <app_main+0x2c2>
 8004516:	2bc2      	cmp	r3, #194	; 0xc2
 8004518:	f300 8190 	bgt.w	800483c <app_main+0x3a4>
 800451c:	2bb0      	cmp	r3, #176	; 0xb0
 800451e:	f300 818d 	bgt.w	800483c <app_main+0x3a4>
 8004522:	2b90      	cmp	r3, #144	; 0x90
 8004524:	da17      	bge.n	8004556 <app_main+0xbe>
 8004526:	2b7a      	cmp	r3, #122	; 0x7a
 8004528:	f000 813f 	beq.w	80047aa <app_main+0x312>
 800452c:	2b7a      	cmp	r3, #122	; 0x7a
 800452e:	f300 8185 	bgt.w	800483c <app_main+0x3a4>
 8004532:	2b68      	cmp	r3, #104	; 0x68
 8004534:	f300 8182 	bgt.w	800483c <app_main+0x3a4>
 8004538:	2b42      	cmp	r3, #66	; 0x42
 800453a:	da55      	bge.n	80045e8 <app_main+0x150>
 800453c:	2b38      	cmp	r3, #56	; 0x38
 800453e:	f000 813c 	beq.w	80047ba <app_main+0x322>
 8004542:	2b38      	cmp	r3, #56	; 0x38
 8004544:	f300 817a 	bgt.w	800483c <app_main+0x3a4>
 8004548:	2b22      	cmp	r3, #34	; 0x22
 800454a:	f300 80ef 	bgt.w	800472c <app_main+0x294>
 800454e:	2b00      	cmp	r3, #0
 8004550:	f280 80a0 	bge.w	8004694 <app_main+0x1fc>
 8004554:	e172      	b.n	800483c <app_main+0x3a4>
 8004556:	3b90      	subs	r3, #144	; 0x90
 8004558:	2b20      	cmp	r3, #32
 800455a:	f200 816f 	bhi.w	800483c <app_main+0x3a4>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <app_main+0xcc>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	0800477b 	.word	0x0800477b
 8004568:	0800483d 	.word	0x0800483d
 800456c:	0800483d 	.word	0x0800483d
 8004570:	0800483d 	.word	0x0800483d
 8004574:	0800483d 	.word	0x0800483d
 8004578:	0800483d 	.word	0x0800483d
 800457c:	0800483d 	.word	0x0800483d
 8004580:	0800483d 	.word	0x0800483d
 8004584:	0800478b 	.word	0x0800478b
 8004588:	0800483d 	.word	0x0800483d
 800458c:	0800483d 	.word	0x0800483d
 8004590:	0800483d 	.word	0x0800483d
 8004594:	0800483d 	.word	0x0800483d
 8004598:	0800483d 	.word	0x0800483d
 800459c:	0800483d 	.word	0x0800483d
 80045a0:	0800483d 	.word	0x0800483d
 80045a4:	0800483d 	.word	0x0800483d
 80045a8:	0800483d 	.word	0x0800483d
 80045ac:	0800473b 	.word	0x0800473b
 80045b0:	0800483d 	.word	0x0800483d
 80045b4:	0800483d 	.word	0x0800483d
 80045b8:	0800483d 	.word	0x0800483d
 80045bc:	0800483d 	.word	0x0800483d
 80045c0:	0800483d 	.word	0x0800483d
 80045c4:	08004773 	.word	0x08004773
 80045c8:	0800483d 	.word	0x0800483d
 80045cc:	0800483d 	.word	0x0800483d
 80045d0:	0800483d 	.word	0x0800483d
 80045d4:	0800483d 	.word	0x0800483d
 80045d8:	0800483d 	.word	0x0800483d
 80045dc:	0800483d 	.word	0x0800483d
 80045e0:	0800483d 	.word	0x0800483d
 80045e4:	08004793 	.word	0x08004793
 80045e8:	3b42      	subs	r3, #66	; 0x42
 80045ea:	2b26      	cmp	r3, #38	; 0x26
 80045ec:	f200 8126 	bhi.w	800483c <app_main+0x3a4>
 80045f0:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <app_main+0x160>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	0800482d 	.word	0x0800482d
 80045fc:	0800483d 	.word	0x0800483d
 8004600:	0800483d 	.word	0x0800483d
 8004604:	0800483d 	.word	0x0800483d
 8004608:	0800483d 	.word	0x0800483d
 800460c:	0800483d 	.word	0x0800483d
 8004610:	0800483d 	.word	0x0800483d
 8004614:	0800483d 	.word	0x0800483d
 8004618:	0800483d 	.word	0x0800483d
 800461c:	0800483d 	.word	0x0800483d
 8004620:	0800483d 	.word	0x0800483d
 8004624:	0800483d 	.word	0x0800483d
 8004628:	0800483d 	.word	0x0800483d
 800462c:	0800483d 	.word	0x0800483d
 8004630:	0800483d 	.word	0x0800483d
 8004634:	0800483d 	.word	0x0800483d
 8004638:	08004835 	.word	0x08004835
 800463c:	0800483d 	.word	0x0800483d
 8004640:	0800483d 	.word	0x0800483d
 8004644:	0800483d 	.word	0x0800483d
 8004648:	0800483d 	.word	0x0800483d
 800464c:	0800483d 	.word	0x0800483d
 8004650:	0800483d 	.word	0x0800483d
 8004654:	0800483d 	.word	0x0800483d
 8004658:	080047c3 	.word	0x080047c3
 800465c:	0800483d 	.word	0x0800483d
 8004660:	0800483d 	.word	0x0800483d
 8004664:	0800483d 	.word	0x0800483d
 8004668:	0800483d 	.word	0x0800483d
 800466c:	0800483d 	.word	0x0800483d
 8004670:	0800483d 	.word	0x0800483d
 8004674:	0800483d 	.word	0x0800483d
 8004678:	08004743 	.word	0x08004743
 800467c:	0800483d 	.word	0x0800483d
 8004680:	0800483d 	.word	0x0800483d
 8004684:	0800483d 	.word	0x0800483d
 8004688:	0800483d 	.word	0x0800483d
 800468c:	0800483d 	.word	0x0800483d
 8004690:	08004783 	.word	0x08004783
 8004694:	2b22      	cmp	r3, #34	; 0x22
 8004696:	f200 80d1 	bhi.w	800483c <app_main+0x3a4>
 800469a:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <app_main+0x208>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	08004733 	.word	0x08004733
 80046a4:	0800483d 	.word	0x0800483d
 80046a8:	0800474b 	.word	0x0800474b
 80046ac:	0800483d 	.word	0x0800483d
 80046b0:	0800483d 	.word	0x0800483d
 80046b4:	0800483d 	.word	0x0800483d
 80046b8:	0800483d 	.word	0x0800483d
 80046bc:	0800483d 	.word	0x0800483d
 80046c0:	0800483d 	.word	0x0800483d
 80046c4:	0800483d 	.word	0x0800483d
 80046c8:	0800483d 	.word	0x0800483d
 80046cc:	0800483d 	.word	0x0800483d
 80046d0:	0800483d 	.word	0x0800483d
 80046d4:	0800483d 	.word	0x0800483d
 80046d8:	0800483d 	.word	0x0800483d
 80046dc:	0800483d 	.word	0x0800483d
 80046e0:	080047b3 	.word	0x080047b3
 80046e4:	0800483d 	.word	0x0800483d
 80046e8:	0800483d 	.word	0x0800483d
 80046ec:	0800483d 	.word	0x0800483d
 80046f0:	0800483d 	.word	0x0800483d
 80046f4:	0800483d 	.word	0x0800483d
 80046f8:	0800483d 	.word	0x0800483d
 80046fc:	0800483d 	.word	0x0800483d
 8004700:	080047a3 	.word	0x080047a3
 8004704:	0800483d 	.word	0x0800483d
 8004708:	0800483d 	.word	0x0800483d
 800470c:	0800483d 	.word	0x0800483d
 8004710:	0800483d 	.word	0x0800483d
 8004714:	0800483d 	.word	0x0800483d
 8004718:	0800483d 	.word	0x0800483d
 800471c:	0800483d 	.word	0x0800483d
 8004720:	0800483d 	.word	0x0800483d
 8004724:	0800483d 	.word	0x0800483d
 8004728:	08004763 	.word	0x08004763
 800472c:	2b30      	cmp	r3, #48	; 0x30
 800472e:	d034      	beq.n	800479a <app_main+0x302>
 8004730:	e084      	b.n	800483c <app_main+0x3a4>
		case 0:
			str = "ERROR";
 8004732:	4b2a      	ldr	r3, [pc, #168]	; (80047dc <app_main+0x344>)
 8004734:	4a2a      	ldr	r2, [pc, #168]	; (80047e0 <app_main+0x348>)
 8004736:	601a      	str	r2, [r3, #0]
			break;
 8004738:	e080      	b.n	800483c <app_main+0x3a4>
		case 162:
			str = "POWER";
 800473a:	4b28      	ldr	r3, [pc, #160]	; (80047dc <app_main+0x344>)
 800473c:	4a29      	ldr	r2, [pc, #164]	; (80047e4 <app_main+0x34c>)
 800473e:	601a      	str	r2, [r3, #0]
			break;
 8004740:	e07c      	b.n	800483c <app_main+0x3a4>
		case 98:
			str = "UP";
 8004742:	4b26      	ldr	r3, [pc, #152]	; (80047dc <app_main+0x344>)
 8004744:	4a28      	ldr	r2, [pc, #160]	; (80047e8 <app_main+0x350>)
 8004746:	601a      	str	r2, [r3, #0]
			break;
 8004748:	e078      	b.n	800483c <app_main+0x3a4>
		case 2:
			str = "PLAY";
 800474a:	4b24      	ldr	r3, [pc, #144]	; (80047dc <app_main+0x344>)
 800474c:	4a27      	ldr	r2, [pc, #156]	; (80047ec <app_main+0x354>)
 800474e:	601a      	str	r2, [r3, #0]
			break;
 8004750:	e074      	b.n	800483c <app_main+0x3a4>
		case 226:
			str = "ALIENTEK";
 8004752:	4b22      	ldr	r3, [pc, #136]	; (80047dc <app_main+0x344>)
 8004754:	4a26      	ldr	r2, [pc, #152]	; (80047f0 <app_main+0x358>)
 8004756:	601a      	str	r2, [r3, #0]
			break;
 8004758:	e070      	b.n	800483c <app_main+0x3a4>
		case 194:
			str = "RIGHT";
 800475a:	4b20      	ldr	r3, [pc, #128]	; (80047dc <app_main+0x344>)
 800475c:	4a25      	ldr	r2, [pc, #148]	; (80047f4 <app_main+0x35c>)
 800475e:	601a      	str	r2, [r3, #0]
			break;
 8004760:	e06c      	b.n	800483c <app_main+0x3a4>
		case 34:
			str = "LEFT";
 8004762:	4b1e      	ldr	r3, [pc, #120]	; (80047dc <app_main+0x344>)
 8004764:	4a24      	ldr	r2, [pc, #144]	; (80047f8 <app_main+0x360>)
 8004766:	601a      	str	r2, [r3, #0]
			break;
 8004768:	e068      	b.n	800483c <app_main+0x3a4>
		case 224:
			str = "VOL-";
 800476a:	4b1c      	ldr	r3, [pc, #112]	; (80047dc <app_main+0x344>)
 800476c:	4a23      	ldr	r2, [pc, #140]	; (80047fc <app_main+0x364>)
 800476e:	601a      	str	r2, [r3, #0]
			break;
 8004770:	e064      	b.n	800483c <app_main+0x3a4>
		case 168:
			str = "DOWN";
 8004772:	4b1a      	ldr	r3, [pc, #104]	; (80047dc <app_main+0x344>)
 8004774:	4a22      	ldr	r2, [pc, #136]	; (8004800 <app_main+0x368>)
 8004776:	601a      	str	r2, [r3, #0]
			break;
 8004778:	e060      	b.n	800483c <app_main+0x3a4>
		case 144:
			str = "VOL+";
 800477a:	4b18      	ldr	r3, [pc, #96]	; (80047dc <app_main+0x344>)
 800477c:	4a21      	ldr	r2, [pc, #132]	; (8004804 <app_main+0x36c>)
 800477e:	601a      	str	r2, [r3, #0]
			break;
 8004780:	e05c      	b.n	800483c <app_main+0x3a4>
		case 104:
			str = "1";
 8004782:	4b16      	ldr	r3, [pc, #88]	; (80047dc <app_main+0x344>)
 8004784:	4a20      	ldr	r2, [pc, #128]	; (8004808 <app_main+0x370>)
 8004786:	601a      	str	r2, [r3, #0]
			break;
 8004788:	e058      	b.n	800483c <app_main+0x3a4>
		case 152:
			str = "2";
 800478a:	4b14      	ldr	r3, [pc, #80]	; (80047dc <app_main+0x344>)
 800478c:	4a1f      	ldr	r2, [pc, #124]	; (800480c <app_main+0x374>)
 800478e:	601a      	str	r2, [r3, #0]
			break;
 8004790:	e054      	b.n	800483c <app_main+0x3a4>
		case 176:
			str = "3";
 8004792:	4b12      	ldr	r3, [pc, #72]	; (80047dc <app_main+0x344>)
 8004794:	4a1e      	ldr	r2, [pc, #120]	; (8004810 <app_main+0x378>)
 8004796:	601a      	str	r2, [r3, #0]
			break;
 8004798:	e050      	b.n	800483c <app_main+0x3a4>
		case 48:
			str = "4";
 800479a:	4b10      	ldr	r3, [pc, #64]	; (80047dc <app_main+0x344>)
 800479c:	4a1d      	ldr	r2, [pc, #116]	; (8004814 <app_main+0x37c>)
 800479e:	601a      	str	r2, [r3, #0]
			break;
 80047a0:	e04c      	b.n	800483c <app_main+0x3a4>
		case 24:
			str = "5";
 80047a2:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <app_main+0x344>)
 80047a4:	4a1c      	ldr	r2, [pc, #112]	; (8004818 <app_main+0x380>)
 80047a6:	601a      	str	r2, [r3, #0]
			break;
 80047a8:	e048      	b.n	800483c <app_main+0x3a4>
		case 122:
			str = "6";
 80047aa:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <app_main+0x344>)
 80047ac:	4a1b      	ldr	r2, [pc, #108]	; (800481c <app_main+0x384>)
 80047ae:	601a      	str	r2, [r3, #0]
			break;
 80047b0:	e044      	b.n	800483c <app_main+0x3a4>
		case 16:
			str = "7";
 80047b2:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <app_main+0x344>)
 80047b4:	4a1a      	ldr	r2, [pc, #104]	; (8004820 <app_main+0x388>)
 80047b6:	601a      	str	r2, [r3, #0]
			break;
 80047b8:	e040      	b.n	800483c <app_main+0x3a4>
		case 56:
			str = "8";
 80047ba:	4b08      	ldr	r3, [pc, #32]	; (80047dc <app_main+0x344>)
 80047bc:	4a19      	ldr	r2, [pc, #100]	; (8004824 <app_main+0x38c>)
 80047be:	601a      	str	r2, [r3, #0]
			break;
 80047c0:	e03c      	b.n	800483c <app_main+0x3a4>
		case 90:
			str = "9";
 80047c2:	4b06      	ldr	r3, [pc, #24]	; (80047dc <app_main+0x344>)
 80047c4:	4a18      	ldr	r2, [pc, #96]	; (8004828 <app_main+0x390>)
 80047c6:	601a      	str	r2, [r3, #0]
			break;
 80047c8:	e038      	b.n	800483c <app_main+0x3a4>
 80047ca:	bf00      	nop
 80047cc:	20000284 	.word	0x20000284
 80047d0:	20000208 	.word	0x20000208
 80047d4:	08009fbc 	.word	0x08009fbc
 80047d8:	08009fc8 	.word	0x08009fc8
 80047dc:	2000020c 	.word	0x2000020c
 80047e0:	08009fdc 	.word	0x08009fdc
 80047e4:	08009fe4 	.word	0x08009fe4
 80047e8:	08009fec 	.word	0x08009fec
 80047ec:	08009ff0 	.word	0x08009ff0
 80047f0:	08009ff8 	.word	0x08009ff8
 80047f4:	0800a004 	.word	0x0800a004
 80047f8:	0800a00c 	.word	0x0800a00c
 80047fc:	0800a014 	.word	0x0800a014
 8004800:	0800a01c 	.word	0x0800a01c
 8004804:	0800a024 	.word	0x0800a024
 8004808:	0800a02c 	.word	0x0800a02c
 800480c:	0800a030 	.word	0x0800a030
 8004810:	0800a034 	.word	0x0800a034
 8004814:	0800a038 	.word	0x0800a038
 8004818:	0800a03c 	.word	0x0800a03c
 800481c:	0800a040 	.word	0x0800a040
 8004820:	0800a044 	.word	0x0800a044
 8004824:	0800a048 	.word	0x0800a048
 8004828:	0800a04c 	.word	0x0800a04c
		case 66:
			str = "0";
 800482c:	4b14      	ldr	r3, [pc, #80]	; (8004880 <app_main+0x3e8>)
 800482e:	4a15      	ldr	r2, [pc, #84]	; (8004884 <app_main+0x3ec>)
 8004830:	601a      	str	r2, [r3, #0]
			break;
 8004832:	e003      	b.n	800483c <app_main+0x3a4>
		case 82:
			str = "DELETE";
 8004834:	4b12      	ldr	r3, [pc, #72]	; (8004880 <app_main+0x3e8>)
 8004836:	4a14      	ldr	r2, [pc, #80]	; (8004888 <app_main+0x3f0>)
 8004838:	601a      	str	r2, [r3, #0]
			break;
 800483a:	bf00      	nop
		}
		LCD_Fill(86, 170, 116 + 8 * 8, 170 + 16, WHITE);	//清楚之前的显示
 800483c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	23ba      	movs	r3, #186	; 0xba
 8004844:	22b4      	movs	r2, #180	; 0xb4
 8004846:	21aa      	movs	r1, #170	; 0xaa
 8004848:	2056      	movs	r0, #86	; 0x56
 800484a:	f7ff fbcb 	bl	8003fe4 <LCD_Fill>
		LCD_ShowString(86, 170, 200, 16, 16, (uint8_t*) str);	//显示SYMBOL
 800484e:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <app_main+0x3e8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	2310      	movs	r3, #16
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	2310      	movs	r3, #16
 800485a:	22c8      	movs	r2, #200	; 0xc8
 800485c:	21aa      	movs	r1, #170	; 0xaa
 800485e:	2056      	movs	r0, #86	; 0x56
 8004860:	f7ff fd66 	bl	8004330 <LCD_ShowString>
		printf("SYMBOL:%s", str);
 8004864:	4b06      	ldr	r3, [pc, #24]	; (8004880 <app_main+0x3e8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4619      	mov	r1, r3
 800486a:	4808      	ldr	r0, [pc, #32]	; (800488c <app_main+0x3f4>)
 800486c:	f003 fade 	bl	8007e2c <iprintf>
	} else
		HAL_Delay(10);
}
 8004870:	e002      	b.n	8004878 <app_main+0x3e0>
		HAL_Delay(10);
 8004872:	200a      	movs	r0, #10
 8004874:	f000 fd3e 	bl	80052f4 <HAL_Delay>
}
 8004878:	bf00      	nop
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	2000020c 	.word	0x2000020c
 8004884:	0800a050 	.word	0x0800a050
 8004888:	0800a054 	.word	0x0800a054
 800488c:	0800a05c 	.word	0x0800a05c

08004890 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 8004898:	bf00      	nop
 800489a:	4b08      	ldr	r3, [pc, #32]	; (80048bc <__io_putchar+0x2c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f9      	beq.n	800489a <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	4b04      	ldr	r3, [pc, #16]	; (80048bc <__io_putchar+0x2c>)
 80048ac:	605a      	str	r2, [r3, #4]

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

	return ch;
 80048ae:	687b      	ldr	r3, [r7, #4]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	40011000 	.word	0x40011000

080048c0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08e      	sub	sp, #56	; 0x38
 80048c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80048c6:	f107 031c 	add.w	r3, r7, #28
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	605a      	str	r2, [r3, #4]
 80048d0:	609a      	str	r2, [r3, #8]
 80048d2:	60da      	str	r2, [r3, #12]
 80048d4:	611a      	str	r2, [r3, #16]
 80048d6:	615a      	str	r2, [r3, #20]
 80048d8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80048da:	463b      	mov	r3, r7
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	609a      	str	r2, [r3, #8]
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	611a      	str	r2, [r3, #16]
 80048e8:	615a      	str	r2, [r3, #20]
 80048ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80048ec:	4b2f      	ldr	r3, [pc, #188]	; (80049ac <MX_FSMC_Init+0xec>)
 80048ee:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80048f2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80048f4:	4b2d      	ldr	r3, [pc, #180]	; (80049ac <MX_FSMC_Init+0xec>)
 80048f6:	4a2e      	ldr	r2, [pc, #184]	; (80049b0 <MX_FSMC_Init+0xf0>)
 80048f8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 80048fa:	4b2c      	ldr	r3, [pc, #176]	; (80049ac <MX_FSMC_Init+0xec>)
 80048fc:	2206      	movs	r2, #6
 80048fe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004900:	4b2a      	ldr	r3, [pc, #168]	; (80049ac <MX_FSMC_Init+0xec>)
 8004902:	2200      	movs	r2, #0
 8004904:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8004906:	4b29      	ldr	r3, [pc, #164]	; (80049ac <MX_FSMC_Init+0xec>)
 8004908:	2200      	movs	r2, #0
 800490a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800490c:	4b27      	ldr	r3, [pc, #156]	; (80049ac <MX_FSMC_Init+0xec>)
 800490e:	2210      	movs	r2, #16
 8004910:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004912:	4b26      	ldr	r3, [pc, #152]	; (80049ac <MX_FSMC_Init+0xec>)
 8004914:	2200      	movs	r2, #0
 8004916:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004918:	4b24      	ldr	r3, [pc, #144]	; (80049ac <MX_FSMC_Init+0xec>)
 800491a:	2200      	movs	r2, #0
 800491c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800491e:	4b23      	ldr	r3, [pc, #140]	; (80049ac <MX_FSMC_Init+0xec>)
 8004920:	2200      	movs	r2, #0
 8004922:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004924:	4b21      	ldr	r3, [pc, #132]	; (80049ac <MX_FSMC_Init+0xec>)
 8004926:	2200      	movs	r2, #0
 8004928:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800492a:	4b20      	ldr	r3, [pc, #128]	; (80049ac <MX_FSMC_Init+0xec>)
 800492c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004930:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004932:	4b1e      	ldr	r3, [pc, #120]	; (80049ac <MX_FSMC_Init+0xec>)
 8004934:	2200      	movs	r2, #0
 8004936:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8004938:	4b1c      	ldr	r3, [pc, #112]	; (80049ac <MX_FSMC_Init+0xec>)
 800493a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800493e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004940:	4b1a      	ldr	r3, [pc, #104]	; (80049ac <MX_FSMC_Init+0xec>)
 8004942:	2200      	movs	r2, #0
 8004944:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004946:	4b19      	ldr	r3, [pc, #100]	; (80049ac <MX_FSMC_Init+0xec>)
 8004948:	2200      	movs	r2, #0
 800494a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800494c:	4b17      	ldr	r3, [pc, #92]	; (80049ac <MX_FSMC_Init+0xec>)
 800494e:	2200      	movs	r2, #0
 8004950:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 8004952:	2302      	movs	r3, #2
 8004954:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8004956:	230f      	movs	r3, #15
 8004958:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 15;
 800495a:	230f      	movs	r3, #15
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 800495e:	230f      	movs	r3, #15
 8004960:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8004962:	2310      	movs	r3, #16
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8004966:	2311      	movs	r3, #17
 8004968:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800496a:	2300      	movs	r3, #0
 800496c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 0;
 800496e:	2300      	movs	r3, #0
 8004970:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8004972:	230f      	movs	r3, #15
 8004974:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 8004976:	2303      	movs	r3, #3
 8004978:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 800497a:	230f      	movs	r3, #15
 800497c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800497e:	2310      	movs	r3, #16
 8004980:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8004982:	2311      	movs	r3, #17
 8004984:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8004986:	2300      	movs	r3, #0
 8004988:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800498a:	463a      	mov	r2, r7
 800498c:	f107 031c 	add.w	r3, r7, #28
 8004990:	4619      	mov	r1, r3
 8004992:	4806      	ldr	r0, [pc, #24]	; (80049ac <MX_FSMC_Init+0xec>)
 8004994:	f001 fc26 	bl	80061e4 <HAL_SRAM_Init>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800499e:	f000 f98b 	bl	8004cb8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80049a2:	bf00      	nop
 80049a4:	3738      	adds	r7, #56	; 0x38
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	200002f0 	.word	0x200002f0
 80049b0:	a0000104 	.word	0xa0000104

080049b4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ba:	1d3b      	adds	r3, r7, #4
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	605a      	str	r2, [r3, #4]
 80049c2:	609a      	str	r2, [r3, #8]
 80049c4:	60da      	str	r2, [r3, #12]
 80049c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80049c8:	4b2c      	ldr	r3, [pc, #176]	; (8004a7c <HAL_FSMC_MspInit+0xc8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d151      	bne.n	8004a74 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80049d0:	4b2a      	ldr	r3, [pc, #168]	; (8004a7c <HAL_FSMC_MspInit+0xc8>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80049d6:	2300      	movs	r3, #0
 80049d8:	603b      	str	r3, [r7, #0]
 80049da:	4b29      	ldr	r3, [pc, #164]	; (8004a80 <HAL_FSMC_MspInit+0xcc>)
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	4a28      	ldr	r2, [pc, #160]	; (8004a80 <HAL_FSMC_MspInit+0xcc>)
 80049e0:	f043 0301 	orr.w	r3, r3, #1
 80049e4:	6393      	str	r3, [r2, #56]	; 0x38
 80049e6:	4b26      	ldr	r3, [pc, #152]	; (8004a80 <HAL_FSMC_MspInit+0xcc>)
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80049f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f8:	2302      	movs	r3, #2
 80049fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a00:	2303      	movs	r3, #3
 8004a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004a04:	230c      	movs	r3, #12
 8004a06:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a08:	1d3b      	adds	r3, r7, #4
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	481d      	ldr	r0, [pc, #116]	; (8004a84 <HAL_FSMC_MspInit+0xd0>)
 8004a0e:	f000 fda7 	bl	8005560 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004a12:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004a16:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a18:	2302      	movs	r3, #2
 8004a1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a20:	2303      	movs	r3, #3
 8004a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004a24:	230c      	movs	r3, #12
 8004a26:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a28:	1d3b      	adds	r3, r7, #4
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4816      	ldr	r0, [pc, #88]	; (8004a88 <HAL_FSMC_MspInit+0xd4>)
 8004a2e:	f000 fd97 	bl	8005560 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004a32:	f24c 7333 	movw	r3, #50995	; 0xc733
 8004a36:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a40:	2303      	movs	r3, #3
 8004a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004a44:	230c      	movs	r3, #12
 8004a46:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a48:	1d3b      	adds	r3, r7, #4
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	480f      	ldr	r0, [pc, #60]	; (8004a8c <HAL_FSMC_MspInit+0xd8>)
 8004a4e:	f000 fd87 	bl	8005560 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a58:	2302      	movs	r3, #2
 8004a5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a60:	2303      	movs	r3, #3
 8004a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004a64:	230c      	movs	r3, #12
 8004a66:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004a68:	1d3b      	adds	r3, r7, #4
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4808      	ldr	r0, [pc, #32]	; (8004a90 <HAL_FSMC_MspInit+0xdc>)
 8004a6e:	f000 fd77 	bl	8005560 <HAL_GPIO_Init>
 8004a72:	e000      	b.n	8004a76 <HAL_FSMC_MspInit+0xc2>
    return;
 8004a74:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	20000210 	.word	0x20000210
 8004a80:	40023800 	.word	0x40023800
 8004a84:	40021400 	.word	0x40021400
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	40020c00 	.word	0x40020c00
 8004a90:	40021800 	.word	0x40021800

08004a94 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8004a9c:	f7ff ff8a 	bl	80049b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08c      	sub	sp, #48	; 0x30
 8004aac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aae:	f107 031c 	add.w	r3, r7, #28
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	605a      	str	r2, [r3, #4]
 8004ab8:	609a      	str	r2, [r3, #8]
 8004aba:	60da      	str	r2, [r3, #12]
 8004abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	4b3c      	ldr	r3, [pc, #240]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	4a3b      	ldr	r2, [pc, #236]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004acc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ace:	4b39      	ldr	r3, [pc, #228]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	4b35      	ldr	r3, [pc, #212]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	4a34      	ldr	r2, [pc, #208]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004ae4:	f043 0320 	orr.w	r3, r3, #32
 8004ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8004aea:	4b32      	ldr	r3, [pc, #200]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004af6:	2300      	movs	r3, #0
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	4b2e      	ldr	r3, [pc, #184]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	4a2d      	ldr	r2, [pc, #180]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004b00:	f043 0310 	orr.w	r3, r3, #16
 8004b04:	6313      	str	r3, [r2, #48]	; 0x30
 8004b06:	4b2b      	ldr	r3, [pc, #172]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	4b27      	ldr	r3, [pc, #156]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	4a26      	ldr	r2, [pc, #152]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004b1c:	f043 0302 	orr.w	r3, r3, #2
 8004b20:	6313      	str	r3, [r2, #48]	; 0x30
 8004b22:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60bb      	str	r3, [r7, #8]
 8004b32:	4b20      	ldr	r3, [pc, #128]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	4a1f      	ldr	r2, [pc, #124]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004b38:	f043 0308 	orr.w	r3, r3, #8
 8004b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b3e:	4b1d      	ldr	r3, [pc, #116]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	60bb      	str	r3, [r7, #8]
 8004b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	607b      	str	r3, [r7, #4]
 8004b4e:	4b19      	ldr	r3, [pc, #100]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	4a18      	ldr	r2, [pc, #96]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004b54:	f043 0301 	orr.w	r3, r3, #1
 8004b58:	6313      	str	r3, [r2, #48]	; 0x30
 8004b5a:	4b16      	ldr	r3, [pc, #88]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	607b      	str	r3, [r7, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004b66:	2300      	movs	r3, #0
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	4a11      	ldr	r2, [pc, #68]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b74:	6313      	str	r3, [r2, #48]	; 0x30
 8004b76:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <MX_GPIO_Init+0x10c>)
 8004b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8004b82:	2200      	movs	r2, #0
 8004b84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b88:	480b      	ldr	r0, [pc, #44]	; (8004bb8 <MX_GPIO_Init+0x110>)
 8004b8a:	f000 fe9d 	bl	80058c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b94:	2301      	movs	r3, #1
 8004b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba0:	f107 031c 	add.w	r3, r7, #28
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4804      	ldr	r0, [pc, #16]	; (8004bb8 <MX_GPIO_Init+0x110>)
 8004ba8:	f000 fcda 	bl	8005560 <HAL_GPIO_Init>

}
 8004bac:	bf00      	nop
 8004bae:	3730      	adds	r7, #48	; 0x30
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	40020400 	.word	0x40020400

08004bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004bc0:	f000 fb26 	bl	8005210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004bc4:	f000 f80e 	bl	8004be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004bc8:	f7ff ff6e 	bl	8004aa8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8004bcc:	f000 fa84 	bl	80050d8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004bd0:	f000 f9b6 	bl	8004f40 <MX_TIM1_Init>
  MX_FSMC_Init();
 8004bd4:	f7ff fe74 	bl	80048c0 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 8004bd8:	f7ff fbf8 	bl	80043cc <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_main();
 8004bdc:	f7ff fc5c 	bl	8004498 <app_main>
 8004be0:	e7fc      	b.n	8004bdc <main+0x20>
	...

08004be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b094      	sub	sp, #80	; 0x50
 8004be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004bea:	f107 0320 	add.w	r3, r7, #32
 8004bee:	2230      	movs	r2, #48	; 0x30
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f002 fca8 	bl	8007548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004bf8:	f107 030c 	add.w	r3, r7, #12
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	605a      	str	r2, [r3, #4]
 8004c02:	609a      	str	r2, [r3, #8]
 8004c04:	60da      	str	r2, [r3, #12]
 8004c06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60bb      	str	r3, [r7, #8]
 8004c0c:	4b28      	ldr	r3, [pc, #160]	; (8004cb0 <SystemClock_Config+0xcc>)
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	4a27      	ldr	r2, [pc, #156]	; (8004cb0 <SystemClock_Config+0xcc>)
 8004c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c16:	6413      	str	r3, [r2, #64]	; 0x40
 8004c18:	4b25      	ldr	r3, [pc, #148]	; (8004cb0 <SystemClock_Config+0xcc>)
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c20:	60bb      	str	r3, [r7, #8]
 8004c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c24:	2300      	movs	r3, #0
 8004c26:	607b      	str	r3, [r7, #4]
 8004c28:	4b22      	ldr	r3, [pc, #136]	; (8004cb4 <SystemClock_Config+0xd0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a21      	ldr	r2, [pc, #132]	; (8004cb4 <SystemClock_Config+0xd0>)
 8004c2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	4b1f      	ldr	r3, [pc, #124]	; (8004cb4 <SystemClock_Config+0xd0>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c3c:	607b      	str	r3, [r7, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004c40:	2301      	movs	r3, #1
 8004c42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004c54:	2304      	movs	r3, #4
 8004c56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004c58:	23a8      	movs	r3, #168	; 0xa8
 8004c5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004c60:	2304      	movs	r3, #4
 8004c62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c64:	f107 0320 	add.w	r3, r7, #32
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fe47 	bl	80058fc <HAL_RCC_OscConfig>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004c74:	f000 f820 	bl	8004cb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c78:	230f      	movs	r3, #15
 8004c7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004c84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004c88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004c90:	f107 030c 	add.w	r3, r7, #12
 8004c94:	2105      	movs	r1, #5
 8004c96:	4618      	mov	r0, r3
 8004c98:	f001 f8a8 	bl	8005dec <HAL_RCC_ClockConfig>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004ca2:	f000 f809 	bl	8004cb8 <Error_Handler>
  }
}
 8004ca6:	bf00      	nop
 8004ca8:	3750      	adds	r7, #80	; 0x50
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	40007000 	.word	0x40007000

08004cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004cbc:	b672      	cpsid	i
}
 8004cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004cc0:	e7fe      	b.n	8004cc0 <Error_Handler+0x8>
	...

08004cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cca:	2300      	movs	r3, #0
 8004ccc:	607b      	str	r3, [r7, #4]
 8004cce:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <HAL_MspInit+0x4c>)
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	4a0f      	ldr	r2, [pc, #60]	; (8004d10 <HAL_MspInit+0x4c>)
 8004cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8004cda:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <HAL_MspInit+0x4c>)
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ce2:	607b      	str	r3, [r7, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	603b      	str	r3, [r7, #0]
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <HAL_MspInit+0x4c>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	4a08      	ldr	r2, [pc, #32]	; (8004d10 <HAL_MspInit+0x4c>)
 8004cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cf6:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <HAL_MspInit+0x4c>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40023800 	.word	0x40023800

08004d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d18:	e7fe      	b.n	8004d18 <NMI_Handler+0x4>

08004d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d1e:	e7fe      	b.n	8004d1e <HardFault_Handler+0x4>

08004d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d24:	e7fe      	b.n	8004d24 <MemManage_Handler+0x4>

08004d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d26:	b480      	push	{r7}
 8004d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d2a:	e7fe      	b.n	8004d2a <BusFault_Handler+0x4>

08004d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d30:	e7fe      	b.n	8004d30 <UsageFault_Handler+0x4>

08004d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d32:	b480      	push	{r7}
 8004d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d36:	bf00      	nop
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d44:	bf00      	nop
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d52:	bf00      	nop
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d60:	f000 faa8 	bl	80052b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d64:	bf00      	nop
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004d6c:	4802      	ldr	r0, [pc, #8]	; (8004d78 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004d6e:	f001 fb25 	bl	80063bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004d72:	bf00      	nop
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000340 	.word	0x20000340

08004d7c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004d80:	4802      	ldr	r0, [pc, #8]	; (8004d8c <TIM1_CC_IRQHandler+0x10>)
 8004d82:	f001 fb1b 	bl	80063bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004d86:	bf00      	nop
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000340 	.word	0x20000340

08004d90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
	return 1;
 8004d94:	2301      	movs	r3, #1
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <_kill>:

int _kill(int pid, int sig)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004daa:	f002 fba3 	bl	80074f4 <__errno>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2216      	movs	r2, #22
 8004db2:	601a      	str	r2, [r3, #0]
	return -1;
 8004db4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <_exit>:

void _exit (int status)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff ffe7 	bl	8004da0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004dd2:	e7fe      	b.n	8004dd2 <_exit+0x12>

08004dd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	e00a      	b.n	8004dfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004de6:	f3af 8000 	nop.w
 8004dea:	4601      	mov	r1, r0
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	60ba      	str	r2, [r7, #8]
 8004df2:	b2ca      	uxtb	r2, r1
 8004df4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	dbf0      	blt.n	8004de6 <_read+0x12>
	}

return len;
 8004e04:	687b      	ldr	r3, [r7, #4]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b086      	sub	sp, #24
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	60f8      	str	r0, [r7, #12]
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	e009      	b.n	8004e34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	60ba      	str	r2, [r7, #8]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff fd31 	bl	8004890 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	3301      	adds	r3, #1
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	dbf1      	blt.n	8004e20 <_write+0x12>
	}
	return len;
 8004e3c:	687b      	ldr	r3, [r7, #4]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <_close>:

int _close(int file)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
	return -1;
 8004e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e6e:	605a      	str	r2, [r3, #4]
	return 0;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <_isatty>:

int _isatty(int file)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
	return 1;
 8004e86:	2301      	movs	r3, #1
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
	return 0;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
	...

08004eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004eb8:	4a14      	ldr	r2, [pc, #80]	; (8004f0c <_sbrk+0x5c>)
 8004eba:	4b15      	ldr	r3, [pc, #84]	; (8004f10 <_sbrk+0x60>)
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ec4:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <_sbrk+0x64>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d102      	bne.n	8004ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ecc:	4b11      	ldr	r3, [pc, #68]	; (8004f14 <_sbrk+0x64>)
 8004ece:	4a12      	ldr	r2, [pc, #72]	; (8004f18 <_sbrk+0x68>)
 8004ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ed2:	4b10      	ldr	r3, [pc, #64]	; (8004f14 <_sbrk+0x64>)
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4413      	add	r3, r2
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d207      	bcs.n	8004ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ee0:	f002 fb08 	bl	80074f4 <__errno>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	220c      	movs	r2, #12
 8004ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004eea:	f04f 33ff 	mov.w	r3, #4294967295
 8004eee:	e009      	b.n	8004f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ef0:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <_sbrk+0x64>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ef6:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <_sbrk+0x64>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4413      	add	r3, r2
 8004efe:	4a05      	ldr	r2, [pc, #20]	; (8004f14 <_sbrk+0x64>)
 8004f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f02:	68fb      	ldr	r3, [r7, #12]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	20020000 	.word	0x20020000
 8004f10:	00000400 	.word	0x00000400
 8004f14:	20000214 	.word	0x20000214
 8004f18:	200003e0 	.word	0x200003e0

08004f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <SystemInit+0x20>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	4a05      	ldr	r2, [pc, #20]	; (8004f3c <SystemInit+0x20>)
 8004f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f30:	bf00      	nop
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	e000ed00 	.word	0xe000ed00

08004f40 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08a      	sub	sp, #40	; 0x28
 8004f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f46:	f107 0318 	add.w	r3, r7, #24
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	605a      	str	r2, [r3, #4]
 8004f50:	609a      	str	r2, [r3, #8]
 8004f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f54:	f107 0310 	add.w	r3, r7, #16
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004f5e:	463b      	mov	r3, r7
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	605a      	str	r2, [r3, #4]
 8004f66:	609a      	str	r2, [r3, #8]
 8004f68:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004f6a:	4b2d      	ldr	r3, [pc, #180]	; (8005020 <MX_TIM1_Init+0xe0>)
 8004f6c:	4a2d      	ldr	r2, [pc, #180]	; (8005024 <MX_TIM1_Init+0xe4>)
 8004f6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8004f70:	4b2b      	ldr	r3, [pc, #172]	; (8005020 <MX_TIM1_Init+0xe0>)
 8004f72:	22a7      	movs	r2, #167	; 0xa7
 8004f74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f76:	4b2a      	ldr	r3, [pc, #168]	; (8005020 <MX_TIM1_Init+0xe0>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8004f7c:	4b28      	ldr	r3, [pc, #160]	; (8005020 <MX_TIM1_Init+0xe0>)
 8004f7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f84:	4b26      	ldr	r3, [pc, #152]	; (8005020 <MX_TIM1_Init+0xe0>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004f8a:	4b25      	ldr	r3, [pc, #148]	; (8005020 <MX_TIM1_Init+0xe0>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004f90:	4b23      	ldr	r3, [pc, #140]	; (8005020 <MX_TIM1_Init+0xe0>)
 8004f92:	2280      	movs	r2, #128	; 0x80
 8004f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004f96:	4822      	ldr	r0, [pc, #136]	; (8005020 <MX_TIM1_Init+0xe0>)
 8004f98:	f001 f968 	bl	800626c <HAL_TIM_Base_Init>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8004fa2:	f7ff fe89 	bl	8004cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004faa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004fac:	f107 0318 	add.w	r3, r7, #24
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	481b      	ldr	r0, [pc, #108]	; (8005020 <MX_TIM1_Init+0xe0>)
 8004fb4:	f001 fb9e 	bl	80066f4 <HAL_TIM_ConfigClockSource>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8004fbe:	f7ff fe7b 	bl	8004cb8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8004fc2:	4817      	ldr	r0, [pc, #92]	; (8005020 <MX_TIM1_Init+0xe0>)
 8004fc4:	f001 f9a1 	bl	800630a <HAL_TIM_IC_Init>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8004fce:	f7ff fe73 	bl	8004cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004fda:	f107 0310 	add.w	r3, r7, #16
 8004fde:	4619      	mov	r1, r3
 8004fe0:	480f      	ldr	r0, [pc, #60]	; (8005020 <MX_TIM1_Init+0xe0>)
 8004fe2:	f001 ff11 	bl	8006e08 <HAL_TIMEx_MasterConfigSynchronization>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8004fec:	f7ff fe64 	bl	8004cb8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0x03;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005000:	463b      	mov	r3, r7
 8005002:	2200      	movs	r2, #0
 8005004:	4619      	mov	r1, r3
 8005006:	4806      	ldr	r0, [pc, #24]	; (8005020 <MX_TIM1_Init+0xe0>)
 8005008:	f001 fae0 	bl	80065cc <HAL_TIM_IC_ConfigChannel>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8005012:	f7ff fe51 	bl	8004cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005016:	bf00      	nop
 8005018:	3728      	adds	r7, #40	; 0x28
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000340 	.word	0x20000340
 8005024:	40010000 	.word	0x40010000

08005028 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b08a      	sub	sp, #40	; 0x28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005030:	f107 0314 	add.w	r3, r7, #20
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	605a      	str	r2, [r3, #4]
 800503a:	609a      	str	r2, [r3, #8]
 800503c:	60da      	str	r2, [r3, #12]
 800503e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a21      	ldr	r2, [pc, #132]	; (80050cc <HAL_TIM_Base_MspInit+0xa4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d13c      	bne.n	80050c4 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800504a:	2300      	movs	r3, #0
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	4b20      	ldr	r3, [pc, #128]	; (80050d0 <HAL_TIM_Base_MspInit+0xa8>)
 8005050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005052:	4a1f      	ldr	r2, [pc, #124]	; (80050d0 <HAL_TIM_Base_MspInit+0xa8>)
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	6453      	str	r3, [r2, #68]	; 0x44
 800505a:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <HAL_TIM_Base_MspInit+0xa8>)
 800505c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	4b19      	ldr	r3, [pc, #100]	; (80050d0 <HAL_TIM_Base_MspInit+0xa8>)
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	4a18      	ldr	r2, [pc, #96]	; (80050d0 <HAL_TIM_Base_MspInit+0xa8>)
 8005070:	f043 0301 	orr.w	r3, r3, #1
 8005074:	6313      	str	r3, [r2, #48]	; 0x30
 8005076:	4b16      	ldr	r3, [pc, #88]	; (80050d0 <HAL_TIM_Base_MspInit+0xa8>)
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IRMP_Pin;
 8005082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005088:	2302      	movs	r3, #2
 800508a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800508c:	2301      	movs	r3, #1
 800508e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005090:	2302      	movs	r3, #2
 8005092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005094:	2301      	movs	r3, #1
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IRMP_GPIO_Port, &GPIO_InitStruct);
 8005098:	f107 0314 	add.w	r3, r7, #20
 800509c:	4619      	mov	r1, r3
 800509e:	480d      	ldr	r0, [pc, #52]	; (80050d4 <HAL_TIM_Base_MspInit+0xac>)
 80050a0:	f000 fa5e 	bl	8005560 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80050a4:	2200      	movs	r2, #0
 80050a6:	2101      	movs	r1, #1
 80050a8:	2019      	movs	r0, #25
 80050aa:	f000 fa22 	bl	80054f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80050ae:	2019      	movs	r0, #25
 80050b0:	f000 fa3b 	bl	800552a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80050b4:	2200      	movs	r2, #0
 80050b6:	2101      	movs	r1, #1
 80050b8:	201b      	movs	r0, #27
 80050ba:	f000 fa1a 	bl	80054f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80050be:	201b      	movs	r0, #27
 80050c0:	f000 fa33 	bl	800552a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80050c4:	bf00      	nop
 80050c6:	3728      	adds	r7, #40	; 0x28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40010000 	.word	0x40010000
 80050d0:	40023800 	.word	0x40023800
 80050d4:	40020000 	.word	0x40020000

080050d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80050dc:	4b11      	ldr	r3, [pc, #68]	; (8005124 <MX_USART1_UART_Init+0x4c>)
 80050de:	4a12      	ldr	r2, [pc, #72]	; (8005128 <MX_USART1_UART_Init+0x50>)
 80050e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80050e2:	4b10      	ldr	r3, [pc, #64]	; (8005124 <MX_USART1_UART_Init+0x4c>)
 80050e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80050e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80050ea:	4b0e      	ldr	r3, [pc, #56]	; (8005124 <MX_USART1_UART_Init+0x4c>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80050f0:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <MX_USART1_UART_Init+0x4c>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80050f6:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <MX_USART1_UART_Init+0x4c>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80050fc:	4b09      	ldr	r3, [pc, #36]	; (8005124 <MX_USART1_UART_Init+0x4c>)
 80050fe:	220c      	movs	r2, #12
 8005100:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005102:	4b08      	ldr	r3, [pc, #32]	; (8005124 <MX_USART1_UART_Init+0x4c>)
 8005104:	2200      	movs	r2, #0
 8005106:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005108:	4b06      	ldr	r3, [pc, #24]	; (8005124 <MX_USART1_UART_Init+0x4c>)
 800510a:	2200      	movs	r2, #0
 800510c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800510e:	4805      	ldr	r0, [pc, #20]	; (8005124 <MX_USART1_UART_Init+0x4c>)
 8005110:	f001 ff0a 	bl	8006f28 <HAL_UART_Init>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800511a:	f7ff fdcd 	bl	8004cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800511e:	bf00      	nop
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000388 	.word	0x20000388
 8005128:	40011000 	.word	0x40011000

0800512c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08a      	sub	sp, #40	; 0x28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005134:	f107 0314 	add.w	r3, r7, #20
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	605a      	str	r2, [r3, #4]
 800513e:	609a      	str	r2, [r3, #8]
 8005140:	60da      	str	r2, [r3, #12]
 8005142:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a19      	ldr	r2, [pc, #100]	; (80051b0 <HAL_UART_MspInit+0x84>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d12c      	bne.n	80051a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800514e:	2300      	movs	r3, #0
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	4b18      	ldr	r3, [pc, #96]	; (80051b4 <HAL_UART_MspInit+0x88>)
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	4a17      	ldr	r2, [pc, #92]	; (80051b4 <HAL_UART_MspInit+0x88>)
 8005158:	f043 0310 	orr.w	r3, r3, #16
 800515c:	6453      	str	r3, [r2, #68]	; 0x44
 800515e:	4b15      	ldr	r3, [pc, #84]	; (80051b4 <HAL_UART_MspInit+0x88>)
 8005160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005162:	f003 0310 	and.w	r3, r3, #16
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <HAL_UART_MspInit+0x88>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	4a10      	ldr	r2, [pc, #64]	; (80051b4 <HAL_UART_MspInit+0x88>)
 8005174:	f043 0301 	orr.w	r3, r3, #1
 8005178:	6313      	str	r3, [r2, #48]	; 0x30
 800517a:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <HAL_UART_MspInit+0x88>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005186:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800518a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518c:	2302      	movs	r3, #2
 800518e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005194:	2303      	movs	r3, #3
 8005196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005198:	2307      	movs	r3, #7
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800519c:	f107 0314 	add.w	r3, r7, #20
 80051a0:	4619      	mov	r1, r3
 80051a2:	4805      	ldr	r0, [pc, #20]	; (80051b8 <HAL_UART_MspInit+0x8c>)
 80051a4:	f000 f9dc 	bl	8005560 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80051a8:	bf00      	nop
 80051aa:	3728      	adds	r7, #40	; 0x28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40011000 	.word	0x40011000
 80051b4:	40023800 	.word	0x40023800
 80051b8:	40020000 	.word	0x40020000

080051bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80051bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80051c0:	480d      	ldr	r0, [pc, #52]	; (80051f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80051c2:	490e      	ldr	r1, [pc, #56]	; (80051fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80051c4:	4a0e      	ldr	r2, [pc, #56]	; (8005200 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80051c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051c8:	e002      	b.n	80051d0 <LoopCopyDataInit>

080051ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051ce:	3304      	adds	r3, #4

080051d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051d4:	d3f9      	bcc.n	80051ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051d6:	4a0b      	ldr	r2, [pc, #44]	; (8005204 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80051d8:	4c0b      	ldr	r4, [pc, #44]	; (8005208 <LoopFillZerobss+0x26>)
  movs r3, #0
 80051da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051dc:	e001      	b.n	80051e2 <LoopFillZerobss>

080051de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051e0:	3204      	adds	r2, #4

080051e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051e4:	d3fb      	bcc.n	80051de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80051e6:	f7ff fe99 	bl	8004f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80051ea:	f002 f989 	bl	8007500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80051ee:	f7ff fce5 	bl	8004bbc <main>
  bx  lr    
 80051f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80051f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80051f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051fc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8005200:	0801714c 	.word	0x0801714c
  ldr r2, =_sbss
 8005204:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8005208:	200003e0 	.word	0x200003e0

0800520c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800520c:	e7fe      	b.n	800520c <ADC_IRQHandler>
	...

08005210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005214:	4b0e      	ldr	r3, [pc, #56]	; (8005250 <HAL_Init+0x40>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a0d      	ldr	r2, [pc, #52]	; (8005250 <HAL_Init+0x40>)
 800521a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800521e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_Init+0x40>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a0a      	ldr	r2, [pc, #40]	; (8005250 <HAL_Init+0x40>)
 8005226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800522a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800522c:	4b08      	ldr	r3, [pc, #32]	; (8005250 <HAL_Init+0x40>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a07      	ldr	r2, [pc, #28]	; (8005250 <HAL_Init+0x40>)
 8005232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005238:	2003      	movs	r0, #3
 800523a:	f000 f94f 	bl	80054dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800523e:	2000      	movs	r0, #0
 8005240:	f000 f808 	bl	8005254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005244:	f7ff fd3e 	bl	8004cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40023c00 	.word	0x40023c00

08005254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800525c:	4b12      	ldr	r3, [pc, #72]	; (80052a8 <HAL_InitTick+0x54>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	4b12      	ldr	r3, [pc, #72]	; (80052ac <HAL_InitTick+0x58>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	4619      	mov	r1, r3
 8005266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800526a:	fbb3 f3f1 	udiv	r3, r3, r1
 800526e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005272:	4618      	mov	r0, r3
 8005274:	f000 f967 	bl	8005546 <HAL_SYSTICK_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e00e      	b.n	80052a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b0f      	cmp	r3, #15
 8005286:	d80a      	bhi.n	800529e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005288:	2200      	movs	r2, #0
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	f04f 30ff 	mov.w	r0, #4294967295
 8005290:	f000 f92f 	bl	80054f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005294:	4a06      	ldr	r2, [pc, #24]	; (80052b0 <HAL_InitTick+0x5c>)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	e000      	b.n	80052a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	20000008 	.word	0x20000008
 80052ac:	20000010 	.word	0x20000010
 80052b0:	2000000c 	.word	0x2000000c

080052b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052b8:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <HAL_IncTick+0x20>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	461a      	mov	r2, r3
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <HAL_IncTick+0x24>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4413      	add	r3, r2
 80052c4:	4a04      	ldr	r2, [pc, #16]	; (80052d8 <HAL_IncTick+0x24>)
 80052c6:	6013      	str	r3, [r2, #0]
}
 80052c8:	bf00      	nop
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000010 	.word	0x20000010
 80052d8:	200003cc 	.word	0x200003cc

080052dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  return uwTick;
 80052e0:	4b03      	ldr	r3, [pc, #12]	; (80052f0 <HAL_GetTick+0x14>)
 80052e2:	681b      	ldr	r3, [r3, #0]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	200003cc 	.word	0x200003cc

080052f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052fc:	f7ff ffee 	bl	80052dc <HAL_GetTick>
 8005300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530c:	d005      	beq.n	800531a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800530e:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <HAL_Delay+0x44>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	461a      	mov	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800531a:	bf00      	nop
 800531c:	f7ff ffde 	bl	80052dc <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	429a      	cmp	r2, r3
 800532a:	d8f7      	bhi.n	800531c <HAL_Delay+0x28>
  {
  }
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20000010 	.word	0x20000010

0800533c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800534c:	4b0c      	ldr	r3, [pc, #48]	; (8005380 <__NVIC_SetPriorityGrouping+0x44>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005358:	4013      	ands	r3, r2
 800535a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800536c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800536e:	4a04      	ldr	r2, [pc, #16]	; (8005380 <__NVIC_SetPriorityGrouping+0x44>)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	60d3      	str	r3, [r2, #12]
}
 8005374:	bf00      	nop
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	e000ed00 	.word	0xe000ed00

08005384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005388:	4b04      	ldr	r3, [pc, #16]	; (800539c <__NVIC_GetPriorityGrouping+0x18>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	0a1b      	lsrs	r3, r3, #8
 800538e:	f003 0307 	and.w	r3, r3, #7
}
 8005392:	4618      	mov	r0, r3
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	e000ed00 	.word	0xe000ed00

080053a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	db0b      	blt.n	80053ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053b2:	79fb      	ldrb	r3, [r7, #7]
 80053b4:	f003 021f 	and.w	r2, r3, #31
 80053b8:	4907      	ldr	r1, [pc, #28]	; (80053d8 <__NVIC_EnableIRQ+0x38>)
 80053ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053be:	095b      	lsrs	r3, r3, #5
 80053c0:	2001      	movs	r0, #1
 80053c2:	fa00 f202 	lsl.w	r2, r0, r2
 80053c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	e000e100 	.word	0xe000e100

080053dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	6039      	str	r1, [r7, #0]
 80053e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	db0a      	blt.n	8005406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	490c      	ldr	r1, [pc, #48]	; (8005428 <__NVIC_SetPriority+0x4c>)
 80053f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fa:	0112      	lsls	r2, r2, #4
 80053fc:	b2d2      	uxtb	r2, r2
 80053fe:	440b      	add	r3, r1
 8005400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005404:	e00a      	b.n	800541c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	b2da      	uxtb	r2, r3
 800540a:	4908      	ldr	r1, [pc, #32]	; (800542c <__NVIC_SetPriority+0x50>)
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	3b04      	subs	r3, #4
 8005414:	0112      	lsls	r2, r2, #4
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	440b      	add	r3, r1
 800541a:	761a      	strb	r2, [r3, #24]
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	e000e100 	.word	0xe000e100
 800542c:	e000ed00 	.word	0xe000ed00

08005430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005430:	b480      	push	{r7}
 8005432:	b089      	sub	sp, #36	; 0x24
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f1c3 0307 	rsb	r3, r3, #7
 800544a:	2b04      	cmp	r3, #4
 800544c:	bf28      	it	cs
 800544e:	2304      	movcs	r3, #4
 8005450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	3304      	adds	r3, #4
 8005456:	2b06      	cmp	r3, #6
 8005458:	d902      	bls.n	8005460 <NVIC_EncodePriority+0x30>
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	3b03      	subs	r3, #3
 800545e:	e000      	b.n	8005462 <NVIC_EncodePriority+0x32>
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005464:	f04f 32ff 	mov.w	r2, #4294967295
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	43da      	mvns	r2, r3
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	401a      	ands	r2, r3
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005478:	f04f 31ff 	mov.w	r1, #4294967295
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	fa01 f303 	lsl.w	r3, r1, r3
 8005482:	43d9      	mvns	r1, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005488:	4313      	orrs	r3, r2
         );
}
 800548a:	4618      	mov	r0, r3
 800548c:	3724      	adds	r7, #36	; 0x24
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
	...

08005498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054a8:	d301      	bcc.n	80054ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054aa:	2301      	movs	r3, #1
 80054ac:	e00f      	b.n	80054ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054ae:	4a0a      	ldr	r2, [pc, #40]	; (80054d8 <SysTick_Config+0x40>)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054b6:	210f      	movs	r1, #15
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295
 80054bc:	f7ff ff8e 	bl	80053dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <SysTick_Config+0x40>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054c6:	4b04      	ldr	r3, [pc, #16]	; (80054d8 <SysTick_Config+0x40>)
 80054c8:	2207      	movs	r2, #7
 80054ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	e000e010 	.word	0xe000e010

080054dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff ff29 	bl	800533c <__NVIC_SetPriorityGrouping>
}
 80054ea:	bf00      	nop
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b086      	sub	sp, #24
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	4603      	mov	r3, r0
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	607a      	str	r2, [r7, #4]
 80054fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005504:	f7ff ff3e 	bl	8005384 <__NVIC_GetPriorityGrouping>
 8005508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	68b9      	ldr	r1, [r7, #8]
 800550e:	6978      	ldr	r0, [r7, #20]
 8005510:	f7ff ff8e 	bl	8005430 <NVIC_EncodePriority>
 8005514:	4602      	mov	r2, r0
 8005516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800551a:	4611      	mov	r1, r2
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff ff5d 	bl	80053dc <__NVIC_SetPriority>
}
 8005522:	bf00      	nop
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b082      	sub	sp, #8
 800552e:	af00      	add	r7, sp, #0
 8005530:	4603      	mov	r3, r0
 8005532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff ff31 	bl	80053a0 <__NVIC_EnableIRQ>
}
 800553e:	bf00      	nop
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff ffa2 	bl	8005498 <SysTick_Config>
 8005554:	4603      	mov	r3, r0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005560:	b480      	push	{r7}
 8005562:	b089      	sub	sp, #36	; 0x24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800556e:	2300      	movs	r3, #0
 8005570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005572:	2300      	movs	r3, #0
 8005574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	e16b      	b.n	8005854 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800557c:	2201      	movs	r2, #1
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4013      	ands	r3, r2
 800558e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	429a      	cmp	r2, r3
 8005596:	f040 815a 	bne.w	800584e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d005      	beq.n	80055b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d130      	bne.n	8005614 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	2203      	movs	r2, #3
 80055be:	fa02 f303 	lsl.w	r3, r2, r3
 80055c2:	43db      	mvns	r3, r3
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	4013      	ands	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	4313      	orrs	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055e8:	2201      	movs	r2, #1
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	43db      	mvns	r3, r3
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	4013      	ands	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	091b      	lsrs	r3, r3, #4
 80055fe:	f003 0201 	and.w	r2, r3, #1
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	4313      	orrs	r3, r2
 800560c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f003 0303 	and.w	r3, r3, #3
 800561c:	2b03      	cmp	r3, #3
 800561e:	d017      	beq.n	8005650 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	2203      	movs	r2, #3
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	43db      	mvns	r3, r3
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	4013      	ands	r3, r2
 8005636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4313      	orrs	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d123      	bne.n	80056a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	08da      	lsrs	r2, r3, #3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3208      	adds	r2, #8
 8005664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005668:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	220f      	movs	r2, #15
 8005674:	fa02 f303 	lsl.w	r3, r2, r3
 8005678:	43db      	mvns	r3, r3
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	4013      	ands	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	4313      	orrs	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	08da      	lsrs	r2, r3, #3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3208      	adds	r2, #8
 800569e:	69b9      	ldr	r1, [r7, #24]
 80056a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	2203      	movs	r2, #3
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	43db      	mvns	r3, r3
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	4013      	ands	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f003 0203 	and.w	r2, r3, #3
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 80b4 	beq.w	800584e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	4b60      	ldr	r3, [pc, #384]	; (800586c <HAL_GPIO_Init+0x30c>)
 80056ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ee:	4a5f      	ldr	r2, [pc, #380]	; (800586c <HAL_GPIO_Init+0x30c>)
 80056f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056f4:	6453      	str	r3, [r2, #68]	; 0x44
 80056f6:	4b5d      	ldr	r3, [pc, #372]	; (800586c <HAL_GPIO_Init+0x30c>)
 80056f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005702:	4a5b      	ldr	r2, [pc, #364]	; (8005870 <HAL_GPIO_Init+0x310>)
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	089b      	lsrs	r3, r3, #2
 8005708:	3302      	adds	r3, #2
 800570a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800570e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	220f      	movs	r2, #15
 800571a:	fa02 f303 	lsl.w	r3, r2, r3
 800571e:	43db      	mvns	r3, r3
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	4013      	ands	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a52      	ldr	r2, [pc, #328]	; (8005874 <HAL_GPIO_Init+0x314>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d02b      	beq.n	8005786 <HAL_GPIO_Init+0x226>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a51      	ldr	r2, [pc, #324]	; (8005878 <HAL_GPIO_Init+0x318>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d025      	beq.n	8005782 <HAL_GPIO_Init+0x222>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a50      	ldr	r2, [pc, #320]	; (800587c <HAL_GPIO_Init+0x31c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d01f      	beq.n	800577e <HAL_GPIO_Init+0x21e>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a4f      	ldr	r2, [pc, #316]	; (8005880 <HAL_GPIO_Init+0x320>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d019      	beq.n	800577a <HAL_GPIO_Init+0x21a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a4e      	ldr	r2, [pc, #312]	; (8005884 <HAL_GPIO_Init+0x324>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <HAL_GPIO_Init+0x216>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a4d      	ldr	r2, [pc, #308]	; (8005888 <HAL_GPIO_Init+0x328>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00d      	beq.n	8005772 <HAL_GPIO_Init+0x212>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a4c      	ldr	r2, [pc, #304]	; (800588c <HAL_GPIO_Init+0x32c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d007      	beq.n	800576e <HAL_GPIO_Init+0x20e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a4b      	ldr	r2, [pc, #300]	; (8005890 <HAL_GPIO_Init+0x330>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d101      	bne.n	800576a <HAL_GPIO_Init+0x20a>
 8005766:	2307      	movs	r3, #7
 8005768:	e00e      	b.n	8005788 <HAL_GPIO_Init+0x228>
 800576a:	2308      	movs	r3, #8
 800576c:	e00c      	b.n	8005788 <HAL_GPIO_Init+0x228>
 800576e:	2306      	movs	r3, #6
 8005770:	e00a      	b.n	8005788 <HAL_GPIO_Init+0x228>
 8005772:	2305      	movs	r3, #5
 8005774:	e008      	b.n	8005788 <HAL_GPIO_Init+0x228>
 8005776:	2304      	movs	r3, #4
 8005778:	e006      	b.n	8005788 <HAL_GPIO_Init+0x228>
 800577a:	2303      	movs	r3, #3
 800577c:	e004      	b.n	8005788 <HAL_GPIO_Init+0x228>
 800577e:	2302      	movs	r3, #2
 8005780:	e002      	b.n	8005788 <HAL_GPIO_Init+0x228>
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <HAL_GPIO_Init+0x228>
 8005786:	2300      	movs	r3, #0
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	f002 0203 	and.w	r2, r2, #3
 800578e:	0092      	lsls	r2, r2, #2
 8005790:	4093      	lsls	r3, r2
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4313      	orrs	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005798:	4935      	ldr	r1, [pc, #212]	; (8005870 <HAL_GPIO_Init+0x310>)
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	089b      	lsrs	r3, r3, #2
 800579e:	3302      	adds	r3, #2
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057a6:	4b3b      	ldr	r3, [pc, #236]	; (8005894 <HAL_GPIO_Init+0x334>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	43db      	mvns	r3, r3
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	4013      	ands	r3, r2
 80057b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057ca:	4a32      	ldr	r2, [pc, #200]	; (8005894 <HAL_GPIO_Init+0x334>)
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80057d0:	4b30      	ldr	r3, [pc, #192]	; (8005894 <HAL_GPIO_Init+0x334>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	43db      	mvns	r3, r3
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	4013      	ands	r3, r2
 80057de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057f4:	4a27      	ldr	r2, [pc, #156]	; (8005894 <HAL_GPIO_Init+0x334>)
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057fa:	4b26      	ldr	r3, [pc, #152]	; (8005894 <HAL_GPIO_Init+0x334>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	43db      	mvns	r3, r3
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	4013      	ands	r3, r2
 8005808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800581e:	4a1d      	ldr	r2, [pc, #116]	; (8005894 <HAL_GPIO_Init+0x334>)
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005824:	4b1b      	ldr	r3, [pc, #108]	; (8005894 <HAL_GPIO_Init+0x334>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	43db      	mvns	r3, r3
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	4013      	ands	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005848:	4a12      	ldr	r2, [pc, #72]	; (8005894 <HAL_GPIO_Init+0x334>)
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	3301      	adds	r3, #1
 8005852:	61fb      	str	r3, [r7, #28]
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	2b0f      	cmp	r3, #15
 8005858:	f67f ae90 	bls.w	800557c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800585c:	bf00      	nop
 800585e:	bf00      	nop
 8005860:	3724      	adds	r7, #36	; 0x24
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40023800 	.word	0x40023800
 8005870:	40013800 	.word	0x40013800
 8005874:	40020000 	.word	0x40020000
 8005878:	40020400 	.word	0x40020400
 800587c:	40020800 	.word	0x40020800
 8005880:	40020c00 	.word	0x40020c00
 8005884:	40021000 	.word	0x40021000
 8005888:	40021400 	.word	0x40021400
 800588c:	40021800 	.word	0x40021800
 8005890:	40021c00 	.word	0x40021c00
 8005894:	40013c00 	.word	0x40013c00

08005898 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	887b      	ldrh	r3, [r7, #2]
 80058aa:	4013      	ands	r3, r2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058b0:	2301      	movs	r3, #1
 80058b2:	73fb      	strb	r3, [r7, #15]
 80058b4:	e001      	b.n	80058ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	807b      	strh	r3, [r7, #2]
 80058d4:	4613      	mov	r3, r2
 80058d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058d8:	787b      	ldrb	r3, [r7, #1]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058de:	887a      	ldrh	r2, [r7, #2]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058e4:	e003      	b.n	80058ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058e6:	887b      	ldrh	r3, [r7, #2]
 80058e8:	041a      	lsls	r2, r3, #16
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	619a      	str	r2, [r3, #24]
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e264      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d075      	beq.n	8005a06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800591a:	4ba3      	ldr	r3, [pc, #652]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 030c 	and.w	r3, r3, #12
 8005922:	2b04      	cmp	r3, #4
 8005924:	d00c      	beq.n	8005940 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005926:	4ba0      	ldr	r3, [pc, #640]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800592e:	2b08      	cmp	r3, #8
 8005930:	d112      	bne.n	8005958 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005932:	4b9d      	ldr	r3, [pc, #628]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800593a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800593e:	d10b      	bne.n	8005958 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005940:	4b99      	ldr	r3, [pc, #612]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d05b      	beq.n	8005a04 <HAL_RCC_OscConfig+0x108>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d157      	bne.n	8005a04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e23f      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005960:	d106      	bne.n	8005970 <HAL_RCC_OscConfig+0x74>
 8005962:	4b91      	ldr	r3, [pc, #580]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a90      	ldr	r2, [pc, #576]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	e01d      	b.n	80059ac <HAL_RCC_OscConfig+0xb0>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005978:	d10c      	bne.n	8005994 <HAL_RCC_OscConfig+0x98>
 800597a:	4b8b      	ldr	r3, [pc, #556]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a8a      	ldr	r2, [pc, #552]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	4b88      	ldr	r3, [pc, #544]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a87      	ldr	r2, [pc, #540]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 800598c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	e00b      	b.n	80059ac <HAL_RCC_OscConfig+0xb0>
 8005994:	4b84      	ldr	r3, [pc, #528]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a83      	ldr	r2, [pc, #524]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 800599a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	4b81      	ldr	r3, [pc, #516]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a80      	ldr	r2, [pc, #512]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 80059a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d013      	beq.n	80059dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b4:	f7ff fc92 	bl	80052dc <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059bc:	f7ff fc8e 	bl	80052dc <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b64      	cmp	r3, #100	; 0x64
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e204      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ce:	4b76      	ldr	r3, [pc, #472]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0f0      	beq.n	80059bc <HAL_RCC_OscConfig+0xc0>
 80059da:	e014      	b.n	8005a06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059dc:	f7ff fc7e 	bl	80052dc <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059e4:	f7ff fc7a 	bl	80052dc <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b64      	cmp	r3, #100	; 0x64
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e1f0      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059f6:	4b6c      	ldr	r3, [pc, #432]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1f0      	bne.n	80059e4 <HAL_RCC_OscConfig+0xe8>
 8005a02:	e000      	b.n	8005a06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d063      	beq.n	8005ada <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a12:	4b65      	ldr	r3, [pc, #404]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 030c 	and.w	r3, r3, #12
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00b      	beq.n	8005a36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a1e:	4b62      	ldr	r3, [pc, #392]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d11c      	bne.n	8005a64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a2a:	4b5f      	ldr	r3, [pc, #380]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d116      	bne.n	8005a64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a36:	4b5c      	ldr	r3, [pc, #368]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_RCC_OscConfig+0x152>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d001      	beq.n	8005a4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e1c4      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a4e:	4b56      	ldr	r3, [pc, #344]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	4952      	ldr	r1, [pc, #328]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a62:	e03a      	b.n	8005ada <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d020      	beq.n	8005aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a6c:	4b4f      	ldr	r3, [pc, #316]	; (8005bac <HAL_RCC_OscConfig+0x2b0>)
 8005a6e:	2201      	movs	r2, #1
 8005a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a72:	f7ff fc33 	bl	80052dc <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a7a:	f7ff fc2f 	bl	80052dc <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e1a5      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a8c:	4b46      	ldr	r3, [pc, #280]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0f0      	beq.n	8005a7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a98:	4b43      	ldr	r3, [pc, #268]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	4940      	ldr	r1, [pc, #256]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	600b      	str	r3, [r1, #0]
 8005aac:	e015      	b.n	8005ada <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aae:	4b3f      	ldr	r3, [pc, #252]	; (8005bac <HAL_RCC_OscConfig+0x2b0>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab4:	f7ff fc12 	bl	80052dc <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005abc:	f7ff fc0e 	bl	80052dc <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e184      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ace:	4b36      	ldr	r3, [pc, #216]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1f0      	bne.n	8005abc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d030      	beq.n	8005b48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d016      	beq.n	8005b1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aee:	4b30      	ldr	r3, [pc, #192]	; (8005bb0 <HAL_RCC_OscConfig+0x2b4>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af4:	f7ff fbf2 	bl	80052dc <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005afc:	f7ff fbee 	bl	80052dc <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e164      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b0e:	4b26      	ldr	r3, [pc, #152]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCC_OscConfig+0x200>
 8005b1a:	e015      	b.n	8005b48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b1c:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <HAL_RCC_OscConfig+0x2b4>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b22:	f7ff fbdb 	bl	80052dc <HAL_GetTick>
 8005b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b2a:	f7ff fbd7 	bl	80052dc <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e14d      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1f0      	bne.n	8005b2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 80a0 	beq.w	8005c96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b56:	2300      	movs	r3, #0
 8005b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b5a:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10f      	bne.n	8005b86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b66:	2300      	movs	r3, #0
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	4a0e      	ldr	r2, [pc, #56]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b74:	6413      	str	r3, [r2, #64]	; 0x40
 8005b76:	4b0c      	ldr	r3, [pc, #48]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b7e:	60bb      	str	r3, [r7, #8]
 8005b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b82:	2301      	movs	r3, #1
 8005b84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b86:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <HAL_RCC_OscConfig+0x2b8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d121      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b92:	4b08      	ldr	r3, [pc, #32]	; (8005bb4 <HAL_RCC_OscConfig+0x2b8>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a07      	ldr	r2, [pc, #28]	; (8005bb4 <HAL_RCC_OscConfig+0x2b8>)
 8005b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b9e:	f7ff fb9d 	bl	80052dc <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba4:	e011      	b.n	8005bca <HAL_RCC_OscConfig+0x2ce>
 8005ba6:	bf00      	nop
 8005ba8:	40023800 	.word	0x40023800
 8005bac:	42470000 	.word	0x42470000
 8005bb0:	42470e80 	.word	0x42470e80
 8005bb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bb8:	f7ff fb90 	bl	80052dc <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e106      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bca:	4b85      	ldr	r3, [pc, #532]	; (8005de0 <HAL_RCC_OscConfig+0x4e4>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0f0      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d106      	bne.n	8005bec <HAL_RCC_OscConfig+0x2f0>
 8005bde:	4b81      	ldr	r3, [pc, #516]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be2:	4a80      	ldr	r2, [pc, #512]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005be4:	f043 0301 	orr.w	r3, r3, #1
 8005be8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bea:	e01c      	b.n	8005c26 <HAL_RCC_OscConfig+0x32a>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2b05      	cmp	r3, #5
 8005bf2:	d10c      	bne.n	8005c0e <HAL_RCC_OscConfig+0x312>
 8005bf4:	4b7b      	ldr	r3, [pc, #492]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf8:	4a7a      	ldr	r2, [pc, #488]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005bfa:	f043 0304 	orr.w	r3, r3, #4
 8005bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8005c00:	4b78      	ldr	r3, [pc, #480]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c04:	4a77      	ldr	r2, [pc, #476]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005c06:	f043 0301 	orr.w	r3, r3, #1
 8005c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c0c:	e00b      	b.n	8005c26 <HAL_RCC_OscConfig+0x32a>
 8005c0e:	4b75      	ldr	r3, [pc, #468]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c12:	4a74      	ldr	r2, [pc, #464]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005c14:	f023 0301 	bic.w	r3, r3, #1
 8005c18:	6713      	str	r3, [r2, #112]	; 0x70
 8005c1a:	4b72      	ldr	r3, [pc, #456]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	4a71      	ldr	r2, [pc, #452]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005c20:	f023 0304 	bic.w	r3, r3, #4
 8005c24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d015      	beq.n	8005c5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c2e:	f7ff fb55 	bl	80052dc <HAL_GetTick>
 8005c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c34:	e00a      	b.n	8005c4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c36:	f7ff fb51 	bl	80052dc <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e0c5      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c4c:	4b65      	ldr	r3, [pc, #404]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0ee      	beq.n	8005c36 <HAL_RCC_OscConfig+0x33a>
 8005c58:	e014      	b.n	8005c84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c5a:	f7ff fb3f 	bl	80052dc <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c60:	e00a      	b.n	8005c78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c62:	f7ff fb3b 	bl	80052dc <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e0af      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c78:	4b5a      	ldr	r3, [pc, #360]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1ee      	bne.n	8005c62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d105      	bne.n	8005c96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c8a:	4b56      	ldr	r3, [pc, #344]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	4a55      	ldr	r2, [pc, #340]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 809b 	beq.w	8005dd6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ca0:	4b50      	ldr	r3, [pc, #320]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 030c 	and.w	r3, r3, #12
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d05c      	beq.n	8005d66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d141      	bne.n	8005d38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cb4:	4b4c      	ldr	r3, [pc, #304]	; (8005de8 <HAL_RCC_OscConfig+0x4ec>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cba:	f7ff fb0f 	bl	80052dc <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cc2:	f7ff fb0b 	bl	80052dc <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e081      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd4:	4b43      	ldr	r3, [pc, #268]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1f0      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	019b      	lsls	r3, r3, #6
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf6:	085b      	lsrs	r3, r3, #1
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	041b      	lsls	r3, r3, #16
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	061b      	lsls	r3, r3, #24
 8005d04:	4937      	ldr	r1, [pc, #220]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d0a:	4b37      	ldr	r3, [pc, #220]	; (8005de8 <HAL_RCC_OscConfig+0x4ec>)
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d10:	f7ff fae4 	bl	80052dc <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d18:	f7ff fae0 	bl	80052dc <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e056      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d2a:	4b2e      	ldr	r3, [pc, #184]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0f0      	beq.n	8005d18 <HAL_RCC_OscConfig+0x41c>
 8005d36:	e04e      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d38:	4b2b      	ldr	r3, [pc, #172]	; (8005de8 <HAL_RCC_OscConfig+0x4ec>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d3e:	f7ff facd 	bl	80052dc <HAL_GetTick>
 8005d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d44:	e008      	b.n	8005d58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d46:	f7ff fac9 	bl	80052dc <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e03f      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d58:	4b22      	ldr	r3, [pc, #136]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1f0      	bne.n	8005d46 <HAL_RCC_OscConfig+0x44a>
 8005d64:	e037      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e032      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d72:	4b1c      	ldr	r3, [pc, #112]	; (8005de4 <HAL_RCC_OscConfig+0x4e8>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d028      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d121      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d11a      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005da2:	4013      	ands	r3, r2
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005da8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d111      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db8:	085b      	lsrs	r3, r3, #1
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d107      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dcc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d001      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40007000 	.word	0x40007000
 8005de4:	40023800 	.word	0x40023800
 8005de8:	42470060 	.word	0x42470060

08005dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e0cc      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e00:	4b68      	ldr	r3, [pc, #416]	; (8005fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d90c      	bls.n	8005e28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0e:	4b65      	ldr	r3, [pc, #404]	; (8005fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e16:	4b63      	ldr	r3, [pc, #396]	; (8005fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d001      	beq.n	8005e28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e0b8      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d020      	beq.n	8005e76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d005      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e40:	4b59      	ldr	r3, [pc, #356]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	4a58      	ldr	r2, [pc, #352]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e58:	4b53      	ldr	r3, [pc, #332]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	4a52      	ldr	r2, [pc, #328]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e64:	4b50      	ldr	r3, [pc, #320]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	494d      	ldr	r1, [pc, #308]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d044      	beq.n	8005f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d107      	bne.n	8005e9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e8a:	4b47      	ldr	r3, [pc, #284]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d119      	bne.n	8005eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e07f      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d003      	beq.n	8005eaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	d107      	bne.n	8005eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eaa:	4b3f      	ldr	r3, [pc, #252]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d109      	bne.n	8005eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e06f      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eba:	4b3b      	ldr	r3, [pc, #236]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e067      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eca:	4b37      	ldr	r3, [pc, #220]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f023 0203 	bic.w	r2, r3, #3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	4934      	ldr	r1, [pc, #208]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005edc:	f7ff f9fe 	bl	80052dc <HAL_GetTick>
 8005ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ee2:	e00a      	b.n	8005efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ee4:	f7ff f9fa 	bl	80052dc <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e04f      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efa:	4b2b      	ldr	r3, [pc, #172]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 020c 	and.w	r2, r3, #12
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d1eb      	bne.n	8005ee4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f0c:	4b25      	ldr	r3, [pc, #148]	; (8005fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d20c      	bcs.n	8005f34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f1a:	4b22      	ldr	r3, [pc, #136]	; (8005fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f22:	4b20      	ldr	r3, [pc, #128]	; (8005fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d001      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e032      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f40:	4b19      	ldr	r3, [pc, #100]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	4916      	ldr	r1, [pc, #88]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d009      	beq.n	8005f72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f5e:	4b12      	ldr	r3, [pc, #72]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	490e      	ldr	r1, [pc, #56]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f72:	f000 f821 	bl	8005fb8 <HAL_RCC_GetSysClockFreq>
 8005f76:	4602      	mov	r2, r0
 8005f78:	4b0b      	ldr	r3, [pc, #44]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	091b      	lsrs	r3, r3, #4
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	490a      	ldr	r1, [pc, #40]	; (8005fac <HAL_RCC_ClockConfig+0x1c0>)
 8005f84:	5ccb      	ldrb	r3, [r1, r3]
 8005f86:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8a:	4a09      	ldr	r2, [pc, #36]	; (8005fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f8e:	4b09      	ldr	r3, [pc, #36]	; (8005fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff f95e 	bl	8005254 <HAL_InitTick>

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	40023c00 	.word	0x40023c00
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	08016d40 	.word	0x08016d40
 8005fb0:	20000008 	.word	0x20000008
 8005fb4:	2000000c 	.word	0x2000000c

08005fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	607b      	str	r3, [r7, #4]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fd0:	4b67      	ldr	r3, [pc, #412]	; (8006170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 030c 	and.w	r3, r3, #12
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d00d      	beq.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	f200 80bd 	bhi.w	800615c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <HAL_RCC_GetSysClockFreq+0x34>
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d003      	beq.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005fea:	e0b7      	b.n	800615c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fec:	4b61      	ldr	r3, [pc, #388]	; (8006174 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005fee:	60bb      	str	r3, [r7, #8]
       break;
 8005ff0:	e0b7      	b.n	8006162 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ff2:	4b61      	ldr	r3, [pc, #388]	; (8006178 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005ff4:	60bb      	str	r3, [r7, #8]
      break;
 8005ff6:	e0b4      	b.n	8006162 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ff8:	4b5d      	ldr	r3, [pc, #372]	; (8006170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006000:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006002:	4b5b      	ldr	r3, [pc, #364]	; (8006170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d04d      	beq.n	80060aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800600e:	4b58      	ldr	r3, [pc, #352]	; (8006170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	099b      	lsrs	r3, r3, #6
 8006014:	461a      	mov	r2, r3
 8006016:	f04f 0300 	mov.w	r3, #0
 800601a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800601e:	f04f 0100 	mov.w	r1, #0
 8006022:	ea02 0800 	and.w	r8, r2, r0
 8006026:	ea03 0901 	and.w	r9, r3, r1
 800602a:	4640      	mov	r0, r8
 800602c:	4649      	mov	r1, r9
 800602e:	f04f 0200 	mov.w	r2, #0
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	014b      	lsls	r3, r1, #5
 8006038:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800603c:	0142      	lsls	r2, r0, #5
 800603e:	4610      	mov	r0, r2
 8006040:	4619      	mov	r1, r3
 8006042:	ebb0 0008 	subs.w	r0, r0, r8
 8006046:	eb61 0109 	sbc.w	r1, r1, r9
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	018b      	lsls	r3, r1, #6
 8006054:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006058:	0182      	lsls	r2, r0, #6
 800605a:	1a12      	subs	r2, r2, r0
 800605c:	eb63 0301 	sbc.w	r3, r3, r1
 8006060:	f04f 0000 	mov.w	r0, #0
 8006064:	f04f 0100 	mov.w	r1, #0
 8006068:	00d9      	lsls	r1, r3, #3
 800606a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800606e:	00d0      	lsls	r0, r2, #3
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	eb12 0208 	adds.w	r2, r2, r8
 8006078:	eb43 0309 	adc.w	r3, r3, r9
 800607c:	f04f 0000 	mov.w	r0, #0
 8006080:	f04f 0100 	mov.w	r1, #0
 8006084:	0259      	lsls	r1, r3, #9
 8006086:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800608a:	0250      	lsls	r0, r2, #9
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4610      	mov	r0, r2
 8006092:	4619      	mov	r1, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	461a      	mov	r2, r3
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	f7fa fda4 	bl	8000be8 <__aeabi_uldivmod>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4613      	mov	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	e04a      	b.n	8006140 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060aa:	4b31      	ldr	r3, [pc, #196]	; (8006170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	099b      	lsrs	r3, r3, #6
 80060b0:	461a      	mov	r2, r3
 80060b2:	f04f 0300 	mov.w	r3, #0
 80060b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80060ba:	f04f 0100 	mov.w	r1, #0
 80060be:	ea02 0400 	and.w	r4, r2, r0
 80060c2:	ea03 0501 	and.w	r5, r3, r1
 80060c6:	4620      	mov	r0, r4
 80060c8:	4629      	mov	r1, r5
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	014b      	lsls	r3, r1, #5
 80060d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80060d8:	0142      	lsls	r2, r0, #5
 80060da:	4610      	mov	r0, r2
 80060dc:	4619      	mov	r1, r3
 80060de:	1b00      	subs	r0, r0, r4
 80060e0:	eb61 0105 	sbc.w	r1, r1, r5
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	018b      	lsls	r3, r1, #6
 80060ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80060f2:	0182      	lsls	r2, r0, #6
 80060f4:	1a12      	subs	r2, r2, r0
 80060f6:	eb63 0301 	sbc.w	r3, r3, r1
 80060fa:	f04f 0000 	mov.w	r0, #0
 80060fe:	f04f 0100 	mov.w	r1, #0
 8006102:	00d9      	lsls	r1, r3, #3
 8006104:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006108:	00d0      	lsls	r0, r2, #3
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	1912      	adds	r2, r2, r4
 8006110:	eb45 0303 	adc.w	r3, r5, r3
 8006114:	f04f 0000 	mov.w	r0, #0
 8006118:	f04f 0100 	mov.w	r1, #0
 800611c:	0299      	lsls	r1, r3, #10
 800611e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006122:	0290      	lsls	r0, r2, #10
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4610      	mov	r0, r2
 800612a:	4619      	mov	r1, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	461a      	mov	r2, r3
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	f7fa fd58 	bl	8000be8 <__aeabi_uldivmod>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4613      	mov	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006140:	4b0b      	ldr	r3, [pc, #44]	; (8006170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	0c1b      	lsrs	r3, r3, #16
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	3301      	adds	r3, #1
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	fbb2 f3f3 	udiv	r3, r2, r3
 8006158:	60bb      	str	r3, [r7, #8]
      break;
 800615a:	e002      	b.n	8006162 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800615c:	4b05      	ldr	r3, [pc, #20]	; (8006174 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800615e:	60bb      	str	r3, [r7, #8]
      break;
 8006160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006162:	68bb      	ldr	r3, [r7, #8]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800616e:	bf00      	nop
 8006170:	40023800 	.word	0x40023800
 8006174:	00f42400 	.word	0x00f42400
 8006178:	007a1200 	.word	0x007a1200

0800617c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006180:	4b03      	ldr	r3, [pc, #12]	; (8006190 <HAL_RCC_GetHCLKFreq+0x14>)
 8006182:	681b      	ldr	r3, [r3, #0]
}
 8006184:	4618      	mov	r0, r3
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	20000008 	.word	0x20000008

08006194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006198:	f7ff fff0 	bl	800617c <HAL_RCC_GetHCLKFreq>
 800619c:	4602      	mov	r2, r0
 800619e:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	0a9b      	lsrs	r3, r3, #10
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	4903      	ldr	r1, [pc, #12]	; (80061b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061aa:	5ccb      	ldrb	r3, [r1, r3]
 80061ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	40023800 	.word	0x40023800
 80061b8:	08016d50 	.word	0x08016d50

080061bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80061c0:	f7ff ffdc 	bl	800617c <HAL_RCC_GetHCLKFreq>
 80061c4:	4602      	mov	r2, r0
 80061c6:	4b05      	ldr	r3, [pc, #20]	; (80061dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	0b5b      	lsrs	r3, r3, #13
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	4903      	ldr	r1, [pc, #12]	; (80061e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061d2:	5ccb      	ldrb	r3, [r1, r3]
 80061d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061d8:	4618      	mov	r0, r3
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40023800 	.word	0x40023800
 80061e0:	08016d50 	.word	0x08016d50

080061e4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e034      	b.n	8006264 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f7fe fc40 	bl	8004a94 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3308      	adds	r3, #8
 800621c:	4619      	mov	r1, r3
 800621e:	4610      	mov	r0, r2
 8006220:	f001 f898 	bl	8007354 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6818      	ldr	r0, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	461a      	mov	r2, r3
 800622e:	68b9      	ldr	r1, [r7, #8]
 8006230:	f001 f8e2 	bl	80073f8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6858      	ldr	r0, [r3, #4]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006240:	6879      	ldr	r1, [r7, #4]
 8006242:	f001 f917 	bl	8007474 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	6892      	ldr	r2, [r2, #8]
 800624e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	6892      	ldr	r2, [r2, #8]
 800625a:	f041 0101 	orr.w	r1, r1, #1
 800625e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e041      	b.n	8006302 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fe fec8 	bl	8005028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3304      	adds	r3, #4
 80062a8:	4619      	mov	r1, r3
 80062aa:	4610      	mov	r0, r2
 80062ac:	f000 fb48 	bl	8006940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b082      	sub	sp, #8
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e041      	b.n	80063a0 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d106      	bne.n	8006336 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f839 	bl	80063a8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2202      	movs	r2, #2
 800633a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	3304      	adds	r3, #4
 8006346:	4619      	mov	r1, r3
 8006348:	4610      	mov	r0, r2
 800634a:	f000 faf9 	bl	8006940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d122      	bne.n	8006418 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d11b      	bne.n	8006418 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f06f 0202 	mvn.w	r2, #2
 80063e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7fa fdb6 	bl	8000f70 <HAL_TIM_IC_CaptureCallback>
 8006404:	e005      	b.n	8006412 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fa7c 	bl	8006904 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fa83 	bl	8006918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	f003 0304 	and.w	r3, r3, #4
 8006422:	2b04      	cmp	r3, #4
 8006424:	d122      	bne.n	800646c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b04      	cmp	r3, #4
 8006432:	d11b      	bne.n	800646c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f06f 0204 	mvn.w	r2, #4
 800643c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2202      	movs	r2, #2
 8006442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fa fd8c 	bl	8000f70 <HAL_TIM_IC_CaptureCallback>
 8006458:	e005      	b.n	8006466 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fa52 	bl	8006904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fa59 	bl	8006918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f003 0308 	and.w	r3, r3, #8
 8006476:	2b08      	cmp	r3, #8
 8006478:	d122      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f003 0308 	and.w	r3, r3, #8
 8006484:	2b08      	cmp	r3, #8
 8006486:	d11b      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f06f 0208 	mvn.w	r2, #8
 8006490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2204      	movs	r2, #4
 8006496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	f003 0303 	and.w	r3, r3, #3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7fa fd62 	bl	8000f70 <HAL_TIM_IC_CaptureCallback>
 80064ac:	e005      	b.n	80064ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fa28 	bl	8006904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fa2f 	bl	8006918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f003 0310 	and.w	r3, r3, #16
 80064ca:	2b10      	cmp	r3, #16
 80064cc:	d122      	bne.n	8006514 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f003 0310 	and.w	r3, r3, #16
 80064d8:	2b10      	cmp	r3, #16
 80064da:	d11b      	bne.n	8006514 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0210 	mvn.w	r2, #16
 80064e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2208      	movs	r2, #8
 80064ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fa fd38 	bl	8000f70 <HAL_TIM_IC_CaptureCallback>
 8006500:	e005      	b.n	800650e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f9fe 	bl	8006904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fa05 	bl	8006918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b01      	cmp	r3, #1
 8006520:	d10e      	bne.n	8006540 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b01      	cmp	r3, #1
 800652e:	d107      	bne.n	8006540 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0201 	mvn.w	r2, #1
 8006538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fa fcd0 	bl	8000ee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654a:	2b80      	cmp	r3, #128	; 0x80
 800654c:	d10e      	bne.n	800656c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006558:	2b80      	cmp	r3, #128	; 0x80
 800655a:	d107      	bne.n	800656c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fcd4 	bl	8006f14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006576:	2b40      	cmp	r3, #64	; 0x40
 8006578:	d10e      	bne.n	8006598 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006584:	2b40      	cmp	r3, #64	; 0x40
 8006586:	d107      	bne.n	8006598 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f9ca 	bl	800692c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f003 0320 	and.w	r3, r3, #32
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	d10e      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f003 0320 	and.w	r3, r3, #32
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d107      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0220 	mvn.w	r2, #32
 80065bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fc9e 	bl	8006f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065c4:	bf00      	nop
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d101      	bne.n	80065e6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80065e2:	2302      	movs	r3, #2
 80065e4:	e082      	b.n	80066ec <HAL_TIM_IC_ConfigChannel+0x120>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d11b      	bne.n	800662c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	6819      	ldr	r1, [r3, #0]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f000 fa3c 	bl	8006a80 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	699a      	ldr	r2, [r3, #24]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 020c 	bic.w	r2, r2, #12
 8006616:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6999      	ldr	r1, [r3, #24]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	619a      	str	r2, [r3, #24]
 800662a:	e05a      	b.n	80066e2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b04      	cmp	r3, #4
 8006630:	d11c      	bne.n	800666c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6818      	ldr	r0, [r3, #0]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	6819      	ldr	r1, [r3, #0]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f000 fac0 	bl	8006bc6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	699a      	ldr	r2, [r3, #24]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006654:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6999      	ldr	r1, [r3, #24]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	021a      	lsls	r2, r3, #8
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	619a      	str	r2, [r3, #24]
 800666a:	e03a      	b.n	80066e2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b08      	cmp	r3, #8
 8006670:	d11b      	bne.n	80066aa <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	6819      	ldr	r1, [r3, #0]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f000 fb0d 	bl	8006ca0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69da      	ldr	r2, [r3, #28]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 020c 	bic.w	r2, r2, #12
 8006694:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69d9      	ldr	r1, [r3, #28]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	61da      	str	r2, [r3, #28]
 80066a8:	e01b      	b.n	80066e2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6818      	ldr	r0, [r3, #0]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	6819      	ldr	r1, [r3, #0]
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f000 fb2d 	bl	8006d18 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69da      	ldr	r2, [r3, #28]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80066cc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69d9      	ldr	r1, [r3, #28]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	021a      	lsls	r2, r3, #8
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_TIM_ConfigClockSource+0x18>
 8006708:	2302      	movs	r3, #2
 800670a:	e0b3      	b.n	8006874 <HAL_TIM_ConfigClockSource+0x180>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800672a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006732:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006744:	d03e      	beq.n	80067c4 <HAL_TIM_ConfigClockSource+0xd0>
 8006746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800674a:	f200 8087 	bhi.w	800685c <HAL_TIM_ConfigClockSource+0x168>
 800674e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006752:	f000 8085 	beq.w	8006860 <HAL_TIM_ConfigClockSource+0x16c>
 8006756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800675a:	d87f      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x168>
 800675c:	2b70      	cmp	r3, #112	; 0x70
 800675e:	d01a      	beq.n	8006796 <HAL_TIM_ConfigClockSource+0xa2>
 8006760:	2b70      	cmp	r3, #112	; 0x70
 8006762:	d87b      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x168>
 8006764:	2b60      	cmp	r3, #96	; 0x60
 8006766:	d050      	beq.n	800680a <HAL_TIM_ConfigClockSource+0x116>
 8006768:	2b60      	cmp	r3, #96	; 0x60
 800676a:	d877      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x168>
 800676c:	2b50      	cmp	r3, #80	; 0x50
 800676e:	d03c      	beq.n	80067ea <HAL_TIM_ConfigClockSource+0xf6>
 8006770:	2b50      	cmp	r3, #80	; 0x50
 8006772:	d873      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x168>
 8006774:	2b40      	cmp	r3, #64	; 0x40
 8006776:	d058      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x136>
 8006778:	2b40      	cmp	r3, #64	; 0x40
 800677a:	d86f      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x168>
 800677c:	2b30      	cmp	r3, #48	; 0x30
 800677e:	d064      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x156>
 8006780:	2b30      	cmp	r3, #48	; 0x30
 8006782:	d86b      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x168>
 8006784:	2b20      	cmp	r3, #32
 8006786:	d060      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x156>
 8006788:	2b20      	cmp	r3, #32
 800678a:	d867      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x168>
 800678c:	2b00      	cmp	r3, #0
 800678e:	d05c      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x156>
 8006790:	2b10      	cmp	r3, #16
 8006792:	d05a      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006794:	e062      	b.n	800685c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6818      	ldr	r0, [r3, #0]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	6899      	ldr	r1, [r3, #8]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f000 fb0f 	bl	8006dc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	609a      	str	r2, [r3, #8]
      break;
 80067c2:	e04e      	b.n	8006862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6818      	ldr	r0, [r3, #0]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	6899      	ldr	r1, [r3, #8]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f000 faf8 	bl	8006dc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689a      	ldr	r2, [r3, #8]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067e6:	609a      	str	r2, [r3, #8]
      break;
 80067e8:	e03b      	b.n	8006862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	6859      	ldr	r1, [r3, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	461a      	mov	r2, r3
 80067f8:	f000 f9b6 	bl	8006b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2150      	movs	r1, #80	; 0x50
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fac5 	bl	8006d92 <TIM_ITRx_SetConfig>
      break;
 8006808:	e02b      	b.n	8006862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	6859      	ldr	r1, [r3, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	461a      	mov	r2, r3
 8006818:	f000 fa12 	bl	8006c40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2160      	movs	r1, #96	; 0x60
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fab5 	bl	8006d92 <TIM_ITRx_SetConfig>
      break;
 8006828:	e01b      	b.n	8006862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6818      	ldr	r0, [r3, #0]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	6859      	ldr	r1, [r3, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	461a      	mov	r2, r3
 8006838:	f000 f996 	bl	8006b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2140      	movs	r1, #64	; 0x40
 8006842:	4618      	mov	r0, r3
 8006844:	f000 faa5 	bl	8006d92 <TIM_ITRx_SetConfig>
      break;
 8006848:	e00b      	b.n	8006862 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4619      	mov	r1, r3
 8006854:	4610      	mov	r0, r2
 8006856:	f000 fa9c 	bl	8006d92 <TIM_ITRx_SetConfig>
        break;
 800685a:	e002      	b.n	8006862 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800685c:	bf00      	nop
 800685e:	e000      	b.n	8006862 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006860:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b0c      	cmp	r3, #12
 800688e:	d831      	bhi.n	80068f4 <HAL_TIM_ReadCapturedValue+0x78>
 8006890:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006896:	bf00      	nop
 8006898:	080068cd 	.word	0x080068cd
 800689c:	080068f5 	.word	0x080068f5
 80068a0:	080068f5 	.word	0x080068f5
 80068a4:	080068f5 	.word	0x080068f5
 80068a8:	080068d7 	.word	0x080068d7
 80068ac:	080068f5 	.word	0x080068f5
 80068b0:	080068f5 	.word	0x080068f5
 80068b4:	080068f5 	.word	0x080068f5
 80068b8:	080068e1 	.word	0x080068e1
 80068bc:	080068f5 	.word	0x080068f5
 80068c0:	080068f5 	.word	0x080068f5
 80068c4:	080068f5 	.word	0x080068f5
 80068c8:	080068eb 	.word	0x080068eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d2:	60fb      	str	r3, [r7, #12]

      break;
 80068d4:	e00f      	b.n	80068f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068dc:	60fb      	str	r3, [r7, #12]

      break;
 80068de:	e00a      	b.n	80068f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e6:	60fb      	str	r3, [r7, #12]

      break;
 80068e8:	e005      	b.n	80068f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	60fb      	str	r3, [r7, #12]

      break;
 80068f2:	e000      	b.n	80068f6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80068f4:	bf00      	nop
  }

  return tmpreg;
 80068f6:	68fb      	ldr	r3, [r7, #12]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a40      	ldr	r2, [pc, #256]	; (8006a54 <TIM_Base_SetConfig+0x114>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d013      	beq.n	8006980 <TIM_Base_SetConfig+0x40>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695e:	d00f      	beq.n	8006980 <TIM_Base_SetConfig+0x40>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a3d      	ldr	r2, [pc, #244]	; (8006a58 <TIM_Base_SetConfig+0x118>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d00b      	beq.n	8006980 <TIM_Base_SetConfig+0x40>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a3c      	ldr	r2, [pc, #240]	; (8006a5c <TIM_Base_SetConfig+0x11c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d007      	beq.n	8006980 <TIM_Base_SetConfig+0x40>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a3b      	ldr	r2, [pc, #236]	; (8006a60 <TIM_Base_SetConfig+0x120>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d003      	beq.n	8006980 <TIM_Base_SetConfig+0x40>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a3a      	ldr	r2, [pc, #232]	; (8006a64 <TIM_Base_SetConfig+0x124>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d108      	bne.n	8006992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	4313      	orrs	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a2f      	ldr	r2, [pc, #188]	; (8006a54 <TIM_Base_SetConfig+0x114>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d02b      	beq.n	80069f2 <TIM_Base_SetConfig+0xb2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a0:	d027      	beq.n	80069f2 <TIM_Base_SetConfig+0xb2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a2c      	ldr	r2, [pc, #176]	; (8006a58 <TIM_Base_SetConfig+0x118>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d023      	beq.n	80069f2 <TIM_Base_SetConfig+0xb2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a2b      	ldr	r2, [pc, #172]	; (8006a5c <TIM_Base_SetConfig+0x11c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d01f      	beq.n	80069f2 <TIM_Base_SetConfig+0xb2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a2a      	ldr	r2, [pc, #168]	; (8006a60 <TIM_Base_SetConfig+0x120>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d01b      	beq.n	80069f2 <TIM_Base_SetConfig+0xb2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a29      	ldr	r2, [pc, #164]	; (8006a64 <TIM_Base_SetConfig+0x124>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d017      	beq.n	80069f2 <TIM_Base_SetConfig+0xb2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a28      	ldr	r2, [pc, #160]	; (8006a68 <TIM_Base_SetConfig+0x128>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d013      	beq.n	80069f2 <TIM_Base_SetConfig+0xb2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a27      	ldr	r2, [pc, #156]	; (8006a6c <TIM_Base_SetConfig+0x12c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d00f      	beq.n	80069f2 <TIM_Base_SetConfig+0xb2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a26      	ldr	r2, [pc, #152]	; (8006a70 <TIM_Base_SetConfig+0x130>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d00b      	beq.n	80069f2 <TIM_Base_SetConfig+0xb2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a25      	ldr	r2, [pc, #148]	; (8006a74 <TIM_Base_SetConfig+0x134>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d007      	beq.n	80069f2 <TIM_Base_SetConfig+0xb2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a24      	ldr	r2, [pc, #144]	; (8006a78 <TIM_Base_SetConfig+0x138>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d003      	beq.n	80069f2 <TIM_Base_SetConfig+0xb2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a23      	ldr	r2, [pc, #140]	; (8006a7c <TIM_Base_SetConfig+0x13c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d108      	bne.n	8006a04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a0a      	ldr	r2, [pc, #40]	; (8006a54 <TIM_Base_SetConfig+0x114>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d003      	beq.n	8006a38 <TIM_Base_SetConfig+0xf8>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a0c      	ldr	r2, [pc, #48]	; (8006a64 <TIM_Base_SetConfig+0x124>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d103      	bne.n	8006a40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	691a      	ldr	r2, [r3, #16]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	615a      	str	r2, [r3, #20]
}
 8006a46:	bf00      	nop
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	40010000 	.word	0x40010000
 8006a58:	40000400 	.word	0x40000400
 8006a5c:	40000800 	.word	0x40000800
 8006a60:	40000c00 	.word	0x40000c00
 8006a64:	40010400 	.word	0x40010400
 8006a68:	40014000 	.word	0x40014000
 8006a6c:	40014400 	.word	0x40014400
 8006a70:	40014800 	.word	0x40014800
 8006a74:	40001800 	.word	0x40001800
 8006a78:	40001c00 	.word	0x40001c00
 8006a7c:	40002000 	.word	0x40002000

08006a80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f023 0201 	bic.w	r2, r3, #1
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4a28      	ldr	r2, [pc, #160]	; (8006b4c <TIM_TI1_SetConfig+0xcc>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d01b      	beq.n	8006ae6 <TIM_TI1_SetConfig+0x66>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab4:	d017      	beq.n	8006ae6 <TIM_TI1_SetConfig+0x66>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4a25      	ldr	r2, [pc, #148]	; (8006b50 <TIM_TI1_SetConfig+0xd0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d013      	beq.n	8006ae6 <TIM_TI1_SetConfig+0x66>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4a24      	ldr	r2, [pc, #144]	; (8006b54 <TIM_TI1_SetConfig+0xd4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00f      	beq.n	8006ae6 <TIM_TI1_SetConfig+0x66>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4a23      	ldr	r2, [pc, #140]	; (8006b58 <TIM_TI1_SetConfig+0xd8>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d00b      	beq.n	8006ae6 <TIM_TI1_SetConfig+0x66>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4a22      	ldr	r2, [pc, #136]	; (8006b5c <TIM_TI1_SetConfig+0xdc>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d007      	beq.n	8006ae6 <TIM_TI1_SetConfig+0x66>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	4a21      	ldr	r2, [pc, #132]	; (8006b60 <TIM_TI1_SetConfig+0xe0>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d003      	beq.n	8006ae6 <TIM_TI1_SetConfig+0x66>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4a20      	ldr	r2, [pc, #128]	; (8006b64 <TIM_TI1_SetConfig+0xe4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d101      	bne.n	8006aea <TIM_TI1_SetConfig+0x6a>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e000      	b.n	8006aec <TIM_TI1_SetConfig+0x6c>
 8006aea:	2300      	movs	r3, #0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d008      	beq.n	8006b02 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f023 0303 	bic.w	r3, r3, #3
 8006af6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	e003      	b.n	8006b0a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f023 030a 	bic.w	r3, r3, #10
 8006b24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f003 030a 	and.w	r3, r3, #10
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	621a      	str	r2, [r3, #32]
}
 8006b3e:	bf00      	nop
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	40010000 	.word	0x40010000
 8006b50:	40000400 	.word	0x40000400
 8006b54:	40000800 	.word	0x40000800
 8006b58:	40000c00 	.word	0x40000c00
 8006b5c:	40010400 	.word	0x40010400
 8006b60:	40014000 	.word	0x40014000
 8006b64:	40001800 	.word	0x40001800

08006b68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	f023 0201 	bic.w	r2, r3, #1
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	011b      	lsls	r3, r3, #4
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f023 030a 	bic.w	r3, r3, #10
 8006ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	621a      	str	r2, [r3, #32]
}
 8006bba:	bf00      	nop
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b087      	sub	sp, #28
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	607a      	str	r2, [r7, #4]
 8006bd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	f023 0210 	bic.w	r2, r3, #16
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	021b      	lsls	r3, r3, #8
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	031b      	lsls	r3, r3, #12
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c18:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	621a      	str	r2, [r3, #32]
}
 8006c34:	bf00      	nop
 8006c36:	371c      	adds	r7, #28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	f023 0210 	bic.w	r2, r3, #16
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	031b      	lsls	r3, r3, #12
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	621a      	str	r2, [r3, #32]
}
 8006c94:	bf00      	nop
 8006c96:	371c      	adds	r7, #28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f023 0303 	bic.w	r3, r3, #3
 8006ccc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	011b      	lsls	r3, r3, #4
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006cf0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	021b      	lsls	r3, r3, #8
 8006cf6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	621a      	str	r2, [r3, #32]
}
 8006d0c:	bf00      	nop
 8006d0e:	371c      	adds	r7, #28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
 8006d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	021b      	lsls	r3, r3, #8
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d56:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	031b      	lsls	r3, r3, #12
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006d6a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	031b      	lsls	r3, r3, #12
 8006d70:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	621a      	str	r2, [r3, #32]
}
 8006d86:	bf00      	nop
 8006d88:	371c      	adds	r7, #28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b085      	sub	sp, #20
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	f043 0307 	orr.w	r3, r3, #7
 8006db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	609a      	str	r2, [r3, #8]
}
 8006dbc:	bf00      	nop
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006de2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	021a      	lsls	r2, r3, #8
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	431a      	orrs	r2, r3
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	609a      	str	r2, [r3, #8]
}
 8006dfc:	bf00      	nop
 8006dfe:	371c      	adds	r7, #28
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d101      	bne.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	e05a      	b.n	8006ed6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a21      	ldr	r2, [pc, #132]	; (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d022      	beq.n	8006eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e6c:	d01d      	beq.n	8006eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a1d      	ldr	r2, [pc, #116]	; (8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d018      	beq.n	8006eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d013      	beq.n	8006eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a1a      	ldr	r2, [pc, #104]	; (8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d00e      	beq.n	8006eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a18      	ldr	r2, [pc, #96]	; (8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d009      	beq.n	8006eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a17      	ldr	r2, [pc, #92]	; (8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d004      	beq.n	8006eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a15      	ldr	r2, [pc, #84]	; (8006efc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d10c      	bne.n	8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	40010000 	.word	0x40010000
 8006ee8:	40000400 	.word	0x40000400
 8006eec:	40000800 	.word	0x40000800
 8006ef0:	40000c00 	.word	0x40000c00
 8006ef4:	40010400 	.word	0x40010400
 8006ef8:	40014000 	.word	0x40014000
 8006efc:	40001800 	.word	0x40001800

08006f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e03f      	b.n	8006fba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d106      	bne.n	8006f54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7fe f8ec 	bl	800512c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2224      	movs	r2, #36	; 0x24
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68da      	ldr	r2, [r3, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f829 	bl	8006fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	691a      	ldr	r2, [r3, #16]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	695a      	ldr	r2, [r3, #20]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68da      	ldr	r2, [r3, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
	...

08006fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc8:	b09f      	sub	sp, #124	; 0x7c
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fda:	68d9      	ldr	r1, [r3, #12]
 8006fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	ea40 0301 	orr.w	r3, r0, r1
 8006fe4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe8:	689a      	ldr	r2, [r3, #8]
 8006fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	431a      	orrs	r2, r3
 8006ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007008:	f021 010c 	bic.w	r1, r1, #12
 800700c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007012:	430b      	orrs	r3, r1
 8007014:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007022:	6999      	ldr	r1, [r3, #24]
 8007024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	ea40 0301 	orr.w	r3, r0, r1
 800702c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800702e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	4bc5      	ldr	r3, [pc, #788]	; (8007348 <UART_SetConfig+0x384>)
 8007034:	429a      	cmp	r2, r3
 8007036:	d004      	beq.n	8007042 <UART_SetConfig+0x7e>
 8007038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	4bc3      	ldr	r3, [pc, #780]	; (800734c <UART_SetConfig+0x388>)
 800703e:	429a      	cmp	r2, r3
 8007040:	d103      	bne.n	800704a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007042:	f7ff f8bb 	bl	80061bc <HAL_RCC_GetPCLK2Freq>
 8007046:	6778      	str	r0, [r7, #116]	; 0x74
 8007048:	e002      	b.n	8007050 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800704a:	f7ff f8a3 	bl	8006194 <HAL_RCC_GetPCLK1Freq>
 800704e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007058:	f040 80b6 	bne.w	80071c8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800705c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800705e:	461c      	mov	r4, r3
 8007060:	f04f 0500 	mov.w	r5, #0
 8007064:	4622      	mov	r2, r4
 8007066:	462b      	mov	r3, r5
 8007068:	1891      	adds	r1, r2, r2
 800706a:	6439      	str	r1, [r7, #64]	; 0x40
 800706c:	415b      	adcs	r3, r3
 800706e:	647b      	str	r3, [r7, #68]	; 0x44
 8007070:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007074:	1912      	adds	r2, r2, r4
 8007076:	eb45 0303 	adc.w	r3, r5, r3
 800707a:	f04f 0000 	mov.w	r0, #0
 800707e:	f04f 0100 	mov.w	r1, #0
 8007082:	00d9      	lsls	r1, r3, #3
 8007084:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007088:	00d0      	lsls	r0, r2, #3
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	1911      	adds	r1, r2, r4
 8007090:	6639      	str	r1, [r7, #96]	; 0x60
 8007092:	416b      	adcs	r3, r5
 8007094:	667b      	str	r3, [r7, #100]	; 0x64
 8007096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	461a      	mov	r2, r3
 800709c:	f04f 0300 	mov.w	r3, #0
 80070a0:	1891      	adds	r1, r2, r2
 80070a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80070a4:	415b      	adcs	r3, r3
 80070a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80070b0:	f7f9 fd9a 	bl	8000be8 <__aeabi_uldivmod>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4ba5      	ldr	r3, [pc, #660]	; (8007350 <UART_SetConfig+0x38c>)
 80070ba:	fba3 2302 	umull	r2, r3, r3, r2
 80070be:	095b      	lsrs	r3, r3, #5
 80070c0:	011e      	lsls	r6, r3, #4
 80070c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070c4:	461c      	mov	r4, r3
 80070c6:	f04f 0500 	mov.w	r5, #0
 80070ca:	4622      	mov	r2, r4
 80070cc:	462b      	mov	r3, r5
 80070ce:	1891      	adds	r1, r2, r2
 80070d0:	6339      	str	r1, [r7, #48]	; 0x30
 80070d2:	415b      	adcs	r3, r3
 80070d4:	637b      	str	r3, [r7, #52]	; 0x34
 80070d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80070da:	1912      	adds	r2, r2, r4
 80070dc:	eb45 0303 	adc.w	r3, r5, r3
 80070e0:	f04f 0000 	mov.w	r0, #0
 80070e4:	f04f 0100 	mov.w	r1, #0
 80070e8:	00d9      	lsls	r1, r3, #3
 80070ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070ee:	00d0      	lsls	r0, r2, #3
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	1911      	adds	r1, r2, r4
 80070f6:	65b9      	str	r1, [r7, #88]	; 0x58
 80070f8:	416b      	adcs	r3, r5
 80070fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	461a      	mov	r2, r3
 8007102:	f04f 0300 	mov.w	r3, #0
 8007106:	1891      	adds	r1, r2, r2
 8007108:	62b9      	str	r1, [r7, #40]	; 0x28
 800710a:	415b      	adcs	r3, r3
 800710c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800710e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007112:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007116:	f7f9 fd67 	bl	8000be8 <__aeabi_uldivmod>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4b8c      	ldr	r3, [pc, #560]	; (8007350 <UART_SetConfig+0x38c>)
 8007120:	fba3 1302 	umull	r1, r3, r3, r2
 8007124:	095b      	lsrs	r3, r3, #5
 8007126:	2164      	movs	r1, #100	; 0x64
 8007128:	fb01 f303 	mul.w	r3, r1, r3
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	3332      	adds	r3, #50	; 0x32
 8007132:	4a87      	ldr	r2, [pc, #540]	; (8007350 <UART_SetConfig+0x38c>)
 8007134:	fba2 2303 	umull	r2, r3, r2, r3
 8007138:	095b      	lsrs	r3, r3, #5
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007140:	441e      	add	r6, r3
 8007142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007144:	4618      	mov	r0, r3
 8007146:	f04f 0100 	mov.w	r1, #0
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	1894      	adds	r4, r2, r2
 8007150:	623c      	str	r4, [r7, #32]
 8007152:	415b      	adcs	r3, r3
 8007154:	627b      	str	r3, [r7, #36]	; 0x24
 8007156:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800715a:	1812      	adds	r2, r2, r0
 800715c:	eb41 0303 	adc.w	r3, r1, r3
 8007160:	f04f 0400 	mov.w	r4, #0
 8007164:	f04f 0500 	mov.w	r5, #0
 8007168:	00dd      	lsls	r5, r3, #3
 800716a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800716e:	00d4      	lsls	r4, r2, #3
 8007170:	4622      	mov	r2, r4
 8007172:	462b      	mov	r3, r5
 8007174:	1814      	adds	r4, r2, r0
 8007176:	653c      	str	r4, [r7, #80]	; 0x50
 8007178:	414b      	adcs	r3, r1
 800717a:	657b      	str	r3, [r7, #84]	; 0x54
 800717c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	461a      	mov	r2, r3
 8007182:	f04f 0300 	mov.w	r3, #0
 8007186:	1891      	adds	r1, r2, r2
 8007188:	61b9      	str	r1, [r7, #24]
 800718a:	415b      	adcs	r3, r3
 800718c:	61fb      	str	r3, [r7, #28]
 800718e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007192:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007196:	f7f9 fd27 	bl	8000be8 <__aeabi_uldivmod>
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	4b6c      	ldr	r3, [pc, #432]	; (8007350 <UART_SetConfig+0x38c>)
 80071a0:	fba3 1302 	umull	r1, r3, r3, r2
 80071a4:	095b      	lsrs	r3, r3, #5
 80071a6:	2164      	movs	r1, #100	; 0x64
 80071a8:	fb01 f303 	mul.w	r3, r1, r3
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	00db      	lsls	r3, r3, #3
 80071b0:	3332      	adds	r3, #50	; 0x32
 80071b2:	4a67      	ldr	r2, [pc, #412]	; (8007350 <UART_SetConfig+0x38c>)
 80071b4:	fba2 2303 	umull	r2, r3, r2, r3
 80071b8:	095b      	lsrs	r3, r3, #5
 80071ba:	f003 0207 	and.w	r2, r3, #7
 80071be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4432      	add	r2, r6
 80071c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80071c6:	e0b9      	b.n	800733c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071ca:	461c      	mov	r4, r3
 80071cc:	f04f 0500 	mov.w	r5, #0
 80071d0:	4622      	mov	r2, r4
 80071d2:	462b      	mov	r3, r5
 80071d4:	1891      	adds	r1, r2, r2
 80071d6:	6139      	str	r1, [r7, #16]
 80071d8:	415b      	adcs	r3, r3
 80071da:	617b      	str	r3, [r7, #20]
 80071dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80071e0:	1912      	adds	r2, r2, r4
 80071e2:	eb45 0303 	adc.w	r3, r5, r3
 80071e6:	f04f 0000 	mov.w	r0, #0
 80071ea:	f04f 0100 	mov.w	r1, #0
 80071ee:	00d9      	lsls	r1, r3, #3
 80071f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071f4:	00d0      	lsls	r0, r2, #3
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	eb12 0804 	adds.w	r8, r2, r4
 80071fe:	eb43 0905 	adc.w	r9, r3, r5
 8007202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	4618      	mov	r0, r3
 8007208:	f04f 0100 	mov.w	r1, #0
 800720c:	f04f 0200 	mov.w	r2, #0
 8007210:	f04f 0300 	mov.w	r3, #0
 8007214:	008b      	lsls	r3, r1, #2
 8007216:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800721a:	0082      	lsls	r2, r0, #2
 800721c:	4640      	mov	r0, r8
 800721e:	4649      	mov	r1, r9
 8007220:	f7f9 fce2 	bl	8000be8 <__aeabi_uldivmod>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	4b49      	ldr	r3, [pc, #292]	; (8007350 <UART_SetConfig+0x38c>)
 800722a:	fba3 2302 	umull	r2, r3, r3, r2
 800722e:	095b      	lsrs	r3, r3, #5
 8007230:	011e      	lsls	r6, r3, #4
 8007232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007234:	4618      	mov	r0, r3
 8007236:	f04f 0100 	mov.w	r1, #0
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	1894      	adds	r4, r2, r2
 8007240:	60bc      	str	r4, [r7, #8]
 8007242:	415b      	adcs	r3, r3
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800724a:	1812      	adds	r2, r2, r0
 800724c:	eb41 0303 	adc.w	r3, r1, r3
 8007250:	f04f 0400 	mov.w	r4, #0
 8007254:	f04f 0500 	mov.w	r5, #0
 8007258:	00dd      	lsls	r5, r3, #3
 800725a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800725e:	00d4      	lsls	r4, r2, #3
 8007260:	4622      	mov	r2, r4
 8007262:	462b      	mov	r3, r5
 8007264:	1814      	adds	r4, r2, r0
 8007266:	64bc      	str	r4, [r7, #72]	; 0x48
 8007268:	414b      	adcs	r3, r1
 800726a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800726c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	4618      	mov	r0, r3
 8007272:	f04f 0100 	mov.w	r1, #0
 8007276:	f04f 0200 	mov.w	r2, #0
 800727a:	f04f 0300 	mov.w	r3, #0
 800727e:	008b      	lsls	r3, r1, #2
 8007280:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007284:	0082      	lsls	r2, r0, #2
 8007286:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800728a:	f7f9 fcad 	bl	8000be8 <__aeabi_uldivmod>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	4b2f      	ldr	r3, [pc, #188]	; (8007350 <UART_SetConfig+0x38c>)
 8007294:	fba3 1302 	umull	r1, r3, r3, r2
 8007298:	095b      	lsrs	r3, r3, #5
 800729a:	2164      	movs	r1, #100	; 0x64
 800729c:	fb01 f303 	mul.w	r3, r1, r3
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	3332      	adds	r3, #50	; 0x32
 80072a6:	4a2a      	ldr	r2, [pc, #168]	; (8007350 <UART_SetConfig+0x38c>)
 80072a8:	fba2 2303 	umull	r2, r3, r2, r3
 80072ac:	095b      	lsrs	r3, r3, #5
 80072ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072b2:	441e      	add	r6, r3
 80072b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072b6:	4618      	mov	r0, r3
 80072b8:	f04f 0100 	mov.w	r1, #0
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	1894      	adds	r4, r2, r2
 80072c2:	603c      	str	r4, [r7, #0]
 80072c4:	415b      	adcs	r3, r3
 80072c6:	607b      	str	r3, [r7, #4]
 80072c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072cc:	1812      	adds	r2, r2, r0
 80072ce:	eb41 0303 	adc.w	r3, r1, r3
 80072d2:	f04f 0400 	mov.w	r4, #0
 80072d6:	f04f 0500 	mov.w	r5, #0
 80072da:	00dd      	lsls	r5, r3, #3
 80072dc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80072e0:	00d4      	lsls	r4, r2, #3
 80072e2:	4622      	mov	r2, r4
 80072e4:	462b      	mov	r3, r5
 80072e6:	eb12 0a00 	adds.w	sl, r2, r0
 80072ea:	eb43 0b01 	adc.w	fp, r3, r1
 80072ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f04f 0100 	mov.w	r1, #0
 80072f8:	f04f 0200 	mov.w	r2, #0
 80072fc:	f04f 0300 	mov.w	r3, #0
 8007300:	008b      	lsls	r3, r1, #2
 8007302:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007306:	0082      	lsls	r2, r0, #2
 8007308:	4650      	mov	r0, sl
 800730a:	4659      	mov	r1, fp
 800730c:	f7f9 fc6c 	bl	8000be8 <__aeabi_uldivmod>
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	4b0e      	ldr	r3, [pc, #56]	; (8007350 <UART_SetConfig+0x38c>)
 8007316:	fba3 1302 	umull	r1, r3, r3, r2
 800731a:	095b      	lsrs	r3, r3, #5
 800731c:	2164      	movs	r1, #100	; 0x64
 800731e:	fb01 f303 	mul.w	r3, r1, r3
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	3332      	adds	r3, #50	; 0x32
 8007328:	4a09      	ldr	r2, [pc, #36]	; (8007350 <UART_SetConfig+0x38c>)
 800732a:	fba2 2303 	umull	r2, r3, r2, r3
 800732e:	095b      	lsrs	r3, r3, #5
 8007330:	f003 020f 	and.w	r2, r3, #15
 8007334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4432      	add	r2, r6
 800733a:	609a      	str	r2, [r3, #8]
}
 800733c:	bf00      	nop
 800733e:	377c      	adds	r7, #124	; 0x7c
 8007340:	46bd      	mov	sp, r7
 8007342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007346:	bf00      	nop
 8007348:	40011000 	.word	0x40011000
 800734c:	40011400 	.word	0x40011400
 8007350:	51eb851f 	.word	0x51eb851f

08007354 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	4b20      	ldr	r3, [pc, #128]	; (80073f4 <FSMC_NORSRAM_Init+0xa0>)
 8007372:	4013      	ands	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800737e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007384:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800738a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007390:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007396:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800739c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80073a2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80073a8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80073ae:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80073b4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80073ba:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80073c0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	2b08      	cmp	r3, #8
 80073ce:	d103      	bne.n	80073d8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073d6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68f9      	ldr	r1, [r7, #12]
 80073e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	fff00080 	.word	0xfff00080

080073f8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007412:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800741a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007426:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800742e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007436:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	3b01      	subs	r3, #1
 800743e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007440:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	3b02      	subs	r3, #2
 8007448:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800744a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007450:	4313      	orrs	r3, r2
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	4313      	orrs	r3, r2
 8007456:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6979      	ldr	r1, [r7, #20]
 8007460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
	...

08007474 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800748c:	d122      	bne.n	80074d4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007496:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	4b15      	ldr	r3, [pc, #84]	; (80074f0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800749c:	4013      	ands	r3, r2
 800749e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80074aa:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80074b2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80074ba:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80074c0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6979      	ldr	r1, [r7, #20]
 80074ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80074d2:	e005      	b.n	80074e0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80074dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	371c      	adds	r7, #28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	cff00000 	.word	0xcff00000

080074f4 <__errno>:
 80074f4:	4b01      	ldr	r3, [pc, #4]	; (80074fc <__errno+0x8>)
 80074f6:	6818      	ldr	r0, [r3, #0]
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	20000014 	.word	0x20000014

08007500 <__libc_init_array>:
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	4d0d      	ldr	r5, [pc, #52]	; (8007538 <__libc_init_array+0x38>)
 8007504:	4c0d      	ldr	r4, [pc, #52]	; (800753c <__libc_init_array+0x3c>)
 8007506:	1b64      	subs	r4, r4, r5
 8007508:	10a4      	asrs	r4, r4, #2
 800750a:	2600      	movs	r6, #0
 800750c:	42a6      	cmp	r6, r4
 800750e:	d109      	bne.n	8007524 <__libc_init_array+0x24>
 8007510:	4d0b      	ldr	r5, [pc, #44]	; (8007540 <__libc_init_array+0x40>)
 8007512:	4c0c      	ldr	r4, [pc, #48]	; (8007544 <__libc_init_array+0x44>)
 8007514:	f002 fd0a 	bl	8009f2c <_init>
 8007518:	1b64      	subs	r4, r4, r5
 800751a:	10a4      	asrs	r4, r4, #2
 800751c:	2600      	movs	r6, #0
 800751e:	42a6      	cmp	r6, r4
 8007520:	d105      	bne.n	800752e <__libc_init_array+0x2e>
 8007522:	bd70      	pop	{r4, r5, r6, pc}
 8007524:	f855 3b04 	ldr.w	r3, [r5], #4
 8007528:	4798      	blx	r3
 800752a:	3601      	adds	r6, #1
 800752c:	e7ee      	b.n	800750c <__libc_init_array+0xc>
 800752e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007532:	4798      	blx	r3
 8007534:	3601      	adds	r6, #1
 8007536:	e7f2      	b.n	800751e <__libc_init_array+0x1e>
 8007538:	08017144 	.word	0x08017144
 800753c:	08017144 	.word	0x08017144
 8007540:	08017144 	.word	0x08017144
 8007544:	08017148 	.word	0x08017148

08007548 <memset>:
 8007548:	4402      	add	r2, r0
 800754a:	4603      	mov	r3, r0
 800754c:	4293      	cmp	r3, r2
 800754e:	d100      	bne.n	8007552 <memset+0xa>
 8007550:	4770      	bx	lr
 8007552:	f803 1b01 	strb.w	r1, [r3], #1
 8007556:	e7f9      	b.n	800754c <memset+0x4>

08007558 <__cvt>:
 8007558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800755c:	ec55 4b10 	vmov	r4, r5, d0
 8007560:	2d00      	cmp	r5, #0
 8007562:	460e      	mov	r6, r1
 8007564:	4619      	mov	r1, r3
 8007566:	462b      	mov	r3, r5
 8007568:	bfbb      	ittet	lt
 800756a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800756e:	461d      	movlt	r5, r3
 8007570:	2300      	movge	r3, #0
 8007572:	232d      	movlt	r3, #45	; 0x2d
 8007574:	700b      	strb	r3, [r1, #0]
 8007576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007578:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800757c:	4691      	mov	r9, r2
 800757e:	f023 0820 	bic.w	r8, r3, #32
 8007582:	bfbc      	itt	lt
 8007584:	4622      	movlt	r2, r4
 8007586:	4614      	movlt	r4, r2
 8007588:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800758c:	d005      	beq.n	800759a <__cvt+0x42>
 800758e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007592:	d100      	bne.n	8007596 <__cvt+0x3e>
 8007594:	3601      	adds	r6, #1
 8007596:	2102      	movs	r1, #2
 8007598:	e000      	b.n	800759c <__cvt+0x44>
 800759a:	2103      	movs	r1, #3
 800759c:	ab03      	add	r3, sp, #12
 800759e:	9301      	str	r3, [sp, #4]
 80075a0:	ab02      	add	r3, sp, #8
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	ec45 4b10 	vmov	d0, r4, r5
 80075a8:	4653      	mov	r3, sl
 80075aa:	4632      	mov	r2, r6
 80075ac:	f000 fce4 	bl	8007f78 <_dtoa_r>
 80075b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80075b4:	4607      	mov	r7, r0
 80075b6:	d102      	bne.n	80075be <__cvt+0x66>
 80075b8:	f019 0f01 	tst.w	r9, #1
 80075bc:	d022      	beq.n	8007604 <__cvt+0xac>
 80075be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075c2:	eb07 0906 	add.w	r9, r7, r6
 80075c6:	d110      	bne.n	80075ea <__cvt+0x92>
 80075c8:	783b      	ldrb	r3, [r7, #0]
 80075ca:	2b30      	cmp	r3, #48	; 0x30
 80075cc:	d10a      	bne.n	80075e4 <__cvt+0x8c>
 80075ce:	2200      	movs	r2, #0
 80075d0:	2300      	movs	r3, #0
 80075d2:	4620      	mov	r0, r4
 80075d4:	4629      	mov	r1, r5
 80075d6:	f7f9 fa77 	bl	8000ac8 <__aeabi_dcmpeq>
 80075da:	b918      	cbnz	r0, 80075e4 <__cvt+0x8c>
 80075dc:	f1c6 0601 	rsb	r6, r6, #1
 80075e0:	f8ca 6000 	str.w	r6, [sl]
 80075e4:	f8da 3000 	ldr.w	r3, [sl]
 80075e8:	4499      	add	r9, r3
 80075ea:	2200      	movs	r2, #0
 80075ec:	2300      	movs	r3, #0
 80075ee:	4620      	mov	r0, r4
 80075f0:	4629      	mov	r1, r5
 80075f2:	f7f9 fa69 	bl	8000ac8 <__aeabi_dcmpeq>
 80075f6:	b108      	cbz	r0, 80075fc <__cvt+0xa4>
 80075f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80075fc:	2230      	movs	r2, #48	; 0x30
 80075fe:	9b03      	ldr	r3, [sp, #12]
 8007600:	454b      	cmp	r3, r9
 8007602:	d307      	bcc.n	8007614 <__cvt+0xbc>
 8007604:	9b03      	ldr	r3, [sp, #12]
 8007606:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007608:	1bdb      	subs	r3, r3, r7
 800760a:	4638      	mov	r0, r7
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	b004      	add	sp, #16
 8007610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007614:	1c59      	adds	r1, r3, #1
 8007616:	9103      	str	r1, [sp, #12]
 8007618:	701a      	strb	r2, [r3, #0]
 800761a:	e7f0      	b.n	80075fe <__cvt+0xa6>

0800761c <__exponent>:
 800761c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800761e:	4603      	mov	r3, r0
 8007620:	2900      	cmp	r1, #0
 8007622:	bfb8      	it	lt
 8007624:	4249      	neglt	r1, r1
 8007626:	f803 2b02 	strb.w	r2, [r3], #2
 800762a:	bfb4      	ite	lt
 800762c:	222d      	movlt	r2, #45	; 0x2d
 800762e:	222b      	movge	r2, #43	; 0x2b
 8007630:	2909      	cmp	r1, #9
 8007632:	7042      	strb	r2, [r0, #1]
 8007634:	dd2a      	ble.n	800768c <__exponent+0x70>
 8007636:	f10d 0407 	add.w	r4, sp, #7
 800763a:	46a4      	mov	ip, r4
 800763c:	270a      	movs	r7, #10
 800763e:	46a6      	mov	lr, r4
 8007640:	460a      	mov	r2, r1
 8007642:	fb91 f6f7 	sdiv	r6, r1, r7
 8007646:	fb07 1516 	mls	r5, r7, r6, r1
 800764a:	3530      	adds	r5, #48	; 0x30
 800764c:	2a63      	cmp	r2, #99	; 0x63
 800764e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007652:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007656:	4631      	mov	r1, r6
 8007658:	dcf1      	bgt.n	800763e <__exponent+0x22>
 800765a:	3130      	adds	r1, #48	; 0x30
 800765c:	f1ae 0502 	sub.w	r5, lr, #2
 8007660:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007664:	1c44      	adds	r4, r0, #1
 8007666:	4629      	mov	r1, r5
 8007668:	4561      	cmp	r1, ip
 800766a:	d30a      	bcc.n	8007682 <__exponent+0x66>
 800766c:	f10d 0209 	add.w	r2, sp, #9
 8007670:	eba2 020e 	sub.w	r2, r2, lr
 8007674:	4565      	cmp	r5, ip
 8007676:	bf88      	it	hi
 8007678:	2200      	movhi	r2, #0
 800767a:	4413      	add	r3, r2
 800767c:	1a18      	subs	r0, r3, r0
 800767e:	b003      	add	sp, #12
 8007680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007686:	f804 2f01 	strb.w	r2, [r4, #1]!
 800768a:	e7ed      	b.n	8007668 <__exponent+0x4c>
 800768c:	2330      	movs	r3, #48	; 0x30
 800768e:	3130      	adds	r1, #48	; 0x30
 8007690:	7083      	strb	r3, [r0, #2]
 8007692:	70c1      	strb	r1, [r0, #3]
 8007694:	1d03      	adds	r3, r0, #4
 8007696:	e7f1      	b.n	800767c <__exponent+0x60>

08007698 <_printf_float>:
 8007698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769c:	ed2d 8b02 	vpush	{d8}
 80076a0:	b08d      	sub	sp, #52	; 0x34
 80076a2:	460c      	mov	r4, r1
 80076a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80076a8:	4616      	mov	r6, r2
 80076aa:	461f      	mov	r7, r3
 80076ac:	4605      	mov	r5, r0
 80076ae:	f001 fb45 	bl	8008d3c <_localeconv_r>
 80076b2:	f8d0 a000 	ldr.w	sl, [r0]
 80076b6:	4650      	mov	r0, sl
 80076b8:	f7f8 fd8a 	bl	80001d0 <strlen>
 80076bc:	2300      	movs	r3, #0
 80076be:	930a      	str	r3, [sp, #40]	; 0x28
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	9305      	str	r3, [sp, #20]
 80076c4:	f8d8 3000 	ldr.w	r3, [r8]
 80076c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80076cc:	3307      	adds	r3, #7
 80076ce:	f023 0307 	bic.w	r3, r3, #7
 80076d2:	f103 0208 	add.w	r2, r3, #8
 80076d6:	f8c8 2000 	str.w	r2, [r8]
 80076da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80076e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80076e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80076ea:	9307      	str	r3, [sp, #28]
 80076ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80076f0:	ee08 0a10 	vmov	s16, r0
 80076f4:	4b9f      	ldr	r3, [pc, #636]	; (8007974 <_printf_float+0x2dc>)
 80076f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076fa:	f04f 32ff 	mov.w	r2, #4294967295
 80076fe:	f7f9 fa15 	bl	8000b2c <__aeabi_dcmpun>
 8007702:	bb88      	cbnz	r0, 8007768 <_printf_float+0xd0>
 8007704:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007708:	4b9a      	ldr	r3, [pc, #616]	; (8007974 <_printf_float+0x2dc>)
 800770a:	f04f 32ff 	mov.w	r2, #4294967295
 800770e:	f7f9 f9ef 	bl	8000af0 <__aeabi_dcmple>
 8007712:	bb48      	cbnz	r0, 8007768 <_printf_float+0xd0>
 8007714:	2200      	movs	r2, #0
 8007716:	2300      	movs	r3, #0
 8007718:	4640      	mov	r0, r8
 800771a:	4649      	mov	r1, r9
 800771c:	f7f9 f9de 	bl	8000adc <__aeabi_dcmplt>
 8007720:	b110      	cbz	r0, 8007728 <_printf_float+0x90>
 8007722:	232d      	movs	r3, #45	; 0x2d
 8007724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007728:	4b93      	ldr	r3, [pc, #588]	; (8007978 <_printf_float+0x2e0>)
 800772a:	4894      	ldr	r0, [pc, #592]	; (800797c <_printf_float+0x2e4>)
 800772c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007730:	bf94      	ite	ls
 8007732:	4698      	movls	r8, r3
 8007734:	4680      	movhi	r8, r0
 8007736:	2303      	movs	r3, #3
 8007738:	6123      	str	r3, [r4, #16]
 800773a:	9b05      	ldr	r3, [sp, #20]
 800773c:	f023 0204 	bic.w	r2, r3, #4
 8007740:	6022      	str	r2, [r4, #0]
 8007742:	f04f 0900 	mov.w	r9, #0
 8007746:	9700      	str	r7, [sp, #0]
 8007748:	4633      	mov	r3, r6
 800774a:	aa0b      	add	r2, sp, #44	; 0x2c
 800774c:	4621      	mov	r1, r4
 800774e:	4628      	mov	r0, r5
 8007750:	f000 f9d8 	bl	8007b04 <_printf_common>
 8007754:	3001      	adds	r0, #1
 8007756:	f040 8090 	bne.w	800787a <_printf_float+0x1e2>
 800775a:	f04f 30ff 	mov.w	r0, #4294967295
 800775e:	b00d      	add	sp, #52	; 0x34
 8007760:	ecbd 8b02 	vpop	{d8}
 8007764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007768:	4642      	mov	r2, r8
 800776a:	464b      	mov	r3, r9
 800776c:	4640      	mov	r0, r8
 800776e:	4649      	mov	r1, r9
 8007770:	f7f9 f9dc 	bl	8000b2c <__aeabi_dcmpun>
 8007774:	b140      	cbz	r0, 8007788 <_printf_float+0xf0>
 8007776:	464b      	mov	r3, r9
 8007778:	2b00      	cmp	r3, #0
 800777a:	bfbc      	itt	lt
 800777c:	232d      	movlt	r3, #45	; 0x2d
 800777e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007782:	487f      	ldr	r0, [pc, #508]	; (8007980 <_printf_float+0x2e8>)
 8007784:	4b7f      	ldr	r3, [pc, #508]	; (8007984 <_printf_float+0x2ec>)
 8007786:	e7d1      	b.n	800772c <_printf_float+0x94>
 8007788:	6863      	ldr	r3, [r4, #4]
 800778a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800778e:	9206      	str	r2, [sp, #24]
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	d13f      	bne.n	8007814 <_printf_float+0x17c>
 8007794:	2306      	movs	r3, #6
 8007796:	6063      	str	r3, [r4, #4]
 8007798:	9b05      	ldr	r3, [sp, #20]
 800779a:	6861      	ldr	r1, [r4, #4]
 800779c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80077a0:	2300      	movs	r3, #0
 80077a2:	9303      	str	r3, [sp, #12]
 80077a4:	ab0a      	add	r3, sp, #40	; 0x28
 80077a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80077aa:	ab09      	add	r3, sp, #36	; 0x24
 80077ac:	ec49 8b10 	vmov	d0, r8, r9
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	6022      	str	r2, [r4, #0]
 80077b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80077b8:	4628      	mov	r0, r5
 80077ba:	f7ff fecd 	bl	8007558 <__cvt>
 80077be:	9b06      	ldr	r3, [sp, #24]
 80077c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077c2:	2b47      	cmp	r3, #71	; 0x47
 80077c4:	4680      	mov	r8, r0
 80077c6:	d108      	bne.n	80077da <_printf_float+0x142>
 80077c8:	1cc8      	adds	r0, r1, #3
 80077ca:	db02      	blt.n	80077d2 <_printf_float+0x13a>
 80077cc:	6863      	ldr	r3, [r4, #4]
 80077ce:	4299      	cmp	r1, r3
 80077d0:	dd41      	ble.n	8007856 <_printf_float+0x1be>
 80077d2:	f1ab 0b02 	sub.w	fp, fp, #2
 80077d6:	fa5f fb8b 	uxtb.w	fp, fp
 80077da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077de:	d820      	bhi.n	8007822 <_printf_float+0x18a>
 80077e0:	3901      	subs	r1, #1
 80077e2:	465a      	mov	r2, fp
 80077e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80077e8:	9109      	str	r1, [sp, #36]	; 0x24
 80077ea:	f7ff ff17 	bl	800761c <__exponent>
 80077ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077f0:	1813      	adds	r3, r2, r0
 80077f2:	2a01      	cmp	r2, #1
 80077f4:	4681      	mov	r9, r0
 80077f6:	6123      	str	r3, [r4, #16]
 80077f8:	dc02      	bgt.n	8007800 <_printf_float+0x168>
 80077fa:	6822      	ldr	r2, [r4, #0]
 80077fc:	07d2      	lsls	r2, r2, #31
 80077fe:	d501      	bpl.n	8007804 <_printf_float+0x16c>
 8007800:	3301      	adds	r3, #1
 8007802:	6123      	str	r3, [r4, #16]
 8007804:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007808:	2b00      	cmp	r3, #0
 800780a:	d09c      	beq.n	8007746 <_printf_float+0xae>
 800780c:	232d      	movs	r3, #45	; 0x2d
 800780e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007812:	e798      	b.n	8007746 <_printf_float+0xae>
 8007814:	9a06      	ldr	r2, [sp, #24]
 8007816:	2a47      	cmp	r2, #71	; 0x47
 8007818:	d1be      	bne.n	8007798 <_printf_float+0x100>
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1bc      	bne.n	8007798 <_printf_float+0x100>
 800781e:	2301      	movs	r3, #1
 8007820:	e7b9      	b.n	8007796 <_printf_float+0xfe>
 8007822:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007826:	d118      	bne.n	800785a <_printf_float+0x1c2>
 8007828:	2900      	cmp	r1, #0
 800782a:	6863      	ldr	r3, [r4, #4]
 800782c:	dd0b      	ble.n	8007846 <_printf_float+0x1ae>
 800782e:	6121      	str	r1, [r4, #16]
 8007830:	b913      	cbnz	r3, 8007838 <_printf_float+0x1a0>
 8007832:	6822      	ldr	r2, [r4, #0]
 8007834:	07d0      	lsls	r0, r2, #31
 8007836:	d502      	bpl.n	800783e <_printf_float+0x1a6>
 8007838:	3301      	adds	r3, #1
 800783a:	440b      	add	r3, r1
 800783c:	6123      	str	r3, [r4, #16]
 800783e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007840:	f04f 0900 	mov.w	r9, #0
 8007844:	e7de      	b.n	8007804 <_printf_float+0x16c>
 8007846:	b913      	cbnz	r3, 800784e <_printf_float+0x1b6>
 8007848:	6822      	ldr	r2, [r4, #0]
 800784a:	07d2      	lsls	r2, r2, #31
 800784c:	d501      	bpl.n	8007852 <_printf_float+0x1ba>
 800784e:	3302      	adds	r3, #2
 8007850:	e7f4      	b.n	800783c <_printf_float+0x1a4>
 8007852:	2301      	movs	r3, #1
 8007854:	e7f2      	b.n	800783c <_printf_float+0x1a4>
 8007856:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800785a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800785c:	4299      	cmp	r1, r3
 800785e:	db05      	blt.n	800786c <_printf_float+0x1d4>
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	6121      	str	r1, [r4, #16]
 8007864:	07d8      	lsls	r0, r3, #31
 8007866:	d5ea      	bpl.n	800783e <_printf_float+0x1a6>
 8007868:	1c4b      	adds	r3, r1, #1
 800786a:	e7e7      	b.n	800783c <_printf_float+0x1a4>
 800786c:	2900      	cmp	r1, #0
 800786e:	bfd4      	ite	le
 8007870:	f1c1 0202 	rsble	r2, r1, #2
 8007874:	2201      	movgt	r2, #1
 8007876:	4413      	add	r3, r2
 8007878:	e7e0      	b.n	800783c <_printf_float+0x1a4>
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	055a      	lsls	r2, r3, #21
 800787e:	d407      	bmi.n	8007890 <_printf_float+0x1f8>
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	4642      	mov	r2, r8
 8007884:	4631      	mov	r1, r6
 8007886:	4628      	mov	r0, r5
 8007888:	47b8      	blx	r7
 800788a:	3001      	adds	r0, #1
 800788c:	d12c      	bne.n	80078e8 <_printf_float+0x250>
 800788e:	e764      	b.n	800775a <_printf_float+0xc2>
 8007890:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007894:	f240 80e0 	bls.w	8007a58 <_printf_float+0x3c0>
 8007898:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800789c:	2200      	movs	r2, #0
 800789e:	2300      	movs	r3, #0
 80078a0:	f7f9 f912 	bl	8000ac8 <__aeabi_dcmpeq>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d034      	beq.n	8007912 <_printf_float+0x27a>
 80078a8:	4a37      	ldr	r2, [pc, #220]	; (8007988 <_printf_float+0x2f0>)
 80078aa:	2301      	movs	r3, #1
 80078ac:	4631      	mov	r1, r6
 80078ae:	4628      	mov	r0, r5
 80078b0:	47b8      	blx	r7
 80078b2:	3001      	adds	r0, #1
 80078b4:	f43f af51 	beq.w	800775a <_printf_float+0xc2>
 80078b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078bc:	429a      	cmp	r2, r3
 80078be:	db02      	blt.n	80078c6 <_printf_float+0x22e>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	07d8      	lsls	r0, r3, #31
 80078c4:	d510      	bpl.n	80078e8 <_printf_float+0x250>
 80078c6:	ee18 3a10 	vmov	r3, s16
 80078ca:	4652      	mov	r2, sl
 80078cc:	4631      	mov	r1, r6
 80078ce:	4628      	mov	r0, r5
 80078d0:	47b8      	blx	r7
 80078d2:	3001      	adds	r0, #1
 80078d4:	f43f af41 	beq.w	800775a <_printf_float+0xc2>
 80078d8:	f04f 0800 	mov.w	r8, #0
 80078dc:	f104 091a 	add.w	r9, r4, #26
 80078e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078e2:	3b01      	subs	r3, #1
 80078e4:	4543      	cmp	r3, r8
 80078e6:	dc09      	bgt.n	80078fc <_printf_float+0x264>
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	079b      	lsls	r3, r3, #30
 80078ec:	f100 8105 	bmi.w	8007afa <_printf_float+0x462>
 80078f0:	68e0      	ldr	r0, [r4, #12]
 80078f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078f4:	4298      	cmp	r0, r3
 80078f6:	bfb8      	it	lt
 80078f8:	4618      	movlt	r0, r3
 80078fa:	e730      	b.n	800775e <_printf_float+0xc6>
 80078fc:	2301      	movs	r3, #1
 80078fe:	464a      	mov	r2, r9
 8007900:	4631      	mov	r1, r6
 8007902:	4628      	mov	r0, r5
 8007904:	47b8      	blx	r7
 8007906:	3001      	adds	r0, #1
 8007908:	f43f af27 	beq.w	800775a <_printf_float+0xc2>
 800790c:	f108 0801 	add.w	r8, r8, #1
 8007910:	e7e6      	b.n	80078e0 <_printf_float+0x248>
 8007912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007914:	2b00      	cmp	r3, #0
 8007916:	dc39      	bgt.n	800798c <_printf_float+0x2f4>
 8007918:	4a1b      	ldr	r2, [pc, #108]	; (8007988 <_printf_float+0x2f0>)
 800791a:	2301      	movs	r3, #1
 800791c:	4631      	mov	r1, r6
 800791e:	4628      	mov	r0, r5
 8007920:	47b8      	blx	r7
 8007922:	3001      	adds	r0, #1
 8007924:	f43f af19 	beq.w	800775a <_printf_float+0xc2>
 8007928:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800792c:	4313      	orrs	r3, r2
 800792e:	d102      	bne.n	8007936 <_printf_float+0x29e>
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	07d9      	lsls	r1, r3, #31
 8007934:	d5d8      	bpl.n	80078e8 <_printf_float+0x250>
 8007936:	ee18 3a10 	vmov	r3, s16
 800793a:	4652      	mov	r2, sl
 800793c:	4631      	mov	r1, r6
 800793e:	4628      	mov	r0, r5
 8007940:	47b8      	blx	r7
 8007942:	3001      	adds	r0, #1
 8007944:	f43f af09 	beq.w	800775a <_printf_float+0xc2>
 8007948:	f04f 0900 	mov.w	r9, #0
 800794c:	f104 0a1a 	add.w	sl, r4, #26
 8007950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007952:	425b      	negs	r3, r3
 8007954:	454b      	cmp	r3, r9
 8007956:	dc01      	bgt.n	800795c <_printf_float+0x2c4>
 8007958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800795a:	e792      	b.n	8007882 <_printf_float+0x1ea>
 800795c:	2301      	movs	r3, #1
 800795e:	4652      	mov	r2, sl
 8007960:	4631      	mov	r1, r6
 8007962:	4628      	mov	r0, r5
 8007964:	47b8      	blx	r7
 8007966:	3001      	adds	r0, #1
 8007968:	f43f aef7 	beq.w	800775a <_printf_float+0xc2>
 800796c:	f109 0901 	add.w	r9, r9, #1
 8007970:	e7ee      	b.n	8007950 <_printf_float+0x2b8>
 8007972:	bf00      	nop
 8007974:	7fefffff 	.word	0x7fefffff
 8007978:	08016d5c 	.word	0x08016d5c
 800797c:	08016d60 	.word	0x08016d60
 8007980:	08016d68 	.word	0x08016d68
 8007984:	08016d64 	.word	0x08016d64
 8007988:	08016d6c 	.word	0x08016d6c
 800798c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800798e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007990:	429a      	cmp	r2, r3
 8007992:	bfa8      	it	ge
 8007994:	461a      	movge	r2, r3
 8007996:	2a00      	cmp	r2, #0
 8007998:	4691      	mov	r9, r2
 800799a:	dc37      	bgt.n	8007a0c <_printf_float+0x374>
 800799c:	f04f 0b00 	mov.w	fp, #0
 80079a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079a4:	f104 021a 	add.w	r2, r4, #26
 80079a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079aa:	9305      	str	r3, [sp, #20]
 80079ac:	eba3 0309 	sub.w	r3, r3, r9
 80079b0:	455b      	cmp	r3, fp
 80079b2:	dc33      	bgt.n	8007a1c <_printf_float+0x384>
 80079b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079b8:	429a      	cmp	r2, r3
 80079ba:	db3b      	blt.n	8007a34 <_printf_float+0x39c>
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	07da      	lsls	r2, r3, #31
 80079c0:	d438      	bmi.n	8007a34 <_printf_float+0x39c>
 80079c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079c4:	9b05      	ldr	r3, [sp, #20]
 80079c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	eba2 0901 	sub.w	r9, r2, r1
 80079ce:	4599      	cmp	r9, r3
 80079d0:	bfa8      	it	ge
 80079d2:	4699      	movge	r9, r3
 80079d4:	f1b9 0f00 	cmp.w	r9, #0
 80079d8:	dc35      	bgt.n	8007a46 <_printf_float+0x3ae>
 80079da:	f04f 0800 	mov.w	r8, #0
 80079de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079e2:	f104 0a1a 	add.w	sl, r4, #26
 80079e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079ea:	1a9b      	subs	r3, r3, r2
 80079ec:	eba3 0309 	sub.w	r3, r3, r9
 80079f0:	4543      	cmp	r3, r8
 80079f2:	f77f af79 	ble.w	80078e8 <_printf_float+0x250>
 80079f6:	2301      	movs	r3, #1
 80079f8:	4652      	mov	r2, sl
 80079fa:	4631      	mov	r1, r6
 80079fc:	4628      	mov	r0, r5
 80079fe:	47b8      	blx	r7
 8007a00:	3001      	adds	r0, #1
 8007a02:	f43f aeaa 	beq.w	800775a <_printf_float+0xc2>
 8007a06:	f108 0801 	add.w	r8, r8, #1
 8007a0a:	e7ec      	b.n	80079e6 <_printf_float+0x34e>
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	4631      	mov	r1, r6
 8007a10:	4642      	mov	r2, r8
 8007a12:	4628      	mov	r0, r5
 8007a14:	47b8      	blx	r7
 8007a16:	3001      	adds	r0, #1
 8007a18:	d1c0      	bne.n	800799c <_printf_float+0x304>
 8007a1a:	e69e      	b.n	800775a <_printf_float+0xc2>
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	4631      	mov	r1, r6
 8007a20:	4628      	mov	r0, r5
 8007a22:	9205      	str	r2, [sp, #20]
 8007a24:	47b8      	blx	r7
 8007a26:	3001      	adds	r0, #1
 8007a28:	f43f ae97 	beq.w	800775a <_printf_float+0xc2>
 8007a2c:	9a05      	ldr	r2, [sp, #20]
 8007a2e:	f10b 0b01 	add.w	fp, fp, #1
 8007a32:	e7b9      	b.n	80079a8 <_printf_float+0x310>
 8007a34:	ee18 3a10 	vmov	r3, s16
 8007a38:	4652      	mov	r2, sl
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	47b8      	blx	r7
 8007a40:	3001      	adds	r0, #1
 8007a42:	d1be      	bne.n	80079c2 <_printf_float+0x32a>
 8007a44:	e689      	b.n	800775a <_printf_float+0xc2>
 8007a46:	9a05      	ldr	r2, [sp, #20]
 8007a48:	464b      	mov	r3, r9
 8007a4a:	4442      	add	r2, r8
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	4628      	mov	r0, r5
 8007a50:	47b8      	blx	r7
 8007a52:	3001      	adds	r0, #1
 8007a54:	d1c1      	bne.n	80079da <_printf_float+0x342>
 8007a56:	e680      	b.n	800775a <_printf_float+0xc2>
 8007a58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a5a:	2a01      	cmp	r2, #1
 8007a5c:	dc01      	bgt.n	8007a62 <_printf_float+0x3ca>
 8007a5e:	07db      	lsls	r3, r3, #31
 8007a60:	d538      	bpl.n	8007ad4 <_printf_float+0x43c>
 8007a62:	2301      	movs	r3, #1
 8007a64:	4642      	mov	r2, r8
 8007a66:	4631      	mov	r1, r6
 8007a68:	4628      	mov	r0, r5
 8007a6a:	47b8      	blx	r7
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	f43f ae74 	beq.w	800775a <_printf_float+0xc2>
 8007a72:	ee18 3a10 	vmov	r3, s16
 8007a76:	4652      	mov	r2, sl
 8007a78:	4631      	mov	r1, r6
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	47b8      	blx	r7
 8007a7e:	3001      	adds	r0, #1
 8007a80:	f43f ae6b 	beq.w	800775a <_printf_float+0xc2>
 8007a84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a88:	2200      	movs	r2, #0
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	f7f9 f81c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a90:	b9d8      	cbnz	r0, 8007aca <_printf_float+0x432>
 8007a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a94:	f108 0201 	add.w	r2, r8, #1
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	4631      	mov	r1, r6
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	47b8      	blx	r7
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d10e      	bne.n	8007ac2 <_printf_float+0x42a>
 8007aa4:	e659      	b.n	800775a <_printf_float+0xc2>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	4652      	mov	r2, sl
 8007aaa:	4631      	mov	r1, r6
 8007aac:	4628      	mov	r0, r5
 8007aae:	47b8      	blx	r7
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	f43f ae52 	beq.w	800775a <_printf_float+0xc2>
 8007ab6:	f108 0801 	add.w	r8, r8, #1
 8007aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007abc:	3b01      	subs	r3, #1
 8007abe:	4543      	cmp	r3, r8
 8007ac0:	dcf1      	bgt.n	8007aa6 <_printf_float+0x40e>
 8007ac2:	464b      	mov	r3, r9
 8007ac4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ac8:	e6dc      	b.n	8007884 <_printf_float+0x1ec>
 8007aca:	f04f 0800 	mov.w	r8, #0
 8007ace:	f104 0a1a 	add.w	sl, r4, #26
 8007ad2:	e7f2      	b.n	8007aba <_printf_float+0x422>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	4642      	mov	r2, r8
 8007ad8:	e7df      	b.n	8007a9a <_printf_float+0x402>
 8007ada:	2301      	movs	r3, #1
 8007adc:	464a      	mov	r2, r9
 8007ade:	4631      	mov	r1, r6
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	47b8      	blx	r7
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	f43f ae38 	beq.w	800775a <_printf_float+0xc2>
 8007aea:	f108 0801 	add.w	r8, r8, #1
 8007aee:	68e3      	ldr	r3, [r4, #12]
 8007af0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007af2:	1a5b      	subs	r3, r3, r1
 8007af4:	4543      	cmp	r3, r8
 8007af6:	dcf0      	bgt.n	8007ada <_printf_float+0x442>
 8007af8:	e6fa      	b.n	80078f0 <_printf_float+0x258>
 8007afa:	f04f 0800 	mov.w	r8, #0
 8007afe:	f104 0919 	add.w	r9, r4, #25
 8007b02:	e7f4      	b.n	8007aee <_printf_float+0x456>

08007b04 <_printf_common>:
 8007b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b08:	4616      	mov	r6, r2
 8007b0a:	4699      	mov	r9, r3
 8007b0c:	688a      	ldr	r2, [r1, #8]
 8007b0e:	690b      	ldr	r3, [r1, #16]
 8007b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b14:	4293      	cmp	r3, r2
 8007b16:	bfb8      	it	lt
 8007b18:	4613      	movlt	r3, r2
 8007b1a:	6033      	str	r3, [r6, #0]
 8007b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b20:	4607      	mov	r7, r0
 8007b22:	460c      	mov	r4, r1
 8007b24:	b10a      	cbz	r2, 8007b2a <_printf_common+0x26>
 8007b26:	3301      	adds	r3, #1
 8007b28:	6033      	str	r3, [r6, #0]
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	0699      	lsls	r1, r3, #26
 8007b2e:	bf42      	ittt	mi
 8007b30:	6833      	ldrmi	r3, [r6, #0]
 8007b32:	3302      	addmi	r3, #2
 8007b34:	6033      	strmi	r3, [r6, #0]
 8007b36:	6825      	ldr	r5, [r4, #0]
 8007b38:	f015 0506 	ands.w	r5, r5, #6
 8007b3c:	d106      	bne.n	8007b4c <_printf_common+0x48>
 8007b3e:	f104 0a19 	add.w	sl, r4, #25
 8007b42:	68e3      	ldr	r3, [r4, #12]
 8007b44:	6832      	ldr	r2, [r6, #0]
 8007b46:	1a9b      	subs	r3, r3, r2
 8007b48:	42ab      	cmp	r3, r5
 8007b4a:	dc26      	bgt.n	8007b9a <_printf_common+0x96>
 8007b4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b50:	1e13      	subs	r3, r2, #0
 8007b52:	6822      	ldr	r2, [r4, #0]
 8007b54:	bf18      	it	ne
 8007b56:	2301      	movne	r3, #1
 8007b58:	0692      	lsls	r2, r2, #26
 8007b5a:	d42b      	bmi.n	8007bb4 <_printf_common+0xb0>
 8007b5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b60:	4649      	mov	r1, r9
 8007b62:	4638      	mov	r0, r7
 8007b64:	47c0      	blx	r8
 8007b66:	3001      	adds	r0, #1
 8007b68:	d01e      	beq.n	8007ba8 <_printf_common+0xa4>
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	68e5      	ldr	r5, [r4, #12]
 8007b6e:	6832      	ldr	r2, [r6, #0]
 8007b70:	f003 0306 	and.w	r3, r3, #6
 8007b74:	2b04      	cmp	r3, #4
 8007b76:	bf08      	it	eq
 8007b78:	1aad      	subeq	r5, r5, r2
 8007b7a:	68a3      	ldr	r3, [r4, #8]
 8007b7c:	6922      	ldr	r2, [r4, #16]
 8007b7e:	bf0c      	ite	eq
 8007b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b84:	2500      	movne	r5, #0
 8007b86:	4293      	cmp	r3, r2
 8007b88:	bfc4      	itt	gt
 8007b8a:	1a9b      	subgt	r3, r3, r2
 8007b8c:	18ed      	addgt	r5, r5, r3
 8007b8e:	2600      	movs	r6, #0
 8007b90:	341a      	adds	r4, #26
 8007b92:	42b5      	cmp	r5, r6
 8007b94:	d11a      	bne.n	8007bcc <_printf_common+0xc8>
 8007b96:	2000      	movs	r0, #0
 8007b98:	e008      	b.n	8007bac <_printf_common+0xa8>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	4652      	mov	r2, sl
 8007b9e:	4649      	mov	r1, r9
 8007ba0:	4638      	mov	r0, r7
 8007ba2:	47c0      	blx	r8
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	d103      	bne.n	8007bb0 <_printf_common+0xac>
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb0:	3501      	adds	r5, #1
 8007bb2:	e7c6      	b.n	8007b42 <_printf_common+0x3e>
 8007bb4:	18e1      	adds	r1, r4, r3
 8007bb6:	1c5a      	adds	r2, r3, #1
 8007bb8:	2030      	movs	r0, #48	; 0x30
 8007bba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bbe:	4422      	add	r2, r4
 8007bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bc8:	3302      	adds	r3, #2
 8007bca:	e7c7      	b.n	8007b5c <_printf_common+0x58>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	4622      	mov	r2, r4
 8007bd0:	4649      	mov	r1, r9
 8007bd2:	4638      	mov	r0, r7
 8007bd4:	47c0      	blx	r8
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	d0e6      	beq.n	8007ba8 <_printf_common+0xa4>
 8007bda:	3601      	adds	r6, #1
 8007bdc:	e7d9      	b.n	8007b92 <_printf_common+0x8e>
	...

08007be0 <_printf_i>:
 8007be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007be4:	460c      	mov	r4, r1
 8007be6:	4691      	mov	r9, r2
 8007be8:	7e27      	ldrb	r7, [r4, #24]
 8007bea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007bec:	2f78      	cmp	r7, #120	; 0x78
 8007bee:	4680      	mov	r8, r0
 8007bf0:	469a      	mov	sl, r3
 8007bf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bf6:	d807      	bhi.n	8007c08 <_printf_i+0x28>
 8007bf8:	2f62      	cmp	r7, #98	; 0x62
 8007bfa:	d80a      	bhi.n	8007c12 <_printf_i+0x32>
 8007bfc:	2f00      	cmp	r7, #0
 8007bfe:	f000 80d8 	beq.w	8007db2 <_printf_i+0x1d2>
 8007c02:	2f58      	cmp	r7, #88	; 0x58
 8007c04:	f000 80a3 	beq.w	8007d4e <_printf_i+0x16e>
 8007c08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c10:	e03a      	b.n	8007c88 <_printf_i+0xa8>
 8007c12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c16:	2b15      	cmp	r3, #21
 8007c18:	d8f6      	bhi.n	8007c08 <_printf_i+0x28>
 8007c1a:	a001      	add	r0, pc, #4	; (adr r0, 8007c20 <_printf_i+0x40>)
 8007c1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007c20:	08007c79 	.word	0x08007c79
 8007c24:	08007c8d 	.word	0x08007c8d
 8007c28:	08007c09 	.word	0x08007c09
 8007c2c:	08007c09 	.word	0x08007c09
 8007c30:	08007c09 	.word	0x08007c09
 8007c34:	08007c09 	.word	0x08007c09
 8007c38:	08007c8d 	.word	0x08007c8d
 8007c3c:	08007c09 	.word	0x08007c09
 8007c40:	08007c09 	.word	0x08007c09
 8007c44:	08007c09 	.word	0x08007c09
 8007c48:	08007c09 	.word	0x08007c09
 8007c4c:	08007d99 	.word	0x08007d99
 8007c50:	08007cbd 	.word	0x08007cbd
 8007c54:	08007d7b 	.word	0x08007d7b
 8007c58:	08007c09 	.word	0x08007c09
 8007c5c:	08007c09 	.word	0x08007c09
 8007c60:	08007dbb 	.word	0x08007dbb
 8007c64:	08007c09 	.word	0x08007c09
 8007c68:	08007cbd 	.word	0x08007cbd
 8007c6c:	08007c09 	.word	0x08007c09
 8007c70:	08007c09 	.word	0x08007c09
 8007c74:	08007d83 	.word	0x08007d83
 8007c78:	680b      	ldr	r3, [r1, #0]
 8007c7a:	1d1a      	adds	r2, r3, #4
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	600a      	str	r2, [r1, #0]
 8007c80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e0a3      	b.n	8007dd4 <_printf_i+0x1f4>
 8007c8c:	6825      	ldr	r5, [r4, #0]
 8007c8e:	6808      	ldr	r0, [r1, #0]
 8007c90:	062e      	lsls	r6, r5, #24
 8007c92:	f100 0304 	add.w	r3, r0, #4
 8007c96:	d50a      	bpl.n	8007cae <_printf_i+0xce>
 8007c98:	6805      	ldr	r5, [r0, #0]
 8007c9a:	600b      	str	r3, [r1, #0]
 8007c9c:	2d00      	cmp	r5, #0
 8007c9e:	da03      	bge.n	8007ca8 <_printf_i+0xc8>
 8007ca0:	232d      	movs	r3, #45	; 0x2d
 8007ca2:	426d      	negs	r5, r5
 8007ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ca8:	485e      	ldr	r0, [pc, #376]	; (8007e24 <_printf_i+0x244>)
 8007caa:	230a      	movs	r3, #10
 8007cac:	e019      	b.n	8007ce2 <_printf_i+0x102>
 8007cae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007cb2:	6805      	ldr	r5, [r0, #0]
 8007cb4:	600b      	str	r3, [r1, #0]
 8007cb6:	bf18      	it	ne
 8007cb8:	b22d      	sxthne	r5, r5
 8007cba:	e7ef      	b.n	8007c9c <_printf_i+0xbc>
 8007cbc:	680b      	ldr	r3, [r1, #0]
 8007cbe:	6825      	ldr	r5, [r4, #0]
 8007cc0:	1d18      	adds	r0, r3, #4
 8007cc2:	6008      	str	r0, [r1, #0]
 8007cc4:	0628      	lsls	r0, r5, #24
 8007cc6:	d501      	bpl.n	8007ccc <_printf_i+0xec>
 8007cc8:	681d      	ldr	r5, [r3, #0]
 8007cca:	e002      	b.n	8007cd2 <_printf_i+0xf2>
 8007ccc:	0669      	lsls	r1, r5, #25
 8007cce:	d5fb      	bpl.n	8007cc8 <_printf_i+0xe8>
 8007cd0:	881d      	ldrh	r5, [r3, #0]
 8007cd2:	4854      	ldr	r0, [pc, #336]	; (8007e24 <_printf_i+0x244>)
 8007cd4:	2f6f      	cmp	r7, #111	; 0x6f
 8007cd6:	bf0c      	ite	eq
 8007cd8:	2308      	moveq	r3, #8
 8007cda:	230a      	movne	r3, #10
 8007cdc:	2100      	movs	r1, #0
 8007cde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ce2:	6866      	ldr	r6, [r4, #4]
 8007ce4:	60a6      	str	r6, [r4, #8]
 8007ce6:	2e00      	cmp	r6, #0
 8007ce8:	bfa2      	ittt	ge
 8007cea:	6821      	ldrge	r1, [r4, #0]
 8007cec:	f021 0104 	bicge.w	r1, r1, #4
 8007cf0:	6021      	strge	r1, [r4, #0]
 8007cf2:	b90d      	cbnz	r5, 8007cf8 <_printf_i+0x118>
 8007cf4:	2e00      	cmp	r6, #0
 8007cf6:	d04d      	beq.n	8007d94 <_printf_i+0x1b4>
 8007cf8:	4616      	mov	r6, r2
 8007cfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8007cfe:	fb03 5711 	mls	r7, r3, r1, r5
 8007d02:	5dc7      	ldrb	r7, [r0, r7]
 8007d04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d08:	462f      	mov	r7, r5
 8007d0a:	42bb      	cmp	r3, r7
 8007d0c:	460d      	mov	r5, r1
 8007d0e:	d9f4      	bls.n	8007cfa <_printf_i+0x11a>
 8007d10:	2b08      	cmp	r3, #8
 8007d12:	d10b      	bne.n	8007d2c <_printf_i+0x14c>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	07df      	lsls	r7, r3, #31
 8007d18:	d508      	bpl.n	8007d2c <_printf_i+0x14c>
 8007d1a:	6923      	ldr	r3, [r4, #16]
 8007d1c:	6861      	ldr	r1, [r4, #4]
 8007d1e:	4299      	cmp	r1, r3
 8007d20:	bfde      	ittt	le
 8007d22:	2330      	movle	r3, #48	; 0x30
 8007d24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d2c:	1b92      	subs	r2, r2, r6
 8007d2e:	6122      	str	r2, [r4, #16]
 8007d30:	f8cd a000 	str.w	sl, [sp]
 8007d34:	464b      	mov	r3, r9
 8007d36:	aa03      	add	r2, sp, #12
 8007d38:	4621      	mov	r1, r4
 8007d3a:	4640      	mov	r0, r8
 8007d3c:	f7ff fee2 	bl	8007b04 <_printf_common>
 8007d40:	3001      	adds	r0, #1
 8007d42:	d14c      	bne.n	8007dde <_printf_i+0x1fe>
 8007d44:	f04f 30ff 	mov.w	r0, #4294967295
 8007d48:	b004      	add	sp, #16
 8007d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d4e:	4835      	ldr	r0, [pc, #212]	; (8007e24 <_printf_i+0x244>)
 8007d50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	680e      	ldr	r6, [r1, #0]
 8007d58:	061f      	lsls	r7, r3, #24
 8007d5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8007d5e:	600e      	str	r6, [r1, #0]
 8007d60:	d514      	bpl.n	8007d8c <_printf_i+0x1ac>
 8007d62:	07d9      	lsls	r1, r3, #31
 8007d64:	bf44      	itt	mi
 8007d66:	f043 0320 	orrmi.w	r3, r3, #32
 8007d6a:	6023      	strmi	r3, [r4, #0]
 8007d6c:	b91d      	cbnz	r5, 8007d76 <_printf_i+0x196>
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	f023 0320 	bic.w	r3, r3, #32
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	2310      	movs	r3, #16
 8007d78:	e7b0      	b.n	8007cdc <_printf_i+0xfc>
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	f043 0320 	orr.w	r3, r3, #32
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	2378      	movs	r3, #120	; 0x78
 8007d84:	4828      	ldr	r0, [pc, #160]	; (8007e28 <_printf_i+0x248>)
 8007d86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d8a:	e7e3      	b.n	8007d54 <_printf_i+0x174>
 8007d8c:	065e      	lsls	r6, r3, #25
 8007d8e:	bf48      	it	mi
 8007d90:	b2ad      	uxthmi	r5, r5
 8007d92:	e7e6      	b.n	8007d62 <_printf_i+0x182>
 8007d94:	4616      	mov	r6, r2
 8007d96:	e7bb      	b.n	8007d10 <_printf_i+0x130>
 8007d98:	680b      	ldr	r3, [r1, #0]
 8007d9a:	6826      	ldr	r6, [r4, #0]
 8007d9c:	6960      	ldr	r0, [r4, #20]
 8007d9e:	1d1d      	adds	r5, r3, #4
 8007da0:	600d      	str	r5, [r1, #0]
 8007da2:	0635      	lsls	r5, r6, #24
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	d501      	bpl.n	8007dac <_printf_i+0x1cc>
 8007da8:	6018      	str	r0, [r3, #0]
 8007daa:	e002      	b.n	8007db2 <_printf_i+0x1d2>
 8007dac:	0671      	lsls	r1, r6, #25
 8007dae:	d5fb      	bpl.n	8007da8 <_printf_i+0x1c8>
 8007db0:	8018      	strh	r0, [r3, #0]
 8007db2:	2300      	movs	r3, #0
 8007db4:	6123      	str	r3, [r4, #16]
 8007db6:	4616      	mov	r6, r2
 8007db8:	e7ba      	b.n	8007d30 <_printf_i+0x150>
 8007dba:	680b      	ldr	r3, [r1, #0]
 8007dbc:	1d1a      	adds	r2, r3, #4
 8007dbe:	600a      	str	r2, [r1, #0]
 8007dc0:	681e      	ldr	r6, [r3, #0]
 8007dc2:	6862      	ldr	r2, [r4, #4]
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	f7f8 fa0a 	bl	80001e0 <memchr>
 8007dcc:	b108      	cbz	r0, 8007dd2 <_printf_i+0x1f2>
 8007dce:	1b80      	subs	r0, r0, r6
 8007dd0:	6060      	str	r0, [r4, #4]
 8007dd2:	6863      	ldr	r3, [r4, #4]
 8007dd4:	6123      	str	r3, [r4, #16]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ddc:	e7a8      	b.n	8007d30 <_printf_i+0x150>
 8007dde:	6923      	ldr	r3, [r4, #16]
 8007de0:	4632      	mov	r2, r6
 8007de2:	4649      	mov	r1, r9
 8007de4:	4640      	mov	r0, r8
 8007de6:	47d0      	blx	sl
 8007de8:	3001      	adds	r0, #1
 8007dea:	d0ab      	beq.n	8007d44 <_printf_i+0x164>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	079b      	lsls	r3, r3, #30
 8007df0:	d413      	bmi.n	8007e1a <_printf_i+0x23a>
 8007df2:	68e0      	ldr	r0, [r4, #12]
 8007df4:	9b03      	ldr	r3, [sp, #12]
 8007df6:	4298      	cmp	r0, r3
 8007df8:	bfb8      	it	lt
 8007dfa:	4618      	movlt	r0, r3
 8007dfc:	e7a4      	b.n	8007d48 <_printf_i+0x168>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	4632      	mov	r2, r6
 8007e02:	4649      	mov	r1, r9
 8007e04:	4640      	mov	r0, r8
 8007e06:	47d0      	blx	sl
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d09b      	beq.n	8007d44 <_printf_i+0x164>
 8007e0c:	3501      	adds	r5, #1
 8007e0e:	68e3      	ldr	r3, [r4, #12]
 8007e10:	9903      	ldr	r1, [sp, #12]
 8007e12:	1a5b      	subs	r3, r3, r1
 8007e14:	42ab      	cmp	r3, r5
 8007e16:	dcf2      	bgt.n	8007dfe <_printf_i+0x21e>
 8007e18:	e7eb      	b.n	8007df2 <_printf_i+0x212>
 8007e1a:	2500      	movs	r5, #0
 8007e1c:	f104 0619 	add.w	r6, r4, #25
 8007e20:	e7f5      	b.n	8007e0e <_printf_i+0x22e>
 8007e22:	bf00      	nop
 8007e24:	08016d6e 	.word	0x08016d6e
 8007e28:	08016d7f 	.word	0x08016d7f

08007e2c <iprintf>:
 8007e2c:	b40f      	push	{r0, r1, r2, r3}
 8007e2e:	4b0a      	ldr	r3, [pc, #40]	; (8007e58 <iprintf+0x2c>)
 8007e30:	b513      	push	{r0, r1, r4, lr}
 8007e32:	681c      	ldr	r4, [r3, #0]
 8007e34:	b124      	cbz	r4, 8007e40 <iprintf+0x14>
 8007e36:	69a3      	ldr	r3, [r4, #24]
 8007e38:	b913      	cbnz	r3, 8007e40 <iprintf+0x14>
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 fee0 	bl	8008c00 <__sinit>
 8007e40:	ab05      	add	r3, sp, #20
 8007e42:	9a04      	ldr	r2, [sp, #16]
 8007e44:	68a1      	ldr	r1, [r4, #8]
 8007e46:	9301      	str	r3, [sp, #4]
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f001 fbf7 	bl	800963c <_vfiprintf_r>
 8007e4e:	b002      	add	sp, #8
 8007e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e54:	b004      	add	sp, #16
 8007e56:	4770      	bx	lr
 8007e58:	20000014 	.word	0x20000014

08007e5c <quorem>:
 8007e5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e60:	6903      	ldr	r3, [r0, #16]
 8007e62:	690c      	ldr	r4, [r1, #16]
 8007e64:	42a3      	cmp	r3, r4
 8007e66:	4607      	mov	r7, r0
 8007e68:	f2c0 8081 	blt.w	8007f6e <quorem+0x112>
 8007e6c:	3c01      	subs	r4, #1
 8007e6e:	f101 0814 	add.w	r8, r1, #20
 8007e72:	f100 0514 	add.w	r5, r0, #20
 8007e76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e7a:	9301      	str	r3, [sp, #4]
 8007e7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e84:	3301      	adds	r3, #1
 8007e86:	429a      	cmp	r2, r3
 8007e88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e90:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e94:	d331      	bcc.n	8007efa <quorem+0x9e>
 8007e96:	f04f 0e00 	mov.w	lr, #0
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	46ac      	mov	ip, r5
 8007e9e:	46f2      	mov	sl, lr
 8007ea0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ea4:	b293      	uxth	r3, r2
 8007ea6:	fb06 e303 	mla	r3, r6, r3, lr
 8007eaa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	ebaa 0303 	sub.w	r3, sl, r3
 8007eb4:	0c12      	lsrs	r2, r2, #16
 8007eb6:	f8dc a000 	ldr.w	sl, [ip]
 8007eba:	fb06 e202 	mla	r2, r6, r2, lr
 8007ebe:	fa13 f38a 	uxtah	r3, r3, sl
 8007ec2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ec6:	fa1f fa82 	uxth.w	sl, r2
 8007eca:	f8dc 2000 	ldr.w	r2, [ip]
 8007ece:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007ed2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007edc:	4581      	cmp	r9, r0
 8007ede:	f84c 3b04 	str.w	r3, [ip], #4
 8007ee2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ee6:	d2db      	bcs.n	8007ea0 <quorem+0x44>
 8007ee8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007eec:	b92b      	cbnz	r3, 8007efa <quorem+0x9e>
 8007eee:	9b01      	ldr	r3, [sp, #4]
 8007ef0:	3b04      	subs	r3, #4
 8007ef2:	429d      	cmp	r5, r3
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	d32e      	bcc.n	8007f56 <quorem+0xfa>
 8007ef8:	613c      	str	r4, [r7, #16]
 8007efa:	4638      	mov	r0, r7
 8007efc:	f001 f9ba 	bl	8009274 <__mcmp>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	db24      	blt.n	8007f4e <quorem+0xf2>
 8007f04:	3601      	adds	r6, #1
 8007f06:	4628      	mov	r0, r5
 8007f08:	f04f 0c00 	mov.w	ip, #0
 8007f0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f10:	f8d0 e000 	ldr.w	lr, [r0]
 8007f14:	b293      	uxth	r3, r2
 8007f16:	ebac 0303 	sub.w	r3, ip, r3
 8007f1a:	0c12      	lsrs	r2, r2, #16
 8007f1c:	fa13 f38e 	uxtah	r3, r3, lr
 8007f20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f2e:	45c1      	cmp	r9, r8
 8007f30:	f840 3b04 	str.w	r3, [r0], #4
 8007f34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f38:	d2e8      	bcs.n	8007f0c <quorem+0xb0>
 8007f3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f42:	b922      	cbnz	r2, 8007f4e <quorem+0xf2>
 8007f44:	3b04      	subs	r3, #4
 8007f46:	429d      	cmp	r5, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	d30a      	bcc.n	8007f62 <quorem+0x106>
 8007f4c:	613c      	str	r4, [r7, #16]
 8007f4e:	4630      	mov	r0, r6
 8007f50:	b003      	add	sp, #12
 8007f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f56:	6812      	ldr	r2, [r2, #0]
 8007f58:	3b04      	subs	r3, #4
 8007f5a:	2a00      	cmp	r2, #0
 8007f5c:	d1cc      	bne.n	8007ef8 <quorem+0x9c>
 8007f5e:	3c01      	subs	r4, #1
 8007f60:	e7c7      	b.n	8007ef2 <quorem+0x96>
 8007f62:	6812      	ldr	r2, [r2, #0]
 8007f64:	3b04      	subs	r3, #4
 8007f66:	2a00      	cmp	r2, #0
 8007f68:	d1f0      	bne.n	8007f4c <quorem+0xf0>
 8007f6a:	3c01      	subs	r4, #1
 8007f6c:	e7eb      	b.n	8007f46 <quorem+0xea>
 8007f6e:	2000      	movs	r0, #0
 8007f70:	e7ee      	b.n	8007f50 <quorem+0xf4>
 8007f72:	0000      	movs	r0, r0
 8007f74:	0000      	movs	r0, r0
	...

08007f78 <_dtoa_r>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	ed2d 8b02 	vpush	{d8}
 8007f80:	ec57 6b10 	vmov	r6, r7, d0
 8007f84:	b095      	sub	sp, #84	; 0x54
 8007f86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f8c:	9105      	str	r1, [sp, #20]
 8007f8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007f92:	4604      	mov	r4, r0
 8007f94:	9209      	str	r2, [sp, #36]	; 0x24
 8007f96:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f98:	b975      	cbnz	r5, 8007fb8 <_dtoa_r+0x40>
 8007f9a:	2010      	movs	r0, #16
 8007f9c:	f000 fed6 	bl	8008d4c <malloc>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	6260      	str	r0, [r4, #36]	; 0x24
 8007fa4:	b920      	cbnz	r0, 8007fb0 <_dtoa_r+0x38>
 8007fa6:	4bb2      	ldr	r3, [pc, #712]	; (8008270 <_dtoa_r+0x2f8>)
 8007fa8:	21ea      	movs	r1, #234	; 0xea
 8007faa:	48b2      	ldr	r0, [pc, #712]	; (8008274 <_dtoa_r+0x2fc>)
 8007fac:	f001 fd9c 	bl	8009ae8 <__assert_func>
 8007fb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fb4:	6005      	str	r5, [r0, #0]
 8007fb6:	60c5      	str	r5, [r0, #12]
 8007fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fba:	6819      	ldr	r1, [r3, #0]
 8007fbc:	b151      	cbz	r1, 8007fd4 <_dtoa_r+0x5c>
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	604a      	str	r2, [r1, #4]
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	4093      	lsls	r3, r2
 8007fc6:	608b      	str	r3, [r1, #8]
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f000 ff15 	bl	8008df8 <_Bfree>
 8007fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	1e3b      	subs	r3, r7, #0
 8007fd6:	bfb9      	ittee	lt
 8007fd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fdc:	9303      	strlt	r3, [sp, #12]
 8007fde:	2300      	movge	r3, #0
 8007fe0:	f8c8 3000 	strge.w	r3, [r8]
 8007fe4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007fe8:	4ba3      	ldr	r3, [pc, #652]	; (8008278 <_dtoa_r+0x300>)
 8007fea:	bfbc      	itt	lt
 8007fec:	2201      	movlt	r2, #1
 8007fee:	f8c8 2000 	strlt.w	r2, [r8]
 8007ff2:	ea33 0309 	bics.w	r3, r3, r9
 8007ff6:	d11b      	bne.n	8008030 <_dtoa_r+0xb8>
 8007ff8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ffa:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008004:	4333      	orrs	r3, r6
 8008006:	f000 857a 	beq.w	8008afe <_dtoa_r+0xb86>
 800800a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800800c:	b963      	cbnz	r3, 8008028 <_dtoa_r+0xb0>
 800800e:	4b9b      	ldr	r3, [pc, #620]	; (800827c <_dtoa_r+0x304>)
 8008010:	e024      	b.n	800805c <_dtoa_r+0xe4>
 8008012:	4b9b      	ldr	r3, [pc, #620]	; (8008280 <_dtoa_r+0x308>)
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	3308      	adds	r3, #8
 8008018:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	9800      	ldr	r0, [sp, #0]
 800801e:	b015      	add	sp, #84	; 0x54
 8008020:	ecbd 8b02 	vpop	{d8}
 8008024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008028:	4b94      	ldr	r3, [pc, #592]	; (800827c <_dtoa_r+0x304>)
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	3303      	adds	r3, #3
 800802e:	e7f3      	b.n	8008018 <_dtoa_r+0xa0>
 8008030:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008034:	2200      	movs	r2, #0
 8008036:	ec51 0b17 	vmov	r0, r1, d7
 800803a:	2300      	movs	r3, #0
 800803c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008040:	f7f8 fd42 	bl	8000ac8 <__aeabi_dcmpeq>
 8008044:	4680      	mov	r8, r0
 8008046:	b158      	cbz	r0, 8008060 <_dtoa_r+0xe8>
 8008048:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800804a:	2301      	movs	r3, #1
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 8551 	beq.w	8008af8 <_dtoa_r+0xb80>
 8008056:	488b      	ldr	r0, [pc, #556]	; (8008284 <_dtoa_r+0x30c>)
 8008058:	6018      	str	r0, [r3, #0]
 800805a:	1e43      	subs	r3, r0, #1
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	e7dd      	b.n	800801c <_dtoa_r+0xa4>
 8008060:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008064:	aa12      	add	r2, sp, #72	; 0x48
 8008066:	a913      	add	r1, sp, #76	; 0x4c
 8008068:	4620      	mov	r0, r4
 800806a:	f001 f9a7 	bl	80093bc <__d2b>
 800806e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008072:	4683      	mov	fp, r0
 8008074:	2d00      	cmp	r5, #0
 8008076:	d07c      	beq.n	8008172 <_dtoa_r+0x1fa>
 8008078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800807a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800807e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008082:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008086:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800808a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800808e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008092:	4b7d      	ldr	r3, [pc, #500]	; (8008288 <_dtoa_r+0x310>)
 8008094:	2200      	movs	r2, #0
 8008096:	4630      	mov	r0, r6
 8008098:	4639      	mov	r1, r7
 800809a:	f7f8 f8f5 	bl	8000288 <__aeabi_dsub>
 800809e:	a36e      	add	r3, pc, #440	; (adr r3, 8008258 <_dtoa_r+0x2e0>)
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	f7f8 faa8 	bl	80005f8 <__aeabi_dmul>
 80080a8:	a36d      	add	r3, pc, #436	; (adr r3, 8008260 <_dtoa_r+0x2e8>)
 80080aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ae:	f7f8 f8ed 	bl	800028c <__adddf3>
 80080b2:	4606      	mov	r6, r0
 80080b4:	4628      	mov	r0, r5
 80080b6:	460f      	mov	r7, r1
 80080b8:	f7f8 fa34 	bl	8000524 <__aeabi_i2d>
 80080bc:	a36a      	add	r3, pc, #424	; (adr r3, 8008268 <_dtoa_r+0x2f0>)
 80080be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c2:	f7f8 fa99 	bl	80005f8 <__aeabi_dmul>
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	4630      	mov	r0, r6
 80080cc:	4639      	mov	r1, r7
 80080ce:	f7f8 f8dd 	bl	800028c <__adddf3>
 80080d2:	4606      	mov	r6, r0
 80080d4:	460f      	mov	r7, r1
 80080d6:	f7f8 fd3f 	bl	8000b58 <__aeabi_d2iz>
 80080da:	2200      	movs	r2, #0
 80080dc:	4682      	mov	sl, r0
 80080de:	2300      	movs	r3, #0
 80080e0:	4630      	mov	r0, r6
 80080e2:	4639      	mov	r1, r7
 80080e4:	f7f8 fcfa 	bl	8000adc <__aeabi_dcmplt>
 80080e8:	b148      	cbz	r0, 80080fe <_dtoa_r+0x186>
 80080ea:	4650      	mov	r0, sl
 80080ec:	f7f8 fa1a 	bl	8000524 <__aeabi_i2d>
 80080f0:	4632      	mov	r2, r6
 80080f2:	463b      	mov	r3, r7
 80080f4:	f7f8 fce8 	bl	8000ac8 <__aeabi_dcmpeq>
 80080f8:	b908      	cbnz	r0, 80080fe <_dtoa_r+0x186>
 80080fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080fe:	f1ba 0f16 	cmp.w	sl, #22
 8008102:	d854      	bhi.n	80081ae <_dtoa_r+0x236>
 8008104:	4b61      	ldr	r3, [pc, #388]	; (800828c <_dtoa_r+0x314>)
 8008106:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008112:	f7f8 fce3 	bl	8000adc <__aeabi_dcmplt>
 8008116:	2800      	cmp	r0, #0
 8008118:	d04b      	beq.n	80081b2 <_dtoa_r+0x23a>
 800811a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800811e:	2300      	movs	r3, #0
 8008120:	930e      	str	r3, [sp, #56]	; 0x38
 8008122:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008124:	1b5d      	subs	r5, r3, r5
 8008126:	1e6b      	subs	r3, r5, #1
 8008128:	9304      	str	r3, [sp, #16]
 800812a:	bf43      	ittte	mi
 800812c:	2300      	movmi	r3, #0
 800812e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008132:	9304      	strmi	r3, [sp, #16]
 8008134:	f04f 0800 	movpl.w	r8, #0
 8008138:	f1ba 0f00 	cmp.w	sl, #0
 800813c:	db3b      	blt.n	80081b6 <_dtoa_r+0x23e>
 800813e:	9b04      	ldr	r3, [sp, #16]
 8008140:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008144:	4453      	add	r3, sl
 8008146:	9304      	str	r3, [sp, #16]
 8008148:	2300      	movs	r3, #0
 800814a:	9306      	str	r3, [sp, #24]
 800814c:	9b05      	ldr	r3, [sp, #20]
 800814e:	2b09      	cmp	r3, #9
 8008150:	d869      	bhi.n	8008226 <_dtoa_r+0x2ae>
 8008152:	2b05      	cmp	r3, #5
 8008154:	bfc4      	itt	gt
 8008156:	3b04      	subgt	r3, #4
 8008158:	9305      	strgt	r3, [sp, #20]
 800815a:	9b05      	ldr	r3, [sp, #20]
 800815c:	f1a3 0302 	sub.w	r3, r3, #2
 8008160:	bfcc      	ite	gt
 8008162:	2500      	movgt	r5, #0
 8008164:	2501      	movle	r5, #1
 8008166:	2b03      	cmp	r3, #3
 8008168:	d869      	bhi.n	800823e <_dtoa_r+0x2c6>
 800816a:	e8df f003 	tbb	[pc, r3]
 800816e:	4e2c      	.short	0x4e2c
 8008170:	5a4c      	.short	0x5a4c
 8008172:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008176:	441d      	add	r5, r3
 8008178:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800817c:	2b20      	cmp	r3, #32
 800817e:	bfc1      	itttt	gt
 8008180:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008184:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008188:	fa09 f303 	lslgt.w	r3, r9, r3
 800818c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008190:	bfda      	itte	le
 8008192:	f1c3 0320 	rsble	r3, r3, #32
 8008196:	fa06 f003 	lslle.w	r0, r6, r3
 800819a:	4318      	orrgt	r0, r3
 800819c:	f7f8 f9b2 	bl	8000504 <__aeabi_ui2d>
 80081a0:	2301      	movs	r3, #1
 80081a2:	4606      	mov	r6, r0
 80081a4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80081a8:	3d01      	subs	r5, #1
 80081aa:	9310      	str	r3, [sp, #64]	; 0x40
 80081ac:	e771      	b.n	8008092 <_dtoa_r+0x11a>
 80081ae:	2301      	movs	r3, #1
 80081b0:	e7b6      	b.n	8008120 <_dtoa_r+0x1a8>
 80081b2:	900e      	str	r0, [sp, #56]	; 0x38
 80081b4:	e7b5      	b.n	8008122 <_dtoa_r+0x1aa>
 80081b6:	f1ca 0300 	rsb	r3, sl, #0
 80081ba:	9306      	str	r3, [sp, #24]
 80081bc:	2300      	movs	r3, #0
 80081be:	eba8 080a 	sub.w	r8, r8, sl
 80081c2:	930d      	str	r3, [sp, #52]	; 0x34
 80081c4:	e7c2      	b.n	800814c <_dtoa_r+0x1d4>
 80081c6:	2300      	movs	r3, #0
 80081c8:	9308      	str	r3, [sp, #32]
 80081ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	dc39      	bgt.n	8008244 <_dtoa_r+0x2cc>
 80081d0:	f04f 0901 	mov.w	r9, #1
 80081d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80081d8:	464b      	mov	r3, r9
 80081da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80081de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80081e0:	2200      	movs	r2, #0
 80081e2:	6042      	str	r2, [r0, #4]
 80081e4:	2204      	movs	r2, #4
 80081e6:	f102 0614 	add.w	r6, r2, #20
 80081ea:	429e      	cmp	r6, r3
 80081ec:	6841      	ldr	r1, [r0, #4]
 80081ee:	d92f      	bls.n	8008250 <_dtoa_r+0x2d8>
 80081f0:	4620      	mov	r0, r4
 80081f2:	f000 fdc1 	bl	8008d78 <_Balloc>
 80081f6:	9000      	str	r0, [sp, #0]
 80081f8:	2800      	cmp	r0, #0
 80081fa:	d14b      	bne.n	8008294 <_dtoa_r+0x31c>
 80081fc:	4b24      	ldr	r3, [pc, #144]	; (8008290 <_dtoa_r+0x318>)
 80081fe:	4602      	mov	r2, r0
 8008200:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008204:	e6d1      	b.n	8007faa <_dtoa_r+0x32>
 8008206:	2301      	movs	r3, #1
 8008208:	e7de      	b.n	80081c8 <_dtoa_r+0x250>
 800820a:	2300      	movs	r3, #0
 800820c:	9308      	str	r3, [sp, #32]
 800820e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008210:	eb0a 0903 	add.w	r9, sl, r3
 8008214:	f109 0301 	add.w	r3, r9, #1
 8008218:	2b01      	cmp	r3, #1
 800821a:	9301      	str	r3, [sp, #4]
 800821c:	bfb8      	it	lt
 800821e:	2301      	movlt	r3, #1
 8008220:	e7dd      	b.n	80081de <_dtoa_r+0x266>
 8008222:	2301      	movs	r3, #1
 8008224:	e7f2      	b.n	800820c <_dtoa_r+0x294>
 8008226:	2501      	movs	r5, #1
 8008228:	2300      	movs	r3, #0
 800822a:	9305      	str	r3, [sp, #20]
 800822c:	9508      	str	r5, [sp, #32]
 800822e:	f04f 39ff 	mov.w	r9, #4294967295
 8008232:	2200      	movs	r2, #0
 8008234:	f8cd 9004 	str.w	r9, [sp, #4]
 8008238:	2312      	movs	r3, #18
 800823a:	9209      	str	r2, [sp, #36]	; 0x24
 800823c:	e7cf      	b.n	80081de <_dtoa_r+0x266>
 800823e:	2301      	movs	r3, #1
 8008240:	9308      	str	r3, [sp, #32]
 8008242:	e7f4      	b.n	800822e <_dtoa_r+0x2b6>
 8008244:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008248:	f8cd 9004 	str.w	r9, [sp, #4]
 800824c:	464b      	mov	r3, r9
 800824e:	e7c6      	b.n	80081de <_dtoa_r+0x266>
 8008250:	3101      	adds	r1, #1
 8008252:	6041      	str	r1, [r0, #4]
 8008254:	0052      	lsls	r2, r2, #1
 8008256:	e7c6      	b.n	80081e6 <_dtoa_r+0x26e>
 8008258:	636f4361 	.word	0x636f4361
 800825c:	3fd287a7 	.word	0x3fd287a7
 8008260:	8b60c8b3 	.word	0x8b60c8b3
 8008264:	3fc68a28 	.word	0x3fc68a28
 8008268:	509f79fb 	.word	0x509f79fb
 800826c:	3fd34413 	.word	0x3fd34413
 8008270:	08016d9d 	.word	0x08016d9d
 8008274:	08016db4 	.word	0x08016db4
 8008278:	7ff00000 	.word	0x7ff00000
 800827c:	08016d99 	.word	0x08016d99
 8008280:	08016d90 	.word	0x08016d90
 8008284:	08016d6d 	.word	0x08016d6d
 8008288:	3ff80000 	.word	0x3ff80000
 800828c:	08016f10 	.word	0x08016f10
 8008290:	08016e13 	.word	0x08016e13
 8008294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008296:	9a00      	ldr	r2, [sp, #0]
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	9b01      	ldr	r3, [sp, #4]
 800829c:	2b0e      	cmp	r3, #14
 800829e:	f200 80ad 	bhi.w	80083fc <_dtoa_r+0x484>
 80082a2:	2d00      	cmp	r5, #0
 80082a4:	f000 80aa 	beq.w	80083fc <_dtoa_r+0x484>
 80082a8:	f1ba 0f00 	cmp.w	sl, #0
 80082ac:	dd36      	ble.n	800831c <_dtoa_r+0x3a4>
 80082ae:	4ac3      	ldr	r2, [pc, #780]	; (80085bc <_dtoa_r+0x644>)
 80082b0:	f00a 030f 	and.w	r3, sl, #15
 80082b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082b8:	ed93 7b00 	vldr	d7, [r3]
 80082bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80082c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80082c4:	eeb0 8a47 	vmov.f32	s16, s14
 80082c8:	eef0 8a67 	vmov.f32	s17, s15
 80082cc:	d016      	beq.n	80082fc <_dtoa_r+0x384>
 80082ce:	4bbc      	ldr	r3, [pc, #752]	; (80085c0 <_dtoa_r+0x648>)
 80082d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082d8:	f7f8 fab8 	bl	800084c <__aeabi_ddiv>
 80082dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082e0:	f007 070f 	and.w	r7, r7, #15
 80082e4:	2503      	movs	r5, #3
 80082e6:	4eb6      	ldr	r6, [pc, #728]	; (80085c0 <_dtoa_r+0x648>)
 80082e8:	b957      	cbnz	r7, 8008300 <_dtoa_r+0x388>
 80082ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ee:	ec53 2b18 	vmov	r2, r3, d8
 80082f2:	f7f8 faab 	bl	800084c <__aeabi_ddiv>
 80082f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082fa:	e029      	b.n	8008350 <_dtoa_r+0x3d8>
 80082fc:	2502      	movs	r5, #2
 80082fe:	e7f2      	b.n	80082e6 <_dtoa_r+0x36e>
 8008300:	07f9      	lsls	r1, r7, #31
 8008302:	d508      	bpl.n	8008316 <_dtoa_r+0x39e>
 8008304:	ec51 0b18 	vmov	r0, r1, d8
 8008308:	e9d6 2300 	ldrd	r2, r3, [r6]
 800830c:	f7f8 f974 	bl	80005f8 <__aeabi_dmul>
 8008310:	ec41 0b18 	vmov	d8, r0, r1
 8008314:	3501      	adds	r5, #1
 8008316:	107f      	asrs	r7, r7, #1
 8008318:	3608      	adds	r6, #8
 800831a:	e7e5      	b.n	80082e8 <_dtoa_r+0x370>
 800831c:	f000 80a6 	beq.w	800846c <_dtoa_r+0x4f4>
 8008320:	f1ca 0600 	rsb	r6, sl, #0
 8008324:	4ba5      	ldr	r3, [pc, #660]	; (80085bc <_dtoa_r+0x644>)
 8008326:	4fa6      	ldr	r7, [pc, #664]	; (80085c0 <_dtoa_r+0x648>)
 8008328:	f006 020f 	and.w	r2, r6, #15
 800832c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008338:	f7f8 f95e 	bl	80005f8 <__aeabi_dmul>
 800833c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008340:	1136      	asrs	r6, r6, #4
 8008342:	2300      	movs	r3, #0
 8008344:	2502      	movs	r5, #2
 8008346:	2e00      	cmp	r6, #0
 8008348:	f040 8085 	bne.w	8008456 <_dtoa_r+0x4de>
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1d2      	bne.n	80082f6 <_dtoa_r+0x37e>
 8008350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008352:	2b00      	cmp	r3, #0
 8008354:	f000 808c 	beq.w	8008470 <_dtoa_r+0x4f8>
 8008358:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800835c:	4b99      	ldr	r3, [pc, #612]	; (80085c4 <_dtoa_r+0x64c>)
 800835e:	2200      	movs	r2, #0
 8008360:	4630      	mov	r0, r6
 8008362:	4639      	mov	r1, r7
 8008364:	f7f8 fbba 	bl	8000adc <__aeabi_dcmplt>
 8008368:	2800      	cmp	r0, #0
 800836a:	f000 8081 	beq.w	8008470 <_dtoa_r+0x4f8>
 800836e:	9b01      	ldr	r3, [sp, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d07d      	beq.n	8008470 <_dtoa_r+0x4f8>
 8008374:	f1b9 0f00 	cmp.w	r9, #0
 8008378:	dd3c      	ble.n	80083f4 <_dtoa_r+0x47c>
 800837a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800837e:	9307      	str	r3, [sp, #28]
 8008380:	2200      	movs	r2, #0
 8008382:	4b91      	ldr	r3, [pc, #580]	; (80085c8 <_dtoa_r+0x650>)
 8008384:	4630      	mov	r0, r6
 8008386:	4639      	mov	r1, r7
 8008388:	f7f8 f936 	bl	80005f8 <__aeabi_dmul>
 800838c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008390:	3501      	adds	r5, #1
 8008392:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008396:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800839a:	4628      	mov	r0, r5
 800839c:	f7f8 f8c2 	bl	8000524 <__aeabi_i2d>
 80083a0:	4632      	mov	r2, r6
 80083a2:	463b      	mov	r3, r7
 80083a4:	f7f8 f928 	bl	80005f8 <__aeabi_dmul>
 80083a8:	4b88      	ldr	r3, [pc, #544]	; (80085cc <_dtoa_r+0x654>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	f7f7 ff6e 	bl	800028c <__adddf3>
 80083b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80083b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083b8:	9303      	str	r3, [sp, #12]
 80083ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d15c      	bne.n	800847a <_dtoa_r+0x502>
 80083c0:	4b83      	ldr	r3, [pc, #524]	; (80085d0 <_dtoa_r+0x658>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	4630      	mov	r0, r6
 80083c6:	4639      	mov	r1, r7
 80083c8:	f7f7 ff5e 	bl	8000288 <__aeabi_dsub>
 80083cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083d0:	4606      	mov	r6, r0
 80083d2:	460f      	mov	r7, r1
 80083d4:	f7f8 fba0 	bl	8000b18 <__aeabi_dcmpgt>
 80083d8:	2800      	cmp	r0, #0
 80083da:	f040 8296 	bne.w	800890a <_dtoa_r+0x992>
 80083de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80083e2:	4630      	mov	r0, r6
 80083e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083e8:	4639      	mov	r1, r7
 80083ea:	f7f8 fb77 	bl	8000adc <__aeabi_dcmplt>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	f040 8288 	bne.w	8008904 <_dtoa_r+0x98c>
 80083f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80083f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f2c0 8158 	blt.w	80086b4 <_dtoa_r+0x73c>
 8008404:	f1ba 0f0e 	cmp.w	sl, #14
 8008408:	f300 8154 	bgt.w	80086b4 <_dtoa_r+0x73c>
 800840c:	4b6b      	ldr	r3, [pc, #428]	; (80085bc <_dtoa_r+0x644>)
 800840e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008412:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008418:	2b00      	cmp	r3, #0
 800841a:	f280 80e3 	bge.w	80085e4 <_dtoa_r+0x66c>
 800841e:	9b01      	ldr	r3, [sp, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	f300 80df 	bgt.w	80085e4 <_dtoa_r+0x66c>
 8008426:	f040 826d 	bne.w	8008904 <_dtoa_r+0x98c>
 800842a:	4b69      	ldr	r3, [pc, #420]	; (80085d0 <_dtoa_r+0x658>)
 800842c:	2200      	movs	r2, #0
 800842e:	4640      	mov	r0, r8
 8008430:	4649      	mov	r1, r9
 8008432:	f7f8 f8e1 	bl	80005f8 <__aeabi_dmul>
 8008436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800843a:	f7f8 fb63 	bl	8000b04 <__aeabi_dcmpge>
 800843e:	9e01      	ldr	r6, [sp, #4]
 8008440:	4637      	mov	r7, r6
 8008442:	2800      	cmp	r0, #0
 8008444:	f040 8243 	bne.w	80088ce <_dtoa_r+0x956>
 8008448:	9d00      	ldr	r5, [sp, #0]
 800844a:	2331      	movs	r3, #49	; 0x31
 800844c:	f805 3b01 	strb.w	r3, [r5], #1
 8008450:	f10a 0a01 	add.w	sl, sl, #1
 8008454:	e23f      	b.n	80088d6 <_dtoa_r+0x95e>
 8008456:	07f2      	lsls	r2, r6, #31
 8008458:	d505      	bpl.n	8008466 <_dtoa_r+0x4ee>
 800845a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800845e:	f7f8 f8cb 	bl	80005f8 <__aeabi_dmul>
 8008462:	3501      	adds	r5, #1
 8008464:	2301      	movs	r3, #1
 8008466:	1076      	asrs	r6, r6, #1
 8008468:	3708      	adds	r7, #8
 800846a:	e76c      	b.n	8008346 <_dtoa_r+0x3ce>
 800846c:	2502      	movs	r5, #2
 800846e:	e76f      	b.n	8008350 <_dtoa_r+0x3d8>
 8008470:	9b01      	ldr	r3, [sp, #4]
 8008472:	f8cd a01c 	str.w	sl, [sp, #28]
 8008476:	930c      	str	r3, [sp, #48]	; 0x30
 8008478:	e78d      	b.n	8008396 <_dtoa_r+0x41e>
 800847a:	9900      	ldr	r1, [sp, #0]
 800847c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800847e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008480:	4b4e      	ldr	r3, [pc, #312]	; (80085bc <_dtoa_r+0x644>)
 8008482:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008486:	4401      	add	r1, r0
 8008488:	9102      	str	r1, [sp, #8]
 800848a:	9908      	ldr	r1, [sp, #32]
 800848c:	eeb0 8a47 	vmov.f32	s16, s14
 8008490:	eef0 8a67 	vmov.f32	s17, s15
 8008494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008498:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800849c:	2900      	cmp	r1, #0
 800849e:	d045      	beq.n	800852c <_dtoa_r+0x5b4>
 80084a0:	494c      	ldr	r1, [pc, #304]	; (80085d4 <_dtoa_r+0x65c>)
 80084a2:	2000      	movs	r0, #0
 80084a4:	f7f8 f9d2 	bl	800084c <__aeabi_ddiv>
 80084a8:	ec53 2b18 	vmov	r2, r3, d8
 80084ac:	f7f7 feec 	bl	8000288 <__aeabi_dsub>
 80084b0:	9d00      	ldr	r5, [sp, #0]
 80084b2:	ec41 0b18 	vmov	d8, r0, r1
 80084b6:	4639      	mov	r1, r7
 80084b8:	4630      	mov	r0, r6
 80084ba:	f7f8 fb4d 	bl	8000b58 <__aeabi_d2iz>
 80084be:	900c      	str	r0, [sp, #48]	; 0x30
 80084c0:	f7f8 f830 	bl	8000524 <__aeabi_i2d>
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	4630      	mov	r0, r6
 80084ca:	4639      	mov	r1, r7
 80084cc:	f7f7 fedc 	bl	8000288 <__aeabi_dsub>
 80084d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084d2:	3330      	adds	r3, #48	; 0x30
 80084d4:	f805 3b01 	strb.w	r3, [r5], #1
 80084d8:	ec53 2b18 	vmov	r2, r3, d8
 80084dc:	4606      	mov	r6, r0
 80084de:	460f      	mov	r7, r1
 80084e0:	f7f8 fafc 	bl	8000adc <__aeabi_dcmplt>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d165      	bne.n	80085b4 <_dtoa_r+0x63c>
 80084e8:	4632      	mov	r2, r6
 80084ea:	463b      	mov	r3, r7
 80084ec:	4935      	ldr	r1, [pc, #212]	; (80085c4 <_dtoa_r+0x64c>)
 80084ee:	2000      	movs	r0, #0
 80084f0:	f7f7 feca 	bl	8000288 <__aeabi_dsub>
 80084f4:	ec53 2b18 	vmov	r2, r3, d8
 80084f8:	f7f8 faf0 	bl	8000adc <__aeabi_dcmplt>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	f040 80b9 	bne.w	8008674 <_dtoa_r+0x6fc>
 8008502:	9b02      	ldr	r3, [sp, #8]
 8008504:	429d      	cmp	r5, r3
 8008506:	f43f af75 	beq.w	80083f4 <_dtoa_r+0x47c>
 800850a:	4b2f      	ldr	r3, [pc, #188]	; (80085c8 <_dtoa_r+0x650>)
 800850c:	ec51 0b18 	vmov	r0, r1, d8
 8008510:	2200      	movs	r2, #0
 8008512:	f7f8 f871 	bl	80005f8 <__aeabi_dmul>
 8008516:	4b2c      	ldr	r3, [pc, #176]	; (80085c8 <_dtoa_r+0x650>)
 8008518:	ec41 0b18 	vmov	d8, r0, r1
 800851c:	2200      	movs	r2, #0
 800851e:	4630      	mov	r0, r6
 8008520:	4639      	mov	r1, r7
 8008522:	f7f8 f869 	bl	80005f8 <__aeabi_dmul>
 8008526:	4606      	mov	r6, r0
 8008528:	460f      	mov	r7, r1
 800852a:	e7c4      	b.n	80084b6 <_dtoa_r+0x53e>
 800852c:	ec51 0b17 	vmov	r0, r1, d7
 8008530:	f7f8 f862 	bl	80005f8 <__aeabi_dmul>
 8008534:	9b02      	ldr	r3, [sp, #8]
 8008536:	9d00      	ldr	r5, [sp, #0]
 8008538:	930c      	str	r3, [sp, #48]	; 0x30
 800853a:	ec41 0b18 	vmov	d8, r0, r1
 800853e:	4639      	mov	r1, r7
 8008540:	4630      	mov	r0, r6
 8008542:	f7f8 fb09 	bl	8000b58 <__aeabi_d2iz>
 8008546:	9011      	str	r0, [sp, #68]	; 0x44
 8008548:	f7f7 ffec 	bl	8000524 <__aeabi_i2d>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	4630      	mov	r0, r6
 8008552:	4639      	mov	r1, r7
 8008554:	f7f7 fe98 	bl	8000288 <__aeabi_dsub>
 8008558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800855a:	3330      	adds	r3, #48	; 0x30
 800855c:	f805 3b01 	strb.w	r3, [r5], #1
 8008560:	9b02      	ldr	r3, [sp, #8]
 8008562:	429d      	cmp	r5, r3
 8008564:	4606      	mov	r6, r0
 8008566:	460f      	mov	r7, r1
 8008568:	f04f 0200 	mov.w	r2, #0
 800856c:	d134      	bne.n	80085d8 <_dtoa_r+0x660>
 800856e:	4b19      	ldr	r3, [pc, #100]	; (80085d4 <_dtoa_r+0x65c>)
 8008570:	ec51 0b18 	vmov	r0, r1, d8
 8008574:	f7f7 fe8a 	bl	800028c <__adddf3>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	4630      	mov	r0, r6
 800857e:	4639      	mov	r1, r7
 8008580:	f7f8 faca 	bl	8000b18 <__aeabi_dcmpgt>
 8008584:	2800      	cmp	r0, #0
 8008586:	d175      	bne.n	8008674 <_dtoa_r+0x6fc>
 8008588:	ec53 2b18 	vmov	r2, r3, d8
 800858c:	4911      	ldr	r1, [pc, #68]	; (80085d4 <_dtoa_r+0x65c>)
 800858e:	2000      	movs	r0, #0
 8008590:	f7f7 fe7a 	bl	8000288 <__aeabi_dsub>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4630      	mov	r0, r6
 800859a:	4639      	mov	r1, r7
 800859c:	f7f8 fa9e 	bl	8000adc <__aeabi_dcmplt>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	f43f af27 	beq.w	80083f4 <_dtoa_r+0x47c>
 80085a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085a8:	1e6b      	subs	r3, r5, #1
 80085aa:	930c      	str	r3, [sp, #48]	; 0x30
 80085ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085b0:	2b30      	cmp	r3, #48	; 0x30
 80085b2:	d0f8      	beq.n	80085a6 <_dtoa_r+0x62e>
 80085b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80085b8:	e04a      	b.n	8008650 <_dtoa_r+0x6d8>
 80085ba:	bf00      	nop
 80085bc:	08016f10 	.word	0x08016f10
 80085c0:	08016ee8 	.word	0x08016ee8
 80085c4:	3ff00000 	.word	0x3ff00000
 80085c8:	40240000 	.word	0x40240000
 80085cc:	401c0000 	.word	0x401c0000
 80085d0:	40140000 	.word	0x40140000
 80085d4:	3fe00000 	.word	0x3fe00000
 80085d8:	4baf      	ldr	r3, [pc, #700]	; (8008898 <_dtoa_r+0x920>)
 80085da:	f7f8 f80d 	bl	80005f8 <__aeabi_dmul>
 80085de:	4606      	mov	r6, r0
 80085e0:	460f      	mov	r7, r1
 80085e2:	e7ac      	b.n	800853e <_dtoa_r+0x5c6>
 80085e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085e8:	9d00      	ldr	r5, [sp, #0]
 80085ea:	4642      	mov	r2, r8
 80085ec:	464b      	mov	r3, r9
 80085ee:	4630      	mov	r0, r6
 80085f0:	4639      	mov	r1, r7
 80085f2:	f7f8 f92b 	bl	800084c <__aeabi_ddiv>
 80085f6:	f7f8 faaf 	bl	8000b58 <__aeabi_d2iz>
 80085fa:	9002      	str	r0, [sp, #8]
 80085fc:	f7f7 ff92 	bl	8000524 <__aeabi_i2d>
 8008600:	4642      	mov	r2, r8
 8008602:	464b      	mov	r3, r9
 8008604:	f7f7 fff8 	bl	80005f8 <__aeabi_dmul>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	4630      	mov	r0, r6
 800860e:	4639      	mov	r1, r7
 8008610:	f7f7 fe3a 	bl	8000288 <__aeabi_dsub>
 8008614:	9e02      	ldr	r6, [sp, #8]
 8008616:	9f01      	ldr	r7, [sp, #4]
 8008618:	3630      	adds	r6, #48	; 0x30
 800861a:	f805 6b01 	strb.w	r6, [r5], #1
 800861e:	9e00      	ldr	r6, [sp, #0]
 8008620:	1bae      	subs	r6, r5, r6
 8008622:	42b7      	cmp	r7, r6
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	d137      	bne.n	800869a <_dtoa_r+0x722>
 800862a:	f7f7 fe2f 	bl	800028c <__adddf3>
 800862e:	4642      	mov	r2, r8
 8008630:	464b      	mov	r3, r9
 8008632:	4606      	mov	r6, r0
 8008634:	460f      	mov	r7, r1
 8008636:	f7f8 fa6f 	bl	8000b18 <__aeabi_dcmpgt>
 800863a:	b9c8      	cbnz	r0, 8008670 <_dtoa_r+0x6f8>
 800863c:	4642      	mov	r2, r8
 800863e:	464b      	mov	r3, r9
 8008640:	4630      	mov	r0, r6
 8008642:	4639      	mov	r1, r7
 8008644:	f7f8 fa40 	bl	8000ac8 <__aeabi_dcmpeq>
 8008648:	b110      	cbz	r0, 8008650 <_dtoa_r+0x6d8>
 800864a:	9b02      	ldr	r3, [sp, #8]
 800864c:	07d9      	lsls	r1, r3, #31
 800864e:	d40f      	bmi.n	8008670 <_dtoa_r+0x6f8>
 8008650:	4620      	mov	r0, r4
 8008652:	4659      	mov	r1, fp
 8008654:	f000 fbd0 	bl	8008df8 <_Bfree>
 8008658:	2300      	movs	r3, #0
 800865a:	702b      	strb	r3, [r5, #0]
 800865c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800865e:	f10a 0001 	add.w	r0, sl, #1
 8008662:	6018      	str	r0, [r3, #0]
 8008664:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008666:	2b00      	cmp	r3, #0
 8008668:	f43f acd8 	beq.w	800801c <_dtoa_r+0xa4>
 800866c:	601d      	str	r5, [r3, #0]
 800866e:	e4d5      	b.n	800801c <_dtoa_r+0xa4>
 8008670:	f8cd a01c 	str.w	sl, [sp, #28]
 8008674:	462b      	mov	r3, r5
 8008676:	461d      	mov	r5, r3
 8008678:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800867c:	2a39      	cmp	r2, #57	; 0x39
 800867e:	d108      	bne.n	8008692 <_dtoa_r+0x71a>
 8008680:	9a00      	ldr	r2, [sp, #0]
 8008682:	429a      	cmp	r2, r3
 8008684:	d1f7      	bne.n	8008676 <_dtoa_r+0x6fe>
 8008686:	9a07      	ldr	r2, [sp, #28]
 8008688:	9900      	ldr	r1, [sp, #0]
 800868a:	3201      	adds	r2, #1
 800868c:	9207      	str	r2, [sp, #28]
 800868e:	2230      	movs	r2, #48	; 0x30
 8008690:	700a      	strb	r2, [r1, #0]
 8008692:	781a      	ldrb	r2, [r3, #0]
 8008694:	3201      	adds	r2, #1
 8008696:	701a      	strb	r2, [r3, #0]
 8008698:	e78c      	b.n	80085b4 <_dtoa_r+0x63c>
 800869a:	4b7f      	ldr	r3, [pc, #508]	; (8008898 <_dtoa_r+0x920>)
 800869c:	2200      	movs	r2, #0
 800869e:	f7f7 ffab 	bl	80005f8 <__aeabi_dmul>
 80086a2:	2200      	movs	r2, #0
 80086a4:	2300      	movs	r3, #0
 80086a6:	4606      	mov	r6, r0
 80086a8:	460f      	mov	r7, r1
 80086aa:	f7f8 fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d09b      	beq.n	80085ea <_dtoa_r+0x672>
 80086b2:	e7cd      	b.n	8008650 <_dtoa_r+0x6d8>
 80086b4:	9a08      	ldr	r2, [sp, #32]
 80086b6:	2a00      	cmp	r2, #0
 80086b8:	f000 80c4 	beq.w	8008844 <_dtoa_r+0x8cc>
 80086bc:	9a05      	ldr	r2, [sp, #20]
 80086be:	2a01      	cmp	r2, #1
 80086c0:	f300 80a8 	bgt.w	8008814 <_dtoa_r+0x89c>
 80086c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086c6:	2a00      	cmp	r2, #0
 80086c8:	f000 80a0 	beq.w	800880c <_dtoa_r+0x894>
 80086cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086d0:	9e06      	ldr	r6, [sp, #24]
 80086d2:	4645      	mov	r5, r8
 80086d4:	9a04      	ldr	r2, [sp, #16]
 80086d6:	2101      	movs	r1, #1
 80086d8:	441a      	add	r2, r3
 80086da:	4620      	mov	r0, r4
 80086dc:	4498      	add	r8, r3
 80086de:	9204      	str	r2, [sp, #16]
 80086e0:	f000 fc46 	bl	8008f70 <__i2b>
 80086e4:	4607      	mov	r7, r0
 80086e6:	2d00      	cmp	r5, #0
 80086e8:	dd0b      	ble.n	8008702 <_dtoa_r+0x78a>
 80086ea:	9b04      	ldr	r3, [sp, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	dd08      	ble.n	8008702 <_dtoa_r+0x78a>
 80086f0:	42ab      	cmp	r3, r5
 80086f2:	9a04      	ldr	r2, [sp, #16]
 80086f4:	bfa8      	it	ge
 80086f6:	462b      	movge	r3, r5
 80086f8:	eba8 0803 	sub.w	r8, r8, r3
 80086fc:	1aed      	subs	r5, r5, r3
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	9304      	str	r3, [sp, #16]
 8008702:	9b06      	ldr	r3, [sp, #24]
 8008704:	b1fb      	cbz	r3, 8008746 <_dtoa_r+0x7ce>
 8008706:	9b08      	ldr	r3, [sp, #32]
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 809f 	beq.w	800884c <_dtoa_r+0x8d4>
 800870e:	2e00      	cmp	r6, #0
 8008710:	dd11      	ble.n	8008736 <_dtoa_r+0x7be>
 8008712:	4639      	mov	r1, r7
 8008714:	4632      	mov	r2, r6
 8008716:	4620      	mov	r0, r4
 8008718:	f000 fce6 	bl	80090e8 <__pow5mult>
 800871c:	465a      	mov	r2, fp
 800871e:	4601      	mov	r1, r0
 8008720:	4607      	mov	r7, r0
 8008722:	4620      	mov	r0, r4
 8008724:	f000 fc3a 	bl	8008f9c <__multiply>
 8008728:	4659      	mov	r1, fp
 800872a:	9007      	str	r0, [sp, #28]
 800872c:	4620      	mov	r0, r4
 800872e:	f000 fb63 	bl	8008df8 <_Bfree>
 8008732:	9b07      	ldr	r3, [sp, #28]
 8008734:	469b      	mov	fp, r3
 8008736:	9b06      	ldr	r3, [sp, #24]
 8008738:	1b9a      	subs	r2, r3, r6
 800873a:	d004      	beq.n	8008746 <_dtoa_r+0x7ce>
 800873c:	4659      	mov	r1, fp
 800873e:	4620      	mov	r0, r4
 8008740:	f000 fcd2 	bl	80090e8 <__pow5mult>
 8008744:	4683      	mov	fp, r0
 8008746:	2101      	movs	r1, #1
 8008748:	4620      	mov	r0, r4
 800874a:	f000 fc11 	bl	8008f70 <__i2b>
 800874e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008750:	2b00      	cmp	r3, #0
 8008752:	4606      	mov	r6, r0
 8008754:	dd7c      	ble.n	8008850 <_dtoa_r+0x8d8>
 8008756:	461a      	mov	r2, r3
 8008758:	4601      	mov	r1, r0
 800875a:	4620      	mov	r0, r4
 800875c:	f000 fcc4 	bl	80090e8 <__pow5mult>
 8008760:	9b05      	ldr	r3, [sp, #20]
 8008762:	2b01      	cmp	r3, #1
 8008764:	4606      	mov	r6, r0
 8008766:	dd76      	ble.n	8008856 <_dtoa_r+0x8de>
 8008768:	2300      	movs	r3, #0
 800876a:	9306      	str	r3, [sp, #24]
 800876c:	6933      	ldr	r3, [r6, #16]
 800876e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008772:	6918      	ldr	r0, [r3, #16]
 8008774:	f000 fbac 	bl	8008ed0 <__hi0bits>
 8008778:	f1c0 0020 	rsb	r0, r0, #32
 800877c:	9b04      	ldr	r3, [sp, #16]
 800877e:	4418      	add	r0, r3
 8008780:	f010 001f 	ands.w	r0, r0, #31
 8008784:	f000 8086 	beq.w	8008894 <_dtoa_r+0x91c>
 8008788:	f1c0 0320 	rsb	r3, r0, #32
 800878c:	2b04      	cmp	r3, #4
 800878e:	dd7f      	ble.n	8008890 <_dtoa_r+0x918>
 8008790:	f1c0 001c 	rsb	r0, r0, #28
 8008794:	9b04      	ldr	r3, [sp, #16]
 8008796:	4403      	add	r3, r0
 8008798:	4480      	add	r8, r0
 800879a:	4405      	add	r5, r0
 800879c:	9304      	str	r3, [sp, #16]
 800879e:	f1b8 0f00 	cmp.w	r8, #0
 80087a2:	dd05      	ble.n	80087b0 <_dtoa_r+0x838>
 80087a4:	4659      	mov	r1, fp
 80087a6:	4642      	mov	r2, r8
 80087a8:	4620      	mov	r0, r4
 80087aa:	f000 fcf7 	bl	800919c <__lshift>
 80087ae:	4683      	mov	fp, r0
 80087b0:	9b04      	ldr	r3, [sp, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	dd05      	ble.n	80087c2 <_dtoa_r+0x84a>
 80087b6:	4631      	mov	r1, r6
 80087b8:	461a      	mov	r2, r3
 80087ba:	4620      	mov	r0, r4
 80087bc:	f000 fcee 	bl	800919c <__lshift>
 80087c0:	4606      	mov	r6, r0
 80087c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d069      	beq.n	800889c <_dtoa_r+0x924>
 80087c8:	4631      	mov	r1, r6
 80087ca:	4658      	mov	r0, fp
 80087cc:	f000 fd52 	bl	8009274 <__mcmp>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	da63      	bge.n	800889c <_dtoa_r+0x924>
 80087d4:	2300      	movs	r3, #0
 80087d6:	4659      	mov	r1, fp
 80087d8:	220a      	movs	r2, #10
 80087da:	4620      	mov	r0, r4
 80087dc:	f000 fb2e 	bl	8008e3c <__multadd>
 80087e0:	9b08      	ldr	r3, [sp, #32]
 80087e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087e6:	4683      	mov	fp, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f000 818f 	beq.w	8008b0c <_dtoa_r+0xb94>
 80087ee:	4639      	mov	r1, r7
 80087f0:	2300      	movs	r3, #0
 80087f2:	220a      	movs	r2, #10
 80087f4:	4620      	mov	r0, r4
 80087f6:	f000 fb21 	bl	8008e3c <__multadd>
 80087fa:	f1b9 0f00 	cmp.w	r9, #0
 80087fe:	4607      	mov	r7, r0
 8008800:	f300 808e 	bgt.w	8008920 <_dtoa_r+0x9a8>
 8008804:	9b05      	ldr	r3, [sp, #20]
 8008806:	2b02      	cmp	r3, #2
 8008808:	dc50      	bgt.n	80088ac <_dtoa_r+0x934>
 800880a:	e089      	b.n	8008920 <_dtoa_r+0x9a8>
 800880c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800880e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008812:	e75d      	b.n	80086d0 <_dtoa_r+0x758>
 8008814:	9b01      	ldr	r3, [sp, #4]
 8008816:	1e5e      	subs	r6, r3, #1
 8008818:	9b06      	ldr	r3, [sp, #24]
 800881a:	42b3      	cmp	r3, r6
 800881c:	bfbf      	itttt	lt
 800881e:	9b06      	ldrlt	r3, [sp, #24]
 8008820:	9606      	strlt	r6, [sp, #24]
 8008822:	1af2      	sublt	r2, r6, r3
 8008824:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008826:	bfb6      	itet	lt
 8008828:	189b      	addlt	r3, r3, r2
 800882a:	1b9e      	subge	r6, r3, r6
 800882c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800882e:	9b01      	ldr	r3, [sp, #4]
 8008830:	bfb8      	it	lt
 8008832:	2600      	movlt	r6, #0
 8008834:	2b00      	cmp	r3, #0
 8008836:	bfb5      	itete	lt
 8008838:	eba8 0503 	sublt.w	r5, r8, r3
 800883c:	9b01      	ldrge	r3, [sp, #4]
 800883e:	2300      	movlt	r3, #0
 8008840:	4645      	movge	r5, r8
 8008842:	e747      	b.n	80086d4 <_dtoa_r+0x75c>
 8008844:	9e06      	ldr	r6, [sp, #24]
 8008846:	9f08      	ldr	r7, [sp, #32]
 8008848:	4645      	mov	r5, r8
 800884a:	e74c      	b.n	80086e6 <_dtoa_r+0x76e>
 800884c:	9a06      	ldr	r2, [sp, #24]
 800884e:	e775      	b.n	800873c <_dtoa_r+0x7c4>
 8008850:	9b05      	ldr	r3, [sp, #20]
 8008852:	2b01      	cmp	r3, #1
 8008854:	dc18      	bgt.n	8008888 <_dtoa_r+0x910>
 8008856:	9b02      	ldr	r3, [sp, #8]
 8008858:	b9b3      	cbnz	r3, 8008888 <_dtoa_r+0x910>
 800885a:	9b03      	ldr	r3, [sp, #12]
 800885c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008860:	b9a3      	cbnz	r3, 800888c <_dtoa_r+0x914>
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008868:	0d1b      	lsrs	r3, r3, #20
 800886a:	051b      	lsls	r3, r3, #20
 800886c:	b12b      	cbz	r3, 800887a <_dtoa_r+0x902>
 800886e:	9b04      	ldr	r3, [sp, #16]
 8008870:	3301      	adds	r3, #1
 8008872:	9304      	str	r3, [sp, #16]
 8008874:	f108 0801 	add.w	r8, r8, #1
 8008878:	2301      	movs	r3, #1
 800887a:	9306      	str	r3, [sp, #24]
 800887c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800887e:	2b00      	cmp	r3, #0
 8008880:	f47f af74 	bne.w	800876c <_dtoa_r+0x7f4>
 8008884:	2001      	movs	r0, #1
 8008886:	e779      	b.n	800877c <_dtoa_r+0x804>
 8008888:	2300      	movs	r3, #0
 800888a:	e7f6      	b.n	800887a <_dtoa_r+0x902>
 800888c:	9b02      	ldr	r3, [sp, #8]
 800888e:	e7f4      	b.n	800887a <_dtoa_r+0x902>
 8008890:	d085      	beq.n	800879e <_dtoa_r+0x826>
 8008892:	4618      	mov	r0, r3
 8008894:	301c      	adds	r0, #28
 8008896:	e77d      	b.n	8008794 <_dtoa_r+0x81c>
 8008898:	40240000 	.word	0x40240000
 800889c:	9b01      	ldr	r3, [sp, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	dc38      	bgt.n	8008914 <_dtoa_r+0x99c>
 80088a2:	9b05      	ldr	r3, [sp, #20]
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	dd35      	ble.n	8008914 <_dtoa_r+0x99c>
 80088a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80088ac:	f1b9 0f00 	cmp.w	r9, #0
 80088b0:	d10d      	bne.n	80088ce <_dtoa_r+0x956>
 80088b2:	4631      	mov	r1, r6
 80088b4:	464b      	mov	r3, r9
 80088b6:	2205      	movs	r2, #5
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 fabf 	bl	8008e3c <__multadd>
 80088be:	4601      	mov	r1, r0
 80088c0:	4606      	mov	r6, r0
 80088c2:	4658      	mov	r0, fp
 80088c4:	f000 fcd6 	bl	8009274 <__mcmp>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	f73f adbd 	bgt.w	8008448 <_dtoa_r+0x4d0>
 80088ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d0:	9d00      	ldr	r5, [sp, #0]
 80088d2:	ea6f 0a03 	mvn.w	sl, r3
 80088d6:	f04f 0800 	mov.w	r8, #0
 80088da:	4631      	mov	r1, r6
 80088dc:	4620      	mov	r0, r4
 80088de:	f000 fa8b 	bl	8008df8 <_Bfree>
 80088e2:	2f00      	cmp	r7, #0
 80088e4:	f43f aeb4 	beq.w	8008650 <_dtoa_r+0x6d8>
 80088e8:	f1b8 0f00 	cmp.w	r8, #0
 80088ec:	d005      	beq.n	80088fa <_dtoa_r+0x982>
 80088ee:	45b8      	cmp	r8, r7
 80088f0:	d003      	beq.n	80088fa <_dtoa_r+0x982>
 80088f2:	4641      	mov	r1, r8
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 fa7f 	bl	8008df8 <_Bfree>
 80088fa:	4639      	mov	r1, r7
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 fa7b 	bl	8008df8 <_Bfree>
 8008902:	e6a5      	b.n	8008650 <_dtoa_r+0x6d8>
 8008904:	2600      	movs	r6, #0
 8008906:	4637      	mov	r7, r6
 8008908:	e7e1      	b.n	80088ce <_dtoa_r+0x956>
 800890a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800890c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008910:	4637      	mov	r7, r6
 8008912:	e599      	b.n	8008448 <_dtoa_r+0x4d0>
 8008914:	9b08      	ldr	r3, [sp, #32]
 8008916:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 80fd 	beq.w	8008b1a <_dtoa_r+0xba2>
 8008920:	2d00      	cmp	r5, #0
 8008922:	dd05      	ble.n	8008930 <_dtoa_r+0x9b8>
 8008924:	4639      	mov	r1, r7
 8008926:	462a      	mov	r2, r5
 8008928:	4620      	mov	r0, r4
 800892a:	f000 fc37 	bl	800919c <__lshift>
 800892e:	4607      	mov	r7, r0
 8008930:	9b06      	ldr	r3, [sp, #24]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d05c      	beq.n	80089f0 <_dtoa_r+0xa78>
 8008936:	6879      	ldr	r1, [r7, #4]
 8008938:	4620      	mov	r0, r4
 800893a:	f000 fa1d 	bl	8008d78 <_Balloc>
 800893e:	4605      	mov	r5, r0
 8008940:	b928      	cbnz	r0, 800894e <_dtoa_r+0x9d6>
 8008942:	4b80      	ldr	r3, [pc, #512]	; (8008b44 <_dtoa_r+0xbcc>)
 8008944:	4602      	mov	r2, r0
 8008946:	f240 21ea 	movw	r1, #746	; 0x2ea
 800894a:	f7ff bb2e 	b.w	8007faa <_dtoa_r+0x32>
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	3202      	adds	r2, #2
 8008952:	0092      	lsls	r2, r2, #2
 8008954:	f107 010c 	add.w	r1, r7, #12
 8008958:	300c      	adds	r0, #12
 800895a:	f000 f9ff 	bl	8008d5c <memcpy>
 800895e:	2201      	movs	r2, #1
 8008960:	4629      	mov	r1, r5
 8008962:	4620      	mov	r0, r4
 8008964:	f000 fc1a 	bl	800919c <__lshift>
 8008968:	9b00      	ldr	r3, [sp, #0]
 800896a:	3301      	adds	r3, #1
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	9b00      	ldr	r3, [sp, #0]
 8008970:	444b      	add	r3, r9
 8008972:	9307      	str	r3, [sp, #28]
 8008974:	9b02      	ldr	r3, [sp, #8]
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	46b8      	mov	r8, r7
 800897c:	9306      	str	r3, [sp, #24]
 800897e:	4607      	mov	r7, r0
 8008980:	9b01      	ldr	r3, [sp, #4]
 8008982:	4631      	mov	r1, r6
 8008984:	3b01      	subs	r3, #1
 8008986:	4658      	mov	r0, fp
 8008988:	9302      	str	r3, [sp, #8]
 800898a:	f7ff fa67 	bl	8007e5c <quorem>
 800898e:	4603      	mov	r3, r0
 8008990:	3330      	adds	r3, #48	; 0x30
 8008992:	9004      	str	r0, [sp, #16]
 8008994:	4641      	mov	r1, r8
 8008996:	4658      	mov	r0, fp
 8008998:	9308      	str	r3, [sp, #32]
 800899a:	f000 fc6b 	bl	8009274 <__mcmp>
 800899e:	463a      	mov	r2, r7
 80089a0:	4681      	mov	r9, r0
 80089a2:	4631      	mov	r1, r6
 80089a4:	4620      	mov	r0, r4
 80089a6:	f000 fc81 	bl	80092ac <__mdiff>
 80089aa:	68c2      	ldr	r2, [r0, #12]
 80089ac:	9b08      	ldr	r3, [sp, #32]
 80089ae:	4605      	mov	r5, r0
 80089b0:	bb02      	cbnz	r2, 80089f4 <_dtoa_r+0xa7c>
 80089b2:	4601      	mov	r1, r0
 80089b4:	4658      	mov	r0, fp
 80089b6:	f000 fc5d 	bl	8009274 <__mcmp>
 80089ba:	9b08      	ldr	r3, [sp, #32]
 80089bc:	4602      	mov	r2, r0
 80089be:	4629      	mov	r1, r5
 80089c0:	4620      	mov	r0, r4
 80089c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80089c6:	f000 fa17 	bl	8008df8 <_Bfree>
 80089ca:	9b05      	ldr	r3, [sp, #20]
 80089cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089ce:	9d01      	ldr	r5, [sp, #4]
 80089d0:	ea43 0102 	orr.w	r1, r3, r2
 80089d4:	9b06      	ldr	r3, [sp, #24]
 80089d6:	430b      	orrs	r3, r1
 80089d8:	9b08      	ldr	r3, [sp, #32]
 80089da:	d10d      	bne.n	80089f8 <_dtoa_r+0xa80>
 80089dc:	2b39      	cmp	r3, #57	; 0x39
 80089de:	d029      	beq.n	8008a34 <_dtoa_r+0xabc>
 80089e0:	f1b9 0f00 	cmp.w	r9, #0
 80089e4:	dd01      	ble.n	80089ea <_dtoa_r+0xa72>
 80089e6:	9b04      	ldr	r3, [sp, #16]
 80089e8:	3331      	adds	r3, #49	; 0x31
 80089ea:	9a02      	ldr	r2, [sp, #8]
 80089ec:	7013      	strb	r3, [r2, #0]
 80089ee:	e774      	b.n	80088da <_dtoa_r+0x962>
 80089f0:	4638      	mov	r0, r7
 80089f2:	e7b9      	b.n	8008968 <_dtoa_r+0x9f0>
 80089f4:	2201      	movs	r2, #1
 80089f6:	e7e2      	b.n	80089be <_dtoa_r+0xa46>
 80089f8:	f1b9 0f00 	cmp.w	r9, #0
 80089fc:	db06      	blt.n	8008a0c <_dtoa_r+0xa94>
 80089fe:	9905      	ldr	r1, [sp, #20]
 8008a00:	ea41 0909 	orr.w	r9, r1, r9
 8008a04:	9906      	ldr	r1, [sp, #24]
 8008a06:	ea59 0101 	orrs.w	r1, r9, r1
 8008a0a:	d120      	bne.n	8008a4e <_dtoa_r+0xad6>
 8008a0c:	2a00      	cmp	r2, #0
 8008a0e:	ddec      	ble.n	80089ea <_dtoa_r+0xa72>
 8008a10:	4659      	mov	r1, fp
 8008a12:	2201      	movs	r2, #1
 8008a14:	4620      	mov	r0, r4
 8008a16:	9301      	str	r3, [sp, #4]
 8008a18:	f000 fbc0 	bl	800919c <__lshift>
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	4683      	mov	fp, r0
 8008a20:	f000 fc28 	bl	8009274 <__mcmp>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	9b01      	ldr	r3, [sp, #4]
 8008a28:	dc02      	bgt.n	8008a30 <_dtoa_r+0xab8>
 8008a2a:	d1de      	bne.n	80089ea <_dtoa_r+0xa72>
 8008a2c:	07da      	lsls	r2, r3, #31
 8008a2e:	d5dc      	bpl.n	80089ea <_dtoa_r+0xa72>
 8008a30:	2b39      	cmp	r3, #57	; 0x39
 8008a32:	d1d8      	bne.n	80089e6 <_dtoa_r+0xa6e>
 8008a34:	9a02      	ldr	r2, [sp, #8]
 8008a36:	2339      	movs	r3, #57	; 0x39
 8008a38:	7013      	strb	r3, [r2, #0]
 8008a3a:	462b      	mov	r3, r5
 8008a3c:	461d      	mov	r5, r3
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a44:	2a39      	cmp	r2, #57	; 0x39
 8008a46:	d050      	beq.n	8008aea <_dtoa_r+0xb72>
 8008a48:	3201      	adds	r2, #1
 8008a4a:	701a      	strb	r2, [r3, #0]
 8008a4c:	e745      	b.n	80088da <_dtoa_r+0x962>
 8008a4e:	2a00      	cmp	r2, #0
 8008a50:	dd03      	ble.n	8008a5a <_dtoa_r+0xae2>
 8008a52:	2b39      	cmp	r3, #57	; 0x39
 8008a54:	d0ee      	beq.n	8008a34 <_dtoa_r+0xabc>
 8008a56:	3301      	adds	r3, #1
 8008a58:	e7c7      	b.n	80089ea <_dtoa_r+0xa72>
 8008a5a:	9a01      	ldr	r2, [sp, #4]
 8008a5c:	9907      	ldr	r1, [sp, #28]
 8008a5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008a62:	428a      	cmp	r2, r1
 8008a64:	d02a      	beq.n	8008abc <_dtoa_r+0xb44>
 8008a66:	4659      	mov	r1, fp
 8008a68:	2300      	movs	r3, #0
 8008a6a:	220a      	movs	r2, #10
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f000 f9e5 	bl	8008e3c <__multadd>
 8008a72:	45b8      	cmp	r8, r7
 8008a74:	4683      	mov	fp, r0
 8008a76:	f04f 0300 	mov.w	r3, #0
 8008a7a:	f04f 020a 	mov.w	r2, #10
 8008a7e:	4641      	mov	r1, r8
 8008a80:	4620      	mov	r0, r4
 8008a82:	d107      	bne.n	8008a94 <_dtoa_r+0xb1c>
 8008a84:	f000 f9da 	bl	8008e3c <__multadd>
 8008a88:	4680      	mov	r8, r0
 8008a8a:	4607      	mov	r7, r0
 8008a8c:	9b01      	ldr	r3, [sp, #4]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	e775      	b.n	8008980 <_dtoa_r+0xa08>
 8008a94:	f000 f9d2 	bl	8008e3c <__multadd>
 8008a98:	4639      	mov	r1, r7
 8008a9a:	4680      	mov	r8, r0
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	220a      	movs	r2, #10
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 f9cb 	bl	8008e3c <__multadd>
 8008aa6:	4607      	mov	r7, r0
 8008aa8:	e7f0      	b.n	8008a8c <_dtoa_r+0xb14>
 8008aaa:	f1b9 0f00 	cmp.w	r9, #0
 8008aae:	9a00      	ldr	r2, [sp, #0]
 8008ab0:	bfcc      	ite	gt
 8008ab2:	464d      	movgt	r5, r9
 8008ab4:	2501      	movle	r5, #1
 8008ab6:	4415      	add	r5, r2
 8008ab8:	f04f 0800 	mov.w	r8, #0
 8008abc:	4659      	mov	r1, fp
 8008abe:	2201      	movs	r2, #1
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	9301      	str	r3, [sp, #4]
 8008ac4:	f000 fb6a 	bl	800919c <__lshift>
 8008ac8:	4631      	mov	r1, r6
 8008aca:	4683      	mov	fp, r0
 8008acc:	f000 fbd2 	bl	8009274 <__mcmp>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	dcb2      	bgt.n	8008a3a <_dtoa_r+0xac2>
 8008ad4:	d102      	bne.n	8008adc <_dtoa_r+0xb64>
 8008ad6:	9b01      	ldr	r3, [sp, #4]
 8008ad8:	07db      	lsls	r3, r3, #31
 8008ada:	d4ae      	bmi.n	8008a3a <_dtoa_r+0xac2>
 8008adc:	462b      	mov	r3, r5
 8008ade:	461d      	mov	r5, r3
 8008ae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ae4:	2a30      	cmp	r2, #48	; 0x30
 8008ae6:	d0fa      	beq.n	8008ade <_dtoa_r+0xb66>
 8008ae8:	e6f7      	b.n	80088da <_dtoa_r+0x962>
 8008aea:	9a00      	ldr	r2, [sp, #0]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d1a5      	bne.n	8008a3c <_dtoa_r+0xac4>
 8008af0:	f10a 0a01 	add.w	sl, sl, #1
 8008af4:	2331      	movs	r3, #49	; 0x31
 8008af6:	e779      	b.n	80089ec <_dtoa_r+0xa74>
 8008af8:	4b13      	ldr	r3, [pc, #76]	; (8008b48 <_dtoa_r+0xbd0>)
 8008afa:	f7ff baaf 	b.w	800805c <_dtoa_r+0xe4>
 8008afe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f47f aa86 	bne.w	8008012 <_dtoa_r+0x9a>
 8008b06:	4b11      	ldr	r3, [pc, #68]	; (8008b4c <_dtoa_r+0xbd4>)
 8008b08:	f7ff baa8 	b.w	800805c <_dtoa_r+0xe4>
 8008b0c:	f1b9 0f00 	cmp.w	r9, #0
 8008b10:	dc03      	bgt.n	8008b1a <_dtoa_r+0xba2>
 8008b12:	9b05      	ldr	r3, [sp, #20]
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	f73f aec9 	bgt.w	80088ac <_dtoa_r+0x934>
 8008b1a:	9d00      	ldr	r5, [sp, #0]
 8008b1c:	4631      	mov	r1, r6
 8008b1e:	4658      	mov	r0, fp
 8008b20:	f7ff f99c 	bl	8007e5c <quorem>
 8008b24:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008b28:	f805 3b01 	strb.w	r3, [r5], #1
 8008b2c:	9a00      	ldr	r2, [sp, #0]
 8008b2e:	1aaa      	subs	r2, r5, r2
 8008b30:	4591      	cmp	r9, r2
 8008b32:	ddba      	ble.n	8008aaa <_dtoa_r+0xb32>
 8008b34:	4659      	mov	r1, fp
 8008b36:	2300      	movs	r3, #0
 8008b38:	220a      	movs	r2, #10
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 f97e 	bl	8008e3c <__multadd>
 8008b40:	4683      	mov	fp, r0
 8008b42:	e7eb      	b.n	8008b1c <_dtoa_r+0xba4>
 8008b44:	08016e13 	.word	0x08016e13
 8008b48:	08016d6c 	.word	0x08016d6c
 8008b4c:	08016d90 	.word	0x08016d90

08008b50 <std>:
 8008b50:	2300      	movs	r3, #0
 8008b52:	b510      	push	{r4, lr}
 8008b54:	4604      	mov	r4, r0
 8008b56:	e9c0 3300 	strd	r3, r3, [r0]
 8008b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b5e:	6083      	str	r3, [r0, #8]
 8008b60:	8181      	strh	r1, [r0, #12]
 8008b62:	6643      	str	r3, [r0, #100]	; 0x64
 8008b64:	81c2      	strh	r2, [r0, #14]
 8008b66:	6183      	str	r3, [r0, #24]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	2208      	movs	r2, #8
 8008b6c:	305c      	adds	r0, #92	; 0x5c
 8008b6e:	f7fe fceb 	bl	8007548 <memset>
 8008b72:	4b05      	ldr	r3, [pc, #20]	; (8008b88 <std+0x38>)
 8008b74:	6263      	str	r3, [r4, #36]	; 0x24
 8008b76:	4b05      	ldr	r3, [pc, #20]	; (8008b8c <std+0x3c>)
 8008b78:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b7a:	4b05      	ldr	r3, [pc, #20]	; (8008b90 <std+0x40>)
 8008b7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b7e:	4b05      	ldr	r3, [pc, #20]	; (8008b94 <std+0x44>)
 8008b80:	6224      	str	r4, [r4, #32]
 8008b82:	6323      	str	r3, [r4, #48]	; 0x30
 8008b84:	bd10      	pop	{r4, pc}
 8008b86:	bf00      	nop
 8008b88:	080098bd 	.word	0x080098bd
 8008b8c:	080098df 	.word	0x080098df
 8008b90:	08009917 	.word	0x08009917
 8008b94:	0800993b 	.word	0x0800993b

08008b98 <_cleanup_r>:
 8008b98:	4901      	ldr	r1, [pc, #4]	; (8008ba0 <_cleanup_r+0x8>)
 8008b9a:	f000 b8af 	b.w	8008cfc <_fwalk_reent>
 8008b9e:	bf00      	nop
 8008ba0:	08009c51 	.word	0x08009c51

08008ba4 <__sfmoreglue>:
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	1e4a      	subs	r2, r1, #1
 8008ba8:	2568      	movs	r5, #104	; 0x68
 8008baa:	4355      	muls	r5, r2
 8008bac:	460e      	mov	r6, r1
 8008bae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008bb2:	f000 fcbf 	bl	8009534 <_malloc_r>
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	b140      	cbz	r0, 8008bcc <__sfmoreglue+0x28>
 8008bba:	2100      	movs	r1, #0
 8008bbc:	e9c0 1600 	strd	r1, r6, [r0]
 8008bc0:	300c      	adds	r0, #12
 8008bc2:	60a0      	str	r0, [r4, #8]
 8008bc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008bc8:	f7fe fcbe 	bl	8007548 <memset>
 8008bcc:	4620      	mov	r0, r4
 8008bce:	bd70      	pop	{r4, r5, r6, pc}

08008bd0 <__sfp_lock_acquire>:
 8008bd0:	4801      	ldr	r0, [pc, #4]	; (8008bd8 <__sfp_lock_acquire+0x8>)
 8008bd2:	f000 b8b8 	b.w	8008d46 <__retarget_lock_acquire_recursive>
 8008bd6:	bf00      	nop
 8008bd8:	200003d8 	.word	0x200003d8

08008bdc <__sfp_lock_release>:
 8008bdc:	4801      	ldr	r0, [pc, #4]	; (8008be4 <__sfp_lock_release+0x8>)
 8008bde:	f000 b8b3 	b.w	8008d48 <__retarget_lock_release_recursive>
 8008be2:	bf00      	nop
 8008be4:	200003d8 	.word	0x200003d8

08008be8 <__sinit_lock_acquire>:
 8008be8:	4801      	ldr	r0, [pc, #4]	; (8008bf0 <__sinit_lock_acquire+0x8>)
 8008bea:	f000 b8ac 	b.w	8008d46 <__retarget_lock_acquire_recursive>
 8008bee:	bf00      	nop
 8008bf0:	200003d3 	.word	0x200003d3

08008bf4 <__sinit_lock_release>:
 8008bf4:	4801      	ldr	r0, [pc, #4]	; (8008bfc <__sinit_lock_release+0x8>)
 8008bf6:	f000 b8a7 	b.w	8008d48 <__retarget_lock_release_recursive>
 8008bfa:	bf00      	nop
 8008bfc:	200003d3 	.word	0x200003d3

08008c00 <__sinit>:
 8008c00:	b510      	push	{r4, lr}
 8008c02:	4604      	mov	r4, r0
 8008c04:	f7ff fff0 	bl	8008be8 <__sinit_lock_acquire>
 8008c08:	69a3      	ldr	r3, [r4, #24]
 8008c0a:	b11b      	cbz	r3, 8008c14 <__sinit+0x14>
 8008c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c10:	f7ff bff0 	b.w	8008bf4 <__sinit_lock_release>
 8008c14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c18:	6523      	str	r3, [r4, #80]	; 0x50
 8008c1a:	4b13      	ldr	r3, [pc, #76]	; (8008c68 <__sinit+0x68>)
 8008c1c:	4a13      	ldr	r2, [pc, #76]	; (8008c6c <__sinit+0x6c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c22:	42a3      	cmp	r3, r4
 8008c24:	bf04      	itt	eq
 8008c26:	2301      	moveq	r3, #1
 8008c28:	61a3      	streq	r3, [r4, #24]
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f000 f820 	bl	8008c70 <__sfp>
 8008c30:	6060      	str	r0, [r4, #4]
 8008c32:	4620      	mov	r0, r4
 8008c34:	f000 f81c 	bl	8008c70 <__sfp>
 8008c38:	60a0      	str	r0, [r4, #8]
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f000 f818 	bl	8008c70 <__sfp>
 8008c40:	2200      	movs	r2, #0
 8008c42:	60e0      	str	r0, [r4, #12]
 8008c44:	2104      	movs	r1, #4
 8008c46:	6860      	ldr	r0, [r4, #4]
 8008c48:	f7ff ff82 	bl	8008b50 <std>
 8008c4c:	68a0      	ldr	r0, [r4, #8]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	2109      	movs	r1, #9
 8008c52:	f7ff ff7d 	bl	8008b50 <std>
 8008c56:	68e0      	ldr	r0, [r4, #12]
 8008c58:	2202      	movs	r2, #2
 8008c5a:	2112      	movs	r1, #18
 8008c5c:	f7ff ff78 	bl	8008b50 <std>
 8008c60:	2301      	movs	r3, #1
 8008c62:	61a3      	str	r3, [r4, #24]
 8008c64:	e7d2      	b.n	8008c0c <__sinit+0xc>
 8008c66:	bf00      	nop
 8008c68:	08016d58 	.word	0x08016d58
 8008c6c:	08008b99 	.word	0x08008b99

08008c70 <__sfp>:
 8008c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c72:	4607      	mov	r7, r0
 8008c74:	f7ff ffac 	bl	8008bd0 <__sfp_lock_acquire>
 8008c78:	4b1e      	ldr	r3, [pc, #120]	; (8008cf4 <__sfp+0x84>)
 8008c7a:	681e      	ldr	r6, [r3, #0]
 8008c7c:	69b3      	ldr	r3, [r6, #24]
 8008c7e:	b913      	cbnz	r3, 8008c86 <__sfp+0x16>
 8008c80:	4630      	mov	r0, r6
 8008c82:	f7ff ffbd 	bl	8008c00 <__sinit>
 8008c86:	3648      	adds	r6, #72	; 0x48
 8008c88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	d503      	bpl.n	8008c98 <__sfp+0x28>
 8008c90:	6833      	ldr	r3, [r6, #0]
 8008c92:	b30b      	cbz	r3, 8008cd8 <__sfp+0x68>
 8008c94:	6836      	ldr	r6, [r6, #0]
 8008c96:	e7f7      	b.n	8008c88 <__sfp+0x18>
 8008c98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c9c:	b9d5      	cbnz	r5, 8008cd4 <__sfp+0x64>
 8008c9e:	4b16      	ldr	r3, [pc, #88]	; (8008cf8 <__sfp+0x88>)
 8008ca0:	60e3      	str	r3, [r4, #12]
 8008ca2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ca6:	6665      	str	r5, [r4, #100]	; 0x64
 8008ca8:	f000 f84c 	bl	8008d44 <__retarget_lock_init_recursive>
 8008cac:	f7ff ff96 	bl	8008bdc <__sfp_lock_release>
 8008cb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008cb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008cb8:	6025      	str	r5, [r4, #0]
 8008cba:	61a5      	str	r5, [r4, #24]
 8008cbc:	2208      	movs	r2, #8
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008cc4:	f7fe fc40 	bl	8007548 <memset>
 8008cc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ccc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cd4:	3468      	adds	r4, #104	; 0x68
 8008cd6:	e7d9      	b.n	8008c8c <__sfp+0x1c>
 8008cd8:	2104      	movs	r1, #4
 8008cda:	4638      	mov	r0, r7
 8008cdc:	f7ff ff62 	bl	8008ba4 <__sfmoreglue>
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	6030      	str	r0, [r6, #0]
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d1d5      	bne.n	8008c94 <__sfp+0x24>
 8008ce8:	f7ff ff78 	bl	8008bdc <__sfp_lock_release>
 8008cec:	230c      	movs	r3, #12
 8008cee:	603b      	str	r3, [r7, #0]
 8008cf0:	e7ee      	b.n	8008cd0 <__sfp+0x60>
 8008cf2:	bf00      	nop
 8008cf4:	08016d58 	.word	0x08016d58
 8008cf8:	ffff0001 	.word	0xffff0001

08008cfc <_fwalk_reent>:
 8008cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d00:	4606      	mov	r6, r0
 8008d02:	4688      	mov	r8, r1
 8008d04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d08:	2700      	movs	r7, #0
 8008d0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d0e:	f1b9 0901 	subs.w	r9, r9, #1
 8008d12:	d505      	bpl.n	8008d20 <_fwalk_reent+0x24>
 8008d14:	6824      	ldr	r4, [r4, #0]
 8008d16:	2c00      	cmp	r4, #0
 8008d18:	d1f7      	bne.n	8008d0a <_fwalk_reent+0xe>
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d20:	89ab      	ldrh	r3, [r5, #12]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d907      	bls.n	8008d36 <_fwalk_reent+0x3a>
 8008d26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	d003      	beq.n	8008d36 <_fwalk_reent+0x3a>
 8008d2e:	4629      	mov	r1, r5
 8008d30:	4630      	mov	r0, r6
 8008d32:	47c0      	blx	r8
 8008d34:	4307      	orrs	r7, r0
 8008d36:	3568      	adds	r5, #104	; 0x68
 8008d38:	e7e9      	b.n	8008d0e <_fwalk_reent+0x12>
	...

08008d3c <_localeconv_r>:
 8008d3c:	4800      	ldr	r0, [pc, #0]	; (8008d40 <_localeconv_r+0x4>)
 8008d3e:	4770      	bx	lr
 8008d40:	20000168 	.word	0x20000168

08008d44 <__retarget_lock_init_recursive>:
 8008d44:	4770      	bx	lr

08008d46 <__retarget_lock_acquire_recursive>:
 8008d46:	4770      	bx	lr

08008d48 <__retarget_lock_release_recursive>:
 8008d48:	4770      	bx	lr
	...

08008d4c <malloc>:
 8008d4c:	4b02      	ldr	r3, [pc, #8]	; (8008d58 <malloc+0xc>)
 8008d4e:	4601      	mov	r1, r0
 8008d50:	6818      	ldr	r0, [r3, #0]
 8008d52:	f000 bbef 	b.w	8009534 <_malloc_r>
 8008d56:	bf00      	nop
 8008d58:	20000014 	.word	0x20000014

08008d5c <memcpy>:
 8008d5c:	440a      	add	r2, r1
 8008d5e:	4291      	cmp	r1, r2
 8008d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d64:	d100      	bne.n	8008d68 <memcpy+0xc>
 8008d66:	4770      	bx	lr
 8008d68:	b510      	push	{r4, lr}
 8008d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d72:	4291      	cmp	r1, r2
 8008d74:	d1f9      	bne.n	8008d6a <memcpy+0xe>
 8008d76:	bd10      	pop	{r4, pc}

08008d78 <_Balloc>:
 8008d78:	b570      	push	{r4, r5, r6, lr}
 8008d7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	460d      	mov	r5, r1
 8008d80:	b976      	cbnz	r6, 8008da0 <_Balloc+0x28>
 8008d82:	2010      	movs	r0, #16
 8008d84:	f7ff ffe2 	bl	8008d4c <malloc>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	6260      	str	r0, [r4, #36]	; 0x24
 8008d8c:	b920      	cbnz	r0, 8008d98 <_Balloc+0x20>
 8008d8e:	4b18      	ldr	r3, [pc, #96]	; (8008df0 <_Balloc+0x78>)
 8008d90:	4818      	ldr	r0, [pc, #96]	; (8008df4 <_Balloc+0x7c>)
 8008d92:	2166      	movs	r1, #102	; 0x66
 8008d94:	f000 fea8 	bl	8009ae8 <__assert_func>
 8008d98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d9c:	6006      	str	r6, [r0, #0]
 8008d9e:	60c6      	str	r6, [r0, #12]
 8008da0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008da2:	68f3      	ldr	r3, [r6, #12]
 8008da4:	b183      	cbz	r3, 8008dc8 <_Balloc+0x50>
 8008da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008dae:	b9b8      	cbnz	r0, 8008de0 <_Balloc+0x68>
 8008db0:	2101      	movs	r1, #1
 8008db2:	fa01 f605 	lsl.w	r6, r1, r5
 8008db6:	1d72      	adds	r2, r6, #5
 8008db8:	0092      	lsls	r2, r2, #2
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 fb5a 	bl	8009474 <_calloc_r>
 8008dc0:	b160      	cbz	r0, 8008ddc <_Balloc+0x64>
 8008dc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008dc6:	e00e      	b.n	8008de6 <_Balloc+0x6e>
 8008dc8:	2221      	movs	r2, #33	; 0x21
 8008dca:	2104      	movs	r1, #4
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f000 fb51 	bl	8009474 <_calloc_r>
 8008dd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dd4:	60f0      	str	r0, [r6, #12]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1e4      	bne.n	8008da6 <_Balloc+0x2e>
 8008ddc:	2000      	movs	r0, #0
 8008dde:	bd70      	pop	{r4, r5, r6, pc}
 8008de0:	6802      	ldr	r2, [r0, #0]
 8008de2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008de6:	2300      	movs	r3, #0
 8008de8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008dec:	e7f7      	b.n	8008dde <_Balloc+0x66>
 8008dee:	bf00      	nop
 8008df0:	08016d9d 	.word	0x08016d9d
 8008df4:	08016e84 	.word	0x08016e84

08008df8 <_Bfree>:
 8008df8:	b570      	push	{r4, r5, r6, lr}
 8008dfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	460c      	mov	r4, r1
 8008e00:	b976      	cbnz	r6, 8008e20 <_Bfree+0x28>
 8008e02:	2010      	movs	r0, #16
 8008e04:	f7ff ffa2 	bl	8008d4c <malloc>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	6268      	str	r0, [r5, #36]	; 0x24
 8008e0c:	b920      	cbnz	r0, 8008e18 <_Bfree+0x20>
 8008e0e:	4b09      	ldr	r3, [pc, #36]	; (8008e34 <_Bfree+0x3c>)
 8008e10:	4809      	ldr	r0, [pc, #36]	; (8008e38 <_Bfree+0x40>)
 8008e12:	218a      	movs	r1, #138	; 0x8a
 8008e14:	f000 fe68 	bl	8009ae8 <__assert_func>
 8008e18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e1c:	6006      	str	r6, [r0, #0]
 8008e1e:	60c6      	str	r6, [r0, #12]
 8008e20:	b13c      	cbz	r4, 8008e32 <_Bfree+0x3a>
 8008e22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e24:	6862      	ldr	r2, [r4, #4]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e2c:	6021      	str	r1, [r4, #0]
 8008e2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e32:	bd70      	pop	{r4, r5, r6, pc}
 8008e34:	08016d9d 	.word	0x08016d9d
 8008e38:	08016e84 	.word	0x08016e84

08008e3c <__multadd>:
 8008e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e40:	690e      	ldr	r6, [r1, #16]
 8008e42:	4607      	mov	r7, r0
 8008e44:	4698      	mov	r8, r3
 8008e46:	460c      	mov	r4, r1
 8008e48:	f101 0014 	add.w	r0, r1, #20
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	6805      	ldr	r5, [r0, #0]
 8008e50:	b2a9      	uxth	r1, r5
 8008e52:	fb02 8101 	mla	r1, r2, r1, r8
 8008e56:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008e5a:	0c2d      	lsrs	r5, r5, #16
 8008e5c:	fb02 c505 	mla	r5, r2, r5, ip
 8008e60:	b289      	uxth	r1, r1
 8008e62:	3301      	adds	r3, #1
 8008e64:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008e68:	429e      	cmp	r6, r3
 8008e6a:	f840 1b04 	str.w	r1, [r0], #4
 8008e6e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008e72:	dcec      	bgt.n	8008e4e <__multadd+0x12>
 8008e74:	f1b8 0f00 	cmp.w	r8, #0
 8008e78:	d022      	beq.n	8008ec0 <__multadd+0x84>
 8008e7a:	68a3      	ldr	r3, [r4, #8]
 8008e7c:	42b3      	cmp	r3, r6
 8008e7e:	dc19      	bgt.n	8008eb4 <__multadd+0x78>
 8008e80:	6861      	ldr	r1, [r4, #4]
 8008e82:	4638      	mov	r0, r7
 8008e84:	3101      	adds	r1, #1
 8008e86:	f7ff ff77 	bl	8008d78 <_Balloc>
 8008e8a:	4605      	mov	r5, r0
 8008e8c:	b928      	cbnz	r0, 8008e9a <__multadd+0x5e>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	4b0d      	ldr	r3, [pc, #52]	; (8008ec8 <__multadd+0x8c>)
 8008e92:	480e      	ldr	r0, [pc, #56]	; (8008ecc <__multadd+0x90>)
 8008e94:	21b5      	movs	r1, #181	; 0xb5
 8008e96:	f000 fe27 	bl	8009ae8 <__assert_func>
 8008e9a:	6922      	ldr	r2, [r4, #16]
 8008e9c:	3202      	adds	r2, #2
 8008e9e:	f104 010c 	add.w	r1, r4, #12
 8008ea2:	0092      	lsls	r2, r2, #2
 8008ea4:	300c      	adds	r0, #12
 8008ea6:	f7ff ff59 	bl	8008d5c <memcpy>
 8008eaa:	4621      	mov	r1, r4
 8008eac:	4638      	mov	r0, r7
 8008eae:	f7ff ffa3 	bl	8008df8 <_Bfree>
 8008eb2:	462c      	mov	r4, r5
 8008eb4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008eb8:	3601      	adds	r6, #1
 8008eba:	f8c3 8014 	str.w	r8, [r3, #20]
 8008ebe:	6126      	str	r6, [r4, #16]
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec6:	bf00      	nop
 8008ec8:	08016e13 	.word	0x08016e13
 8008ecc:	08016e84 	.word	0x08016e84

08008ed0 <__hi0bits>:
 8008ed0:	0c03      	lsrs	r3, r0, #16
 8008ed2:	041b      	lsls	r3, r3, #16
 8008ed4:	b9d3      	cbnz	r3, 8008f0c <__hi0bits+0x3c>
 8008ed6:	0400      	lsls	r0, r0, #16
 8008ed8:	2310      	movs	r3, #16
 8008eda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ede:	bf04      	itt	eq
 8008ee0:	0200      	lsleq	r0, r0, #8
 8008ee2:	3308      	addeq	r3, #8
 8008ee4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ee8:	bf04      	itt	eq
 8008eea:	0100      	lsleq	r0, r0, #4
 8008eec:	3304      	addeq	r3, #4
 8008eee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ef2:	bf04      	itt	eq
 8008ef4:	0080      	lsleq	r0, r0, #2
 8008ef6:	3302      	addeq	r3, #2
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	db05      	blt.n	8008f08 <__hi0bits+0x38>
 8008efc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f00:	f103 0301 	add.w	r3, r3, #1
 8008f04:	bf08      	it	eq
 8008f06:	2320      	moveq	r3, #32
 8008f08:	4618      	mov	r0, r3
 8008f0a:	4770      	bx	lr
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e7e4      	b.n	8008eda <__hi0bits+0xa>

08008f10 <__lo0bits>:
 8008f10:	6803      	ldr	r3, [r0, #0]
 8008f12:	f013 0207 	ands.w	r2, r3, #7
 8008f16:	4601      	mov	r1, r0
 8008f18:	d00b      	beq.n	8008f32 <__lo0bits+0x22>
 8008f1a:	07da      	lsls	r2, r3, #31
 8008f1c:	d424      	bmi.n	8008f68 <__lo0bits+0x58>
 8008f1e:	0798      	lsls	r0, r3, #30
 8008f20:	bf49      	itett	mi
 8008f22:	085b      	lsrmi	r3, r3, #1
 8008f24:	089b      	lsrpl	r3, r3, #2
 8008f26:	2001      	movmi	r0, #1
 8008f28:	600b      	strmi	r3, [r1, #0]
 8008f2a:	bf5c      	itt	pl
 8008f2c:	600b      	strpl	r3, [r1, #0]
 8008f2e:	2002      	movpl	r0, #2
 8008f30:	4770      	bx	lr
 8008f32:	b298      	uxth	r0, r3
 8008f34:	b9b0      	cbnz	r0, 8008f64 <__lo0bits+0x54>
 8008f36:	0c1b      	lsrs	r3, r3, #16
 8008f38:	2010      	movs	r0, #16
 8008f3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008f3e:	bf04      	itt	eq
 8008f40:	0a1b      	lsreq	r3, r3, #8
 8008f42:	3008      	addeq	r0, #8
 8008f44:	071a      	lsls	r2, r3, #28
 8008f46:	bf04      	itt	eq
 8008f48:	091b      	lsreq	r3, r3, #4
 8008f4a:	3004      	addeq	r0, #4
 8008f4c:	079a      	lsls	r2, r3, #30
 8008f4e:	bf04      	itt	eq
 8008f50:	089b      	lsreq	r3, r3, #2
 8008f52:	3002      	addeq	r0, #2
 8008f54:	07da      	lsls	r2, r3, #31
 8008f56:	d403      	bmi.n	8008f60 <__lo0bits+0x50>
 8008f58:	085b      	lsrs	r3, r3, #1
 8008f5a:	f100 0001 	add.w	r0, r0, #1
 8008f5e:	d005      	beq.n	8008f6c <__lo0bits+0x5c>
 8008f60:	600b      	str	r3, [r1, #0]
 8008f62:	4770      	bx	lr
 8008f64:	4610      	mov	r0, r2
 8008f66:	e7e8      	b.n	8008f3a <__lo0bits+0x2a>
 8008f68:	2000      	movs	r0, #0
 8008f6a:	4770      	bx	lr
 8008f6c:	2020      	movs	r0, #32
 8008f6e:	4770      	bx	lr

08008f70 <__i2b>:
 8008f70:	b510      	push	{r4, lr}
 8008f72:	460c      	mov	r4, r1
 8008f74:	2101      	movs	r1, #1
 8008f76:	f7ff feff 	bl	8008d78 <_Balloc>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	b928      	cbnz	r0, 8008f8a <__i2b+0x1a>
 8008f7e:	4b05      	ldr	r3, [pc, #20]	; (8008f94 <__i2b+0x24>)
 8008f80:	4805      	ldr	r0, [pc, #20]	; (8008f98 <__i2b+0x28>)
 8008f82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f86:	f000 fdaf 	bl	8009ae8 <__assert_func>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	6144      	str	r4, [r0, #20]
 8008f8e:	6103      	str	r3, [r0, #16]
 8008f90:	bd10      	pop	{r4, pc}
 8008f92:	bf00      	nop
 8008f94:	08016e13 	.word	0x08016e13
 8008f98:	08016e84 	.word	0x08016e84

08008f9c <__multiply>:
 8008f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa0:	4614      	mov	r4, r2
 8008fa2:	690a      	ldr	r2, [r1, #16]
 8008fa4:	6923      	ldr	r3, [r4, #16]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	bfb8      	it	lt
 8008faa:	460b      	movlt	r3, r1
 8008fac:	460d      	mov	r5, r1
 8008fae:	bfbc      	itt	lt
 8008fb0:	4625      	movlt	r5, r4
 8008fb2:	461c      	movlt	r4, r3
 8008fb4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008fb8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008fbc:	68ab      	ldr	r3, [r5, #8]
 8008fbe:	6869      	ldr	r1, [r5, #4]
 8008fc0:	eb0a 0709 	add.w	r7, sl, r9
 8008fc4:	42bb      	cmp	r3, r7
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	bfb8      	it	lt
 8008fca:	3101      	addlt	r1, #1
 8008fcc:	f7ff fed4 	bl	8008d78 <_Balloc>
 8008fd0:	b930      	cbnz	r0, 8008fe0 <__multiply+0x44>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	4b42      	ldr	r3, [pc, #264]	; (80090e0 <__multiply+0x144>)
 8008fd6:	4843      	ldr	r0, [pc, #268]	; (80090e4 <__multiply+0x148>)
 8008fd8:	f240 115d 	movw	r1, #349	; 0x15d
 8008fdc:	f000 fd84 	bl	8009ae8 <__assert_func>
 8008fe0:	f100 0614 	add.w	r6, r0, #20
 8008fe4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008fe8:	4633      	mov	r3, r6
 8008fea:	2200      	movs	r2, #0
 8008fec:	4543      	cmp	r3, r8
 8008fee:	d31e      	bcc.n	800902e <__multiply+0x92>
 8008ff0:	f105 0c14 	add.w	ip, r5, #20
 8008ff4:	f104 0314 	add.w	r3, r4, #20
 8008ff8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008ffc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009000:	9202      	str	r2, [sp, #8]
 8009002:	ebac 0205 	sub.w	r2, ip, r5
 8009006:	3a15      	subs	r2, #21
 8009008:	f022 0203 	bic.w	r2, r2, #3
 800900c:	3204      	adds	r2, #4
 800900e:	f105 0115 	add.w	r1, r5, #21
 8009012:	458c      	cmp	ip, r1
 8009014:	bf38      	it	cc
 8009016:	2204      	movcc	r2, #4
 8009018:	9201      	str	r2, [sp, #4]
 800901a:	9a02      	ldr	r2, [sp, #8]
 800901c:	9303      	str	r3, [sp, #12]
 800901e:	429a      	cmp	r2, r3
 8009020:	d808      	bhi.n	8009034 <__multiply+0x98>
 8009022:	2f00      	cmp	r7, #0
 8009024:	dc55      	bgt.n	80090d2 <__multiply+0x136>
 8009026:	6107      	str	r7, [r0, #16]
 8009028:	b005      	add	sp, #20
 800902a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902e:	f843 2b04 	str.w	r2, [r3], #4
 8009032:	e7db      	b.n	8008fec <__multiply+0x50>
 8009034:	f8b3 a000 	ldrh.w	sl, [r3]
 8009038:	f1ba 0f00 	cmp.w	sl, #0
 800903c:	d020      	beq.n	8009080 <__multiply+0xe4>
 800903e:	f105 0e14 	add.w	lr, r5, #20
 8009042:	46b1      	mov	r9, r6
 8009044:	2200      	movs	r2, #0
 8009046:	f85e 4b04 	ldr.w	r4, [lr], #4
 800904a:	f8d9 b000 	ldr.w	fp, [r9]
 800904e:	b2a1      	uxth	r1, r4
 8009050:	fa1f fb8b 	uxth.w	fp, fp
 8009054:	fb0a b101 	mla	r1, sl, r1, fp
 8009058:	4411      	add	r1, r2
 800905a:	f8d9 2000 	ldr.w	r2, [r9]
 800905e:	0c24      	lsrs	r4, r4, #16
 8009060:	0c12      	lsrs	r2, r2, #16
 8009062:	fb0a 2404 	mla	r4, sl, r4, r2
 8009066:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800906a:	b289      	uxth	r1, r1
 800906c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009070:	45f4      	cmp	ip, lr
 8009072:	f849 1b04 	str.w	r1, [r9], #4
 8009076:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800907a:	d8e4      	bhi.n	8009046 <__multiply+0xaa>
 800907c:	9901      	ldr	r1, [sp, #4]
 800907e:	5072      	str	r2, [r6, r1]
 8009080:	9a03      	ldr	r2, [sp, #12]
 8009082:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009086:	3304      	adds	r3, #4
 8009088:	f1b9 0f00 	cmp.w	r9, #0
 800908c:	d01f      	beq.n	80090ce <__multiply+0x132>
 800908e:	6834      	ldr	r4, [r6, #0]
 8009090:	f105 0114 	add.w	r1, r5, #20
 8009094:	46b6      	mov	lr, r6
 8009096:	f04f 0a00 	mov.w	sl, #0
 800909a:	880a      	ldrh	r2, [r1, #0]
 800909c:	f8be b002 	ldrh.w	fp, [lr, #2]
 80090a0:	fb09 b202 	mla	r2, r9, r2, fp
 80090a4:	4492      	add	sl, r2
 80090a6:	b2a4      	uxth	r4, r4
 80090a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80090ac:	f84e 4b04 	str.w	r4, [lr], #4
 80090b0:	f851 4b04 	ldr.w	r4, [r1], #4
 80090b4:	f8be 2000 	ldrh.w	r2, [lr]
 80090b8:	0c24      	lsrs	r4, r4, #16
 80090ba:	fb09 2404 	mla	r4, r9, r4, r2
 80090be:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80090c2:	458c      	cmp	ip, r1
 80090c4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80090c8:	d8e7      	bhi.n	800909a <__multiply+0xfe>
 80090ca:	9a01      	ldr	r2, [sp, #4]
 80090cc:	50b4      	str	r4, [r6, r2]
 80090ce:	3604      	adds	r6, #4
 80090d0:	e7a3      	b.n	800901a <__multiply+0x7e>
 80090d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1a5      	bne.n	8009026 <__multiply+0x8a>
 80090da:	3f01      	subs	r7, #1
 80090dc:	e7a1      	b.n	8009022 <__multiply+0x86>
 80090de:	bf00      	nop
 80090e0:	08016e13 	.word	0x08016e13
 80090e4:	08016e84 	.word	0x08016e84

080090e8 <__pow5mult>:
 80090e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090ec:	4615      	mov	r5, r2
 80090ee:	f012 0203 	ands.w	r2, r2, #3
 80090f2:	4606      	mov	r6, r0
 80090f4:	460f      	mov	r7, r1
 80090f6:	d007      	beq.n	8009108 <__pow5mult+0x20>
 80090f8:	4c25      	ldr	r4, [pc, #148]	; (8009190 <__pow5mult+0xa8>)
 80090fa:	3a01      	subs	r2, #1
 80090fc:	2300      	movs	r3, #0
 80090fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009102:	f7ff fe9b 	bl	8008e3c <__multadd>
 8009106:	4607      	mov	r7, r0
 8009108:	10ad      	asrs	r5, r5, #2
 800910a:	d03d      	beq.n	8009188 <__pow5mult+0xa0>
 800910c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800910e:	b97c      	cbnz	r4, 8009130 <__pow5mult+0x48>
 8009110:	2010      	movs	r0, #16
 8009112:	f7ff fe1b 	bl	8008d4c <malloc>
 8009116:	4602      	mov	r2, r0
 8009118:	6270      	str	r0, [r6, #36]	; 0x24
 800911a:	b928      	cbnz	r0, 8009128 <__pow5mult+0x40>
 800911c:	4b1d      	ldr	r3, [pc, #116]	; (8009194 <__pow5mult+0xac>)
 800911e:	481e      	ldr	r0, [pc, #120]	; (8009198 <__pow5mult+0xb0>)
 8009120:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009124:	f000 fce0 	bl	8009ae8 <__assert_func>
 8009128:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800912c:	6004      	str	r4, [r0, #0]
 800912e:	60c4      	str	r4, [r0, #12]
 8009130:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009134:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009138:	b94c      	cbnz	r4, 800914e <__pow5mult+0x66>
 800913a:	f240 2171 	movw	r1, #625	; 0x271
 800913e:	4630      	mov	r0, r6
 8009140:	f7ff ff16 	bl	8008f70 <__i2b>
 8009144:	2300      	movs	r3, #0
 8009146:	f8c8 0008 	str.w	r0, [r8, #8]
 800914a:	4604      	mov	r4, r0
 800914c:	6003      	str	r3, [r0, #0]
 800914e:	f04f 0900 	mov.w	r9, #0
 8009152:	07eb      	lsls	r3, r5, #31
 8009154:	d50a      	bpl.n	800916c <__pow5mult+0x84>
 8009156:	4639      	mov	r1, r7
 8009158:	4622      	mov	r2, r4
 800915a:	4630      	mov	r0, r6
 800915c:	f7ff ff1e 	bl	8008f9c <__multiply>
 8009160:	4639      	mov	r1, r7
 8009162:	4680      	mov	r8, r0
 8009164:	4630      	mov	r0, r6
 8009166:	f7ff fe47 	bl	8008df8 <_Bfree>
 800916a:	4647      	mov	r7, r8
 800916c:	106d      	asrs	r5, r5, #1
 800916e:	d00b      	beq.n	8009188 <__pow5mult+0xa0>
 8009170:	6820      	ldr	r0, [r4, #0]
 8009172:	b938      	cbnz	r0, 8009184 <__pow5mult+0x9c>
 8009174:	4622      	mov	r2, r4
 8009176:	4621      	mov	r1, r4
 8009178:	4630      	mov	r0, r6
 800917a:	f7ff ff0f 	bl	8008f9c <__multiply>
 800917e:	6020      	str	r0, [r4, #0]
 8009180:	f8c0 9000 	str.w	r9, [r0]
 8009184:	4604      	mov	r4, r0
 8009186:	e7e4      	b.n	8009152 <__pow5mult+0x6a>
 8009188:	4638      	mov	r0, r7
 800918a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800918e:	bf00      	nop
 8009190:	08016fd8 	.word	0x08016fd8
 8009194:	08016d9d 	.word	0x08016d9d
 8009198:	08016e84 	.word	0x08016e84

0800919c <__lshift>:
 800919c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a0:	460c      	mov	r4, r1
 80091a2:	6849      	ldr	r1, [r1, #4]
 80091a4:	6923      	ldr	r3, [r4, #16]
 80091a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091aa:	68a3      	ldr	r3, [r4, #8]
 80091ac:	4607      	mov	r7, r0
 80091ae:	4691      	mov	r9, r2
 80091b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091b4:	f108 0601 	add.w	r6, r8, #1
 80091b8:	42b3      	cmp	r3, r6
 80091ba:	db0b      	blt.n	80091d4 <__lshift+0x38>
 80091bc:	4638      	mov	r0, r7
 80091be:	f7ff fddb 	bl	8008d78 <_Balloc>
 80091c2:	4605      	mov	r5, r0
 80091c4:	b948      	cbnz	r0, 80091da <__lshift+0x3e>
 80091c6:	4602      	mov	r2, r0
 80091c8:	4b28      	ldr	r3, [pc, #160]	; (800926c <__lshift+0xd0>)
 80091ca:	4829      	ldr	r0, [pc, #164]	; (8009270 <__lshift+0xd4>)
 80091cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80091d0:	f000 fc8a 	bl	8009ae8 <__assert_func>
 80091d4:	3101      	adds	r1, #1
 80091d6:	005b      	lsls	r3, r3, #1
 80091d8:	e7ee      	b.n	80091b8 <__lshift+0x1c>
 80091da:	2300      	movs	r3, #0
 80091dc:	f100 0114 	add.w	r1, r0, #20
 80091e0:	f100 0210 	add.w	r2, r0, #16
 80091e4:	4618      	mov	r0, r3
 80091e6:	4553      	cmp	r3, sl
 80091e8:	db33      	blt.n	8009252 <__lshift+0xb6>
 80091ea:	6920      	ldr	r0, [r4, #16]
 80091ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091f0:	f104 0314 	add.w	r3, r4, #20
 80091f4:	f019 091f 	ands.w	r9, r9, #31
 80091f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009200:	d02b      	beq.n	800925a <__lshift+0xbe>
 8009202:	f1c9 0e20 	rsb	lr, r9, #32
 8009206:	468a      	mov	sl, r1
 8009208:	2200      	movs	r2, #0
 800920a:	6818      	ldr	r0, [r3, #0]
 800920c:	fa00 f009 	lsl.w	r0, r0, r9
 8009210:	4302      	orrs	r2, r0
 8009212:	f84a 2b04 	str.w	r2, [sl], #4
 8009216:	f853 2b04 	ldr.w	r2, [r3], #4
 800921a:	459c      	cmp	ip, r3
 800921c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009220:	d8f3      	bhi.n	800920a <__lshift+0x6e>
 8009222:	ebac 0304 	sub.w	r3, ip, r4
 8009226:	3b15      	subs	r3, #21
 8009228:	f023 0303 	bic.w	r3, r3, #3
 800922c:	3304      	adds	r3, #4
 800922e:	f104 0015 	add.w	r0, r4, #21
 8009232:	4584      	cmp	ip, r0
 8009234:	bf38      	it	cc
 8009236:	2304      	movcc	r3, #4
 8009238:	50ca      	str	r2, [r1, r3]
 800923a:	b10a      	cbz	r2, 8009240 <__lshift+0xa4>
 800923c:	f108 0602 	add.w	r6, r8, #2
 8009240:	3e01      	subs	r6, #1
 8009242:	4638      	mov	r0, r7
 8009244:	612e      	str	r6, [r5, #16]
 8009246:	4621      	mov	r1, r4
 8009248:	f7ff fdd6 	bl	8008df8 <_Bfree>
 800924c:	4628      	mov	r0, r5
 800924e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009252:	f842 0f04 	str.w	r0, [r2, #4]!
 8009256:	3301      	adds	r3, #1
 8009258:	e7c5      	b.n	80091e6 <__lshift+0x4a>
 800925a:	3904      	subs	r1, #4
 800925c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009260:	f841 2f04 	str.w	r2, [r1, #4]!
 8009264:	459c      	cmp	ip, r3
 8009266:	d8f9      	bhi.n	800925c <__lshift+0xc0>
 8009268:	e7ea      	b.n	8009240 <__lshift+0xa4>
 800926a:	bf00      	nop
 800926c:	08016e13 	.word	0x08016e13
 8009270:	08016e84 	.word	0x08016e84

08009274 <__mcmp>:
 8009274:	b530      	push	{r4, r5, lr}
 8009276:	6902      	ldr	r2, [r0, #16]
 8009278:	690c      	ldr	r4, [r1, #16]
 800927a:	1b12      	subs	r2, r2, r4
 800927c:	d10e      	bne.n	800929c <__mcmp+0x28>
 800927e:	f100 0314 	add.w	r3, r0, #20
 8009282:	3114      	adds	r1, #20
 8009284:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009288:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800928c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009290:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009294:	42a5      	cmp	r5, r4
 8009296:	d003      	beq.n	80092a0 <__mcmp+0x2c>
 8009298:	d305      	bcc.n	80092a6 <__mcmp+0x32>
 800929a:	2201      	movs	r2, #1
 800929c:	4610      	mov	r0, r2
 800929e:	bd30      	pop	{r4, r5, pc}
 80092a0:	4283      	cmp	r3, r0
 80092a2:	d3f3      	bcc.n	800928c <__mcmp+0x18>
 80092a4:	e7fa      	b.n	800929c <__mcmp+0x28>
 80092a6:	f04f 32ff 	mov.w	r2, #4294967295
 80092aa:	e7f7      	b.n	800929c <__mcmp+0x28>

080092ac <__mdiff>:
 80092ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b0:	460c      	mov	r4, r1
 80092b2:	4606      	mov	r6, r0
 80092b4:	4611      	mov	r1, r2
 80092b6:	4620      	mov	r0, r4
 80092b8:	4617      	mov	r7, r2
 80092ba:	f7ff ffdb 	bl	8009274 <__mcmp>
 80092be:	1e05      	subs	r5, r0, #0
 80092c0:	d110      	bne.n	80092e4 <__mdiff+0x38>
 80092c2:	4629      	mov	r1, r5
 80092c4:	4630      	mov	r0, r6
 80092c6:	f7ff fd57 	bl	8008d78 <_Balloc>
 80092ca:	b930      	cbnz	r0, 80092da <__mdiff+0x2e>
 80092cc:	4b39      	ldr	r3, [pc, #228]	; (80093b4 <__mdiff+0x108>)
 80092ce:	4602      	mov	r2, r0
 80092d0:	f240 2132 	movw	r1, #562	; 0x232
 80092d4:	4838      	ldr	r0, [pc, #224]	; (80093b8 <__mdiff+0x10c>)
 80092d6:	f000 fc07 	bl	8009ae8 <__assert_func>
 80092da:	2301      	movs	r3, #1
 80092dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e4:	bfa4      	itt	ge
 80092e6:	463b      	movge	r3, r7
 80092e8:	4627      	movge	r7, r4
 80092ea:	4630      	mov	r0, r6
 80092ec:	6879      	ldr	r1, [r7, #4]
 80092ee:	bfa6      	itte	ge
 80092f0:	461c      	movge	r4, r3
 80092f2:	2500      	movge	r5, #0
 80092f4:	2501      	movlt	r5, #1
 80092f6:	f7ff fd3f 	bl	8008d78 <_Balloc>
 80092fa:	b920      	cbnz	r0, 8009306 <__mdiff+0x5a>
 80092fc:	4b2d      	ldr	r3, [pc, #180]	; (80093b4 <__mdiff+0x108>)
 80092fe:	4602      	mov	r2, r0
 8009300:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009304:	e7e6      	b.n	80092d4 <__mdiff+0x28>
 8009306:	693e      	ldr	r6, [r7, #16]
 8009308:	60c5      	str	r5, [r0, #12]
 800930a:	6925      	ldr	r5, [r4, #16]
 800930c:	f107 0114 	add.w	r1, r7, #20
 8009310:	f104 0914 	add.w	r9, r4, #20
 8009314:	f100 0e14 	add.w	lr, r0, #20
 8009318:	f107 0210 	add.w	r2, r7, #16
 800931c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009320:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009324:	46f2      	mov	sl, lr
 8009326:	2700      	movs	r7, #0
 8009328:	f859 3b04 	ldr.w	r3, [r9], #4
 800932c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009330:	fa1f f883 	uxth.w	r8, r3
 8009334:	fa17 f78b 	uxtah	r7, r7, fp
 8009338:	0c1b      	lsrs	r3, r3, #16
 800933a:	eba7 0808 	sub.w	r8, r7, r8
 800933e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009342:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009346:	fa1f f888 	uxth.w	r8, r8
 800934a:	141f      	asrs	r7, r3, #16
 800934c:	454d      	cmp	r5, r9
 800934e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009352:	f84a 3b04 	str.w	r3, [sl], #4
 8009356:	d8e7      	bhi.n	8009328 <__mdiff+0x7c>
 8009358:	1b2b      	subs	r3, r5, r4
 800935a:	3b15      	subs	r3, #21
 800935c:	f023 0303 	bic.w	r3, r3, #3
 8009360:	3304      	adds	r3, #4
 8009362:	3415      	adds	r4, #21
 8009364:	42a5      	cmp	r5, r4
 8009366:	bf38      	it	cc
 8009368:	2304      	movcc	r3, #4
 800936a:	4419      	add	r1, r3
 800936c:	4473      	add	r3, lr
 800936e:	469e      	mov	lr, r3
 8009370:	460d      	mov	r5, r1
 8009372:	4565      	cmp	r5, ip
 8009374:	d30e      	bcc.n	8009394 <__mdiff+0xe8>
 8009376:	f10c 0203 	add.w	r2, ip, #3
 800937a:	1a52      	subs	r2, r2, r1
 800937c:	f022 0203 	bic.w	r2, r2, #3
 8009380:	3903      	subs	r1, #3
 8009382:	458c      	cmp	ip, r1
 8009384:	bf38      	it	cc
 8009386:	2200      	movcc	r2, #0
 8009388:	441a      	add	r2, r3
 800938a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800938e:	b17b      	cbz	r3, 80093b0 <__mdiff+0x104>
 8009390:	6106      	str	r6, [r0, #16]
 8009392:	e7a5      	b.n	80092e0 <__mdiff+0x34>
 8009394:	f855 8b04 	ldr.w	r8, [r5], #4
 8009398:	fa17 f488 	uxtah	r4, r7, r8
 800939c:	1422      	asrs	r2, r4, #16
 800939e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80093a2:	b2a4      	uxth	r4, r4
 80093a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80093a8:	f84e 4b04 	str.w	r4, [lr], #4
 80093ac:	1417      	asrs	r7, r2, #16
 80093ae:	e7e0      	b.n	8009372 <__mdiff+0xc6>
 80093b0:	3e01      	subs	r6, #1
 80093b2:	e7ea      	b.n	800938a <__mdiff+0xde>
 80093b4:	08016e13 	.word	0x08016e13
 80093b8:	08016e84 	.word	0x08016e84

080093bc <__d2b>:
 80093bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093c0:	4689      	mov	r9, r1
 80093c2:	2101      	movs	r1, #1
 80093c4:	ec57 6b10 	vmov	r6, r7, d0
 80093c8:	4690      	mov	r8, r2
 80093ca:	f7ff fcd5 	bl	8008d78 <_Balloc>
 80093ce:	4604      	mov	r4, r0
 80093d0:	b930      	cbnz	r0, 80093e0 <__d2b+0x24>
 80093d2:	4602      	mov	r2, r0
 80093d4:	4b25      	ldr	r3, [pc, #148]	; (800946c <__d2b+0xb0>)
 80093d6:	4826      	ldr	r0, [pc, #152]	; (8009470 <__d2b+0xb4>)
 80093d8:	f240 310a 	movw	r1, #778	; 0x30a
 80093dc:	f000 fb84 	bl	8009ae8 <__assert_func>
 80093e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80093e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093e8:	bb35      	cbnz	r5, 8009438 <__d2b+0x7c>
 80093ea:	2e00      	cmp	r6, #0
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	d028      	beq.n	8009442 <__d2b+0x86>
 80093f0:	4668      	mov	r0, sp
 80093f2:	9600      	str	r6, [sp, #0]
 80093f4:	f7ff fd8c 	bl	8008f10 <__lo0bits>
 80093f8:	9900      	ldr	r1, [sp, #0]
 80093fa:	b300      	cbz	r0, 800943e <__d2b+0x82>
 80093fc:	9a01      	ldr	r2, [sp, #4]
 80093fe:	f1c0 0320 	rsb	r3, r0, #32
 8009402:	fa02 f303 	lsl.w	r3, r2, r3
 8009406:	430b      	orrs	r3, r1
 8009408:	40c2      	lsrs	r2, r0
 800940a:	6163      	str	r3, [r4, #20]
 800940c:	9201      	str	r2, [sp, #4]
 800940e:	9b01      	ldr	r3, [sp, #4]
 8009410:	61a3      	str	r3, [r4, #24]
 8009412:	2b00      	cmp	r3, #0
 8009414:	bf14      	ite	ne
 8009416:	2202      	movne	r2, #2
 8009418:	2201      	moveq	r2, #1
 800941a:	6122      	str	r2, [r4, #16]
 800941c:	b1d5      	cbz	r5, 8009454 <__d2b+0x98>
 800941e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009422:	4405      	add	r5, r0
 8009424:	f8c9 5000 	str.w	r5, [r9]
 8009428:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800942c:	f8c8 0000 	str.w	r0, [r8]
 8009430:	4620      	mov	r0, r4
 8009432:	b003      	add	sp, #12
 8009434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009438:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800943c:	e7d5      	b.n	80093ea <__d2b+0x2e>
 800943e:	6161      	str	r1, [r4, #20]
 8009440:	e7e5      	b.n	800940e <__d2b+0x52>
 8009442:	a801      	add	r0, sp, #4
 8009444:	f7ff fd64 	bl	8008f10 <__lo0bits>
 8009448:	9b01      	ldr	r3, [sp, #4]
 800944a:	6163      	str	r3, [r4, #20]
 800944c:	2201      	movs	r2, #1
 800944e:	6122      	str	r2, [r4, #16]
 8009450:	3020      	adds	r0, #32
 8009452:	e7e3      	b.n	800941c <__d2b+0x60>
 8009454:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009458:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800945c:	f8c9 0000 	str.w	r0, [r9]
 8009460:	6918      	ldr	r0, [r3, #16]
 8009462:	f7ff fd35 	bl	8008ed0 <__hi0bits>
 8009466:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800946a:	e7df      	b.n	800942c <__d2b+0x70>
 800946c:	08016e13 	.word	0x08016e13
 8009470:	08016e84 	.word	0x08016e84

08009474 <_calloc_r>:
 8009474:	b513      	push	{r0, r1, r4, lr}
 8009476:	434a      	muls	r2, r1
 8009478:	4611      	mov	r1, r2
 800947a:	9201      	str	r2, [sp, #4]
 800947c:	f000 f85a 	bl	8009534 <_malloc_r>
 8009480:	4604      	mov	r4, r0
 8009482:	b118      	cbz	r0, 800948c <_calloc_r+0x18>
 8009484:	9a01      	ldr	r2, [sp, #4]
 8009486:	2100      	movs	r1, #0
 8009488:	f7fe f85e 	bl	8007548 <memset>
 800948c:	4620      	mov	r0, r4
 800948e:	b002      	add	sp, #8
 8009490:	bd10      	pop	{r4, pc}
	...

08009494 <_free_r>:
 8009494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009496:	2900      	cmp	r1, #0
 8009498:	d048      	beq.n	800952c <_free_r+0x98>
 800949a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800949e:	9001      	str	r0, [sp, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f1a1 0404 	sub.w	r4, r1, #4
 80094a6:	bfb8      	it	lt
 80094a8:	18e4      	addlt	r4, r4, r3
 80094aa:	f000 fca7 	bl	8009dfc <__malloc_lock>
 80094ae:	4a20      	ldr	r2, [pc, #128]	; (8009530 <_free_r+0x9c>)
 80094b0:	9801      	ldr	r0, [sp, #4]
 80094b2:	6813      	ldr	r3, [r2, #0]
 80094b4:	4615      	mov	r5, r2
 80094b6:	b933      	cbnz	r3, 80094c6 <_free_r+0x32>
 80094b8:	6063      	str	r3, [r4, #4]
 80094ba:	6014      	str	r4, [r2, #0]
 80094bc:	b003      	add	sp, #12
 80094be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094c2:	f000 bca1 	b.w	8009e08 <__malloc_unlock>
 80094c6:	42a3      	cmp	r3, r4
 80094c8:	d90b      	bls.n	80094e2 <_free_r+0x4e>
 80094ca:	6821      	ldr	r1, [r4, #0]
 80094cc:	1862      	adds	r2, r4, r1
 80094ce:	4293      	cmp	r3, r2
 80094d0:	bf04      	itt	eq
 80094d2:	681a      	ldreq	r2, [r3, #0]
 80094d4:	685b      	ldreq	r3, [r3, #4]
 80094d6:	6063      	str	r3, [r4, #4]
 80094d8:	bf04      	itt	eq
 80094da:	1852      	addeq	r2, r2, r1
 80094dc:	6022      	streq	r2, [r4, #0]
 80094de:	602c      	str	r4, [r5, #0]
 80094e0:	e7ec      	b.n	80094bc <_free_r+0x28>
 80094e2:	461a      	mov	r2, r3
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	b10b      	cbz	r3, 80094ec <_free_r+0x58>
 80094e8:	42a3      	cmp	r3, r4
 80094ea:	d9fa      	bls.n	80094e2 <_free_r+0x4e>
 80094ec:	6811      	ldr	r1, [r2, #0]
 80094ee:	1855      	adds	r5, r2, r1
 80094f0:	42a5      	cmp	r5, r4
 80094f2:	d10b      	bne.n	800950c <_free_r+0x78>
 80094f4:	6824      	ldr	r4, [r4, #0]
 80094f6:	4421      	add	r1, r4
 80094f8:	1854      	adds	r4, r2, r1
 80094fa:	42a3      	cmp	r3, r4
 80094fc:	6011      	str	r1, [r2, #0]
 80094fe:	d1dd      	bne.n	80094bc <_free_r+0x28>
 8009500:	681c      	ldr	r4, [r3, #0]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	6053      	str	r3, [r2, #4]
 8009506:	4421      	add	r1, r4
 8009508:	6011      	str	r1, [r2, #0]
 800950a:	e7d7      	b.n	80094bc <_free_r+0x28>
 800950c:	d902      	bls.n	8009514 <_free_r+0x80>
 800950e:	230c      	movs	r3, #12
 8009510:	6003      	str	r3, [r0, #0]
 8009512:	e7d3      	b.n	80094bc <_free_r+0x28>
 8009514:	6825      	ldr	r5, [r4, #0]
 8009516:	1961      	adds	r1, r4, r5
 8009518:	428b      	cmp	r3, r1
 800951a:	bf04      	itt	eq
 800951c:	6819      	ldreq	r1, [r3, #0]
 800951e:	685b      	ldreq	r3, [r3, #4]
 8009520:	6063      	str	r3, [r4, #4]
 8009522:	bf04      	itt	eq
 8009524:	1949      	addeq	r1, r1, r5
 8009526:	6021      	streq	r1, [r4, #0]
 8009528:	6054      	str	r4, [r2, #4]
 800952a:	e7c7      	b.n	80094bc <_free_r+0x28>
 800952c:	b003      	add	sp, #12
 800952e:	bd30      	pop	{r4, r5, pc}
 8009530:	20000218 	.word	0x20000218

08009534 <_malloc_r>:
 8009534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009536:	1ccd      	adds	r5, r1, #3
 8009538:	f025 0503 	bic.w	r5, r5, #3
 800953c:	3508      	adds	r5, #8
 800953e:	2d0c      	cmp	r5, #12
 8009540:	bf38      	it	cc
 8009542:	250c      	movcc	r5, #12
 8009544:	2d00      	cmp	r5, #0
 8009546:	4606      	mov	r6, r0
 8009548:	db01      	blt.n	800954e <_malloc_r+0x1a>
 800954a:	42a9      	cmp	r1, r5
 800954c:	d903      	bls.n	8009556 <_malloc_r+0x22>
 800954e:	230c      	movs	r3, #12
 8009550:	6033      	str	r3, [r6, #0]
 8009552:	2000      	movs	r0, #0
 8009554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009556:	f000 fc51 	bl	8009dfc <__malloc_lock>
 800955a:	4921      	ldr	r1, [pc, #132]	; (80095e0 <_malloc_r+0xac>)
 800955c:	680a      	ldr	r2, [r1, #0]
 800955e:	4614      	mov	r4, r2
 8009560:	b99c      	cbnz	r4, 800958a <_malloc_r+0x56>
 8009562:	4f20      	ldr	r7, [pc, #128]	; (80095e4 <_malloc_r+0xb0>)
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	b923      	cbnz	r3, 8009572 <_malloc_r+0x3e>
 8009568:	4621      	mov	r1, r4
 800956a:	4630      	mov	r0, r6
 800956c:	f000 f996 	bl	800989c <_sbrk_r>
 8009570:	6038      	str	r0, [r7, #0]
 8009572:	4629      	mov	r1, r5
 8009574:	4630      	mov	r0, r6
 8009576:	f000 f991 	bl	800989c <_sbrk_r>
 800957a:	1c43      	adds	r3, r0, #1
 800957c:	d123      	bne.n	80095c6 <_malloc_r+0x92>
 800957e:	230c      	movs	r3, #12
 8009580:	6033      	str	r3, [r6, #0]
 8009582:	4630      	mov	r0, r6
 8009584:	f000 fc40 	bl	8009e08 <__malloc_unlock>
 8009588:	e7e3      	b.n	8009552 <_malloc_r+0x1e>
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	1b5b      	subs	r3, r3, r5
 800958e:	d417      	bmi.n	80095c0 <_malloc_r+0x8c>
 8009590:	2b0b      	cmp	r3, #11
 8009592:	d903      	bls.n	800959c <_malloc_r+0x68>
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	441c      	add	r4, r3
 8009598:	6025      	str	r5, [r4, #0]
 800959a:	e004      	b.n	80095a6 <_malloc_r+0x72>
 800959c:	6863      	ldr	r3, [r4, #4]
 800959e:	42a2      	cmp	r2, r4
 80095a0:	bf0c      	ite	eq
 80095a2:	600b      	streq	r3, [r1, #0]
 80095a4:	6053      	strne	r3, [r2, #4]
 80095a6:	4630      	mov	r0, r6
 80095a8:	f000 fc2e 	bl	8009e08 <__malloc_unlock>
 80095ac:	f104 000b 	add.w	r0, r4, #11
 80095b0:	1d23      	adds	r3, r4, #4
 80095b2:	f020 0007 	bic.w	r0, r0, #7
 80095b6:	1ac2      	subs	r2, r0, r3
 80095b8:	d0cc      	beq.n	8009554 <_malloc_r+0x20>
 80095ba:	1a1b      	subs	r3, r3, r0
 80095bc:	50a3      	str	r3, [r4, r2]
 80095be:	e7c9      	b.n	8009554 <_malloc_r+0x20>
 80095c0:	4622      	mov	r2, r4
 80095c2:	6864      	ldr	r4, [r4, #4]
 80095c4:	e7cc      	b.n	8009560 <_malloc_r+0x2c>
 80095c6:	1cc4      	adds	r4, r0, #3
 80095c8:	f024 0403 	bic.w	r4, r4, #3
 80095cc:	42a0      	cmp	r0, r4
 80095ce:	d0e3      	beq.n	8009598 <_malloc_r+0x64>
 80095d0:	1a21      	subs	r1, r4, r0
 80095d2:	4630      	mov	r0, r6
 80095d4:	f000 f962 	bl	800989c <_sbrk_r>
 80095d8:	3001      	adds	r0, #1
 80095da:	d1dd      	bne.n	8009598 <_malloc_r+0x64>
 80095dc:	e7cf      	b.n	800957e <_malloc_r+0x4a>
 80095de:	bf00      	nop
 80095e0:	20000218 	.word	0x20000218
 80095e4:	2000021c 	.word	0x2000021c

080095e8 <__sfputc_r>:
 80095e8:	6893      	ldr	r3, [r2, #8]
 80095ea:	3b01      	subs	r3, #1
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	b410      	push	{r4}
 80095f0:	6093      	str	r3, [r2, #8]
 80095f2:	da08      	bge.n	8009606 <__sfputc_r+0x1e>
 80095f4:	6994      	ldr	r4, [r2, #24]
 80095f6:	42a3      	cmp	r3, r4
 80095f8:	db01      	blt.n	80095fe <__sfputc_r+0x16>
 80095fa:	290a      	cmp	r1, #10
 80095fc:	d103      	bne.n	8009606 <__sfputc_r+0x1e>
 80095fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009602:	f000 b99f 	b.w	8009944 <__swbuf_r>
 8009606:	6813      	ldr	r3, [r2, #0]
 8009608:	1c58      	adds	r0, r3, #1
 800960a:	6010      	str	r0, [r2, #0]
 800960c:	7019      	strb	r1, [r3, #0]
 800960e:	4608      	mov	r0, r1
 8009610:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009614:	4770      	bx	lr

08009616 <__sfputs_r>:
 8009616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009618:	4606      	mov	r6, r0
 800961a:	460f      	mov	r7, r1
 800961c:	4614      	mov	r4, r2
 800961e:	18d5      	adds	r5, r2, r3
 8009620:	42ac      	cmp	r4, r5
 8009622:	d101      	bne.n	8009628 <__sfputs_r+0x12>
 8009624:	2000      	movs	r0, #0
 8009626:	e007      	b.n	8009638 <__sfputs_r+0x22>
 8009628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800962c:	463a      	mov	r2, r7
 800962e:	4630      	mov	r0, r6
 8009630:	f7ff ffda 	bl	80095e8 <__sfputc_r>
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	d1f3      	bne.n	8009620 <__sfputs_r+0xa>
 8009638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800963c <_vfiprintf_r>:
 800963c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009640:	460d      	mov	r5, r1
 8009642:	b09d      	sub	sp, #116	; 0x74
 8009644:	4614      	mov	r4, r2
 8009646:	4698      	mov	r8, r3
 8009648:	4606      	mov	r6, r0
 800964a:	b118      	cbz	r0, 8009654 <_vfiprintf_r+0x18>
 800964c:	6983      	ldr	r3, [r0, #24]
 800964e:	b90b      	cbnz	r3, 8009654 <_vfiprintf_r+0x18>
 8009650:	f7ff fad6 	bl	8008c00 <__sinit>
 8009654:	4b89      	ldr	r3, [pc, #548]	; (800987c <_vfiprintf_r+0x240>)
 8009656:	429d      	cmp	r5, r3
 8009658:	d11b      	bne.n	8009692 <_vfiprintf_r+0x56>
 800965a:	6875      	ldr	r5, [r6, #4]
 800965c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800965e:	07d9      	lsls	r1, r3, #31
 8009660:	d405      	bmi.n	800966e <_vfiprintf_r+0x32>
 8009662:	89ab      	ldrh	r3, [r5, #12]
 8009664:	059a      	lsls	r2, r3, #22
 8009666:	d402      	bmi.n	800966e <_vfiprintf_r+0x32>
 8009668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800966a:	f7ff fb6c 	bl	8008d46 <__retarget_lock_acquire_recursive>
 800966e:	89ab      	ldrh	r3, [r5, #12]
 8009670:	071b      	lsls	r3, r3, #28
 8009672:	d501      	bpl.n	8009678 <_vfiprintf_r+0x3c>
 8009674:	692b      	ldr	r3, [r5, #16]
 8009676:	b9eb      	cbnz	r3, 80096b4 <_vfiprintf_r+0x78>
 8009678:	4629      	mov	r1, r5
 800967a:	4630      	mov	r0, r6
 800967c:	f000 f9c6 	bl	8009a0c <__swsetup_r>
 8009680:	b1c0      	cbz	r0, 80096b4 <_vfiprintf_r+0x78>
 8009682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009684:	07dc      	lsls	r4, r3, #31
 8009686:	d50e      	bpl.n	80096a6 <_vfiprintf_r+0x6a>
 8009688:	f04f 30ff 	mov.w	r0, #4294967295
 800968c:	b01d      	add	sp, #116	; 0x74
 800968e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009692:	4b7b      	ldr	r3, [pc, #492]	; (8009880 <_vfiprintf_r+0x244>)
 8009694:	429d      	cmp	r5, r3
 8009696:	d101      	bne.n	800969c <_vfiprintf_r+0x60>
 8009698:	68b5      	ldr	r5, [r6, #8]
 800969a:	e7df      	b.n	800965c <_vfiprintf_r+0x20>
 800969c:	4b79      	ldr	r3, [pc, #484]	; (8009884 <_vfiprintf_r+0x248>)
 800969e:	429d      	cmp	r5, r3
 80096a0:	bf08      	it	eq
 80096a2:	68f5      	ldreq	r5, [r6, #12]
 80096a4:	e7da      	b.n	800965c <_vfiprintf_r+0x20>
 80096a6:	89ab      	ldrh	r3, [r5, #12]
 80096a8:	0598      	lsls	r0, r3, #22
 80096aa:	d4ed      	bmi.n	8009688 <_vfiprintf_r+0x4c>
 80096ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ae:	f7ff fb4b 	bl	8008d48 <__retarget_lock_release_recursive>
 80096b2:	e7e9      	b.n	8009688 <_vfiprintf_r+0x4c>
 80096b4:	2300      	movs	r3, #0
 80096b6:	9309      	str	r3, [sp, #36]	; 0x24
 80096b8:	2320      	movs	r3, #32
 80096ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096be:	f8cd 800c 	str.w	r8, [sp, #12]
 80096c2:	2330      	movs	r3, #48	; 0x30
 80096c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009888 <_vfiprintf_r+0x24c>
 80096c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096cc:	f04f 0901 	mov.w	r9, #1
 80096d0:	4623      	mov	r3, r4
 80096d2:	469a      	mov	sl, r3
 80096d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096d8:	b10a      	cbz	r2, 80096de <_vfiprintf_r+0xa2>
 80096da:	2a25      	cmp	r2, #37	; 0x25
 80096dc:	d1f9      	bne.n	80096d2 <_vfiprintf_r+0x96>
 80096de:	ebba 0b04 	subs.w	fp, sl, r4
 80096e2:	d00b      	beq.n	80096fc <_vfiprintf_r+0xc0>
 80096e4:	465b      	mov	r3, fp
 80096e6:	4622      	mov	r2, r4
 80096e8:	4629      	mov	r1, r5
 80096ea:	4630      	mov	r0, r6
 80096ec:	f7ff ff93 	bl	8009616 <__sfputs_r>
 80096f0:	3001      	adds	r0, #1
 80096f2:	f000 80aa 	beq.w	800984a <_vfiprintf_r+0x20e>
 80096f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096f8:	445a      	add	r2, fp
 80096fa:	9209      	str	r2, [sp, #36]	; 0x24
 80096fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 80a2 	beq.w	800984a <_vfiprintf_r+0x20e>
 8009706:	2300      	movs	r3, #0
 8009708:	f04f 32ff 	mov.w	r2, #4294967295
 800970c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009710:	f10a 0a01 	add.w	sl, sl, #1
 8009714:	9304      	str	r3, [sp, #16]
 8009716:	9307      	str	r3, [sp, #28]
 8009718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800971c:	931a      	str	r3, [sp, #104]	; 0x68
 800971e:	4654      	mov	r4, sl
 8009720:	2205      	movs	r2, #5
 8009722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009726:	4858      	ldr	r0, [pc, #352]	; (8009888 <_vfiprintf_r+0x24c>)
 8009728:	f7f6 fd5a 	bl	80001e0 <memchr>
 800972c:	9a04      	ldr	r2, [sp, #16]
 800972e:	b9d8      	cbnz	r0, 8009768 <_vfiprintf_r+0x12c>
 8009730:	06d1      	lsls	r1, r2, #27
 8009732:	bf44      	itt	mi
 8009734:	2320      	movmi	r3, #32
 8009736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800973a:	0713      	lsls	r3, r2, #28
 800973c:	bf44      	itt	mi
 800973e:	232b      	movmi	r3, #43	; 0x2b
 8009740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009744:	f89a 3000 	ldrb.w	r3, [sl]
 8009748:	2b2a      	cmp	r3, #42	; 0x2a
 800974a:	d015      	beq.n	8009778 <_vfiprintf_r+0x13c>
 800974c:	9a07      	ldr	r2, [sp, #28]
 800974e:	4654      	mov	r4, sl
 8009750:	2000      	movs	r0, #0
 8009752:	f04f 0c0a 	mov.w	ip, #10
 8009756:	4621      	mov	r1, r4
 8009758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800975c:	3b30      	subs	r3, #48	; 0x30
 800975e:	2b09      	cmp	r3, #9
 8009760:	d94e      	bls.n	8009800 <_vfiprintf_r+0x1c4>
 8009762:	b1b0      	cbz	r0, 8009792 <_vfiprintf_r+0x156>
 8009764:	9207      	str	r2, [sp, #28]
 8009766:	e014      	b.n	8009792 <_vfiprintf_r+0x156>
 8009768:	eba0 0308 	sub.w	r3, r0, r8
 800976c:	fa09 f303 	lsl.w	r3, r9, r3
 8009770:	4313      	orrs	r3, r2
 8009772:	9304      	str	r3, [sp, #16]
 8009774:	46a2      	mov	sl, r4
 8009776:	e7d2      	b.n	800971e <_vfiprintf_r+0xe2>
 8009778:	9b03      	ldr	r3, [sp, #12]
 800977a:	1d19      	adds	r1, r3, #4
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	9103      	str	r1, [sp, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	bfbb      	ittet	lt
 8009784:	425b      	neglt	r3, r3
 8009786:	f042 0202 	orrlt.w	r2, r2, #2
 800978a:	9307      	strge	r3, [sp, #28]
 800978c:	9307      	strlt	r3, [sp, #28]
 800978e:	bfb8      	it	lt
 8009790:	9204      	strlt	r2, [sp, #16]
 8009792:	7823      	ldrb	r3, [r4, #0]
 8009794:	2b2e      	cmp	r3, #46	; 0x2e
 8009796:	d10c      	bne.n	80097b2 <_vfiprintf_r+0x176>
 8009798:	7863      	ldrb	r3, [r4, #1]
 800979a:	2b2a      	cmp	r3, #42	; 0x2a
 800979c:	d135      	bne.n	800980a <_vfiprintf_r+0x1ce>
 800979e:	9b03      	ldr	r3, [sp, #12]
 80097a0:	1d1a      	adds	r2, r3, #4
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	9203      	str	r2, [sp, #12]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	bfb8      	it	lt
 80097aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80097ae:	3402      	adds	r4, #2
 80097b0:	9305      	str	r3, [sp, #20]
 80097b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009898 <_vfiprintf_r+0x25c>
 80097b6:	7821      	ldrb	r1, [r4, #0]
 80097b8:	2203      	movs	r2, #3
 80097ba:	4650      	mov	r0, sl
 80097bc:	f7f6 fd10 	bl	80001e0 <memchr>
 80097c0:	b140      	cbz	r0, 80097d4 <_vfiprintf_r+0x198>
 80097c2:	2340      	movs	r3, #64	; 0x40
 80097c4:	eba0 000a 	sub.w	r0, r0, sl
 80097c8:	fa03 f000 	lsl.w	r0, r3, r0
 80097cc:	9b04      	ldr	r3, [sp, #16]
 80097ce:	4303      	orrs	r3, r0
 80097d0:	3401      	adds	r4, #1
 80097d2:	9304      	str	r3, [sp, #16]
 80097d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097d8:	482c      	ldr	r0, [pc, #176]	; (800988c <_vfiprintf_r+0x250>)
 80097da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097de:	2206      	movs	r2, #6
 80097e0:	f7f6 fcfe 	bl	80001e0 <memchr>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d03f      	beq.n	8009868 <_vfiprintf_r+0x22c>
 80097e8:	4b29      	ldr	r3, [pc, #164]	; (8009890 <_vfiprintf_r+0x254>)
 80097ea:	bb1b      	cbnz	r3, 8009834 <_vfiprintf_r+0x1f8>
 80097ec:	9b03      	ldr	r3, [sp, #12]
 80097ee:	3307      	adds	r3, #7
 80097f0:	f023 0307 	bic.w	r3, r3, #7
 80097f4:	3308      	adds	r3, #8
 80097f6:	9303      	str	r3, [sp, #12]
 80097f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097fa:	443b      	add	r3, r7
 80097fc:	9309      	str	r3, [sp, #36]	; 0x24
 80097fe:	e767      	b.n	80096d0 <_vfiprintf_r+0x94>
 8009800:	fb0c 3202 	mla	r2, ip, r2, r3
 8009804:	460c      	mov	r4, r1
 8009806:	2001      	movs	r0, #1
 8009808:	e7a5      	b.n	8009756 <_vfiprintf_r+0x11a>
 800980a:	2300      	movs	r3, #0
 800980c:	3401      	adds	r4, #1
 800980e:	9305      	str	r3, [sp, #20]
 8009810:	4619      	mov	r1, r3
 8009812:	f04f 0c0a 	mov.w	ip, #10
 8009816:	4620      	mov	r0, r4
 8009818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800981c:	3a30      	subs	r2, #48	; 0x30
 800981e:	2a09      	cmp	r2, #9
 8009820:	d903      	bls.n	800982a <_vfiprintf_r+0x1ee>
 8009822:	2b00      	cmp	r3, #0
 8009824:	d0c5      	beq.n	80097b2 <_vfiprintf_r+0x176>
 8009826:	9105      	str	r1, [sp, #20]
 8009828:	e7c3      	b.n	80097b2 <_vfiprintf_r+0x176>
 800982a:	fb0c 2101 	mla	r1, ip, r1, r2
 800982e:	4604      	mov	r4, r0
 8009830:	2301      	movs	r3, #1
 8009832:	e7f0      	b.n	8009816 <_vfiprintf_r+0x1da>
 8009834:	ab03      	add	r3, sp, #12
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	462a      	mov	r2, r5
 800983a:	4b16      	ldr	r3, [pc, #88]	; (8009894 <_vfiprintf_r+0x258>)
 800983c:	a904      	add	r1, sp, #16
 800983e:	4630      	mov	r0, r6
 8009840:	f7fd ff2a 	bl	8007698 <_printf_float>
 8009844:	4607      	mov	r7, r0
 8009846:	1c78      	adds	r0, r7, #1
 8009848:	d1d6      	bne.n	80097f8 <_vfiprintf_r+0x1bc>
 800984a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800984c:	07d9      	lsls	r1, r3, #31
 800984e:	d405      	bmi.n	800985c <_vfiprintf_r+0x220>
 8009850:	89ab      	ldrh	r3, [r5, #12]
 8009852:	059a      	lsls	r2, r3, #22
 8009854:	d402      	bmi.n	800985c <_vfiprintf_r+0x220>
 8009856:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009858:	f7ff fa76 	bl	8008d48 <__retarget_lock_release_recursive>
 800985c:	89ab      	ldrh	r3, [r5, #12]
 800985e:	065b      	lsls	r3, r3, #25
 8009860:	f53f af12 	bmi.w	8009688 <_vfiprintf_r+0x4c>
 8009864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009866:	e711      	b.n	800968c <_vfiprintf_r+0x50>
 8009868:	ab03      	add	r3, sp, #12
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	462a      	mov	r2, r5
 800986e:	4b09      	ldr	r3, [pc, #36]	; (8009894 <_vfiprintf_r+0x258>)
 8009870:	a904      	add	r1, sp, #16
 8009872:	4630      	mov	r0, r6
 8009874:	f7fe f9b4 	bl	8007be0 <_printf_i>
 8009878:	e7e4      	b.n	8009844 <_vfiprintf_r+0x208>
 800987a:	bf00      	nop
 800987c:	08016e44 	.word	0x08016e44
 8009880:	08016e64 	.word	0x08016e64
 8009884:	08016e24 	.word	0x08016e24
 8009888:	08016fe4 	.word	0x08016fe4
 800988c:	08016fee 	.word	0x08016fee
 8009890:	08007699 	.word	0x08007699
 8009894:	08009617 	.word	0x08009617
 8009898:	08016fea 	.word	0x08016fea

0800989c <_sbrk_r>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	4d06      	ldr	r5, [pc, #24]	; (80098b8 <_sbrk_r+0x1c>)
 80098a0:	2300      	movs	r3, #0
 80098a2:	4604      	mov	r4, r0
 80098a4:	4608      	mov	r0, r1
 80098a6:	602b      	str	r3, [r5, #0]
 80098a8:	f7fb fb02 	bl	8004eb0 <_sbrk>
 80098ac:	1c43      	adds	r3, r0, #1
 80098ae:	d102      	bne.n	80098b6 <_sbrk_r+0x1a>
 80098b0:	682b      	ldr	r3, [r5, #0]
 80098b2:	b103      	cbz	r3, 80098b6 <_sbrk_r+0x1a>
 80098b4:	6023      	str	r3, [r4, #0]
 80098b6:	bd38      	pop	{r3, r4, r5, pc}
 80098b8:	200003dc 	.word	0x200003dc

080098bc <__sread>:
 80098bc:	b510      	push	{r4, lr}
 80098be:	460c      	mov	r4, r1
 80098c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c4:	f000 faa6 	bl	8009e14 <_read_r>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	bfab      	itete	ge
 80098cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098ce:	89a3      	ldrhlt	r3, [r4, #12]
 80098d0:	181b      	addge	r3, r3, r0
 80098d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098d6:	bfac      	ite	ge
 80098d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80098da:	81a3      	strhlt	r3, [r4, #12]
 80098dc:	bd10      	pop	{r4, pc}

080098de <__swrite>:
 80098de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e2:	461f      	mov	r7, r3
 80098e4:	898b      	ldrh	r3, [r1, #12]
 80098e6:	05db      	lsls	r3, r3, #23
 80098e8:	4605      	mov	r5, r0
 80098ea:	460c      	mov	r4, r1
 80098ec:	4616      	mov	r6, r2
 80098ee:	d505      	bpl.n	80098fc <__swrite+0x1e>
 80098f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f4:	2302      	movs	r3, #2
 80098f6:	2200      	movs	r2, #0
 80098f8:	f000 f9f8 	bl	8009cec <_lseek_r>
 80098fc:	89a3      	ldrh	r3, [r4, #12]
 80098fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009906:	81a3      	strh	r3, [r4, #12]
 8009908:	4632      	mov	r2, r6
 800990a:	463b      	mov	r3, r7
 800990c:	4628      	mov	r0, r5
 800990e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009912:	f000 b869 	b.w	80099e8 <_write_r>

08009916 <__sseek>:
 8009916:	b510      	push	{r4, lr}
 8009918:	460c      	mov	r4, r1
 800991a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800991e:	f000 f9e5 	bl	8009cec <_lseek_r>
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	89a3      	ldrh	r3, [r4, #12]
 8009926:	bf15      	itete	ne
 8009928:	6560      	strne	r0, [r4, #84]	; 0x54
 800992a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800992e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009932:	81a3      	strheq	r3, [r4, #12]
 8009934:	bf18      	it	ne
 8009936:	81a3      	strhne	r3, [r4, #12]
 8009938:	bd10      	pop	{r4, pc}

0800993a <__sclose>:
 800993a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800993e:	f000 b8f1 	b.w	8009b24 <_close_r>
	...

08009944 <__swbuf_r>:
 8009944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009946:	460e      	mov	r6, r1
 8009948:	4614      	mov	r4, r2
 800994a:	4605      	mov	r5, r0
 800994c:	b118      	cbz	r0, 8009956 <__swbuf_r+0x12>
 800994e:	6983      	ldr	r3, [r0, #24]
 8009950:	b90b      	cbnz	r3, 8009956 <__swbuf_r+0x12>
 8009952:	f7ff f955 	bl	8008c00 <__sinit>
 8009956:	4b21      	ldr	r3, [pc, #132]	; (80099dc <__swbuf_r+0x98>)
 8009958:	429c      	cmp	r4, r3
 800995a:	d12b      	bne.n	80099b4 <__swbuf_r+0x70>
 800995c:	686c      	ldr	r4, [r5, #4]
 800995e:	69a3      	ldr	r3, [r4, #24]
 8009960:	60a3      	str	r3, [r4, #8]
 8009962:	89a3      	ldrh	r3, [r4, #12]
 8009964:	071a      	lsls	r2, r3, #28
 8009966:	d52f      	bpl.n	80099c8 <__swbuf_r+0x84>
 8009968:	6923      	ldr	r3, [r4, #16]
 800996a:	b36b      	cbz	r3, 80099c8 <__swbuf_r+0x84>
 800996c:	6923      	ldr	r3, [r4, #16]
 800996e:	6820      	ldr	r0, [r4, #0]
 8009970:	1ac0      	subs	r0, r0, r3
 8009972:	6963      	ldr	r3, [r4, #20]
 8009974:	b2f6      	uxtb	r6, r6
 8009976:	4283      	cmp	r3, r0
 8009978:	4637      	mov	r7, r6
 800997a:	dc04      	bgt.n	8009986 <__swbuf_r+0x42>
 800997c:	4621      	mov	r1, r4
 800997e:	4628      	mov	r0, r5
 8009980:	f000 f966 	bl	8009c50 <_fflush_r>
 8009984:	bb30      	cbnz	r0, 80099d4 <__swbuf_r+0x90>
 8009986:	68a3      	ldr	r3, [r4, #8]
 8009988:	3b01      	subs	r3, #1
 800998a:	60a3      	str	r3, [r4, #8]
 800998c:	6823      	ldr	r3, [r4, #0]
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	6022      	str	r2, [r4, #0]
 8009992:	701e      	strb	r6, [r3, #0]
 8009994:	6963      	ldr	r3, [r4, #20]
 8009996:	3001      	adds	r0, #1
 8009998:	4283      	cmp	r3, r0
 800999a:	d004      	beq.n	80099a6 <__swbuf_r+0x62>
 800999c:	89a3      	ldrh	r3, [r4, #12]
 800999e:	07db      	lsls	r3, r3, #31
 80099a0:	d506      	bpl.n	80099b0 <__swbuf_r+0x6c>
 80099a2:	2e0a      	cmp	r6, #10
 80099a4:	d104      	bne.n	80099b0 <__swbuf_r+0x6c>
 80099a6:	4621      	mov	r1, r4
 80099a8:	4628      	mov	r0, r5
 80099aa:	f000 f951 	bl	8009c50 <_fflush_r>
 80099ae:	b988      	cbnz	r0, 80099d4 <__swbuf_r+0x90>
 80099b0:	4638      	mov	r0, r7
 80099b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099b4:	4b0a      	ldr	r3, [pc, #40]	; (80099e0 <__swbuf_r+0x9c>)
 80099b6:	429c      	cmp	r4, r3
 80099b8:	d101      	bne.n	80099be <__swbuf_r+0x7a>
 80099ba:	68ac      	ldr	r4, [r5, #8]
 80099bc:	e7cf      	b.n	800995e <__swbuf_r+0x1a>
 80099be:	4b09      	ldr	r3, [pc, #36]	; (80099e4 <__swbuf_r+0xa0>)
 80099c0:	429c      	cmp	r4, r3
 80099c2:	bf08      	it	eq
 80099c4:	68ec      	ldreq	r4, [r5, #12]
 80099c6:	e7ca      	b.n	800995e <__swbuf_r+0x1a>
 80099c8:	4621      	mov	r1, r4
 80099ca:	4628      	mov	r0, r5
 80099cc:	f000 f81e 	bl	8009a0c <__swsetup_r>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	d0cb      	beq.n	800996c <__swbuf_r+0x28>
 80099d4:	f04f 37ff 	mov.w	r7, #4294967295
 80099d8:	e7ea      	b.n	80099b0 <__swbuf_r+0x6c>
 80099da:	bf00      	nop
 80099dc:	08016e44 	.word	0x08016e44
 80099e0:	08016e64 	.word	0x08016e64
 80099e4:	08016e24 	.word	0x08016e24

080099e8 <_write_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4d07      	ldr	r5, [pc, #28]	; (8009a08 <_write_r+0x20>)
 80099ec:	4604      	mov	r4, r0
 80099ee:	4608      	mov	r0, r1
 80099f0:	4611      	mov	r1, r2
 80099f2:	2200      	movs	r2, #0
 80099f4:	602a      	str	r2, [r5, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	f7fb fa09 	bl	8004e0e <_write>
 80099fc:	1c43      	adds	r3, r0, #1
 80099fe:	d102      	bne.n	8009a06 <_write_r+0x1e>
 8009a00:	682b      	ldr	r3, [r5, #0]
 8009a02:	b103      	cbz	r3, 8009a06 <_write_r+0x1e>
 8009a04:	6023      	str	r3, [r4, #0]
 8009a06:	bd38      	pop	{r3, r4, r5, pc}
 8009a08:	200003dc 	.word	0x200003dc

08009a0c <__swsetup_r>:
 8009a0c:	4b32      	ldr	r3, [pc, #200]	; (8009ad8 <__swsetup_r+0xcc>)
 8009a0e:	b570      	push	{r4, r5, r6, lr}
 8009a10:	681d      	ldr	r5, [r3, #0]
 8009a12:	4606      	mov	r6, r0
 8009a14:	460c      	mov	r4, r1
 8009a16:	b125      	cbz	r5, 8009a22 <__swsetup_r+0x16>
 8009a18:	69ab      	ldr	r3, [r5, #24]
 8009a1a:	b913      	cbnz	r3, 8009a22 <__swsetup_r+0x16>
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	f7ff f8ef 	bl	8008c00 <__sinit>
 8009a22:	4b2e      	ldr	r3, [pc, #184]	; (8009adc <__swsetup_r+0xd0>)
 8009a24:	429c      	cmp	r4, r3
 8009a26:	d10f      	bne.n	8009a48 <__swsetup_r+0x3c>
 8009a28:	686c      	ldr	r4, [r5, #4]
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a30:	0719      	lsls	r1, r3, #28
 8009a32:	d42c      	bmi.n	8009a8e <__swsetup_r+0x82>
 8009a34:	06dd      	lsls	r5, r3, #27
 8009a36:	d411      	bmi.n	8009a5c <__swsetup_r+0x50>
 8009a38:	2309      	movs	r3, #9
 8009a3a:	6033      	str	r3, [r6, #0]
 8009a3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a40:	81a3      	strh	r3, [r4, #12]
 8009a42:	f04f 30ff 	mov.w	r0, #4294967295
 8009a46:	e03e      	b.n	8009ac6 <__swsetup_r+0xba>
 8009a48:	4b25      	ldr	r3, [pc, #148]	; (8009ae0 <__swsetup_r+0xd4>)
 8009a4a:	429c      	cmp	r4, r3
 8009a4c:	d101      	bne.n	8009a52 <__swsetup_r+0x46>
 8009a4e:	68ac      	ldr	r4, [r5, #8]
 8009a50:	e7eb      	b.n	8009a2a <__swsetup_r+0x1e>
 8009a52:	4b24      	ldr	r3, [pc, #144]	; (8009ae4 <__swsetup_r+0xd8>)
 8009a54:	429c      	cmp	r4, r3
 8009a56:	bf08      	it	eq
 8009a58:	68ec      	ldreq	r4, [r5, #12]
 8009a5a:	e7e6      	b.n	8009a2a <__swsetup_r+0x1e>
 8009a5c:	0758      	lsls	r0, r3, #29
 8009a5e:	d512      	bpl.n	8009a86 <__swsetup_r+0x7a>
 8009a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a62:	b141      	cbz	r1, 8009a76 <__swsetup_r+0x6a>
 8009a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a68:	4299      	cmp	r1, r3
 8009a6a:	d002      	beq.n	8009a72 <__swsetup_r+0x66>
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	f7ff fd11 	bl	8009494 <_free_r>
 8009a72:	2300      	movs	r3, #0
 8009a74:	6363      	str	r3, [r4, #52]	; 0x34
 8009a76:	89a3      	ldrh	r3, [r4, #12]
 8009a78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a7c:	81a3      	strh	r3, [r4, #12]
 8009a7e:	2300      	movs	r3, #0
 8009a80:	6063      	str	r3, [r4, #4]
 8009a82:	6923      	ldr	r3, [r4, #16]
 8009a84:	6023      	str	r3, [r4, #0]
 8009a86:	89a3      	ldrh	r3, [r4, #12]
 8009a88:	f043 0308 	orr.w	r3, r3, #8
 8009a8c:	81a3      	strh	r3, [r4, #12]
 8009a8e:	6923      	ldr	r3, [r4, #16]
 8009a90:	b94b      	cbnz	r3, 8009aa6 <__swsetup_r+0x9a>
 8009a92:	89a3      	ldrh	r3, [r4, #12]
 8009a94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a9c:	d003      	beq.n	8009aa6 <__swsetup_r+0x9a>
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f000 f959 	bl	8009d58 <__smakebuf_r>
 8009aa6:	89a0      	ldrh	r0, [r4, #12]
 8009aa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009aac:	f010 0301 	ands.w	r3, r0, #1
 8009ab0:	d00a      	beq.n	8009ac8 <__swsetup_r+0xbc>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	60a3      	str	r3, [r4, #8]
 8009ab6:	6963      	ldr	r3, [r4, #20]
 8009ab8:	425b      	negs	r3, r3
 8009aba:	61a3      	str	r3, [r4, #24]
 8009abc:	6923      	ldr	r3, [r4, #16]
 8009abe:	b943      	cbnz	r3, 8009ad2 <__swsetup_r+0xc6>
 8009ac0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ac4:	d1ba      	bne.n	8009a3c <__swsetup_r+0x30>
 8009ac6:	bd70      	pop	{r4, r5, r6, pc}
 8009ac8:	0781      	lsls	r1, r0, #30
 8009aca:	bf58      	it	pl
 8009acc:	6963      	ldrpl	r3, [r4, #20]
 8009ace:	60a3      	str	r3, [r4, #8]
 8009ad0:	e7f4      	b.n	8009abc <__swsetup_r+0xb0>
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	e7f7      	b.n	8009ac6 <__swsetup_r+0xba>
 8009ad6:	bf00      	nop
 8009ad8:	20000014 	.word	0x20000014
 8009adc:	08016e44 	.word	0x08016e44
 8009ae0:	08016e64 	.word	0x08016e64
 8009ae4:	08016e24 	.word	0x08016e24

08009ae8 <__assert_func>:
 8009ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009aea:	4614      	mov	r4, r2
 8009aec:	461a      	mov	r2, r3
 8009aee:	4b09      	ldr	r3, [pc, #36]	; (8009b14 <__assert_func+0x2c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4605      	mov	r5, r0
 8009af4:	68d8      	ldr	r0, [r3, #12]
 8009af6:	b14c      	cbz	r4, 8009b0c <__assert_func+0x24>
 8009af8:	4b07      	ldr	r3, [pc, #28]	; (8009b18 <__assert_func+0x30>)
 8009afa:	9100      	str	r1, [sp, #0]
 8009afc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b00:	4906      	ldr	r1, [pc, #24]	; (8009b1c <__assert_func+0x34>)
 8009b02:	462b      	mov	r3, r5
 8009b04:	f000 f8e0 	bl	8009cc8 <fiprintf>
 8009b08:	f000 f9a3 	bl	8009e52 <abort>
 8009b0c:	4b04      	ldr	r3, [pc, #16]	; (8009b20 <__assert_func+0x38>)
 8009b0e:	461c      	mov	r4, r3
 8009b10:	e7f3      	b.n	8009afa <__assert_func+0x12>
 8009b12:	bf00      	nop
 8009b14:	20000014 	.word	0x20000014
 8009b18:	08016ff5 	.word	0x08016ff5
 8009b1c:	08017002 	.word	0x08017002
 8009b20:	08017030 	.word	0x08017030

08009b24 <_close_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	4d06      	ldr	r5, [pc, #24]	; (8009b40 <_close_r+0x1c>)
 8009b28:	2300      	movs	r3, #0
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	602b      	str	r3, [r5, #0]
 8009b30:	f7fb f989 	bl	8004e46 <_close>
 8009b34:	1c43      	adds	r3, r0, #1
 8009b36:	d102      	bne.n	8009b3e <_close_r+0x1a>
 8009b38:	682b      	ldr	r3, [r5, #0]
 8009b3a:	b103      	cbz	r3, 8009b3e <_close_r+0x1a>
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	bd38      	pop	{r3, r4, r5, pc}
 8009b40:	200003dc 	.word	0x200003dc

08009b44 <__sflush_r>:
 8009b44:	898a      	ldrh	r2, [r1, #12]
 8009b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b4a:	4605      	mov	r5, r0
 8009b4c:	0710      	lsls	r0, r2, #28
 8009b4e:	460c      	mov	r4, r1
 8009b50:	d458      	bmi.n	8009c04 <__sflush_r+0xc0>
 8009b52:	684b      	ldr	r3, [r1, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	dc05      	bgt.n	8009b64 <__sflush_r+0x20>
 8009b58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	dc02      	bgt.n	8009b64 <__sflush_r+0x20>
 8009b5e:	2000      	movs	r0, #0
 8009b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b66:	2e00      	cmp	r6, #0
 8009b68:	d0f9      	beq.n	8009b5e <__sflush_r+0x1a>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b70:	682f      	ldr	r7, [r5, #0]
 8009b72:	602b      	str	r3, [r5, #0]
 8009b74:	d032      	beq.n	8009bdc <__sflush_r+0x98>
 8009b76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b78:	89a3      	ldrh	r3, [r4, #12]
 8009b7a:	075a      	lsls	r2, r3, #29
 8009b7c:	d505      	bpl.n	8009b8a <__sflush_r+0x46>
 8009b7e:	6863      	ldr	r3, [r4, #4]
 8009b80:	1ac0      	subs	r0, r0, r3
 8009b82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b84:	b10b      	cbz	r3, 8009b8a <__sflush_r+0x46>
 8009b86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b88:	1ac0      	subs	r0, r0, r3
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b90:	6a21      	ldr	r1, [r4, #32]
 8009b92:	4628      	mov	r0, r5
 8009b94:	47b0      	blx	r6
 8009b96:	1c43      	adds	r3, r0, #1
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	d106      	bne.n	8009baa <__sflush_r+0x66>
 8009b9c:	6829      	ldr	r1, [r5, #0]
 8009b9e:	291d      	cmp	r1, #29
 8009ba0:	d82c      	bhi.n	8009bfc <__sflush_r+0xb8>
 8009ba2:	4a2a      	ldr	r2, [pc, #168]	; (8009c4c <__sflush_r+0x108>)
 8009ba4:	40ca      	lsrs	r2, r1
 8009ba6:	07d6      	lsls	r6, r2, #31
 8009ba8:	d528      	bpl.n	8009bfc <__sflush_r+0xb8>
 8009baa:	2200      	movs	r2, #0
 8009bac:	6062      	str	r2, [r4, #4]
 8009bae:	04d9      	lsls	r1, r3, #19
 8009bb0:	6922      	ldr	r2, [r4, #16]
 8009bb2:	6022      	str	r2, [r4, #0]
 8009bb4:	d504      	bpl.n	8009bc0 <__sflush_r+0x7c>
 8009bb6:	1c42      	adds	r2, r0, #1
 8009bb8:	d101      	bne.n	8009bbe <__sflush_r+0x7a>
 8009bba:	682b      	ldr	r3, [r5, #0]
 8009bbc:	b903      	cbnz	r3, 8009bc0 <__sflush_r+0x7c>
 8009bbe:	6560      	str	r0, [r4, #84]	; 0x54
 8009bc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bc2:	602f      	str	r7, [r5, #0]
 8009bc4:	2900      	cmp	r1, #0
 8009bc6:	d0ca      	beq.n	8009b5e <__sflush_r+0x1a>
 8009bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bcc:	4299      	cmp	r1, r3
 8009bce:	d002      	beq.n	8009bd6 <__sflush_r+0x92>
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	f7ff fc5f 	bl	8009494 <_free_r>
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	6360      	str	r0, [r4, #52]	; 0x34
 8009bda:	e7c1      	b.n	8009b60 <__sflush_r+0x1c>
 8009bdc:	6a21      	ldr	r1, [r4, #32]
 8009bde:	2301      	movs	r3, #1
 8009be0:	4628      	mov	r0, r5
 8009be2:	47b0      	blx	r6
 8009be4:	1c41      	adds	r1, r0, #1
 8009be6:	d1c7      	bne.n	8009b78 <__sflush_r+0x34>
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d0c4      	beq.n	8009b78 <__sflush_r+0x34>
 8009bee:	2b1d      	cmp	r3, #29
 8009bf0:	d001      	beq.n	8009bf6 <__sflush_r+0xb2>
 8009bf2:	2b16      	cmp	r3, #22
 8009bf4:	d101      	bne.n	8009bfa <__sflush_r+0xb6>
 8009bf6:	602f      	str	r7, [r5, #0]
 8009bf8:	e7b1      	b.n	8009b5e <__sflush_r+0x1a>
 8009bfa:	89a3      	ldrh	r3, [r4, #12]
 8009bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c00:	81a3      	strh	r3, [r4, #12]
 8009c02:	e7ad      	b.n	8009b60 <__sflush_r+0x1c>
 8009c04:	690f      	ldr	r7, [r1, #16]
 8009c06:	2f00      	cmp	r7, #0
 8009c08:	d0a9      	beq.n	8009b5e <__sflush_r+0x1a>
 8009c0a:	0793      	lsls	r3, r2, #30
 8009c0c:	680e      	ldr	r6, [r1, #0]
 8009c0e:	bf08      	it	eq
 8009c10:	694b      	ldreq	r3, [r1, #20]
 8009c12:	600f      	str	r7, [r1, #0]
 8009c14:	bf18      	it	ne
 8009c16:	2300      	movne	r3, #0
 8009c18:	eba6 0807 	sub.w	r8, r6, r7
 8009c1c:	608b      	str	r3, [r1, #8]
 8009c1e:	f1b8 0f00 	cmp.w	r8, #0
 8009c22:	dd9c      	ble.n	8009b5e <__sflush_r+0x1a>
 8009c24:	6a21      	ldr	r1, [r4, #32]
 8009c26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c28:	4643      	mov	r3, r8
 8009c2a:	463a      	mov	r2, r7
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	47b0      	blx	r6
 8009c30:	2800      	cmp	r0, #0
 8009c32:	dc06      	bgt.n	8009c42 <__sflush_r+0xfe>
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c3a:	81a3      	strh	r3, [r4, #12]
 8009c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c40:	e78e      	b.n	8009b60 <__sflush_r+0x1c>
 8009c42:	4407      	add	r7, r0
 8009c44:	eba8 0800 	sub.w	r8, r8, r0
 8009c48:	e7e9      	b.n	8009c1e <__sflush_r+0xda>
 8009c4a:	bf00      	nop
 8009c4c:	20400001 	.word	0x20400001

08009c50 <_fflush_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	690b      	ldr	r3, [r1, #16]
 8009c54:	4605      	mov	r5, r0
 8009c56:	460c      	mov	r4, r1
 8009c58:	b913      	cbnz	r3, 8009c60 <_fflush_r+0x10>
 8009c5a:	2500      	movs	r5, #0
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	bd38      	pop	{r3, r4, r5, pc}
 8009c60:	b118      	cbz	r0, 8009c6a <_fflush_r+0x1a>
 8009c62:	6983      	ldr	r3, [r0, #24]
 8009c64:	b90b      	cbnz	r3, 8009c6a <_fflush_r+0x1a>
 8009c66:	f7fe ffcb 	bl	8008c00 <__sinit>
 8009c6a:	4b14      	ldr	r3, [pc, #80]	; (8009cbc <_fflush_r+0x6c>)
 8009c6c:	429c      	cmp	r4, r3
 8009c6e:	d11b      	bne.n	8009ca8 <_fflush_r+0x58>
 8009c70:	686c      	ldr	r4, [r5, #4]
 8009c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d0ef      	beq.n	8009c5a <_fflush_r+0xa>
 8009c7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c7c:	07d0      	lsls	r0, r2, #31
 8009c7e:	d404      	bmi.n	8009c8a <_fflush_r+0x3a>
 8009c80:	0599      	lsls	r1, r3, #22
 8009c82:	d402      	bmi.n	8009c8a <_fflush_r+0x3a>
 8009c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c86:	f7ff f85e 	bl	8008d46 <__retarget_lock_acquire_recursive>
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	4621      	mov	r1, r4
 8009c8e:	f7ff ff59 	bl	8009b44 <__sflush_r>
 8009c92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c94:	07da      	lsls	r2, r3, #31
 8009c96:	4605      	mov	r5, r0
 8009c98:	d4e0      	bmi.n	8009c5c <_fflush_r+0xc>
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	059b      	lsls	r3, r3, #22
 8009c9e:	d4dd      	bmi.n	8009c5c <_fflush_r+0xc>
 8009ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ca2:	f7ff f851 	bl	8008d48 <__retarget_lock_release_recursive>
 8009ca6:	e7d9      	b.n	8009c5c <_fflush_r+0xc>
 8009ca8:	4b05      	ldr	r3, [pc, #20]	; (8009cc0 <_fflush_r+0x70>)
 8009caa:	429c      	cmp	r4, r3
 8009cac:	d101      	bne.n	8009cb2 <_fflush_r+0x62>
 8009cae:	68ac      	ldr	r4, [r5, #8]
 8009cb0:	e7df      	b.n	8009c72 <_fflush_r+0x22>
 8009cb2:	4b04      	ldr	r3, [pc, #16]	; (8009cc4 <_fflush_r+0x74>)
 8009cb4:	429c      	cmp	r4, r3
 8009cb6:	bf08      	it	eq
 8009cb8:	68ec      	ldreq	r4, [r5, #12]
 8009cba:	e7da      	b.n	8009c72 <_fflush_r+0x22>
 8009cbc:	08016e44 	.word	0x08016e44
 8009cc0:	08016e64 	.word	0x08016e64
 8009cc4:	08016e24 	.word	0x08016e24

08009cc8 <fiprintf>:
 8009cc8:	b40e      	push	{r1, r2, r3}
 8009cca:	b503      	push	{r0, r1, lr}
 8009ccc:	4601      	mov	r1, r0
 8009cce:	ab03      	add	r3, sp, #12
 8009cd0:	4805      	ldr	r0, [pc, #20]	; (8009ce8 <fiprintf+0x20>)
 8009cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd6:	6800      	ldr	r0, [r0, #0]
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	f7ff fcaf 	bl	800963c <_vfiprintf_r>
 8009cde:	b002      	add	sp, #8
 8009ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ce4:	b003      	add	sp, #12
 8009ce6:	4770      	bx	lr
 8009ce8:	20000014 	.word	0x20000014

08009cec <_lseek_r>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	4d07      	ldr	r5, [pc, #28]	; (8009d0c <_lseek_r+0x20>)
 8009cf0:	4604      	mov	r4, r0
 8009cf2:	4608      	mov	r0, r1
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	602a      	str	r2, [r5, #0]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	f7fb f8ca 	bl	8004e94 <_lseek>
 8009d00:	1c43      	adds	r3, r0, #1
 8009d02:	d102      	bne.n	8009d0a <_lseek_r+0x1e>
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	b103      	cbz	r3, 8009d0a <_lseek_r+0x1e>
 8009d08:	6023      	str	r3, [r4, #0]
 8009d0a:	bd38      	pop	{r3, r4, r5, pc}
 8009d0c:	200003dc 	.word	0x200003dc

08009d10 <__swhatbuf_r>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	460e      	mov	r6, r1
 8009d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d18:	2900      	cmp	r1, #0
 8009d1a:	b096      	sub	sp, #88	; 0x58
 8009d1c:	4614      	mov	r4, r2
 8009d1e:	461d      	mov	r5, r3
 8009d20:	da07      	bge.n	8009d32 <__swhatbuf_r+0x22>
 8009d22:	2300      	movs	r3, #0
 8009d24:	602b      	str	r3, [r5, #0]
 8009d26:	89b3      	ldrh	r3, [r6, #12]
 8009d28:	061a      	lsls	r2, r3, #24
 8009d2a:	d410      	bmi.n	8009d4e <__swhatbuf_r+0x3e>
 8009d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d30:	e00e      	b.n	8009d50 <__swhatbuf_r+0x40>
 8009d32:	466a      	mov	r2, sp
 8009d34:	f000 f894 	bl	8009e60 <_fstat_r>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	dbf2      	blt.n	8009d22 <__swhatbuf_r+0x12>
 8009d3c:	9a01      	ldr	r2, [sp, #4]
 8009d3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d46:	425a      	negs	r2, r3
 8009d48:	415a      	adcs	r2, r3
 8009d4a:	602a      	str	r2, [r5, #0]
 8009d4c:	e7ee      	b.n	8009d2c <__swhatbuf_r+0x1c>
 8009d4e:	2340      	movs	r3, #64	; 0x40
 8009d50:	2000      	movs	r0, #0
 8009d52:	6023      	str	r3, [r4, #0]
 8009d54:	b016      	add	sp, #88	; 0x58
 8009d56:	bd70      	pop	{r4, r5, r6, pc}

08009d58 <__smakebuf_r>:
 8009d58:	898b      	ldrh	r3, [r1, #12]
 8009d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d5c:	079d      	lsls	r5, r3, #30
 8009d5e:	4606      	mov	r6, r0
 8009d60:	460c      	mov	r4, r1
 8009d62:	d507      	bpl.n	8009d74 <__smakebuf_r+0x1c>
 8009d64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	6123      	str	r3, [r4, #16]
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	6163      	str	r3, [r4, #20]
 8009d70:	b002      	add	sp, #8
 8009d72:	bd70      	pop	{r4, r5, r6, pc}
 8009d74:	ab01      	add	r3, sp, #4
 8009d76:	466a      	mov	r2, sp
 8009d78:	f7ff ffca 	bl	8009d10 <__swhatbuf_r>
 8009d7c:	9900      	ldr	r1, [sp, #0]
 8009d7e:	4605      	mov	r5, r0
 8009d80:	4630      	mov	r0, r6
 8009d82:	f7ff fbd7 	bl	8009534 <_malloc_r>
 8009d86:	b948      	cbnz	r0, 8009d9c <__smakebuf_r+0x44>
 8009d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d8c:	059a      	lsls	r2, r3, #22
 8009d8e:	d4ef      	bmi.n	8009d70 <__smakebuf_r+0x18>
 8009d90:	f023 0303 	bic.w	r3, r3, #3
 8009d94:	f043 0302 	orr.w	r3, r3, #2
 8009d98:	81a3      	strh	r3, [r4, #12]
 8009d9a:	e7e3      	b.n	8009d64 <__smakebuf_r+0xc>
 8009d9c:	4b0d      	ldr	r3, [pc, #52]	; (8009dd4 <__smakebuf_r+0x7c>)
 8009d9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	6020      	str	r0, [r4, #0]
 8009da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009da8:	81a3      	strh	r3, [r4, #12]
 8009daa:	9b00      	ldr	r3, [sp, #0]
 8009dac:	6163      	str	r3, [r4, #20]
 8009dae:	9b01      	ldr	r3, [sp, #4]
 8009db0:	6120      	str	r0, [r4, #16]
 8009db2:	b15b      	cbz	r3, 8009dcc <__smakebuf_r+0x74>
 8009db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009db8:	4630      	mov	r0, r6
 8009dba:	f000 f863 	bl	8009e84 <_isatty_r>
 8009dbe:	b128      	cbz	r0, 8009dcc <__smakebuf_r+0x74>
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	f023 0303 	bic.w	r3, r3, #3
 8009dc6:	f043 0301 	orr.w	r3, r3, #1
 8009dca:	81a3      	strh	r3, [r4, #12]
 8009dcc:	89a0      	ldrh	r0, [r4, #12]
 8009dce:	4305      	orrs	r5, r0
 8009dd0:	81a5      	strh	r5, [r4, #12]
 8009dd2:	e7cd      	b.n	8009d70 <__smakebuf_r+0x18>
 8009dd4:	08008b99 	.word	0x08008b99

08009dd8 <__ascii_mbtowc>:
 8009dd8:	b082      	sub	sp, #8
 8009dda:	b901      	cbnz	r1, 8009dde <__ascii_mbtowc+0x6>
 8009ddc:	a901      	add	r1, sp, #4
 8009dde:	b142      	cbz	r2, 8009df2 <__ascii_mbtowc+0x1a>
 8009de0:	b14b      	cbz	r3, 8009df6 <__ascii_mbtowc+0x1e>
 8009de2:	7813      	ldrb	r3, [r2, #0]
 8009de4:	600b      	str	r3, [r1, #0]
 8009de6:	7812      	ldrb	r2, [r2, #0]
 8009de8:	1e10      	subs	r0, r2, #0
 8009dea:	bf18      	it	ne
 8009dec:	2001      	movne	r0, #1
 8009dee:	b002      	add	sp, #8
 8009df0:	4770      	bx	lr
 8009df2:	4610      	mov	r0, r2
 8009df4:	e7fb      	b.n	8009dee <__ascii_mbtowc+0x16>
 8009df6:	f06f 0001 	mvn.w	r0, #1
 8009dfa:	e7f8      	b.n	8009dee <__ascii_mbtowc+0x16>

08009dfc <__malloc_lock>:
 8009dfc:	4801      	ldr	r0, [pc, #4]	; (8009e04 <__malloc_lock+0x8>)
 8009dfe:	f7fe bfa2 	b.w	8008d46 <__retarget_lock_acquire_recursive>
 8009e02:	bf00      	nop
 8009e04:	200003d4 	.word	0x200003d4

08009e08 <__malloc_unlock>:
 8009e08:	4801      	ldr	r0, [pc, #4]	; (8009e10 <__malloc_unlock+0x8>)
 8009e0a:	f7fe bf9d 	b.w	8008d48 <__retarget_lock_release_recursive>
 8009e0e:	bf00      	nop
 8009e10:	200003d4 	.word	0x200003d4

08009e14 <_read_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	4d07      	ldr	r5, [pc, #28]	; (8009e34 <_read_r+0x20>)
 8009e18:	4604      	mov	r4, r0
 8009e1a:	4608      	mov	r0, r1
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	2200      	movs	r2, #0
 8009e20:	602a      	str	r2, [r5, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	f7fa ffd6 	bl	8004dd4 <_read>
 8009e28:	1c43      	adds	r3, r0, #1
 8009e2a:	d102      	bne.n	8009e32 <_read_r+0x1e>
 8009e2c:	682b      	ldr	r3, [r5, #0]
 8009e2e:	b103      	cbz	r3, 8009e32 <_read_r+0x1e>
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	bd38      	pop	{r3, r4, r5, pc}
 8009e34:	200003dc 	.word	0x200003dc

08009e38 <__ascii_wctomb>:
 8009e38:	b149      	cbz	r1, 8009e4e <__ascii_wctomb+0x16>
 8009e3a:	2aff      	cmp	r2, #255	; 0xff
 8009e3c:	bf85      	ittet	hi
 8009e3e:	238a      	movhi	r3, #138	; 0x8a
 8009e40:	6003      	strhi	r3, [r0, #0]
 8009e42:	700a      	strbls	r2, [r1, #0]
 8009e44:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e48:	bf98      	it	ls
 8009e4a:	2001      	movls	r0, #1
 8009e4c:	4770      	bx	lr
 8009e4e:	4608      	mov	r0, r1
 8009e50:	4770      	bx	lr

08009e52 <abort>:
 8009e52:	b508      	push	{r3, lr}
 8009e54:	2006      	movs	r0, #6
 8009e56:	f000 f84d 	bl	8009ef4 <raise>
 8009e5a:	2001      	movs	r0, #1
 8009e5c:	f7fa ffb0 	bl	8004dc0 <_exit>

08009e60 <_fstat_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4d07      	ldr	r5, [pc, #28]	; (8009e80 <_fstat_r+0x20>)
 8009e64:	2300      	movs	r3, #0
 8009e66:	4604      	mov	r4, r0
 8009e68:	4608      	mov	r0, r1
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	602b      	str	r3, [r5, #0]
 8009e6e:	f7fa fff6 	bl	8004e5e <_fstat>
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	d102      	bne.n	8009e7c <_fstat_r+0x1c>
 8009e76:	682b      	ldr	r3, [r5, #0]
 8009e78:	b103      	cbz	r3, 8009e7c <_fstat_r+0x1c>
 8009e7a:	6023      	str	r3, [r4, #0]
 8009e7c:	bd38      	pop	{r3, r4, r5, pc}
 8009e7e:	bf00      	nop
 8009e80:	200003dc 	.word	0x200003dc

08009e84 <_isatty_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4d06      	ldr	r5, [pc, #24]	; (8009ea0 <_isatty_r+0x1c>)
 8009e88:	2300      	movs	r3, #0
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	4608      	mov	r0, r1
 8009e8e:	602b      	str	r3, [r5, #0]
 8009e90:	f7fa fff5 	bl	8004e7e <_isatty>
 8009e94:	1c43      	adds	r3, r0, #1
 8009e96:	d102      	bne.n	8009e9e <_isatty_r+0x1a>
 8009e98:	682b      	ldr	r3, [r5, #0]
 8009e9a:	b103      	cbz	r3, 8009e9e <_isatty_r+0x1a>
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ea0:	200003dc 	.word	0x200003dc

08009ea4 <_raise_r>:
 8009ea4:	291f      	cmp	r1, #31
 8009ea6:	b538      	push	{r3, r4, r5, lr}
 8009ea8:	4604      	mov	r4, r0
 8009eaa:	460d      	mov	r5, r1
 8009eac:	d904      	bls.n	8009eb8 <_raise_r+0x14>
 8009eae:	2316      	movs	r3, #22
 8009eb0:	6003      	str	r3, [r0, #0]
 8009eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb6:	bd38      	pop	{r3, r4, r5, pc}
 8009eb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009eba:	b112      	cbz	r2, 8009ec2 <_raise_r+0x1e>
 8009ebc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ec0:	b94b      	cbnz	r3, 8009ed6 <_raise_r+0x32>
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f000 f830 	bl	8009f28 <_getpid_r>
 8009ec8:	462a      	mov	r2, r5
 8009eca:	4601      	mov	r1, r0
 8009ecc:	4620      	mov	r0, r4
 8009ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ed2:	f000 b817 	b.w	8009f04 <_kill_r>
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d00a      	beq.n	8009ef0 <_raise_r+0x4c>
 8009eda:	1c59      	adds	r1, r3, #1
 8009edc:	d103      	bne.n	8009ee6 <_raise_r+0x42>
 8009ede:	2316      	movs	r3, #22
 8009ee0:	6003      	str	r3, [r0, #0]
 8009ee2:	2001      	movs	r0, #1
 8009ee4:	e7e7      	b.n	8009eb6 <_raise_r+0x12>
 8009ee6:	2400      	movs	r4, #0
 8009ee8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009eec:	4628      	mov	r0, r5
 8009eee:	4798      	blx	r3
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	e7e0      	b.n	8009eb6 <_raise_r+0x12>

08009ef4 <raise>:
 8009ef4:	4b02      	ldr	r3, [pc, #8]	; (8009f00 <raise+0xc>)
 8009ef6:	4601      	mov	r1, r0
 8009ef8:	6818      	ldr	r0, [r3, #0]
 8009efa:	f7ff bfd3 	b.w	8009ea4 <_raise_r>
 8009efe:	bf00      	nop
 8009f00:	20000014 	.word	0x20000014

08009f04 <_kill_r>:
 8009f04:	b538      	push	{r3, r4, r5, lr}
 8009f06:	4d07      	ldr	r5, [pc, #28]	; (8009f24 <_kill_r+0x20>)
 8009f08:	2300      	movs	r3, #0
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	4608      	mov	r0, r1
 8009f0e:	4611      	mov	r1, r2
 8009f10:	602b      	str	r3, [r5, #0]
 8009f12:	f7fa ff45 	bl	8004da0 <_kill>
 8009f16:	1c43      	adds	r3, r0, #1
 8009f18:	d102      	bne.n	8009f20 <_kill_r+0x1c>
 8009f1a:	682b      	ldr	r3, [r5, #0]
 8009f1c:	b103      	cbz	r3, 8009f20 <_kill_r+0x1c>
 8009f1e:	6023      	str	r3, [r4, #0]
 8009f20:	bd38      	pop	{r3, r4, r5, pc}
 8009f22:	bf00      	nop
 8009f24:	200003dc 	.word	0x200003dc

08009f28 <_getpid_r>:
 8009f28:	f7fa bf32 	b.w	8004d90 <_getpid>

08009f2c <_init>:
 8009f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2e:	bf00      	nop
 8009f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f32:	bc08      	pop	{r3}
 8009f34:	469e      	mov	lr, r3
 8009f36:	4770      	bx	lr

08009f38 <_fini>:
 8009f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3a:	bf00      	nop
 8009f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3e:	bc08      	pop	{r3}
 8009f40:	469e      	mov	lr, r3
 8009f42:	4770      	bx	lr
