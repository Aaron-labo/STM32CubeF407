
F407_SPI_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001434  08006b3c  08006b3c  00016b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f70  08007f70  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007f70  08007f70  00017f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f78  08007f78  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f78  08007f78  00017f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f7c  08007f7c  00017f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007f80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000908  20000078  08007ff8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000980  08007ff8  00020980  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017205  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b6  00000000  00000000  000372ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0003a668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  0003b9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c6b  00000000  00000000  0003cc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e01  00000000  00000000  0006086b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d14e7  00000000  00000000  0007866c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00149b53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005904  00000000  00000000  00149ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b24 	.word	0x08006b24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006b24 	.word	0x08006b24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_DMA_Init+0x3c>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <MX_DMA_Init+0x3c>)
 8000578:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_DMA_Init+0x3c>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	203a      	movs	r0, #58	; 0x3a
 8000590:	f001 ffdd 	bl	800254e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000594:	203a      	movs	r0, #58	; 0x3a
 8000596:	f001 fff6 	bl	8002586 <HAL_NVIC_EnableIRQ>

}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40023800 	.word	0x40023800

080005a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08e      	sub	sp, #56	; 0x38
 80005ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]
 80005c2:	4b7a      	ldr	r3, [pc, #488]	; (80007ac <MX_GPIO_Init+0x204>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a79      	ldr	r2, [pc, #484]	; (80007ac <MX_GPIO_Init+0x204>)
 80005c8:	f043 0310 	orr.w	r3, r3, #16
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b77      	ldr	r3, [pc, #476]	; (80007ac <MX_GPIO_Init+0x204>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0310 	and.w	r3, r3, #16
 80005d6:	623b      	str	r3, [r7, #32]
 80005d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
 80005de:	4b73      	ldr	r3, [pc, #460]	; (80007ac <MX_GPIO_Init+0x204>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a72      	ldr	r2, [pc, #456]	; (80007ac <MX_GPIO_Init+0x204>)
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b70      	ldr	r3, [pc, #448]	; (80007ac <MX_GPIO_Init+0x204>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0320 	and.w	r3, r3, #32
 80005f2:	61fb      	str	r3, [r7, #28]
 80005f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]
 80005fa:	4b6c      	ldr	r3, [pc, #432]	; (80007ac <MX_GPIO_Init+0x204>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a6b      	ldr	r2, [pc, #428]	; (80007ac <MX_GPIO_Init+0x204>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b69      	ldr	r3, [pc, #420]	; (80007ac <MX_GPIO_Init+0x204>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060e:	61bb      	str	r3, [r7, #24]
 8000610:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	4b65      	ldr	r3, [pc, #404]	; (80007ac <MX_GPIO_Init+0x204>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a64      	ldr	r2, [pc, #400]	; (80007ac <MX_GPIO_Init+0x204>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b62      	ldr	r3, [pc, #392]	; (80007ac <MX_GPIO_Init+0x204>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	4b5e      	ldr	r3, [pc, #376]	; (80007ac <MX_GPIO_Init+0x204>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a5d      	ldr	r2, [pc, #372]	; (80007ac <MX_GPIO_Init+0x204>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b5b      	ldr	r3, [pc, #364]	; (80007ac <MX_GPIO_Init+0x204>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	4b57      	ldr	r3, [pc, #348]	; (80007ac <MX_GPIO_Init+0x204>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a56      	ldr	r2, [pc, #344]	; (80007ac <MX_GPIO_Init+0x204>)
 8000654:	f043 0308 	orr.w	r3, r3, #8
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b54      	ldr	r3, [pc, #336]	; (80007ac <MX_GPIO_Init+0x204>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0308 	and.w	r3, r3, #8
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	4b50      	ldr	r3, [pc, #320]	; (80007ac <MX_GPIO_Init+0x204>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a4f      	ldr	r2, [pc, #316]	; (80007ac <MX_GPIO_Init+0x204>)
 8000670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b4d      	ldr	r3, [pc, #308]	; (80007ac <MX_GPIO_Init+0x204>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b49      	ldr	r3, [pc, #292]	; (80007ac <MX_GPIO_Init+0x204>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a48      	ldr	r2, [pc, #288]	; (80007ac <MX_GPIO_Init+0x204>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b46      	ldr	r3, [pc, #280]	; (80007ac <MX_GPIO_Init+0x204>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_Res_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	210c      	movs	r1, #12
 80006a2:	4843      	ldr	r0, [pc, #268]	; (80007b0 <MX_GPIO_Init+0x208>)
 80006a4:	f002 fd28 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80006ae:	4841      	ldr	r0, [pc, #260]	; (80007b4 <MX_GPIO_Init+0x20c>)
 80006b0:	f002 fd22 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ba:	483e      	ldr	r0, [pc, #248]	; (80007b4 <MX_GPIO_Init+0x20c>)
 80006bc:	f002 fd1c 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, F_AIN2_Pin|F_AIN1_Pin|F_BIN1_Pin|F_BIN2_Pin
 80006c0:	2200      	movs	r2, #0
 80006c2:	f244 11fc 	movw	r1, #16892	; 0x41fc
 80006c6:	483c      	ldr	r0, [pc, #240]	; (80007b8 <MX_GPIO_Init+0x210>)
 80006c8:	f002 fd16 	bl	80030f8 <HAL_GPIO_WritePin>
                          |B_AIN2_Pin|B_AIN1_Pin|B_BIN1_Pin|LED_BOARD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(B_BIN2_GPIO_Port, B_BIN2_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	483a      	ldr	r0, [pc, #232]	; (80007bc <MX_GPIO_Init+0x214>)
 80006d2:	f002 fd11 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_Res_Pin;
 80006d6:	2304      	movs	r3, #4
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006de:	2302      	movs	r3, #2
 80006e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e2:	2302      	movs	r3, #2
 80006e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OLED_Res_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ea:	4619      	mov	r1, r3
 80006ec:	4830      	ldr	r0, [pc, #192]	; (80007b0 <MX_GPIO_Init+0x208>)
 80006ee:	f002 fb67 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80006f2:	2308      	movs	r3, #8
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000706:	4619      	mov	r1, r3
 8000708:	4829      	ldr	r0, [pc, #164]	; (80007b0 <MX_GPIO_Init+0x208>)
 800070a:	f002 fb59 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800070e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071c:	2302      	movs	r3, #2
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000724:	4619      	mov	r1, r3
 8000726:	4823      	ldr	r0, [pc, #140]	; (80007b4 <MX_GPIO_Init+0x20c>)
 8000728:	f002 fb4a 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800072c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000736:	2301      	movs	r3, #1
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073a:	2302      	movs	r3, #2
 800073c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000742:	4619      	mov	r1, r3
 8000744:	481b      	ldr	r0, [pc, #108]	; (80007b4 <MX_GPIO_Init+0x20c>)
 8000746:	f002 fb3b 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 800074a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000754:	2302      	movs	r3, #2
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000758:	2302      	movs	r3, #2
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000760:	4619      	mov	r1, r3
 8000762:	4814      	ldr	r0, [pc, #80]	; (80007b4 <MX_GPIO_Init+0x20c>)
 8000764:	f002 fb2c 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = F_AIN2_Pin|F_AIN1_Pin|F_BIN1_Pin|F_BIN2_Pin
 8000768:	f244 13fc 	movw	r3, #16892	; 0x41fc
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
                          |B_AIN2_Pin|B_AIN1_Pin|B_BIN1_Pin|LED_BOARD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800077a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077e:	4619      	mov	r1, r3
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <MX_GPIO_Init+0x210>)
 8000782:	f002 fb1d 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_BIN2_Pin;
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(B_BIN2_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079a:	4619      	mov	r1, r3
 800079c:	4807      	ldr	r0, [pc, #28]	; (80007bc <MX_GPIO_Init+0x214>)
 800079e:	f002 fb0f 	bl	8002dc0 <HAL_GPIO_Init>

}
 80007a2:	bf00      	nop
 80007a4:	3738      	adds	r7, #56	; 0x38
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40021400 	.word	0x40021400
 80007b8:	40021800 	.word	0x40021800
 80007bc:	40020c00 	.word	0x40020c00

080007c0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_I2C1_Init+0x50>)
 80007c6:	4a13      	ldr	r2, [pc, #76]	; (8000814 <MX_I2C1_Init+0x54>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_I2C1_Init+0x50>)
 80007cc:	4a12      	ldr	r2, [pc, #72]	; (8000818 <MX_I2C1_Init+0x58>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_I2C1_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_I2C1_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_I2C1_Init+0x50>)
 80007de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_I2C1_Init+0x50>)
 80007fe:	f002 fc95 	bl	800312c <HAL_I2C_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000808:	f000 f980 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2000054c 	.word	0x2000054c
 8000814:	40005400 	.word	0x40005400
 8000818:	000186a0 	.word	0x000186a0

0800081c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_I2C2_Init+0x50>)
 8000822:	4a13      	ldr	r2, [pc, #76]	; (8000870 <MX_I2C2_Init+0x54>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_I2C2_Init+0x50>)
 8000828:	4a12      	ldr	r2, [pc, #72]	; (8000874 <MX_I2C2_Init+0x58>)
 800082a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_I2C2_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_I2C2_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_I2C2_Init+0x50>)
 800083a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800083e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_I2C2_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_I2C2_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_I2C2_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_I2C2_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_I2C2_Init+0x50>)
 800085a:	f002 fc67 	bl	800312c <HAL_I2C_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000864:	f000 f952 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200005a0 	.word	0x200005a0
 8000870:	40005800 	.word	0x40005800
 8000874:	000186a0 	.word	0x000186a0

08000878 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	; 0x30
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a32      	ldr	r2, [pc, #200]	; (8000960 <HAL_I2C_MspInit+0xe8>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d12c      	bne.n	80008f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
 800089e:	4b31      	ldr	r3, [pc, #196]	; (8000964 <HAL_I2C_MspInit+0xec>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a30      	ldr	r2, [pc, #192]	; (8000964 <HAL_I2C_MspInit+0xec>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <HAL_I2C_MspInit+0xec>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	61bb      	str	r3, [r7, #24]
 80008b4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008b6:	23c0      	movs	r3, #192	; 0xc0
 80008b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ba:	2312      	movs	r3, #18
 80008bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008be:	2301      	movs	r3, #1
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008c6:	2304      	movs	r3, #4
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4825      	ldr	r0, [pc, #148]	; (8000968 <HAL_I2C_MspInit+0xf0>)
 80008d2:	f002 fa75 	bl	8002dc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	4b22      	ldr	r3, [pc, #136]	; (8000964 <HAL_I2C_MspInit+0xec>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	4a21      	ldr	r2, [pc, #132]	; (8000964 <HAL_I2C_MspInit+0xec>)
 80008e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008e4:	6413      	str	r3, [r2, #64]	; 0x40
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <HAL_I2C_MspInit+0xec>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80008f2:	e030      	b.n	8000956 <HAL_I2C_MspInit+0xde>
  else if(i2cHandle->Instance==I2C2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a1c      	ldr	r2, [pc, #112]	; (800096c <HAL_I2C_MspInit+0xf4>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d12b      	bne.n	8000956 <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <HAL_I2C_MspInit+0xec>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a17      	ldr	r2, [pc, #92]	; (8000964 <HAL_I2C_MspInit+0xec>)
 8000908:	f043 0320 	orr.w	r3, r3, #32
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_I2C_MspInit+0xec>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0320 	and.w	r3, r3, #32
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800091a:	2303      	movs	r3, #3
 800091c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800091e:	2312      	movs	r3, #18
 8000920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000922:	2301      	movs	r3, #1
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800092a:	2304      	movs	r3, #4
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	480e      	ldr	r0, [pc, #56]	; (8000970 <HAL_I2C_MspInit+0xf8>)
 8000936:	f002 fa43 	bl	8002dc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_I2C_MspInit+0xec>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <HAL_I2C_MspInit+0xec>)
 8000944:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_I2C_MspInit+0xec>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
}
 8000956:	bf00      	nop
 8000958:	3730      	adds	r7, #48	; 0x30
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40005400 	.word	0x40005400
 8000964:	40023800 	.word	0x40023800
 8000968:	40020400 	.word	0x40020400
 800096c:	40005800 	.word	0x40005800
 8000970:	40021400 	.word	0x40021400

08000974 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800097a:	f001 fc77 	bl	800226c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800097e:	f000 f843 	bl	8000a08 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000982:	f7ff fe11 	bl	80005a8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000986:	f7ff fdef 	bl	8000568 <MX_DMA_Init>
	MX_I2C1_Init();
 800098a:	f7ff ff19 	bl	80007c0 <MX_I2C1_Init>
	MX_I2C2_Init();
 800098e:	f7ff ff45 	bl	800081c <MX_I2C2_Init>
	MX_TIM3_Init();
 8000992:	f000 fdb9 	bl	8001508 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000996:	f000 fe31 	bl	80015fc <MX_TIM4_Init>
	MX_USART1_UART_Init();
 800099a:	f001 f951 	bl	8001c40 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800099e:	f001 f987 	bl	8001cb0 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80009a2:	f001 f9af 	bl	8001d04 <MX_USART3_UART_Init>
	MX_TIM5_Init();
 80009a6:	f000 fe87 	bl	80016b8 <MX_TIM5_Init>
	MX_TIM2_Init();
 80009aa:	f000 fd4f 	bl	800144c <MX_TIM2_Init>
	MX_TIM8_Init();
 80009ae:	f000 fee1 	bl	8001774 <MX_TIM8_Init>
	MX_SPI1_Init();
 80009b2:	f000 f8b1 	bl	8000b18 <MX_SPI1_Init>
	MX_TIM1_Init();
 80009b6:	f000 fce7 	bl	8001388 <MX_TIM1_Init>
	MX_UART5_Init();
 80009ba:	f001 f917 	bl	8001bec <MX_UART5_Init>
	/* USER CODE BEGIN 2 */
	ssd1306_Init();
 80009be:	f000 f9b7 	bl	8000d30 <ssd1306_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
//		coordinate_XY
				itoa(coordinate_XY[i][0],sec_str,10);//数字转化�??
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <main+0x88>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <main+0x8c>)
 80009ca:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80009ce:	4618      	mov	r0, r3
 80009d0:	463b      	mov	r3, r7
 80009d2:	220a      	movs	r2, #10
 80009d4:	4619      	mov	r1, r3
 80009d6:	f005 f903 	bl	8005be0 <itoa>
				ssd1306_SetCursor(25,15);
 80009da:	210f      	movs	r1, #15
 80009dc:	2019      	movs	r0, #25
 80009de:	f000 fb6b 	bl	80010b8 <ssd1306_SetCursor>
				ssd1306_WriteString(sec_str,Font_16x26,White);
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <main+0x90>)
 80009e4:	4638      	mov	r0, r7
 80009e6:	2301      	movs	r3, #1
 80009e8:	ca06      	ldmia	r2, {r1, r2}
 80009ea:	f000 fb3f 	bl	800106c <ssd1306_WriteString>
//				HAL_Delay(1000);
				ssd1306_UpdateScreen();
 80009ee:	f000 fa2d 	bl	8000e4c <ssd1306_UpdateScreen>
				ssd1306_Fill(Black);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 fa06 	bl	8000e04 <ssd1306_Fill>
				itoa(coordinate_XY[i][0],sec_str,10);//数字转化�??
 80009f8:	e7e3      	b.n	80009c2 <main+0x4e>
 80009fa:	bf00      	nop
 80009fc:	20000134 	.word	0x20000134
 8000a00:	200000b4 	.word	0x200000b4
 8000a04:	20000000 	.word	0x20000000

08000a08 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b094      	sub	sp, #80	; 0x50
 8000a0c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	2230      	movs	r2, #48	; 0x30
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f005 f8e4 	bl	8005be4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	4a27      	ldr	r2, [pc, #156]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3c:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a64:	2301      	movs	r3, #1
 8000a66:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000a7c:	23a8      	movs	r3, #168	; 0xa8
 8000a7e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a84:	2304      	movs	r3, #4
 8000a86:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a88:	f107 0320 	add.w	r3, r7, #32
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f002 fc91 	bl	80033b4 <HAL_RCC_OscConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000a98:	f000 f838 	bl	8000b0c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aa8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aac:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	2105      	movs	r1, #5
 8000aba:	4618      	mov	r0, r3
 8000abc:	f002 fef2 	bl	80038a4 <HAL_RCC_ClockConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000ac6:	f000 f821 	bl	8000b0c <Error_Handler>
	}
}
 8000aca:	bf00      	nop
 8000acc:	3750      	adds	r7, #80	; 0x50
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40007000 	.word	0x40007000

08000adc <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 8000ae4:	bf00      	nop
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <__io_putchar+0x2c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d0f9      	beq.n	8000ae6 <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <__io_putchar+0x2c>)
 8000af8:	605a      	str	r2, [r3, #4]

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

	return ch;
 8000afa:	687b      	ldr	r3, [r7, #4]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	40011000 	.word	0x40011000

08000b0c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b14:	e7fe      	b.n	8000b14 <Error_Handler+0x8>
	...

08000b18 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b1e:	4a18      	ldr	r2, [pc, #96]	; (8000b80 <MX_SPI1_Init+0x68>)
 8000b20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b4c:	2230      	movs	r2, #48	; 0x30
 8000b4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b64:	220a      	movs	r2, #10
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b6a:	f003 f897 	bl	8003c9c <HAL_SPI_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b74:	f7ff ffca 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200005f4 	.word	0x200005f4
 8000b80:	40013000 	.word	0x40013000

08000b84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a28      	ldr	r2, [pc, #160]	; (8000c44 <HAL_SPI_MspInit+0xc0>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d149      	bne.n	8000c3a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <HAL_SPI_MspInit+0xc4>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <HAL_SPI_MspInit+0xc4>)
 8000bb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <HAL_SPI_MspInit+0xc4>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <HAL_SPI_MspInit+0xc4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <HAL_SPI_MspInit+0xc4>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <HAL_SPI_MspInit+0xc4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_SPI_MspInit+0xc4>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <HAL_SPI_MspInit+0xc4>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_SPI_MspInit+0xc4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bfa:	2320      	movs	r3, #32
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <HAL_SPI_MspInit+0xc8>)
 8000c16:	f002 f8d3 	bl	8002dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c1a:	2330      	movs	r3, #48	; 0x30
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4806      	ldr	r0, [pc, #24]	; (8000c50 <HAL_SPI_MspInit+0xcc>)
 8000c36:	f002 f8c3 	bl	8002dc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	; 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40013000 	.word	0x40013000
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	40020400 	.word	0x40020400

08000c54 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <ssd1306_Reset+0x34>)
 8000c60:	f002 fa4a 	bl	80030f8 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2104      	movs	r1, #4
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <ssd1306_Reset+0x38>)
 8000c6a:	f002 fa45 	bl	80030f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000c6e:	200a      	movs	r0, #10
 8000c70:	f001 fb6e 	bl	8002350 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2104      	movs	r1, #4
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <ssd1306_Reset+0x38>)
 8000c7a:	f002 fa3d 	bl	80030f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000c7e:	200a      	movs	r0, #10
 8000c80:	f001 fb66 	bl	8002350 <HAL_Delay>
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40021400 	.word	0x40021400
 8000c8c:	40021000 	.word	0x40021000

08000c90 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <ssd1306_WriteCommand+0x44>)
 8000ca2:	f002 fa29 	bl	80030f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2108      	movs	r1, #8
 8000caa:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <ssd1306_WriteCommand+0x48>)
 8000cac:	f002 fa24 	bl	80030f8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8000cb0:	1df9      	adds	r1, r7, #7
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4808      	ldr	r0, [pc, #32]	; (8000cdc <ssd1306_WriteCommand+0x4c>)
 8000cba:	f003 f878 	bl	8003dae <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <ssd1306_WriteCommand+0x44>)
 8000cc6:	f002 fa17 	bl	80030f8 <HAL_GPIO_WritePin>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40021400 	.word	0x40021400
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	200005f4 	.word	0x200005f4

08000ce0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <ssd1306_WriteData+0x44>)
 8000cf2:	f002 fa01 	bl	80030f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2108      	movs	r1, #8
 8000cfa:	480b      	ldr	r0, [pc, #44]	; (8000d28 <ssd1306_WriteData+0x48>)
 8000cfc:	f002 f9fc 	bl	80030f8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	4808      	ldr	r0, [pc, #32]	; (8000d2c <ssd1306_WriteData+0x4c>)
 8000d0c:	f003 f84f 	bl	8003dae <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8000d10:	2201      	movs	r2, #1
 8000d12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d16:	4803      	ldr	r0, [pc, #12]	; (8000d24 <ssd1306_WriteData+0x44>)
 8000d18:	f002 f9ee 	bl	80030f8 <HAL_GPIO_WritePin>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40021400 	.word	0x40021400
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	200005f4 	.word	0x200005f4

08000d30 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000d34:	f7ff ff8e 	bl	8000c54 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000d38:	2064      	movs	r0, #100	; 0x64
 8000d3a:	f001 fb09 	bl	8002350 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f000 f9e6 	bl	8001110 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000d44:	2020      	movs	r0, #32
 8000d46:	f7ff ffa3 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff ffa0 	bl	8000c90 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d50:	20b0      	movs	r0, #176	; 0xb0
 8000d52:	f7ff ff9d 	bl	8000c90 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000d56:	20c8      	movs	r0, #200	; 0xc8
 8000d58:	f7ff ff9a 	bl	8000c90 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff ff97 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000d62:	2010      	movs	r0, #16
 8000d64:	f7ff ff94 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000d68:	2040      	movs	r0, #64	; 0x40
 8000d6a:	f7ff ff91 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000d6e:	20ff      	movs	r0, #255	; 0xff
 8000d70:	f000 f9ba 	bl	80010e8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000d74:	20a1      	movs	r0, #161	; 0xa1
 8000d76:	f7ff ff8b 	bl	8000c90 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000d7a:	20a6      	movs	r0, #166	; 0xa6
 8000d7c:	f7ff ff88 	bl	8000c90 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000d80:	20a8      	movs	r0, #168	; 0xa8
 8000d82:	f7ff ff85 	bl	8000c90 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000d86:	203f      	movs	r0, #63	; 0x3f
 8000d88:	f7ff ff82 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d8c:	20a4      	movs	r0, #164	; 0xa4
 8000d8e:	f7ff ff7f 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000d92:	20d3      	movs	r0, #211	; 0xd3
 8000d94:	f7ff ff7c 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f7ff ff79 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000d9e:	20d5      	movs	r0, #213	; 0xd5
 8000da0:	f7ff ff76 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000da4:	20f0      	movs	r0, #240	; 0xf0
 8000da6:	f7ff ff73 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000daa:	20d9      	movs	r0, #217	; 0xd9
 8000dac:	f7ff ff70 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000db0:	2022      	movs	r0, #34	; 0x22
 8000db2:	f7ff ff6d 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000db6:	20da      	movs	r0, #218	; 0xda
 8000db8:	f7ff ff6a 	bl	8000c90 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000dbc:	2012      	movs	r0, #18
 8000dbe:	f7ff ff67 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000dc2:	20db      	movs	r0, #219	; 0xdb
 8000dc4:	f7ff ff64 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000dc8:	2020      	movs	r0, #32
 8000dca:	f7ff ff61 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000dce:	208d      	movs	r0, #141	; 0x8d
 8000dd0:	f7ff ff5e 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000dd4:	2014      	movs	r0, #20
 8000dd6:	f7ff ff5b 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f000 f998 	bl	8001110 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f000 f80f 	bl	8000e04 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000de6:	f000 f831 	bl	8000e4c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <ssd1306_Init+0xd0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <ssd1306_Init+0xd0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000df6:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <ssd1306_Init+0xd0>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	715a      	strb	r2, [r3, #5]
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000538 	.word	0x20000538

08000e04 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	e00d      	b.n	8000e30 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <ssd1306_Fill+0x1a>
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	e000      	b.n	8000e20 <ssd1306_Fill+0x1c>
 8000e1e:	21ff      	movs	r1, #255	; 0xff
 8000e20:	4a09      	ldr	r2, [pc, #36]	; (8000e48 <ssd1306_Fill+0x44>)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	4413      	add	r3, r2
 8000e26:	460a      	mov	r2, r1
 8000e28:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e36:	d3ed      	bcc.n	8000e14 <ssd1306_Fill+0x10>
    }
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000138 	.word	0x20000138

08000e4c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000e52:	2300      	movs	r3, #0
 8000e54:	71fb      	strb	r3, [r7, #7]
 8000e56:	e016      	b.n	8000e86 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	3b50      	subs	r3, #80	; 0x50
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff16 	bl	8000c90 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff ff13 	bl	8000c90 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000e6a:	2010      	movs	r0, #16
 8000e6c:	f7ff ff10 	bl	8000c90 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	01db      	lsls	r3, r3, #7
 8000e74:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <ssd1306_UpdateScreen+0x4c>)
 8000e76:	4413      	add	r3, r2
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff30 	bl	8000ce0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	3301      	adds	r3, #1
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b07      	cmp	r3, #7
 8000e8a:	d9e5      	bls.n	8000e58 <ssd1306_UpdateScreen+0xc>
    }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000138 	.word	0x20000138

08000e9c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	71bb      	strb	r3, [r7, #6]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db48      	blt.n	8000f48 <ssd1306_DrawPixel+0xac>
 8000eb6:	79bb      	ldrb	r3, [r7, #6]
 8000eb8:	2b3f      	cmp	r3, #63	; 0x3f
 8000eba:	d845      	bhi.n	8000f48 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8000ebc:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <ssd1306_DrawPixel+0xb8>)
 8000ebe:	791b      	ldrb	r3, [r3, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d006      	beq.n	8000ed2 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8000ec4:	797b      	ldrb	r3, [r7, #5]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	bf0c      	ite	eq
 8000eca:	2301      	moveq	r3, #1
 8000ecc:	2300      	movne	r3, #0
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8000ed2:	797b      	ldrb	r3, [r7, #5]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d11a      	bne.n	8000f0e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ed8:	79fa      	ldrb	r2, [r7, #7]
 8000eda:	79bb      	ldrb	r3, [r7, #6]
 8000edc:	08db      	lsrs	r3, r3, #3
 8000ede:	b2d8      	uxtb	r0, r3
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	01db      	lsls	r3, r3, #7
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <ssd1306_DrawPixel+0xbc>)
 8000ee8:	5cd3      	ldrb	r3, [r2, r3]
 8000eea:	b25a      	sxtb	r2, r3
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b259      	sxtb	r1, r3
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	4603      	mov	r3, r0
 8000f02:	01db      	lsls	r3, r3, #7
 8000f04:	4413      	add	r3, r2
 8000f06:	b2c9      	uxtb	r1, r1
 8000f08:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <ssd1306_DrawPixel+0xbc>)
 8000f0a:	54d1      	strb	r1, [r2, r3]
 8000f0c:	e01d      	b.n	8000f4a <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f0e:	79fa      	ldrb	r2, [r7, #7]
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	08db      	lsrs	r3, r3, #3
 8000f14:	b2d8      	uxtb	r0, r3
 8000f16:	4603      	mov	r3, r0
 8000f18:	01db      	lsls	r3, r3, #7
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <ssd1306_DrawPixel+0xbc>)
 8000f1e:	5cd3      	ldrb	r3, [r2, r3]
 8000f20:	b25a      	sxtb	r2, r3
 8000f22:	79bb      	ldrb	r3, [r7, #6]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	2101      	movs	r1, #1
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	b25b      	sxtb	r3, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	4013      	ands	r3, r2
 8000f36:	b259      	sxtb	r1, r3
 8000f38:	79fa      	ldrb	r2, [r7, #7]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	01db      	lsls	r3, r3, #7
 8000f3e:	4413      	add	r3, r2
 8000f40:	b2c9      	uxtb	r1, r1
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <ssd1306_DrawPixel+0xbc>)
 8000f44:	54d1      	strb	r1, [r2, r3]
 8000f46:	e000      	b.n	8000f4a <ssd1306_DrawPixel+0xae>
        return;
 8000f48:	bf00      	nop
    }
}
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	20000538 	.word	0x20000538
 8000f58:	20000138 	.word	0x20000138

08000f5c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4604      	mov	r4, r0
 8000f64:	1d38      	adds	r0, r7, #4
 8000f66:	e880 0006 	stmia.w	r0, {r1, r2}
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4623      	mov	r3, r4
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	4613      	mov	r3, r2
 8000f72:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	2b1f      	cmp	r3, #31
 8000f78:	d902      	bls.n	8000f80 <ssd1306_WriteChar+0x24>
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	2b7e      	cmp	r3, #126	; 0x7e
 8000f7e:	d901      	bls.n	8000f84 <ssd1306_WriteChar+0x28>
        return 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	e06d      	b.n	8001060 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000f84:	4b38      	ldr	r3, [pc, #224]	; (8001068 <ssd1306_WriteChar+0x10c>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	793b      	ldrb	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	2b80      	cmp	r3, #128	; 0x80
 8000f90:	dc06      	bgt.n	8000fa0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000f92:	4b35      	ldr	r3, [pc, #212]	; (8001068 <ssd1306_WriteChar+0x10c>)
 8000f94:	885b      	ldrh	r3, [r3, #2]
 8000f96:	461a      	mov	r2, r3
 8000f98:	797b      	ldrb	r3, [r7, #5]
 8000f9a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000f9c:	2b40      	cmp	r3, #64	; 0x40
 8000f9e:	dd01      	ble.n	8000fa4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e05d      	b.n	8001060 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	e04c      	b.n	8001044 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	3b20      	subs	r3, #32
 8000fb0:	7979      	ldrb	r1, [r7, #5]
 8000fb2:	fb01 f303 	mul.w	r3, r1, r3
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	440b      	add	r3, r1
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
 8000fc8:	e034      	b.n	8001034 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d012      	beq.n	8001000 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000fda:	4b23      	ldr	r3, [pc, #140]	; (8001068 <ssd1306_WriteChar+0x10c>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b2d8      	uxtb	r0, r3
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <ssd1306_WriteChar+0x10c>)
 8000fea:	885b      	ldrh	r3, [r3, #2]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4413      	add	r3, r2
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	7bba      	ldrb	r2, [r7, #14]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff ff4f 	bl	8000e9c <ssd1306_DrawPixel>
 8000ffe:	e016      	b.n	800102e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <ssd1306_WriteChar+0x10c>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	4413      	add	r3, r2
 800100c:	b2d8      	uxtb	r0, r3
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <ssd1306_WriteChar+0x10c>)
 8001010:	885b      	ldrh	r3, [r3, #2]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4413      	add	r3, r2
 800101a:	b2d9      	uxtb	r1, r3
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	2b00      	cmp	r3, #0
 8001020:	bf0c      	ite	eq
 8001022:	2301      	moveq	r3, #1
 8001024:	2300      	movne	r3, #0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	461a      	mov	r2, r3
 800102a:	f7ff ff37 	bl	8000e9c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	3301      	adds	r3, #1
 8001032:	61bb      	str	r3, [r7, #24]
 8001034:	793b      	ldrb	r3, [r7, #4]
 8001036:	461a      	mov	r2, r3
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	4293      	cmp	r3, r2
 800103c:	d3c5      	bcc.n	8000fca <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3301      	adds	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	797b      	ldrb	r3, [r7, #5]
 8001046:	461a      	mov	r2, r3
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	4293      	cmp	r3, r2
 800104c:	d3ad      	bcc.n	8000faa <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <ssd1306_WriteChar+0x10c>)
 8001050:	881a      	ldrh	r2, [r3, #0]
 8001052:	793b      	ldrb	r3, [r7, #4]
 8001054:	b29b      	uxth	r3, r3
 8001056:	4413      	add	r3, r2
 8001058:	b29a      	uxth	r2, r3
 800105a:	4b03      	ldr	r3, [pc, #12]	; (8001068 <ssd1306_WriteChar+0x10c>)
 800105c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3724      	adds	r7, #36	; 0x24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}
 8001068:	20000538 	.word	0x20000538

0800106c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	1d38      	adds	r0, r7, #4
 8001076:	e880 0006 	stmia.w	r0, {r1, r2}
 800107a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800107c:	e012      	b.n	80010a4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	7818      	ldrb	r0, [r3, #0]
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	1d3a      	adds	r2, r7, #4
 8001086:	ca06      	ldmia	r2, {r1, r2}
 8001088:	f7ff ff68 	bl	8000f5c <ssd1306_WriteChar>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d002      	beq.n	800109e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	e008      	b.n	80010b0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1e8      	bne.n	800107e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	781b      	ldrb	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	460a      	mov	r2, r1
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	4613      	mov	r3, r2
 80010c6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <ssd1306_SetCursor+0x2c>)
 80010ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <ssd1306_SetCursor+0x2c>)
 80010d6:	805a      	strh	r2, [r3, #2]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	20000538 	.word	0x20000538

080010e8 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80010f2:	2381      	movs	r3, #129	; 0x81
 80010f4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fdc9 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fdc5 	bl	8000c90 <ssd1306_WriteCommand>
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001120:	23af      	movs	r3, #175	; 0xaf
 8001122:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <ssd1306_SetDisplayOn+0x38>)
 8001126:	2201      	movs	r2, #1
 8001128:	719a      	strb	r2, [r3, #6]
 800112a:	e004      	b.n	8001136 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800112c:	23ae      	movs	r3, #174	; 0xae
 800112e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <ssd1306_SetDisplayOn+0x38>)
 8001132:	2200      	movs	r2, #0
 8001134:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fda9 	bl	8000c90 <ssd1306_WriteCommand>
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000538 	.word	0x20000538

0800114c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <HAL_MspInit+0x4c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a0f      	ldr	r2, [pc, #60]	; (8001198 <HAL_MspInit+0x4c>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HAL_MspInit+0x4c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <HAL_MspInit+0x4c>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a08      	ldr	r2, [pc, #32]	; (8001198 <HAL_MspInit+0x4c>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_MspInit+0x4c>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80011a0:	e7fe      	b.n	80011a0 <NMI_Handler+0x4>

080011a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <HardFault_Handler+0x4>

080011a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <MemManage_Handler+0x4>

080011ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <BusFault_Handler+0x4>

080011b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <UsageFault_Handler+0x4>

080011ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e8:	f001 f892 	bl	8002310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011f4:	4803      	ldr	r0, [pc, #12]	; (8001204 <USART1_IRQHandler+0x14>)
 80011f6:	f003 fe9f 	bl	8004f38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 80011fa:	4802      	ldr	r0, [pc, #8]	; (8001204 <USART1_IRQHandler+0x14>)
 80011fc:	f000 ffe6 	bl	80021cc <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200008e4 	.word	0x200008e4

08001208 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <DMA2_Stream2_IRQHandler+0x10>)
 800120e:	f001 fb6d 	bl	80028ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000884 	.word	0x20000884

0800121c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	e00a      	b.n	8001244 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800122e:	f3af 8000 	nop.w
 8001232:	4601      	mov	r1, r0
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	60ba      	str	r2, [r7, #8]
 800123a:	b2ca      	uxtb	r2, r1
 800123c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	429a      	cmp	r2, r3
 800124a:	dbf0      	blt.n	800122e <_read+0x12>
	}

return len;
 800124c:	687b      	ldr	r3, [r7, #4]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	e009      	b.n	800127c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	60ba      	str	r2, [r7, #8]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fc33 	bl	8000adc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	dbf1      	blt.n	8001268 <_write+0x12>
	}
	return len;
 8001284:	687b      	ldr	r3, [r7, #4]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <_close>:

int _close(int file)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
	return -1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012b6:	605a      	str	r2, [r3, #4]
	return 0;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <_isatty>:

int _isatty(int file)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
	return 1;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
	return 0;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001300:	4a14      	ldr	r2, [pc, #80]	; (8001354 <_sbrk+0x5c>)
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <_sbrk+0x60>)
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <_sbrk+0x64>)
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <_sbrk+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	429a      	cmp	r2, r3
 8001326:	d207      	bcs.n	8001338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001328:	f004 fc18 	bl	8005b5c <__errno>
 800132c:	4603      	mov	r3, r0
 800132e:	220c      	movs	r2, #12
 8001330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	e009      	b.n	800134c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <_sbrk+0x64>)
 8001348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134a:	68fb      	ldr	r3, [r7, #12]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20020000 	.word	0x20020000
 8001358:	00000400 	.word	0x00000400
 800135c:	20000540 	.word	0x20000540
 8001360:	20000980 	.word	0x20000980

08001364 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <SystemInit+0x20>)
 800136a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136e:	4a05      	ldr	r2, [pc, #20]	; (8001384 <SystemInit+0x20>)
 8001370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001398:	463b      	mov	r3, r7
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a4:	4b27      	ldr	r3, [pc, #156]	; (8001444 <MX_TIM1_Init+0xbc>)
 80013a6:	4a28      	ldr	r2, [pc, #160]	; (8001448 <MX_TIM1_Init+0xc0>)
 80013a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013aa:	4b26      	ldr	r3, [pc, #152]	; (8001444 <MX_TIM1_Init+0xbc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b0:	4b24      	ldr	r3, [pc, #144]	; (8001444 <MX_TIM1_Init+0xbc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013b6:	4b23      	ldr	r3, [pc, #140]	; (8001444 <MX_TIM1_Init+0xbc>)
 80013b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <MX_TIM1_Init+0xbc>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c4:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <MX_TIM1_Init+0xbc>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MX_TIM1_Init+0xbc>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80013d0:	481c      	ldr	r0, [pc, #112]	; (8001444 <MX_TIM1_Init+0xbc>)
 80013d2:	f002 ff42 	bl	800425a <HAL_TIM_IC_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013dc:	f7ff fb96 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4619      	mov	r1, r3
 80013ee:	4815      	ldr	r0, [pc, #84]	; (8001444 <MX_TIM1_Init+0xbc>)
 80013f0:	f003 fc4e 	bl	8004c90 <HAL_TIMEx_MasterConfigSynchronization>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80013fa:	f7ff fb87 	bl	8000b0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001402:	2301      	movs	r3, #1
 8001404:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800140e:	463b      	mov	r3, r7
 8001410:	2200      	movs	r2, #0
 8001412:	4619      	mov	r1, r3
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <MX_TIM1_Init+0xbc>)
 8001416:	f002 ff6f 	bl	80042f8 <HAL_TIM_IC_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001420:	f7ff fb74 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001424:	463b      	mov	r3, r7
 8001426:	2204      	movs	r2, #4
 8001428:	4619      	mov	r1, r3
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <MX_TIM1_Init+0xbc>)
 800142c:	f002 ff64 	bl	80042f8 <HAL_TIM_IC_ConfigChannel>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8001436:	f7ff fb69 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000076c 	.word	0x2000076c
 8001448:	40010000 	.word	0x40010000

0800144c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800145c:	463b      	mov	r3, r7
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001468:	4b26      	ldr	r3, [pc, #152]	; (8001504 <MX_TIM2_Init+0xb8>)
 800146a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800146e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001470:	4b24      	ldr	r3, [pc, #144]	; (8001504 <MX_TIM2_Init+0xb8>)
 8001472:	2200      	movs	r2, #0
 8001474:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <MX_TIM2_Init+0xb8>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <MX_TIM2_Init+0xb8>)
 800147e:	f04f 32ff 	mov.w	r2, #4294967295
 8001482:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <MX_TIM2_Init+0xb8>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <MX_TIM2_Init+0xb8>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001490:	481c      	ldr	r0, [pc, #112]	; (8001504 <MX_TIM2_Init+0xb8>)
 8001492:	f002 fee2 	bl	800425a <HAL_TIM_IC_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800149c:	f7ff fb36 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4619      	mov	r1, r3
 80014ae:	4815      	ldr	r0, [pc, #84]	; (8001504 <MX_TIM2_Init+0xb8>)
 80014b0:	f003 fbee 	bl	8004c90 <HAL_TIMEx_MasterConfigSynchronization>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014ba:	f7ff fb27 	bl	8000b0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014c2:	2301      	movs	r3, #1
 80014c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014ce:	463b      	mov	r3, r7
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	480b      	ldr	r0, [pc, #44]	; (8001504 <MX_TIM2_Init+0xb8>)
 80014d6:	f002 ff0f 	bl	80042f8 <HAL_TIM_IC_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80014e0:	f7ff fb14 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014e4:	463b      	mov	r3, r7
 80014e6:	2204      	movs	r2, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	4806      	ldr	r0, [pc, #24]	; (8001504 <MX_TIM2_Init+0xb8>)
 80014ec:	f002 ff04 	bl	80042f8 <HAL_TIM_IC_ConfigChannel>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80014f6:	f7ff fb09 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200007b4 	.word	0x200007b4

08001508 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]
 8001526:	615a      	str	r2, [r3, #20]
 8001528:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800152a:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <MX_TIM3_Init+0xec>)
 800152c:	4a32      	ldr	r2, [pc, #200]	; (80015f8 <MX_TIM3_Init+0xf0>)
 800152e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001530:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <MX_TIM3_Init+0xec>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001536:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <MX_TIM3_Init+0xec>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800153c:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <MX_TIM3_Init+0xec>)
 800153e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001542:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <MX_TIM3_Init+0xec>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154a:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <MX_TIM3_Init+0xec>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001550:	4828      	ldr	r0, [pc, #160]	; (80015f4 <MX_TIM3_Init+0xec>)
 8001552:	f002 fe33 	bl	80041bc <HAL_TIM_PWM_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800155c:	f7ff fad6 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001568:	f107 0320 	add.w	r3, r7, #32
 800156c:	4619      	mov	r1, r3
 800156e:	4821      	ldr	r0, [pc, #132]	; (80015f4 <MX_TIM3_Init+0xec>)
 8001570:	f003 fb8e 	bl	8004c90 <HAL_TIMEx_MasterConfigSynchronization>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800157a:	f7ff fac7 	bl	8000b0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157e:	2360      	movs	r3, #96	; 0x60
 8001580:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2200      	movs	r2, #0
 8001592:	4619      	mov	r1, r3
 8001594:	4817      	ldr	r0, [pc, #92]	; (80015f4 <MX_TIM3_Init+0xec>)
 8001596:	f002 ff43 	bl	8004420 <HAL_TIM_PWM_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80015a0:	f7ff fab4 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2204      	movs	r2, #4
 80015a8:	4619      	mov	r1, r3
 80015aa:	4812      	ldr	r0, [pc, #72]	; (80015f4 <MX_TIM3_Init+0xec>)
 80015ac:	f002 ff38 	bl	8004420 <HAL_TIM_PWM_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80015b6:	f7ff faa9 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2208      	movs	r2, #8
 80015be:	4619      	mov	r1, r3
 80015c0:	480c      	ldr	r0, [pc, #48]	; (80015f4 <MX_TIM3_Init+0xec>)
 80015c2:	f002 ff2d 	bl	8004420 <HAL_TIM_PWM_ConfigChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80015cc:	f7ff fa9e 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	220c      	movs	r2, #12
 80015d4:	4619      	mov	r1, r3
 80015d6:	4807      	ldr	r0, [pc, #28]	; (80015f4 <MX_TIM3_Init+0xec>)
 80015d8:	f002 ff22 	bl	8004420 <HAL_TIM_PWM_ConfigChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80015e2:	f7ff fa93 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015e6:	4803      	ldr	r0, [pc, #12]	; (80015f4 <MX_TIM3_Init+0xec>)
 80015e8:	f000 faa6 	bl	8001b38 <HAL_TIM_MspPostInit>

}
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	; 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000724 	.word	0x20000724
 80015f8:	40000400 	.word	0x40000400

080015fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800160c:	463b      	mov	r3, r7
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <MX_TIM4_Init+0xb4>)
 800161a:	4a26      	ldr	r2, [pc, #152]	; (80016b4 <MX_TIM4_Init+0xb8>)
 800161c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800161e:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <MX_TIM4_Init+0xb4>)
 8001620:	2200      	movs	r2, #0
 8001622:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001624:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <MX_TIM4_Init+0xb4>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800162a:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <MX_TIM4_Init+0xb4>)
 800162c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001630:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <MX_TIM4_Init+0xb4>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <MX_TIM4_Init+0xb4>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800163e:	481c      	ldr	r0, [pc, #112]	; (80016b0 <MX_TIM4_Init+0xb4>)
 8001640:	f002 fe0b 	bl	800425a <HAL_TIM_IC_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800164a:	f7ff fa5f 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	4619      	mov	r1, r3
 800165c:	4814      	ldr	r0, [pc, #80]	; (80016b0 <MX_TIM4_Init+0xb4>)
 800165e:	f003 fb17 	bl	8004c90 <HAL_TIMEx_MasterConfigSynchronization>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001668:	f7ff fa50 	bl	8000b0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800166c:	2300      	movs	r3, #0
 800166e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001670:	2301      	movs	r3, #1
 8001672:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800167c:	463b      	mov	r3, r7
 800167e:	2200      	movs	r2, #0
 8001680:	4619      	mov	r1, r3
 8001682:	480b      	ldr	r0, [pc, #44]	; (80016b0 <MX_TIM4_Init+0xb4>)
 8001684:	f002 fe38 	bl	80042f8 <HAL_TIM_IC_ConfigChannel>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800168e:	f7ff fa3d 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001692:	463b      	mov	r3, r7
 8001694:	2204      	movs	r2, #4
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_TIM4_Init+0xb4>)
 800169a:	f002 fe2d 	bl	80042f8 <HAL_TIM_IC_ConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80016a4:	f7ff fa32 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000694 	.word	0x20000694
 80016b4:	40000800 	.word	0x40000800

080016b8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016c8:	463b      	mov	r3, r7
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016d4:	4b25      	ldr	r3, [pc, #148]	; (800176c <MX_TIM5_Init+0xb4>)
 80016d6:	4a26      	ldr	r2, [pc, #152]	; (8001770 <MX_TIM5_Init+0xb8>)
 80016d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80016da:	4b24      	ldr	r3, [pc, #144]	; (800176c <MX_TIM5_Init+0xb4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e0:	4b22      	ldr	r3, [pc, #136]	; (800176c <MX_TIM5_Init+0xb4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80016e6:	4b21      	ldr	r3, [pc, #132]	; (800176c <MX_TIM5_Init+0xb4>)
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ee:	4b1f      	ldr	r3, [pc, #124]	; (800176c <MX_TIM5_Init+0xb4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <MX_TIM5_Init+0xb4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80016fa:	481c      	ldr	r0, [pc, #112]	; (800176c <MX_TIM5_Init+0xb4>)
 80016fc:	f002 fdad 	bl	800425a <HAL_TIM_IC_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001706:	f7ff fa01 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	4619      	mov	r1, r3
 8001718:	4814      	ldr	r0, [pc, #80]	; (800176c <MX_TIM5_Init+0xb4>)
 800171a:	f003 fab9 	bl	8004c90 <HAL_TIMEx_MasterConfigSynchronization>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001724:	f7ff f9f2 	bl	8000b0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001728:	2300      	movs	r3, #0
 800172a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800172c:	2301      	movs	r3, #1
 800172e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001738:	463b      	mov	r3, r7
 800173a:	2200      	movs	r2, #0
 800173c:	4619      	mov	r1, r3
 800173e:	480b      	ldr	r0, [pc, #44]	; (800176c <MX_TIM5_Init+0xb4>)
 8001740:	f002 fdda 	bl	80042f8 <HAL_TIM_IC_ConfigChannel>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 800174a:	f7ff f9df 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800174e:	463b      	mov	r3, r7
 8001750:	2204      	movs	r2, #4
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_TIM5_Init+0xb4>)
 8001756:	f002 fdcf 	bl	80042f8 <HAL_TIM_IC_ConfigChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8001760:	f7ff f9d4 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200006dc 	.word	0x200006dc
 8001770:	40000c00 	.word	0x40000c00

08001774 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001784:	463b      	mov	r3, r7
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <MX_TIM8_Init+0xbc>)
 8001792:	4a28      	ldr	r2, [pc, #160]	; (8001834 <MX_TIM8_Init+0xc0>)
 8001794:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001796:	4b26      	ldr	r3, [pc, #152]	; (8001830 <MX_TIM8_Init+0xbc>)
 8001798:	2200      	movs	r2, #0
 800179a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <MX_TIM8_Init+0xbc>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80017a2:	4b23      	ldr	r3, [pc, #140]	; (8001830 <MX_TIM8_Init+0xbc>)
 80017a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <MX_TIM8_Init+0xbc>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017b0:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <MX_TIM8_Init+0xbc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b6:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <MX_TIM8_Init+0xbc>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80017bc:	481c      	ldr	r0, [pc, #112]	; (8001830 <MX_TIM8_Init+0xbc>)
 80017be:	f002 fd4c 	bl	800425a <HAL_TIM_IC_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80017c8:	f7ff f9a0 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4619      	mov	r1, r3
 80017da:	4815      	ldr	r0, [pc, #84]	; (8001830 <MX_TIM8_Init+0xbc>)
 80017dc:	f003 fa58 	bl	8004c90 <HAL_TIMEx_MasterConfigSynchronization>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80017e6:	f7ff f991 	bl	8000b0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017ea:	2300      	movs	r3, #0
 80017ec:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017ee:	2301      	movs	r3, #1
 80017f0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017fa:	463b      	mov	r3, r7
 80017fc:	2200      	movs	r2, #0
 80017fe:	4619      	mov	r1, r3
 8001800:	480b      	ldr	r0, [pc, #44]	; (8001830 <MX_TIM8_Init+0xbc>)
 8001802:	f002 fd79 	bl	80042f8 <HAL_TIM_IC_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 800180c:	f7ff f97e 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001810:	463b      	mov	r3, r7
 8001812:	2204      	movs	r2, #4
 8001814:	4619      	mov	r1, r3
 8001816:	4806      	ldr	r0, [pc, #24]	; (8001830 <MX_TIM8_Init+0xbc>)
 8001818:	f002 fd6e 	bl	80042f8 <HAL_TIM_IC_ConfigChannel>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM8_Init+0xb2>
  {
    Error_Handler();
 8001822:	f7ff f973 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2000064c 	.word	0x2000064c
 8001834:	40010400 	.word	0x40010400

08001838 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b094      	sub	sp, #80	; 0x50
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a9d      	ldr	r2, [pc, #628]	; (8001acc <HAL_TIM_IC_MspInit+0x294>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d14c      	bne.n	80018f4 <HAL_TIM_IC_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	63bb      	str	r3, [r7, #56]	; 0x38
 800185e:	4b9c      	ldr	r3, [pc, #624]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a9b      	ldr	r2, [pc, #620]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b99      	ldr	r3, [pc, #612]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	63bb      	str	r3, [r7, #56]	; 0x38
 8001874:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
 800187a:	4b95      	ldr	r3, [pc, #596]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a94      	ldr	r2, [pc, #592]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001880:	f043 0310 	orr.w	r3, r3, #16
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b92      	ldr	r3, [pc, #584]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
 8001890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
 8001896:	4b8e      	ldr	r3, [pc, #568]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a8d      	ldr	r2, [pc, #564]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b8b      	ldr	r3, [pc, #556]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
 80018ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018c8:	4619      	mov	r1, r3
 80018ca:	4882      	ldr	r0, [pc, #520]	; (8001ad4 <HAL_TIM_IC_MspInit+0x29c>)
 80018cc:	f001 fa78 	bl	8002dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018e2:	2301      	movs	r3, #1
 80018e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018ea:	4619      	mov	r1, r3
 80018ec:	487a      	ldr	r0, [pc, #488]	; (8001ad8 <HAL_TIM_IC_MspInit+0x2a0>)
 80018ee:	f001 fa67 	bl	8002dc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80018f2:	e0e6      	b.n	8001ac2 <HAL_TIM_IC_MspInit+0x28a>
  else if(tim_icHandle->Instance==TIM2)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018fc:	d14b      	bne.n	8001996 <HAL_TIM_IC_MspInit+0x15e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001902:	4b73      	ldr	r3, [pc, #460]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	4a72      	ldr	r2, [pc, #456]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6413      	str	r3, [r2, #64]	; 0x40
 800190e:	4b70      	ldr	r3, [pc, #448]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
 800191e:	4b6c      	ldr	r3, [pc, #432]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a6b      	ldr	r2, [pc, #428]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b69      	ldr	r3, [pc, #420]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
 8001934:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
 800193a:	4b65      	ldr	r3, [pc, #404]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a64      	ldr	r2, [pc, #400]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b62      	ldr	r3, [pc, #392]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001964:	2301      	movs	r3, #1
 8001966:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800196c:	4619      	mov	r1, r3
 800196e:	485a      	ldr	r0, [pc, #360]	; (8001ad8 <HAL_TIM_IC_MspInit+0x2a0>)
 8001970:	f001 fa26 	bl	8002dc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001974:	2308      	movs	r3, #8
 8001976:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001984:	2301      	movs	r3, #1
 8001986:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800198c:	4619      	mov	r1, r3
 800198e:	4853      	ldr	r0, [pc, #332]	; (8001adc <HAL_TIM_IC_MspInit+0x2a4>)
 8001990:	f001 fa16 	bl	8002dc0 <HAL_GPIO_Init>
}
 8001994:	e095      	b.n	8001ac2 <HAL_TIM_IC_MspInit+0x28a>
  else if(tim_icHandle->Instance==TIM4)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a51      	ldr	r2, [pc, #324]	; (8001ae0 <HAL_TIM_IC_MspInit+0x2a8>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d12d      	bne.n	80019fc <HAL_TIM_IC_MspInit+0x1c4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
 80019a4:	4b4a      	ldr	r3, [pc, #296]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	4a49      	ldr	r2, [pc, #292]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	6413      	str	r3, [r2, #64]	; 0x40
 80019b0:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	623b      	str	r3, [r7, #32]
 80019ba:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	4a42      	ldr	r2, [pc, #264]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 80019c6:	f043 0308 	orr.w	r3, r3, #8
 80019ca:	6313      	str	r3, [r2, #48]	; 0x30
 80019cc:	4b40      	ldr	r3, [pc, #256]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019d8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80019dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019ea:	2302      	movs	r3, #2
 80019ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019f2:	4619      	mov	r1, r3
 80019f4:	483b      	ldr	r0, [pc, #236]	; (8001ae4 <HAL_TIM_IC_MspInit+0x2ac>)
 80019f6:	f001 f9e3 	bl	8002dc0 <HAL_GPIO_Init>
}
 80019fa:	e062      	b.n	8001ac2 <HAL_TIM_IC_MspInit+0x28a>
  else if(tim_icHandle->Instance==TIM5)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a39      	ldr	r2, [pc, #228]	; (8001ae8 <HAL_TIM_IC_MspInit+0x2b0>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d12c      	bne.n	8001a60 <HAL_TIM_IC_MspInit+0x228>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	4a30      	ldr	r2, [pc, #192]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001a10:	f043 0308 	orr.w	r3, r3, #8
 8001a14:	6413      	str	r3, [r2, #64]	; 0x40
 8001a16:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a29      	ldr	r2, [pc, #164]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a56:	4619      	mov	r1, r3
 8001a58:	481f      	ldr	r0, [pc, #124]	; (8001ad8 <HAL_TIM_IC_MspInit+0x2a0>)
 8001a5a:	f001 f9b1 	bl	8002dc0 <HAL_GPIO_Init>
}
 8001a5e:	e030      	b.n	8001ac2 <HAL_TIM_IC_MspInit+0x28a>
  else if(tim_icHandle->Instance==TIM8)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a21      	ldr	r2, [pc, #132]	; (8001aec <HAL_TIM_IC_MspInit+0x2b4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d12b      	bne.n	8001ac2 <HAL_TIM_IC_MspInit+0x28a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	4a17      	ldr	r2, [pc, #92]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_TIM_IC_MspInit+0x298>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aa2:	23c0      	movs	r3, #192	; 0xc0
 8001aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001aba:	4619      	mov	r1, r3
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <HAL_TIM_IC_MspInit+0x2b8>)
 8001abe:	f001 f97f 	bl	8002dc0 <HAL_GPIO_Init>
}
 8001ac2:	bf00      	nop
 8001ac4:	3750      	adds	r7, #80	; 0x50
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40010000 	.word	0x40010000
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40020000 	.word	0x40020000
 8001adc:	40020400 	.word	0x40020400
 8001ae0:	40000800 	.word	0x40000800
 8001ae4:	40020c00 	.word	0x40020c00
 8001ae8:	40000c00 	.word	0x40000c00
 8001aec:	40010400 	.word	0x40010400
 8001af0:	40020800 	.word	0x40020800

08001af4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d10d      	bne.n	8001b22 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_TIM_PWM_MspInit+0x40>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a09      	ldr	r2, [pc, #36]	; (8001b34 <HAL_TIM_PWM_MspInit+0x40>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <HAL_TIM_PWM_MspInit+0x40>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40000400 	.word	0x40000400
 8001b34:	40023800 	.word	0x40023800

08001b38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a21      	ldr	r2, [pc, #132]	; (8001bdc <HAL_TIM_MspPostInit+0xa4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d13b      	bne.n	8001bd2 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_TIM_MspPostInit+0xa8>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a1f      	ldr	r2, [pc, #124]	; (8001be0 <HAL_TIM_MspPostInit+0xa8>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_TIM_MspPostInit+0xa8>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_TIM_MspPostInit+0xa8>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a18      	ldr	r2, [pc, #96]	; (8001be0 <HAL_TIM_MspPostInit+0xa8>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <HAL_TIM_MspPostInit+0xa8>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b92:	23c0      	movs	r3, #192	; 0xc0
 8001b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	480d      	ldr	r0, [pc, #52]	; (8001be4 <HAL_TIM_MspPostInit+0xac>)
 8001bae:	f001 f907 	bl	8002dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4806      	ldr	r0, [pc, #24]	; (8001be8 <HAL_TIM_MspPostInit+0xb0>)
 8001bce:	f001 f8f7 	bl	8002dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40000400 	.word	0x40000400
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020000 	.word	0x40020000
 8001be8:	40020400 	.word	0x40020400

08001bec <MX_UART5_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart1_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_UART5_Init+0x4c>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <MX_UART5_Init+0x50>)
 8001bf4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <MX_UART5_Init+0x4c>)
 8001bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bfc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <MX_UART5_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_UART5_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <MX_UART5_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_UART5_Init+0x4c>)
 8001c12:	220c      	movs	r2, #12
 8001c14:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <MX_UART5_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_UART5_Init+0x4c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_UART5_Init+0x4c>)
 8001c24:	f003 f8b0 	bl	8004d88 <HAL_UART_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001c2e:	f7fe ff6d 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000840 	.word	0x20000840
 8001c3c:	40005000 	.word	0x40005000

08001c40 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c44:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <MX_USART1_UART_Init+0x64>)
 8001c46:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <MX_USART1_UART_Init+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c4a:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <MX_USART1_UART_Init+0x64>)
 8001c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c52:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <MX_USART1_UART_Init+0x64>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <MX_USART1_UART_Init+0x64>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <MX_USART1_UART_Init+0x64>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <MX_USART1_UART_Init+0x64>)
 8001c66:	220c      	movs	r2, #12
 8001c68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <MX_USART1_UART_Init+0x64>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <MX_USART1_UART_Init+0x64>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c76:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <MX_USART1_UART_Init+0x64>)
 8001c78:	f003 f886 	bl	8004d88 <HAL_UART_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c82:	f7fe ff43 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);  // 使能串口空闲中断
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <MX_USART1_UART_Init+0x64>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <MX_USART1_UART_Init+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0210 	orr.w	r2, r2, #16
 8001c94:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(&huart1, (uint8_t*) receive_buff, 8); //设置DMA传输，将串口1的数据搬运到recvive_buff中，每次8个字�?
 8001c96:	2208      	movs	r2, #8
 8001c98:	4904      	ldr	r1, [pc, #16]	; (8001cac <MX_USART1_UART_Init+0x6c>)
 8001c9a:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <MX_USART1_UART_Init+0x64>)
 8001c9c:	f003 f8c1 	bl	8004e22 <HAL_UART_Receive_DMA>
  /* USER CODE END USART1_Init 2 */

}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200008e4 	.word	0x200008e4
 8001ca8:	40011000 	.word	0x40011000
 8001cac:	20000094 	.word	0x20000094

08001cb0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cb6:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <MX_USART2_UART_Init+0x50>)
 8001cb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ce6:	4805      	ldr	r0, [pc, #20]	; (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001ce8:	f003 f84e 	bl	8004d88 <HAL_UART_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cf2:	f7fe ff0b 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000928 	.word	0x20000928
 8001d00:	40004400 	.word	0x40004400

08001d04 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <MX_USART3_UART_Init+0x50>)
 8001d0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d3c:	f003 f824 	bl	8004d88 <HAL_UART_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d46:	f7fe fee1 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200007fc 	.word	0x200007fc
 8001d54:	40004800 	.word	0x40004800

08001d58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b090      	sub	sp, #64	; 0x40
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a90      	ldr	r2, [pc, #576]	; (8001fb8 <HAL_UART_MspInit+0x260>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d14b      	bne.n	8001e12 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d7e:	4b8f      	ldr	r3, [pc, #572]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a8e      	ldr	r2, [pc, #568]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001d84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b8c      	ldr	r3, [pc, #560]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d94:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9a:	4b88      	ldr	r3, [pc, #544]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a87      	ldr	r2, [pc, #540]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b85      	ldr	r3, [pc, #532]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
 8001db6:	4b81      	ldr	r3, [pc, #516]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a80      	ldr	r2, [pc, #512]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001dbc:	f043 0308 	orr.w	r3, r3, #8
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b7e      	ldr	r3, [pc, #504]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	623b      	str	r3, [r7, #32]
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001de0:	2308      	movs	r3, #8
 8001de2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de8:	4619      	mov	r1, r3
 8001dea:	4875      	ldr	r0, [pc, #468]	; (8001fc0 <HAL_UART_MspInit+0x268>)
 8001dec:	f000 ffe8 	bl	8002dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001df0:	2304      	movs	r3, #4
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001e00:	2308      	movs	r3, #8
 8001e02:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e08:	4619      	mov	r1, r3
 8001e0a:	486e      	ldr	r0, [pc, #440]	; (8001fc4 <HAL_UART_MspInit+0x26c>)
 8001e0c:	f000 ffd8 	bl	8002dc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e10:	e0ce      	b.n	8001fb0 <HAL_UART_MspInit+0x258>
  else if(uartHandle->Instance==USART1)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a6c      	ldr	r2, [pc, #432]	; (8001fc8 <HAL_UART_MspInit+0x270>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d165      	bne.n	8001ee8 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	4b66      	ldr	r3, [pc, #408]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	4a65      	ldr	r2, [pc, #404]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001e26:	f043 0310 	orr.w	r3, r3, #16
 8001e2a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2c:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	4a5e      	ldr	r2, [pc, #376]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6313      	str	r3, [r2, #48]	; 0x30
 8001e48:	4b5c      	ldr	r3, [pc, #368]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e54:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e66:	2307      	movs	r3, #7
 8001e68:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4856      	ldr	r0, [pc, #344]	; (8001fcc <HAL_UART_MspInit+0x274>)
 8001e72:	f000 ffa5 	bl	8002dc0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001e76:	4b56      	ldr	r3, [pc, #344]	; (8001fd0 <HAL_UART_MspInit+0x278>)
 8001e78:	4a56      	ldr	r2, [pc, #344]	; (8001fd4 <HAL_UART_MspInit+0x27c>)
 8001e7a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001e7c:	4b54      	ldr	r3, [pc, #336]	; (8001fd0 <HAL_UART_MspInit+0x278>)
 8001e7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e82:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e84:	4b52      	ldr	r3, [pc, #328]	; (8001fd0 <HAL_UART_MspInit+0x278>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e8a:	4b51      	ldr	r3, [pc, #324]	; (8001fd0 <HAL_UART_MspInit+0x278>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e90:	4b4f      	ldr	r3, [pc, #316]	; (8001fd0 <HAL_UART_MspInit+0x278>)
 8001e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e96:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e98:	4b4d      	ldr	r3, [pc, #308]	; (8001fd0 <HAL_UART_MspInit+0x278>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e9e:	4b4c      	ldr	r3, [pc, #304]	; (8001fd0 <HAL_UART_MspInit+0x278>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001ea4:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <HAL_UART_MspInit+0x278>)
 8001ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eaa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001eac:	4b48      	ldr	r3, [pc, #288]	; (8001fd0 <HAL_UART_MspInit+0x278>)
 8001eae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001eb2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eb4:	4b46      	ldr	r3, [pc, #280]	; (8001fd0 <HAL_UART_MspInit+0x278>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001eba:	4845      	ldr	r0, [pc, #276]	; (8001fd0 <HAL_UART_MspInit+0x278>)
 8001ebc:	f000 fb7e 	bl	80025bc <HAL_DMA_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_UART_MspInit+0x172>
      Error_Handler();
 8001ec6:	f7fe fe21 	bl	8000b0c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a40      	ldr	r2, [pc, #256]	; (8001fd0 <HAL_UART_MspInit+0x278>)
 8001ece:	639a      	str	r2, [r3, #56]	; 0x38
 8001ed0:	4a3f      	ldr	r2, [pc, #252]	; (8001fd0 <HAL_UART_MspInit+0x278>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2025      	movs	r0, #37	; 0x25
 8001edc:	f000 fb37 	bl	800254e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ee0:	2025      	movs	r0, #37	; 0x25
 8001ee2:	f000 fb50 	bl	8002586 <HAL_NVIC_EnableIRQ>
}
 8001ee6:	e063      	b.n	8001fb0 <HAL_UART_MspInit+0x258>
  else if(uartHandle->Instance==USART2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a3a      	ldr	r2, [pc, #232]	; (8001fd8 <HAL_UART_MspInit+0x280>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d12c      	bne.n	8001f4c <HAL_UART_MspInit+0x1f4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a30      	ldr	r2, [pc, #192]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	4b2e      	ldr	r3, [pc, #184]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a29      	ldr	r2, [pc, #164]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001f18:	f043 0308 	orr.w	r3, r3, #8
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001f2a:	2360      	movs	r3, #96	; 0x60
 8001f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f36:	2303      	movs	r3, #3
 8001f38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f3a:	2307      	movs	r3, #7
 8001f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f42:	4619      	mov	r1, r3
 8001f44:	481f      	ldr	r0, [pc, #124]	; (8001fc4 <HAL_UART_MspInit+0x26c>)
 8001f46:	f000 ff3b 	bl	8002dc0 <HAL_GPIO_Init>
}
 8001f4a:	e031      	b.n	8001fb0 <HAL_UART_MspInit+0x258>
  else if(uartHandle->Instance==USART3)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a22      	ldr	r2, [pc, #136]	; (8001fdc <HAL_UART_MspInit+0x284>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d12c      	bne.n	8001fb0 <HAL_UART_MspInit+0x258>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <HAL_UART_MspInit+0x264>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fa0:	2307      	movs	r3, #7
 8001fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <HAL_UART_MspInit+0x268>)
 8001fac:	f000 ff08 	bl	8002dc0 <HAL_GPIO_Init>
}
 8001fb0:	bf00      	nop
 8001fb2:	3740      	adds	r7, #64	; 0x40
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40005000 	.word	0x40005000
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	40020c00 	.word	0x40020c00
 8001fc8:	40011000 	.word	0x40011000
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	20000884 	.word	0x20000884
 8001fd4:	40026440 	.word	0x40026440
 8001fd8:	40004400 	.word	0x40004400
 8001fdc:	40004800 	.word	0x40004800

08001fe0 <asc2int>:
extern uint8_t receive_buff[BUFFER_SIZE];
extern uint16_t coordinate_XY[32][2];
extern uint8_t i;
extern DMA_HandleTypeDef hdma_usart1_rx;

uint16_t asc2int(uint8_t huns, uint8_t tens, uint8_t ones) {
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
 8001fea:	460b      	mov	r3, r1
 8001fec:	71bb      	strb	r3, [r7, #6]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	717b      	strb	r3, [r7, #5]
	uint16_t number = (huns - 48) * 100 + (tens - 48) * 10 + (ones - 48);
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	3b30      	subs	r3, #48	; 0x30
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	0092      	lsls	r2, r2, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	461a      	mov	r2, r3
 8002000:	0091      	lsls	r1, r2, #2
 8002002:	461a      	mov	r2, r3
 8002004:	460b      	mov	r3, r1
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	b29a      	uxth	r2, r3
 800200c:	79bb      	ldrb	r3, [r7, #6]
 800200e:	3b30      	subs	r3, #48	; 0x30
 8002010:	b29b      	uxth	r3, r3
 8002012:	4619      	mov	r1, r3
 8002014:	0089      	lsls	r1, r1, #2
 8002016:	440b      	add	r3, r1
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	b29b      	uxth	r3, r3
 800201c:	4413      	add	r3, r2
 800201e:	b29a      	uxth	r2, r3
 8002020:	797b      	ldrb	r3, [r7, #5]
 8002022:	b29b      	uxth	r3, r3
 8002024:	4413      	add	r3, r2
 8002026:	b29b      	uxth	r3, r3
 8002028:	3b30      	subs	r3, #48	; 0x30
 800202a:	81fb      	strh	r3, [r7, #14]
	return number;
 800202c:	89fb      	ldrh	r3, [r7, #14]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <USAR_UART_IDLECallback>:

/* USER CODE BEGIN 1 */
void USAR_UART_IDLECallback(UART_HandleTypeDef *huart) {
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	//数据传输的格式为abcd(x轴,y轴)ef   [abcd即0x61、0x62、0x63、0x64为字头，x轴和y轴信息本别占用三个字节，ef即0x65、0x66为字尾]
	uint8_t start = 0, end = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	2300      	movs	r3, #0
 800204a:	73bb      	strb	r3, [r7, #14]
	uint8_t isStart = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	737b      	strb	r3, [r7, #13]
	// 停止本次DMA传输
	HAL_UART_DMAStop(&huart1);
 8002050:	4858      	ldr	r0, [pc, #352]	; (80021b4 <USAR_UART_IDLECallback+0x178>)
 8002052:	f002 ff16 	bl	8004e82 <HAL_UART_DMAStop>

	// 计算接收到的数据长度
	uint8_t data_length = BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8002056:	4b58      	ldr	r3, [pc, #352]	; (80021b8 <USAR_UART_IDLECallback+0x17c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f1c3 0320 	rsb	r3, r3, #32
 8002062:	72fb      	strb	r3, [r7, #11]

	for (uint8_t j = 0; j < 32; j++) {
 8002064:	2300      	movs	r3, #0
 8002066:	733b      	strb	r3, [r7, #12]
 8002068:	e040      	b.n	80020ec <USAR_UART_IDLECallback+0xb0>
		if (isStart == 0 && receive_buff[j] == 0x61) {
 800206a:	7b7b      	ldrb	r3, [r7, #13]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d122      	bne.n	80020b6 <USAR_UART_IDLECallback+0x7a>
 8002070:	7b3b      	ldrb	r3, [r7, #12]
 8002072:	4a52      	ldr	r2, [pc, #328]	; (80021bc <USAR_UART_IDLECallback+0x180>)
 8002074:	5cd3      	ldrb	r3, [r2, r3]
 8002076:	2b61      	cmp	r3, #97	; 0x61
 8002078:	d11d      	bne.n	80020b6 <USAR_UART_IDLECallback+0x7a>
			if (receive_buff[j] == 0x61 && receive_buff[j + 1] == 0x62
 800207a:	7b3b      	ldrb	r3, [r7, #12]
 800207c:	4a4f      	ldr	r2, [pc, #316]	; (80021bc <USAR_UART_IDLECallback+0x180>)
 800207e:	5cd3      	ldrb	r3, [r2, r3]
 8002080:	2b61      	cmp	r3, #97	; 0x61
 8002082:	d118      	bne.n	80020b6 <USAR_UART_IDLECallback+0x7a>
 8002084:	7b3b      	ldrb	r3, [r7, #12]
 8002086:	3301      	adds	r3, #1
 8002088:	4a4c      	ldr	r2, [pc, #304]	; (80021bc <USAR_UART_IDLECallback+0x180>)
 800208a:	5cd3      	ldrb	r3, [r2, r3]
 800208c:	2b62      	cmp	r3, #98	; 0x62
 800208e:	d112      	bne.n	80020b6 <USAR_UART_IDLECallback+0x7a>
					&& receive_buff[j + 2] == 0x63
 8002090:	7b3b      	ldrb	r3, [r7, #12]
 8002092:	3302      	adds	r3, #2
 8002094:	4a49      	ldr	r2, [pc, #292]	; (80021bc <USAR_UART_IDLECallback+0x180>)
 8002096:	5cd3      	ldrb	r3, [r2, r3]
 8002098:	2b63      	cmp	r3, #99	; 0x63
 800209a:	d10c      	bne.n	80020b6 <USAR_UART_IDLECallback+0x7a>
					&& receive_buff[j + 3] == 0x64) {
 800209c:	7b3b      	ldrb	r3, [r7, #12]
 800209e:	3303      	adds	r3, #3
 80020a0:	4a46      	ldr	r2, [pc, #280]	; (80021bc <USAR_UART_IDLECallback+0x180>)
 80020a2:	5cd3      	ldrb	r3, [r2, r3]
 80020a4:	2b64      	cmp	r3, #100	; 0x64
 80020a6:	d106      	bne.n	80020b6 <USAR_UART_IDLECallback+0x7a>
				j += 4;
 80020a8:	7b3b      	ldrb	r3, [r7, #12]
 80020aa:	3304      	adds	r3, #4
 80020ac:	733b      	strb	r3, [r7, #12]
				start = j;
 80020ae:	7b3b      	ldrb	r3, [r7, #12]
 80020b0:	73fb      	strb	r3, [r7, #15]
				isStart = 1;
 80020b2:	2301      	movs	r3, #1
 80020b4:	737b      	strb	r3, [r7, #13]
			}
		}
		if (isStart == 1 && receive_buff[j] == 0x65) {
 80020b6:	7b7b      	ldrb	r3, [r7, #13]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d114      	bne.n	80020e6 <USAR_UART_IDLECallback+0xaa>
 80020bc:	7b3b      	ldrb	r3, [r7, #12]
 80020be:	4a3f      	ldr	r2, [pc, #252]	; (80021bc <USAR_UART_IDLECallback+0x180>)
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
 80020c2:	2b65      	cmp	r3, #101	; 0x65
 80020c4:	d10f      	bne.n	80020e6 <USAR_UART_IDLECallback+0xaa>
			if (receive_buff[j] == 0x65 && receive_buff[j + 1] == 0x66) {
 80020c6:	7b3b      	ldrb	r3, [r7, #12]
 80020c8:	4a3c      	ldr	r2, [pc, #240]	; (80021bc <USAR_UART_IDLECallback+0x180>)
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	2b65      	cmp	r3, #101	; 0x65
 80020ce:	d10a      	bne.n	80020e6 <USAR_UART_IDLECallback+0xaa>
 80020d0:	7b3b      	ldrb	r3, [r7, #12]
 80020d2:	3301      	adds	r3, #1
 80020d4:	4a39      	ldr	r2, [pc, #228]	; (80021bc <USAR_UART_IDLECallback+0x180>)
 80020d6:	5cd3      	ldrb	r3, [r2, r3]
 80020d8:	2b66      	cmp	r3, #102	; 0x66
 80020da:	d104      	bne.n	80020e6 <USAR_UART_IDLECallback+0xaa>
				end = j - 1;
 80020dc:	7b3b      	ldrb	r3, [r7, #12]
 80020de:	3b01      	subs	r3, #1
 80020e0:	73bb      	strb	r3, [r7, #14]
				isStart = 2;
 80020e2:	2302      	movs	r3, #2
 80020e4:	737b      	strb	r3, [r7, #13]
	for (uint8_t j = 0; j < 32; j++) {
 80020e6:	7b3b      	ldrb	r3, [r7, #12]
 80020e8:	3301      	adds	r3, #1
 80020ea:	733b      	strb	r3, [r7, #12]
 80020ec:	7b3b      	ldrb	r3, [r7, #12]
 80020ee:	2b1f      	cmp	r3, #31
 80020f0:	d9bb      	bls.n	800206a <USAR_UART_IDLECallback+0x2e>
			}
		}
	}
	if (isStart == 2) {
 80020f2:	7b7b      	ldrb	r3, [r7, #13]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d14b      	bne.n	8002190 <USAR_UART_IDLECallback+0x154>
//				printf("%x\r\n", receive_buff[j]);
//			} else {
//				printf("%x ", receive_buff[j]);
//			}
//		}
		coordinate_XY[i][0] = asc2int(receive_buff[start],
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	4a30      	ldr	r2, [pc, #192]	; (80021bc <USAR_UART_IDLECallback+0x180>)
 80020fc:	5cd0      	ldrb	r0, [r2, r3]
				receive_buff[start + 1], receive_buff[start + 2]);
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	3301      	adds	r3, #1
		coordinate_XY[i][0] = asc2int(receive_buff[start],
 8002102:	4a2e      	ldr	r2, [pc, #184]	; (80021bc <USAR_UART_IDLECallback+0x180>)
 8002104:	5cd1      	ldrb	r1, [r2, r3]
				receive_buff[start + 1], receive_buff[start + 2]);
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	3302      	adds	r3, #2
		coordinate_XY[i][0] = asc2int(receive_buff[start],
 800210a:	4a2c      	ldr	r2, [pc, #176]	; (80021bc <USAR_UART_IDLECallback+0x180>)
 800210c:	5cd3      	ldrb	r3, [r2, r3]
 800210e:	4a2c      	ldr	r2, [pc, #176]	; (80021c0 <USAR_UART_IDLECallback+0x184>)
 8002110:	7812      	ldrb	r2, [r2, #0]
 8002112:	4614      	mov	r4, r2
 8002114:	461a      	mov	r2, r3
 8002116:	f7ff ff63 	bl	8001fe0 <asc2int>
 800211a:	4603      	mov	r3, r0
 800211c:	461a      	mov	r2, r3
 800211e:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <USAR_UART_IDLECallback+0x188>)
 8002120:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
		coordinate_XY[i][1] = asc2int(receive_buff[end - 2],
 8002124:	7bbb      	ldrb	r3, [r7, #14]
 8002126:	3b02      	subs	r3, #2
 8002128:	4a24      	ldr	r2, [pc, #144]	; (80021bc <USAR_UART_IDLECallback+0x180>)
 800212a:	5cd0      	ldrb	r0, [r2, r3]
				receive_buff[end - 1], receive_buff[end]);
 800212c:	7bbb      	ldrb	r3, [r7, #14]
 800212e:	3b01      	subs	r3, #1
		coordinate_XY[i][1] = asc2int(receive_buff[end - 2],
 8002130:	4a22      	ldr	r2, [pc, #136]	; (80021bc <USAR_UART_IDLECallback+0x180>)
 8002132:	5cd1      	ldrb	r1, [r2, r3]
 8002134:	7bbb      	ldrb	r3, [r7, #14]
 8002136:	4a21      	ldr	r2, [pc, #132]	; (80021bc <USAR_UART_IDLECallback+0x180>)
 8002138:	5cd3      	ldrb	r3, [r2, r3]
 800213a:	4a21      	ldr	r2, [pc, #132]	; (80021c0 <USAR_UART_IDLECallback+0x184>)
 800213c:	7812      	ldrb	r2, [r2, #0]
 800213e:	4614      	mov	r4, r2
 8002140:	461a      	mov	r2, r3
 8002142:	f7ff ff4d 	bl	8001fe0 <asc2int>
 8002146:	4603      	mov	r3, r0
 8002148:	4619      	mov	r1, r3
 800214a:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <USAR_UART_IDLECallback+0x188>)
 800214c:	00a3      	lsls	r3, r4, #2
 800214e:	4413      	add	r3, r2
 8002150:	460a      	mov	r2, r1
 8002152:	805a      	strh	r2, [r3, #2]

		printf("%d %d\r\n", coordinate_XY[i][0], coordinate_XY[i][1]);//此段为转发生产的坐标
 8002154:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <USAR_UART_IDLECallback+0x184>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <USAR_UART_IDLECallback+0x188>)
 800215c:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8002160:	4619      	mov	r1, r3
 8002162:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <USAR_UART_IDLECallback+0x184>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	4a17      	ldr	r2, [pc, #92]	; (80021c4 <USAR_UART_IDLECallback+0x188>)
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	885b      	ldrh	r3, [r3, #2]
 800216e:	461a      	mov	r2, r3
 8002170:	4815      	ldr	r0, [pc, #84]	; (80021c8 <USAR_UART_IDLECallback+0x18c>)
 8002172:	f003 fd3f 	bl	8005bf4 <iprintf>

		i++;
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <USAR_UART_IDLECallback+0x184>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <USAR_UART_IDLECallback+0x184>)
 8002180:	701a      	strb	r2, [r3, #0]
		if (i >= 31) {
 8002182:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <USAR_UART_IDLECallback+0x184>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b1e      	cmp	r3, #30
 8002188:	d902      	bls.n	8002190 <USAR_UART_IDLECallback+0x154>
			i = 0;
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <USAR_UART_IDLECallback+0x184>)
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
		}
	}

// 清零接收缓冲区
	memset(receive_buff, 0, data_length);
 8002190:	7afb      	ldrb	r3, [r7, #11]
 8002192:	461a      	mov	r2, r3
 8002194:	2100      	movs	r1, #0
 8002196:	4809      	ldr	r0, [pc, #36]	; (80021bc <USAR_UART_IDLECallback+0x180>)
 8002198:	f003 fd24 	bl	8005be4 <memset>
	data_length = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	72fb      	strb	r3, [r7, #11]

// 重启开始DMA传输 每次255字节数据
	HAL_UART_Receive_DMA(&huart1, (uint8_t*) receive_buff, 32);
 80021a0:	2220      	movs	r2, #32
 80021a2:	4906      	ldr	r1, [pc, #24]	; (80021bc <USAR_UART_IDLECallback+0x180>)
 80021a4:	4803      	ldr	r0, [pc, #12]	; (80021b4 <USAR_UART_IDLECallback+0x178>)
 80021a6:	f002 fe3c 	bl	8004e22 <HAL_UART_Receive_DMA>
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd90      	pop	{r4, r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200008e4 	.word	0x200008e4
 80021b8:	20000884 	.word	0x20000884
 80021bc:	20000094 	.word	0x20000094
 80021c0:	20000134 	.word	0x20000134
 80021c4:	200000b4 	.word	0x200000b4
 80021c8:	08006b3c 	.word	0x08006b3c

080021cc <USER_UART_IRQHandler>:

void USER_UART_IRQHandler(UART_HandleTypeDef *huart) {	// 判断是否是串口1
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
//	printf("\r\n进入中断函数.....\r\n");
	if (USART1 == huart->Instance) {	// 判断是否是空闲中断
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0d      	ldr	r2, [pc, #52]	; (8002210 <USER_UART_IRQHandler+0x44>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d114      	bne.n	8002208 <USER_UART_IRQHandler+0x3c>
		if (RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {// 清除空闲中断标志（否则会一直不断进入中断）
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <USER_UART_IRQHandler+0x48>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b10      	cmp	r3, #16
 80021ea:	d10d      	bne.n	8002208 <USER_UART_IRQHandler+0x3c>
			__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <USER_UART_IRQHandler+0x48>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <USER_UART_IRQHandler+0x48>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
//			printf("\r\nUART1 Idle IQR Detected\r\n");
			// 调用中断处理函数
			USAR_UART_IDLECallback(huart);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ff1a 	bl	800203c <USAR_UART_IDLECallback>
		}
	}
}
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40011000 	.word	0x40011000
 8002214:	200008e4 	.word	0x200008e4

08002218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002250 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800221c:	480d      	ldr	r0, [pc, #52]	; (8002254 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800221e:	490e      	ldr	r1, [pc, #56]	; (8002258 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002220:	4a0e      	ldr	r2, [pc, #56]	; (800225c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002224:	e002      	b.n	800222c <LoopCopyDataInit>

08002226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222a:	3304      	adds	r3, #4

0800222c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800222c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002230:	d3f9      	bcc.n	8002226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002234:	4c0b      	ldr	r4, [pc, #44]	; (8002264 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002238:	e001      	b.n	800223e <LoopFillZerobss>

0800223a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800223c:	3204      	adds	r2, #4

0800223e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002240:	d3fb      	bcc.n	800223a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002242:	f7ff f88f 	bl	8001364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002246:	f003 fc8f 	bl	8005b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800224a:	f7fe fb93 	bl	8000974 <main>
  bx  lr    
 800224e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002258:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800225c:	08007f80 	.word	0x08007f80
  ldr r2, =_sbss
 8002260:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002264:	20000980 	.word	0x20000980

08002268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002268:	e7fe      	b.n	8002268 <ADC_IRQHandler>
	...

0800226c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002270:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <HAL_Init+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0d      	ldr	r2, [pc, #52]	; (80022ac <HAL_Init+0x40>)
 8002276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800227a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_Init+0x40>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <HAL_Init+0x40>)
 8002282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <HAL_Init+0x40>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a07      	ldr	r2, [pc, #28]	; (80022ac <HAL_Init+0x40>)
 800228e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002294:	2003      	movs	r0, #3
 8002296:	f000 f94f 	bl	8002538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800229a:	2000      	movs	r0, #0
 800229c:	f000 f808 	bl	80022b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a0:	f7fe ff54 	bl	800114c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023c00 	.word	0x40023c00

080022b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_InitTick+0x54>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_InitTick+0x58>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f967 	bl	80025a2 <HAL_SYSTICK_Config>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e00e      	b.n	80022fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b0f      	cmp	r3, #15
 80022e2:	d80a      	bhi.n	80022fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e4:	2200      	movs	r2, #0
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	f000 f92f 	bl	800254e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f0:	4a06      	ldr	r2, [pc, #24]	; (800230c <HAL_InitTick+0x5c>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e000      	b.n	80022fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000008 	.word	0x20000008
 8002308:	20000010 	.word	0x20000010
 800230c:	2000000c 	.word	0x2000000c

08002310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_IncTick+0x20>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_IncTick+0x24>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4413      	add	r3, r2
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <HAL_IncTick+0x24>)
 8002322:	6013      	str	r3, [r2, #0]
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000010 	.word	0x20000010
 8002334:	2000096c 	.word	0x2000096c

08002338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return uwTick;
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_GetTick+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	2000096c 	.word	0x2000096c

08002350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff ffee 	bl	8002338 <HAL_GetTick>
 800235c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d005      	beq.n	8002376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_Delay+0x44>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4413      	add	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002376:	bf00      	nop
 8002378:	f7ff ffde 	bl	8002338 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	429a      	cmp	r2, r3
 8002386:	d8f7      	bhi.n	8002378 <HAL_Delay+0x28>
  {
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000010 	.word	0x20000010

08002398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023b4:	4013      	ands	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ca:	4a04      	ldr	r2, [pc, #16]	; (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	60d3      	str	r3, [r2, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <__NVIC_GetPriorityGrouping+0x18>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	f003 0307 	and.w	r3, r3, #7
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	2b00      	cmp	r3, #0
 800240c:	db0b      	blt.n	8002426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f003 021f 	and.w	r2, r3, #31
 8002414:	4907      	ldr	r1, [pc, #28]	; (8002434 <__NVIC_EnableIRQ+0x38>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	2001      	movs	r0, #1
 800241e:	fa00 f202 	lsl.w	r2, r0, r2
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000e100 	.word	0xe000e100

08002438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	2b00      	cmp	r3, #0
 800244a:	db0a      	blt.n	8002462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	490c      	ldr	r1, [pc, #48]	; (8002484 <__NVIC_SetPriority+0x4c>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	0112      	lsls	r2, r2, #4
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	440b      	add	r3, r1
 800245c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002460:	e00a      	b.n	8002478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4908      	ldr	r1, [pc, #32]	; (8002488 <__NVIC_SetPriority+0x50>)
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	3b04      	subs	r3, #4
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	440b      	add	r3, r1
 8002476:	761a      	strb	r2, [r3, #24]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000e100 	.word	0xe000e100
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f1c3 0307 	rsb	r3, r3, #7
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	bf28      	it	cs
 80024aa:	2304      	movcs	r3, #4
 80024ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2b06      	cmp	r3, #6
 80024b4:	d902      	bls.n	80024bc <NVIC_EncodePriority+0x30>
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3b03      	subs	r3, #3
 80024ba:	e000      	b.n	80024be <NVIC_EncodePriority+0x32>
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	f04f 32ff 	mov.w	r2, #4294967295
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43da      	mvns	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	401a      	ands	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	43d9      	mvns	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	4313      	orrs	r3, r2
         );
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3724      	adds	r7, #36	; 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002504:	d301      	bcc.n	800250a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002506:	2301      	movs	r3, #1
 8002508:	e00f      	b.n	800252a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <SysTick_Config+0x40>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002512:	210f      	movs	r1, #15
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f7ff ff8e 	bl	8002438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <SysTick_Config+0x40>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002522:	4b04      	ldr	r3, [pc, #16]	; (8002534 <SysTick_Config+0x40>)
 8002524:	2207      	movs	r2, #7
 8002526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	e000e010 	.word	0xe000e010

08002538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff29 	bl	8002398 <__NVIC_SetPriorityGrouping>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002560:	f7ff ff3e 	bl	80023e0 <__NVIC_GetPriorityGrouping>
 8002564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f7ff ff8e 	bl	800248c <NVIC_EncodePriority>
 8002570:	4602      	mov	r2, r0
 8002572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff5d 	bl	8002438 <__NVIC_SetPriority>
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	4603      	mov	r3, r0
 800258e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff31 	bl	80023fc <__NVIC_EnableIRQ>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ffa2 	bl	80024f4 <SysTick_Config>
 80025b0:	4603      	mov	r3, r0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff feb6 	bl	8002338 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e099      	b.n	800270c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f8:	e00f      	b.n	800261a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025fa:	f7ff fe9d 	bl	8002338 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b05      	cmp	r3, #5
 8002606:	d908      	bls.n	800261a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2203      	movs	r2, #3
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e078      	b.n	800270c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1e8      	bne.n	80025fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	4b38      	ldr	r3, [pc, #224]	; (8002714 <HAL_DMA_Init+0x158>)
 8002634:	4013      	ands	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002646:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002652:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	2b04      	cmp	r3, #4
 8002672:	d107      	bne.n	8002684 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	4313      	orrs	r3, r2
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f023 0307 	bic.w	r3, r3, #7
 800269a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d117      	bne.n	80026de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00e      	beq.n	80026de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fb01 	bl	8002cc8 <DMA_CheckFifoParam>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2240      	movs	r2, #64	; 0x40
 80026d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026da:	2301      	movs	r3, #1
 80026dc:	e016      	b.n	800270c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fab8 	bl	8002c5c <DMA_CalcBaseAndBitshift>
 80026ec:	4603      	mov	r3, r0
 80026ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	223f      	movs	r2, #63	; 0x3f
 80026f6:	409a      	lsls	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	f010803f 	.word	0xf010803f

08002718 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_DMA_Start_IT+0x26>
 800273a:	2302      	movs	r3, #2
 800273c:	e040      	b.n	80027c0 <HAL_DMA_Start_IT+0xa8>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b01      	cmp	r3, #1
 8002750:	d12f      	bne.n	80027b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2202      	movs	r2, #2
 8002756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fa4a 	bl	8002c00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	223f      	movs	r2, #63	; 0x3f
 8002772:	409a      	lsls	r2, r3
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0216 	orr.w	r2, r2, #22
 8002786:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0208 	orr.w	r2, r2, #8
 800279e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e005      	b.n	80027be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027ba:	2302      	movs	r3, #2
 80027bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027be:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027d6:	f7ff fdaf 	bl	8002338 <HAL_GetTick>
 80027da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d008      	beq.n	80027fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2280      	movs	r2, #128	; 0x80
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e052      	b.n	80028a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0216 	bic.w	r2, r2, #22
 8002808:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002818:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d103      	bne.n	800282a <HAL_DMA_Abort+0x62>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002826:	2b00      	cmp	r3, #0
 8002828:	d007      	beq.n	800283a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0208 	bic.w	r2, r2, #8
 8002838:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800284a:	e013      	b.n	8002874 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800284c:	f7ff fd74 	bl	8002338 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b05      	cmp	r3, #5
 8002858:	d90c      	bls.n	8002874 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2220      	movs	r2, #32
 800285e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2203      	movs	r2, #3
 800286c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e015      	b.n	80028a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1e4      	bne.n	800284c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002886:	223f      	movs	r2, #63	; 0x3f
 8002888:	409a      	lsls	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d004      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2280      	movs	r2, #128	; 0x80
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00c      	b.n	80028e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2205      	movs	r2, #5
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028f8:	4b92      	ldr	r3, [pc, #584]	; (8002b44 <HAL_DMA_IRQHandler+0x258>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a92      	ldr	r2, [pc, #584]	; (8002b48 <HAL_DMA_IRQHandler+0x25c>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	0a9b      	lsrs	r3, r3, #10
 8002904:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	2208      	movs	r2, #8
 8002918:	409a      	lsls	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d01a      	beq.n	8002958 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d013      	beq.n	8002958 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0204 	bic.w	r2, r2, #4
 800293e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	2208      	movs	r2, #8
 8002946:	409a      	lsls	r2, r3
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002950:	f043 0201 	orr.w	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295c:	2201      	movs	r2, #1
 800295e:	409a      	lsls	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d012      	beq.n	800298e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	2201      	movs	r2, #1
 800297c:	409a      	lsls	r2, r3
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002986:	f043 0202 	orr.w	r2, r3, #2
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002992:	2204      	movs	r2, #4
 8002994:	409a      	lsls	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d012      	beq.n	80029c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	2204      	movs	r2, #4
 80029b2:	409a      	lsls	r2, r3
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	f043 0204 	orr.w	r2, r3, #4
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c8:	2210      	movs	r2, #16
 80029ca:	409a      	lsls	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d043      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d03c      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e6:	2210      	movs	r2, #16
 80029e8:	409a      	lsls	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d018      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d108      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d024      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
 8002a1a:	e01f      	b.n	8002a5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01b      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
 8002a2c:	e016      	b.n	8002a5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0208 	bic.w	r2, r2, #8
 8002a4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a60:	2220      	movs	r2, #32
 8002a62:	409a      	lsls	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 808e 	beq.w	8002b8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 8086 	beq.w	8002b8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	2220      	movs	r2, #32
 8002a84:	409a      	lsls	r2, r3
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d136      	bne.n	8002b04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0216 	bic.w	r2, r2, #22
 8002aa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d103      	bne.n	8002ac6 <HAL_DMA_IRQHandler+0x1da>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d007      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0208 	bic.w	r2, r2, #8
 8002ad4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ada:	223f      	movs	r2, #63	; 0x3f
 8002adc:	409a      	lsls	r2, r3
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d07d      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4798      	blx	r3
        }
        return;
 8002b02:	e078      	b.n	8002bf6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d01c      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d108      	bne.n	8002b32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d030      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	4798      	blx	r3
 8002b30:	e02b      	b.n	8002b8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d027      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	4798      	blx	r3
 8002b42:	e022      	b.n	8002b8a <HAL_DMA_IRQHandler+0x29e>
 8002b44:	20000008 	.word	0x20000008
 8002b48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10f      	bne.n	8002b7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0210 	bic.w	r2, r2, #16
 8002b68:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d032      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d022      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2205      	movs	r2, #5
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0201 	bic.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d307      	bcc.n	8002bd2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f2      	bne.n	8002bb6 <HAL_DMA_IRQHandler+0x2ca>
 8002bd0:	e000      	b.n	8002bd4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002bd2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	4798      	blx	r3
 8002bf4:	e000      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002bf6:	bf00      	nop
    }
  }
}
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop

08002c00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b40      	cmp	r3, #64	; 0x40
 8002c2c:	d108      	bne.n	8002c40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c3e:	e007      	b.n	8002c50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	60da      	str	r2, [r3, #12]
}
 8002c50:	bf00      	nop
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	3b10      	subs	r3, #16
 8002c6c:	4a14      	ldr	r2, [pc, #80]	; (8002cc0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c76:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d909      	bls.n	8002c9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c92:	f023 0303 	bic.w	r3, r3, #3
 8002c96:	1d1a      	adds	r2, r3, #4
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c9c:	e007      	b.n	8002cae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ca6:	f023 0303 	bic.w	r3, r3, #3
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	aaaaaaab 	.word	0xaaaaaaab
 8002cc4:	08007ea8 	.word	0x08007ea8

08002cc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d11f      	bne.n	8002d22 <DMA_CheckFifoParam+0x5a>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d856      	bhi.n	8002d96 <DMA_CheckFifoParam+0xce>
 8002ce8:	a201      	add	r2, pc, #4	; (adr r2, 8002cf0 <DMA_CheckFifoParam+0x28>)
 8002cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cee:	bf00      	nop
 8002cf0:	08002d01 	.word	0x08002d01
 8002cf4:	08002d13 	.word	0x08002d13
 8002cf8:	08002d01 	.word	0x08002d01
 8002cfc:	08002d97 	.word	0x08002d97
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d046      	beq.n	8002d9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d10:	e043      	b.n	8002d9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d1a:	d140      	bne.n	8002d9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d20:	e03d      	b.n	8002d9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2a:	d121      	bne.n	8002d70 <DMA_CheckFifoParam+0xa8>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d837      	bhi.n	8002da2 <DMA_CheckFifoParam+0xda>
 8002d32:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <DMA_CheckFifoParam+0x70>)
 8002d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d38:	08002d49 	.word	0x08002d49
 8002d3c:	08002d4f 	.word	0x08002d4f
 8002d40:	08002d49 	.word	0x08002d49
 8002d44:	08002d61 	.word	0x08002d61
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d4c:	e030      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d025      	beq.n	8002da6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d5e:	e022      	b.n	8002da6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d68:	d11f      	bne.n	8002daa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d6e:	e01c      	b.n	8002daa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d903      	bls.n	8002d7e <DMA_CheckFifoParam+0xb6>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d003      	beq.n	8002d84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d7c:	e018      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
      break;
 8002d82:	e015      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00e      	beq.n	8002dae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
      break;
 8002d94:	e00b      	b.n	8002dae <DMA_CheckFifoParam+0xe6>
      break;
 8002d96:	bf00      	nop
 8002d98:	e00a      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002d9a:	bf00      	nop
 8002d9c:	e008      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002d9e:	bf00      	nop
 8002da0:	e006      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002da2:	bf00      	nop
 8002da4:	e004      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002da6:	bf00      	nop
 8002da8:	e002      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002daa:	bf00      	nop
 8002dac:	e000      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dae:	bf00      	nop
    }
  } 
  
  return status; 
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop

08002dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b089      	sub	sp, #36	; 0x24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	e16b      	b.n	80030b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ddc:	2201      	movs	r2, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4013      	ands	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	f040 815a 	bne.w	80030ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d005      	beq.n	8002e12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d130      	bne.n	8002e74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e48:	2201      	movs	r2, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 0201 	and.w	r2, r3, #1
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d017      	beq.n	8002eb0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d123      	bne.n	8002f04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	08da      	lsrs	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3208      	adds	r2, #8
 8002ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	220f      	movs	r2, #15
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	08da      	lsrs	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3208      	adds	r2, #8
 8002efe:	69b9      	ldr	r1, [r7, #24]
 8002f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	2203      	movs	r2, #3
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0203 	and.w	r2, r3, #3
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80b4 	beq.w	80030ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	4b60      	ldr	r3, [pc, #384]	; (80030cc <HAL_GPIO_Init+0x30c>)
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	4a5f      	ldr	r2, [pc, #380]	; (80030cc <HAL_GPIO_Init+0x30c>)
 8002f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f54:	6453      	str	r3, [r2, #68]	; 0x44
 8002f56:	4b5d      	ldr	r3, [pc, #372]	; (80030cc <HAL_GPIO_Init+0x30c>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f62:	4a5b      	ldr	r2, [pc, #364]	; (80030d0 <HAL_GPIO_Init+0x310>)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	089b      	lsrs	r3, r3, #2
 8002f68:	3302      	adds	r3, #2
 8002f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	220f      	movs	r2, #15
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a52      	ldr	r2, [pc, #328]	; (80030d4 <HAL_GPIO_Init+0x314>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d02b      	beq.n	8002fe6 <HAL_GPIO_Init+0x226>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a51      	ldr	r2, [pc, #324]	; (80030d8 <HAL_GPIO_Init+0x318>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d025      	beq.n	8002fe2 <HAL_GPIO_Init+0x222>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a50      	ldr	r2, [pc, #320]	; (80030dc <HAL_GPIO_Init+0x31c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01f      	beq.n	8002fde <HAL_GPIO_Init+0x21e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4f      	ldr	r2, [pc, #316]	; (80030e0 <HAL_GPIO_Init+0x320>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d019      	beq.n	8002fda <HAL_GPIO_Init+0x21a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a4e      	ldr	r2, [pc, #312]	; (80030e4 <HAL_GPIO_Init+0x324>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <HAL_GPIO_Init+0x216>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a4d      	ldr	r2, [pc, #308]	; (80030e8 <HAL_GPIO_Init+0x328>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00d      	beq.n	8002fd2 <HAL_GPIO_Init+0x212>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a4c      	ldr	r2, [pc, #304]	; (80030ec <HAL_GPIO_Init+0x32c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d007      	beq.n	8002fce <HAL_GPIO_Init+0x20e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a4b      	ldr	r2, [pc, #300]	; (80030f0 <HAL_GPIO_Init+0x330>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d101      	bne.n	8002fca <HAL_GPIO_Init+0x20a>
 8002fc6:	2307      	movs	r3, #7
 8002fc8:	e00e      	b.n	8002fe8 <HAL_GPIO_Init+0x228>
 8002fca:	2308      	movs	r3, #8
 8002fcc:	e00c      	b.n	8002fe8 <HAL_GPIO_Init+0x228>
 8002fce:	2306      	movs	r3, #6
 8002fd0:	e00a      	b.n	8002fe8 <HAL_GPIO_Init+0x228>
 8002fd2:	2305      	movs	r3, #5
 8002fd4:	e008      	b.n	8002fe8 <HAL_GPIO_Init+0x228>
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	e006      	b.n	8002fe8 <HAL_GPIO_Init+0x228>
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e004      	b.n	8002fe8 <HAL_GPIO_Init+0x228>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e002      	b.n	8002fe8 <HAL_GPIO_Init+0x228>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_GPIO_Init+0x228>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	f002 0203 	and.w	r2, r2, #3
 8002fee:	0092      	lsls	r2, r2, #2
 8002ff0:	4093      	lsls	r3, r2
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ff8:	4935      	ldr	r1, [pc, #212]	; (80030d0 <HAL_GPIO_Init+0x310>)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	089b      	lsrs	r3, r3, #2
 8002ffe:	3302      	adds	r3, #2
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003006:	4b3b      	ldr	r3, [pc, #236]	; (80030f4 <HAL_GPIO_Init+0x334>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800302a:	4a32      	ldr	r2, [pc, #200]	; (80030f4 <HAL_GPIO_Init+0x334>)
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003030:	4b30      	ldr	r3, [pc, #192]	; (80030f4 <HAL_GPIO_Init+0x334>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003054:	4a27      	ldr	r2, [pc, #156]	; (80030f4 <HAL_GPIO_Init+0x334>)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800305a:	4b26      	ldr	r3, [pc, #152]	; (80030f4 <HAL_GPIO_Init+0x334>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800307e:	4a1d      	ldr	r2, [pc, #116]	; (80030f4 <HAL_GPIO_Init+0x334>)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003084:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <HAL_GPIO_Init+0x334>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030a8:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <HAL_GPIO_Init+0x334>)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3301      	adds	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b0f      	cmp	r3, #15
 80030b8:	f67f ae90 	bls.w	8002ddc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	3724      	adds	r7, #36	; 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40013800 	.word	0x40013800
 80030d4:	40020000 	.word	0x40020000
 80030d8:	40020400 	.word	0x40020400
 80030dc:	40020800 	.word	0x40020800
 80030e0:	40020c00 	.word	0x40020c00
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40021400 	.word	0x40021400
 80030ec:	40021800 	.word	0x40021800
 80030f0:	40021c00 	.word	0x40021c00
 80030f4:	40013c00 	.word	0x40013c00

080030f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	807b      	strh	r3, [r7, #2]
 8003104:	4613      	mov	r3, r2
 8003106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003108:	787b      	ldrb	r3, [r7, #1]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800310e:	887a      	ldrh	r2, [r7, #2]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003114:	e003      	b.n	800311e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003116:	887b      	ldrh	r3, [r7, #2]
 8003118:	041a      	lsls	r2, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	619a      	str	r2, [r3, #24]
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e12b      	b.n	8003396 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd fb90 	bl	8000878 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2224      	movs	r2, #36	; 0x24
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0201 	bic.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800317e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800318e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003190:	f000 fd5c 	bl	8003c4c <HAL_RCC_GetPCLK1Freq>
 8003194:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4a81      	ldr	r2, [pc, #516]	; (80033a0 <HAL_I2C_Init+0x274>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d807      	bhi.n	80031b0 <HAL_I2C_Init+0x84>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4a80      	ldr	r2, [pc, #512]	; (80033a4 <HAL_I2C_Init+0x278>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	bf94      	ite	ls
 80031a8:	2301      	movls	r3, #1
 80031aa:	2300      	movhi	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	e006      	b.n	80031be <HAL_I2C_Init+0x92>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4a7d      	ldr	r2, [pc, #500]	; (80033a8 <HAL_I2C_Init+0x27c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	bf94      	ite	ls
 80031b8:	2301      	movls	r3, #1
 80031ba:	2300      	movhi	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e0e7      	b.n	8003396 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4a78      	ldr	r2, [pc, #480]	; (80033ac <HAL_I2C_Init+0x280>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	0c9b      	lsrs	r3, r3, #18
 80031d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4a6a      	ldr	r2, [pc, #424]	; (80033a0 <HAL_I2C_Init+0x274>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d802      	bhi.n	8003200 <HAL_I2C_Init+0xd4>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	3301      	adds	r3, #1
 80031fe:	e009      	b.n	8003214 <HAL_I2C_Init+0xe8>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	4a69      	ldr	r2, [pc, #420]	; (80033b0 <HAL_I2C_Init+0x284>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	099b      	lsrs	r3, r3, #6
 8003212:	3301      	adds	r3, #1
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	430b      	orrs	r3, r1
 800321a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003226:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	495c      	ldr	r1, [pc, #368]	; (80033a0 <HAL_I2C_Init+0x274>)
 8003230:	428b      	cmp	r3, r1
 8003232:	d819      	bhi.n	8003268 <HAL_I2C_Init+0x13c>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1e59      	subs	r1, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003242:	1c59      	adds	r1, r3, #1
 8003244:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003248:	400b      	ands	r3, r1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <HAL_I2C_Init+0x138>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1e59      	subs	r1, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	fbb1 f3f3 	udiv	r3, r1, r3
 800325c:	3301      	adds	r3, #1
 800325e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003262:	e051      	b.n	8003308 <HAL_I2C_Init+0x1dc>
 8003264:	2304      	movs	r3, #4
 8003266:	e04f      	b.n	8003308 <HAL_I2C_Init+0x1dc>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d111      	bne.n	8003294 <HAL_I2C_Init+0x168>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	1e58      	subs	r0, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	440b      	add	r3, r1
 800327e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003282:	3301      	adds	r3, #1
 8003284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003288:	2b00      	cmp	r3, #0
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	e012      	b.n	80032ba <HAL_I2C_Init+0x18e>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1e58      	subs	r0, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	0099      	lsls	r1, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032aa:	3301      	adds	r3, #1
 80032ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf0c      	ite	eq
 80032b4:	2301      	moveq	r3, #1
 80032b6:	2300      	movne	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Init+0x196>
 80032be:	2301      	movs	r3, #1
 80032c0:	e022      	b.n	8003308 <HAL_I2C_Init+0x1dc>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10e      	bne.n	80032e8 <HAL_I2C_Init+0x1bc>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1e58      	subs	r0, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6859      	ldr	r1, [r3, #4]
 80032d2:	460b      	mov	r3, r1
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	440b      	add	r3, r1
 80032d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80032dc:	3301      	adds	r3, #1
 80032de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032e6:	e00f      	b.n	8003308 <HAL_I2C_Init+0x1dc>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1e58      	subs	r0, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	0099      	lsls	r1, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032fe:	3301      	adds	r3, #1
 8003300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003304:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	6809      	ldr	r1, [r1, #0]
 800330c:	4313      	orrs	r3, r2
 800330e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69da      	ldr	r2, [r3, #28]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003336:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6911      	ldr	r1, [r2, #16]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68d2      	ldr	r2, [r2, #12]
 8003342:	4311      	orrs	r1, r2
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	430b      	orrs	r3, r1
 800334a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695a      	ldr	r2, [r3, #20]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	000186a0 	.word	0x000186a0
 80033a4:	001e847f 	.word	0x001e847f
 80033a8:	003d08ff 	.word	0x003d08ff
 80033ac:	431bde83 	.word	0x431bde83
 80033b0:	10624dd3 	.word	0x10624dd3

080033b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e264      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d075      	beq.n	80034be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033d2:	4ba3      	ldr	r3, [pc, #652]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d00c      	beq.n	80033f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033de:	4ba0      	ldr	r3, [pc, #640]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d112      	bne.n	8003410 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ea:	4b9d      	ldr	r3, [pc, #628]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f6:	d10b      	bne.n	8003410 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f8:	4b99      	ldr	r3, [pc, #612]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d05b      	beq.n	80034bc <HAL_RCC_OscConfig+0x108>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d157      	bne.n	80034bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e23f      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003418:	d106      	bne.n	8003428 <HAL_RCC_OscConfig+0x74>
 800341a:	4b91      	ldr	r3, [pc, #580]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a90      	ldr	r2, [pc, #576]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e01d      	b.n	8003464 <HAL_RCC_OscConfig+0xb0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0x98>
 8003432:	4b8b      	ldr	r3, [pc, #556]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a8a      	ldr	r2, [pc, #552]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b88      	ldr	r3, [pc, #544]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a87      	ldr	r2, [pc, #540]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e00b      	b.n	8003464 <HAL_RCC_OscConfig+0xb0>
 800344c:	4b84      	ldr	r3, [pc, #528]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a83      	ldr	r2, [pc, #524]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	4b81      	ldr	r3, [pc, #516]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a80      	ldr	r2, [pc, #512]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 800345e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d013      	beq.n	8003494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe ff64 	bl	8002338 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003474:	f7fe ff60 	bl	8002338 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e204      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003486:	4b76      	ldr	r3, [pc, #472]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0xc0>
 8003492:	e014      	b.n	80034be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fe ff50 	bl	8002338 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800349c:	f7fe ff4c 	bl	8002338 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	; 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e1f0      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ae:	4b6c      	ldr	r3, [pc, #432]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0xe8>
 80034ba:	e000      	b.n	80034be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d063      	beq.n	8003592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ca:	4b65      	ldr	r3, [pc, #404]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00b      	beq.n	80034ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d6:	4b62      	ldr	r3, [pc, #392]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d11c      	bne.n	800351c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e2:	4b5f      	ldr	r3, [pc, #380]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d116      	bne.n	800351c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ee:	4b5c      	ldr	r3, [pc, #368]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d005      	beq.n	8003506 <HAL_RCC_OscConfig+0x152>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d001      	beq.n	8003506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e1c4      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003506:	4b56      	ldr	r3, [pc, #344]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4952      	ldr	r1, [pc, #328]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003516:	4313      	orrs	r3, r2
 8003518:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351a:	e03a      	b.n	8003592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d020      	beq.n	8003566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003524:	4b4f      	ldr	r3, [pc, #316]	; (8003664 <HAL_RCC_OscConfig+0x2b0>)
 8003526:	2201      	movs	r2, #1
 8003528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7fe ff05 	bl	8002338 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003532:	f7fe ff01 	bl	8002338 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e1a5      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003544:	4b46      	ldr	r3, [pc, #280]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003550:	4b43      	ldr	r3, [pc, #268]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	4940      	ldr	r1, [pc, #256]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003560:	4313      	orrs	r3, r2
 8003562:	600b      	str	r3, [r1, #0]
 8003564:	e015      	b.n	8003592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003566:	4b3f      	ldr	r3, [pc, #252]	; (8003664 <HAL_RCC_OscConfig+0x2b0>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fe fee4 	bl	8002338 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003574:	f7fe fee0 	bl	8002338 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e184      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003586:	4b36      	ldr	r3, [pc, #216]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d030      	beq.n	8003600 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d016      	beq.n	80035d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035a6:	4b30      	ldr	r3, [pc, #192]	; (8003668 <HAL_RCC_OscConfig+0x2b4>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ac:	f7fe fec4 	bl	8002338 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b4:	f7fe fec0 	bl	8002338 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e164      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c6:	4b26      	ldr	r3, [pc, #152]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0x200>
 80035d2:	e015      	b.n	8003600 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d4:	4b24      	ldr	r3, [pc, #144]	; (8003668 <HAL_RCC_OscConfig+0x2b4>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035da:	f7fe fead 	bl	8002338 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e2:	f7fe fea9 	bl	8002338 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e14d      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80035f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f0      	bne.n	80035e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80a0 	beq.w	800374e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360e:	2300      	movs	r3, #0
 8003610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003612:	4b13      	ldr	r3, [pc, #76]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10f      	bne.n	800363e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	4a0e      	ldr	r2, [pc, #56]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362c:	6413      	str	r3, [r2, #64]	; 0x40
 800362e:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363a:	2301      	movs	r3, #1
 800363c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363e:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_OscConfig+0x2b8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d121      	bne.n	800368e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364a:	4b08      	ldr	r3, [pc, #32]	; (800366c <HAL_RCC_OscConfig+0x2b8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a07      	ldr	r2, [pc, #28]	; (800366c <HAL_RCC_OscConfig+0x2b8>)
 8003650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003656:	f7fe fe6f 	bl	8002338 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365c:	e011      	b.n	8003682 <HAL_RCC_OscConfig+0x2ce>
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	42470000 	.word	0x42470000
 8003668:	42470e80 	.word	0x42470e80
 800366c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003670:	f7fe fe62 	bl	8002338 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e106      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003682:	4b85      	ldr	r3, [pc, #532]	; (8003898 <HAL_RCC_OscConfig+0x4e4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d106      	bne.n	80036a4 <HAL_RCC_OscConfig+0x2f0>
 8003696:	4b81      	ldr	r3, [pc, #516]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	4a80      	ldr	r2, [pc, #512]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6713      	str	r3, [r2, #112]	; 0x70
 80036a2:	e01c      	b.n	80036de <HAL_RCC_OscConfig+0x32a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b05      	cmp	r3, #5
 80036aa:	d10c      	bne.n	80036c6 <HAL_RCC_OscConfig+0x312>
 80036ac:	4b7b      	ldr	r3, [pc, #492]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b0:	4a7a      	ldr	r2, [pc, #488]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80036b2:	f043 0304 	orr.w	r3, r3, #4
 80036b6:	6713      	str	r3, [r2, #112]	; 0x70
 80036b8:	4b78      	ldr	r3, [pc, #480]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036bc:	4a77      	ldr	r2, [pc, #476]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	6713      	str	r3, [r2, #112]	; 0x70
 80036c4:	e00b      	b.n	80036de <HAL_RCC_OscConfig+0x32a>
 80036c6:	4b75      	ldr	r3, [pc, #468]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	4a74      	ldr	r2, [pc, #464]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	6713      	str	r3, [r2, #112]	; 0x70
 80036d2:	4b72      	ldr	r3, [pc, #456]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	4a71      	ldr	r2, [pc, #452]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80036d8:	f023 0304 	bic.w	r3, r3, #4
 80036dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d015      	beq.n	8003712 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e6:	f7fe fe27 	bl	8002338 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ee:	f7fe fe23 	bl	8002338 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e0c5      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003704:	4b65      	ldr	r3, [pc, #404]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0ee      	beq.n	80036ee <HAL_RCC_OscConfig+0x33a>
 8003710:	e014      	b.n	800373c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003712:	f7fe fe11 	bl	8002338 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003718:	e00a      	b.n	8003730 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371a:	f7fe fe0d 	bl	8002338 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f241 3288 	movw	r2, #5000	; 0x1388
 8003728:	4293      	cmp	r3, r2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e0af      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003730:	4b5a      	ldr	r3, [pc, #360]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1ee      	bne.n	800371a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800373c:	7dfb      	ldrb	r3, [r7, #23]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d105      	bne.n	800374e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003742:	4b56      	ldr	r3, [pc, #344]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	4a55      	ldr	r2, [pc, #340]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 8003748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 809b 	beq.w	800388e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003758:	4b50      	ldr	r3, [pc, #320]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	2b08      	cmp	r3, #8
 8003762:	d05c      	beq.n	800381e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d141      	bne.n	80037f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376c:	4b4c      	ldr	r3, [pc, #304]	; (80038a0 <HAL_RCC_OscConfig+0x4ec>)
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003772:	f7fe fde1 	bl	8002338 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377a:	f7fe fddd 	bl	8002338 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e081      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378c:	4b43      	ldr	r3, [pc, #268]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f0      	bne.n	800377a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	019b      	lsls	r3, r3, #6
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	3b01      	subs	r3, #1
 80037b2:	041b      	lsls	r3, r3, #16
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	061b      	lsls	r3, r3, #24
 80037bc:	4937      	ldr	r1, [pc, #220]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c2:	4b37      	ldr	r3, [pc, #220]	; (80038a0 <HAL_RCC_OscConfig+0x4ec>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fe fdb6 	bl	8002338 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fe fdb2 	bl	8002338 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e056      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e2:	4b2e      	ldr	r3, [pc, #184]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0x41c>
 80037ee:	e04e      	b.n	800388e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f0:	4b2b      	ldr	r3, [pc, #172]	; (80038a0 <HAL_RCC_OscConfig+0x4ec>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f6:	f7fe fd9f 	bl	8002338 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fe:	f7fe fd9b 	bl	8002338 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e03f      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003810:	4b22      	ldr	r3, [pc, #136]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1f0      	bne.n	80037fe <HAL_RCC_OscConfig+0x44a>
 800381c:	e037      	b.n	800388e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e032      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800382a:	4b1c      	ldr	r3, [pc, #112]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d028      	beq.n	800388a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d121      	bne.n	800388a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d11a      	bne.n	800388a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800385a:	4013      	ands	r3, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003860:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003862:	4293      	cmp	r3, r2
 8003864:	d111      	bne.n	800388a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	3b01      	subs	r3, #1
 8003874:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d107      	bne.n	800388a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003886:	429a      	cmp	r2, r3
 8003888:	d001      	beq.n	800388e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40007000 	.word	0x40007000
 800389c:	40023800 	.word	0x40023800
 80038a0:	42470060 	.word	0x42470060

080038a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0cc      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038b8:	4b68      	ldr	r3, [pc, #416]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d90c      	bls.n	80038e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	4b65      	ldr	r3, [pc, #404]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b63      	ldr	r3, [pc, #396]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0b8      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d020      	beq.n	800392e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f8:	4b59      	ldr	r3, [pc, #356]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	4a58      	ldr	r2, [pc, #352]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003902:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003910:	4b53      	ldr	r3, [pc, #332]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a52      	ldr	r2, [pc, #328]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800391a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800391c:	4b50      	ldr	r3, [pc, #320]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	494d      	ldr	r1, [pc, #308]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d044      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003942:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d119      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e07f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d003      	beq.n	8003962 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800395e:	2b03      	cmp	r3, #3
 8003960:	d107      	bne.n	8003972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003962:	4b3f      	ldr	r3, [pc, #252]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e06f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003972:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e067      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003982:	4b37      	ldr	r3, [pc, #220]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f023 0203 	bic.w	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	4934      	ldr	r1, [pc, #208]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	4313      	orrs	r3, r2
 8003992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003994:	f7fe fcd0 	bl	8002338 <HAL_GetTick>
 8003998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399c:	f7fe fccc 	bl	8002338 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e04f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 020c 	and.w	r2, r3, #12
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d1eb      	bne.n	800399c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c4:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d20c      	bcs.n	80039ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e032      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f8:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4916      	ldr	r1, [pc, #88]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a16:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	490e      	ldr	r1, [pc, #56]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a2a:	f000 f821 	bl	8003a70 <HAL_RCC_GetSysClockFreq>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	490a      	ldr	r1, [pc, #40]	; (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 8003a3c:	5ccb      	ldrb	r3, [r1, r3]
 8003a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a42:	4a09      	ldr	r2, [pc, #36]	; (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_RCC_ClockConfig+0x1c8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe fc30 	bl	80022b0 <HAL_InitTick>

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023c00 	.word	0x40023c00
 8003a60:	40023800 	.word	0x40023800
 8003a64:	08007e90 	.word	0x08007e90
 8003a68:	20000008 	.word	0x20000008
 8003a6c:	2000000c 	.word	0x2000000c

08003a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	607b      	str	r3, [r7, #4]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	2300      	movs	r3, #0
 8003a82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a88:	4b67      	ldr	r3, [pc, #412]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d00d      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	f200 80bd 	bhi.w	8003c14 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8003aa2:	e0b7      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003aa4:	4b61      	ldr	r3, [pc, #388]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003aa6:	60bb      	str	r3, [r7, #8]
       break;
 8003aa8:	e0b7      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aaa:	4b61      	ldr	r3, [pc, #388]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003aac:	60bb      	str	r3, [r7, #8]
      break;
 8003aae:	e0b4      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ab0:	4b5d      	ldr	r3, [pc, #372]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aba:	4b5b      	ldr	r3, [pc, #364]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d04d      	beq.n	8003b62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac6:	4b58      	ldr	r3, [pc, #352]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	099b      	lsrs	r3, r3, #6
 8003acc:	461a      	mov	r2, r3
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ad6:	f04f 0100 	mov.w	r1, #0
 8003ada:	ea02 0800 	and.w	r8, r2, r0
 8003ade:	ea03 0901 	and.w	r9, r3, r1
 8003ae2:	4640      	mov	r0, r8
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	014b      	lsls	r3, r1, #5
 8003af0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003af4:	0142      	lsls	r2, r0, #5
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	ebb0 0008 	subs.w	r0, r0, r8
 8003afe:	eb61 0109 	sbc.w	r1, r1, r9
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	018b      	lsls	r3, r1, #6
 8003b0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b10:	0182      	lsls	r2, r0, #6
 8003b12:	1a12      	subs	r2, r2, r0
 8003b14:	eb63 0301 	sbc.w	r3, r3, r1
 8003b18:	f04f 0000 	mov.w	r0, #0
 8003b1c:	f04f 0100 	mov.w	r1, #0
 8003b20:	00d9      	lsls	r1, r3, #3
 8003b22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b26:	00d0      	lsls	r0, r2, #3
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	eb12 0208 	adds.w	r2, r2, r8
 8003b30:	eb43 0309 	adc.w	r3, r3, r9
 8003b34:	f04f 0000 	mov.w	r0, #0
 8003b38:	f04f 0100 	mov.w	r1, #0
 8003b3c:	0259      	lsls	r1, r3, #9
 8003b3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b42:	0250      	lsls	r0, r2, #9
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	f7fc fb8c 	bl	8000270 <__aeabi_uldivmod>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	e04a      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b62:	4b31      	ldr	r3, [pc, #196]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	099b      	lsrs	r3, r3, #6
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b72:	f04f 0100 	mov.w	r1, #0
 8003b76:	ea02 0400 	and.w	r4, r2, r0
 8003b7a:	ea03 0501 	and.w	r5, r3, r1
 8003b7e:	4620      	mov	r0, r4
 8003b80:	4629      	mov	r1, r5
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	014b      	lsls	r3, r1, #5
 8003b8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b90:	0142      	lsls	r2, r0, #5
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	1b00      	subs	r0, r0, r4
 8003b98:	eb61 0105 	sbc.w	r1, r1, r5
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	018b      	lsls	r3, r1, #6
 8003ba6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003baa:	0182      	lsls	r2, r0, #6
 8003bac:	1a12      	subs	r2, r2, r0
 8003bae:	eb63 0301 	sbc.w	r3, r3, r1
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f04f 0100 	mov.w	r1, #0
 8003bba:	00d9      	lsls	r1, r3, #3
 8003bbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bc0:	00d0      	lsls	r0, r2, #3
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	1912      	adds	r2, r2, r4
 8003bc8:	eb45 0303 	adc.w	r3, r5, r3
 8003bcc:	f04f 0000 	mov.w	r0, #0
 8003bd0:	f04f 0100 	mov.w	r1, #0
 8003bd4:	0299      	lsls	r1, r3, #10
 8003bd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bda:	0290      	lsls	r0, r2, #10
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4610      	mov	r0, r2
 8003be2:	4619      	mov	r1, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	461a      	mov	r2, r3
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	f7fc fb40 	bl	8000270 <__aeabi_uldivmod>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	0c1b      	lsrs	r3, r3, #16
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	3301      	adds	r3, #1
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	60bb      	str	r3, [r7, #8]
      break;
 8003c12:	e002      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c16:	60bb      	str	r3, [r7, #8]
      break;
 8003c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c26:	bf00      	nop
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	00f42400 	.word	0x00f42400
 8003c30:	007a1200 	.word	0x007a1200

08003c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c38:	4b03      	ldr	r3, [pc, #12]	; (8003c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	20000008 	.word	0x20000008

08003c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c50:	f7ff fff0 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	0a9b      	lsrs	r3, r3, #10
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	4903      	ldr	r1, [pc, #12]	; (8003c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c62:	5ccb      	ldrb	r3, [r1, r3]
 8003c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	08007ea0 	.word	0x08007ea0

08003c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c78:	f7ff ffdc 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	0b5b      	lsrs	r3, r3, #13
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	4903      	ldr	r1, [pc, #12]	; (8003c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c8a:	5ccb      	ldrb	r3, [r1, r3]
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40023800 	.word	0x40023800
 8003c98:	08007ea0 	.word	0x08007ea0

08003c9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e07b      	b.n	8003da6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d108      	bne.n	8003cc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cbe:	d009      	beq.n	8003cd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	61da      	str	r2, [r3, #28]
 8003cc6:	e005      	b.n	8003cd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fc ff48 	bl	8000b84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d58:	ea42 0103 	orr.w	r1, r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	f003 0104 	and.w	r1, r3, #4
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	f003 0210 	and.w	r2, r3, #16
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b088      	sub	sp, #32
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	603b      	str	r3, [r7, #0]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_SPI_Transmit+0x22>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e126      	b.n	800401e <HAL_SPI_Transmit+0x270>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dd8:	f7fe faae 	bl	8002338 <HAL_GetTick>
 8003ddc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d002      	beq.n	8003df4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003dee:	2302      	movs	r3, #2
 8003df0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003df2:	e10b      	b.n	800400c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_SPI_Transmit+0x52>
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d102      	bne.n	8003e06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e04:	e102      	b.n	800400c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2203      	movs	r2, #3
 8003e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	88fa      	ldrh	r2, [r7, #6]
 8003e1e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	88fa      	ldrh	r2, [r7, #6]
 8003e24:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e4c:	d10f      	bne.n	8003e6e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	d007      	beq.n	8003e8c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e94:	d14b      	bne.n	8003f2e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_SPI_Transmit+0xf6>
 8003e9e:	8afb      	ldrh	r3, [r7, #22]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d13e      	bne.n	8003f22 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	881a      	ldrh	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	1c9a      	adds	r2, r3, #2
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ec8:	e02b      	b.n	8003f22 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d112      	bne.n	8003efe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	881a      	ldrh	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	1c9a      	adds	r2, r3, #2
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	86da      	strh	r2, [r3, #54]	; 0x36
 8003efc:	e011      	b.n	8003f22 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003efe:	f7fe fa1b 	bl	8002338 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d803      	bhi.n	8003f16 <HAL_SPI_Transmit+0x168>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d102      	bne.n	8003f1c <HAL_SPI_Transmit+0x16e>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d102      	bne.n	8003f22 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f20:	e074      	b.n	800400c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ce      	bne.n	8003eca <HAL_SPI_Transmit+0x11c>
 8003f2c:	e04c      	b.n	8003fc8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <HAL_SPI_Transmit+0x18e>
 8003f36:	8afb      	ldrh	r3, [r7, #22]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d140      	bne.n	8003fbe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	330c      	adds	r3, #12
 8003f46:	7812      	ldrb	r2, [r2, #0]
 8003f48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f62:	e02c      	b.n	8003fbe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d113      	bne.n	8003f9a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	330c      	adds	r3, #12
 8003f7c:	7812      	ldrb	r2, [r2, #0]
 8003f7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f98:	e011      	b.n	8003fbe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f9a:	f7fe f9cd 	bl	8002338 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d803      	bhi.n	8003fb2 <HAL_SPI_Transmit+0x204>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb0:	d102      	bne.n	8003fb8 <HAL_SPI_Transmit+0x20a>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d102      	bne.n	8003fbe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fbc:	e026      	b.n	800400c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1cd      	bne.n	8003f64 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	6839      	ldr	r1, [r7, #0]
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f8b3 	bl	8004138 <SPI_EndRxTxTransaction>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10a      	bne.n	8003ffc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e000      	b.n	800400c <HAL_SPI_Transmit+0x25e>
  }

error:
 800400a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800401c:	7ffb      	ldrb	r3, [r7, #31]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3720      	adds	r7, #32
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004038:	f7fe f97e 	bl	8002338 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	4413      	add	r3, r2
 8004046:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004048:	f7fe f976 	bl	8002338 <HAL_GetTick>
 800404c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800404e:	4b39      	ldr	r3, [pc, #228]	; (8004134 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	015b      	lsls	r3, r3, #5
 8004054:	0d1b      	lsrs	r3, r3, #20
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	fb02 f303 	mul.w	r3, r2, r3
 800405c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800405e:	e054      	b.n	800410a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004066:	d050      	beq.n	800410a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004068:	f7fe f966 	bl	8002338 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	429a      	cmp	r2, r3
 8004076:	d902      	bls.n	800407e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d13d      	bne.n	80040fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800408c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004096:	d111      	bne.n	80040bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a0:	d004      	beq.n	80040ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040aa:	d107      	bne.n	80040bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c4:	d10f      	bne.n	80040e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e017      	b.n	800412a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	3b01      	subs	r3, #1
 8004108:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4013      	ands	r3, r2
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	429a      	cmp	r2, r3
 8004118:	bf0c      	ite	eq
 800411a:	2301      	moveq	r3, #1
 800411c:	2300      	movne	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	461a      	mov	r2, r3
 8004122:	79fb      	ldrb	r3, [r7, #7]
 8004124:	429a      	cmp	r2, r3
 8004126:	d19b      	bne.n	8004060 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000008 	.word	0x20000008

08004138 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004144:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <SPI_EndRxTxTransaction+0x7c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1b      	ldr	r2, [pc, #108]	; (80041b8 <SPI_EndRxTxTransaction+0x80>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	0d5b      	lsrs	r3, r3, #21
 8004150:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004154:	fb02 f303 	mul.w	r3, r2, r3
 8004158:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004162:	d112      	bne.n	800418a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2200      	movs	r2, #0
 800416c:	2180      	movs	r1, #128	; 0x80
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff ff5a 	bl	8004028 <SPI_WaitFlagStateUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d016      	beq.n	80041a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	f043 0220 	orr.w	r2, r3, #32
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e00f      	b.n	80041aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	3b01      	subs	r3, #1
 8004194:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a0:	2b80      	cmp	r3, #128	; 0x80
 80041a2:	d0f2      	beq.n	800418a <SPI_EndRxTxTransaction+0x52>
 80041a4:	e000      	b.n	80041a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80041a6:	bf00      	nop
  }

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000008 	.word	0x20000008
 80041b8:	165e9f81 	.word	0x165e9f81

080041bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e041      	b.n	8004252 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fd fc86 	bl	8001af4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3304      	adds	r3, #4
 80041f8:	4619      	mov	r1, r3
 80041fa:	4610      	mov	r0, r2
 80041fc:	f000 f9ce 	bl	800459c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e041      	b.n	80042f0 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d106      	bne.n	8004286 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7fd fad9 	bl	8001838 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2202      	movs	r2, #2
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3304      	adds	r3, #4
 8004296:	4619      	mov	r1, r3
 8004298:	4610      	mov	r0, r2
 800429a:	f000 f97f 	bl	800459c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_TIM_IC_ConfigChannel+0x1a>
 800430e:	2302      	movs	r3, #2
 8004310:	e082      	b.n	8004418 <HAL_TIM_IC_ConfigChannel+0x120>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d11b      	bne.n	8004358 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6818      	ldr	r0, [r3, #0]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	6819      	ldr	r1, [r3, #0]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f000 fb84 	bl	8004a3c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699a      	ldr	r2, [r3, #24]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 020c 	bic.w	r2, r2, #12
 8004342:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6999      	ldr	r1, [r3, #24]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	619a      	str	r2, [r3, #24]
 8004356:	e05a      	b.n	800440e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b04      	cmp	r3, #4
 800435c:	d11c      	bne.n	8004398 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	6819      	ldr	r1, [r3, #0]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f000 fbd9 	bl	8004b24 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699a      	ldr	r2, [r3, #24]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004380:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6999      	ldr	r1, [r3, #24]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	021a      	lsls	r2, r3, #8
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	619a      	str	r2, [r3, #24]
 8004396:	e03a      	b.n	800440e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b08      	cmp	r3, #8
 800439c:	d11b      	bne.n	80043d6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	6819      	ldr	r1, [r3, #0]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f000 fbf6 	bl	8004b9e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69da      	ldr	r2, [r3, #28]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 020c 	bic.w	r2, r2, #12
 80043c0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69d9      	ldr	r1, [r3, #28]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	61da      	str	r2, [r3, #28]
 80043d4:	e01b      	b.n	800440e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	6819      	ldr	r1, [r3, #0]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f000 fc16 	bl	8004c16 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69da      	ldr	r2, [r3, #28]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043f8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69d9      	ldr	r1, [r3, #28]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	021a      	lsls	r2, r3, #8
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004436:	2302      	movs	r3, #2
 8004438:	e0ac      	b.n	8004594 <HAL_TIM_PWM_ConfigChannel+0x174>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b0c      	cmp	r3, #12
 8004446:	f200 809f 	bhi.w	8004588 <HAL_TIM_PWM_ConfigChannel+0x168>
 800444a:	a201      	add	r2, pc, #4	; (adr r2, 8004450 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800444c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004450:	08004485 	.word	0x08004485
 8004454:	08004589 	.word	0x08004589
 8004458:	08004589 	.word	0x08004589
 800445c:	08004589 	.word	0x08004589
 8004460:	080044c5 	.word	0x080044c5
 8004464:	08004589 	.word	0x08004589
 8004468:	08004589 	.word	0x08004589
 800446c:	08004589 	.word	0x08004589
 8004470:	08004507 	.word	0x08004507
 8004474:	08004589 	.word	0x08004589
 8004478:	08004589 	.word	0x08004589
 800447c:	08004589 	.word	0x08004589
 8004480:	08004547 	.word	0x08004547
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68b9      	ldr	r1, [r7, #8]
 800448a:	4618      	mov	r0, r3
 800448c:	f000 f926 	bl	80046dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0208 	orr.w	r2, r2, #8
 800449e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0204 	bic.w	r2, r2, #4
 80044ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6999      	ldr	r1, [r3, #24]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	619a      	str	r2, [r3, #24]
      break;
 80044c2:	e062      	b.n	800458a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f976 	bl	80047bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6999      	ldr	r1, [r3, #24]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	021a      	lsls	r2, r3, #8
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	619a      	str	r2, [r3, #24]
      break;
 8004504:	e041      	b.n	800458a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f9cb 	bl	80048a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69da      	ldr	r2, [r3, #28]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0208 	orr.w	r2, r2, #8
 8004520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0204 	bic.w	r2, r2, #4
 8004530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69d9      	ldr	r1, [r3, #28]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	61da      	str	r2, [r3, #28]
      break;
 8004544:	e021      	b.n	800458a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68b9      	ldr	r1, [r7, #8]
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fa1f 	bl	8004990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69da      	ldr	r2, [r3, #28]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69da      	ldr	r2, [r3, #28]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69d9      	ldr	r1, [r3, #28]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	021a      	lsls	r2, r3, #8
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	61da      	str	r2, [r3, #28]
      break;
 8004586:	e000      	b.n	800458a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004588:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a40      	ldr	r2, [pc, #256]	; (80046b0 <TIM_Base_SetConfig+0x114>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d013      	beq.n	80045dc <TIM_Base_SetConfig+0x40>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ba:	d00f      	beq.n	80045dc <TIM_Base_SetConfig+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a3d      	ldr	r2, [pc, #244]	; (80046b4 <TIM_Base_SetConfig+0x118>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00b      	beq.n	80045dc <TIM_Base_SetConfig+0x40>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a3c      	ldr	r2, [pc, #240]	; (80046b8 <TIM_Base_SetConfig+0x11c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d007      	beq.n	80045dc <TIM_Base_SetConfig+0x40>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a3b      	ldr	r2, [pc, #236]	; (80046bc <TIM_Base_SetConfig+0x120>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d003      	beq.n	80045dc <TIM_Base_SetConfig+0x40>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a3a      	ldr	r2, [pc, #232]	; (80046c0 <TIM_Base_SetConfig+0x124>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d108      	bne.n	80045ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a2f      	ldr	r2, [pc, #188]	; (80046b0 <TIM_Base_SetConfig+0x114>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d02b      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fc:	d027      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a2c      	ldr	r2, [pc, #176]	; (80046b4 <TIM_Base_SetConfig+0x118>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d023      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a2b      	ldr	r2, [pc, #172]	; (80046b8 <TIM_Base_SetConfig+0x11c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d01f      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a2a      	ldr	r2, [pc, #168]	; (80046bc <TIM_Base_SetConfig+0x120>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d01b      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a29      	ldr	r2, [pc, #164]	; (80046c0 <TIM_Base_SetConfig+0x124>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d017      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a28      	ldr	r2, [pc, #160]	; (80046c4 <TIM_Base_SetConfig+0x128>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a27      	ldr	r2, [pc, #156]	; (80046c8 <TIM_Base_SetConfig+0x12c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00f      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a26      	ldr	r2, [pc, #152]	; (80046cc <TIM_Base_SetConfig+0x130>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00b      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a25      	ldr	r2, [pc, #148]	; (80046d0 <TIM_Base_SetConfig+0x134>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d007      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a24      	ldr	r2, [pc, #144]	; (80046d4 <TIM_Base_SetConfig+0x138>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d003      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a23      	ldr	r2, [pc, #140]	; (80046d8 <TIM_Base_SetConfig+0x13c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d108      	bne.n	8004660 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <TIM_Base_SetConfig+0x114>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d003      	beq.n	8004694 <TIM_Base_SetConfig+0xf8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a0c      	ldr	r2, [pc, #48]	; (80046c0 <TIM_Base_SetConfig+0x124>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d103      	bne.n	800469c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	615a      	str	r2, [r3, #20]
}
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40000400 	.word	0x40000400
 80046b8:	40000800 	.word	0x40000800
 80046bc:	40000c00 	.word	0x40000c00
 80046c0:	40010400 	.word	0x40010400
 80046c4:	40014000 	.word	0x40014000
 80046c8:	40014400 	.word	0x40014400
 80046cc:	40014800 	.word	0x40014800
 80046d0:	40001800 	.word	0x40001800
 80046d4:	40001c00 	.word	0x40001c00
 80046d8:	40002000 	.word	0x40002000

080046dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	f023 0201 	bic.w	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0303 	bic.w	r3, r3, #3
 8004712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f023 0302 	bic.w	r3, r3, #2
 8004724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a20      	ldr	r2, [pc, #128]	; (80047b4 <TIM_OC1_SetConfig+0xd8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d003      	beq.n	8004740 <TIM_OC1_SetConfig+0x64>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a1f      	ldr	r2, [pc, #124]	; (80047b8 <TIM_OC1_SetConfig+0xdc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d10c      	bne.n	800475a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f023 0308 	bic.w	r3, r3, #8
 8004746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f023 0304 	bic.w	r3, r3, #4
 8004758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a15      	ldr	r2, [pc, #84]	; (80047b4 <TIM_OC1_SetConfig+0xd8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d003      	beq.n	800476a <TIM_OC1_SetConfig+0x8e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a14      	ldr	r2, [pc, #80]	; (80047b8 <TIM_OC1_SetConfig+0xdc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d111      	bne.n	800478e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	621a      	str	r2, [r3, #32]
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40010400 	.word	0x40010400

080047bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f023 0210 	bic.w	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	021b      	lsls	r3, r3, #8
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f023 0320 	bic.w	r3, r3, #32
 8004806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a22      	ldr	r2, [pc, #136]	; (80048a0 <TIM_OC2_SetConfig+0xe4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d003      	beq.n	8004824 <TIM_OC2_SetConfig+0x68>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a21      	ldr	r2, [pc, #132]	; (80048a4 <TIM_OC2_SetConfig+0xe8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d10d      	bne.n	8004840 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800482a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800483e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a17      	ldr	r2, [pc, #92]	; (80048a0 <TIM_OC2_SetConfig+0xe4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d003      	beq.n	8004850 <TIM_OC2_SetConfig+0x94>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a16      	ldr	r2, [pc, #88]	; (80048a4 <TIM_OC2_SetConfig+0xe8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d113      	bne.n	8004878 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004856:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800485e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	621a      	str	r2, [r3, #32]
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40010000 	.word	0x40010000
 80048a4:	40010400 	.word	0x40010400

080048a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0303 	bic.w	r3, r3, #3
 80048de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	021b      	lsls	r3, r3, #8
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a21      	ldr	r2, [pc, #132]	; (8004988 <TIM_OC3_SetConfig+0xe0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d003      	beq.n	800490e <TIM_OC3_SetConfig+0x66>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a20      	ldr	r2, [pc, #128]	; (800498c <TIM_OC3_SetConfig+0xe4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d10d      	bne.n	800492a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	021b      	lsls	r3, r3, #8
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a16      	ldr	r2, [pc, #88]	; (8004988 <TIM_OC3_SetConfig+0xe0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d003      	beq.n	800493a <TIM_OC3_SetConfig+0x92>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a15      	ldr	r2, [pc, #84]	; (800498c <TIM_OC3_SetConfig+0xe4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d113      	bne.n	8004962 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	011b      	lsls	r3, r3, #4
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	621a      	str	r2, [r3, #32]
}
 800497c:	bf00      	nop
 800497e:	371c      	adds	r7, #28
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	40010000 	.word	0x40010000
 800498c:	40010400 	.word	0x40010400

08004990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	021b      	lsls	r3, r3, #8
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	031b      	lsls	r3, r3, #12
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a12      	ldr	r2, [pc, #72]	; (8004a34 <TIM_OC4_SetConfig+0xa4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d003      	beq.n	80049f8 <TIM_OC4_SetConfig+0x68>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a11      	ldr	r2, [pc, #68]	; (8004a38 <TIM_OC4_SetConfig+0xa8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d109      	bne.n	8004a0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	019b      	lsls	r3, r3, #6
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	621a      	str	r2, [r3, #32]
}
 8004a26:	bf00      	nop
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40010000 	.word	0x40010000
 8004a38:	40010400 	.word	0x40010400

08004a3c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f023 0201 	bic.w	r2, r3, #1
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4a28      	ldr	r2, [pc, #160]	; (8004b08 <TIM_TI1_SetConfig+0xcc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d01b      	beq.n	8004aa2 <TIM_TI1_SetConfig+0x66>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a70:	d017      	beq.n	8004aa2 <TIM_TI1_SetConfig+0x66>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4a25      	ldr	r2, [pc, #148]	; (8004b0c <TIM_TI1_SetConfig+0xd0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d013      	beq.n	8004aa2 <TIM_TI1_SetConfig+0x66>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4a24      	ldr	r2, [pc, #144]	; (8004b10 <TIM_TI1_SetConfig+0xd4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00f      	beq.n	8004aa2 <TIM_TI1_SetConfig+0x66>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4a23      	ldr	r2, [pc, #140]	; (8004b14 <TIM_TI1_SetConfig+0xd8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00b      	beq.n	8004aa2 <TIM_TI1_SetConfig+0x66>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4a22      	ldr	r2, [pc, #136]	; (8004b18 <TIM_TI1_SetConfig+0xdc>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d007      	beq.n	8004aa2 <TIM_TI1_SetConfig+0x66>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4a21      	ldr	r2, [pc, #132]	; (8004b1c <TIM_TI1_SetConfig+0xe0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d003      	beq.n	8004aa2 <TIM_TI1_SetConfig+0x66>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4a20      	ldr	r2, [pc, #128]	; (8004b20 <TIM_TI1_SetConfig+0xe4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d101      	bne.n	8004aa6 <TIM_TI1_SetConfig+0x6a>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <TIM_TI1_SetConfig+0x6c>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f023 0303 	bic.w	r3, r3, #3
 8004ab2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	e003      	b.n	8004ac6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004acc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f023 030a 	bic.w	r3, r3, #10
 8004ae0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f003 030a 	and.w	r3, r3, #10
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	621a      	str	r2, [r3, #32]
}
 8004afa:	bf00      	nop
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40010000 	.word	0x40010000
 8004b0c:	40000400 	.word	0x40000400
 8004b10:	40000800 	.word	0x40000800
 8004b14:	40000c00 	.word	0x40000c00
 8004b18:	40010400 	.word	0x40010400
 8004b1c:	40014000 	.word	0x40014000
 8004b20:	40001800 	.word	0x40001800

08004b24 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	f023 0210 	bic.w	r2, r3, #16
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	031b      	lsls	r3, r3, #12
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b76:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	621a      	str	r2, [r3, #32]
}
 8004b92:	bf00      	nop
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b087      	sub	sp, #28
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f023 0303 	bic.w	r3, r3, #3
 8004bca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bda:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004bee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b087      	sub	sp, #28
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c42:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	021b      	lsls	r3, r3, #8
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	031b      	lsls	r3, r3, #12
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004c68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	031b      	lsls	r3, r3, #12
 8004c6e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	621a      	str	r2, [r3, #32]
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e05a      	b.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a21      	ldr	r2, [pc, #132]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d022      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf4:	d01d      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1d      	ldr	r2, [pc, #116]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d018      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1b      	ldr	r2, [pc, #108]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d013      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1a      	ldr	r2, [pc, #104]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00e      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a18      	ldr	r2, [pc, #96]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d009      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a17      	ldr	r2, [pc, #92]	; (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d004      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a15      	ldr	r2, [pc, #84]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d10c      	bne.n	8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800
 8004d78:	40000c00 	.word	0x40000c00
 8004d7c:	40010400 	.word	0x40010400
 8004d80:	40014000 	.word	0x40014000
 8004d84:	40001800 	.word	0x40001800

08004d88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e03f      	b.n	8004e1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fc ffd2 	bl	8001d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2224      	movs	r2, #36	; 0x24
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fcfd 	bl	80057cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004de0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695a      	ldr	r2, [r3, #20]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004df0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d11d      	bne.n	8004e78 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_UART_Receive_DMA+0x26>
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e016      	b.n	8004e7a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_UART_Receive_DMA+0x38>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e00f      	b.n	8004e7a <HAL_UART_Receive_DMA+0x58>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004e68:	88fb      	ldrh	r3, [r7, #6]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 faf2 	bl	8005458 <UART_Start_Receive_DMA>
 8004e74:	4603      	mov	r3, r0
 8004e76:	e000      	b.n	8004e7a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e78:	2302      	movs	r3, #2
  }
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e98:	2b80      	cmp	r3, #128	; 0x80
 8004e9a:	bf0c      	ite	eq
 8004e9c:	2301      	moveq	r3, #1
 8004e9e:	2300      	movne	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b21      	cmp	r3, #33	; 0x21
 8004eae:	d116      	bne.n	8004ede <HAL_UART_DMAStop+0x5c>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d013      	beq.n	8004ede <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695a      	ldr	r2, [r3, #20]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ec4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d004      	beq.n	8004ed8 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fd fc78 	bl	80027c8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fb21 	bl	8005520 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee8:	2b40      	cmp	r3, #64	; 0x40
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b22      	cmp	r3, #34	; 0x22
 8004efe:	d116      	bne.n	8004f2e <HAL_UART_DMAStop+0xac>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d013      	beq.n	8004f2e <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695a      	ldr	r2, [r3, #20]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f14:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d004      	beq.n	8004f28 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fd fc50 	bl	80027c8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fb0f 	bl	800554c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08a      	sub	sp, #40	; 0x28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10d      	bne.n	8004f8a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	f003 0320 	and.w	r3, r3, #32
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_UART_IRQHandler+0x52>
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fb8b 	bl	800569e <UART_Receive_IT>
      return;
 8004f88:	e17c      	b.n	8005284 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 80b1 	beq.w	80050f4 <HAL_UART_IRQHandler+0x1bc>
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d105      	bne.n	8004fa8 <HAL_UART_IRQHandler+0x70>
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 80a6 	beq.w	80050f4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x90>
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	f043 0201 	orr.w	r2, r3, #1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_UART_IRQHandler+0xb0>
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	f043 0202 	orr.w	r2, r3, #2
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <HAL_UART_IRQHandler+0xd0>
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d005      	beq.n	8005008 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	f043 0204 	orr.w	r2, r3, #4
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00f      	beq.n	8005032 <HAL_UART_IRQHandler+0xfa>
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	2b00      	cmp	r3, #0
 800501a:	d104      	bne.n	8005026 <HAL_UART_IRQHandler+0xee>
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d005      	beq.n	8005032 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	f043 0208 	orr.w	r2, r3, #8
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 811f 	beq.w	800527a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b00      	cmp	r3, #0
 8005044:	d007      	beq.n	8005056 <HAL_UART_IRQHandler+0x11e>
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fb24 	bl	800569e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	bf0c      	ite	eq
 8005064:	2301      	moveq	r3, #1
 8005066:	2300      	movne	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	d102      	bne.n	800507e <HAL_UART_IRQHandler+0x146>
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d031      	beq.n	80050e2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fa64 	bl	800554c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508e:	2b40      	cmp	r3, #64	; 0x40
 8005090:	d123      	bne.n	80050da <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695a      	ldr	r2, [r3, #20]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d013      	beq.n	80050d2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	4a77      	ldr	r2, [pc, #476]	; (800528c <HAL_UART_IRQHandler+0x354>)
 80050b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fd fbf6 	bl	80028a8 <HAL_DMA_Abort_IT>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d016      	beq.n	80050f0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050cc:	4610      	mov	r0, r2
 80050ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d0:	e00e      	b.n	80050f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f8fa 	bl	80052cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d8:	e00a      	b.n	80050f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f8f6 	bl	80052cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e0:	e006      	b.n	80050f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f8f2 	bl	80052cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80050ee:	e0c4      	b.n	800527a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f0:	bf00      	nop
    return;
 80050f2:	e0c2      	b.n	800527a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	f040 80a2 	bne.w	8005242 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 809c 	beq.w	8005242 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	f003 0310 	and.w	r3, r3, #16
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 8096 	beq.w	8005242 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005136:	2b40      	cmp	r3, #64	; 0x40
 8005138:	d14f      	bne.n	80051da <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005144:	8a3b      	ldrh	r3, [r7, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 8099 	beq.w	800527e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005150:	8a3a      	ldrh	r2, [r7, #16]
 8005152:	429a      	cmp	r2, r3
 8005154:	f080 8093 	bcs.w	800527e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8a3a      	ldrh	r2, [r7, #16]
 800515c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005168:	d02b      	beq.n	80051c2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005178:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695a      	ldr	r2, [r3, #20]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0201 	bic.w	r2, r2, #1
 8005188:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695a      	ldr	r2, [r3, #20]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005198:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2220      	movs	r2, #32
 800519e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0210 	bic.w	r2, r2, #16
 80051b6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fd fb03 	bl	80027c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f884 	bl	80052e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80051d8:	e051      	b.n	800527e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d047      	beq.n	8005282 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80051f2:	8a7b      	ldrh	r3, [r7, #18]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d044      	beq.n	8005282 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005206:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695a      	ldr	r2, [r3, #20]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0201 	bic.w	r2, r2, #1
 8005216:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0210 	bic.w	r2, r2, #16
 8005234:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005236:	8a7b      	ldrh	r3, [r7, #18]
 8005238:	4619      	mov	r1, r3
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f850 	bl	80052e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005240:	e01f      	b.n	8005282 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005248:	2b00      	cmp	r3, #0
 800524a:	d008      	beq.n	800525e <HAL_UART_IRQHandler+0x326>
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f9b9 	bl	80055ce <UART_Transmit_IT>
    return;
 800525c:	e012      	b.n	8005284 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00d      	beq.n	8005284 <HAL_UART_IRQHandler+0x34c>
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526e:	2b00      	cmp	r3, #0
 8005270:	d008      	beq.n	8005284 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f9fb 	bl	800566e <UART_EndTransmit_IT>
    return;
 8005278:	e004      	b.n	8005284 <HAL_UART_IRQHandler+0x34c>
    return;
 800527a:	bf00      	nop
 800527c:	e002      	b.n	8005284 <HAL_UART_IRQHandler+0x34c>
      return;
 800527e:	bf00      	nop
 8005280:	e000      	b.n	8005284 <HAL_UART_IRQHandler+0x34c>
      return;
 8005282:	bf00      	nop
  }
}
 8005284:	3728      	adds	r7, #40	; 0x28
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	080055a7 	.word	0x080055a7

08005290 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005310:	2b00      	cmp	r3, #0
 8005312:	d12a      	bne.n	800536a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68da      	ldr	r2, [r3, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005328:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	695a      	ldr	r2, [r3, #20]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0201 	bic.w	r2, r2, #1
 8005338:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695a      	ldr	r2, [r3, #20]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005348:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005356:	2b01      	cmp	r3, #1
 8005358:	d107      	bne.n	800536a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0210 	bic.w	r2, r2, #16
 8005368:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	2b01      	cmp	r3, #1
 8005370:	d106      	bne.n	8005380 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005376:	4619      	mov	r1, r3
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7ff ffb1 	bl	80052e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800537e:	e002      	b.n	8005386 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff ff8f 	bl	80052a4 <HAL_UART_RxCpltCallback>
}
 8005386:	bf00      	nop
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d108      	bne.n	80053b6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053a8:	085b      	lsrs	r3, r3, #1
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	4619      	mov	r1, r3
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f7ff ff96 	bl	80052e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053b4:	e002      	b.n	80053bc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f7ff ff7e 	bl	80052b8 <HAL_UART_RxHalfCpltCallback>
}
 80053bc:	bf00      	nop
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e0:	2b80      	cmp	r3, #128	; 0x80
 80053e2:	bf0c      	ite	eq
 80053e4:	2301      	moveq	r3, #1
 80053e6:	2300      	movne	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b21      	cmp	r3, #33	; 0x21
 80053f6:	d108      	bne.n	800540a <UART_DMAError+0x46>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d005      	beq.n	800540a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2200      	movs	r2, #0
 8005402:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005404:	68b8      	ldr	r0, [r7, #8]
 8005406:	f000 f88b 	bl	8005520 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005414:	2b40      	cmp	r3, #64	; 0x40
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b22      	cmp	r3, #34	; 0x22
 800542a:	d108      	bne.n	800543e <UART_DMAError+0x7a>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2200      	movs	r2, #0
 8005436:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005438:	68b8      	ldr	r0, [r7, #8]
 800543a:	f000 f887 	bl	800554c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f043 0210 	orr.w	r2, r3, #16
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800544a:	68b8      	ldr	r0, [r7, #8]
 800544c:	f7ff ff3e 	bl	80052cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005450:	bf00      	nop
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	4613      	mov	r3, r2
 8005464:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	88fa      	ldrh	r2, [r7, #6]
 8005470:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2222      	movs	r2, #34	; 0x22
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	4a23      	ldr	r2, [pc, #140]	; (8005514 <UART_Start_Receive_DMA+0xbc>)
 8005486:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548c:	4a22      	ldr	r2, [pc, #136]	; (8005518 <UART_Start_Receive_DMA+0xc0>)
 800548e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	4a21      	ldr	r2, [pc, #132]	; (800551c <UART_Start_Receive_DMA+0xc4>)
 8005496:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549c:	2200      	movs	r2, #0
 800549e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80054a0:	f107 0308 	add.w	r3, r7, #8
 80054a4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3304      	adds	r3, #4
 80054b0:	4619      	mov	r1, r3
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	f7fd f92e 	bl	8002718 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80054bc:	2300      	movs	r3, #0
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	613b      	str	r3, [r7, #16]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054e8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	695a      	ldr	r2, [r3, #20]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0201 	orr.w	r2, r2, #1
 80054f8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695a      	ldr	r2, [r3, #20]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005508:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	080052f9 	.word	0x080052f9
 8005518:	0800538f 	.word	0x0800538f
 800551c:	080053c5 	.word	0x080053c5

08005520 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005536:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005562:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695a      	ldr	r2, [r3, #20]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0201 	bic.w	r2, r2, #1
 8005572:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005578:	2b01      	cmp	r3, #1
 800557a:	d107      	bne.n	800558c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0210 	bic.w	r2, r2, #16
 800558a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b084      	sub	sp, #16
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f7ff fe83 	bl	80052cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055c6:	bf00      	nop
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b085      	sub	sp, #20
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b21      	cmp	r3, #33	; 0x21
 80055e0:	d13e      	bne.n	8005660 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ea:	d114      	bne.n	8005616 <UART_Transmit_IT+0x48>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d110      	bne.n	8005616 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005608:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	1c9a      	adds	r2, r3, #2
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	621a      	str	r2, [r3, #32]
 8005614:	e008      	b.n	8005628 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	1c59      	adds	r1, r3, #1
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6211      	str	r1, [r2, #32]
 8005620:	781a      	ldrb	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29b      	uxth	r3, r3
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	4619      	mov	r1, r3
 8005636:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10f      	bne.n	800565c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800564a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800565a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	e000      	b.n	8005662 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005660:	2302      	movs	r3, #2
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b082      	sub	sp, #8
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005684:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff fdfe 	bl	8005290 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b22      	cmp	r3, #34	; 0x22
 80056b0:	f040 8087 	bne.w	80057c2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056bc:	d117      	bne.n	80056ee <UART_Receive_IT+0x50>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d113      	bne.n	80056ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e6:	1c9a      	adds	r2, r3, #2
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	629a      	str	r2, [r3, #40]	; 0x28
 80056ec:	e026      	b.n	800573c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80056f4:	2300      	movs	r3, #0
 80056f6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005700:	d007      	beq.n	8005712 <UART_Receive_IT+0x74>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10a      	bne.n	8005720 <UART_Receive_IT+0x82>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	b2da      	uxtb	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	e008      	b.n	8005732 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800572c:	b2da      	uxtb	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005740:	b29b      	uxth	r3, r3
 8005742:	3b01      	subs	r3, #1
 8005744:	b29b      	uxth	r3, r3
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	4619      	mov	r1, r3
 800574a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800574c:	2b00      	cmp	r3, #0
 800574e:	d136      	bne.n	80057be <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0220 	bic.w	r2, r2, #32
 800575e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800576e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695a      	ldr	r2, [r3, #20]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0201 	bic.w	r2, r2, #1
 800577e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	2b01      	cmp	r3, #1
 800578e:	d10e      	bne.n	80057ae <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0210 	bic.w	r2, r2, #16
 800579e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057a4:	4619      	mov	r1, r3
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff fd9a 	bl	80052e0 <HAL_UARTEx_RxEventCallback>
 80057ac:	e002      	b.n	80057b4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff fd78 	bl	80052a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	e002      	b.n	80057c4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	e000      	b.n	80057c4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80057c2:	2302      	movs	r3, #2
  }
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d0:	b09f      	sub	sp, #124	; 0x7c
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e2:	68d9      	ldr	r1, [r3, #12]
 80057e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	ea40 0301 	orr.w	r3, r0, r1
 80057ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	431a      	orrs	r2, r3
 80057fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	4313      	orrs	r3, r2
 8005804:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005810:	f021 010c 	bic.w	r1, r1, #12
 8005814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800581a:	430b      	orrs	r3, r1
 800581c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800581e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582a:	6999      	ldr	r1, [r3, #24]
 800582c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	ea40 0301 	orr.w	r3, r0, r1
 8005834:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4bc5      	ldr	r3, [pc, #788]	; (8005b50 <UART_SetConfig+0x384>)
 800583c:	429a      	cmp	r2, r3
 800583e:	d004      	beq.n	800584a <UART_SetConfig+0x7e>
 8005840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4bc3      	ldr	r3, [pc, #780]	; (8005b54 <UART_SetConfig+0x388>)
 8005846:	429a      	cmp	r2, r3
 8005848:	d103      	bne.n	8005852 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800584a:	f7fe fa13 	bl	8003c74 <HAL_RCC_GetPCLK2Freq>
 800584e:	6778      	str	r0, [r7, #116]	; 0x74
 8005850:	e002      	b.n	8005858 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005852:	f7fe f9fb 	bl	8003c4c <HAL_RCC_GetPCLK1Freq>
 8005856:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005860:	f040 80b6 	bne.w	80059d0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005866:	461c      	mov	r4, r3
 8005868:	f04f 0500 	mov.w	r5, #0
 800586c:	4622      	mov	r2, r4
 800586e:	462b      	mov	r3, r5
 8005870:	1891      	adds	r1, r2, r2
 8005872:	6439      	str	r1, [r7, #64]	; 0x40
 8005874:	415b      	adcs	r3, r3
 8005876:	647b      	str	r3, [r7, #68]	; 0x44
 8005878:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800587c:	1912      	adds	r2, r2, r4
 800587e:	eb45 0303 	adc.w	r3, r5, r3
 8005882:	f04f 0000 	mov.w	r0, #0
 8005886:	f04f 0100 	mov.w	r1, #0
 800588a:	00d9      	lsls	r1, r3, #3
 800588c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005890:	00d0      	lsls	r0, r2, #3
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	1911      	adds	r1, r2, r4
 8005898:	6639      	str	r1, [r7, #96]	; 0x60
 800589a:	416b      	adcs	r3, r5
 800589c:	667b      	str	r3, [r7, #100]	; 0x64
 800589e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	1891      	adds	r1, r2, r2
 80058aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80058ac:	415b      	adcs	r3, r3
 80058ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80058b8:	f7fa fcda 	bl	8000270 <__aeabi_uldivmod>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4ba5      	ldr	r3, [pc, #660]	; (8005b58 <UART_SetConfig+0x38c>)
 80058c2:	fba3 2302 	umull	r2, r3, r3, r2
 80058c6:	095b      	lsrs	r3, r3, #5
 80058c8:	011e      	lsls	r6, r3, #4
 80058ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058cc:	461c      	mov	r4, r3
 80058ce:	f04f 0500 	mov.w	r5, #0
 80058d2:	4622      	mov	r2, r4
 80058d4:	462b      	mov	r3, r5
 80058d6:	1891      	adds	r1, r2, r2
 80058d8:	6339      	str	r1, [r7, #48]	; 0x30
 80058da:	415b      	adcs	r3, r3
 80058dc:	637b      	str	r3, [r7, #52]	; 0x34
 80058de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80058e2:	1912      	adds	r2, r2, r4
 80058e4:	eb45 0303 	adc.w	r3, r5, r3
 80058e8:	f04f 0000 	mov.w	r0, #0
 80058ec:	f04f 0100 	mov.w	r1, #0
 80058f0:	00d9      	lsls	r1, r3, #3
 80058f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058f6:	00d0      	lsls	r0, r2, #3
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	1911      	adds	r1, r2, r4
 80058fe:	65b9      	str	r1, [r7, #88]	; 0x58
 8005900:	416b      	adcs	r3, r5
 8005902:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	461a      	mov	r2, r3
 800590a:	f04f 0300 	mov.w	r3, #0
 800590e:	1891      	adds	r1, r2, r2
 8005910:	62b9      	str	r1, [r7, #40]	; 0x28
 8005912:	415b      	adcs	r3, r3
 8005914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005916:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800591a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800591e:	f7fa fca7 	bl	8000270 <__aeabi_uldivmod>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4b8c      	ldr	r3, [pc, #560]	; (8005b58 <UART_SetConfig+0x38c>)
 8005928:	fba3 1302 	umull	r1, r3, r3, r2
 800592c:	095b      	lsrs	r3, r3, #5
 800592e:	2164      	movs	r1, #100	; 0x64
 8005930:	fb01 f303 	mul.w	r3, r1, r3
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	3332      	adds	r3, #50	; 0x32
 800593a:	4a87      	ldr	r2, [pc, #540]	; (8005b58 <UART_SetConfig+0x38c>)
 800593c:	fba2 2303 	umull	r2, r3, r2, r3
 8005940:	095b      	lsrs	r3, r3, #5
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005948:	441e      	add	r6, r3
 800594a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800594c:	4618      	mov	r0, r3
 800594e:	f04f 0100 	mov.w	r1, #0
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	1894      	adds	r4, r2, r2
 8005958:	623c      	str	r4, [r7, #32]
 800595a:	415b      	adcs	r3, r3
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
 800595e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005962:	1812      	adds	r2, r2, r0
 8005964:	eb41 0303 	adc.w	r3, r1, r3
 8005968:	f04f 0400 	mov.w	r4, #0
 800596c:	f04f 0500 	mov.w	r5, #0
 8005970:	00dd      	lsls	r5, r3, #3
 8005972:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005976:	00d4      	lsls	r4, r2, #3
 8005978:	4622      	mov	r2, r4
 800597a:	462b      	mov	r3, r5
 800597c:	1814      	adds	r4, r2, r0
 800597e:	653c      	str	r4, [r7, #80]	; 0x50
 8005980:	414b      	adcs	r3, r1
 8005982:	657b      	str	r3, [r7, #84]	; 0x54
 8005984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	461a      	mov	r2, r3
 800598a:	f04f 0300 	mov.w	r3, #0
 800598e:	1891      	adds	r1, r2, r2
 8005990:	61b9      	str	r1, [r7, #24]
 8005992:	415b      	adcs	r3, r3
 8005994:	61fb      	str	r3, [r7, #28]
 8005996:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800599a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800599e:	f7fa fc67 	bl	8000270 <__aeabi_uldivmod>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	4b6c      	ldr	r3, [pc, #432]	; (8005b58 <UART_SetConfig+0x38c>)
 80059a8:	fba3 1302 	umull	r1, r3, r3, r2
 80059ac:	095b      	lsrs	r3, r3, #5
 80059ae:	2164      	movs	r1, #100	; 0x64
 80059b0:	fb01 f303 	mul.w	r3, r1, r3
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	3332      	adds	r3, #50	; 0x32
 80059ba:	4a67      	ldr	r2, [pc, #412]	; (8005b58 <UART_SetConfig+0x38c>)
 80059bc:	fba2 2303 	umull	r2, r3, r2, r3
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	f003 0207 	and.w	r2, r3, #7
 80059c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4432      	add	r2, r6
 80059cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059ce:	e0b9      	b.n	8005b44 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d2:	461c      	mov	r4, r3
 80059d4:	f04f 0500 	mov.w	r5, #0
 80059d8:	4622      	mov	r2, r4
 80059da:	462b      	mov	r3, r5
 80059dc:	1891      	adds	r1, r2, r2
 80059de:	6139      	str	r1, [r7, #16]
 80059e0:	415b      	adcs	r3, r3
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80059e8:	1912      	adds	r2, r2, r4
 80059ea:	eb45 0303 	adc.w	r3, r5, r3
 80059ee:	f04f 0000 	mov.w	r0, #0
 80059f2:	f04f 0100 	mov.w	r1, #0
 80059f6:	00d9      	lsls	r1, r3, #3
 80059f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059fc:	00d0      	lsls	r0, r2, #3
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	eb12 0804 	adds.w	r8, r2, r4
 8005a06:	eb43 0905 	adc.w	r9, r3, r5
 8005a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f04f 0100 	mov.w	r1, #0
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	008b      	lsls	r3, r1, #2
 8005a1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a22:	0082      	lsls	r2, r0, #2
 8005a24:	4640      	mov	r0, r8
 8005a26:	4649      	mov	r1, r9
 8005a28:	f7fa fc22 	bl	8000270 <__aeabi_uldivmod>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4b49      	ldr	r3, [pc, #292]	; (8005b58 <UART_SetConfig+0x38c>)
 8005a32:	fba3 2302 	umull	r2, r3, r3, r2
 8005a36:	095b      	lsrs	r3, r3, #5
 8005a38:	011e      	lsls	r6, r3, #4
 8005a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f04f 0100 	mov.w	r1, #0
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	1894      	adds	r4, r2, r2
 8005a48:	60bc      	str	r4, [r7, #8]
 8005a4a:	415b      	adcs	r3, r3
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a52:	1812      	adds	r2, r2, r0
 8005a54:	eb41 0303 	adc.w	r3, r1, r3
 8005a58:	f04f 0400 	mov.w	r4, #0
 8005a5c:	f04f 0500 	mov.w	r5, #0
 8005a60:	00dd      	lsls	r5, r3, #3
 8005a62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a66:	00d4      	lsls	r4, r2, #3
 8005a68:	4622      	mov	r2, r4
 8005a6a:	462b      	mov	r3, r5
 8005a6c:	1814      	adds	r4, r2, r0
 8005a6e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005a70:	414b      	adcs	r3, r1
 8005a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f04f 0100 	mov.w	r1, #0
 8005a7e:	f04f 0200 	mov.w	r2, #0
 8005a82:	f04f 0300 	mov.w	r3, #0
 8005a86:	008b      	lsls	r3, r1, #2
 8005a88:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a8c:	0082      	lsls	r2, r0, #2
 8005a8e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005a92:	f7fa fbed 	bl	8000270 <__aeabi_uldivmod>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4b2f      	ldr	r3, [pc, #188]	; (8005b58 <UART_SetConfig+0x38c>)
 8005a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005aa0:	095b      	lsrs	r3, r3, #5
 8005aa2:	2164      	movs	r1, #100	; 0x64
 8005aa4:	fb01 f303 	mul.w	r3, r1, r3
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	3332      	adds	r3, #50	; 0x32
 8005aae:	4a2a      	ldr	r2, [pc, #168]	; (8005b58 <UART_SetConfig+0x38c>)
 8005ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aba:	441e      	add	r6, r3
 8005abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f04f 0100 	mov.w	r1, #0
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	1894      	adds	r4, r2, r2
 8005aca:	603c      	str	r4, [r7, #0]
 8005acc:	415b      	adcs	r3, r3
 8005ace:	607b      	str	r3, [r7, #4]
 8005ad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ad4:	1812      	adds	r2, r2, r0
 8005ad6:	eb41 0303 	adc.w	r3, r1, r3
 8005ada:	f04f 0400 	mov.w	r4, #0
 8005ade:	f04f 0500 	mov.w	r5, #0
 8005ae2:	00dd      	lsls	r5, r3, #3
 8005ae4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ae8:	00d4      	lsls	r4, r2, #3
 8005aea:	4622      	mov	r2, r4
 8005aec:	462b      	mov	r3, r5
 8005aee:	eb12 0a00 	adds.w	sl, r2, r0
 8005af2:	eb43 0b01 	adc.w	fp, r3, r1
 8005af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f04f 0100 	mov.w	r1, #0
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	f04f 0300 	mov.w	r3, #0
 8005b08:	008b      	lsls	r3, r1, #2
 8005b0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b0e:	0082      	lsls	r2, r0, #2
 8005b10:	4650      	mov	r0, sl
 8005b12:	4659      	mov	r1, fp
 8005b14:	f7fa fbac 	bl	8000270 <__aeabi_uldivmod>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4b0e      	ldr	r3, [pc, #56]	; (8005b58 <UART_SetConfig+0x38c>)
 8005b1e:	fba3 1302 	umull	r1, r3, r3, r2
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	2164      	movs	r1, #100	; 0x64
 8005b26:	fb01 f303 	mul.w	r3, r1, r3
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	3332      	adds	r3, #50	; 0x32
 8005b30:	4a09      	ldr	r2, [pc, #36]	; (8005b58 <UART_SetConfig+0x38c>)
 8005b32:	fba2 2303 	umull	r2, r3, r2, r3
 8005b36:	095b      	lsrs	r3, r3, #5
 8005b38:	f003 020f 	and.w	r2, r3, #15
 8005b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4432      	add	r2, r6
 8005b42:	609a      	str	r2, [r3, #8]
}
 8005b44:	bf00      	nop
 8005b46:	377c      	adds	r7, #124	; 0x7c
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b4e:	bf00      	nop
 8005b50:	40011000 	.word	0x40011000
 8005b54:	40011400 	.word	0x40011400
 8005b58:	51eb851f 	.word	0x51eb851f

08005b5c <__errno>:
 8005b5c:	4b01      	ldr	r3, [pc, #4]	; (8005b64 <__errno+0x8>)
 8005b5e:	6818      	ldr	r0, [r3, #0]
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	20000014 	.word	0x20000014

08005b68 <__libc_init_array>:
 8005b68:	b570      	push	{r4, r5, r6, lr}
 8005b6a:	4d0d      	ldr	r5, [pc, #52]	; (8005ba0 <__libc_init_array+0x38>)
 8005b6c:	4c0d      	ldr	r4, [pc, #52]	; (8005ba4 <__libc_init_array+0x3c>)
 8005b6e:	1b64      	subs	r4, r4, r5
 8005b70:	10a4      	asrs	r4, r4, #2
 8005b72:	2600      	movs	r6, #0
 8005b74:	42a6      	cmp	r6, r4
 8005b76:	d109      	bne.n	8005b8c <__libc_init_array+0x24>
 8005b78:	4d0b      	ldr	r5, [pc, #44]	; (8005ba8 <__libc_init_array+0x40>)
 8005b7a:	4c0c      	ldr	r4, [pc, #48]	; (8005bac <__libc_init_array+0x44>)
 8005b7c:	f000 ffd2 	bl	8006b24 <_init>
 8005b80:	1b64      	subs	r4, r4, r5
 8005b82:	10a4      	asrs	r4, r4, #2
 8005b84:	2600      	movs	r6, #0
 8005b86:	42a6      	cmp	r6, r4
 8005b88:	d105      	bne.n	8005b96 <__libc_init_array+0x2e>
 8005b8a:	bd70      	pop	{r4, r5, r6, pc}
 8005b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b90:	4798      	blx	r3
 8005b92:	3601      	adds	r6, #1
 8005b94:	e7ee      	b.n	8005b74 <__libc_init_array+0xc>
 8005b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b9a:	4798      	blx	r3
 8005b9c:	3601      	adds	r6, #1
 8005b9e:	e7f2      	b.n	8005b86 <__libc_init_array+0x1e>
 8005ba0:	08007f78 	.word	0x08007f78
 8005ba4:	08007f78 	.word	0x08007f78
 8005ba8:	08007f78 	.word	0x08007f78
 8005bac:	08007f7c 	.word	0x08007f7c

08005bb0 <__itoa>:
 8005bb0:	1e93      	subs	r3, r2, #2
 8005bb2:	2b22      	cmp	r3, #34	; 0x22
 8005bb4:	b510      	push	{r4, lr}
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	d904      	bls.n	8005bc4 <__itoa+0x14>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	700b      	strb	r3, [r1, #0]
 8005bbe:	461c      	mov	r4, r3
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	bd10      	pop	{r4, pc}
 8005bc4:	2a0a      	cmp	r2, #10
 8005bc6:	d109      	bne.n	8005bdc <__itoa+0x2c>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	da07      	bge.n	8005bdc <__itoa+0x2c>
 8005bcc:	232d      	movs	r3, #45	; 0x2d
 8005bce:	700b      	strb	r3, [r1, #0]
 8005bd0:	4240      	negs	r0, r0
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	4421      	add	r1, r4
 8005bd6:	f000 f825 	bl	8005c24 <__utoa>
 8005bda:	e7f1      	b.n	8005bc0 <__itoa+0x10>
 8005bdc:	2100      	movs	r1, #0
 8005bde:	e7f9      	b.n	8005bd4 <__itoa+0x24>

08005be0 <itoa>:
 8005be0:	f7ff bfe6 	b.w	8005bb0 <__itoa>

08005be4 <memset>:
 8005be4:	4402      	add	r2, r0
 8005be6:	4603      	mov	r3, r0
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d100      	bne.n	8005bee <memset+0xa>
 8005bec:	4770      	bx	lr
 8005bee:	f803 1b01 	strb.w	r1, [r3], #1
 8005bf2:	e7f9      	b.n	8005be8 <memset+0x4>

08005bf4 <iprintf>:
 8005bf4:	b40f      	push	{r0, r1, r2, r3}
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <iprintf+0x2c>)
 8005bf8:	b513      	push	{r0, r1, r4, lr}
 8005bfa:	681c      	ldr	r4, [r3, #0]
 8005bfc:	b124      	cbz	r4, 8005c08 <iprintf+0x14>
 8005bfe:	69a3      	ldr	r3, [r4, #24]
 8005c00:	b913      	cbnz	r3, 8005c08 <iprintf+0x14>
 8005c02:	4620      	mov	r0, r4
 8005c04:	f000 f8a8 	bl	8005d58 <__sinit>
 8005c08:	ab05      	add	r3, sp, #20
 8005c0a:	9a04      	ldr	r2, [sp, #16]
 8005c0c:	68a1      	ldr	r1, [r4, #8]
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	4620      	mov	r0, r4
 8005c12:	f000 f9c5 	bl	8005fa0 <_vfiprintf_r>
 8005c16:	b002      	add	sp, #8
 8005c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c1c:	b004      	add	sp, #16
 8005c1e:	4770      	bx	lr
 8005c20:	20000014 	.word	0x20000014

08005c24 <__utoa>:
 8005c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c26:	4c1f      	ldr	r4, [pc, #124]	; (8005ca4 <__utoa+0x80>)
 8005c28:	b08b      	sub	sp, #44	; 0x2c
 8005c2a:	4605      	mov	r5, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	466e      	mov	r6, sp
 8005c30:	f104 0c20 	add.w	ip, r4, #32
 8005c34:	6820      	ldr	r0, [r4, #0]
 8005c36:	6861      	ldr	r1, [r4, #4]
 8005c38:	4637      	mov	r7, r6
 8005c3a:	c703      	stmia	r7!, {r0, r1}
 8005c3c:	3408      	adds	r4, #8
 8005c3e:	4564      	cmp	r4, ip
 8005c40:	463e      	mov	r6, r7
 8005c42:	d1f7      	bne.n	8005c34 <__utoa+0x10>
 8005c44:	7921      	ldrb	r1, [r4, #4]
 8005c46:	7139      	strb	r1, [r7, #4]
 8005c48:	1e91      	subs	r1, r2, #2
 8005c4a:	6820      	ldr	r0, [r4, #0]
 8005c4c:	6038      	str	r0, [r7, #0]
 8005c4e:	2922      	cmp	r1, #34	; 0x22
 8005c50:	f04f 0100 	mov.w	r1, #0
 8005c54:	d904      	bls.n	8005c60 <__utoa+0x3c>
 8005c56:	7019      	strb	r1, [r3, #0]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	b00b      	add	sp, #44	; 0x2c
 8005c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c60:	1e58      	subs	r0, r3, #1
 8005c62:	4684      	mov	ip, r0
 8005c64:	fbb5 f7f2 	udiv	r7, r5, r2
 8005c68:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8005c6c:	fb02 5617 	mls	r6, r2, r7, r5
 8005c70:	4476      	add	r6, lr
 8005c72:	460c      	mov	r4, r1
 8005c74:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005c78:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005c7c:	462e      	mov	r6, r5
 8005c7e:	42b2      	cmp	r2, r6
 8005c80:	f101 0101 	add.w	r1, r1, #1
 8005c84:	463d      	mov	r5, r7
 8005c86:	d9ed      	bls.n	8005c64 <__utoa+0x40>
 8005c88:	2200      	movs	r2, #0
 8005c8a:	545a      	strb	r2, [r3, r1]
 8005c8c:	1919      	adds	r1, r3, r4
 8005c8e:	1aa5      	subs	r5, r4, r2
 8005c90:	42aa      	cmp	r2, r5
 8005c92:	dae2      	bge.n	8005c5a <__utoa+0x36>
 8005c94:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005c98:	780e      	ldrb	r6, [r1, #0]
 8005c9a:	7006      	strb	r6, [r0, #0]
 8005c9c:	3201      	adds	r2, #1
 8005c9e:	f801 5901 	strb.w	r5, [r1], #-1
 8005ca2:	e7f4      	b.n	8005c8e <__utoa+0x6a>
 8005ca4:	08007eb4 	.word	0x08007eb4

08005ca8 <std>:
 8005ca8:	2300      	movs	r3, #0
 8005caa:	b510      	push	{r4, lr}
 8005cac:	4604      	mov	r4, r0
 8005cae:	e9c0 3300 	strd	r3, r3, [r0]
 8005cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cb6:	6083      	str	r3, [r0, #8]
 8005cb8:	8181      	strh	r1, [r0, #12]
 8005cba:	6643      	str	r3, [r0, #100]	; 0x64
 8005cbc:	81c2      	strh	r2, [r0, #14]
 8005cbe:	6183      	str	r3, [r0, #24]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	2208      	movs	r2, #8
 8005cc4:	305c      	adds	r0, #92	; 0x5c
 8005cc6:	f7ff ff8d 	bl	8005be4 <memset>
 8005cca:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <std+0x38>)
 8005ccc:	6263      	str	r3, [r4, #36]	; 0x24
 8005cce:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <std+0x3c>)
 8005cd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cd2:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <std+0x40>)
 8005cd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cd6:	4b05      	ldr	r3, [pc, #20]	; (8005cec <std+0x44>)
 8005cd8:	6224      	str	r4, [r4, #32]
 8005cda:	6323      	str	r3, [r4, #48]	; 0x30
 8005cdc:	bd10      	pop	{r4, pc}
 8005cde:	bf00      	nop
 8005ce0:	08006549 	.word	0x08006549
 8005ce4:	0800656b 	.word	0x0800656b
 8005ce8:	080065a3 	.word	0x080065a3
 8005cec:	080065c7 	.word	0x080065c7

08005cf0 <_cleanup_r>:
 8005cf0:	4901      	ldr	r1, [pc, #4]	; (8005cf8 <_cleanup_r+0x8>)
 8005cf2:	f000 b8af 	b.w	8005e54 <_fwalk_reent>
 8005cf6:	bf00      	nop
 8005cf8:	080068a1 	.word	0x080068a1

08005cfc <__sfmoreglue>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	1e4a      	subs	r2, r1, #1
 8005d00:	2568      	movs	r5, #104	; 0x68
 8005d02:	4355      	muls	r5, r2
 8005d04:	460e      	mov	r6, r1
 8005d06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d0a:	f000 f8c5 	bl	8005e98 <_malloc_r>
 8005d0e:	4604      	mov	r4, r0
 8005d10:	b140      	cbz	r0, 8005d24 <__sfmoreglue+0x28>
 8005d12:	2100      	movs	r1, #0
 8005d14:	e9c0 1600 	strd	r1, r6, [r0]
 8005d18:	300c      	adds	r0, #12
 8005d1a:	60a0      	str	r0, [r4, #8]
 8005d1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d20:	f7ff ff60 	bl	8005be4 <memset>
 8005d24:	4620      	mov	r0, r4
 8005d26:	bd70      	pop	{r4, r5, r6, pc}

08005d28 <__sfp_lock_acquire>:
 8005d28:	4801      	ldr	r0, [pc, #4]	; (8005d30 <__sfp_lock_acquire+0x8>)
 8005d2a:	f000 b8b3 	b.w	8005e94 <__retarget_lock_acquire_recursive>
 8005d2e:	bf00      	nop
 8005d30:	20000978 	.word	0x20000978

08005d34 <__sfp_lock_release>:
 8005d34:	4801      	ldr	r0, [pc, #4]	; (8005d3c <__sfp_lock_release+0x8>)
 8005d36:	f000 b8ae 	b.w	8005e96 <__retarget_lock_release_recursive>
 8005d3a:	bf00      	nop
 8005d3c:	20000978 	.word	0x20000978

08005d40 <__sinit_lock_acquire>:
 8005d40:	4801      	ldr	r0, [pc, #4]	; (8005d48 <__sinit_lock_acquire+0x8>)
 8005d42:	f000 b8a7 	b.w	8005e94 <__retarget_lock_acquire_recursive>
 8005d46:	bf00      	nop
 8005d48:	20000973 	.word	0x20000973

08005d4c <__sinit_lock_release>:
 8005d4c:	4801      	ldr	r0, [pc, #4]	; (8005d54 <__sinit_lock_release+0x8>)
 8005d4e:	f000 b8a2 	b.w	8005e96 <__retarget_lock_release_recursive>
 8005d52:	bf00      	nop
 8005d54:	20000973 	.word	0x20000973

08005d58 <__sinit>:
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	f7ff fff0 	bl	8005d40 <__sinit_lock_acquire>
 8005d60:	69a3      	ldr	r3, [r4, #24]
 8005d62:	b11b      	cbz	r3, 8005d6c <__sinit+0x14>
 8005d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d68:	f7ff bff0 	b.w	8005d4c <__sinit_lock_release>
 8005d6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d70:	6523      	str	r3, [r4, #80]	; 0x50
 8005d72:	4b13      	ldr	r3, [pc, #76]	; (8005dc0 <__sinit+0x68>)
 8005d74:	4a13      	ldr	r2, [pc, #76]	; (8005dc4 <__sinit+0x6c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d7a:	42a3      	cmp	r3, r4
 8005d7c:	bf04      	itt	eq
 8005d7e:	2301      	moveq	r3, #1
 8005d80:	61a3      	streq	r3, [r4, #24]
 8005d82:	4620      	mov	r0, r4
 8005d84:	f000 f820 	bl	8005dc8 <__sfp>
 8005d88:	6060      	str	r0, [r4, #4]
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f000 f81c 	bl	8005dc8 <__sfp>
 8005d90:	60a0      	str	r0, [r4, #8]
 8005d92:	4620      	mov	r0, r4
 8005d94:	f000 f818 	bl	8005dc8 <__sfp>
 8005d98:	2200      	movs	r2, #0
 8005d9a:	60e0      	str	r0, [r4, #12]
 8005d9c:	2104      	movs	r1, #4
 8005d9e:	6860      	ldr	r0, [r4, #4]
 8005da0:	f7ff ff82 	bl	8005ca8 <std>
 8005da4:	68a0      	ldr	r0, [r4, #8]
 8005da6:	2201      	movs	r2, #1
 8005da8:	2109      	movs	r1, #9
 8005daa:	f7ff ff7d 	bl	8005ca8 <std>
 8005dae:	68e0      	ldr	r0, [r4, #12]
 8005db0:	2202      	movs	r2, #2
 8005db2:	2112      	movs	r1, #18
 8005db4:	f7ff ff78 	bl	8005ca8 <std>
 8005db8:	2301      	movs	r3, #1
 8005dba:	61a3      	str	r3, [r4, #24]
 8005dbc:	e7d2      	b.n	8005d64 <__sinit+0xc>
 8005dbe:	bf00      	nop
 8005dc0:	08007eb0 	.word	0x08007eb0
 8005dc4:	08005cf1 	.word	0x08005cf1

08005dc8 <__sfp>:
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dca:	4607      	mov	r7, r0
 8005dcc:	f7ff ffac 	bl	8005d28 <__sfp_lock_acquire>
 8005dd0:	4b1e      	ldr	r3, [pc, #120]	; (8005e4c <__sfp+0x84>)
 8005dd2:	681e      	ldr	r6, [r3, #0]
 8005dd4:	69b3      	ldr	r3, [r6, #24]
 8005dd6:	b913      	cbnz	r3, 8005dde <__sfp+0x16>
 8005dd8:	4630      	mov	r0, r6
 8005dda:	f7ff ffbd 	bl	8005d58 <__sinit>
 8005dde:	3648      	adds	r6, #72	; 0x48
 8005de0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	d503      	bpl.n	8005df0 <__sfp+0x28>
 8005de8:	6833      	ldr	r3, [r6, #0]
 8005dea:	b30b      	cbz	r3, 8005e30 <__sfp+0x68>
 8005dec:	6836      	ldr	r6, [r6, #0]
 8005dee:	e7f7      	b.n	8005de0 <__sfp+0x18>
 8005df0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005df4:	b9d5      	cbnz	r5, 8005e2c <__sfp+0x64>
 8005df6:	4b16      	ldr	r3, [pc, #88]	; (8005e50 <__sfp+0x88>)
 8005df8:	60e3      	str	r3, [r4, #12]
 8005dfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005dfe:	6665      	str	r5, [r4, #100]	; 0x64
 8005e00:	f000 f847 	bl	8005e92 <__retarget_lock_init_recursive>
 8005e04:	f7ff ff96 	bl	8005d34 <__sfp_lock_release>
 8005e08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e10:	6025      	str	r5, [r4, #0]
 8005e12:	61a5      	str	r5, [r4, #24]
 8005e14:	2208      	movs	r2, #8
 8005e16:	4629      	mov	r1, r5
 8005e18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e1c:	f7ff fee2 	bl	8005be4 <memset>
 8005e20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e28:	4620      	mov	r0, r4
 8005e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e2c:	3468      	adds	r4, #104	; 0x68
 8005e2e:	e7d9      	b.n	8005de4 <__sfp+0x1c>
 8005e30:	2104      	movs	r1, #4
 8005e32:	4638      	mov	r0, r7
 8005e34:	f7ff ff62 	bl	8005cfc <__sfmoreglue>
 8005e38:	4604      	mov	r4, r0
 8005e3a:	6030      	str	r0, [r6, #0]
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d1d5      	bne.n	8005dec <__sfp+0x24>
 8005e40:	f7ff ff78 	bl	8005d34 <__sfp_lock_release>
 8005e44:	230c      	movs	r3, #12
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	e7ee      	b.n	8005e28 <__sfp+0x60>
 8005e4a:	bf00      	nop
 8005e4c:	08007eb0 	.word	0x08007eb0
 8005e50:	ffff0001 	.word	0xffff0001

08005e54 <_fwalk_reent>:
 8005e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e58:	4606      	mov	r6, r0
 8005e5a:	4688      	mov	r8, r1
 8005e5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e60:	2700      	movs	r7, #0
 8005e62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e66:	f1b9 0901 	subs.w	r9, r9, #1
 8005e6a:	d505      	bpl.n	8005e78 <_fwalk_reent+0x24>
 8005e6c:	6824      	ldr	r4, [r4, #0]
 8005e6e:	2c00      	cmp	r4, #0
 8005e70:	d1f7      	bne.n	8005e62 <_fwalk_reent+0xe>
 8005e72:	4638      	mov	r0, r7
 8005e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e78:	89ab      	ldrh	r3, [r5, #12]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d907      	bls.n	8005e8e <_fwalk_reent+0x3a>
 8005e7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e82:	3301      	adds	r3, #1
 8005e84:	d003      	beq.n	8005e8e <_fwalk_reent+0x3a>
 8005e86:	4629      	mov	r1, r5
 8005e88:	4630      	mov	r0, r6
 8005e8a:	47c0      	blx	r8
 8005e8c:	4307      	orrs	r7, r0
 8005e8e:	3568      	adds	r5, #104	; 0x68
 8005e90:	e7e9      	b.n	8005e66 <_fwalk_reent+0x12>

08005e92 <__retarget_lock_init_recursive>:
 8005e92:	4770      	bx	lr

08005e94 <__retarget_lock_acquire_recursive>:
 8005e94:	4770      	bx	lr

08005e96 <__retarget_lock_release_recursive>:
 8005e96:	4770      	bx	lr

08005e98 <_malloc_r>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	1ccd      	adds	r5, r1, #3
 8005e9c:	f025 0503 	bic.w	r5, r5, #3
 8005ea0:	3508      	adds	r5, #8
 8005ea2:	2d0c      	cmp	r5, #12
 8005ea4:	bf38      	it	cc
 8005ea6:	250c      	movcc	r5, #12
 8005ea8:	2d00      	cmp	r5, #0
 8005eaa:	4606      	mov	r6, r0
 8005eac:	db01      	blt.n	8005eb2 <_malloc_r+0x1a>
 8005eae:	42a9      	cmp	r1, r5
 8005eb0:	d903      	bls.n	8005eba <_malloc_r+0x22>
 8005eb2:	230c      	movs	r3, #12
 8005eb4:	6033      	str	r3, [r6, #0]
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eba:	f000 fda3 	bl	8006a04 <__malloc_lock>
 8005ebe:	4921      	ldr	r1, [pc, #132]	; (8005f44 <_malloc_r+0xac>)
 8005ec0:	680a      	ldr	r2, [r1, #0]
 8005ec2:	4614      	mov	r4, r2
 8005ec4:	b99c      	cbnz	r4, 8005eee <_malloc_r+0x56>
 8005ec6:	4f20      	ldr	r7, [pc, #128]	; (8005f48 <_malloc_r+0xb0>)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	b923      	cbnz	r3, 8005ed6 <_malloc_r+0x3e>
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4630      	mov	r0, r6
 8005ed0:	f000 fb2a 	bl	8006528 <_sbrk_r>
 8005ed4:	6038      	str	r0, [r7, #0]
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	4630      	mov	r0, r6
 8005eda:	f000 fb25 	bl	8006528 <_sbrk_r>
 8005ede:	1c43      	adds	r3, r0, #1
 8005ee0:	d123      	bne.n	8005f2a <_malloc_r+0x92>
 8005ee2:	230c      	movs	r3, #12
 8005ee4:	6033      	str	r3, [r6, #0]
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f000 fd92 	bl	8006a10 <__malloc_unlock>
 8005eec:	e7e3      	b.n	8005eb6 <_malloc_r+0x1e>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	1b5b      	subs	r3, r3, r5
 8005ef2:	d417      	bmi.n	8005f24 <_malloc_r+0x8c>
 8005ef4:	2b0b      	cmp	r3, #11
 8005ef6:	d903      	bls.n	8005f00 <_malloc_r+0x68>
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	441c      	add	r4, r3
 8005efc:	6025      	str	r5, [r4, #0]
 8005efe:	e004      	b.n	8005f0a <_malloc_r+0x72>
 8005f00:	6863      	ldr	r3, [r4, #4]
 8005f02:	42a2      	cmp	r2, r4
 8005f04:	bf0c      	ite	eq
 8005f06:	600b      	streq	r3, [r1, #0]
 8005f08:	6053      	strne	r3, [r2, #4]
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	f000 fd80 	bl	8006a10 <__malloc_unlock>
 8005f10:	f104 000b 	add.w	r0, r4, #11
 8005f14:	1d23      	adds	r3, r4, #4
 8005f16:	f020 0007 	bic.w	r0, r0, #7
 8005f1a:	1ac2      	subs	r2, r0, r3
 8005f1c:	d0cc      	beq.n	8005eb8 <_malloc_r+0x20>
 8005f1e:	1a1b      	subs	r3, r3, r0
 8005f20:	50a3      	str	r3, [r4, r2]
 8005f22:	e7c9      	b.n	8005eb8 <_malloc_r+0x20>
 8005f24:	4622      	mov	r2, r4
 8005f26:	6864      	ldr	r4, [r4, #4]
 8005f28:	e7cc      	b.n	8005ec4 <_malloc_r+0x2c>
 8005f2a:	1cc4      	adds	r4, r0, #3
 8005f2c:	f024 0403 	bic.w	r4, r4, #3
 8005f30:	42a0      	cmp	r0, r4
 8005f32:	d0e3      	beq.n	8005efc <_malloc_r+0x64>
 8005f34:	1a21      	subs	r1, r4, r0
 8005f36:	4630      	mov	r0, r6
 8005f38:	f000 faf6 	bl	8006528 <_sbrk_r>
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d1dd      	bne.n	8005efc <_malloc_r+0x64>
 8005f40:	e7cf      	b.n	8005ee2 <_malloc_r+0x4a>
 8005f42:	bf00      	nop
 8005f44:	20000544 	.word	0x20000544
 8005f48:	20000548 	.word	0x20000548

08005f4c <__sfputc_r>:
 8005f4c:	6893      	ldr	r3, [r2, #8]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	b410      	push	{r4}
 8005f54:	6093      	str	r3, [r2, #8]
 8005f56:	da08      	bge.n	8005f6a <__sfputc_r+0x1e>
 8005f58:	6994      	ldr	r4, [r2, #24]
 8005f5a:	42a3      	cmp	r3, r4
 8005f5c:	db01      	blt.n	8005f62 <__sfputc_r+0x16>
 8005f5e:	290a      	cmp	r1, #10
 8005f60:	d103      	bne.n	8005f6a <__sfputc_r+0x1e>
 8005f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f66:	f000 bb33 	b.w	80065d0 <__swbuf_r>
 8005f6a:	6813      	ldr	r3, [r2, #0]
 8005f6c:	1c58      	adds	r0, r3, #1
 8005f6e:	6010      	str	r0, [r2, #0]
 8005f70:	7019      	strb	r1, [r3, #0]
 8005f72:	4608      	mov	r0, r1
 8005f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <__sfputs_r>:
 8005f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7c:	4606      	mov	r6, r0
 8005f7e:	460f      	mov	r7, r1
 8005f80:	4614      	mov	r4, r2
 8005f82:	18d5      	adds	r5, r2, r3
 8005f84:	42ac      	cmp	r4, r5
 8005f86:	d101      	bne.n	8005f8c <__sfputs_r+0x12>
 8005f88:	2000      	movs	r0, #0
 8005f8a:	e007      	b.n	8005f9c <__sfputs_r+0x22>
 8005f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f90:	463a      	mov	r2, r7
 8005f92:	4630      	mov	r0, r6
 8005f94:	f7ff ffda 	bl	8005f4c <__sfputc_r>
 8005f98:	1c43      	adds	r3, r0, #1
 8005f9a:	d1f3      	bne.n	8005f84 <__sfputs_r+0xa>
 8005f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fa0 <_vfiprintf_r>:
 8005fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa4:	460d      	mov	r5, r1
 8005fa6:	b09d      	sub	sp, #116	; 0x74
 8005fa8:	4614      	mov	r4, r2
 8005faa:	4698      	mov	r8, r3
 8005fac:	4606      	mov	r6, r0
 8005fae:	b118      	cbz	r0, 8005fb8 <_vfiprintf_r+0x18>
 8005fb0:	6983      	ldr	r3, [r0, #24]
 8005fb2:	b90b      	cbnz	r3, 8005fb8 <_vfiprintf_r+0x18>
 8005fb4:	f7ff fed0 	bl	8005d58 <__sinit>
 8005fb8:	4b89      	ldr	r3, [pc, #548]	; (80061e0 <_vfiprintf_r+0x240>)
 8005fba:	429d      	cmp	r5, r3
 8005fbc:	d11b      	bne.n	8005ff6 <_vfiprintf_r+0x56>
 8005fbe:	6875      	ldr	r5, [r6, #4]
 8005fc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fc2:	07d9      	lsls	r1, r3, #31
 8005fc4:	d405      	bmi.n	8005fd2 <_vfiprintf_r+0x32>
 8005fc6:	89ab      	ldrh	r3, [r5, #12]
 8005fc8:	059a      	lsls	r2, r3, #22
 8005fca:	d402      	bmi.n	8005fd2 <_vfiprintf_r+0x32>
 8005fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fce:	f7ff ff61 	bl	8005e94 <__retarget_lock_acquire_recursive>
 8005fd2:	89ab      	ldrh	r3, [r5, #12]
 8005fd4:	071b      	lsls	r3, r3, #28
 8005fd6:	d501      	bpl.n	8005fdc <_vfiprintf_r+0x3c>
 8005fd8:	692b      	ldr	r3, [r5, #16]
 8005fda:	b9eb      	cbnz	r3, 8006018 <_vfiprintf_r+0x78>
 8005fdc:	4629      	mov	r1, r5
 8005fde:	4630      	mov	r0, r6
 8005fe0:	f000 fb5a 	bl	8006698 <__swsetup_r>
 8005fe4:	b1c0      	cbz	r0, 8006018 <_vfiprintf_r+0x78>
 8005fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fe8:	07dc      	lsls	r4, r3, #31
 8005fea:	d50e      	bpl.n	800600a <_vfiprintf_r+0x6a>
 8005fec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff0:	b01d      	add	sp, #116	; 0x74
 8005ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff6:	4b7b      	ldr	r3, [pc, #492]	; (80061e4 <_vfiprintf_r+0x244>)
 8005ff8:	429d      	cmp	r5, r3
 8005ffa:	d101      	bne.n	8006000 <_vfiprintf_r+0x60>
 8005ffc:	68b5      	ldr	r5, [r6, #8]
 8005ffe:	e7df      	b.n	8005fc0 <_vfiprintf_r+0x20>
 8006000:	4b79      	ldr	r3, [pc, #484]	; (80061e8 <_vfiprintf_r+0x248>)
 8006002:	429d      	cmp	r5, r3
 8006004:	bf08      	it	eq
 8006006:	68f5      	ldreq	r5, [r6, #12]
 8006008:	e7da      	b.n	8005fc0 <_vfiprintf_r+0x20>
 800600a:	89ab      	ldrh	r3, [r5, #12]
 800600c:	0598      	lsls	r0, r3, #22
 800600e:	d4ed      	bmi.n	8005fec <_vfiprintf_r+0x4c>
 8006010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006012:	f7ff ff40 	bl	8005e96 <__retarget_lock_release_recursive>
 8006016:	e7e9      	b.n	8005fec <_vfiprintf_r+0x4c>
 8006018:	2300      	movs	r3, #0
 800601a:	9309      	str	r3, [sp, #36]	; 0x24
 800601c:	2320      	movs	r3, #32
 800601e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006022:	f8cd 800c 	str.w	r8, [sp, #12]
 8006026:	2330      	movs	r3, #48	; 0x30
 8006028:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80061ec <_vfiprintf_r+0x24c>
 800602c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006030:	f04f 0901 	mov.w	r9, #1
 8006034:	4623      	mov	r3, r4
 8006036:	469a      	mov	sl, r3
 8006038:	f813 2b01 	ldrb.w	r2, [r3], #1
 800603c:	b10a      	cbz	r2, 8006042 <_vfiprintf_r+0xa2>
 800603e:	2a25      	cmp	r2, #37	; 0x25
 8006040:	d1f9      	bne.n	8006036 <_vfiprintf_r+0x96>
 8006042:	ebba 0b04 	subs.w	fp, sl, r4
 8006046:	d00b      	beq.n	8006060 <_vfiprintf_r+0xc0>
 8006048:	465b      	mov	r3, fp
 800604a:	4622      	mov	r2, r4
 800604c:	4629      	mov	r1, r5
 800604e:	4630      	mov	r0, r6
 8006050:	f7ff ff93 	bl	8005f7a <__sfputs_r>
 8006054:	3001      	adds	r0, #1
 8006056:	f000 80aa 	beq.w	80061ae <_vfiprintf_r+0x20e>
 800605a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800605c:	445a      	add	r2, fp
 800605e:	9209      	str	r2, [sp, #36]	; 0x24
 8006060:	f89a 3000 	ldrb.w	r3, [sl]
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 80a2 	beq.w	80061ae <_vfiprintf_r+0x20e>
 800606a:	2300      	movs	r3, #0
 800606c:	f04f 32ff 	mov.w	r2, #4294967295
 8006070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006074:	f10a 0a01 	add.w	sl, sl, #1
 8006078:	9304      	str	r3, [sp, #16]
 800607a:	9307      	str	r3, [sp, #28]
 800607c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006080:	931a      	str	r3, [sp, #104]	; 0x68
 8006082:	4654      	mov	r4, sl
 8006084:	2205      	movs	r2, #5
 8006086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800608a:	4858      	ldr	r0, [pc, #352]	; (80061ec <_vfiprintf_r+0x24c>)
 800608c:	f7fa f8a0 	bl	80001d0 <memchr>
 8006090:	9a04      	ldr	r2, [sp, #16]
 8006092:	b9d8      	cbnz	r0, 80060cc <_vfiprintf_r+0x12c>
 8006094:	06d1      	lsls	r1, r2, #27
 8006096:	bf44      	itt	mi
 8006098:	2320      	movmi	r3, #32
 800609a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800609e:	0713      	lsls	r3, r2, #28
 80060a0:	bf44      	itt	mi
 80060a2:	232b      	movmi	r3, #43	; 0x2b
 80060a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060a8:	f89a 3000 	ldrb.w	r3, [sl]
 80060ac:	2b2a      	cmp	r3, #42	; 0x2a
 80060ae:	d015      	beq.n	80060dc <_vfiprintf_r+0x13c>
 80060b0:	9a07      	ldr	r2, [sp, #28]
 80060b2:	4654      	mov	r4, sl
 80060b4:	2000      	movs	r0, #0
 80060b6:	f04f 0c0a 	mov.w	ip, #10
 80060ba:	4621      	mov	r1, r4
 80060bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060c0:	3b30      	subs	r3, #48	; 0x30
 80060c2:	2b09      	cmp	r3, #9
 80060c4:	d94e      	bls.n	8006164 <_vfiprintf_r+0x1c4>
 80060c6:	b1b0      	cbz	r0, 80060f6 <_vfiprintf_r+0x156>
 80060c8:	9207      	str	r2, [sp, #28]
 80060ca:	e014      	b.n	80060f6 <_vfiprintf_r+0x156>
 80060cc:	eba0 0308 	sub.w	r3, r0, r8
 80060d0:	fa09 f303 	lsl.w	r3, r9, r3
 80060d4:	4313      	orrs	r3, r2
 80060d6:	9304      	str	r3, [sp, #16]
 80060d8:	46a2      	mov	sl, r4
 80060da:	e7d2      	b.n	8006082 <_vfiprintf_r+0xe2>
 80060dc:	9b03      	ldr	r3, [sp, #12]
 80060de:	1d19      	adds	r1, r3, #4
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	9103      	str	r1, [sp, #12]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	bfbb      	ittet	lt
 80060e8:	425b      	neglt	r3, r3
 80060ea:	f042 0202 	orrlt.w	r2, r2, #2
 80060ee:	9307      	strge	r3, [sp, #28]
 80060f0:	9307      	strlt	r3, [sp, #28]
 80060f2:	bfb8      	it	lt
 80060f4:	9204      	strlt	r2, [sp, #16]
 80060f6:	7823      	ldrb	r3, [r4, #0]
 80060f8:	2b2e      	cmp	r3, #46	; 0x2e
 80060fa:	d10c      	bne.n	8006116 <_vfiprintf_r+0x176>
 80060fc:	7863      	ldrb	r3, [r4, #1]
 80060fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006100:	d135      	bne.n	800616e <_vfiprintf_r+0x1ce>
 8006102:	9b03      	ldr	r3, [sp, #12]
 8006104:	1d1a      	adds	r2, r3, #4
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	9203      	str	r2, [sp, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	bfb8      	it	lt
 800610e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006112:	3402      	adds	r4, #2
 8006114:	9305      	str	r3, [sp, #20]
 8006116:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80061fc <_vfiprintf_r+0x25c>
 800611a:	7821      	ldrb	r1, [r4, #0]
 800611c:	2203      	movs	r2, #3
 800611e:	4650      	mov	r0, sl
 8006120:	f7fa f856 	bl	80001d0 <memchr>
 8006124:	b140      	cbz	r0, 8006138 <_vfiprintf_r+0x198>
 8006126:	2340      	movs	r3, #64	; 0x40
 8006128:	eba0 000a 	sub.w	r0, r0, sl
 800612c:	fa03 f000 	lsl.w	r0, r3, r0
 8006130:	9b04      	ldr	r3, [sp, #16]
 8006132:	4303      	orrs	r3, r0
 8006134:	3401      	adds	r4, #1
 8006136:	9304      	str	r3, [sp, #16]
 8006138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800613c:	482c      	ldr	r0, [pc, #176]	; (80061f0 <_vfiprintf_r+0x250>)
 800613e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006142:	2206      	movs	r2, #6
 8006144:	f7fa f844 	bl	80001d0 <memchr>
 8006148:	2800      	cmp	r0, #0
 800614a:	d03f      	beq.n	80061cc <_vfiprintf_r+0x22c>
 800614c:	4b29      	ldr	r3, [pc, #164]	; (80061f4 <_vfiprintf_r+0x254>)
 800614e:	bb1b      	cbnz	r3, 8006198 <_vfiprintf_r+0x1f8>
 8006150:	9b03      	ldr	r3, [sp, #12]
 8006152:	3307      	adds	r3, #7
 8006154:	f023 0307 	bic.w	r3, r3, #7
 8006158:	3308      	adds	r3, #8
 800615a:	9303      	str	r3, [sp, #12]
 800615c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800615e:	443b      	add	r3, r7
 8006160:	9309      	str	r3, [sp, #36]	; 0x24
 8006162:	e767      	b.n	8006034 <_vfiprintf_r+0x94>
 8006164:	fb0c 3202 	mla	r2, ip, r2, r3
 8006168:	460c      	mov	r4, r1
 800616a:	2001      	movs	r0, #1
 800616c:	e7a5      	b.n	80060ba <_vfiprintf_r+0x11a>
 800616e:	2300      	movs	r3, #0
 8006170:	3401      	adds	r4, #1
 8006172:	9305      	str	r3, [sp, #20]
 8006174:	4619      	mov	r1, r3
 8006176:	f04f 0c0a 	mov.w	ip, #10
 800617a:	4620      	mov	r0, r4
 800617c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006180:	3a30      	subs	r2, #48	; 0x30
 8006182:	2a09      	cmp	r2, #9
 8006184:	d903      	bls.n	800618e <_vfiprintf_r+0x1ee>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d0c5      	beq.n	8006116 <_vfiprintf_r+0x176>
 800618a:	9105      	str	r1, [sp, #20]
 800618c:	e7c3      	b.n	8006116 <_vfiprintf_r+0x176>
 800618e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006192:	4604      	mov	r4, r0
 8006194:	2301      	movs	r3, #1
 8006196:	e7f0      	b.n	800617a <_vfiprintf_r+0x1da>
 8006198:	ab03      	add	r3, sp, #12
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	462a      	mov	r2, r5
 800619e:	4b16      	ldr	r3, [pc, #88]	; (80061f8 <_vfiprintf_r+0x258>)
 80061a0:	a904      	add	r1, sp, #16
 80061a2:	4630      	mov	r0, r6
 80061a4:	f3af 8000 	nop.w
 80061a8:	4607      	mov	r7, r0
 80061aa:	1c78      	adds	r0, r7, #1
 80061ac:	d1d6      	bne.n	800615c <_vfiprintf_r+0x1bc>
 80061ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061b0:	07d9      	lsls	r1, r3, #31
 80061b2:	d405      	bmi.n	80061c0 <_vfiprintf_r+0x220>
 80061b4:	89ab      	ldrh	r3, [r5, #12]
 80061b6:	059a      	lsls	r2, r3, #22
 80061b8:	d402      	bmi.n	80061c0 <_vfiprintf_r+0x220>
 80061ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061bc:	f7ff fe6b 	bl	8005e96 <__retarget_lock_release_recursive>
 80061c0:	89ab      	ldrh	r3, [r5, #12]
 80061c2:	065b      	lsls	r3, r3, #25
 80061c4:	f53f af12 	bmi.w	8005fec <_vfiprintf_r+0x4c>
 80061c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061ca:	e711      	b.n	8005ff0 <_vfiprintf_r+0x50>
 80061cc:	ab03      	add	r3, sp, #12
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	462a      	mov	r2, r5
 80061d2:	4b09      	ldr	r3, [pc, #36]	; (80061f8 <_vfiprintf_r+0x258>)
 80061d4:	a904      	add	r1, sp, #16
 80061d6:	4630      	mov	r0, r6
 80061d8:	f000 f880 	bl	80062dc <_printf_i>
 80061dc:	e7e4      	b.n	80061a8 <_vfiprintf_r+0x208>
 80061de:	bf00      	nop
 80061e0:	08007efc 	.word	0x08007efc
 80061e4:	08007f1c 	.word	0x08007f1c
 80061e8:	08007edc 	.word	0x08007edc
 80061ec:	08007f3c 	.word	0x08007f3c
 80061f0:	08007f46 	.word	0x08007f46
 80061f4:	00000000 	.word	0x00000000
 80061f8:	08005f7b 	.word	0x08005f7b
 80061fc:	08007f42 	.word	0x08007f42

08006200 <_printf_common>:
 8006200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006204:	4616      	mov	r6, r2
 8006206:	4699      	mov	r9, r3
 8006208:	688a      	ldr	r2, [r1, #8]
 800620a:	690b      	ldr	r3, [r1, #16]
 800620c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006210:	4293      	cmp	r3, r2
 8006212:	bfb8      	it	lt
 8006214:	4613      	movlt	r3, r2
 8006216:	6033      	str	r3, [r6, #0]
 8006218:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800621c:	4607      	mov	r7, r0
 800621e:	460c      	mov	r4, r1
 8006220:	b10a      	cbz	r2, 8006226 <_printf_common+0x26>
 8006222:	3301      	adds	r3, #1
 8006224:	6033      	str	r3, [r6, #0]
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	0699      	lsls	r1, r3, #26
 800622a:	bf42      	ittt	mi
 800622c:	6833      	ldrmi	r3, [r6, #0]
 800622e:	3302      	addmi	r3, #2
 8006230:	6033      	strmi	r3, [r6, #0]
 8006232:	6825      	ldr	r5, [r4, #0]
 8006234:	f015 0506 	ands.w	r5, r5, #6
 8006238:	d106      	bne.n	8006248 <_printf_common+0x48>
 800623a:	f104 0a19 	add.w	sl, r4, #25
 800623e:	68e3      	ldr	r3, [r4, #12]
 8006240:	6832      	ldr	r2, [r6, #0]
 8006242:	1a9b      	subs	r3, r3, r2
 8006244:	42ab      	cmp	r3, r5
 8006246:	dc26      	bgt.n	8006296 <_printf_common+0x96>
 8006248:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800624c:	1e13      	subs	r3, r2, #0
 800624e:	6822      	ldr	r2, [r4, #0]
 8006250:	bf18      	it	ne
 8006252:	2301      	movne	r3, #1
 8006254:	0692      	lsls	r2, r2, #26
 8006256:	d42b      	bmi.n	80062b0 <_printf_common+0xb0>
 8006258:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800625c:	4649      	mov	r1, r9
 800625e:	4638      	mov	r0, r7
 8006260:	47c0      	blx	r8
 8006262:	3001      	adds	r0, #1
 8006264:	d01e      	beq.n	80062a4 <_printf_common+0xa4>
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	68e5      	ldr	r5, [r4, #12]
 800626a:	6832      	ldr	r2, [r6, #0]
 800626c:	f003 0306 	and.w	r3, r3, #6
 8006270:	2b04      	cmp	r3, #4
 8006272:	bf08      	it	eq
 8006274:	1aad      	subeq	r5, r5, r2
 8006276:	68a3      	ldr	r3, [r4, #8]
 8006278:	6922      	ldr	r2, [r4, #16]
 800627a:	bf0c      	ite	eq
 800627c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006280:	2500      	movne	r5, #0
 8006282:	4293      	cmp	r3, r2
 8006284:	bfc4      	itt	gt
 8006286:	1a9b      	subgt	r3, r3, r2
 8006288:	18ed      	addgt	r5, r5, r3
 800628a:	2600      	movs	r6, #0
 800628c:	341a      	adds	r4, #26
 800628e:	42b5      	cmp	r5, r6
 8006290:	d11a      	bne.n	80062c8 <_printf_common+0xc8>
 8006292:	2000      	movs	r0, #0
 8006294:	e008      	b.n	80062a8 <_printf_common+0xa8>
 8006296:	2301      	movs	r3, #1
 8006298:	4652      	mov	r2, sl
 800629a:	4649      	mov	r1, r9
 800629c:	4638      	mov	r0, r7
 800629e:	47c0      	blx	r8
 80062a0:	3001      	adds	r0, #1
 80062a2:	d103      	bne.n	80062ac <_printf_common+0xac>
 80062a4:	f04f 30ff 	mov.w	r0, #4294967295
 80062a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ac:	3501      	adds	r5, #1
 80062ae:	e7c6      	b.n	800623e <_printf_common+0x3e>
 80062b0:	18e1      	adds	r1, r4, r3
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	2030      	movs	r0, #48	; 0x30
 80062b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062ba:	4422      	add	r2, r4
 80062bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062c4:	3302      	adds	r3, #2
 80062c6:	e7c7      	b.n	8006258 <_printf_common+0x58>
 80062c8:	2301      	movs	r3, #1
 80062ca:	4622      	mov	r2, r4
 80062cc:	4649      	mov	r1, r9
 80062ce:	4638      	mov	r0, r7
 80062d0:	47c0      	blx	r8
 80062d2:	3001      	adds	r0, #1
 80062d4:	d0e6      	beq.n	80062a4 <_printf_common+0xa4>
 80062d6:	3601      	adds	r6, #1
 80062d8:	e7d9      	b.n	800628e <_printf_common+0x8e>
	...

080062dc <_printf_i>:
 80062dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062e0:	460c      	mov	r4, r1
 80062e2:	4691      	mov	r9, r2
 80062e4:	7e27      	ldrb	r7, [r4, #24]
 80062e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80062e8:	2f78      	cmp	r7, #120	; 0x78
 80062ea:	4680      	mov	r8, r0
 80062ec:	469a      	mov	sl, r3
 80062ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062f2:	d807      	bhi.n	8006304 <_printf_i+0x28>
 80062f4:	2f62      	cmp	r7, #98	; 0x62
 80062f6:	d80a      	bhi.n	800630e <_printf_i+0x32>
 80062f8:	2f00      	cmp	r7, #0
 80062fa:	f000 80d8 	beq.w	80064ae <_printf_i+0x1d2>
 80062fe:	2f58      	cmp	r7, #88	; 0x58
 8006300:	f000 80a3 	beq.w	800644a <_printf_i+0x16e>
 8006304:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006308:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800630c:	e03a      	b.n	8006384 <_printf_i+0xa8>
 800630e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006312:	2b15      	cmp	r3, #21
 8006314:	d8f6      	bhi.n	8006304 <_printf_i+0x28>
 8006316:	a001      	add	r0, pc, #4	; (adr r0, 800631c <_printf_i+0x40>)
 8006318:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800631c:	08006375 	.word	0x08006375
 8006320:	08006389 	.word	0x08006389
 8006324:	08006305 	.word	0x08006305
 8006328:	08006305 	.word	0x08006305
 800632c:	08006305 	.word	0x08006305
 8006330:	08006305 	.word	0x08006305
 8006334:	08006389 	.word	0x08006389
 8006338:	08006305 	.word	0x08006305
 800633c:	08006305 	.word	0x08006305
 8006340:	08006305 	.word	0x08006305
 8006344:	08006305 	.word	0x08006305
 8006348:	08006495 	.word	0x08006495
 800634c:	080063b9 	.word	0x080063b9
 8006350:	08006477 	.word	0x08006477
 8006354:	08006305 	.word	0x08006305
 8006358:	08006305 	.word	0x08006305
 800635c:	080064b7 	.word	0x080064b7
 8006360:	08006305 	.word	0x08006305
 8006364:	080063b9 	.word	0x080063b9
 8006368:	08006305 	.word	0x08006305
 800636c:	08006305 	.word	0x08006305
 8006370:	0800647f 	.word	0x0800647f
 8006374:	680b      	ldr	r3, [r1, #0]
 8006376:	1d1a      	adds	r2, r3, #4
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	600a      	str	r2, [r1, #0]
 800637c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006384:	2301      	movs	r3, #1
 8006386:	e0a3      	b.n	80064d0 <_printf_i+0x1f4>
 8006388:	6825      	ldr	r5, [r4, #0]
 800638a:	6808      	ldr	r0, [r1, #0]
 800638c:	062e      	lsls	r6, r5, #24
 800638e:	f100 0304 	add.w	r3, r0, #4
 8006392:	d50a      	bpl.n	80063aa <_printf_i+0xce>
 8006394:	6805      	ldr	r5, [r0, #0]
 8006396:	600b      	str	r3, [r1, #0]
 8006398:	2d00      	cmp	r5, #0
 800639a:	da03      	bge.n	80063a4 <_printf_i+0xc8>
 800639c:	232d      	movs	r3, #45	; 0x2d
 800639e:	426d      	negs	r5, r5
 80063a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063a4:	485e      	ldr	r0, [pc, #376]	; (8006520 <_printf_i+0x244>)
 80063a6:	230a      	movs	r3, #10
 80063a8:	e019      	b.n	80063de <_printf_i+0x102>
 80063aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80063ae:	6805      	ldr	r5, [r0, #0]
 80063b0:	600b      	str	r3, [r1, #0]
 80063b2:	bf18      	it	ne
 80063b4:	b22d      	sxthne	r5, r5
 80063b6:	e7ef      	b.n	8006398 <_printf_i+0xbc>
 80063b8:	680b      	ldr	r3, [r1, #0]
 80063ba:	6825      	ldr	r5, [r4, #0]
 80063bc:	1d18      	adds	r0, r3, #4
 80063be:	6008      	str	r0, [r1, #0]
 80063c0:	0628      	lsls	r0, r5, #24
 80063c2:	d501      	bpl.n	80063c8 <_printf_i+0xec>
 80063c4:	681d      	ldr	r5, [r3, #0]
 80063c6:	e002      	b.n	80063ce <_printf_i+0xf2>
 80063c8:	0669      	lsls	r1, r5, #25
 80063ca:	d5fb      	bpl.n	80063c4 <_printf_i+0xe8>
 80063cc:	881d      	ldrh	r5, [r3, #0]
 80063ce:	4854      	ldr	r0, [pc, #336]	; (8006520 <_printf_i+0x244>)
 80063d0:	2f6f      	cmp	r7, #111	; 0x6f
 80063d2:	bf0c      	ite	eq
 80063d4:	2308      	moveq	r3, #8
 80063d6:	230a      	movne	r3, #10
 80063d8:	2100      	movs	r1, #0
 80063da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063de:	6866      	ldr	r6, [r4, #4]
 80063e0:	60a6      	str	r6, [r4, #8]
 80063e2:	2e00      	cmp	r6, #0
 80063e4:	bfa2      	ittt	ge
 80063e6:	6821      	ldrge	r1, [r4, #0]
 80063e8:	f021 0104 	bicge.w	r1, r1, #4
 80063ec:	6021      	strge	r1, [r4, #0]
 80063ee:	b90d      	cbnz	r5, 80063f4 <_printf_i+0x118>
 80063f0:	2e00      	cmp	r6, #0
 80063f2:	d04d      	beq.n	8006490 <_printf_i+0x1b4>
 80063f4:	4616      	mov	r6, r2
 80063f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80063fa:	fb03 5711 	mls	r7, r3, r1, r5
 80063fe:	5dc7      	ldrb	r7, [r0, r7]
 8006400:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006404:	462f      	mov	r7, r5
 8006406:	42bb      	cmp	r3, r7
 8006408:	460d      	mov	r5, r1
 800640a:	d9f4      	bls.n	80063f6 <_printf_i+0x11a>
 800640c:	2b08      	cmp	r3, #8
 800640e:	d10b      	bne.n	8006428 <_printf_i+0x14c>
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	07df      	lsls	r7, r3, #31
 8006414:	d508      	bpl.n	8006428 <_printf_i+0x14c>
 8006416:	6923      	ldr	r3, [r4, #16]
 8006418:	6861      	ldr	r1, [r4, #4]
 800641a:	4299      	cmp	r1, r3
 800641c:	bfde      	ittt	le
 800641e:	2330      	movle	r3, #48	; 0x30
 8006420:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006424:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006428:	1b92      	subs	r2, r2, r6
 800642a:	6122      	str	r2, [r4, #16]
 800642c:	f8cd a000 	str.w	sl, [sp]
 8006430:	464b      	mov	r3, r9
 8006432:	aa03      	add	r2, sp, #12
 8006434:	4621      	mov	r1, r4
 8006436:	4640      	mov	r0, r8
 8006438:	f7ff fee2 	bl	8006200 <_printf_common>
 800643c:	3001      	adds	r0, #1
 800643e:	d14c      	bne.n	80064da <_printf_i+0x1fe>
 8006440:	f04f 30ff 	mov.w	r0, #4294967295
 8006444:	b004      	add	sp, #16
 8006446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800644a:	4835      	ldr	r0, [pc, #212]	; (8006520 <_printf_i+0x244>)
 800644c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	680e      	ldr	r6, [r1, #0]
 8006454:	061f      	lsls	r7, r3, #24
 8006456:	f856 5b04 	ldr.w	r5, [r6], #4
 800645a:	600e      	str	r6, [r1, #0]
 800645c:	d514      	bpl.n	8006488 <_printf_i+0x1ac>
 800645e:	07d9      	lsls	r1, r3, #31
 8006460:	bf44      	itt	mi
 8006462:	f043 0320 	orrmi.w	r3, r3, #32
 8006466:	6023      	strmi	r3, [r4, #0]
 8006468:	b91d      	cbnz	r5, 8006472 <_printf_i+0x196>
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	f023 0320 	bic.w	r3, r3, #32
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	2310      	movs	r3, #16
 8006474:	e7b0      	b.n	80063d8 <_printf_i+0xfc>
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	f043 0320 	orr.w	r3, r3, #32
 800647c:	6023      	str	r3, [r4, #0]
 800647e:	2378      	movs	r3, #120	; 0x78
 8006480:	4828      	ldr	r0, [pc, #160]	; (8006524 <_printf_i+0x248>)
 8006482:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006486:	e7e3      	b.n	8006450 <_printf_i+0x174>
 8006488:	065e      	lsls	r6, r3, #25
 800648a:	bf48      	it	mi
 800648c:	b2ad      	uxthmi	r5, r5
 800648e:	e7e6      	b.n	800645e <_printf_i+0x182>
 8006490:	4616      	mov	r6, r2
 8006492:	e7bb      	b.n	800640c <_printf_i+0x130>
 8006494:	680b      	ldr	r3, [r1, #0]
 8006496:	6826      	ldr	r6, [r4, #0]
 8006498:	6960      	ldr	r0, [r4, #20]
 800649a:	1d1d      	adds	r5, r3, #4
 800649c:	600d      	str	r5, [r1, #0]
 800649e:	0635      	lsls	r5, r6, #24
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	d501      	bpl.n	80064a8 <_printf_i+0x1cc>
 80064a4:	6018      	str	r0, [r3, #0]
 80064a6:	e002      	b.n	80064ae <_printf_i+0x1d2>
 80064a8:	0671      	lsls	r1, r6, #25
 80064aa:	d5fb      	bpl.n	80064a4 <_printf_i+0x1c8>
 80064ac:	8018      	strh	r0, [r3, #0]
 80064ae:	2300      	movs	r3, #0
 80064b0:	6123      	str	r3, [r4, #16]
 80064b2:	4616      	mov	r6, r2
 80064b4:	e7ba      	b.n	800642c <_printf_i+0x150>
 80064b6:	680b      	ldr	r3, [r1, #0]
 80064b8:	1d1a      	adds	r2, r3, #4
 80064ba:	600a      	str	r2, [r1, #0]
 80064bc:	681e      	ldr	r6, [r3, #0]
 80064be:	6862      	ldr	r2, [r4, #4]
 80064c0:	2100      	movs	r1, #0
 80064c2:	4630      	mov	r0, r6
 80064c4:	f7f9 fe84 	bl	80001d0 <memchr>
 80064c8:	b108      	cbz	r0, 80064ce <_printf_i+0x1f2>
 80064ca:	1b80      	subs	r0, r0, r6
 80064cc:	6060      	str	r0, [r4, #4]
 80064ce:	6863      	ldr	r3, [r4, #4]
 80064d0:	6123      	str	r3, [r4, #16]
 80064d2:	2300      	movs	r3, #0
 80064d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064d8:	e7a8      	b.n	800642c <_printf_i+0x150>
 80064da:	6923      	ldr	r3, [r4, #16]
 80064dc:	4632      	mov	r2, r6
 80064de:	4649      	mov	r1, r9
 80064e0:	4640      	mov	r0, r8
 80064e2:	47d0      	blx	sl
 80064e4:	3001      	adds	r0, #1
 80064e6:	d0ab      	beq.n	8006440 <_printf_i+0x164>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	079b      	lsls	r3, r3, #30
 80064ec:	d413      	bmi.n	8006516 <_printf_i+0x23a>
 80064ee:	68e0      	ldr	r0, [r4, #12]
 80064f0:	9b03      	ldr	r3, [sp, #12]
 80064f2:	4298      	cmp	r0, r3
 80064f4:	bfb8      	it	lt
 80064f6:	4618      	movlt	r0, r3
 80064f8:	e7a4      	b.n	8006444 <_printf_i+0x168>
 80064fa:	2301      	movs	r3, #1
 80064fc:	4632      	mov	r2, r6
 80064fe:	4649      	mov	r1, r9
 8006500:	4640      	mov	r0, r8
 8006502:	47d0      	blx	sl
 8006504:	3001      	adds	r0, #1
 8006506:	d09b      	beq.n	8006440 <_printf_i+0x164>
 8006508:	3501      	adds	r5, #1
 800650a:	68e3      	ldr	r3, [r4, #12]
 800650c:	9903      	ldr	r1, [sp, #12]
 800650e:	1a5b      	subs	r3, r3, r1
 8006510:	42ab      	cmp	r3, r5
 8006512:	dcf2      	bgt.n	80064fa <_printf_i+0x21e>
 8006514:	e7eb      	b.n	80064ee <_printf_i+0x212>
 8006516:	2500      	movs	r5, #0
 8006518:	f104 0619 	add.w	r6, r4, #25
 800651c:	e7f5      	b.n	800650a <_printf_i+0x22e>
 800651e:	bf00      	nop
 8006520:	08007f4d 	.word	0x08007f4d
 8006524:	08007f5e 	.word	0x08007f5e

08006528 <_sbrk_r>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	4d06      	ldr	r5, [pc, #24]	; (8006544 <_sbrk_r+0x1c>)
 800652c:	2300      	movs	r3, #0
 800652e:	4604      	mov	r4, r0
 8006530:	4608      	mov	r0, r1
 8006532:	602b      	str	r3, [r5, #0]
 8006534:	f7fa fee0 	bl	80012f8 <_sbrk>
 8006538:	1c43      	adds	r3, r0, #1
 800653a:	d102      	bne.n	8006542 <_sbrk_r+0x1a>
 800653c:	682b      	ldr	r3, [r5, #0]
 800653e:	b103      	cbz	r3, 8006542 <_sbrk_r+0x1a>
 8006540:	6023      	str	r3, [r4, #0]
 8006542:	bd38      	pop	{r3, r4, r5, pc}
 8006544:	2000097c 	.word	0x2000097c

08006548 <__sread>:
 8006548:	b510      	push	{r4, lr}
 800654a:	460c      	mov	r4, r1
 800654c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006550:	f000 fab4 	bl	8006abc <_read_r>
 8006554:	2800      	cmp	r0, #0
 8006556:	bfab      	itete	ge
 8006558:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800655a:	89a3      	ldrhlt	r3, [r4, #12]
 800655c:	181b      	addge	r3, r3, r0
 800655e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006562:	bfac      	ite	ge
 8006564:	6563      	strge	r3, [r4, #84]	; 0x54
 8006566:	81a3      	strhlt	r3, [r4, #12]
 8006568:	bd10      	pop	{r4, pc}

0800656a <__swrite>:
 800656a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800656e:	461f      	mov	r7, r3
 8006570:	898b      	ldrh	r3, [r1, #12]
 8006572:	05db      	lsls	r3, r3, #23
 8006574:	4605      	mov	r5, r0
 8006576:	460c      	mov	r4, r1
 8006578:	4616      	mov	r6, r2
 800657a:	d505      	bpl.n	8006588 <__swrite+0x1e>
 800657c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006580:	2302      	movs	r3, #2
 8006582:	2200      	movs	r2, #0
 8006584:	f000 f9c8 	bl	8006918 <_lseek_r>
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800658e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006592:	81a3      	strh	r3, [r4, #12]
 8006594:	4632      	mov	r2, r6
 8006596:	463b      	mov	r3, r7
 8006598:	4628      	mov	r0, r5
 800659a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800659e:	f000 b869 	b.w	8006674 <_write_r>

080065a2 <__sseek>:
 80065a2:	b510      	push	{r4, lr}
 80065a4:	460c      	mov	r4, r1
 80065a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065aa:	f000 f9b5 	bl	8006918 <_lseek_r>
 80065ae:	1c43      	adds	r3, r0, #1
 80065b0:	89a3      	ldrh	r3, [r4, #12]
 80065b2:	bf15      	itete	ne
 80065b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80065b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065be:	81a3      	strheq	r3, [r4, #12]
 80065c0:	bf18      	it	ne
 80065c2:	81a3      	strhne	r3, [r4, #12]
 80065c4:	bd10      	pop	{r4, pc}

080065c6 <__sclose>:
 80065c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ca:	f000 b8d3 	b.w	8006774 <_close_r>
	...

080065d0 <__swbuf_r>:
 80065d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d2:	460e      	mov	r6, r1
 80065d4:	4614      	mov	r4, r2
 80065d6:	4605      	mov	r5, r0
 80065d8:	b118      	cbz	r0, 80065e2 <__swbuf_r+0x12>
 80065da:	6983      	ldr	r3, [r0, #24]
 80065dc:	b90b      	cbnz	r3, 80065e2 <__swbuf_r+0x12>
 80065de:	f7ff fbbb 	bl	8005d58 <__sinit>
 80065e2:	4b21      	ldr	r3, [pc, #132]	; (8006668 <__swbuf_r+0x98>)
 80065e4:	429c      	cmp	r4, r3
 80065e6:	d12b      	bne.n	8006640 <__swbuf_r+0x70>
 80065e8:	686c      	ldr	r4, [r5, #4]
 80065ea:	69a3      	ldr	r3, [r4, #24]
 80065ec:	60a3      	str	r3, [r4, #8]
 80065ee:	89a3      	ldrh	r3, [r4, #12]
 80065f0:	071a      	lsls	r2, r3, #28
 80065f2:	d52f      	bpl.n	8006654 <__swbuf_r+0x84>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	b36b      	cbz	r3, 8006654 <__swbuf_r+0x84>
 80065f8:	6923      	ldr	r3, [r4, #16]
 80065fa:	6820      	ldr	r0, [r4, #0]
 80065fc:	1ac0      	subs	r0, r0, r3
 80065fe:	6963      	ldr	r3, [r4, #20]
 8006600:	b2f6      	uxtb	r6, r6
 8006602:	4283      	cmp	r3, r0
 8006604:	4637      	mov	r7, r6
 8006606:	dc04      	bgt.n	8006612 <__swbuf_r+0x42>
 8006608:	4621      	mov	r1, r4
 800660a:	4628      	mov	r0, r5
 800660c:	f000 f948 	bl	80068a0 <_fflush_r>
 8006610:	bb30      	cbnz	r0, 8006660 <__swbuf_r+0x90>
 8006612:	68a3      	ldr	r3, [r4, #8]
 8006614:	3b01      	subs	r3, #1
 8006616:	60a3      	str	r3, [r4, #8]
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	6022      	str	r2, [r4, #0]
 800661e:	701e      	strb	r6, [r3, #0]
 8006620:	6963      	ldr	r3, [r4, #20]
 8006622:	3001      	adds	r0, #1
 8006624:	4283      	cmp	r3, r0
 8006626:	d004      	beq.n	8006632 <__swbuf_r+0x62>
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	07db      	lsls	r3, r3, #31
 800662c:	d506      	bpl.n	800663c <__swbuf_r+0x6c>
 800662e:	2e0a      	cmp	r6, #10
 8006630:	d104      	bne.n	800663c <__swbuf_r+0x6c>
 8006632:	4621      	mov	r1, r4
 8006634:	4628      	mov	r0, r5
 8006636:	f000 f933 	bl	80068a0 <_fflush_r>
 800663a:	b988      	cbnz	r0, 8006660 <__swbuf_r+0x90>
 800663c:	4638      	mov	r0, r7
 800663e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006640:	4b0a      	ldr	r3, [pc, #40]	; (800666c <__swbuf_r+0x9c>)
 8006642:	429c      	cmp	r4, r3
 8006644:	d101      	bne.n	800664a <__swbuf_r+0x7a>
 8006646:	68ac      	ldr	r4, [r5, #8]
 8006648:	e7cf      	b.n	80065ea <__swbuf_r+0x1a>
 800664a:	4b09      	ldr	r3, [pc, #36]	; (8006670 <__swbuf_r+0xa0>)
 800664c:	429c      	cmp	r4, r3
 800664e:	bf08      	it	eq
 8006650:	68ec      	ldreq	r4, [r5, #12]
 8006652:	e7ca      	b.n	80065ea <__swbuf_r+0x1a>
 8006654:	4621      	mov	r1, r4
 8006656:	4628      	mov	r0, r5
 8006658:	f000 f81e 	bl	8006698 <__swsetup_r>
 800665c:	2800      	cmp	r0, #0
 800665e:	d0cb      	beq.n	80065f8 <__swbuf_r+0x28>
 8006660:	f04f 37ff 	mov.w	r7, #4294967295
 8006664:	e7ea      	b.n	800663c <__swbuf_r+0x6c>
 8006666:	bf00      	nop
 8006668:	08007efc 	.word	0x08007efc
 800666c:	08007f1c 	.word	0x08007f1c
 8006670:	08007edc 	.word	0x08007edc

08006674 <_write_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4d07      	ldr	r5, [pc, #28]	; (8006694 <_write_r+0x20>)
 8006678:	4604      	mov	r4, r0
 800667a:	4608      	mov	r0, r1
 800667c:	4611      	mov	r1, r2
 800667e:	2200      	movs	r2, #0
 8006680:	602a      	str	r2, [r5, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	f7fa fde7 	bl	8001256 <_write>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	d102      	bne.n	8006692 <_write_r+0x1e>
 800668c:	682b      	ldr	r3, [r5, #0]
 800668e:	b103      	cbz	r3, 8006692 <_write_r+0x1e>
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	2000097c 	.word	0x2000097c

08006698 <__swsetup_r>:
 8006698:	4b32      	ldr	r3, [pc, #200]	; (8006764 <__swsetup_r+0xcc>)
 800669a:	b570      	push	{r4, r5, r6, lr}
 800669c:	681d      	ldr	r5, [r3, #0]
 800669e:	4606      	mov	r6, r0
 80066a0:	460c      	mov	r4, r1
 80066a2:	b125      	cbz	r5, 80066ae <__swsetup_r+0x16>
 80066a4:	69ab      	ldr	r3, [r5, #24]
 80066a6:	b913      	cbnz	r3, 80066ae <__swsetup_r+0x16>
 80066a8:	4628      	mov	r0, r5
 80066aa:	f7ff fb55 	bl	8005d58 <__sinit>
 80066ae:	4b2e      	ldr	r3, [pc, #184]	; (8006768 <__swsetup_r+0xd0>)
 80066b0:	429c      	cmp	r4, r3
 80066b2:	d10f      	bne.n	80066d4 <__swsetup_r+0x3c>
 80066b4:	686c      	ldr	r4, [r5, #4]
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066bc:	0719      	lsls	r1, r3, #28
 80066be:	d42c      	bmi.n	800671a <__swsetup_r+0x82>
 80066c0:	06dd      	lsls	r5, r3, #27
 80066c2:	d411      	bmi.n	80066e8 <__swsetup_r+0x50>
 80066c4:	2309      	movs	r3, #9
 80066c6:	6033      	str	r3, [r6, #0]
 80066c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	f04f 30ff 	mov.w	r0, #4294967295
 80066d2:	e03e      	b.n	8006752 <__swsetup_r+0xba>
 80066d4:	4b25      	ldr	r3, [pc, #148]	; (800676c <__swsetup_r+0xd4>)
 80066d6:	429c      	cmp	r4, r3
 80066d8:	d101      	bne.n	80066de <__swsetup_r+0x46>
 80066da:	68ac      	ldr	r4, [r5, #8]
 80066dc:	e7eb      	b.n	80066b6 <__swsetup_r+0x1e>
 80066de:	4b24      	ldr	r3, [pc, #144]	; (8006770 <__swsetup_r+0xd8>)
 80066e0:	429c      	cmp	r4, r3
 80066e2:	bf08      	it	eq
 80066e4:	68ec      	ldreq	r4, [r5, #12]
 80066e6:	e7e6      	b.n	80066b6 <__swsetup_r+0x1e>
 80066e8:	0758      	lsls	r0, r3, #29
 80066ea:	d512      	bpl.n	8006712 <__swsetup_r+0x7a>
 80066ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066ee:	b141      	cbz	r1, 8006702 <__swsetup_r+0x6a>
 80066f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066f4:	4299      	cmp	r1, r3
 80066f6:	d002      	beq.n	80066fe <__swsetup_r+0x66>
 80066f8:	4630      	mov	r0, r6
 80066fa:	f000 f98f 	bl	8006a1c <_free_r>
 80066fe:	2300      	movs	r3, #0
 8006700:	6363      	str	r3, [r4, #52]	; 0x34
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006708:	81a3      	strh	r3, [r4, #12]
 800670a:	2300      	movs	r3, #0
 800670c:	6063      	str	r3, [r4, #4]
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	f043 0308 	orr.w	r3, r3, #8
 8006718:	81a3      	strh	r3, [r4, #12]
 800671a:	6923      	ldr	r3, [r4, #16]
 800671c:	b94b      	cbnz	r3, 8006732 <__swsetup_r+0x9a>
 800671e:	89a3      	ldrh	r3, [r4, #12]
 8006720:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006728:	d003      	beq.n	8006732 <__swsetup_r+0x9a>
 800672a:	4621      	mov	r1, r4
 800672c:	4630      	mov	r0, r6
 800672e:	f000 f929 	bl	8006984 <__smakebuf_r>
 8006732:	89a0      	ldrh	r0, [r4, #12]
 8006734:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006738:	f010 0301 	ands.w	r3, r0, #1
 800673c:	d00a      	beq.n	8006754 <__swsetup_r+0xbc>
 800673e:	2300      	movs	r3, #0
 8006740:	60a3      	str	r3, [r4, #8]
 8006742:	6963      	ldr	r3, [r4, #20]
 8006744:	425b      	negs	r3, r3
 8006746:	61a3      	str	r3, [r4, #24]
 8006748:	6923      	ldr	r3, [r4, #16]
 800674a:	b943      	cbnz	r3, 800675e <__swsetup_r+0xc6>
 800674c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006750:	d1ba      	bne.n	80066c8 <__swsetup_r+0x30>
 8006752:	bd70      	pop	{r4, r5, r6, pc}
 8006754:	0781      	lsls	r1, r0, #30
 8006756:	bf58      	it	pl
 8006758:	6963      	ldrpl	r3, [r4, #20]
 800675a:	60a3      	str	r3, [r4, #8]
 800675c:	e7f4      	b.n	8006748 <__swsetup_r+0xb0>
 800675e:	2000      	movs	r0, #0
 8006760:	e7f7      	b.n	8006752 <__swsetup_r+0xba>
 8006762:	bf00      	nop
 8006764:	20000014 	.word	0x20000014
 8006768:	08007efc 	.word	0x08007efc
 800676c:	08007f1c 	.word	0x08007f1c
 8006770:	08007edc 	.word	0x08007edc

08006774 <_close_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4d06      	ldr	r5, [pc, #24]	; (8006790 <_close_r+0x1c>)
 8006778:	2300      	movs	r3, #0
 800677a:	4604      	mov	r4, r0
 800677c:	4608      	mov	r0, r1
 800677e:	602b      	str	r3, [r5, #0]
 8006780:	f7fa fd85 	bl	800128e <_close>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d102      	bne.n	800678e <_close_r+0x1a>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	b103      	cbz	r3, 800678e <_close_r+0x1a>
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	2000097c 	.word	0x2000097c

08006794 <__sflush_r>:
 8006794:	898a      	ldrh	r2, [r1, #12]
 8006796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800679a:	4605      	mov	r5, r0
 800679c:	0710      	lsls	r0, r2, #28
 800679e:	460c      	mov	r4, r1
 80067a0:	d458      	bmi.n	8006854 <__sflush_r+0xc0>
 80067a2:	684b      	ldr	r3, [r1, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	dc05      	bgt.n	80067b4 <__sflush_r+0x20>
 80067a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	dc02      	bgt.n	80067b4 <__sflush_r+0x20>
 80067ae:	2000      	movs	r0, #0
 80067b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067b6:	2e00      	cmp	r6, #0
 80067b8:	d0f9      	beq.n	80067ae <__sflush_r+0x1a>
 80067ba:	2300      	movs	r3, #0
 80067bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067c0:	682f      	ldr	r7, [r5, #0]
 80067c2:	602b      	str	r3, [r5, #0]
 80067c4:	d032      	beq.n	800682c <__sflush_r+0x98>
 80067c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067c8:	89a3      	ldrh	r3, [r4, #12]
 80067ca:	075a      	lsls	r2, r3, #29
 80067cc:	d505      	bpl.n	80067da <__sflush_r+0x46>
 80067ce:	6863      	ldr	r3, [r4, #4]
 80067d0:	1ac0      	subs	r0, r0, r3
 80067d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067d4:	b10b      	cbz	r3, 80067da <__sflush_r+0x46>
 80067d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067d8:	1ac0      	subs	r0, r0, r3
 80067da:	2300      	movs	r3, #0
 80067dc:	4602      	mov	r2, r0
 80067de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067e0:	6a21      	ldr	r1, [r4, #32]
 80067e2:	4628      	mov	r0, r5
 80067e4:	47b0      	blx	r6
 80067e6:	1c43      	adds	r3, r0, #1
 80067e8:	89a3      	ldrh	r3, [r4, #12]
 80067ea:	d106      	bne.n	80067fa <__sflush_r+0x66>
 80067ec:	6829      	ldr	r1, [r5, #0]
 80067ee:	291d      	cmp	r1, #29
 80067f0:	d82c      	bhi.n	800684c <__sflush_r+0xb8>
 80067f2:	4a2a      	ldr	r2, [pc, #168]	; (800689c <__sflush_r+0x108>)
 80067f4:	40ca      	lsrs	r2, r1
 80067f6:	07d6      	lsls	r6, r2, #31
 80067f8:	d528      	bpl.n	800684c <__sflush_r+0xb8>
 80067fa:	2200      	movs	r2, #0
 80067fc:	6062      	str	r2, [r4, #4]
 80067fe:	04d9      	lsls	r1, r3, #19
 8006800:	6922      	ldr	r2, [r4, #16]
 8006802:	6022      	str	r2, [r4, #0]
 8006804:	d504      	bpl.n	8006810 <__sflush_r+0x7c>
 8006806:	1c42      	adds	r2, r0, #1
 8006808:	d101      	bne.n	800680e <__sflush_r+0x7a>
 800680a:	682b      	ldr	r3, [r5, #0]
 800680c:	b903      	cbnz	r3, 8006810 <__sflush_r+0x7c>
 800680e:	6560      	str	r0, [r4, #84]	; 0x54
 8006810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006812:	602f      	str	r7, [r5, #0]
 8006814:	2900      	cmp	r1, #0
 8006816:	d0ca      	beq.n	80067ae <__sflush_r+0x1a>
 8006818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800681c:	4299      	cmp	r1, r3
 800681e:	d002      	beq.n	8006826 <__sflush_r+0x92>
 8006820:	4628      	mov	r0, r5
 8006822:	f000 f8fb 	bl	8006a1c <_free_r>
 8006826:	2000      	movs	r0, #0
 8006828:	6360      	str	r0, [r4, #52]	; 0x34
 800682a:	e7c1      	b.n	80067b0 <__sflush_r+0x1c>
 800682c:	6a21      	ldr	r1, [r4, #32]
 800682e:	2301      	movs	r3, #1
 8006830:	4628      	mov	r0, r5
 8006832:	47b0      	blx	r6
 8006834:	1c41      	adds	r1, r0, #1
 8006836:	d1c7      	bne.n	80067c8 <__sflush_r+0x34>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0c4      	beq.n	80067c8 <__sflush_r+0x34>
 800683e:	2b1d      	cmp	r3, #29
 8006840:	d001      	beq.n	8006846 <__sflush_r+0xb2>
 8006842:	2b16      	cmp	r3, #22
 8006844:	d101      	bne.n	800684a <__sflush_r+0xb6>
 8006846:	602f      	str	r7, [r5, #0]
 8006848:	e7b1      	b.n	80067ae <__sflush_r+0x1a>
 800684a:	89a3      	ldrh	r3, [r4, #12]
 800684c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006850:	81a3      	strh	r3, [r4, #12]
 8006852:	e7ad      	b.n	80067b0 <__sflush_r+0x1c>
 8006854:	690f      	ldr	r7, [r1, #16]
 8006856:	2f00      	cmp	r7, #0
 8006858:	d0a9      	beq.n	80067ae <__sflush_r+0x1a>
 800685a:	0793      	lsls	r3, r2, #30
 800685c:	680e      	ldr	r6, [r1, #0]
 800685e:	bf08      	it	eq
 8006860:	694b      	ldreq	r3, [r1, #20]
 8006862:	600f      	str	r7, [r1, #0]
 8006864:	bf18      	it	ne
 8006866:	2300      	movne	r3, #0
 8006868:	eba6 0807 	sub.w	r8, r6, r7
 800686c:	608b      	str	r3, [r1, #8]
 800686e:	f1b8 0f00 	cmp.w	r8, #0
 8006872:	dd9c      	ble.n	80067ae <__sflush_r+0x1a>
 8006874:	6a21      	ldr	r1, [r4, #32]
 8006876:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006878:	4643      	mov	r3, r8
 800687a:	463a      	mov	r2, r7
 800687c:	4628      	mov	r0, r5
 800687e:	47b0      	blx	r6
 8006880:	2800      	cmp	r0, #0
 8006882:	dc06      	bgt.n	8006892 <__sflush_r+0xfe>
 8006884:	89a3      	ldrh	r3, [r4, #12]
 8006886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800688a:	81a3      	strh	r3, [r4, #12]
 800688c:	f04f 30ff 	mov.w	r0, #4294967295
 8006890:	e78e      	b.n	80067b0 <__sflush_r+0x1c>
 8006892:	4407      	add	r7, r0
 8006894:	eba8 0800 	sub.w	r8, r8, r0
 8006898:	e7e9      	b.n	800686e <__sflush_r+0xda>
 800689a:	bf00      	nop
 800689c:	20400001 	.word	0x20400001

080068a0 <_fflush_r>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	690b      	ldr	r3, [r1, #16]
 80068a4:	4605      	mov	r5, r0
 80068a6:	460c      	mov	r4, r1
 80068a8:	b913      	cbnz	r3, 80068b0 <_fflush_r+0x10>
 80068aa:	2500      	movs	r5, #0
 80068ac:	4628      	mov	r0, r5
 80068ae:	bd38      	pop	{r3, r4, r5, pc}
 80068b0:	b118      	cbz	r0, 80068ba <_fflush_r+0x1a>
 80068b2:	6983      	ldr	r3, [r0, #24]
 80068b4:	b90b      	cbnz	r3, 80068ba <_fflush_r+0x1a>
 80068b6:	f7ff fa4f 	bl	8005d58 <__sinit>
 80068ba:	4b14      	ldr	r3, [pc, #80]	; (800690c <_fflush_r+0x6c>)
 80068bc:	429c      	cmp	r4, r3
 80068be:	d11b      	bne.n	80068f8 <_fflush_r+0x58>
 80068c0:	686c      	ldr	r4, [r5, #4]
 80068c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0ef      	beq.n	80068aa <_fflush_r+0xa>
 80068ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068cc:	07d0      	lsls	r0, r2, #31
 80068ce:	d404      	bmi.n	80068da <_fflush_r+0x3a>
 80068d0:	0599      	lsls	r1, r3, #22
 80068d2:	d402      	bmi.n	80068da <_fflush_r+0x3a>
 80068d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068d6:	f7ff fadd 	bl	8005e94 <__retarget_lock_acquire_recursive>
 80068da:	4628      	mov	r0, r5
 80068dc:	4621      	mov	r1, r4
 80068de:	f7ff ff59 	bl	8006794 <__sflush_r>
 80068e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068e4:	07da      	lsls	r2, r3, #31
 80068e6:	4605      	mov	r5, r0
 80068e8:	d4e0      	bmi.n	80068ac <_fflush_r+0xc>
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	059b      	lsls	r3, r3, #22
 80068ee:	d4dd      	bmi.n	80068ac <_fflush_r+0xc>
 80068f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068f2:	f7ff fad0 	bl	8005e96 <__retarget_lock_release_recursive>
 80068f6:	e7d9      	b.n	80068ac <_fflush_r+0xc>
 80068f8:	4b05      	ldr	r3, [pc, #20]	; (8006910 <_fflush_r+0x70>)
 80068fa:	429c      	cmp	r4, r3
 80068fc:	d101      	bne.n	8006902 <_fflush_r+0x62>
 80068fe:	68ac      	ldr	r4, [r5, #8]
 8006900:	e7df      	b.n	80068c2 <_fflush_r+0x22>
 8006902:	4b04      	ldr	r3, [pc, #16]	; (8006914 <_fflush_r+0x74>)
 8006904:	429c      	cmp	r4, r3
 8006906:	bf08      	it	eq
 8006908:	68ec      	ldreq	r4, [r5, #12]
 800690a:	e7da      	b.n	80068c2 <_fflush_r+0x22>
 800690c:	08007efc 	.word	0x08007efc
 8006910:	08007f1c 	.word	0x08007f1c
 8006914:	08007edc 	.word	0x08007edc

08006918 <_lseek_r>:
 8006918:	b538      	push	{r3, r4, r5, lr}
 800691a:	4d07      	ldr	r5, [pc, #28]	; (8006938 <_lseek_r+0x20>)
 800691c:	4604      	mov	r4, r0
 800691e:	4608      	mov	r0, r1
 8006920:	4611      	mov	r1, r2
 8006922:	2200      	movs	r2, #0
 8006924:	602a      	str	r2, [r5, #0]
 8006926:	461a      	mov	r2, r3
 8006928:	f7fa fcd8 	bl	80012dc <_lseek>
 800692c:	1c43      	adds	r3, r0, #1
 800692e:	d102      	bne.n	8006936 <_lseek_r+0x1e>
 8006930:	682b      	ldr	r3, [r5, #0]
 8006932:	b103      	cbz	r3, 8006936 <_lseek_r+0x1e>
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	bd38      	pop	{r3, r4, r5, pc}
 8006938:	2000097c 	.word	0x2000097c

0800693c <__swhatbuf_r>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	460e      	mov	r6, r1
 8006940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006944:	2900      	cmp	r1, #0
 8006946:	b096      	sub	sp, #88	; 0x58
 8006948:	4614      	mov	r4, r2
 800694a:	461d      	mov	r5, r3
 800694c:	da07      	bge.n	800695e <__swhatbuf_r+0x22>
 800694e:	2300      	movs	r3, #0
 8006950:	602b      	str	r3, [r5, #0]
 8006952:	89b3      	ldrh	r3, [r6, #12]
 8006954:	061a      	lsls	r2, r3, #24
 8006956:	d410      	bmi.n	800697a <__swhatbuf_r+0x3e>
 8006958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800695c:	e00e      	b.n	800697c <__swhatbuf_r+0x40>
 800695e:	466a      	mov	r2, sp
 8006960:	f000 f8be 	bl	8006ae0 <_fstat_r>
 8006964:	2800      	cmp	r0, #0
 8006966:	dbf2      	blt.n	800694e <__swhatbuf_r+0x12>
 8006968:	9a01      	ldr	r2, [sp, #4]
 800696a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800696e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006972:	425a      	negs	r2, r3
 8006974:	415a      	adcs	r2, r3
 8006976:	602a      	str	r2, [r5, #0]
 8006978:	e7ee      	b.n	8006958 <__swhatbuf_r+0x1c>
 800697a:	2340      	movs	r3, #64	; 0x40
 800697c:	2000      	movs	r0, #0
 800697e:	6023      	str	r3, [r4, #0]
 8006980:	b016      	add	sp, #88	; 0x58
 8006982:	bd70      	pop	{r4, r5, r6, pc}

08006984 <__smakebuf_r>:
 8006984:	898b      	ldrh	r3, [r1, #12]
 8006986:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006988:	079d      	lsls	r5, r3, #30
 800698a:	4606      	mov	r6, r0
 800698c:	460c      	mov	r4, r1
 800698e:	d507      	bpl.n	80069a0 <__smakebuf_r+0x1c>
 8006990:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	6123      	str	r3, [r4, #16]
 8006998:	2301      	movs	r3, #1
 800699a:	6163      	str	r3, [r4, #20]
 800699c:	b002      	add	sp, #8
 800699e:	bd70      	pop	{r4, r5, r6, pc}
 80069a0:	ab01      	add	r3, sp, #4
 80069a2:	466a      	mov	r2, sp
 80069a4:	f7ff ffca 	bl	800693c <__swhatbuf_r>
 80069a8:	9900      	ldr	r1, [sp, #0]
 80069aa:	4605      	mov	r5, r0
 80069ac:	4630      	mov	r0, r6
 80069ae:	f7ff fa73 	bl	8005e98 <_malloc_r>
 80069b2:	b948      	cbnz	r0, 80069c8 <__smakebuf_r+0x44>
 80069b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069b8:	059a      	lsls	r2, r3, #22
 80069ba:	d4ef      	bmi.n	800699c <__smakebuf_r+0x18>
 80069bc:	f023 0303 	bic.w	r3, r3, #3
 80069c0:	f043 0302 	orr.w	r3, r3, #2
 80069c4:	81a3      	strh	r3, [r4, #12]
 80069c6:	e7e3      	b.n	8006990 <__smakebuf_r+0xc>
 80069c8:	4b0d      	ldr	r3, [pc, #52]	; (8006a00 <__smakebuf_r+0x7c>)
 80069ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80069cc:	89a3      	ldrh	r3, [r4, #12]
 80069ce:	6020      	str	r0, [r4, #0]
 80069d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d4:	81a3      	strh	r3, [r4, #12]
 80069d6:	9b00      	ldr	r3, [sp, #0]
 80069d8:	6163      	str	r3, [r4, #20]
 80069da:	9b01      	ldr	r3, [sp, #4]
 80069dc:	6120      	str	r0, [r4, #16]
 80069de:	b15b      	cbz	r3, 80069f8 <__smakebuf_r+0x74>
 80069e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069e4:	4630      	mov	r0, r6
 80069e6:	f000 f88d 	bl	8006b04 <_isatty_r>
 80069ea:	b128      	cbz	r0, 80069f8 <__smakebuf_r+0x74>
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	f023 0303 	bic.w	r3, r3, #3
 80069f2:	f043 0301 	orr.w	r3, r3, #1
 80069f6:	81a3      	strh	r3, [r4, #12]
 80069f8:	89a0      	ldrh	r0, [r4, #12]
 80069fa:	4305      	orrs	r5, r0
 80069fc:	81a5      	strh	r5, [r4, #12]
 80069fe:	e7cd      	b.n	800699c <__smakebuf_r+0x18>
 8006a00:	08005cf1 	.word	0x08005cf1

08006a04 <__malloc_lock>:
 8006a04:	4801      	ldr	r0, [pc, #4]	; (8006a0c <__malloc_lock+0x8>)
 8006a06:	f7ff ba45 	b.w	8005e94 <__retarget_lock_acquire_recursive>
 8006a0a:	bf00      	nop
 8006a0c:	20000974 	.word	0x20000974

08006a10 <__malloc_unlock>:
 8006a10:	4801      	ldr	r0, [pc, #4]	; (8006a18 <__malloc_unlock+0x8>)
 8006a12:	f7ff ba40 	b.w	8005e96 <__retarget_lock_release_recursive>
 8006a16:	bf00      	nop
 8006a18:	20000974 	.word	0x20000974

08006a1c <_free_r>:
 8006a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a1e:	2900      	cmp	r1, #0
 8006a20:	d048      	beq.n	8006ab4 <_free_r+0x98>
 8006a22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a26:	9001      	str	r0, [sp, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f1a1 0404 	sub.w	r4, r1, #4
 8006a2e:	bfb8      	it	lt
 8006a30:	18e4      	addlt	r4, r4, r3
 8006a32:	f7ff ffe7 	bl	8006a04 <__malloc_lock>
 8006a36:	4a20      	ldr	r2, [pc, #128]	; (8006ab8 <_free_r+0x9c>)
 8006a38:	9801      	ldr	r0, [sp, #4]
 8006a3a:	6813      	ldr	r3, [r2, #0]
 8006a3c:	4615      	mov	r5, r2
 8006a3e:	b933      	cbnz	r3, 8006a4e <_free_r+0x32>
 8006a40:	6063      	str	r3, [r4, #4]
 8006a42:	6014      	str	r4, [r2, #0]
 8006a44:	b003      	add	sp, #12
 8006a46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a4a:	f7ff bfe1 	b.w	8006a10 <__malloc_unlock>
 8006a4e:	42a3      	cmp	r3, r4
 8006a50:	d90b      	bls.n	8006a6a <_free_r+0x4e>
 8006a52:	6821      	ldr	r1, [r4, #0]
 8006a54:	1862      	adds	r2, r4, r1
 8006a56:	4293      	cmp	r3, r2
 8006a58:	bf04      	itt	eq
 8006a5a:	681a      	ldreq	r2, [r3, #0]
 8006a5c:	685b      	ldreq	r3, [r3, #4]
 8006a5e:	6063      	str	r3, [r4, #4]
 8006a60:	bf04      	itt	eq
 8006a62:	1852      	addeq	r2, r2, r1
 8006a64:	6022      	streq	r2, [r4, #0]
 8006a66:	602c      	str	r4, [r5, #0]
 8006a68:	e7ec      	b.n	8006a44 <_free_r+0x28>
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	b10b      	cbz	r3, 8006a74 <_free_r+0x58>
 8006a70:	42a3      	cmp	r3, r4
 8006a72:	d9fa      	bls.n	8006a6a <_free_r+0x4e>
 8006a74:	6811      	ldr	r1, [r2, #0]
 8006a76:	1855      	adds	r5, r2, r1
 8006a78:	42a5      	cmp	r5, r4
 8006a7a:	d10b      	bne.n	8006a94 <_free_r+0x78>
 8006a7c:	6824      	ldr	r4, [r4, #0]
 8006a7e:	4421      	add	r1, r4
 8006a80:	1854      	adds	r4, r2, r1
 8006a82:	42a3      	cmp	r3, r4
 8006a84:	6011      	str	r1, [r2, #0]
 8006a86:	d1dd      	bne.n	8006a44 <_free_r+0x28>
 8006a88:	681c      	ldr	r4, [r3, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	6053      	str	r3, [r2, #4]
 8006a8e:	4421      	add	r1, r4
 8006a90:	6011      	str	r1, [r2, #0]
 8006a92:	e7d7      	b.n	8006a44 <_free_r+0x28>
 8006a94:	d902      	bls.n	8006a9c <_free_r+0x80>
 8006a96:	230c      	movs	r3, #12
 8006a98:	6003      	str	r3, [r0, #0]
 8006a9a:	e7d3      	b.n	8006a44 <_free_r+0x28>
 8006a9c:	6825      	ldr	r5, [r4, #0]
 8006a9e:	1961      	adds	r1, r4, r5
 8006aa0:	428b      	cmp	r3, r1
 8006aa2:	bf04      	itt	eq
 8006aa4:	6819      	ldreq	r1, [r3, #0]
 8006aa6:	685b      	ldreq	r3, [r3, #4]
 8006aa8:	6063      	str	r3, [r4, #4]
 8006aaa:	bf04      	itt	eq
 8006aac:	1949      	addeq	r1, r1, r5
 8006aae:	6021      	streq	r1, [r4, #0]
 8006ab0:	6054      	str	r4, [r2, #4]
 8006ab2:	e7c7      	b.n	8006a44 <_free_r+0x28>
 8006ab4:	b003      	add	sp, #12
 8006ab6:	bd30      	pop	{r4, r5, pc}
 8006ab8:	20000544 	.word	0x20000544

08006abc <_read_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	4d07      	ldr	r5, [pc, #28]	; (8006adc <_read_r+0x20>)
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	4608      	mov	r0, r1
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	602a      	str	r2, [r5, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	f7fa fba6 	bl	800121c <_read>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d102      	bne.n	8006ada <_read_r+0x1e>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	b103      	cbz	r3, 8006ada <_read_r+0x1e>
 8006ad8:	6023      	str	r3, [r4, #0]
 8006ada:	bd38      	pop	{r3, r4, r5, pc}
 8006adc:	2000097c 	.word	0x2000097c

08006ae0 <_fstat_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4d07      	ldr	r5, [pc, #28]	; (8006b00 <_fstat_r+0x20>)
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	4608      	mov	r0, r1
 8006aea:	4611      	mov	r1, r2
 8006aec:	602b      	str	r3, [r5, #0]
 8006aee:	f7fa fbda 	bl	80012a6 <_fstat>
 8006af2:	1c43      	adds	r3, r0, #1
 8006af4:	d102      	bne.n	8006afc <_fstat_r+0x1c>
 8006af6:	682b      	ldr	r3, [r5, #0]
 8006af8:	b103      	cbz	r3, 8006afc <_fstat_r+0x1c>
 8006afa:	6023      	str	r3, [r4, #0]
 8006afc:	bd38      	pop	{r3, r4, r5, pc}
 8006afe:	bf00      	nop
 8006b00:	2000097c 	.word	0x2000097c

08006b04 <_isatty_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	4d06      	ldr	r5, [pc, #24]	; (8006b20 <_isatty_r+0x1c>)
 8006b08:	2300      	movs	r3, #0
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	602b      	str	r3, [r5, #0]
 8006b10:	f7fa fbd9 	bl	80012c6 <_isatty>
 8006b14:	1c43      	adds	r3, r0, #1
 8006b16:	d102      	bne.n	8006b1e <_isatty_r+0x1a>
 8006b18:	682b      	ldr	r3, [r5, #0]
 8006b1a:	b103      	cbz	r3, 8006b1e <_isatty_r+0x1a>
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	bd38      	pop	{r3, r4, r5, pc}
 8006b20:	2000097c 	.word	0x2000097c

08006b24 <_init>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	bf00      	nop
 8006b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2a:	bc08      	pop	{r3}
 8006b2c:	469e      	mov	lr, r3
 8006b2e:	4770      	bx	lr

08006b30 <_fini>:
 8006b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b32:	bf00      	nop
 8006b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b36:	bc08      	pop	{r3}
 8006b38:	469e      	mov	lr, r3
 8006b3a:	4770      	bx	lr
