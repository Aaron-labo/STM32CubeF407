
F407_PRO_BallControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d55c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec0  0800d6f0  0800d6f0  0001d6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5b0  0800e5b0  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5b0  0800e5b0  0001e5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5b8  0800e5b8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5b8  0800e5b8  0001e5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5bc  0800e5bc  0001e5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800e5c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000095c  200001ec  0800e7ac  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b48  0800e7ac  00020b48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e602  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f24  00000000  00000000  0003e81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00042748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  00043bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005ca2  00000000  00000000  00044f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab4b  00000000  00000000  0004abb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1e30  00000000  00000000  000656fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013752d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a4c  00000000  00000000  00137580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d6d4 	.word	0x0800d6d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800d6d4 	.word	0x0800d6d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2110      	movs	r1, #16
 8000f88:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <ssd1306_Reset+0x34>)
 8000f8a:	f004 f9d1 	bl	8005330 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2104      	movs	r1, #4
 8000f92:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <ssd1306_Reset+0x34>)
 8000f94:	f004 f9cc 	bl	8005330 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000f98:	200a      	movs	r0, #10
 8000f9a:	f003 fadd 	bl	8004558 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <ssd1306_Reset+0x34>)
 8000fa4:	f004 f9c4 	bl	8005330 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f003 fad5 	bl	8004558 <HAL_Delay>
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2110      	movs	r1, #16
 8000fc6:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <ssd1306_WriteCommand+0x40>)
 8000fc8:	f004 f9b2 	bl	8005330 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2108      	movs	r1, #8
 8000fd0:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <ssd1306_WriteCommand+0x40>)
 8000fd2:	f004 f9ad 	bl	8005330 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8000fd6:	1df9      	adds	r1, r7, #7
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4807      	ldr	r0, [pc, #28]	; (8000ffc <ssd1306_WriteCommand+0x44>)
 8000fe0:	f006 f821 	bl	8007026 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <ssd1306_WriteCommand+0x40>)
 8000fea:	f004 f9a1 	bl	8005330 <HAL_GPIO_WritePin>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	20000918 	.word	0x20000918

08001000 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800100a:	2200      	movs	r2, #0
 800100c:	2110      	movs	r1, #16
 800100e:	480c      	ldr	r0, [pc, #48]	; (8001040 <ssd1306_WriteData+0x40>)
 8001010:	f004 f98e 	bl	8005330 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8001014:	2201      	movs	r2, #1
 8001016:	2108      	movs	r1, #8
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <ssd1306_WriteData+0x40>)
 800101a:	f004 f989 	bl	8005330 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b29a      	uxth	r2, r3
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	4806      	ldr	r0, [pc, #24]	; (8001044 <ssd1306_WriteData+0x44>)
 800102a:	f005 fffc 	bl	8007026 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800102e:	2201      	movs	r2, #1
 8001030:	2110      	movs	r1, #16
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <ssd1306_WriteData+0x40>)
 8001034:	f004 f97c 	bl	8005330 <HAL_GPIO_WritePin>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021000 	.word	0x40021000
 8001044:	20000918 	.word	0x20000918

08001048 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800104c:	f7ff ff98 	bl	8000f80 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001050:	2064      	movs	r0, #100	; 0x64
 8001052:	f003 fa81 	bl	8004558 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001056:	2000      	movs	r0, #0
 8001058:	f000 fa88 	bl	800156c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800105c:	2020      	movs	r0, #32
 800105e:	f7ff ffab 	bl	8000fb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff ffa8 	bl	8000fb8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001068:	20b0      	movs	r0, #176	; 0xb0
 800106a:	f7ff ffa5 	bl	8000fb8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f7ff ffa2 	bl	8000fb8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff ff9f 	bl	8000fb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800107a:	2010      	movs	r0, #16
 800107c:	f7ff ff9c 	bl	8000fb8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001080:	2040      	movs	r0, #64	; 0x40
 8001082:	f7ff ff99 	bl	8000fb8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001086:	20ff      	movs	r0, #255	; 0xff
 8001088:	f000 fa5d 	bl	8001546 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800108c:	20a1      	movs	r0, #161	; 0xa1
 800108e:	f7ff ff93 	bl	8000fb8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001092:	20a6      	movs	r0, #166	; 0xa6
 8001094:	f7ff ff90 	bl	8000fb8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001098:	20a8      	movs	r0, #168	; 0xa8
 800109a:	f7ff ff8d 	bl	8000fb8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800109e:	203f      	movs	r0, #63	; 0x3f
 80010a0:	f7ff ff8a 	bl	8000fb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80010a4:	20a4      	movs	r0, #164	; 0xa4
 80010a6:	f7ff ff87 	bl	8000fb8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80010aa:	20d3      	movs	r0, #211	; 0xd3
 80010ac:	f7ff ff84 	bl	8000fb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff ff81 	bl	8000fb8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80010b6:	20d5      	movs	r0, #213	; 0xd5
 80010b8:	f7ff ff7e 	bl	8000fb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80010bc:	20f0      	movs	r0, #240	; 0xf0
 80010be:	f7ff ff7b 	bl	8000fb8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80010c2:	20d9      	movs	r0, #217	; 0xd9
 80010c4:	f7ff ff78 	bl	8000fb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80010c8:	2022      	movs	r0, #34	; 0x22
 80010ca:	f7ff ff75 	bl	8000fb8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80010ce:	20da      	movs	r0, #218	; 0xda
 80010d0:	f7ff ff72 	bl	8000fb8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80010d4:	2012      	movs	r0, #18
 80010d6:	f7ff ff6f 	bl	8000fb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80010da:	20db      	movs	r0, #219	; 0xdb
 80010dc:	f7ff ff6c 	bl	8000fb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80010e0:	2020      	movs	r0, #32
 80010e2:	f7ff ff69 	bl	8000fb8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80010e6:	208d      	movs	r0, #141	; 0x8d
 80010e8:	f7ff ff66 	bl	8000fb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80010ec:	2014      	movs	r0, #20
 80010ee:	f7ff ff63 	bl	8000fb8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80010f2:	2001      	movs	r0, #1
 80010f4:	f000 fa3a 	bl	800156c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80010f8:	2000      	movs	r0, #0
 80010fa:	f000 f80f 	bl	800111c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80010fe:	f000 f831 	bl	8001164 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <ssd1306_Init+0xd0>)
 8001104:	2200      	movs	r2, #0
 8001106:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <ssd1306_Init+0xd0>)
 800110a:	2200      	movs	r2, #0
 800110c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800110e:	4b02      	ldr	r3, [pc, #8]	; (8001118 <ssd1306_Init+0xd0>)
 8001110:	2201      	movs	r2, #1
 8001112:	715a      	strb	r2, [r3, #5]
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000608 	.word	0x20000608

0800111c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	e00d      	b.n	8001148 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <ssd1306_Fill+0x1a>
 8001132:	2100      	movs	r1, #0
 8001134:	e000      	b.n	8001138 <ssd1306_Fill+0x1c>
 8001136:	21ff      	movs	r1, #255	; 0xff
 8001138:	4a09      	ldr	r2, [pc, #36]	; (8001160 <ssd1306_Fill+0x44>)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4413      	add	r3, r2
 800113e:	460a      	mov	r2, r1
 8001140:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3301      	adds	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800114e:	d3ed      	bcc.n	800112c <ssd1306_Fill+0x10>
    }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000208 	.word	0x20000208

08001164 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800116a:	2300      	movs	r3, #0
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	e016      	b.n	800119e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	3b50      	subs	r3, #80	; 0x50
 8001174:	b2db      	uxtb	r3, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff1e 	bl	8000fb8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff ff1b 	bl	8000fb8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001182:	2010      	movs	r0, #16
 8001184:	f7ff ff18 	bl	8000fb8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	01db      	lsls	r3, r3, #7
 800118c:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <ssd1306_UpdateScreen+0x4c>)
 800118e:	4413      	add	r3, r2
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff34 	bl	8001000 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	3301      	adds	r3, #1
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b07      	cmp	r3, #7
 80011a2:	d9e5      	bls.n	8001170 <ssd1306_UpdateScreen+0xc>
    }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000208 	.word	0x20000208

080011b4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
 80011be:	460b      	mov	r3, r1
 80011c0:	71bb      	strb	r3, [r7, #6]
 80011c2:	4613      	mov	r3, r2
 80011c4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db48      	blt.n	8001260 <ssd1306_DrawPixel+0xac>
 80011ce:	79bb      	ldrb	r3, [r7, #6]
 80011d0:	2b3f      	cmp	r3, #63	; 0x3f
 80011d2:	d845      	bhi.n	8001260 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <ssd1306_DrawPixel+0xb8>)
 80011d6:	791b      	ldrb	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d006      	beq.n	80011ea <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80011dc:	797b      	ldrb	r3, [r7, #5]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bf0c      	ite	eq
 80011e2:	2301      	moveq	r3, #1
 80011e4:	2300      	movne	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80011ea:	797b      	ldrb	r3, [r7, #5]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d11a      	bne.n	8001226 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011f0:	79fa      	ldrb	r2, [r7, #7]
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	08db      	lsrs	r3, r3, #3
 80011f6:	b2d8      	uxtb	r0, r3
 80011f8:	4603      	mov	r3, r0
 80011fa:	01db      	lsls	r3, r3, #7
 80011fc:	4413      	add	r3, r2
 80011fe:	4a1c      	ldr	r2, [pc, #112]	; (8001270 <ssd1306_DrawPixel+0xbc>)
 8001200:	5cd3      	ldrb	r3, [r2, r3]
 8001202:	b25a      	sxtb	r2, r3
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	2101      	movs	r1, #1
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	b25b      	sxtb	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	b259      	sxtb	r1, r3
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	4603      	mov	r3, r0
 800121a:	01db      	lsls	r3, r3, #7
 800121c:	4413      	add	r3, r2
 800121e:	b2c9      	uxtb	r1, r1
 8001220:	4a13      	ldr	r2, [pc, #76]	; (8001270 <ssd1306_DrawPixel+0xbc>)
 8001222:	54d1      	strb	r1, [r2, r3]
 8001224:	e01d      	b.n	8001262 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	79bb      	ldrb	r3, [r7, #6]
 800122a:	08db      	lsrs	r3, r3, #3
 800122c:	b2d8      	uxtb	r0, r3
 800122e:	4603      	mov	r3, r0
 8001230:	01db      	lsls	r3, r3, #7
 8001232:	4413      	add	r3, r2
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <ssd1306_DrawPixel+0xbc>)
 8001236:	5cd3      	ldrb	r3, [r2, r3]
 8001238:	b25a      	sxtb	r2, r3
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	2101      	movs	r1, #1
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	b25b      	sxtb	r3, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	b25b      	sxtb	r3, r3
 800124c:	4013      	ands	r3, r2
 800124e:	b259      	sxtb	r1, r3
 8001250:	79fa      	ldrb	r2, [r7, #7]
 8001252:	4603      	mov	r3, r0
 8001254:	01db      	lsls	r3, r3, #7
 8001256:	4413      	add	r3, r2
 8001258:	b2c9      	uxtb	r1, r1
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <ssd1306_DrawPixel+0xbc>)
 800125c:	54d1      	strb	r1, [r2, r3]
 800125e:	e000      	b.n	8001262 <ssd1306_DrawPixel+0xae>
        return;
 8001260:	bf00      	nop
    }
}
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	20000608 	.word	0x20000608
 8001270:	20000208 	.word	0x20000208

08001274 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b089      	sub	sp, #36	; 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	4604      	mov	r4, r0
 800127c:	1d38      	adds	r0, r7, #4
 800127e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001282:	461a      	mov	r2, r3
 8001284:	4623      	mov	r3, r4
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	4613      	mov	r3, r2
 800128a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b1f      	cmp	r3, #31
 8001290:	d902      	bls.n	8001298 <ssd1306_WriteChar+0x24>
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	2b7e      	cmp	r3, #126	; 0x7e
 8001296:	d901      	bls.n	800129c <ssd1306_WriteChar+0x28>
        return 0;
 8001298:	2300      	movs	r3, #0
 800129a:	e06d      	b.n	8001378 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800129c:	4b38      	ldr	r3, [pc, #224]	; (8001380 <ssd1306_WriteChar+0x10c>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	793b      	ldrb	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	2b80      	cmp	r3, #128	; 0x80
 80012a8:	dc06      	bgt.n	80012b8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80012aa:	4b35      	ldr	r3, [pc, #212]	; (8001380 <ssd1306_WriteChar+0x10c>)
 80012ac:	885b      	ldrh	r3, [r3, #2]
 80012ae:	461a      	mov	r2, r3
 80012b0:	797b      	ldrb	r3, [r7, #5]
 80012b2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80012b4:	2b40      	cmp	r3, #64	; 0x40
 80012b6:	dd01      	ble.n	80012bc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	e05d      	b.n	8001378 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	e04c      	b.n	800135c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	3b20      	subs	r3, #32
 80012c8:	7979      	ldrb	r1, [r7, #5]
 80012ca:	fb01 f303 	mul.w	r3, r1, r3
 80012ce:	4619      	mov	r1, r3
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	440b      	add	r3, r1
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	e034      	b.n	800134c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d012      	beq.n	8001318 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80012f2:	4b23      	ldr	r3, [pc, #140]	; (8001380 <ssd1306_WriteChar+0x10c>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	b2d8      	uxtb	r0, r3
 8001300:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <ssd1306_WriteChar+0x10c>)
 8001302:	885b      	ldrh	r3, [r3, #2]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4413      	add	r3, r2
 800130c:	b2db      	uxtb	r3, r3
 800130e:	7bba      	ldrb	r2, [r7, #14]
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff ff4f 	bl	80011b4 <ssd1306_DrawPixel>
 8001316:	e016      	b.n	8001346 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <ssd1306_WriteChar+0x10c>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4413      	add	r3, r2
 8001324:	b2d8      	uxtb	r0, r3
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <ssd1306_WriteChar+0x10c>)
 8001328:	885b      	ldrh	r3, [r3, #2]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	4413      	add	r3, r2
 8001332:	b2d9      	uxtb	r1, r3
 8001334:	7bbb      	ldrb	r3, [r7, #14]
 8001336:	2b00      	cmp	r3, #0
 8001338:	bf0c      	ite	eq
 800133a:	2301      	moveq	r3, #1
 800133c:	2300      	movne	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	f7ff ff37 	bl	80011b4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	3301      	adds	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	793b      	ldrb	r3, [r7, #4]
 800134e:	461a      	mov	r2, r3
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	4293      	cmp	r3, r2
 8001354:	d3c5      	bcc.n	80012e2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	797b      	ldrb	r3, [r7, #5]
 800135e:	461a      	mov	r2, r3
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	4293      	cmp	r3, r2
 8001364:	d3ad      	bcc.n	80012c2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <ssd1306_WriteChar+0x10c>)
 8001368:	881a      	ldrh	r2, [r3, #0]
 800136a:	793b      	ldrb	r3, [r7, #4]
 800136c:	b29b      	uxth	r3, r3
 800136e:	4413      	add	r3, r2
 8001370:	b29a      	uxth	r2, r3
 8001372:	4b03      	ldr	r3, [pc, #12]	; (8001380 <ssd1306_WriteChar+0x10c>)
 8001374:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3724      	adds	r7, #36	; 0x24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd90      	pop	{r4, r7, pc}
 8001380:	20000608 	.word	0x20000608

08001384 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	1d38      	adds	r0, r7, #4
 800138e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001392:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001394:	e012      	b.n	80013bc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	7818      	ldrb	r0, [r3, #0]
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	1d3a      	adds	r2, r7, #4
 800139e:	ca06      	ldmia	r2, {r1, r2}
 80013a0:	f7ff ff68 	bl	8001274 <ssd1306_WriteChar>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d002      	beq.n	80013b6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	e008      	b.n	80013c8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3301      	adds	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1e8      	bne.n	8001396 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	781b      	ldrb	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	460a      	mov	r2, r1
 80013da:	71fb      	strb	r3, [r7, #7]
 80013dc:	4613      	mov	r3, r2
 80013de:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <ssd1306_SetCursor+0x2c>)
 80013e6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <ssd1306_SetCursor+0x2c>)
 80013ee:	805a      	strh	r2, [r3, #2]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	20000608 	.word	0x20000608

08001400 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	4604      	mov	r4, r0
 8001408:	4608      	mov	r0, r1
 800140a:	4611      	mov	r1, r2
 800140c:	461a      	mov	r2, r3
 800140e:	4623      	mov	r3, r4
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	4603      	mov	r3, r0
 8001414:	71bb      	strb	r3, [r7, #6]
 8001416:	460b      	mov	r3, r1
 8001418:	717b      	strb	r3, [r7, #5]
 800141a:	4613      	mov	r3, r2
 800141c:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 800141e:	797a      	ldrb	r2, [r7, #5]
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	bfb8      	it	lt
 8001428:	425b      	neglt	r3, r3
 800142a:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 800142c:	793a      	ldrb	r2, [r7, #4]
 800142e:	79bb      	ldrb	r3, [r7, #6]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	bfb8      	it	lt
 8001436:	425b      	neglt	r3, r3
 8001438:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 800143a:	79fa      	ldrb	r2, [r7, #7]
 800143c:	797b      	ldrb	r3, [r7, #5]
 800143e:	429a      	cmp	r2, r3
 8001440:	d201      	bcs.n	8001446 <ssd1306_Line+0x46>
 8001442:	2301      	movs	r3, #1
 8001444:	e001      	b.n	800144a <ssd1306_Line+0x4a>
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 800144c:	79ba      	ldrb	r2, [r7, #6]
 800144e:	793b      	ldrb	r3, [r7, #4]
 8001450:	429a      	cmp	r2, r3
 8001452:	d201      	bcs.n	8001458 <ssd1306_Line+0x58>
 8001454:	2301      	movs	r3, #1
 8001456:	e001      	b.n	800145c <ssd1306_Line+0x5c>
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
 800145c:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8001466:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800146a:	7939      	ldrb	r1, [r7, #4]
 800146c:	797b      	ldrb	r3, [r7, #5]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fea0 	bl	80011b4 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8001474:	e024      	b.n	80014c0 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8001476:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800147a:	79b9      	ldrb	r1, [r7, #6]
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fe98 	bl	80011b4 <ssd1306_DrawPixel>
    error2 = error * 2;
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	425b      	negs	r3, r3
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	429a      	cmp	r2, r3
 8001492:	dd08      	ble.n	80014a6 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	4413      	add	r3, r2
 80014a4:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	da08      	bge.n	80014c0 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	4413      	add	r3, r2
 80014b4:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	79bb      	ldrb	r3, [r7, #6]
 80014bc:	4413      	add	r3, r2
 80014be:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80014c0:	79fa      	ldrb	r2, [r7, #7]
 80014c2:	797b      	ldrb	r3, [r7, #5]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d1d6      	bne.n	8001476 <ssd1306_Line+0x76>
 80014c8:	79ba      	ldrb	r2, [r7, #6]
 80014ca:	793b      	ldrb	r3, [r7, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d1d2      	bne.n	8001476 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 80014d0:	bf00      	nop
}
 80014d2:	3724      	adds	r7, #36	; 0x24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}

080014d8 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b085      	sub	sp, #20
 80014dc:	af02      	add	r7, sp, #8
 80014de:	4604      	mov	r4, r0
 80014e0:	4608      	mov	r0, r1
 80014e2:	4611      	mov	r1, r2
 80014e4:	461a      	mov	r2, r3
 80014e6:	4623      	mov	r3, r4
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	4603      	mov	r3, r0
 80014ec:	71bb      	strb	r3, [r7, #6]
 80014ee:	460b      	mov	r3, r1
 80014f0:	717b      	strb	r3, [r7, #5]
 80014f2:	4613      	mov	r3, r2
 80014f4:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 80014f6:	79bc      	ldrb	r4, [r7, #6]
 80014f8:	797a      	ldrb	r2, [r7, #5]
 80014fa:	79b9      	ldrb	r1, [r7, #6]
 80014fc:	79f8      	ldrb	r0, [r7, #7]
 80014fe:	7e3b      	ldrb	r3, [r7, #24]
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	4623      	mov	r3, r4
 8001504:	f7ff ff7c 	bl	8001400 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8001508:	793c      	ldrb	r4, [r7, #4]
 800150a:	797a      	ldrb	r2, [r7, #5]
 800150c:	79b9      	ldrb	r1, [r7, #6]
 800150e:	7978      	ldrb	r0, [r7, #5]
 8001510:	7e3b      	ldrb	r3, [r7, #24]
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	4623      	mov	r3, r4
 8001516:	f7ff ff73 	bl	8001400 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 800151a:	793c      	ldrb	r4, [r7, #4]
 800151c:	79fa      	ldrb	r2, [r7, #7]
 800151e:	7939      	ldrb	r1, [r7, #4]
 8001520:	7978      	ldrb	r0, [r7, #5]
 8001522:	7e3b      	ldrb	r3, [r7, #24]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	4623      	mov	r3, r4
 8001528:	f7ff ff6a 	bl	8001400 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 800152c:	79bc      	ldrb	r4, [r7, #6]
 800152e:	79fa      	ldrb	r2, [r7, #7]
 8001530:	7939      	ldrb	r1, [r7, #4]
 8001532:	79f8      	ldrb	r0, [r7, #7]
 8001534:	7e3b      	ldrb	r3, [r7, #24]
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	4623      	mov	r3, r4
 800153a:	f7ff ff61 	bl	8001400 <ssd1306_Line>

  return;
 800153e:	bf00      	nop
}
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}

08001546 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001550:	2381      	movs	r3, #129	; 0x81
 8001552:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fd2e 	bl	8000fb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fd2a 	bl	8000fb8 <ssd1306_WriteCommand>
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800157c:	23af      	movs	r3, #175	; 0xaf
 800157e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <ssd1306_SetDisplayOn+0x38>)
 8001582:	2201      	movs	r2, #1
 8001584:	719a      	strb	r2, [r3, #6]
 8001586:	e004      	b.n	8001592 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001588:	23ae      	movs	r3, #174	; 0xae
 800158a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <ssd1306_SetDisplayOn+0x38>)
 800158e:	2200      	movs	r2, #0
 8001590:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fd0f 	bl	8000fb8 <ssd1306_WriteCommand>
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000608 	.word	0x20000608

080015a8 <PCA9685_SetBit>:
#include "math.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af04      	add	r7, sp, #16
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
 80015b2:	460b      	mov	r3, r1
 80015b4:	71bb      	strb	r3, [r7, #6]
 80015b6:	4613      	mov	r3, r2
 80015b8:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 80015ba:	797b      	ldrb	r3, [r7, #5]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <PCA9685_SetBit+0x1c>
 80015c0:	2301      	movs	r3, #1
 80015c2:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 80015c4:	4b24      	ldr	r3, [pc, #144]	; (8001658 <PCA9685_SetBit+0xb0>)
 80015c6:	6818      	ldr	r0, [r3, #0]
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	230a      	movs	r3, #10
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	2301      	movs	r3, #1
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	f107 030f 	add.w	r3, r7, #15
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2301      	movs	r3, #1
 80015dc:	2180      	movs	r1, #128	; 0x80
 80015de:	f004 fa21 	bl	8005a24 <HAL_I2C_Mem_Read>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e031      	b.n	8001650 <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 80015ec:	79bb      	ldrb	r3, [r7, #6]
 80015ee:	2201      	movs	r2, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	b25a      	sxtb	r2, r3
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	b25b      	sxtb	r3, r3
 8001604:	4013      	ands	r3, r2
 8001606:	b25b      	sxtb	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 800160c:	797b      	ldrb	r3, [r7, #5]
 800160e:	f003 0201 	and.w	r2, r3, #1
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	b25a      	sxtb	r2, r3
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	b25b      	sxtb	r3, r3
 800161e:	4313      	orrs	r3, r2
 8001620:	b25b      	sxtb	r3, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <PCA9685_SetBit+0xb0>)
 8001628:	6818      	ldr	r0, [r3, #0]
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	b29a      	uxth	r2, r3
 800162e:	230a      	movs	r3, #10
 8001630:	9302      	str	r3, [sp, #8]
 8001632:	2301      	movs	r3, #1
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	f107 030f 	add.w	r3, r7, #15
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	2180      	movs	r1, #128	; 0x80
 8001640:	f004 f8f6 	bl	8005830 <HAL_I2C_Mem_Write>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200007d4 	.word	0x200007d4

0800165c <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 8001662:	2306      	movs	r3, #6
 8001664:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <PCA9685_SoftwareReset+0x30>)
 8001668:	6818      	ldr	r0, [r3, #0]
 800166a:	1dfa      	adds	r2, r7, #7
 800166c:	230a      	movs	r3, #10
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2301      	movs	r3, #1
 8001672:	2100      	movs	r1, #0
 8001674:	f003 ffde 	bl	8005634 <HAL_I2C_Master_Transmit>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e000      	b.n	8001684 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200007d4 	.word	0x200007d4

08001690 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	461a      	mov	r2, r3
 800169e:	2104      	movs	r1, #4
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff ff81 	bl	80015a8 <PCA9685_SetBit>
 80016a6:	4603      	mov	r3, r0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	461a      	mov	r2, r3
 80016be:	2107      	movs	r1, #7
 80016c0:	2000      	movs	r0, #0
 80016c2:	f7ff ff71 	bl	80015a8 <PCA9685_SetBit>
 80016c6:	4603      	mov	r3, r0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	461a      	mov	r2, r3
 80016de:	2105      	movs	r1, #5
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff ff61 	bl	80015a8 <PCA9685_SetBit>
 80016e6:	4603      	mov	r3, r0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af04      	add	r7, sp, #16
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8001700:	4293      	cmp	r3, r2
 8001702:	d902      	bls.n	800170a <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8001704:	2303      	movs	r3, #3
 8001706:	72fb      	strb	r3, [r7, #11]
 8001708:	e046      	b.n	8001798 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	2b18      	cmp	r3, #24
 800170e:	d802      	bhi.n	8001716 <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8001710:	23ff      	movs	r3, #255	; 0xff
 8001712:	72fb      	strb	r3, [r7, #11]
 8001714:	e040      	b.n	8001798 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001720:	ee17 0a90 	vmov	r0, s15
 8001724:	f7fe ff10 	bl	8000548 <__aeabi_f2d>
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <PCA9685_SetPwmFrequency+0xe8>)
 800172e:	f7fe ff63 	bl	80005f8 <__aeabi_dmul>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	a126      	add	r1, pc, #152	; (adr r1, 80017d0 <PCA9685_SetPwmFrequency+0xe0>)
 8001738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800173c:	f7ff f886 	bl	800084c <__aeabi_ddiv>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	4b23      	ldr	r3, [pc, #140]	; (80017dc <PCA9685_SetPwmFrequency+0xec>)
 800174e:	f7fe fd9b 	bl	8000288 <__aeabi_dsub>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f7ff fa45 	bl	8000be8 <__aeabi_d2f>
 800175e:	4603      	mov	r3, r0
 8001760:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f7fe fef0 	bl	8000548 <__aeabi_f2d>
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <PCA9685_SetPwmFrequency+0xf0>)
 800176e:	f7fe fd8d 	bl	800028c <__adddf3>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ec43 2b17 	vmov	d7, r2, r3
 800177a:	eeb0 0a47 	vmov.f32	s0, s14
 800177e:	eef0 0a67 	vmov.f32	s1, s15
 8001782:	f00a fe65 	bl	800c450 <floor>
 8001786:	ec53 2b10 	vmov	r2, r3, d0
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f7ff fa0b 	bl	8000ba8 <__aeabi_d2uiz>
 8001792:	4603      	mov	r3, r0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 8001798:	2001      	movs	r0, #1
 800179a:	f7ff ff79 	bl	8001690 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <PCA9685_SetPwmFrequency+0xf4>)
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	230a      	movs	r3, #10
 80017a4:	9302      	str	r3, [sp, #8]
 80017a6:	2301      	movs	r3, #1
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	f107 030b 	add.w	r3, r7, #11
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2301      	movs	r3, #1
 80017b2:	22fe      	movs	r2, #254	; 0xfe
 80017b4:	2180      	movs	r1, #128	; 0x80
 80017b6:	f004 f83b 	bl	8005830 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff ff68 	bl	8001690 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7ff ff75 	bl	80016b0 <PCA9685_RestartMode>
	return PCA9685_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	00000000 	.word	0x00000000
 80017d4:	4177d784 	.word	0x4177d784
 80017d8:	40b00000 	.word	0x40b00000
 80017dc:	3ff00000 	.word	0x3ff00000
 80017e0:	3fe00000 	.word	0x3fe00000
 80017e4:	200007d4 	.word	0x200007d4

080017e8 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af04      	add	r7, sp, #16
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
 80017f2:	460b      	mov	r3, r1
 80017f4:	80bb      	strh	r3, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	3306      	adds	r3, #6
 8001802:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 8001804:	88bb      	ldrh	r3, [r7, #4]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 800180a:	88bb      	ldrh	r3, [r7, #4]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	b29b      	uxth	r3, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8001814:	887b      	ldrh	r3, [r7, #2]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 800181a:	887b      	ldrh	r3, [r7, #2]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	b29b      	uxth	r3, r3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <PCA9685_SetPwm+0x70>)
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	b29a      	uxth	r2, r3
 800182c:	230a      	movs	r3, #10
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	2304      	movs	r3, #4
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2301      	movs	r3, #1
 800183c:	2180      	movs	r1, #128	; 0x80
 800183e:	f003 fff7 	bl	8005830 <HAL_I2C_Mem_Write>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200007d4 	.word	0x200007d4

0800185c <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
 8001866:	460b      	mov	r3, r1
 8001868:	80bb      	strh	r3, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 800186e:	88bb      	ldrh	r3, [r7, #4]
 8001870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001874:	d302      	bcc.n	800187c <PCA9685_SetPin+0x20>
 8001876:	f640 73ff 	movw	r3, #4095	; 0xfff
 800187a:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 800187c:	79bb      	ldrb	r3, [r7, #6]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d025      	beq.n	80018ce <PCA9685_SetPin+0x72>
    if (Value == 0) {
 8001882:	88bb      	ldrh	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d108      	bne.n	800189a <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2200      	movs	r2, #0
 800188c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ffa9 	bl	80017e8 <PCA9685_SetPwm>
 8001896:	4603      	mov	r3, r0
 8001898:	e03a      	b.n	8001910 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 800189a:	88bb      	ldrh	r3, [r7, #4]
 800189c:	f640 72ff 	movw	r2, #4095	; 0xfff
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d108      	bne.n	80018b6 <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff9b 	bl	80017e8 <PCA9685_SetPwm>
 80018b2:	4603      	mov	r3, r0
 80018b4:	e02c      	b.n	8001910 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 80018b6:	88bb      	ldrh	r3, [r7, #4]
 80018b8:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80018bc:	330f      	adds	r3, #15
 80018be:	b29a      	uxth	r2, r3
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff8f 	bl	80017e8 <PCA9685_SetPwm>
 80018ca:	4603      	mov	r3, r0
 80018cc:	e020      	b.n	8001910 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 80018ce:	88bb      	ldrh	r3, [r7, #4]
 80018d0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d108      	bne.n	80018ea <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	2200      	movs	r2, #0
 80018dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff81 	bl	80017e8 <PCA9685_SetPwm>
 80018e6:	4603      	mov	r3, r0
 80018e8:	e012      	b.n	8001910 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 80018ea:	88bb      	ldrh	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d108      	bne.n	8001902 <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff75 	bl	80017e8 <PCA9685_SetPwm>
 80018fe:	4603      	mov	r3, r0
 8001900:	e006      	b.n	8001910 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 8001902:	88ba      	ldrh	r2, [r7, #4]
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff6d 	bl	80017e8 <PCA9685_SetPwm>
 800190e:	4603      	mov	r3, r0
    }
  }
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	ed87 0a00 	vstr	s0, [r7]
 8001924:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 8001926:	edd7 7a00 	vldr	s15, [r7]
 800192a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001932:	d502      	bpl.n	800193a <PCA9685_SetServoAngle+0x22>
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 800193a:	edd7 7a00 	vldr	s15, [r7]
 800193e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80019c0 <PCA9685_SetServoAngle+0xa8>
 8001942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194a:	dd01      	ble.n	8001950 <PCA9685_SetServoAngle+0x38>
 800194c:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <PCA9685_SetServoAngle+0xac>)
 800194e:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8001950:	6838      	ldr	r0, [r7, #0]
 8001952:	f7fe fdf9 	bl	8000548 <__aeabi_f2d>
 8001956:	a318      	add	r3, pc, #96	; (adr r3, 80019b8 <PCA9685_SetServoAngle+0xa0>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	f7fe fe4c 	bl	80005f8 <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <PCA9685_SetServoAngle+0xb0>)
 800196e:	f7fe ff6d 	bl	800084c <__aeabi_ddiv>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <PCA9685_SetServoAngle+0xb4>)
 8001980:	f7fe fc84 	bl	800028c <__adddf3>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f7ff f92c 	bl	8000be8 <__aeabi_d2f>
 8001990:	4603      	mov	r3, r0
 8001992:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8001994:	edd7 7a03 	vldr	s15, [r7, #12]
 8001998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800199c:	ee17 3a90 	vmov	r3, s15
 80019a0:	b299      	uxth	r1, r3
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2200      	movs	r2, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff58 	bl	800185c <PCA9685_SetPin>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	00000000 	.word	0x00000000
 80019bc:	40786000 	.word	0x40786000
 80019c0:	43340000 	.word	0x43340000
 80019c4:	43340000 	.word	0x43340000
 80019c8:	40668000 	.word	0x40668000
 80019cc:	405b8000 	.word	0x405b8000

080019d0 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <PCA9685_Init+0x28>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 80019de:	f7ff fe3d 	bl	800165c <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 80019e2:	2030      	movs	r0, #48	; 0x30
 80019e4:	f7ff fe84 	bl	80016f0 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 80019e8:	2001      	movs	r0, #1
 80019ea:	f7ff fe71 	bl	80016d0 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200007d4 	.word	0x200007d4

080019fc <PID_Init>:
/*
 * 使用串级PID算法，外环PID为位置环，其输出为速度期望；内环PID为速度环，其输出为角度期望，直接控制舵机角度
 */

//坐标PID初始化
void PID_Init(PID *pid) {
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	pid->SetPosi = 0;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	801a      	strh	r2, [r3, #0]
	pid->ActualPosi = 0;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	805a      	strh	r2, [r3, #2]
	pid->errorPosi[0] = 0;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	809a      	strh	r2, [r3, #4]
	pid->errorPosi[1] = 0;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	80da      	strh	r2, [r3, #6]
	pid->errorSpeed[0] = 0;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	811a      	strh	r2, [r3, #8]
	pid->errorSpeed[1] = 0;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	815a      	strh	r2, [r3, #10]
	pid->errorSpeed[2] = 0;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	819a      	strh	r2, [r3, #12]
	pid->Speed = 0;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	629a      	str	r2, [r3, #40]	; 0x28
	pid->angle = 90;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a11      	ldr	r2, [pc, #68]	; (8001a80 <PID_Init+0x84>)
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->integral = 0;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	631a      	str	r2, [r3, #48]	; 0x30

	pid->PKp = 0.5;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001a4a:	611a      	str	r2, [r3, #16]
	pid->PKi = 0;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	615a      	str	r2, [r3, #20]
	pid->PKd = 0;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
	pid->SKp = 50;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <PID_Init+0x88>)
 8001a60:	61da      	str	r2, [r3, #28]
	pid->SKi = 0;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	621a      	str	r2, [r3, #32]
	pid->SKd = 0;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	42b40000 	.word	0x42b40000
 8001a84:	42480000 	.word	0x42480000

08001a88 <PID_Calc>:

//坐标PID调节函数(X轴)
uint16_t PID_Calc(PID *pid, uint16_t Posi, float Speed) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	460b      	mov	r3, r1
 8001a92:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a96:	817b      	strh	r3, [r7, #10]
	float max_angle, min_angle;
	if(Speed <= 10 && Speed >= -10){
 8001a98:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a9c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa8:	d80d      	bhi.n	8001ac6 <PID_Calc+0x3e>
 8001aaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aae:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001ab2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aba:	db04      	blt.n	8001ac6 <PID_Calc+0x3e>
		max_angle = ANGLE_MAX1;
 8001abc:	4ba6      	ldr	r3, [pc, #664]	; (8001d58 <PID_Calc+0x2d0>)
 8001abe:	61fb      	str	r3, [r7, #28]
		min_angle = ANGLE_MIN1;
 8001ac0:	4ba6      	ldr	r3, [pc, #664]	; (8001d5c <PID_Calc+0x2d4>)
 8001ac2:	61bb      	str	r3, [r7, #24]
 8001ac4:	e031      	b.n	8001b2a <PID_Calc+0xa2>
	}else if(Speed <= 20 && Speed >= -20){
 8001ac6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aca:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad6:	d80d      	bhi.n	8001af4 <PID_Calc+0x6c>
 8001ad8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001adc:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8001ae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae8:	db04      	blt.n	8001af4 <PID_Calc+0x6c>
		max_angle = ANGLE_MAX2;
 8001aea:	4b9d      	ldr	r3, [pc, #628]	; (8001d60 <PID_Calc+0x2d8>)
 8001aec:	61fb      	str	r3, [r7, #28]
		min_angle = ANGLE_MIN2;
 8001aee:	4b9d      	ldr	r3, [pc, #628]	; (8001d64 <PID_Calc+0x2dc>)
 8001af0:	61bb      	str	r3, [r7, #24]
 8001af2:	e01a      	b.n	8001b2a <PID_Calc+0xa2>
	}else if(Speed <= 30 && Speed >= -30){
 8001af4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001af8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b04:	d80d      	bhi.n	8001b22 <PID_Calc+0x9a>
 8001b06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b0a:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8001b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b16:	db04      	blt.n	8001b22 <PID_Calc+0x9a>
		max_angle = ANGLE_MAX3;
 8001b18:	4b93      	ldr	r3, [pc, #588]	; (8001d68 <PID_Calc+0x2e0>)
 8001b1a:	61fb      	str	r3, [r7, #28]
		min_angle = ANGLE_MIN3;
 8001b1c:	4b93      	ldr	r3, [pc, #588]	; (8001d6c <PID_Calc+0x2e4>)
 8001b1e:	61bb      	str	r3, [r7, #24]
 8001b20:	e003      	b.n	8001b2a <PID_Calc+0xa2>
	}else{
		max_angle = ANGLE_MAX4;
 8001b22:	4b93      	ldr	r3, [pc, #588]	; (8001d70 <PID_Calc+0x2e8>)
 8001b24:	61fb      	str	r3, [r7, #28]
		min_angle = ANGLE_MIN4;
 8001b26:	4b93      	ldr	r3, [pc, #588]	; (8001d74 <PID_Calc+0x2ec>)
 8001b28:	61bb      	str	r3, [r7, #24]
	}

	/******************************外环位置式PID(位置环)d************************************/

	pid->ActualPosi = Posi;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	897a      	ldrh	r2, [r7, #10]
 8001b2e:	805a      	strh	r2, [r3, #2]
	pid->errorPosi[0] = pid->SetPosi - pid->ActualPosi;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	881a      	ldrh	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	885b      	ldrh	r3, [r3, #2]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	b21a      	sxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	809a      	strh	r2, [r3, #4]

	/* 设定闭环死区 */
	if ((pid->errorPosi[0] >= -LOC_DEAD_ZONE)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b48:	f113 0f03 	cmn.w	r3, #3
 8001b4c:	db0e      	blt.n	8001b6c <PID_Calc+0xe4>
			&& (pid->errorPosi[0] <= LOC_DEAD_ZONE)) {
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	dc09      	bgt.n	8001b6c <PID_Calc+0xe4>
		pid->errorPosi[0] = 0;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	809a      	strh	r2, [r3, #4]
		pid->integral = 0;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	631a      	str	r2, [r3, #48]	; 0x30
		pid->errorPosi[1] = 0;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	80da      	strh	r2, [r3, #6]
	}

	if (pid->errorPosi[0] >= LOCAL_MAX) {
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b72:	2b95      	cmp	r3, #149	; 0x95
 8001b74:	dd03      	ble.n	8001b7e <PID_Calc+0xf6>
		pid->errorPosi[0] = LOCAL_MAX;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2296      	movs	r2, #150	; 0x96
 8001b7a:	809a      	strh	r2, [r3, #4]
 8001b7c:	e009      	b.n	8001b92 <PID_Calc+0x10a>
	} else if (pid->errorPosi[0] <= -LOCAL_MAX) {
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b84:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8001b88:	da03      	bge.n	8001b92 <PID_Calc+0x10a>
		pid->errorPosi[0] = -LOCAL_MAX;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f64f 726a 	movw	r2, #65386	; 0xff6a
 8001b90:	809a      	strh	r2, [r3, #4]
	}

	//积分分离，即当差值太大时，不叠加积分
	if (pid->errorPosi[0] <= 200) {
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b98:	2bc8      	cmp	r3, #200	; 0xc8
 8001b9a:	dc0e      	bgt.n	8001bba <PID_Calc+0x132>
		pid->integral += pid->errorPosi[0];
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ba8:	ee07 3a90 	vmov	s15, r3
 8001bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	}

	//位置式PID算法核心函数
	pid->Speed = pid->PKp * pid->errorPosi[0] + pid->PKi * pid->integral
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	edd3 6a05 	vldr	s13, [r3, #20]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be2:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ pid->PKd * (pid->errorPosi[0] - pid->errorPosi[1]);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	edd3 6a06 	vldr	s13, [r3, #24]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	ee07 3a90 	vmov	s15, r3
 8001c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c08:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid->Speed = pid->PKp * pid->errorPosi[0] + pid->PKi * pid->integral
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
//	printf("比例%hu\r\n积分%hu\r\n微分%hu\r\n输出为%hu\r\n", (unsigned short int)pid->err, (unsigned short int)pid->integral,
//			(unsigned short int)(pid->err - pid->err_last), (unsigned short int)pid->ActualPosi);
	pid->errorPosi[1] = pid->errorPosi[0];
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	80da      	strh	r2, [r3, #6]

	/*********************************************************************************/

	/******************************内环增量式PID(速度环)d************************************/

	pid->errorSpeed[0] = pid->Speed - Speed;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001c22:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c2e:	ee17 3a90 	vmov	r3, s15
 8001c32:	b21a      	sxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	811a      	strh	r2, [r3, #8]

	//增量式PID核心算法
	float dangle = pid->SKp * (pid->errorSpeed[0] - pid->errorSpeed[1])
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c44:	461a      	mov	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	ee07 3a90 	vmov	s15, r3
 8001c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c56:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ pid->SKi * pid->errorSpeed[0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	edd3 6a08 	vldr	s13, [r3, #32]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c72:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ pid->SKd
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
					* (pid->errorSpeed[0] - 2 * pid->errorSpeed[1]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	1ad3      	subs	r3, r2, r3
							+ pid->errorSpeed[2]);
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001c94:	4413      	add	r3, r2
					* (pid->errorSpeed[0] - 2 * pid->errorSpeed[1]
 8001c96:	ee07 3a90 	vmov	s15, r3
 8001c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float dangle = pid->SKp * (pid->errorSpeed[0] - pid->errorSpeed[1])
 8001ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca6:	edc7 7a05 	vstr	s15, [r7, #20]
	if(dangle >= DANGLE_MAX){
 8001caa:	6978      	ldr	r0, [r7, #20]
 8001cac:	f7fe fc4c 	bl	8000548 <__aeabi_f2d>
 8001cb0:	a325      	add	r3, pc, #148	; (adr r3, 8001d48 <PID_Calc+0x2c0>)
 8001cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb6:	f7fe ff25 	bl	8000b04 <__aeabi_dcmpge>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <PID_Calc+0x23e>
		dangle = DANGLE_MAX;
 8001cc0:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <PID_Calc+0x2f0>)
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	e00c      	b.n	8001ce0 <PID_Calc+0x258>
	}else if(dangle <= -DANGLE_MAX){
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7fe fc3e 	bl	8000548 <__aeabi_f2d>
 8001ccc:	a320      	add	r3, pc, #128	; (adr r3, 8001d50 <PID_Calc+0x2c8>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe ff0d 	bl	8000af0 <__aeabi_dcmple>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <PID_Calc+0x258>
		dangle = -DANGLE_MAX;
 8001cdc:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <PID_Calc+0x2f4>)
 8001cde:	617b      	str	r3, [r7, #20]
	}

	pid->angle += dangle;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001ce6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	if (pid->angle >= max_angle) {
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001cfa:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d06:	d803      	bhi.n	8001d10 <PID_Calc+0x288>
		pid->angle = max_angle;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d0e:	e00c      	b.n	8001d2a <PID_Calc+0x2a2>
	} else if (pid->angle <= min_angle) {
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001d16:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d22:	db02      	blt.n	8001d2a <PID_Calc+0x2a2>
		pid->angle = min_angle;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	return pid->angle;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d34:	ee17 3a90 	vmov	r3, s15
 8001d38:	b29b      	uxth	r3, r3

	/****************************************************************************************/
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3720      	adds	r7, #32
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	f3af 8000 	nop.w
 8001d48:	66666666 	.word	0x66666666
 8001d4c:	3fe66666 	.word	0x3fe66666
 8001d50:	66666666 	.word	0x66666666
 8001d54:	bfe66666 	.word	0xbfe66666
 8001d58:	42c80000 	.word	0x42c80000
 8001d5c:	42a00000 	.word	0x42a00000
 8001d60:	42dc0000 	.word	0x42dc0000
 8001d64:	428c0000 	.word	0x428c0000
 8001d68:	42f00000 	.word	0x42f00000
 8001d6c:	42700000 	.word	0x42700000
 8001d70:	43020000 	.word	0x43020000
 8001d74:	42480000 	.word	0x42480000
 8001d78:	3f333333 	.word	0x3f333333
 8001d7c:	bf333333 	.word	0xbf333333

08001d80 <ChaSetPosi>:

//改变设定值
void ChaSetPosi(PID *pid, uint16_t setPosi) {
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
	pid->SetPosi = setPosi;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	801a      	strh	r2, [r3, #0]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <PID_Reset>:

void PID_Reset(PID *pid) {
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	pid->integral = 0;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	631a      	str	r2, [r3, #48]	; 0x30
	pid->Speed = 0;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28
	pid->angle = 90;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <PID_Reset+0x48>)
 8001dbc:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->errorPosi[0] = 0;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	809a      	strh	r2, [r3, #4]
	pid->errorPosi[1] = 0;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	80da      	strh	r2, [r3, #6]
	pid->errorSpeed[0] = 0;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	811a      	strh	r2, [r3, #8]
	pid->errorSpeed[1] = 0;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	815a      	strh	r2, [r3, #10]
	pid->errorSpeed[2] = 0;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	819a      	strh	r2, [r3, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	42b40000 	.word	0x42b40000

08001dec <HAL_TIM_PeriodElapsedCallback>:
uint8_t recFlag = 0;    //接收完成标志位
char IRCodes[4] = {0};


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	upCount++;
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dfc:	6013      	str	r3, [r2, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000610 	.word	0x20000610

08001e10 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	if(isUpCompare)   //如果是上升沿捕获
 8001e18:	4b67      	ldr	r3, [pc, #412]	; (8001fb8 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d01e      	beq.n	8001e5e <HAL_TIM_IC_CaptureCallback+0x4e>
	{
		valueUp = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001e20:	2100      	movs	r1, #0
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f006 f8fe 	bl	8008024 <HAL_TIM_ReadCapturedValue>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8001e2e:	801a      	strh	r2, [r3, #0]
		isUpCompare = 0;
 8001e30:	4b61      	ldr	r3, [pc, #388]	; (8001fb8 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_ICPOLARITY_FALLING);   //设置为下降沿捕获
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6a1a      	ldr	r2, [r3, #32]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 020a 	bic.w	r2, r2, #10
 8001e44:	621a      	str	r2, [r3, #32]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6a1a      	ldr	r2, [r3, #32]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0202 	orr.w	r2, r2, #2
 8001e54:	621a      	str	r2, [r3, #32]
		upCount = 0;
 8001e56:	4b5a      	ldr	r3, [pc, #360]	; (8001fc0 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	e056      	b.n	8001f0c <HAL_TIM_IC_CaptureCallback+0xfc>
	}
	else
	{
		valueDown = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001e5e:	2100      	movs	r1, #0
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f006 f8df 	bl	8008024 <HAL_TIM_ReadCapturedValue>
 8001e66:	4603      	mov	r3, r0
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	4b56      	ldr	r3, [pc, #344]	; (8001fc4 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8001e6c:	801a      	strh	r2, [r3, #0]
		isUpCompare = 1;
 8001e6e:	4b52      	ldr	r3, [pc, #328]	; (8001fb8 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_ICPOLARITY_RISING);   //设置为上升沿捕获
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6a1a      	ldr	r2, [r3, #32]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 020a 	bic.w	r2, r2, #10
 8001e82:	621a      	str	r2, [r3, #32]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6a12      	ldr	r2, [r2, #32]
 8001e8e:	621a      	str	r2, [r3, #32]
		width = valueDown + upCount*65536 - valueUp;
 8001e90:	4b4c      	ldr	r3, [pc, #304]	; (8001fc4 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8001e92:	881a      	ldrh	r2, [r3, #0]
 8001e94:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	4b4a      	ldr	r3, [pc, #296]	; (8001fc8 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8001e9e:	801a      	strh	r2, [r3, #0]
		if(width > 4400 && width < 4600)    //判断同步码
 8001ea0:	4b49      	ldr	r3, [pc, #292]	; (8001fc8 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	f241 1230 	movw	r2, #4400	; 0x1130
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d915      	bls.n	8001ed8 <HAL_TIM_IC_CaptureCallback+0xc8>
 8001eac:	4b46      	ldr	r3, [pc, #280]	; (8001fc8 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	f241 12f7 	movw	r2, #4599	; 0x11f7
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d80f      	bhi.n	8001ed8 <HAL_TIM_IC_CaptureCallback+0xc8>
		{
			bufferId = 0;
 8001eb8:	4b44      	ldr	r3, [pc, #272]	; (8001fcc <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	801a      	strh	r2, [r3, #0]
			buffer[bufferId++] = width;
 8001ebe:	4b43      	ldr	r3, [pc, #268]	; (8001fcc <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	b291      	uxth	r1, r2
 8001ec6:	4a41      	ldr	r2, [pc, #260]	; (8001fcc <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8001ec8:	8011      	strh	r1, [r2, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b3e      	ldr	r3, [pc, #248]	; (8001fc8 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8001ece:	8819      	ldrh	r1, [r3, #0]
 8001ed0:	4b3f      	ldr	r3, [pc, #252]	; (8001fd0 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001ed2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001ed6:	e019      	b.n	8001f0c <HAL_TIM_IC_CaptureCallback+0xfc>
		}
		else if(bufferId > 0)
 8001ed8:	4b3c      	ldr	r3, [pc, #240]	; (8001fcc <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d015      	beq.n	8001f0c <HAL_TIM_IC_CaptureCallback+0xfc>
		{
			buffer[bufferId++] = width;
 8001ee0:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	b291      	uxth	r1, r2
 8001ee8:	4a38      	ldr	r2, [pc, #224]	; (8001fcc <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8001eea:	8011      	strh	r1, [r2, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8001ef0:	8819      	ldrh	r1, [r3, #0]
 8001ef2:	4b37      	ldr	r3, [pc, #220]	; (8001fd0 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001ef4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			if(bufferId > 32)   //所有码一共32位已经全部收到
 8001ef8:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	2b20      	cmp	r3, #32
 8001efe:	d905      	bls.n	8001f0c <HAL_TIM_IC_CaptureCallback+0xfc>
			{
				recFlag = 1;
 8001f00:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
				bufferId = 0;
 8001f06:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	801a      	strh	r2, [r3, #0]
			}

		}
	}
	for(int i=0;i<4;i++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	e007      	b.n	8001f22 <HAL_TIM_IC_CaptureCallback+0x112>
		{
			IRCodes[i] = 0;
 8001f12:	4a31      	ldr	r2, [pc, #196]	; (8001fd8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4413      	add	r3, r2
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<4;i++)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	ddf4      	ble.n	8001f12 <HAL_TIM_IC_CaptureCallback+0x102>
		}

		for(int i =0;i < 32; i++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	e03b      	b.n	8001fa6 <HAL_TIM_IC_CaptureCallback+0x196>
		{
			if(buffer[i+1]<1000)
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	3301      	adds	r3, #1
 8001f32:	4a27      	ldr	r2, [pc, #156]	; (8001fd0 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f3c:	d212      	bcs.n	8001f64 <HAL_TIM_IC_CaptureCallback+0x154>
			{
				IRCodes[i/8] = IRCodes[i/8]<<1;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	da00      	bge.n	8001f46 <HAL_TIM_IC_CaptureCallback+0x136>
 8001f44:	3307      	adds	r3, #7
 8001f46:	10db      	asrs	r3, r3, #3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b23      	ldr	r3, [pc, #140]	; (8001fd8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001f4c:	5c9a      	ldrb	r2, [r3, r2]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	da00      	bge.n	8001f56 <HAL_TIM_IC_CaptureCallback+0x146>
 8001f54:	3307      	adds	r3, #7
 8001f56:	10db      	asrs	r3, r3, #3
 8001f58:	4619      	mov	r1, r3
 8001f5a:	0053      	lsls	r3, r2, #1
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001f60:	545a      	strb	r2, [r3, r1]
 8001f62:	e01d      	b.n	8001fa0 <HAL_TIM_IC_CaptureCallback+0x190>
			}
			else
			{
				IRCodes[i/8] = IRCodes[i/8]<<1;
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	da00      	bge.n	8001f6c <HAL_TIM_IC_CaptureCallback+0x15c>
 8001f6a:	3307      	adds	r3, #7
 8001f6c:	10db      	asrs	r3, r3, #3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001f72:	5c9a      	ldrb	r2, [r3, r2]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	da00      	bge.n	8001f7c <HAL_TIM_IC_CaptureCallback+0x16c>
 8001f7a:	3307      	adds	r3, #7
 8001f7c:	10db      	asrs	r3, r3, #3
 8001f7e:	4619      	mov	r1, r3
 8001f80:	0053      	lsls	r3, r2, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001f86:	545a      	strb	r2, [r3, r1]
				IRCodes[i/8] |= 0x01;
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	da00      	bge.n	8001f90 <HAL_TIM_IC_CaptureCallback+0x180>
 8001f8e:	3307      	adds	r3, #7
 8001f90:	10db      	asrs	r3, r3, #3
 8001f92:	4a11      	ldr	r2, [pc, #68]	; (8001fd8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001f94:	5cd2      	ldrb	r2, [r2, r3]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	b2d1      	uxtb	r1, r2
 8001f9c:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001f9e:	54d1      	strb	r1, [r2, r3]
		for(int i =0;i < 32; i++)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b1f      	cmp	r3, #31
 8001faa:	ddc0      	ble.n	8001f2e <HAL_TIM_IC_CaptureCallback+0x11e>
			}
		}
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	20000614 	.word	0x20000614
 8001fc0:	20000610 	.word	0x20000610
 8001fc4:	20000616 	.word	0x20000616
 8001fc8:	200007d8 	.word	0x200007d8
 8001fcc:	20000718 	.word	0x20000718
 8001fd0:	20000618 	.word	0x20000618
 8001fd4:	2000071a 	.word	0x2000071a
 8001fd8:	2000071c 	.word	0x2000071c

08001fdc <Remote_Scan>:

uint8_t Remote_Scan(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
	uint8_t key = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	71fb      	strb	r3, [r7, #7]
	if(recFlag)
 8001fe6:	4b17      	ldr	r3, [pc, #92]	; (8002044 <Remote_Scan+0x68>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d022      	beq.n	8002034 <Remote_Scan+0x58>
	{
		BEEP_On();
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff4:	4814      	ldr	r0, [pc, #80]	; (8002048 <Remote_Scan+0x6c>)
 8001ff6:	f003 f99b 	bl	8005330 <HAL_GPIO_WritePin>
		recFlag = 0;    //防止if语句重复成立
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <Remote_Scan+0x68>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
		if(IRCodes[2])
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <Remote_Scan+0x70>)
 8002002:	789b      	ldrb	r3, [r3, #2]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <Remote_Scan+0x34>
		{
			key = IRCodes[2];
 8002008:	4b10      	ldr	r3, [pc, #64]	; (800204c <Remote_Scan+0x70>)
 800200a:	789b      	ldrb	r3, [r3, #2]
 800200c:	71fb      	strb	r3, [r7, #7]
 800200e:	e001      	b.n	8002014 <Remote_Scan+0x38>
		}else{
			key = NOPRES;
 8002010:	2300      	movs	r3, #0
 8002012:	71fb      	strb	r3, [r7, #7]
		}
		HAL_Delay(100);
 8002014:	2064      	movs	r0, #100	; 0x64
 8002016:	f002 fa9f 	bl	8004558 <HAL_Delay>
		ShowMode(IRCodes[2], 0xff);
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <Remote_Scan+0x70>)
 800201c:	789b      	ldrb	r3, [r3, #2]
 800201e:	21ff      	movs	r1, #255	; 0xff
 8002020:	4618      	mov	r0, r3
 8002022:	f000 fbc3 	bl	80027ac <ShowMode>
		BEEP_Off();
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800202c:	4806      	ldr	r0, [pc, #24]	; (8002048 <Remote_Scan+0x6c>)
 800202e:	f003 f97f 	bl	8005330 <HAL_GPIO_WritePin>
 8002032:	e001      	b.n	8002038 <Remote_Scan+0x5c>
    }else{
    	key = NOPRES;
 8002034:	2300      	movs	r3, #0
 8002036:	71fb      	strb	r3, [r7, #7]
    }

	return key;
 8002038:	79fb      	ldrb	r3, [r7, #7]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	2000071a 	.word	0x2000071a
 8002048:	40021400 	.word	0x40021400
 800204c:	2000071c 	.word	0x2000071c

08002050 <asc2int>:
extern DMA_HandleTypeDef hdma_usart1_rx;

extern float tim;

uint16_t asc2int(uint8_t huns, uint8_t tens, uint8_t ones)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
 800205a:	460b      	mov	r3, r1
 800205c:	71bb      	strb	r3, [r7, #6]
 800205e:	4613      	mov	r3, r2
 8002060:	717b      	strb	r3, [r7, #5]
	uint16_t number = (huns-48) * 100 + (tens-48) * 10 + (ones-48);
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	3b30      	subs	r3, #48	; 0x30
 8002066:	b29b      	uxth	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	0092      	lsls	r2, r2, #2
 800206c:	4413      	add	r3, r2
 800206e:	461a      	mov	r2, r3
 8002070:	0091      	lsls	r1, r2, #2
 8002072:	461a      	mov	r2, r3
 8002074:	460b      	mov	r3, r1
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	b29a      	uxth	r2, r3
 800207c:	79bb      	ldrb	r3, [r7, #6]
 800207e:	3b30      	subs	r3, #48	; 0x30
 8002080:	b29b      	uxth	r3, r3
 8002082:	4619      	mov	r1, r3
 8002084:	0089      	lsls	r1, r1, #2
 8002086:	440b      	add	r3, r1
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	b29b      	uxth	r3, r3
 800208c:	4413      	add	r3, r2
 800208e:	b29a      	uxth	r2, r3
 8002090:	797b      	ldrb	r3, [r7, #5]
 8002092:	b29b      	uxth	r3, r3
 8002094:	4413      	add	r3, r2
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b30      	subs	r3, #48	; 0x30
 800209a:	81fb      	strh	r3, [r7, #14]
	return number;
 800209c:	89fb      	ldrh	r3, [r7, #14]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	0000      	movs	r0, r0
 80020ac:	0000      	movs	r0, r0
	...

080020b0 <USAR_UART_IDLECallback>:

void USAR_UART_IDLECallback(UART_HandleTypeDef *huart) {
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	//数据传输的格式为abcd(x轴,y轴)ef
	uint8_t start = 0, end = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	2300      	movs	r3, #0
 80020be:	73bb      	strb	r3, [r7, #14]
	uint8_t isStart = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	737b      	strb	r3, [r7, #13]
	// 停止本次DMA传输
	HAL_UART_DMAStop(&huart1);
 80020c4:	4860      	ldr	r0, [pc, #384]	; (8002248 <USAR_UART_IDLECallback+0x198>)
 80020c6:	f006 fba6 	bl	8008816 <HAL_UART_DMAStop>
	HAL_TIM_Base_Stop(&htim3); //按下确定键后开始计时
 80020ca:	4860      	ldr	r0, [pc, #384]	; (800224c <USAR_UART_IDLECallback+0x19c>)
 80020cc:	f005 fa6a 	bl	80075a4 <HAL_TIM_Base_Stop>
	tim = __HAL_TIM_GET_COUNTER(&htim3)*1.0/10000;
 80020d0:	4b5e      	ldr	r3, [pc, #376]	; (800224c <USAR_UART_IDLECallback+0x19c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fa14 	bl	8000504 <__aeabi_ui2d>
 80020dc:	a358      	add	r3, pc, #352	; (adr r3, 8002240 <USAR_UART_IDLECallback+0x190>)
 80020de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e2:	f7fe fbb3 	bl	800084c <__aeabi_ddiv>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4610      	mov	r0, r2
 80020ec:	4619      	mov	r1, r3
 80020ee:	f7fe fd7b 	bl	8000be8 <__aeabi_d2f>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4a56      	ldr	r2, [pc, #344]	; (8002250 <USAR_UART_IDLECallback+0x1a0>)
 80020f6:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);  //重新将计时器置零，方便下次计时
 80020f8:	4b54      	ldr	r3, [pc, #336]	; (800224c <USAR_UART_IDLECallback+0x19c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2200      	movs	r2, #0
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24
	// 计算接收到的数据长度
	uint8_t data_length = BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8002100:	4b54      	ldr	r3, [pc, #336]	; (8002254 <USAR_UART_IDLECallback+0x1a4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f1c3 0320 	rsb	r3, r3, #32
 800210c:	72fb      	strb	r3, [r7, #11]

	for (uint8_t j = 0; j < 32; j++) {
 800210e:	2300      	movs	r3, #0
 8002110:	733b      	strb	r3, [r7, #12]
 8002112:	e040      	b.n	8002196 <USAR_UART_IDLECallback+0xe6>
		if (isStart == 0 && receive_buff[j] == 0x61) {
 8002114:	7b7b      	ldrb	r3, [r7, #13]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d122      	bne.n	8002160 <USAR_UART_IDLECallback+0xb0>
 800211a:	7b3b      	ldrb	r3, [r7, #12]
 800211c:	4a4e      	ldr	r2, [pc, #312]	; (8002258 <USAR_UART_IDLECallback+0x1a8>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	2b61      	cmp	r3, #97	; 0x61
 8002122:	d11d      	bne.n	8002160 <USAR_UART_IDLECallback+0xb0>
			if (receive_buff[j] == 0x61 && receive_buff[j + 1] == 0x62
 8002124:	7b3b      	ldrb	r3, [r7, #12]
 8002126:	4a4c      	ldr	r2, [pc, #304]	; (8002258 <USAR_UART_IDLECallback+0x1a8>)
 8002128:	5cd3      	ldrb	r3, [r2, r3]
 800212a:	2b61      	cmp	r3, #97	; 0x61
 800212c:	d118      	bne.n	8002160 <USAR_UART_IDLECallback+0xb0>
 800212e:	7b3b      	ldrb	r3, [r7, #12]
 8002130:	3301      	adds	r3, #1
 8002132:	4a49      	ldr	r2, [pc, #292]	; (8002258 <USAR_UART_IDLECallback+0x1a8>)
 8002134:	5cd3      	ldrb	r3, [r2, r3]
 8002136:	2b62      	cmp	r3, #98	; 0x62
 8002138:	d112      	bne.n	8002160 <USAR_UART_IDLECallback+0xb0>
					&& receive_buff[j + 2] == 0x63
 800213a:	7b3b      	ldrb	r3, [r7, #12]
 800213c:	3302      	adds	r3, #2
 800213e:	4a46      	ldr	r2, [pc, #280]	; (8002258 <USAR_UART_IDLECallback+0x1a8>)
 8002140:	5cd3      	ldrb	r3, [r2, r3]
 8002142:	2b63      	cmp	r3, #99	; 0x63
 8002144:	d10c      	bne.n	8002160 <USAR_UART_IDLECallback+0xb0>
					&& receive_buff[j + 3] == 0x64) {
 8002146:	7b3b      	ldrb	r3, [r7, #12]
 8002148:	3303      	adds	r3, #3
 800214a:	4a43      	ldr	r2, [pc, #268]	; (8002258 <USAR_UART_IDLECallback+0x1a8>)
 800214c:	5cd3      	ldrb	r3, [r2, r3]
 800214e:	2b64      	cmp	r3, #100	; 0x64
 8002150:	d106      	bne.n	8002160 <USAR_UART_IDLECallback+0xb0>
				j += 4;
 8002152:	7b3b      	ldrb	r3, [r7, #12]
 8002154:	3304      	adds	r3, #4
 8002156:	733b      	strb	r3, [r7, #12]
				start = j;
 8002158:	7b3b      	ldrb	r3, [r7, #12]
 800215a:	73fb      	strb	r3, [r7, #15]
				isStart = 1;
 800215c:	2301      	movs	r3, #1
 800215e:	737b      	strb	r3, [r7, #13]
			}
		}
		if(isStart == 1 && receive_buff[j] == 0x65)
 8002160:	7b7b      	ldrb	r3, [r7, #13]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d114      	bne.n	8002190 <USAR_UART_IDLECallback+0xe0>
 8002166:	7b3b      	ldrb	r3, [r7, #12]
 8002168:	4a3b      	ldr	r2, [pc, #236]	; (8002258 <USAR_UART_IDLECallback+0x1a8>)
 800216a:	5cd3      	ldrb	r3, [r2, r3]
 800216c:	2b65      	cmp	r3, #101	; 0x65
 800216e:	d10f      	bne.n	8002190 <USAR_UART_IDLECallback+0xe0>
		{
			if(receive_buff[j] == 0x65 && receive_buff[j+1] == 0x66){
 8002170:	7b3b      	ldrb	r3, [r7, #12]
 8002172:	4a39      	ldr	r2, [pc, #228]	; (8002258 <USAR_UART_IDLECallback+0x1a8>)
 8002174:	5cd3      	ldrb	r3, [r2, r3]
 8002176:	2b65      	cmp	r3, #101	; 0x65
 8002178:	d10a      	bne.n	8002190 <USAR_UART_IDLECallback+0xe0>
 800217a:	7b3b      	ldrb	r3, [r7, #12]
 800217c:	3301      	adds	r3, #1
 800217e:	4a36      	ldr	r2, [pc, #216]	; (8002258 <USAR_UART_IDLECallback+0x1a8>)
 8002180:	5cd3      	ldrb	r3, [r2, r3]
 8002182:	2b66      	cmp	r3, #102	; 0x66
 8002184:	d104      	bne.n	8002190 <USAR_UART_IDLECallback+0xe0>
				end = j - 1;
 8002186:	7b3b      	ldrb	r3, [r7, #12]
 8002188:	3b01      	subs	r3, #1
 800218a:	73bb      	strb	r3, [r7, #14]
				isStart = 2;
 800218c:	2302      	movs	r3, #2
 800218e:	737b      	strb	r3, [r7, #13]
	for (uint8_t j = 0; j < 32; j++) {
 8002190:	7b3b      	ldrb	r3, [r7, #12]
 8002192:	3301      	adds	r3, #1
 8002194:	733b      	strb	r3, [r7, #12]
 8002196:	7b3b      	ldrb	r3, [r7, #12]
 8002198:	2b1f      	cmp	r3, #31
 800219a:	d9bb      	bls.n	8002114 <USAR_UART_IDLECallback+0x64>
			}
		}
	}
	if (isStart == 2) {
 800219c:	7b7b      	ldrb	r3, [r7, #13]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d13a      	bne.n	8002218 <USAR_UART_IDLECallback+0x168>
//			} else {
//				printf("%x ", receive_buff[j]);
//			}
//		}

		i++;
 80021a2:	4b2e      	ldr	r3, [pc, #184]	; (800225c <USAR_UART_IDLECallback+0x1ac>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	3301      	adds	r3, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b2c      	ldr	r3, [pc, #176]	; (800225c <USAR_UART_IDLECallback+0x1ac>)
 80021ac:	701a      	strb	r2, [r3, #0]
		if (i >= 31) {
 80021ae:	4b2b      	ldr	r3, [pc, #172]	; (800225c <USAR_UART_IDLECallback+0x1ac>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b1e      	cmp	r3, #30
 80021b4:	d902      	bls.n	80021bc <USAR_UART_IDLECallback+0x10c>
			i = 0;
 80021b6:	4b29      	ldr	r3, [pc, #164]	; (800225c <USAR_UART_IDLECallback+0x1ac>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
		}
		coordinate_XY[i][0] = asc2int(receive_buff[start], receive_buff[start+1], receive_buff[start+2]);
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	4a26      	ldr	r2, [pc, #152]	; (8002258 <USAR_UART_IDLECallback+0x1a8>)
 80021c0:	5cd0      	ldrb	r0, [r2, r3]
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	3301      	adds	r3, #1
 80021c6:	4a24      	ldr	r2, [pc, #144]	; (8002258 <USAR_UART_IDLECallback+0x1a8>)
 80021c8:	5cd1      	ldrb	r1, [r2, r3]
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	3302      	adds	r3, #2
 80021ce:	4a22      	ldr	r2, [pc, #136]	; (8002258 <USAR_UART_IDLECallback+0x1a8>)
 80021d0:	5cd3      	ldrb	r3, [r2, r3]
 80021d2:	4a22      	ldr	r2, [pc, #136]	; (800225c <USAR_UART_IDLECallback+0x1ac>)
 80021d4:	7812      	ldrb	r2, [r2, #0]
 80021d6:	4614      	mov	r4, r2
 80021d8:	461a      	mov	r2, r3
 80021da:	f7ff ff39 	bl	8002050 <asc2int>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b1f      	ldr	r3, [pc, #124]	; (8002260 <USAR_UART_IDLECallback+0x1b0>)
 80021e4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
		coordinate_XY[i][1] = asc2int(receive_buff[end-2], receive_buff[end-1], receive_buff[end]);
 80021e8:	7bbb      	ldrb	r3, [r7, #14]
 80021ea:	3b02      	subs	r3, #2
 80021ec:	4a1a      	ldr	r2, [pc, #104]	; (8002258 <USAR_UART_IDLECallback+0x1a8>)
 80021ee:	5cd0      	ldrb	r0, [r2, r3]
 80021f0:	7bbb      	ldrb	r3, [r7, #14]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	4a18      	ldr	r2, [pc, #96]	; (8002258 <USAR_UART_IDLECallback+0x1a8>)
 80021f6:	5cd1      	ldrb	r1, [r2, r3]
 80021f8:	7bbb      	ldrb	r3, [r7, #14]
 80021fa:	4a17      	ldr	r2, [pc, #92]	; (8002258 <USAR_UART_IDLECallback+0x1a8>)
 80021fc:	5cd3      	ldrb	r3, [r2, r3]
 80021fe:	4a17      	ldr	r2, [pc, #92]	; (800225c <USAR_UART_IDLECallback+0x1ac>)
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	4614      	mov	r4, r2
 8002204:	461a      	mov	r2, r3
 8002206:	f7ff ff23 	bl	8002050 <asc2int>
 800220a:	4603      	mov	r3, r0
 800220c:	4619      	mov	r1, r3
 800220e:	4a14      	ldr	r2, [pc, #80]	; (8002260 <USAR_UART_IDLECallback+0x1b0>)
 8002210:	00a3      	lsls	r3, r4, #2
 8002212:	4413      	add	r3, r2
 8002214:	460a      	mov	r2, r1
 8002216:	805a      	strh	r2, [r3, #2]


	}

// 清零接收缓冲区
	memset(receive_buff, 0, data_length);
 8002218:	7afb      	ldrb	r3, [r7, #11]
 800221a:	461a      	mov	r2, r3
 800221c:	2100      	movs	r1, #0
 800221e:	480e      	ldr	r0, [pc, #56]	; (8002258 <USAR_UART_IDLECallback+0x1a8>)
 8002220:	f007 f99e 	bl	8009560 <memset>
	data_length = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	72fb      	strb	r3, [r7, #11]

	HAL_TIM_Base_Start(&htim3); //按下确定键后开始计时
 8002228:	4808      	ldr	r0, [pc, #32]	; (800224c <USAR_UART_IDLECallback+0x19c>)
 800222a:	f005 f953 	bl	80074d4 <HAL_TIM_Base_Start>
// 重启开始DMA传输 每次255字节数据
	HAL_UART_Receive_DMA(&huart1, (uint8_t*) receive_buff, 32);
 800222e:	2220      	movs	r2, #32
 8002230:	4909      	ldr	r1, [pc, #36]	; (8002258 <USAR_UART_IDLECallback+0x1a8>)
 8002232:	4805      	ldr	r0, [pc, #20]	; (8002248 <USAR_UART_IDLECallback+0x198>)
 8002234:	f006 fabf 	bl	80087b6 <HAL_UART_Receive_DMA>
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	bd90      	pop	{r4, r7, pc}
 8002240:	00000000 	.word	0x00000000
 8002244:	40c38800 	.word	0x40c38800
 8002248:	20000af0 	.word	0x20000af0
 800224c:	200009b8 	.word	0x200009b8
 8002250:	200007dc 	.word	0x200007dc
 8002254:	20000a90 	.word	0x20000a90
 8002258:	20000720 	.word	0x20000720
 800225c:	200007c6 	.word	0x200007c6
 8002260:	20000740 	.word	0x20000740

08002264 <USER_UART_IRQHandler>:
void USER_UART_IRQHandler(UART_HandleTypeDef *huart) {	// 判断是否是串口1
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
//	printf("\r\n进入中断函数.....\r\n");
	if (USART1 == huart->Instance) {	// 判断是否是空闲中断
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <USER_UART_IRQHandler+0x44>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d114      	bne.n	80022a0 <USER_UART_IRQHandler+0x3c>
		if (RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {// 清除空闲中断标志（否则会一直不断进入中断）
 8002276:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <USER_UART_IRQHandler+0x48>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	2b10      	cmp	r3, #16
 8002282:	d10d      	bne.n	80022a0 <USER_UART_IRQHandler+0x3c>
			__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <USER_UART_IRQHandler+0x48>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <USER_UART_IRQHandler+0x48>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
			// 调用中断处理函数
			USAR_UART_IDLECallback(huart);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ff08 	bl	80020b0 <USAR_UART_IDLECallback>
		}
	}
}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40011000 	.word	0x40011000
 80022ac:	20000af0 	.word	0x20000af0

080022b0 <ballSpeed>:
uint8_t i = 0; //用于存放模式选择缓存区的向量

float tim;

//计算小球速度
void ballSpeed() {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
	float distanceX, distanceY, distanceIns; //用于存放X，Y方向上的间距
	uint8_t j = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	73fb      	strb	r3, [r7, #15]
	j = (i - 1) ? (i >= 1) : (i - 1 + LEN);  //使用当前帧的坐标和10帧前的坐标计算瞬时速度
 80022ba:	4b5e      	ldr	r3, [pc, #376]	; (8002434 <ballSpeed+0x184>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d007      	beq.n	80022d2 <ballSpeed+0x22>
 80022c2:	4b5c      	ldr	r3, [pc, #368]	; (8002434 <ballSpeed+0x184>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	bf14      	ite	ne
 80022ca:	2301      	movne	r3, #1
 80022cc:	2300      	moveq	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	e003      	b.n	80022da <ballSpeed+0x2a>
 80022d2:	4b58      	ldr	r3, [pc, #352]	; (8002434 <ballSpeed+0x184>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	331f      	adds	r3, #31
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	73fb      	strb	r3, [r7, #15]
	//计算瞬时的X方向、Y方向和总间距
	distanceX = (coordinate_XY[i][0] - coordinate_XY[j][0]) / RESOLUTION;
 80022dc:	4b55      	ldr	r3, [pc, #340]	; (8002434 <ballSpeed+0x184>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b55      	ldr	r3, [pc, #340]	; (8002438 <ballSpeed+0x188>)
 80022e4:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80022e8:	4619      	mov	r1, r3
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	4a52      	ldr	r2, [pc, #328]	; (8002438 <ballSpeed+0x188>)
 80022ee:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80022f2:	1acb      	subs	r3, r1, r3
 80022f4:	4a51      	ldr	r2, [pc, #324]	; (800243c <ballSpeed+0x18c>)
 80022f6:	fb82 1203 	smull	r1, r2, r2, r3
 80022fa:	1092      	asrs	r2, r2, #2
 80022fc:	17db      	asrs	r3, r3, #31
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	ee07 3a90 	vmov	s15, r3
 8002304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002308:	edc7 7a02 	vstr	s15, [r7, #8]
	distanceY = (coordinate_XY[i][1] - coordinate_XY[j][1]) / RESOLUTION;
 800230c:	4b49      	ldr	r3, [pc, #292]	; (8002434 <ballSpeed+0x184>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	4a49      	ldr	r2, [pc, #292]	; (8002438 <ballSpeed+0x188>)
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	885b      	ldrh	r3, [r3, #2]
 8002318:	4619      	mov	r1, r3
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	4a46      	ldr	r2, [pc, #280]	; (8002438 <ballSpeed+0x188>)
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	885b      	ldrh	r3, [r3, #2]
 8002324:	1acb      	subs	r3, r1, r3
 8002326:	4a45      	ldr	r2, [pc, #276]	; (800243c <ballSpeed+0x18c>)
 8002328:	fb82 1203 	smull	r1, r2, r2, r3
 800232c:	1092      	asrs	r2, r2, #2
 800232e:	17db      	asrs	r3, r3, #31
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800233a:	edc7 7a01 	vstr	s15, [r7, #4]
	distanceIns = sqrtf(distanceX * distanceX + distanceY * distanceY);
 800233e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002342:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002346:	edd7 7a01 	vldr	s15, [r7, #4]
 800234a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800234e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002352:	eeb0 0a67 	vmov.f32	s0, s15
 8002356:	f00a f983 	bl	800c660 <sqrtf>
 800235a:	ed87 0a00 	vstr	s0, [r7]

	//顺便计算出当前位置与目标位置的间距
	distance = sqrt(
			(coordinate_XY[i][0] - SetPosi[0])
 800235e:	4b35      	ldr	r3, [pc, #212]	; (8002434 <ballSpeed+0x184>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	4b34      	ldr	r3, [pc, #208]	; (8002438 <ballSpeed+0x188>)
 8002366:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 800236a:	461a      	mov	r2, r3
 800236c:	4b34      	ldr	r3, [pc, #208]	; (8002440 <ballSpeed+0x190>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	1ad3      	subs	r3, r2, r3
					* (coordinate_XY[i][0] - SetPosi[0])
 8002372:	4a30      	ldr	r2, [pc, #192]	; (8002434 <ballSpeed+0x184>)
 8002374:	7812      	ldrb	r2, [r2, #0]
 8002376:	4611      	mov	r1, r2
 8002378:	4a2f      	ldr	r2, [pc, #188]	; (8002438 <ballSpeed+0x188>)
 800237a:	f832 2021 	ldrh.w	r2, [r2, r1, lsl #2]
 800237e:	4611      	mov	r1, r2
 8002380:	4a2f      	ldr	r2, [pc, #188]	; (8002440 <ballSpeed+0x190>)
 8002382:	8812      	ldrh	r2, [r2, #0]
 8002384:	1a8a      	subs	r2, r1, r2
 8002386:	fb02 f203 	mul.w	r2, r2, r3
					+ (coordinate_XY[i][1] - SetPosi[1])
 800238a:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <ballSpeed+0x184>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	492a      	ldr	r1, [pc, #168]	; (8002438 <ballSpeed+0x188>)
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	885b      	ldrh	r3, [r3, #2]
 8002396:	4619      	mov	r1, r3
 8002398:	4b29      	ldr	r3, [pc, #164]	; (8002440 <ballSpeed+0x190>)
 800239a:	885b      	ldrh	r3, [r3, #2]
 800239c:	1ac9      	subs	r1, r1, r3
							* (coordinate_XY[i][1] - SetPosi[1]));
 800239e:	4b25      	ldr	r3, [pc, #148]	; (8002434 <ballSpeed+0x184>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	4825      	ldr	r0, [pc, #148]	; (8002438 <ballSpeed+0x188>)
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4403      	add	r3, r0
 80023a8:	885b      	ldrh	r3, [r3, #2]
 80023aa:	4618      	mov	r0, r3
 80023ac:	4b24      	ldr	r3, [pc, #144]	; (8002440 <ballSpeed+0x190>)
 80023ae:	885b      	ldrh	r3, [r3, #2]
 80023b0:	1ac3      	subs	r3, r0, r3
 80023b2:	fb03 f301 	mul.w	r3, r3, r1
					+ (coordinate_XY[i][1] - SetPosi[1])
 80023b6:	4413      	add	r3, r2
	distance = sqrt(
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe f8b3 	bl	8000524 <__aeabi_i2d>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	ec43 2b10 	vmov	d0, r2, r3
 80023c6:	f00a f917 	bl	800c5f8 <sqrt>
 80023ca:	ec53 2b10 	vmov	r2, r3, d0
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	f7fe fc09 	bl	8000be8 <__aeabi_d2f>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4a1a      	ldr	r2, [pc, #104]	; (8002444 <ballSpeed+0x194>)
 80023da:	6013      	str	r3, [r2, #0]
	/*
	 * 计算各方向上的速度
	 * dt = 1 / FRAME * 10 (FRAME为帧率)
	 * speed = distance / dt = distance * FRAME / 10
	 */
	speedX = distanceX / tim;
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <ballSpeed+0x198>)
 80023de:	ed93 7a00 	vldr	s14, [r3]
 80023e2:	edd7 6a02 	vldr	s13, [r7, #8]
 80023e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ea:	4b18      	ldr	r3, [pc, #96]	; (800244c <ballSpeed+0x19c>)
 80023ec:	edc3 7a00 	vstr	s15, [r3]
	speedY = distanceY / tim;
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <ballSpeed+0x198>)
 80023f2:	ed93 7a00 	vldr	s14, [r3]
 80023f6:	edd7 6a01 	vldr	s13, [r7, #4]
 80023fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023fe:	4b14      	ldr	r3, [pc, #80]	; (8002450 <ballSpeed+0x1a0>)
 8002400:	edc3 7a00 	vstr	s15, [r3]
	speed = distanceIns / tim;
 8002404:	4b10      	ldr	r3, [pc, #64]	; (8002448 <ballSpeed+0x198>)
 8002406:	ed93 7a00 	vldr	s14, [r3]
 800240a:	edd7 6a00 	vldr	s13, [r7]
 800240e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <ballSpeed+0x1a4>)
 8002414:	edc3 7a00 	vstr	s15, [r3]
	printf("%.2f\r\n", speed);
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <ballSpeed+0x1a4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f893 	bl	8000548 <__aeabi_f2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	480c      	ldr	r0, [pc, #48]	; (8002458 <ballSpeed+0x1a8>)
 8002428:	f007 fd0c 	bl	8009e44 <iprintf>
}
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	200007c6 	.word	0x200007c6
 8002438:	20000740 	.word	0x20000740
 800243c:	66666667 	.word	0x66666667
 8002440:	20000814 	.word	0x20000814
 8002444:	2000081c 	.word	0x2000081c
 8002448:	200007dc 	.word	0x200007dc
 800244c:	20000818 	.word	0x20000818
 8002450:	200008c0 	.word	0x200008c0
 8002454:	20000820 	.word	0x20000820
 8002458:	0800d6f0 	.word	0x0800d6f0

0800245c <GetSetPosi>:

//确定9个位置坐标
//长宽均为400
void GetSetPosi(uint16_t *SetPosi, uint8_t number) {
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	70fb      	strb	r3, [r7, #3]
	switch (number) {
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	2be2      	cmp	r3, #226	; 0xe2
 800246c:	d02e      	beq.n	80024cc <GetSetPosi+0x70>
 800246e:	2be2      	cmp	r3, #226	; 0xe2
 8002470:	dc6a      	bgt.n	8002548 <GetSetPosi+0xec>
 8002472:	2be0      	cmp	r3, #224	; 0xe0
 8002474:	d04c      	beq.n	8002510 <GetSetPosi+0xb4>
 8002476:	2be0      	cmp	r3, #224	; 0xe0
 8002478:	dc66      	bgt.n	8002548 <GetSetPosi+0xec>
 800247a:	2bc2      	cmp	r3, #194	; 0xc2
 800247c:	d03f      	beq.n	80024fe <GetSetPosi+0xa2>
 800247e:	2bc2      	cmp	r3, #194	; 0xc2
 8002480:	dc62      	bgt.n	8002548 <GetSetPosi+0xec>
 8002482:	2ba8      	cmp	r3, #168	; 0xa8
 8002484:	d04d      	beq.n	8002522 <GetSetPosi+0xc6>
 8002486:	2ba8      	cmp	r3, #168	; 0xa8
 8002488:	dc5e      	bgt.n	8002548 <GetSetPosi+0xec>
 800248a:	2ba2      	cmp	r3, #162	; 0xa2
 800248c:	d00e      	beq.n	80024ac <GetSetPosi+0x50>
 800248e:	2ba2      	cmp	r3, #162	; 0xa2
 8002490:	dc5a      	bgt.n	8002548 <GetSetPosi+0xec>
 8002492:	2b90      	cmp	r3, #144	; 0x90
 8002494:	d04e      	beq.n	8002534 <GetSetPosi+0xd8>
 8002496:	2b90      	cmp	r3, #144	; 0x90
 8002498:	dc56      	bgt.n	8002548 <GetSetPosi+0xec>
 800249a:	2b62      	cmp	r3, #98	; 0x62
 800249c:	d00e      	beq.n	80024bc <GetSetPosi+0x60>
 800249e:	2b62      	cmp	r3, #98	; 0x62
 80024a0:	dc52      	bgt.n	8002548 <GetSetPosi+0xec>
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d023      	beq.n	80024ee <GetSetPosi+0x92>
 80024a6:	2b22      	cmp	r3, #34	; 0x22
 80024a8:	d019      	beq.n	80024de <GetSetPosi+0x82>
	case NINE:
		SetPosi[0] = 320;
		SetPosi[1] = 320;
		break;
	}
}
 80024aa:	e04d      	b.n	8002548 <GetSetPosi+0xec>
		SetPosi[0] = 80;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2250      	movs	r2, #80	; 0x50
 80024b0:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 80;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3302      	adds	r3, #2
 80024b6:	2250      	movs	r2, #80	; 0x50
 80024b8:	801a      	strh	r2, [r3, #0]
		break;
 80024ba:	e045      	b.n	8002548 <GetSetPosi+0xec>
		SetPosi[0] = 200;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	22c8      	movs	r2, #200	; 0xc8
 80024c0:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 80;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3302      	adds	r3, #2
 80024c6:	2250      	movs	r2, #80	; 0x50
 80024c8:	801a      	strh	r2, [r3, #0]
		break;
 80024ca:	e03d      	b.n	8002548 <GetSetPosi+0xec>
		SetPosi[0] = 320;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024d2:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 80;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3302      	adds	r3, #2
 80024d8:	2250      	movs	r2, #80	; 0x50
 80024da:	801a      	strh	r2, [r3, #0]
		break;
 80024dc:	e034      	b.n	8002548 <GetSetPosi+0xec>
		SetPosi[0] = 80;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2250      	movs	r2, #80	; 0x50
 80024e2:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 200;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3302      	adds	r3, #2
 80024e8:	22c8      	movs	r2, #200	; 0xc8
 80024ea:	801a      	strh	r2, [r3, #0]
		break;
 80024ec:	e02c      	b.n	8002548 <GetSetPosi+0xec>
		SetPosi[0] = 200;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	22c8      	movs	r2, #200	; 0xc8
 80024f2:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 200;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3302      	adds	r3, #2
 80024f8:	22c8      	movs	r2, #200	; 0xc8
 80024fa:	801a      	strh	r2, [r3, #0]
		break;
 80024fc:	e024      	b.n	8002548 <GetSetPosi+0xec>
		SetPosi[0] = 320;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002504:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 200;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3302      	adds	r3, #2
 800250a:	22c8      	movs	r2, #200	; 0xc8
 800250c:	801a      	strh	r2, [r3, #0]
		break;
 800250e:	e01b      	b.n	8002548 <GetSetPosi+0xec>
		SetPosi[0] = 80;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2250      	movs	r2, #80	; 0x50
 8002514:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 320;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3302      	adds	r3, #2
 800251a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800251e:	801a      	strh	r2, [r3, #0]
		break;
 8002520:	e012      	b.n	8002548 <GetSetPosi+0xec>
		SetPosi[0] = 200;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	22c8      	movs	r2, #200	; 0xc8
 8002526:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 320;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3302      	adds	r3, #2
 800252c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002530:	801a      	strh	r2, [r3, #0]
		break;
 8002532:	e009      	b.n	8002548 <GetSetPosi+0xec>
		SetPosi[0] = 320;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800253a:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 320;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3302      	adds	r3, #2
 8002540:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002544:	801a      	strh	r2, [r3, #0]
		break;
 8002546:	bf00      	nop
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	0000      	movs	r0, r0
	...

08002558 <ShowString>:

//LCD显示函数，isInit=1表示在初始化中调用
void ShowString() {
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af02      	add	r7, sp, #8
	char Buffer[32]; //输出文本暂存区

	ssd1306_DrawRectangle(85, 21, 125, 31, White);
 800255e:	2301      	movs	r3, #1
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	231f      	movs	r3, #31
 8002564:	227d      	movs	r2, #125	; 0x7d
 8002566:	2115      	movs	r1, #21
 8002568:	2055      	movs	r0, #85	; 0x55
 800256a:	f7fe ffb5 	bl	80014d8 <ssd1306_DrawRectangle>
	ssd1306_DrawRectangle(85, 32, 125, 52, White);
 800256e:	2301      	movs	r3, #1
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	2334      	movs	r3, #52	; 0x34
 8002574:	227d      	movs	r2, #125	; 0x7d
 8002576:	2120      	movs	r1, #32
 8002578:	2055      	movs	r0, #85	; 0x55
 800257a:	f7fe ffad 	bl	80014d8 <ssd1306_DrawRectangle>
	//OLED输出设定球坐标(包括位置期望和当前位置)
	sprintf(Buffer, "Set_XY:(%3d,%3d)", SetPosi[0], SetPosi[1]);
 800257e:	4b78      	ldr	r3, [pc, #480]	; (8002760 <ShowString+0x208>)
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	4b76      	ldr	r3, [pc, #472]	; (8002760 <ShowString+0x208>)
 8002586:	885b      	ldrh	r3, [r3, #2]
 8002588:	4638      	mov	r0, r7
 800258a:	4976      	ldr	r1, [pc, #472]	; (8002764 <ShowString+0x20c>)
 800258c:	f007 fce8 	bl	8009f60 <siprintf>
	ssd1306_SetCursor(5, 5);
 8002590:	2105      	movs	r1, #5
 8002592:	2005      	movs	r0, #5
 8002594:	f7fe ff1c 	bl	80013d0 <ssd1306_SetCursor>
	ssd1306_WriteString(Buffer, Font_6x8, White);
 8002598:	4a73      	ldr	r2, [pc, #460]	; (8002768 <ShowString+0x210>)
 800259a:	4638      	mov	r0, r7
 800259c:	2301      	movs	r3, #1
 800259e:	ca06      	ldmia	r2, {r1, r2}
 80025a0:	f7fe fef0 	bl	8001384 <ssd1306_WriteString>
	//OLED输出当前球坐标
	sprintf(Buffer, "Act_XY:(%3d,%3d)", coordinate_XY[i][0],
 80025a4:	4b71      	ldr	r3, [pc, #452]	; (800276c <ShowString+0x214>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	4b71      	ldr	r3, [pc, #452]	; (8002770 <ShowString+0x218>)
 80025ac:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80025b0:	4619      	mov	r1, r3
			coordinate_XY[i][1]);
 80025b2:	4b6e      	ldr	r3, [pc, #440]	; (800276c <ShowString+0x214>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	4a6e      	ldr	r2, [pc, #440]	; (8002770 <ShowString+0x218>)
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	885b      	ldrh	r3, [r3, #2]
	sprintf(Buffer, "Act_XY:(%3d,%3d)", coordinate_XY[i][0],
 80025be:	4638      	mov	r0, r7
 80025c0:	460a      	mov	r2, r1
 80025c2:	496c      	ldr	r1, [pc, #432]	; (8002774 <ShowString+0x21c>)
 80025c4:	f007 fccc 	bl	8009f60 <siprintf>
	ssd1306_SetCursor(5, 13);
 80025c8:	210d      	movs	r1, #13
 80025ca:	2005      	movs	r0, #5
 80025cc:	f7fe ff00 	bl	80013d0 <ssd1306_SetCursor>
	ssd1306_WriteString(Buffer, Font_6x8, White);
 80025d0:	4a65      	ldr	r2, [pc, #404]	; (8002768 <ShowString+0x210>)
 80025d2:	4638      	mov	r0, r7
 80025d4:	2301      	movs	r3, #1
 80025d6:	ca06      	ldmia	r2, {r1, r2}
 80025d8:	f7fe fed4 	bl	8001384 <ssd1306_WriteString>

	sprintf(Buffer, "Dis:%6.2f", distance);
 80025dc:	4b66      	ldr	r3, [pc, #408]	; (8002778 <ShowString+0x220>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd ffb1 	bl	8000548 <__aeabi_f2d>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4638      	mov	r0, r7
 80025ec:	4963      	ldr	r1, [pc, #396]	; (800277c <ShowString+0x224>)
 80025ee:	f007 fcb7 	bl	8009f60 <siprintf>
	ssd1306_SetCursor(5, 21);
 80025f2:	2115      	movs	r1, #21
 80025f4:	2005      	movs	r0, #5
 80025f6:	f7fe feeb 	bl	80013d0 <ssd1306_SetCursor>
	ssd1306_WriteString(Buffer, Font_6x8, White);
 80025fa:	4a5b      	ldr	r2, [pc, #364]	; (8002768 <ShowString+0x210>)
 80025fc:	4638      	mov	r0, r7
 80025fe:	2301      	movs	r3, #1
 8002600:	ca06      	ldmia	r2, {r1, r2}
 8002602:	f7fe febf 	bl	8001384 <ssd1306_WriteString>

	//OLED输出设定球速度(包括速度期望和当前速度)
	sprintf(Buffer, "Exp_Sp:%5.2f",
			sqrtf(pid_X.Speed * pid_X.Speed + pid_Y.Speed * pid_Y.Speed));
 8002606:	4b5e      	ldr	r3, [pc, #376]	; (8002780 <ShowString+0x228>)
 8002608:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800260c:	4b5c      	ldr	r3, [pc, #368]	; (8002780 <ShowString+0x228>)
 800260e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002612:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002616:	4b5b      	ldr	r3, [pc, #364]	; (8002784 <ShowString+0x22c>)
 8002618:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800261c:	4b59      	ldr	r3, [pc, #356]	; (8002784 <ShowString+0x22c>)
 800261e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002622:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800262a:	eeb0 0a67 	vmov.f32	s0, s15
 800262e:	f00a f817 	bl	800c660 <sqrtf>
 8002632:	ee10 3a10 	vmov	r3, s0
	sprintf(Buffer, "Exp_Sp:%5.2f",
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd ff86 	bl	8000548 <__aeabi_f2d>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4638      	mov	r0, r7
 8002642:	4951      	ldr	r1, [pc, #324]	; (8002788 <ShowString+0x230>)
 8002644:	f007 fc8c 	bl	8009f60 <siprintf>
	ssd1306_SetCursor(5, 29);
 8002648:	211d      	movs	r1, #29
 800264a:	2005      	movs	r0, #5
 800264c:	f7fe fec0 	bl	80013d0 <ssd1306_SetCursor>
	ssd1306_WriteString(Buffer, Font_6x8, White);
 8002650:	4a45      	ldr	r2, [pc, #276]	; (8002768 <ShowString+0x210>)
 8002652:	4638      	mov	r0, r7
 8002654:	2301      	movs	r3, #1
 8002656:	ca06      	ldmia	r2, {r1, r2}
 8002658:	f7fe fe94 	bl	8001384 <ssd1306_WriteString>
	//OLED输出当前球速度
	sprintf(Buffer, "Act_Sp:%5.2f", speed);
 800265c:	4b4b      	ldr	r3, [pc, #300]	; (800278c <ShowString+0x234>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff71 	bl	8000548 <__aeabi_f2d>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4638      	mov	r0, r7
 800266c:	4948      	ldr	r1, [pc, #288]	; (8002790 <ShowString+0x238>)
 800266e:	f007 fc77 	bl	8009f60 <siprintf>
	ssd1306_SetCursor(5, 37);
 8002672:	2125      	movs	r1, #37	; 0x25
 8002674:	2005      	movs	r0, #5
 8002676:	f7fe feab 	bl	80013d0 <ssd1306_SetCursor>
	ssd1306_WriteString(Buffer, Font_6x8, White);
 800267a:	4a3b      	ldr	r2, [pc, #236]	; (8002768 <ShowString+0x210>)
 800267c:	4638      	mov	r0, r7
 800267e:	2301      	movs	r3, #1
 8002680:	ca06      	ldmia	r2, {r1, r2}
 8002682:	f7fe fe7f 	bl	8001384 <ssd1306_WriteString>

	printf("Exp_Sp:%5.2f\r\n", sqrtf(pid_X.Speed * pid_X.Speed + pid_Y.Speed * pid_Y.Speed));
 8002686:	4b3e      	ldr	r3, [pc, #248]	; (8002780 <ShowString+0x228>)
 8002688:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800268c:	4b3c      	ldr	r3, [pc, #240]	; (8002780 <ShowString+0x228>)
 800268e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002696:	4b3b      	ldr	r3, [pc, #236]	; (8002784 <ShowString+0x22c>)
 8002698:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800269c:	4b39      	ldr	r3, [pc, #228]	; (8002784 <ShowString+0x22c>)
 800269e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80026a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026aa:	eeb0 0a67 	vmov.f32	s0, s15
 80026ae:	f009 ffd7 	bl	800c660 <sqrtf>
 80026b2:	ee10 3a10 	vmov	r3, s0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fd ff46 	bl	8000548 <__aeabi_f2d>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4834      	ldr	r0, [pc, #208]	; (8002794 <ShowString+0x23c>)
 80026c2:	f007 fbbf 	bl	8009e44 <iprintf>
	printf("Act_Sp:%5.2f\r\n", speed);
 80026c6:	4b31      	ldr	r3, [pc, #196]	; (800278c <ShowString+0x234>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd ff3c 	bl	8000548 <__aeabi_f2d>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4830      	ldr	r0, [pc, #192]	; (8002798 <ShowString+0x240>)
 80026d6:	f007 fbb5 	bl	8009e44 <iprintf>

	//OLED输出耗费时间
	sprintf(Buffer, "Tot_Ti:%5.2f",
	__HAL_TIM_GET_COUNTER(&htim5) * 1.0 / 10000);
 80026da:	4b30      	ldr	r3, [pc, #192]	; (800279c <ShowString+0x244>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd ff0f 	bl	8000504 <__aeabi_ui2d>
	sprintf(Buffer, "Tot_Ti:%5.2f",
 80026e6:	a31c      	add	r3, pc, #112	; (adr r3, 8002758 <ShowString+0x200>)
 80026e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ec:	f7fe f8ae 	bl	800084c <__aeabi_ddiv>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4638      	mov	r0, r7
 80026f6:	492a      	ldr	r1, [pc, #168]	; (80027a0 <ShowString+0x248>)
 80026f8:	f007 fc32 	bl	8009f60 <siprintf>
	ssd1306_SetCursor(5, 45);
 80026fc:	212d      	movs	r1, #45	; 0x2d
 80026fe:	2005      	movs	r0, #5
 8002700:	f7fe fe66 	bl	80013d0 <ssd1306_SetCursor>
	ssd1306_WriteString(Buffer, Font_6x8, White);
 8002704:	4a18      	ldr	r2, [pc, #96]	; (8002768 <ShowString+0x210>)
 8002706:	4638      	mov	r0, r7
 8002708:	2301      	movs	r3, #1
 800270a:	ca06      	ldmia	r2, {r1, r2}
 800270c:	f7fe fe3a 	bl	8001384 <ssd1306_WriteString>
	sprintf(Buffer, "Sta_Ti:%5.2f",
	__HAL_TIM_GET_COUNTER(&htim2) * 1.0 / 10000);
 8002710:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <ShowString+0x24c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd fef4 	bl	8000504 <__aeabi_ui2d>
	sprintf(Buffer, "Sta_Ti:%5.2f",
 800271c:	a30e      	add	r3, pc, #56	; (adr r3, 8002758 <ShowString+0x200>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	f7fe f893 	bl	800084c <__aeabi_ddiv>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4638      	mov	r0, r7
 800272c:	491e      	ldr	r1, [pc, #120]	; (80027a8 <ShowString+0x250>)
 800272e:	f007 fc17 	bl	8009f60 <siprintf>
	ssd1306_SetCursor(5, 53);
 8002732:	2135      	movs	r1, #53	; 0x35
 8002734:	2005      	movs	r0, #5
 8002736:	f7fe fe4b 	bl	80013d0 <ssd1306_SetCursor>
	ssd1306_WriteString(Buffer, Font_6x8, White);
 800273a:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <ShowString+0x210>)
 800273c:	4638      	mov	r0, r7
 800273e:	2301      	movs	r3, #1
 8002740:	ca06      	ldmia	r2, {r1, r2}
 8002742:	f7fe fe1f 	bl	8001384 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8002746:	f7fe fd0d 	bl	8001164 <ssd1306_UpdateScreen>
}
 800274a:	bf00      	nop
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	f3af 8000 	nop.w
 8002758:	00000000 	.word	0x00000000
 800275c:	40c38800 	.word	0x40c38800
 8002760:	20000814 	.word	0x20000814
 8002764:	0800d6f8 	.word	0x0800d6f8
 8002768:	20000000 	.word	0x20000000
 800276c:	200007c6 	.word	0x200007c6
 8002770:	20000740 	.word	0x20000740
 8002774:	0800d70c 	.word	0x0800d70c
 8002778:	2000081c 	.word	0x2000081c
 800277c:	0800d720 	.word	0x0800d720
 8002780:	20000824 	.word	0x20000824
 8002784:	200007e0 	.word	0x200007e0
 8002788:	0800d72c 	.word	0x0800d72c
 800278c:	20000820 	.word	0x20000820
 8002790:	0800d73c 	.word	0x0800d73c
 8002794:	0800d74c 	.word	0x0800d74c
 8002798:	0800d75c 	.word	0x0800d75c
 800279c:	20000970 	.word	0x20000970
 80027a0:	0800d76c 	.word	0x0800d76c
 80027a4:	20000a48 	.word	0x20000a48
 80027a8:	0800d77c 	.word	0x0800d77c

080027ac <ShowMode>:

//LCD输出模式选择相关内容
void ShowMode(uint8_t key, uint8_t i) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	460a      	mov	r2, r1
 80027b6:	71fb      	strb	r3, [r7, #7]
 80027b8:	4613      	mov	r3, r2
 80027ba:	71bb      	strb	r3, [r7, #6]

	//没按下一个键，在LCD上显示按键信息
	//i == 0xff则表示输出每个按键信息
	if (i == 0xff) {
 80027bc:	79bb      	ldrb	r3, [r7, #6]
 80027be:	2bff      	cmp	r3, #255	; 0xff
 80027c0:	f040 8141 	bne.w	8002a46 <ShowMode+0x29a>

		ssd1306_SetCursor(88, 23);
 80027c4:	2117      	movs	r1, #23
 80027c6:	2058      	movs	r0, #88	; 0x58
 80027c8:	f7fe fe02 	bl	80013d0 <ssd1306_SetCursor>
		switch (key) {
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	2be2      	cmp	r3, #226	; 0xe2
 80027d0:	f000 80e5 	beq.w	800299e <ShowMode+0x1f2>
 80027d4:	2be2      	cmp	r3, #226	; 0xe2
 80027d6:	f300 8223 	bgt.w	8002c20 <ShowMode+0x474>
 80027da:	2be0      	cmp	r3, #224	; 0xe0
 80027dc:	f000 80fb 	beq.w	80029d6 <ShowMode+0x22a>
 80027e0:	2be0      	cmp	r3, #224	; 0xe0
 80027e2:	f300 821d 	bgt.w	8002c20 <ShowMode+0x474>
 80027e6:	2bc2      	cmp	r3, #194	; 0xc2
 80027e8:	f000 80ee 	beq.w	80029c8 <ShowMode+0x21c>
 80027ec:	2bc2      	cmp	r3, #194	; 0xc2
 80027ee:	f300 8217 	bgt.w	8002c20 <ShowMode+0x474>
 80027f2:	2bb0      	cmp	r3, #176	; 0xb0
 80027f4:	f300 8214 	bgt.w	8002c20 <ShowMode+0x474>
 80027f8:	2b90      	cmp	r3, #144	; 0x90
 80027fa:	da1d      	bge.n	8002838 <ShowMode+0x8c>
 80027fc:	2b68      	cmp	r3, #104	; 0x68
 80027fe:	f300 820f 	bgt.w	8002c20 <ShowMode+0x474>
 8002802:	2b4a      	cmp	r3, #74	; 0x4a
 8002804:	da62      	bge.n	80028cc <ShowMode+0x120>
 8002806:	2b38      	cmp	r3, #56	; 0x38
 8002808:	f000 8101 	beq.w	8002a0e <ShowMode+0x262>
 800280c:	2b38      	cmp	r3, #56	; 0x38
 800280e:	f300 8207 	bgt.w	8002c20 <ShowMode+0x474>
 8002812:	2b22      	cmp	r3, #34	; 0x22
 8002814:	f000 80ca 	beq.w	80029ac <ShowMode+0x200>
 8002818:	2b22      	cmp	r3, #34	; 0x22
 800281a:	f300 8201 	bgt.w	8002c20 <ShowMode+0x474>
 800281e:	2b18      	cmp	r3, #24
 8002820:	f000 810a 	beq.w	8002a38 <ShowMode+0x28c>
 8002824:	2b18      	cmp	r3, #24
 8002826:	f300 81fb 	bgt.w	8002c20 <ShowMode+0x474>
 800282a:	2b02      	cmp	r3, #2
 800282c:	f000 80c5 	beq.w	80029ba <ShowMode+0x20e>
 8002830:	2b10      	cmp	r3, #16
 8002832:	f000 8091 	beq.w	8002958 <ShowMode+0x1ac>
 8002836:	e1f3      	b.n	8002c20 <ShowMode+0x474>
 8002838:	3b90      	subs	r3, #144	; 0x90
 800283a:	2b20      	cmp	r3, #32
 800283c:	f200 81f0 	bhi.w	8002c20 <ShowMode+0x474>
 8002840:	a201      	add	r2, pc, #4	; (adr r2, 8002848 <ShowMode+0x9c>)
 8002842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002846:	bf00      	nop
 8002848:	080029f3 	.word	0x080029f3
 800284c:	08002c21 	.word	0x08002c21
 8002850:	08002c21 	.word	0x08002c21
 8002854:	08002c21 	.word	0x08002c21
 8002858:	08002c21 	.word	0x08002c21
 800285c:	08002c21 	.word	0x08002c21
 8002860:	08002c21 	.word	0x08002c21
 8002864:	08002c21 	.word	0x08002c21
 8002868:	08002a01 	.word	0x08002a01
 800286c:	08002c21 	.word	0x08002c21
 8002870:	08002c21 	.word	0x08002c21
 8002874:	08002c21 	.word	0x08002c21
 8002878:	08002c21 	.word	0x08002c21
 800287c:	08002c21 	.word	0x08002c21
 8002880:	08002c21 	.word	0x08002c21
 8002884:	08002c21 	.word	0x08002c21
 8002888:	08002c21 	.word	0x08002c21
 800288c:	08002c21 	.word	0x08002c21
 8002890:	08002983 	.word	0x08002983
 8002894:	08002c21 	.word	0x08002c21
 8002898:	08002c21 	.word	0x08002c21
 800289c:	08002c21 	.word	0x08002c21
 80028a0:	08002c21 	.word	0x08002c21
 80028a4:	08002c21 	.word	0x08002c21
 80028a8:	080029e5 	.word	0x080029e5
 80028ac:	08002c21 	.word	0x08002c21
 80028b0:	08002c21 	.word	0x08002c21
 80028b4:	08002c21 	.word	0x08002c21
 80028b8:	08002c21 	.word	0x08002c21
 80028bc:	08002c21 	.word	0x08002c21
 80028c0:	08002c21 	.word	0x08002c21
 80028c4:	08002c21 	.word	0x08002c21
 80028c8:	08002a2b 	.word	0x08002a2b
 80028cc:	3b4a      	subs	r3, #74	; 0x4a
 80028ce:	2b1e      	cmp	r3, #30
 80028d0:	f200 81a6 	bhi.w	8002c20 <ShowMode+0x474>
 80028d4:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <ShowMode+0x130>)
 80028d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028da:	bf00      	nop
 80028dc:	08002967 	.word	0x08002967
 80028e0:	08002c21 	.word	0x08002c21
 80028e4:	08002c21 	.word	0x08002c21
 80028e8:	08002c21 	.word	0x08002c21
 80028ec:	08002c21 	.word	0x08002c21
 80028f0:	08002c21 	.word	0x08002c21
 80028f4:	08002c21 	.word	0x08002c21
 80028f8:	08002c21 	.word	0x08002c21
 80028fc:	08002c21 	.word	0x08002c21
 8002900:	08002c21 	.word	0x08002c21
 8002904:	08002c21 	.word	0x08002c21
 8002908:	08002c21 	.word	0x08002c21
 800290c:	08002c21 	.word	0x08002c21
 8002910:	08002c21 	.word	0x08002c21
 8002914:	08002c21 	.word	0x08002c21
 8002918:	08002c21 	.word	0x08002c21
 800291c:	08002975 	.word	0x08002975
 8002920:	08002c21 	.word	0x08002c21
 8002924:	08002c21 	.word	0x08002c21
 8002928:	08002c21 	.word	0x08002c21
 800292c:	08002c21 	.word	0x08002c21
 8002930:	08002c21 	.word	0x08002c21
 8002934:	08002c21 	.word	0x08002c21
 8002938:	08002c21 	.word	0x08002c21
 800293c:	08002991 	.word	0x08002991
 8002940:	08002c21 	.word	0x08002c21
 8002944:	08002c21 	.word	0x08002c21
 8002948:	08002c21 	.word	0x08002c21
 800294c:	08002c21 	.word	0x08002c21
 8002950:	08002c21 	.word	0x08002c21
 8002954:	08002a1d 	.word	0x08002a1d
		case STABLE:
			ssd1306_WriteString("STABLE", Font_6x8, White);
 8002958:	4ab4      	ldr	r2, [pc, #720]	; (8002c2c <ShowMode+0x480>)
 800295a:	2301      	movs	r3, #1
 800295c:	ca06      	ldmia	r2, {r1, r2}
 800295e:	48b4      	ldr	r0, [pc, #720]	; (8002c30 <ShowMode+0x484>)
 8002960:	f7fe fd10 	bl	8001384 <ssd1306_WriteString>
			break;
 8002964:	e15c      	b.n	8002c20 <ShowMode+0x474>
		case MOVE:
			ssd1306_WriteString("MOVE  ", Font_6x8, White);
 8002966:	4ab1      	ldr	r2, [pc, #708]	; (8002c2c <ShowMode+0x480>)
 8002968:	2301      	movs	r3, #1
 800296a:	ca06      	ldmia	r2, {r1, r2}
 800296c:	48b1      	ldr	r0, [pc, #708]	; (8002c34 <ShowMode+0x488>)
 800296e:	f7fe fd09 	bl	8001384 <ssd1306_WriteString>
			break;
 8002972:	e155      	b.n	8002c20 <ShowMode+0x474>
		case ROUND:
			ssd1306_WriteString("ROUND ", Font_6x8, White);
 8002974:	4aad      	ldr	r2, [pc, #692]	; (8002c2c <ShowMode+0x480>)
 8002976:	2301      	movs	r3, #1
 8002978:	ca06      	ldmia	r2, {r1, r2}
 800297a:	48af      	ldr	r0, [pc, #700]	; (8002c38 <ShowMode+0x48c>)
 800297c:	f7fe fd02 	bl	8001384 <ssd1306_WriteString>
			break;
 8002980:	e14e      	b.n	8002c20 <ShowMode+0x474>
		case ONE:
			ssd1306_WriteString("ONE   ", Font_6x8, White);
 8002982:	4aaa      	ldr	r2, [pc, #680]	; (8002c2c <ShowMode+0x480>)
 8002984:	2301      	movs	r3, #1
 8002986:	ca06      	ldmia	r2, {r1, r2}
 8002988:	48ac      	ldr	r0, [pc, #688]	; (8002c3c <ShowMode+0x490>)
 800298a:	f7fe fcfb 	bl	8001384 <ssd1306_WriteString>
			break;
 800298e:	e147      	b.n	8002c20 <ShowMode+0x474>
		case TWO:
			ssd1306_WriteString("TWO   ", Font_6x8, White);
 8002990:	4aa6      	ldr	r2, [pc, #664]	; (8002c2c <ShowMode+0x480>)
 8002992:	2301      	movs	r3, #1
 8002994:	ca06      	ldmia	r2, {r1, r2}
 8002996:	48aa      	ldr	r0, [pc, #680]	; (8002c40 <ShowMode+0x494>)
 8002998:	f7fe fcf4 	bl	8001384 <ssd1306_WriteString>
			break;
 800299c:	e140      	b.n	8002c20 <ShowMode+0x474>
		case THREE:
			ssd1306_WriteString("THREE ", Font_6x8, White);
 800299e:	4aa3      	ldr	r2, [pc, #652]	; (8002c2c <ShowMode+0x480>)
 80029a0:	2301      	movs	r3, #1
 80029a2:	ca06      	ldmia	r2, {r1, r2}
 80029a4:	48a7      	ldr	r0, [pc, #668]	; (8002c44 <ShowMode+0x498>)
 80029a6:	f7fe fced 	bl	8001384 <ssd1306_WriteString>
			break;
 80029aa:	e139      	b.n	8002c20 <ShowMode+0x474>
		case FOUR:
			ssd1306_WriteString("FOUR  ", Font_6x8, White);
 80029ac:	4a9f      	ldr	r2, [pc, #636]	; (8002c2c <ShowMode+0x480>)
 80029ae:	2301      	movs	r3, #1
 80029b0:	ca06      	ldmia	r2, {r1, r2}
 80029b2:	48a5      	ldr	r0, [pc, #660]	; (8002c48 <ShowMode+0x49c>)
 80029b4:	f7fe fce6 	bl	8001384 <ssd1306_WriteString>
			break;
 80029b8:	e132      	b.n	8002c20 <ShowMode+0x474>
		case FIVE:
			ssd1306_WriteString("FIVE  ", Font_6x8, White);
 80029ba:	4a9c      	ldr	r2, [pc, #624]	; (8002c2c <ShowMode+0x480>)
 80029bc:	2301      	movs	r3, #1
 80029be:	ca06      	ldmia	r2, {r1, r2}
 80029c0:	48a2      	ldr	r0, [pc, #648]	; (8002c4c <ShowMode+0x4a0>)
 80029c2:	f7fe fcdf 	bl	8001384 <ssd1306_WriteString>
			break;
 80029c6:	e12b      	b.n	8002c20 <ShowMode+0x474>
		case SIX:
			ssd1306_WriteString("SIX   ", Font_6x8, White);
 80029c8:	4a98      	ldr	r2, [pc, #608]	; (8002c2c <ShowMode+0x480>)
 80029ca:	2301      	movs	r3, #1
 80029cc:	ca06      	ldmia	r2, {r1, r2}
 80029ce:	48a0      	ldr	r0, [pc, #640]	; (8002c50 <ShowMode+0x4a4>)
 80029d0:	f7fe fcd8 	bl	8001384 <ssd1306_WriteString>
			break;
 80029d4:	e124      	b.n	8002c20 <ShowMode+0x474>
		case SEVEN:
			ssd1306_WriteString("SEVEN ", Font_6x8, White);
 80029d6:	4a95      	ldr	r2, [pc, #596]	; (8002c2c <ShowMode+0x480>)
 80029d8:	2301      	movs	r3, #1
 80029da:	ca06      	ldmia	r2, {r1, r2}
 80029dc:	489d      	ldr	r0, [pc, #628]	; (8002c54 <ShowMode+0x4a8>)
 80029de:	f7fe fcd1 	bl	8001384 <ssd1306_WriteString>
			break;
 80029e2:	e11d      	b.n	8002c20 <ShowMode+0x474>
		case EIGHT:
			ssd1306_WriteString("EIGHT ", Font_6x8, White);
 80029e4:	4a91      	ldr	r2, [pc, #580]	; (8002c2c <ShowMode+0x480>)
 80029e6:	2301      	movs	r3, #1
 80029e8:	ca06      	ldmia	r2, {r1, r2}
 80029ea:	489b      	ldr	r0, [pc, #620]	; (8002c58 <ShowMode+0x4ac>)
 80029ec:	f7fe fcca 	bl	8001384 <ssd1306_WriteString>
			break;
 80029f0:	e116      	b.n	8002c20 <ShowMode+0x474>
		case NINE:
			ssd1306_WriteString("NINE  ", Font_6x8, White);
 80029f2:	4a8e      	ldr	r2, [pc, #568]	; (8002c2c <ShowMode+0x480>)
 80029f4:	2301      	movs	r3, #1
 80029f6:	ca06      	ldmia	r2, {r1, r2}
 80029f8:	4898      	ldr	r0, [pc, #608]	; (8002c5c <ShowMode+0x4b0>)
 80029fa:	f7fe fcc3 	bl	8001384 <ssd1306_WriteString>
			break;
 80029fe:	e10f      	b.n	8002c20 <ShowMode+0x474>
		case ZERO:
			ssd1306_WriteString("ZERO  ", Font_6x8, White);
 8002a00:	4a8a      	ldr	r2, [pc, #552]	; (8002c2c <ShowMode+0x480>)
 8002a02:	2301      	movs	r3, #1
 8002a04:	ca06      	ldmia	r2, {r1, r2}
 8002a06:	4896      	ldr	r0, [pc, #600]	; (8002c60 <ShowMode+0x4b4>)
 8002a08:	f7fe fcbc 	bl	8001384 <ssd1306_WriteString>
			break;
 8002a0c:	e108      	b.n	8002c20 <ShowMode+0x474>
		case DETER:
			ssd1306_WriteString("DETER ", Font_6x8, White);
 8002a0e:	4a87      	ldr	r2, [pc, #540]	; (8002c2c <ShowMode+0x480>)
 8002a10:	2301      	movs	r3, #1
 8002a12:	ca06      	ldmia	r2, {r1, r2}
 8002a14:	4893      	ldr	r0, [pc, #588]	; (8002c64 <ShowMode+0x4b8>)
 8002a16:	f7fe fcb5 	bl	8001384 <ssd1306_WriteString>
			break;
 8002a1a:	e101      	b.n	8002c20 <ShowMode+0x474>
		case REPLACE:
			ssd1306_WriteString("REPLACE ", Font_6x8, White);
 8002a1c:	4a83      	ldr	r2, [pc, #524]	; (8002c2c <ShowMode+0x480>)
 8002a1e:	2301      	movs	r3, #1
 8002a20:	ca06      	ldmia	r2, {r1, r2}
 8002a22:	4891      	ldr	r0, [pc, #580]	; (8002c68 <ShowMode+0x4bc>)
 8002a24:	f7fe fcae 	bl	8001384 <ssd1306_WriteString>
			break;
 8002a28:	e0fa      	b.n	8002c20 <ShowMode+0x474>
		case CANCEL:
			ssd1306_WriteString("CANCEL", Font_6x8, White);
 8002a2a:	4a80      	ldr	r2, [pc, #512]	; (8002c2c <ShowMode+0x480>)
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	ca06      	ldmia	r2, {r1, r2}
 8002a30:	488e      	ldr	r0, [pc, #568]	; (8002c6c <ShowMode+0x4c0>)
 8002a32:	f7fe fca7 	bl	8001384 <ssd1306_WriteString>
			break;
 8002a36:	e0f3      	b.n	8002c20 <ShowMode+0x474>
		case INIT:
			ssd1306_WriteString("INIT  ", Font_6x8, White);
 8002a38:	4a7c      	ldr	r2, [pc, #496]	; (8002c2c <ShowMode+0x480>)
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	ca06      	ldmia	r2, {r1, r2}
 8002a3e:	488c      	ldr	r0, [pc, #560]	; (8002c70 <ShowMode+0x4c4>)
 8002a40:	f7fe fca0 	bl	8001384 <ssd1306_WriteString>
 8002a44:	e0ec      	b.n	8002c20 <ShowMode+0x474>
		}
	} else {
		//若i不为0xff则表示显示Mode模式缓存区中的信息
		switch (key) {
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	2be2      	cmp	r3, #226	; 0xe2
 8002a4a:	d079      	beq.n	8002b40 <ShowMode+0x394>
 8002a4c:	2be2      	cmp	r3, #226	; 0xe2
 8002a4e:	f300 80e7 	bgt.w	8002c20 <ShowMode+0x474>
 8002a52:	2be0      	cmp	r3, #224	; 0xe0
 8002a54:	f000 80b4 	beq.w	8002bc0 <ShowMode+0x414>
 8002a58:	2be0      	cmp	r3, #224	; 0xe0
 8002a5a:	f300 80e1 	bgt.w	8002c20 <ShowMode+0x474>
 8002a5e:	2bc2      	cmp	r3, #194	; 0xc2
 8002a60:	f000 809e 	beq.w	8002ba0 <ShowMode+0x3f4>
 8002a64:	2bc2      	cmp	r3, #194	; 0xc2
 8002a66:	f300 80db 	bgt.w	8002c20 <ShowMode+0x474>
 8002a6a:	2ba8      	cmp	r3, #168	; 0xa8
 8002a6c:	f000 80b8 	beq.w	8002be0 <ShowMode+0x434>
 8002a70:	2ba8      	cmp	r3, #168	; 0xa8
 8002a72:	f300 80d5 	bgt.w	8002c20 <ShowMode+0x474>
 8002a76:	2ba2      	cmp	r3, #162	; 0xa2
 8002a78:	d042      	beq.n	8002b00 <ShowMode+0x354>
 8002a7a:	2ba2      	cmp	r3, #162	; 0xa2
 8002a7c:	f300 80d0 	bgt.w	8002c20 <ShowMode+0x474>
 8002a80:	2b90      	cmp	r3, #144	; 0x90
 8002a82:	f000 80bd 	beq.w	8002c00 <ShowMode+0x454>
 8002a86:	2b90      	cmp	r3, #144	; 0x90
 8002a88:	f300 80ca 	bgt.w	8002c20 <ShowMode+0x474>
 8002a8c:	2b62      	cmp	r3, #98	; 0x62
 8002a8e:	d047      	beq.n	8002b20 <ShowMode+0x374>
 8002a90:	2b62      	cmp	r3, #98	; 0x62
 8002a92:	f300 80c5 	bgt.w	8002c20 <ShowMode+0x474>
 8002a96:	2b5a      	cmp	r3, #90	; 0x5a
 8002a98:	d027      	beq.n	8002aea <ShowMode+0x33e>
 8002a9a:	2b5a      	cmp	r3, #90	; 0x5a
 8002a9c:	f300 80c0 	bgt.w	8002c20 <ShowMode+0x474>
 8002aa0:	2b4a      	cmp	r3, #74	; 0x4a
 8002aa2:	d017      	beq.n	8002ad4 <ShowMode+0x328>
 8002aa4:	2b4a      	cmp	r3, #74	; 0x4a
 8002aa6:	f300 80bb 	bgt.w	8002c20 <ShowMode+0x474>
 8002aaa:	2b22      	cmp	r3, #34	; 0x22
 8002aac:	d058      	beq.n	8002b60 <ShowMode+0x3b4>
 8002aae:	2b22      	cmp	r3, #34	; 0x22
 8002ab0:	f300 80b6 	bgt.w	8002c20 <ShowMode+0x474>
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d063      	beq.n	8002b80 <ShowMode+0x3d4>
 8002ab8:	2b10      	cmp	r3, #16
 8002aba:	f040 80b1 	bne.w	8002c20 <ShowMode+0x474>
		case STABLE:

			ssd1306_SetCursor(88, 35);
 8002abe:	2123      	movs	r1, #35	; 0x23
 8002ac0:	2058      	movs	r0, #88	; 0x58
 8002ac2:	f7fe fc85 	bl	80013d0 <ssd1306_SetCursor>
			ssd1306_WriteString("STABLE", Font_6x8, White);
 8002ac6:	4a59      	ldr	r2, [pc, #356]	; (8002c2c <ShowMode+0x480>)
 8002ac8:	2301      	movs	r3, #1
 8002aca:	ca06      	ldmia	r2, {r1, r2}
 8002acc:	4858      	ldr	r0, [pc, #352]	; (8002c30 <ShowMode+0x484>)
 8002ace:	f7fe fc59 	bl	8001384 <ssd1306_WriteString>
			break;
 8002ad2:	e0a5      	b.n	8002c20 <ShowMode+0x474>
		case MOVE:
			ssd1306_SetCursor(88, 35);
 8002ad4:	2123      	movs	r1, #35	; 0x23
 8002ad6:	2058      	movs	r0, #88	; 0x58
 8002ad8:	f7fe fc7a 	bl	80013d0 <ssd1306_SetCursor>
			ssd1306_WriteString("MOVE  ", Font_6x8, White);
 8002adc:	4a53      	ldr	r2, [pc, #332]	; (8002c2c <ShowMode+0x480>)
 8002ade:	2301      	movs	r3, #1
 8002ae0:	ca06      	ldmia	r2, {r1, r2}
 8002ae2:	4854      	ldr	r0, [pc, #336]	; (8002c34 <ShowMode+0x488>)
 8002ae4:	f7fe fc4e 	bl	8001384 <ssd1306_WriteString>
			break;
 8002ae8:	e09a      	b.n	8002c20 <ShowMode+0x474>
		case ROUND:
			ssd1306_SetCursor(88, 35);
 8002aea:	2123      	movs	r1, #35	; 0x23
 8002aec:	2058      	movs	r0, #88	; 0x58
 8002aee:	f7fe fc6f 	bl	80013d0 <ssd1306_SetCursor>
			ssd1306_WriteString("ROUND ", Font_6x8, White);
 8002af2:	4a4e      	ldr	r2, [pc, #312]	; (8002c2c <ShowMode+0x480>)
 8002af4:	2301      	movs	r3, #1
 8002af6:	ca06      	ldmia	r2, {r1, r2}
 8002af8:	484f      	ldr	r0, [pc, #316]	; (8002c38 <ShowMode+0x48c>)
 8002afa:	f7fe fc43 	bl	8001384 <ssd1306_WriteString>
			break;
 8002afe:	e08f      	b.n	8002c20 <ShowMode+0x474>
		case ONE:
			ssd1306_SetCursor(83 + 8 * i, 44);
 8002b00:	79bb      	ldrb	r3, [r7, #6]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	3353      	adds	r3, #83	; 0x53
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	212c      	movs	r1, #44	; 0x2c
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe fc5f 	bl	80013d0 <ssd1306_SetCursor>
			ssd1306_WriteString("1", Font_6x8, White);
 8002b12:	4a46      	ldr	r2, [pc, #280]	; (8002c2c <ShowMode+0x480>)
 8002b14:	2301      	movs	r3, #1
 8002b16:	ca06      	ldmia	r2, {r1, r2}
 8002b18:	4856      	ldr	r0, [pc, #344]	; (8002c74 <ShowMode+0x4c8>)
 8002b1a:	f7fe fc33 	bl	8001384 <ssd1306_WriteString>
			break;
 8002b1e:	e07f      	b.n	8002c20 <ShowMode+0x474>
		case TWO:
			ssd1306_SetCursor(83 + 8 * i, 44);
 8002b20:	79bb      	ldrb	r3, [r7, #6]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	3353      	adds	r3, #83	; 0x53
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe fc4f 	bl	80013d0 <ssd1306_SetCursor>
			ssd1306_WriteString("2", Font_6x8, White);
 8002b32:	4a3e      	ldr	r2, [pc, #248]	; (8002c2c <ShowMode+0x480>)
 8002b34:	2301      	movs	r3, #1
 8002b36:	ca06      	ldmia	r2, {r1, r2}
 8002b38:	484f      	ldr	r0, [pc, #316]	; (8002c78 <ShowMode+0x4cc>)
 8002b3a:	f7fe fc23 	bl	8001384 <ssd1306_WriteString>
			break;
 8002b3e:	e06f      	b.n	8002c20 <ShowMode+0x474>
		case THREE:
			ssd1306_SetCursor(83 + 8 * i, 44);
 8002b40:	79bb      	ldrb	r3, [r7, #6]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	3353      	adds	r3, #83	; 0x53
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe fc3f 	bl	80013d0 <ssd1306_SetCursor>
			ssd1306_WriteString("3", Font_6x8, White);
 8002b52:	4a36      	ldr	r2, [pc, #216]	; (8002c2c <ShowMode+0x480>)
 8002b54:	2301      	movs	r3, #1
 8002b56:	ca06      	ldmia	r2, {r1, r2}
 8002b58:	4848      	ldr	r0, [pc, #288]	; (8002c7c <ShowMode+0x4d0>)
 8002b5a:	f7fe fc13 	bl	8001384 <ssd1306_WriteString>
			break;
 8002b5e:	e05f      	b.n	8002c20 <ShowMode+0x474>
		case FOUR:
			ssd1306_SetCursor(83 + 8 * i, 44);
 8002b60:	79bb      	ldrb	r3, [r7, #6]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	3353      	adds	r3, #83	; 0x53
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	212c      	movs	r1, #44	; 0x2c
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fe fc2f 	bl	80013d0 <ssd1306_SetCursor>
			ssd1306_WriteString("4", Font_6x8, White);
 8002b72:	4a2e      	ldr	r2, [pc, #184]	; (8002c2c <ShowMode+0x480>)
 8002b74:	2301      	movs	r3, #1
 8002b76:	ca06      	ldmia	r2, {r1, r2}
 8002b78:	4841      	ldr	r0, [pc, #260]	; (8002c80 <ShowMode+0x4d4>)
 8002b7a:	f7fe fc03 	bl	8001384 <ssd1306_WriteString>
			break;
 8002b7e:	e04f      	b.n	8002c20 <ShowMode+0x474>
		case FIVE:
			ssd1306_SetCursor(83 + 8 * i, 44);
 8002b80:	79bb      	ldrb	r3, [r7, #6]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	3353      	adds	r3, #83	; 0x53
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	212c      	movs	r1, #44	; 0x2c
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fe fc1f 	bl	80013d0 <ssd1306_SetCursor>
			ssd1306_WriteString("5", Font_6x8, White);
 8002b92:	4a26      	ldr	r2, [pc, #152]	; (8002c2c <ShowMode+0x480>)
 8002b94:	2301      	movs	r3, #1
 8002b96:	ca06      	ldmia	r2, {r1, r2}
 8002b98:	483a      	ldr	r0, [pc, #232]	; (8002c84 <ShowMode+0x4d8>)
 8002b9a:	f7fe fbf3 	bl	8001384 <ssd1306_WriteString>
			break;
 8002b9e:	e03f      	b.n	8002c20 <ShowMode+0x474>
		case SIX:
			ssd1306_SetCursor(83 + 8 * i, 44);
 8002ba0:	79bb      	ldrb	r3, [r7, #6]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	3353      	adds	r3, #83	; 0x53
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fe fc0f 	bl	80013d0 <ssd1306_SetCursor>
			ssd1306_WriteString("6", Font_6x8, White);
 8002bb2:	4a1e      	ldr	r2, [pc, #120]	; (8002c2c <ShowMode+0x480>)
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	ca06      	ldmia	r2, {r1, r2}
 8002bb8:	4833      	ldr	r0, [pc, #204]	; (8002c88 <ShowMode+0x4dc>)
 8002bba:	f7fe fbe3 	bl	8001384 <ssd1306_WriteString>
			break;
 8002bbe:	e02f      	b.n	8002c20 <ShowMode+0x474>
		case SEVEN:
			ssd1306_SetCursor(83 + 8 * i, 44);
 8002bc0:	79bb      	ldrb	r3, [r7, #6]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	3353      	adds	r3, #83	; 0x53
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	212c      	movs	r1, #44	; 0x2c
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe fbff 	bl	80013d0 <ssd1306_SetCursor>
			ssd1306_WriteString("7", Font_6x8, White);
 8002bd2:	4a16      	ldr	r2, [pc, #88]	; (8002c2c <ShowMode+0x480>)
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	ca06      	ldmia	r2, {r1, r2}
 8002bd8:	482c      	ldr	r0, [pc, #176]	; (8002c8c <ShowMode+0x4e0>)
 8002bda:	f7fe fbd3 	bl	8001384 <ssd1306_WriteString>
			break;
 8002bde:	e01f      	b.n	8002c20 <ShowMode+0x474>
		case EIGHT:
			ssd1306_SetCursor(83 + 8 * i, 44);
 8002be0:	79bb      	ldrb	r3, [r7, #6]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	3353      	adds	r3, #83	; 0x53
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fe fbef 	bl	80013d0 <ssd1306_SetCursor>
			ssd1306_WriteString("8", Font_6x8, White);
 8002bf2:	4a0e      	ldr	r2, [pc, #56]	; (8002c2c <ShowMode+0x480>)
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	ca06      	ldmia	r2, {r1, r2}
 8002bf8:	4825      	ldr	r0, [pc, #148]	; (8002c90 <ShowMode+0x4e4>)
 8002bfa:	f7fe fbc3 	bl	8001384 <ssd1306_WriteString>
			break;
 8002bfe:	e00f      	b.n	8002c20 <ShowMode+0x474>
		case NINE:
			ssd1306_SetCursor(83 + 8 * i, 44);
 8002c00:	79bb      	ldrb	r3, [r7, #6]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	3353      	adds	r3, #83	; 0x53
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe fbdf 	bl	80013d0 <ssd1306_SetCursor>
			ssd1306_WriteString("9", Font_6x8, White);
 8002c12:	4a06      	ldr	r2, [pc, #24]	; (8002c2c <ShowMode+0x480>)
 8002c14:	2301      	movs	r3, #1
 8002c16:	ca06      	ldmia	r2, {r1, r2}
 8002c18:	481e      	ldr	r0, [pc, #120]	; (8002c94 <ShowMode+0x4e8>)
 8002c1a:	f7fe fbb3 	bl	8001384 <ssd1306_WriteString>
			break;
 8002c1e:	bf00      	nop
		}
	}
	ssd1306_UpdateScreen();
 8002c20:	f7fe faa0 	bl	8001164 <ssd1306_UpdateScreen>
}
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	0800d78c 	.word	0x0800d78c
 8002c34:	0800d794 	.word	0x0800d794
 8002c38:	0800d79c 	.word	0x0800d79c
 8002c3c:	0800d7a4 	.word	0x0800d7a4
 8002c40:	0800d7ac 	.word	0x0800d7ac
 8002c44:	0800d7b4 	.word	0x0800d7b4
 8002c48:	0800d7bc 	.word	0x0800d7bc
 8002c4c:	0800d7c4 	.word	0x0800d7c4
 8002c50:	0800d7cc 	.word	0x0800d7cc
 8002c54:	0800d7d4 	.word	0x0800d7d4
 8002c58:	0800d7dc 	.word	0x0800d7dc
 8002c5c:	0800d7e4 	.word	0x0800d7e4
 8002c60:	0800d7ec 	.word	0x0800d7ec
 8002c64:	0800d7f4 	.word	0x0800d7f4
 8002c68:	0800d7fc 	.word	0x0800d7fc
 8002c6c:	0800d808 	.word	0x0800d808
 8002c70:	0800d810 	.word	0x0800d810
 8002c74:	0800d818 	.word	0x0800d818
 8002c78:	0800d81c 	.word	0x0800d81c
 8002c7c:	0800d820 	.word	0x0800d820
 8002c80:	0800d824 	.word	0x0800d824
 8002c84:	0800d828 	.word	0x0800d828
 8002c88:	0800d82c 	.word	0x0800d82c
 8002c8c:	0800d830 	.word	0x0800d830
 8002c90:	0800d834 	.word	0x0800d834
 8002c94:	0800d838 	.word	0x0800d838

08002c98 <ModeStable>:

//模式1：稳定模式
void ModeStable(void) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
	//确定稳定坐标
	GetSetPosi(SetPosi, Mode[1]);
 8002c9c:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <ModeStable+0x90>)
 8002c9e:	785b      	ldrb	r3, [r3, #1]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4822      	ldr	r0, [pc, #136]	; (8002d2c <ModeStable+0x94>)
 8002ca4:	f7ff fbda 	bl	800245c <GetSetPosi>
	//将稳定坐标放入PID结构体中
	ChaSetPosi(&pid_X, SetPosi[0]);
 8002ca8:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <ModeStable+0x94>)
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	4820      	ldr	r0, [pc, #128]	; (8002d30 <ModeStable+0x98>)
 8002cb0:	f7ff f866 	bl	8001d80 <ChaSetPosi>
	ChaSetPosi(&pid_Y, SetPosi[1]);
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <ModeStable+0x94>)
 8002cb6:	885b      	ldrh	r3, [r3, #2]
 8002cb8:	4619      	mov	r1, r3
 8002cba:	481e      	ldr	r0, [pc, #120]	; (8002d34 <ModeStable+0x9c>)
 8002cbc:	f7ff f860 	bl	8001d80 <ChaSetPosi>

	//计算小球速度,同时查看间距
	ballSpeed();
 8002cc0:	f7ff faf6 	bl	80022b0 <ballSpeed>
	//分别使用pid算法调整X,Y的坐标
	//其中0通道控制X轴舵机,1通道控制Y轴舵机
	PID_Calc(&pid_X, coordinate_XY[i][0], speedX);
 8002cc4:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <ModeStable+0xa0>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <ModeStable+0xa4>)
 8002ccc:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8002cd0:	4a1b      	ldr	r2, [pc, #108]	; (8002d40 <ModeStable+0xa8>)
 8002cd2:	edd2 7a00 	vldr	s15, [r2]
 8002cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4814      	ldr	r0, [pc, #80]	; (8002d30 <ModeStable+0x98>)
 8002cde:	f7fe fed3 	bl	8001a88 <PID_Calc>
	PID_Calc(&pid_Y, coordinate_XY[i][1], speedY);
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <ModeStable+0xa0>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	4a15      	ldr	r2, [pc, #84]	; (8002d3c <ModeStable+0xa4>)
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	885b      	ldrh	r3, [r3, #2]
 8002cee:	4a15      	ldr	r2, [pc, #84]	; (8002d44 <ModeStable+0xac>)
 8002cf0:	edd2 7a00 	vldr	s15, [r2]
 8002cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	480e      	ldr	r0, [pc, #56]	; (8002d34 <ModeStable+0x9c>)
 8002cfc:	f7fe fec4 	bl	8001a88 <PID_Calc>
	PCA9685_SetServoAngle(0, pid_X.angle);
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <ModeStable+0x98>)
 8002d02:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d06:	eeb0 0a67 	vmov.f32	s0, s15
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7fe fe04 	bl	8001918 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, pid_Y.angle);
 8002d10:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <ModeStable+0x9c>)
 8002d12:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d16:	eeb0 0a67 	vmov.f32	s0, s15
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	f7fe fdfc 	bl	8001918 <PCA9685_SetServoAngle>

	//同一使用LCD输出相关信息
	ShowString();
 8002d20:	f7ff fc1a 	bl	8002558 <ShowString>
}
 8002d24:	bf00      	nop
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	200007c0 	.word	0x200007c0
 8002d2c:	20000814 	.word	0x20000814
 8002d30:	20000824 	.word	0x20000824
 8002d34:	200007e0 	.word	0x200007e0
 8002d38:	200007c6 	.word	0x200007c6
 8002d3c:	20000740 	.word	0x20000740
 8002d40:	20000818 	.word	0x20000818
 8002d44:	200008c0 	.word	0x200008c0

08002d48 <ModeMove>:

//模式2：移动模式
void ModeMove(void) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
	uint8_t count = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	71fb      	strb	r3, [r7, #7]
	static uint8_t isTim = 0;  //判断是否稳定，是否开始计时，isTim为1即为开始计时
	while (Mode[count] != 0) {
 8002d52:	e002      	b.n	8002d5a <ModeMove+0x12>
		count++;
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	3301      	adds	r3, #1
 8002d58:	71fb      	strb	r3, [r7, #7]
	while (Mode[count] != 0) {
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	4a6d      	ldr	r2, [pc, #436]	; (8002f14 <ModeMove+0x1cc>)
 8002d5e:	5cd3      	ldrb	r3, [r2, r3]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f7      	bne.n	8002d54 <ModeMove+0xc>
	}

	for (uint8_t i = 1; i < count;) {
 8002d64:	2301      	movs	r3, #1
 8002d66:	71bb      	strb	r3, [r7, #6]
 8002d68:	e0c9      	b.n	8002efe <ModeMove+0x1b6>

		//确定目的坐标
		GetSetPosi(SetPosi, Mode[i]);
 8002d6a:	79bb      	ldrb	r3, [r7, #6]
 8002d6c:	4a69      	ldr	r2, [pc, #420]	; (8002f14 <ModeMove+0x1cc>)
 8002d6e:	5cd3      	ldrb	r3, [r2, r3]
 8002d70:	4619      	mov	r1, r3
 8002d72:	4869      	ldr	r0, [pc, #420]	; (8002f18 <ModeMove+0x1d0>)
 8002d74:	f7ff fb72 	bl	800245c <GetSetPosi>
		ChaSetPosi(&pid_X, SetPosi[0]);
 8002d78:	4b67      	ldr	r3, [pc, #412]	; (8002f18 <ModeMove+0x1d0>)
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4867      	ldr	r0, [pc, #412]	; (8002f1c <ModeMove+0x1d4>)
 8002d80:	f7fe fffe 	bl	8001d80 <ChaSetPosi>
		ChaSetPosi(&pid_Y, SetPosi[1]);
 8002d84:	4b64      	ldr	r3, [pc, #400]	; (8002f18 <ModeMove+0x1d0>)
 8002d86:	885b      	ldrh	r3, [r3, #2]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4865      	ldr	r0, [pc, #404]	; (8002f20 <ModeMove+0x1d8>)
 8002d8c:	f7fe fff8 	bl	8001d80 <ChaSetPosi>

		//计算小球速度,同时查看间距
		ballSpeed();
 8002d90:	f7ff fa8e 	bl	80022b0 <ballSpeed>
		//i==1时，需要在初始位置稳定2s以上
		if (i == 1) {
 8002d94:	79bb      	ldrb	r3, [r7, #6]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d13e      	bne.n	8002e18 <ModeMove+0xd0>
			if (isTim == 0) { //isTim为1表示未开始计时，需判断是否开始计时
 8002d9a:	4b62      	ldr	r3, [pc, #392]	; (8002f24 <ModeMove+0x1dc>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d110      	bne.n	8002dc4 <ModeMove+0x7c>
				if (distance <= 30) {  //若间距小于30，则开始计时
 8002da2:	4b61      	ldr	r3, [pc, #388]	; (8002f28 <ModeMove+0x1e0>)
 8002da4:	edd3 7a00 	vldr	s15, [r3]
 8002da8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db4:	d876      	bhi.n	8002ea4 <ModeMove+0x15c>
					HAL_TIM_Base_Start(&htim2);
 8002db6:	485d      	ldr	r0, [pc, #372]	; (8002f2c <ModeMove+0x1e4>)
 8002db8:	f004 fb8c 	bl	80074d4 <HAL_TIM_Base_Start>
					isTim = 1; //isTim置1表示已开始计时
 8002dbc:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <ModeMove+0x1dc>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	e06f      	b.n	8002ea4 <ModeMove+0x15c>
				}
			} else {
				if (distance > 30) {  //若间距大于30，则停止计时
 8002dc4:	4b58      	ldr	r3, [pc, #352]	; (8002f28 <ModeMove+0x1e0>)
 8002dc6:	edd3 7a00 	vldr	s15, [r3]
 8002dca:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd6:	dd0a      	ble.n	8002dee <ModeMove+0xa6>
					isTim = 0;
 8002dd8:	4b52      	ldr	r3, [pc, #328]	; (8002f24 <ModeMove+0x1dc>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop(&htim2);
 8002dde:	4853      	ldr	r0, [pc, #332]	; (8002f2c <ModeMove+0x1e4>)
 8002de0:	f004 fbe0 	bl	80075a4 <HAL_TIM_Base_Stop>
					__HAL_TIM_SET_COUNTER(&htim2, 0);  //重新将计时器置零，方便下次计时
 8002de4:	4b51      	ldr	r3, [pc, #324]	; (8002f2c <ModeMove+0x1e4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2200      	movs	r2, #0
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24
 8002dec:	e05a      	b.n	8002ea4 <ModeMove+0x15c>
				} else if (__HAL_TIM_GET_COUNTER(&htim2) >= 30000) { //若间距小于30的情况下持续了3s，则完成稳定任务
 8002dee:	4b4f      	ldr	r3, [pc, #316]	; (8002f2c <ModeMove+0x1e4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	f247 522f 	movw	r2, #29999	; 0x752f
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d953      	bls.n	8002ea4 <ModeMove+0x15c>
					i++;	//i加一，则进入下一环节，即小球移动
 8002dfc:	79bb      	ldrb	r3, [r7, #6]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	71bb      	strb	r3, [r7, #6]
					isTim = 0;
 8002e02:	4b48      	ldr	r3, [pc, #288]	; (8002f24 <ModeMove+0x1dc>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop(&htim2);
 8002e08:	4848      	ldr	r0, [pc, #288]	; (8002f2c <ModeMove+0x1e4>)
 8002e0a:	f004 fbcb 	bl	80075a4 <HAL_TIM_Base_Stop>
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002e0e:	4b47      	ldr	r3, [pc, #284]	; (8002f2c <ModeMove+0x1e4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2200      	movs	r2, #0
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24
 8002e16:	e045      	b.n	8002ea4 <ModeMove+0x15c>
				}
			}
		} else if (i > 1 || i < count - 1) { //中间路径只需稍微停留即可，这里停留0.5s
 8002e18:	79bb      	ldrb	r3, [r7, #6]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d804      	bhi.n	8002e28 <ModeMove+0xe0>
 8002e1e:	79ba      	ldrb	r2, [r7, #6]
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	429a      	cmp	r2, r3
 8002e26:	da3d      	bge.n	8002ea4 <ModeMove+0x15c>
			if (isTim == 0) {  //计时步骤同上
 8002e28:	4b3e      	ldr	r3, [pc, #248]	; (8002f24 <ModeMove+0x1dc>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d110      	bne.n	8002e52 <ModeMove+0x10a>
				if (distance <= 30) {
 8002e30:	4b3d      	ldr	r3, [pc, #244]	; (8002f28 <ModeMove+0x1e0>)
 8002e32:	edd3 7a00 	vldr	s15, [r3]
 8002e36:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e42:	d82f      	bhi.n	8002ea4 <ModeMove+0x15c>
					HAL_TIM_Base_Start(&htim2);
 8002e44:	4839      	ldr	r0, [pc, #228]	; (8002f2c <ModeMove+0x1e4>)
 8002e46:	f004 fb45 	bl	80074d4 <HAL_TIM_Base_Start>
					isTim = 1;
 8002e4a:	4b36      	ldr	r3, [pc, #216]	; (8002f24 <ModeMove+0x1dc>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	e028      	b.n	8002ea4 <ModeMove+0x15c>
				}
			} else {
				if (distance > 30) {
 8002e52:	4b35      	ldr	r3, [pc, #212]	; (8002f28 <ModeMove+0x1e0>)
 8002e54:	edd3 7a00 	vldr	s15, [r3]
 8002e58:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e64:	dd0a      	ble.n	8002e7c <ModeMove+0x134>
					isTim = 1;
 8002e66:	4b2f      	ldr	r3, [pc, #188]	; (8002f24 <ModeMove+0x1dc>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop(&htim2);
 8002e6c:	482f      	ldr	r0, [pc, #188]	; (8002f2c <ModeMove+0x1e4>)
 8002e6e:	f004 fb99 	bl	80075a4 <HAL_TIM_Base_Stop>
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002e72:	4b2e      	ldr	r3, [pc, #184]	; (8002f2c <ModeMove+0x1e4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2200      	movs	r2, #0
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24
 8002e7a:	e013      	b.n	8002ea4 <ModeMove+0x15c>
				} else if (__HAL_TIM_GET_COUNTER(&htim2) >= 5000) {
 8002e7c:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <ModeMove+0x1e4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f241 3287 	movw	r2, #4999	; 0x1387
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d90c      	bls.n	8002ea4 <ModeMove+0x15c>
					i++;
 8002e8a:	79bb      	ldrb	r3, [r7, #6]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	71bb      	strb	r3, [r7, #6]
					isTim = 1;
 8002e90:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <ModeMove+0x1dc>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop(&htim2);
 8002e96:	4825      	ldr	r0, [pc, #148]	; (8002f2c <ModeMove+0x1e4>)
 8002e98:	f004 fb84 	bl	80075a4 <HAL_TIM_Base_Stop>
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002e9c:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <ModeMove+0x1e4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	625a      	str	r2, [r3, #36]	; 0x24
			}
		}

		//分别使用pid算法调整X,Y的坐标
		//其中0通道控制X轴舵机,1通道控制Y轴舵机
		PID_Calc(&pid_X, coordinate_XY[i][0], speedX);
 8002ea4:	79bb      	ldrb	r3, [r7, #6]
 8002ea6:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <ModeMove+0x1e8>)
 8002ea8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8002eac:	4a21      	ldr	r2, [pc, #132]	; (8002f34 <ModeMove+0x1ec>)
 8002eae:	edd2 7a00 	vldr	s15, [r2]
 8002eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4818      	ldr	r0, [pc, #96]	; (8002f1c <ModeMove+0x1d4>)
 8002eba:	f7fe fde5 	bl	8001a88 <PID_Calc>
		PID_Calc(&pid_Y, coordinate_XY[i][1], speedY);
 8002ebe:	79bb      	ldrb	r3, [r7, #6]
 8002ec0:	4a1b      	ldr	r2, [pc, #108]	; (8002f30 <ModeMove+0x1e8>)
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	885b      	ldrh	r3, [r3, #2]
 8002ec8:	4a1b      	ldr	r2, [pc, #108]	; (8002f38 <ModeMove+0x1f0>)
 8002eca:	edd2 7a00 	vldr	s15, [r2]
 8002ece:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4812      	ldr	r0, [pc, #72]	; (8002f20 <ModeMove+0x1d8>)
 8002ed6:	f7fe fdd7 	bl	8001a88 <PID_Calc>
		PCA9685_SetServoAngle(0, pid_X.angle);
 8002eda:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <ModeMove+0x1d4>)
 8002edc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f7fe fd17 	bl	8001918 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(1, pid_Y.angle);
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <ModeMove+0x1d8>)
 8002eec:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	f7fe fd0f 	bl	8001918 <PCA9685_SetServoAngle>

		ShowString();
 8002efa:	f7ff fb2d 	bl	8002558 <ShowString>
	for (uint8_t i = 1; i < count;) {
 8002efe:	79ba      	ldrb	r2, [r7, #6]
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	f4ff af31 	bcc.w	8002d6a <ModeMove+0x22>
	}
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	200007c0 	.word	0x200007c0
 8002f18:	20000814 	.word	0x20000814
 8002f1c:	20000824 	.word	0x20000824
 8002f20:	200007e0 	.word	0x200007e0
 8002f24:	200007c7 	.word	0x200007c7
 8002f28:	2000081c 	.word	0x2000081c
 8002f2c:	20000a48 	.word	0x20000a48
 8002f30:	20000740 	.word	0x20000740
 8002f34:	20000818 	.word	0x20000818
 8002f38:	200008c0 	.word	0x200008c0

08002f3c <ModeRound>:

//模式3：绕圈模式
void ModeRound(void) {
 8002f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
	//绕圈模式使用极坐标转为直角坐标
	uint16_t radius = 100;   //半径设置为100
 8002f42:	2364      	movs	r3, #100	; 0x64
 8002f44:	80bb      	strh	r3, [r7, #4]
	uint8_t zita = 0;      //角度初始位为0
 8002f46:	2300      	movs	r3, #0
 8002f48:	71fb      	strb	r3, [r7, #7]

	while (1) {
		//确定中心坐标
		GetSetPosi(SetPosi, Mode[1]);
 8002f4a:	4b4d      	ldr	r3, [pc, #308]	; (8003080 <ModeRound+0x144>)
 8002f4c:	785b      	ldrb	r3, [r3, #1]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	484c      	ldr	r0, [pc, #304]	; (8003084 <ModeRound+0x148>)
 8002f52:	f7ff fa83 	bl	800245c <GetSetPosi>
		//根据中心坐标和相对极坐标，确定其直角坐标
		SetPosi[0] += (uint16_t) (radius * cos(zita));
 8002f56:	4b4b      	ldr	r3, [pc, #300]	; (8003084 <ModeRound+0x148>)
 8002f58:	881e      	ldrh	r6, [r3, #0]
 8002f5a:	88bb      	ldrh	r3, [r7, #4]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd fae1 	bl	8000524 <__aeabi_i2d>
 8002f62:	4604      	mov	r4, r0
 8002f64:	460d      	mov	r5, r1
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd facb 	bl	8000504 <__aeabi_ui2d>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	ec43 2b10 	vmov	d0, r2, r3
 8002f76:	f009 fa0f 	bl	800c398 <cos>
 8002f7a:	ec53 2b10 	vmov	r2, r3, d0
 8002f7e:	4620      	mov	r0, r4
 8002f80:	4629      	mov	r1, r5
 8002f82:	f7fd fb39 	bl	80005f8 <__aeabi_dmul>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f7fd fe0b 	bl	8000ba8 <__aeabi_d2uiz>
 8002f92:	4603      	mov	r3, r0
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	4433      	add	r3, r6
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	4b3a      	ldr	r3, [pc, #232]	; (8003084 <ModeRound+0x148>)
 8002f9c:	801a      	strh	r2, [r3, #0]
		SetPosi[1] += (uint16_t) (radius * sin(zita));
 8002f9e:	4b39      	ldr	r3, [pc, #228]	; (8003084 <ModeRound+0x148>)
 8002fa0:	885e      	ldrh	r6, [r3, #2]
 8002fa2:	88bb      	ldrh	r3, [r7, #4]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd fabd 	bl	8000524 <__aeabi_i2d>
 8002faa:	4604      	mov	r4, r0
 8002fac:	460d      	mov	r5, r1
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fd faa7 	bl	8000504 <__aeabi_ui2d>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	ec43 2b10 	vmov	d0, r2, r3
 8002fbe:	f009 fac7 	bl	800c550 <sin>
 8002fc2:	ec53 2b10 	vmov	r2, r3, d0
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	4629      	mov	r1, r5
 8002fca:	f7fd fb15 	bl	80005f8 <__aeabi_dmul>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f7fd fde7 	bl	8000ba8 <__aeabi_d2uiz>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	4433      	add	r3, r6
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	4b28      	ldr	r3, [pc, #160]	; (8003084 <ModeRound+0x148>)
 8002fe4:	805a      	strh	r2, [r3, #2]

		//将稳定坐标放入PID结构体中
		ChaSetPosi(&pid_X, SetPosi[0]);
 8002fe6:	4b27      	ldr	r3, [pc, #156]	; (8003084 <ModeRound+0x148>)
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	4619      	mov	r1, r3
 8002fec:	4826      	ldr	r0, [pc, #152]	; (8003088 <ModeRound+0x14c>)
 8002fee:	f7fe fec7 	bl	8001d80 <ChaSetPosi>
		ChaSetPosi(&pid_Y, SetPosi[1]);
 8002ff2:	4b24      	ldr	r3, [pc, #144]	; (8003084 <ModeRound+0x148>)
 8002ff4:	885b      	ldrh	r3, [r3, #2]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4824      	ldr	r0, [pc, #144]	; (800308c <ModeRound+0x150>)
 8002ffa:	f7fe fec1 	bl	8001d80 <ChaSetPosi>

		//计算小球速度,同时查看间距
		ballSpeed();
 8002ffe:	f7ff f957 	bl	80022b0 <ballSpeed>

		//当当前位置与目标位置间距小于20，目标坐标角度增加10度
		if (distance <= 20) {
 8003002:	4b23      	ldr	r3, [pc, #140]	; (8003090 <ModeRound+0x154>)
 8003004:	edd3 7a00 	vldr	s15, [r3]
 8003008:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800300c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003014:	d802      	bhi.n	800301c <ModeRound+0xe0>
			zita += 10;
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	330a      	adds	r3, #10
 800301a:	71fb      	strb	r3, [r7, #7]
		}

		//分别使用pid算法调整X,Y的坐标
		//其中0通道控制X轴舵机,1通道控制Y轴舵机
		PID_Calc(&pid_X, coordinate_XY[i][0], speedX);
 800301c:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <ModeRound+0x158>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <ModeRound+0x15c>)
 8003024:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8003028:	4a1c      	ldr	r2, [pc, #112]	; (800309c <ModeRound+0x160>)
 800302a:	edd2 7a00 	vldr	s15, [r2]
 800302e:	eeb0 0a67 	vmov.f32	s0, s15
 8003032:	4619      	mov	r1, r3
 8003034:	4814      	ldr	r0, [pc, #80]	; (8003088 <ModeRound+0x14c>)
 8003036:	f7fe fd27 	bl	8001a88 <PID_Calc>
		PID_Calc(&pid_Y, coordinate_XY[i][1], speedY);
 800303a:	4b16      	ldr	r3, [pc, #88]	; (8003094 <ModeRound+0x158>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	4a16      	ldr	r2, [pc, #88]	; (8003098 <ModeRound+0x15c>)
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	885b      	ldrh	r3, [r3, #2]
 8003046:	4a16      	ldr	r2, [pc, #88]	; (80030a0 <ModeRound+0x164>)
 8003048:	edd2 7a00 	vldr	s15, [r2]
 800304c:	eeb0 0a67 	vmov.f32	s0, s15
 8003050:	4619      	mov	r1, r3
 8003052:	480e      	ldr	r0, [pc, #56]	; (800308c <ModeRound+0x150>)
 8003054:	f7fe fd18 	bl	8001a88 <PID_Calc>
		PCA9685_SetServoAngle(0, pid_X.angle);
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <ModeRound+0x14c>)
 800305a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800305e:	eeb0 0a67 	vmov.f32	s0, s15
 8003062:	2000      	movs	r0, #0
 8003064:	f7fe fc58 	bl	8001918 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(1, pid_Y.angle);
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <ModeRound+0x150>)
 800306a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800306e:	eeb0 0a67 	vmov.f32	s0, s15
 8003072:	2001      	movs	r0, #1
 8003074:	f7fe fc50 	bl	8001918 <PCA9685_SetServoAngle>

		//若角度达到了360度，重置为0，起到循环的目的
		if (zita == 360) {
			zita = 0;
		}
		ShowString();
 8003078:	f7ff fa6e 	bl	8002558 <ShowString>
		GetSetPosi(SetPosi, Mode[1]);
 800307c:	e765      	b.n	8002f4a <ModeRound+0xe>
 800307e:	bf00      	nop
 8003080:	200007c0 	.word	0x200007c0
 8003084:	20000814 	.word	0x20000814
 8003088:	20000824 	.word	0x20000824
 800308c:	200007e0 	.word	0x200007e0
 8003090:	2000081c 	.word	0x2000081c
 8003094:	200007c6 	.word	0x200007c6
 8003098:	20000740 	.word	0x20000740
 800309c:	20000818 	.word	0x20000818
 80030a0:	200008c0 	.word	0x200008c0

080030a4 <SelfInspection>:
	}
}

void SelfInspection(void) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
	PCA9685_SetServoAngle(0, 90);
 80030a8:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80031cc <SelfInspection+0x128>
 80030ac:	2000      	movs	r0, #0
 80030ae:	f7fe fc33 	bl	8001918 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, 90);
 80030b2:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80031cc <SelfInspection+0x128>
 80030b6:	2001      	movs	r0, #1
 80030b8:	f7fe fc2e 	bl	8001918 <PCA9685_SetServoAngle>
	HAL_Delay(1000);
 80030bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030c0:	f001 fa4a 	bl	8004558 <HAL_Delay>

	PCA9685_SetServoAngle(0, 40);
 80030c4:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80031d0 <SelfInspection+0x12c>
 80030c8:	2000      	movs	r0, #0
 80030ca:	f7fe fc25 	bl	8001918 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, 40);
 80030ce:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80031d0 <SelfInspection+0x12c>
 80030d2:	2001      	movs	r0, #1
 80030d4:	f7fe fc20 	bl	8001918 <PCA9685_SetServoAngle>
	HAL_Delay(400);
 80030d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80030dc:	f001 fa3c 	bl	8004558 <HAL_Delay>

	PCA9685_SetServoAngle(0, 140);
 80030e0:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80031d4 <SelfInspection+0x130>
 80030e4:	2000      	movs	r0, #0
 80030e6:	f7fe fc17 	bl	8001918 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, 140);
 80030ea:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80031d4 <SelfInspection+0x130>
 80030ee:	2001      	movs	r0, #1
 80030f0:	f7fe fc12 	bl	8001918 <PCA9685_SetServoAngle>
	HAL_Delay(400);
 80030f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80030f8:	f001 fa2e 	bl	8004558 <HAL_Delay>

	PCA9685_SetServoAngle(0, 40);
 80030fc:	ed9f 0a34 	vldr	s0, [pc, #208]	; 80031d0 <SelfInspection+0x12c>
 8003100:	2000      	movs	r0, #0
 8003102:	f7fe fc09 	bl	8001918 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, 140);
 8003106:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80031d4 <SelfInspection+0x130>
 800310a:	2001      	movs	r0, #1
 800310c:	f7fe fc04 	bl	8001918 <PCA9685_SetServoAngle>
	HAL_Delay(400);
 8003110:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003114:	f001 fa20 	bl	8004558 <HAL_Delay>

	PCA9685_SetServoAngle(0, 140);
 8003118:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80031d4 <SelfInspection+0x130>
 800311c:	2000      	movs	r0, #0
 800311e:	f7fe fbfb 	bl	8001918 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, 40);
 8003122:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80031d0 <SelfInspection+0x12c>
 8003126:	2001      	movs	r0, #1
 8003128:	f7fe fbf6 	bl	8001918 <PCA9685_SetServoAngle>
	HAL_Delay(1000);
 800312c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003130:	f001 fa12 	bl	8004558 <HAL_Delay>

	PCA9685_SetServoAngle(0, 70);
 8003134:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80031d8 <SelfInspection+0x134>
 8003138:	2000      	movs	r0, #0
 800313a:	f7fe fbed 	bl	8001918 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, 70);
 800313e:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80031d8 <SelfInspection+0x134>
 8003142:	2001      	movs	r0, #1
 8003144:	f7fe fbe8 	bl	8001918 <PCA9685_SetServoAngle>
	HAL_Delay(400);
 8003148:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800314c:	f001 fa04 	bl	8004558 <HAL_Delay>

	PCA9685_SetServoAngle(0, 110);
 8003150:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80031dc <SelfInspection+0x138>
 8003154:	2000      	movs	r0, #0
 8003156:	f7fe fbdf 	bl	8001918 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, 110);
 800315a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80031dc <SelfInspection+0x138>
 800315e:	2001      	movs	r0, #1
 8003160:	f7fe fbda 	bl	8001918 <PCA9685_SetServoAngle>
	HAL_Delay(400);
 8003164:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003168:	f001 f9f6 	bl	8004558 <HAL_Delay>

	PCA9685_SetServoAngle(0, 70);
 800316c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80031d8 <SelfInspection+0x134>
 8003170:	2000      	movs	r0, #0
 8003172:	f7fe fbd1 	bl	8001918 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, 110);
 8003176:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80031dc <SelfInspection+0x138>
 800317a:	2001      	movs	r0, #1
 800317c:	f7fe fbcc 	bl	8001918 <PCA9685_SetServoAngle>
	HAL_Delay(400);
 8003180:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003184:	f001 f9e8 	bl	8004558 <HAL_Delay>

	PCA9685_SetServoAngle(0, 110);
 8003188:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80031dc <SelfInspection+0x138>
 800318c:	2000      	movs	r0, #0
 800318e:	f7fe fbc3 	bl	8001918 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, 70);
 8003192:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80031d8 <SelfInspection+0x134>
 8003196:	2001      	movs	r0, #1
 8003198:	f7fe fbbe 	bl	8001918 <PCA9685_SetServoAngle>
	HAL_Delay(1000);
 800319c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031a0:	f001 f9da 	bl	8004558 <HAL_Delay>

	HAL_Delay(1000);
 80031a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031a8:	f001 f9d6 	bl	8004558 <HAL_Delay>
	PCA9685_SetServoAngle(0, 90);
 80031ac:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80031cc <SelfInspection+0x128>
 80031b0:	2000      	movs	r0, #0
 80031b2:	f7fe fbb1 	bl	8001918 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, 90);
 80031b6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80031cc <SelfInspection+0x128>
 80031ba:	2001      	movs	r0, #1
 80031bc:	f7fe fbac 	bl	8001918 <PCA9685_SetServoAngle>
	HAL_Delay(1000);
 80031c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031c4:	f001 f9c8 	bl	8004558 <HAL_Delay>
}
 80031c8:	bf00      	nop
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	42b40000 	.word	0x42b40000
 80031d0:	42200000 	.word	0x42200000
 80031d4:	430c0000 	.word	0x430c0000
 80031d8:	428c0000 	.word	0x428c0000
 80031dc:	42dc0000 	.word	0x42dc0000

080031e0 <SelecMode>:

//选择模式,isInit=1表示在初始化中调用
void SelecMode(uint8_t isInit) {
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b089      	sub	sp, #36	; 0x24
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	4603      	mov	r3, r0
 80031e8:	71fb      	strb	r3, [r7, #7]
	uint8_t key;
	uint8_t ModeBuffer[6];  //模式缓存区
	for (uint8_t i = 0; i < 6; i++) { //将原本模式缓存区中的信息保存起来
 80031ea:	2300      	movs	r3, #0
 80031ec:	75fb      	strb	r3, [r7, #23]
 80031ee:	e00f      	b.n	8003210 <SelecMode+0x30>
		ModeBuffer[i] = Mode[i];
 80031f0:	7dfa      	ldrb	r2, [r7, #23]
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
 80031f4:	49a9      	ldr	r1, [pc, #676]	; (800349c <SelecMode+0x2bc>)
 80031f6:	5c8a      	ldrb	r2, [r1, r2]
 80031f8:	f107 0118 	add.w	r1, r7, #24
 80031fc:	440b      	add	r3, r1
 80031fe:	f803 2c10 	strb.w	r2, [r3, #-16]
		Mode[i] = 0;
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	4aa5      	ldr	r2, [pc, #660]	; (800349c <SelecMode+0x2bc>)
 8003206:	2100      	movs	r1, #0
 8003208:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 6; i++) { //将原本模式缓存区中的信息保存起来
 800320a:	7dfb      	ldrb	r3, [r7, #23]
 800320c:	3301      	adds	r3, #1
 800320e:	75fb      	strb	r3, [r7, #23]
 8003210:	7dfb      	ldrb	r3, [r7, #23]
 8003212:	2b05      	cmp	r3, #5
 8003214:	d9ec      	bls.n	80031f0 <SelecMode+0x10>
	}

	HAL_TIM_Base_Start_IT(&htim1);     //定时器更新时、产生中断
 8003216:	48a2      	ldr	r0, [pc, #648]	; (80034a0 <SelecMode+0x2c0>)
 8003218:	f004 f9ec 	bl	80075f4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);    //启动输入捕获中断
 800321c:	2100      	movs	r1, #0
 800321e:	48a0      	ldr	r0, [pc, #640]	; (80034a0 <SelecMode+0x2c0>)
 8003220:	f004 fad6 	bl	80077d0 <HAL_TIM_IC_Start_IT>

	printf("请选择模式:(模式+格点)\r\n如：从1经过2，3至6 ---------- 移动+1+2+3+6\r\n");
 8003224:	489f      	ldr	r0, [pc, #636]	; (80034a4 <SelecMode+0x2c4>)
 8003226:	f006 fe93 	bl	8009f50 <puts>
	for (int i = 0; i < 6; i++) {
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	e172      	b.n	8003516 <SelecMode+0x336>
		while ((key = Remote_Scan()) == NOPRES)
 8003230:	bf00      	nop
 8003232:	f7fe fed3 	bl	8001fdc <Remote_Scan>
 8003236:	4603      	mov	r3, r0
 8003238:	73bb      	strb	r3, [r7, #14]
 800323a:	7bbb      	ldrb	r3, [r7, #14]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f8      	beq.n	8003232 <SelecMode+0x52>
			//等待按键输入
			;

		if (key == ZERO) {
 8003240:	7bbb      	ldrb	r3, [r7, #14]
 8003242:	2b98      	cmp	r3, #152	; 0x98
 8003244:	d105      	bne.n	8003252 <SelecMode+0x72>
			SelfInspection();
 8003246:	f7ff ff2d 	bl	80030a4 <SelfInspection>
			i -= 1;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	3b01      	subs	r3, #1
 800324e:	613b      	str	r3, [r7, #16]
			continue;
 8003250:	e15e      	b.n	8003510 <SelecMode+0x330>
		} else if (key == INIT) {
 8003252:	7bbb      	ldrb	r3, [r7, #14]
 8003254:	2b18      	cmp	r3, #24
 8003256:	d10d      	bne.n	8003274 <SelecMode+0x94>
			PCA9685_SetServoAngle(0, 95);
 8003258:	ed9f 0a93 	vldr	s0, [pc, #588]	; 80034a8 <SelecMode+0x2c8>
 800325c:	2000      	movs	r0, #0
 800325e:	f7fe fb5b 	bl	8001918 <PCA9685_SetServoAngle>
			PCA9685_SetServoAngle(1, 95);
 8003262:	ed9f 0a91 	vldr	s0, [pc, #580]	; 80034a8 <SelecMode+0x2c8>
 8003266:	2001      	movs	r0, #1
 8003268:	f7fe fb56 	bl	8001918 <PCA9685_SetServoAngle>
			i -= 1;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	3b01      	subs	r3, #1
 8003270:	613b      	str	r3, [r7, #16]
			continue;
 8003272:	e14d      	b.n	8003510 <SelecMode+0x330>
		/*
		 * 若输入格式不符合要求，则重新输入
		 * 若如何输入，则显示模式缓存区数据
		 * 先输入模式（即稳定、移动和绕圈），后输入数字，最后一位一定为确定键，并开始计时
		 */
		if (i == 5) { //该判断语句的多用是确保最后一定按下确定键
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	2b05      	cmp	r3, #5
 8003278:	d113      	bne.n	80032a2 <SelecMode+0xc2>
			if (key == DETER) {
 800327a:	7bbb      	ldrb	r3, [r7, #14]
 800327c:	2b38      	cmp	r3, #56	; 0x38
 800327e:	d109      	bne.n	8003294 <SelecMode+0xb4>
				HAL_TIM_Base_Start(&htim5); //按下确定键后开始计时
 8003280:	488a      	ldr	r0, [pc, #552]	; (80034ac <SelecMode+0x2cc>)
 8003282:	f004 f927 	bl	80074d4 <HAL_TIM_Base_Start>
				PID_Reset(&pid_X); 		   //并重置PID信息
 8003286:	488a      	ldr	r0, [pc, #552]	; (80034b0 <SelecMode+0x2d0>)
 8003288:	f7fe fd8a 	bl	8001da0 <PID_Reset>
				PID_Reset(&pid_Y);
 800328c:	4889      	ldr	r0, [pc, #548]	; (80034b4 <SelecMode+0x2d4>)
 800328e:	f7fe fd87 	bl	8001da0 <PID_Reset>
				return; 		   //跳出函数，开始控制
 8003292:	e14b      	b.n	800352c <SelecMode+0x34c>
			} else {
				printf("你输入的格式不符合要求，请按下确定键!\r\n");
 8003294:	4888      	ldr	r0, [pc, #544]	; (80034b8 <SelecMode+0x2d8>)
 8003296:	f006 fe5b 	bl	8009f50 <puts>
				i -= 1; //若输入格式不符合要求则重新输入
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	3b01      	subs	r3, #1
 800329e:	613b      	str	r3, [r7, #16]
				continue;
 80032a0:	e136      	b.n	8003510 <SelecMode+0x330>
			}
		} else if (i == 0 && key != STABLE && key != MOVE && key != ROUND) {
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10f      	bne.n	80032c8 <SelecMode+0xe8>
 80032a8:	7bbb      	ldrb	r3, [r7, #14]
 80032aa:	2b10      	cmp	r3, #16
 80032ac:	d00c      	beq.n	80032c8 <SelecMode+0xe8>
 80032ae:	7bbb      	ldrb	r3, [r7, #14]
 80032b0:	2b4a      	cmp	r3, #74	; 0x4a
 80032b2:	d009      	beq.n	80032c8 <SelecMode+0xe8>
 80032b4:	7bbb      	ldrb	r3, [r7, #14]
 80032b6:	2b5a      	cmp	r3, #90	; 0x5a
 80032b8:	d006      	beq.n	80032c8 <SelecMode+0xe8>
			printf("你输入的格式不符合要求，请输入模式!\r\n");
 80032ba:	4880      	ldr	r0, [pc, #512]	; (80034bc <SelecMode+0x2dc>)
 80032bc:	f006 fe48 	bl	8009f50 <puts>
			i = -1; //若输入格式不符合要求则重新输入
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	613b      	str	r3, [r7, #16]
			continue;
 80032c6:	e123      	b.n	8003510 <SelecMode+0x330>
		} else if (i == 0 && (key == STABLE || key == MOVE || key == ROUND)) {
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d12a      	bne.n	8003324 <SelecMode+0x144>
 80032ce:	7bbb      	ldrb	r3, [r7, #14]
 80032d0:	2b10      	cmp	r3, #16
 80032d2:	d005      	beq.n	80032e0 <SelecMode+0x100>
 80032d4:	7bbb      	ldrb	r3, [r7, #14]
 80032d6:	2b4a      	cmp	r3, #74	; 0x4a
 80032d8:	d002      	beq.n	80032e0 <SelecMode+0x100>
 80032da:	7bbb      	ldrb	r3, [r7, #14]
 80032dc:	2b5a      	cmp	r3, #90	; 0x5a
 80032de:	d121      	bne.n	8003324 <SelecMode+0x144>
			Mode[i] = key; //若输入符合要求，则将键值存入模式缓存区中
 80032e0:	4a6e      	ldr	r2, [pc, #440]	; (800349c <SelecMode+0x2bc>)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4413      	add	r3, r2
 80032e6:	7bba      	ldrb	r2, [r7, #14]
 80032e8:	701a      	strb	r2, [r3, #0]
			printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3],
 80032ea:	4b6c      	ldr	r3, [pc, #432]	; (800349c <SelecMode+0x2bc>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	4619      	mov	r1, r3
 80032f0:	4b6a      	ldr	r3, [pc, #424]	; (800349c <SelecMode+0x2bc>)
 80032f2:	785b      	ldrb	r3, [r3, #1]
 80032f4:	4618      	mov	r0, r3
 80032f6:	4b69      	ldr	r3, [pc, #420]	; (800349c <SelecMode+0x2bc>)
 80032f8:	789b      	ldrb	r3, [r3, #2]
 80032fa:	461c      	mov	r4, r3
 80032fc:	4b67      	ldr	r3, [pc, #412]	; (800349c <SelecMode+0x2bc>)
 80032fe:	78db      	ldrb	r3, [r3, #3]
 8003300:	461a      	mov	r2, r3
					Mode[4]);
 8003302:	4b66      	ldr	r3, [pc, #408]	; (800349c <SelecMode+0x2bc>)
 8003304:	791b      	ldrb	r3, [r3, #4]
			printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3],
 8003306:	9301      	str	r3, [sp, #4]
 8003308:	9200      	str	r2, [sp, #0]
 800330a:	4623      	mov	r3, r4
 800330c:	4602      	mov	r2, r0
 800330e:	486c      	ldr	r0, [pc, #432]	; (80034c0 <SelecMode+0x2e0>)
 8003310:	f006 fd98 	bl	8009e44 <iprintf>

			//在LCD中显示按键信息
			ShowMode(key, i);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	7bbb      	ldrb	r3, [r7, #14]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fa45 	bl	80027ac <ShowMode>

			continue;
 8003322:	e0f5      	b.n	8003510 <SelecMode+0x330>
		} else if (key == DETER) {
 8003324:	7bbb      	ldrb	r3, [r7, #14]
 8003326:	2b38      	cmp	r3, #56	; 0x38
 8003328:	d109      	bne.n	800333e <SelecMode+0x15e>
			HAL_TIM_Base_Start(&htim5); //按下确定键后开始计时
 800332a:	4860      	ldr	r0, [pc, #384]	; (80034ac <SelecMode+0x2cc>)
 800332c:	f004 f8d2 	bl	80074d4 <HAL_TIM_Base_Start>
			PID_Reset(&pid_X);		   //并重置PID信息
 8003330:	485f      	ldr	r0, [pc, #380]	; (80034b0 <SelecMode+0x2d0>)
 8003332:	f7fe fd35 	bl	8001da0 <PID_Reset>
			PID_Reset(&pid_Y);
 8003336:	485f      	ldr	r0, [pc, #380]	; (80034b4 <SelecMode+0x2d4>)
 8003338:	f7fe fd32 	bl	8001da0 <PID_Reset>
			break;
 800333c:	e0ef      	b.n	800351e <SelecMode+0x33e>
		} else if (key == REPLACE) {
 800333e:	7bbb      	ldrb	r3, [r7, #14]
 8003340:	2b68      	cmp	r3, #104	; 0x68
 8003342:	d12a      	bne.n	800339a <SelecMode+0x1ba>
			for (i = 0; i <= 4; i++) { //按下复位键后，将模式缓存区中的信息清零
 8003344:	2300      	movs	r3, #0
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	e007      	b.n	800335a <SelecMode+0x17a>
				Mode[i] = 0;
 800334a:	4a54      	ldr	r2, [pc, #336]	; (800349c <SelecMode+0x2bc>)
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4413      	add	r3, r2
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]
			for (i = 0; i <= 4; i++) { //按下复位键后，将模式缓存区中的信息清零
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	3301      	adds	r3, #1
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b04      	cmp	r3, #4
 800335e:	ddf4      	ble.n	800334a <SelecMode+0x16a>
			}
			ssd1306_SetCursor(88, 35);
 8003360:	2123      	movs	r1, #35	; 0x23
 8003362:	2058      	movs	r0, #88	; 0x58
 8003364:	f7fe f834 	bl	80013d0 <ssd1306_SetCursor>
			ssd1306_WriteString("      ", Font_6x8, White);
 8003368:	4a56      	ldr	r2, [pc, #344]	; (80034c4 <SelecMode+0x2e4>)
 800336a:	2301      	movs	r3, #1
 800336c:	ca06      	ldmia	r2, {r1, r2}
 800336e:	4856      	ldr	r0, [pc, #344]	; (80034c8 <SelecMode+0x2e8>)
 8003370:	f7fe f808 	bl	8001384 <ssd1306_WriteString>
			ssd1306_SetCursor(88, 44);
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	2058      	movs	r0, #88	; 0x58
 8003378:	f7fe f82a 	bl	80013d0 <ssd1306_SetCursor>
			ssd1306_WriteString("      ", Font_6x8, White);
 800337c:	4a51      	ldr	r2, [pc, #324]	; (80034c4 <SelecMode+0x2e4>)
 800337e:	2301      	movs	r3, #1
 8003380:	ca06      	ldmia	r2, {r1, r2}
 8003382:	4851      	ldr	r0, [pc, #324]	; (80034c8 <SelecMode+0x2e8>)
 8003384:	f7fd fffe 	bl	8001384 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8003388:	f7fd feec 	bl	8001164 <ssd1306_UpdateScreen>
			i = -1; //i=-1,进入下一个循环后，会自动加一，即从0重新开始
 800338c:	f04f 33ff 	mov.w	r3, #4294967295
 8003390:	613b      	str	r3, [r7, #16]
			printf("复位\r\n");
 8003392:	484e      	ldr	r0, [pc, #312]	; (80034cc <SelecMode+0x2ec>)
 8003394:	f006 fddc 	bl	8009f50 <puts>
			continue;
 8003398:	e0ba      	b.n	8003510 <SelecMode+0x330>
		}

		//判断格式输入是否正确
		if (key == ONE || key == TWO || key == THREE || key == FOUR
 800339a:	7bbb      	ldrb	r3, [r7, #14]
 800339c:	2ba2      	cmp	r3, #162	; 0xa2
 800339e:	d017      	beq.n	80033d0 <SelecMode+0x1f0>
 80033a0:	7bbb      	ldrb	r3, [r7, #14]
 80033a2:	2b62      	cmp	r3, #98	; 0x62
 80033a4:	d014      	beq.n	80033d0 <SelecMode+0x1f0>
 80033a6:	7bbb      	ldrb	r3, [r7, #14]
 80033a8:	2be2      	cmp	r3, #226	; 0xe2
 80033aa:	d011      	beq.n	80033d0 <SelecMode+0x1f0>
 80033ac:	7bbb      	ldrb	r3, [r7, #14]
 80033ae:	2b22      	cmp	r3, #34	; 0x22
 80033b0:	d00e      	beq.n	80033d0 <SelecMode+0x1f0>
				|| key == FIVE || key == SIX || key == SEVEN || key == EIGHT
 80033b2:	7bbb      	ldrb	r3, [r7, #14]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d00b      	beq.n	80033d0 <SelecMode+0x1f0>
 80033b8:	7bbb      	ldrb	r3, [r7, #14]
 80033ba:	2bc2      	cmp	r3, #194	; 0xc2
 80033bc:	d008      	beq.n	80033d0 <SelecMode+0x1f0>
 80033be:	7bbb      	ldrb	r3, [r7, #14]
 80033c0:	2be0      	cmp	r3, #224	; 0xe0
 80033c2:	d005      	beq.n	80033d0 <SelecMode+0x1f0>
 80033c4:	7bbb      	ldrb	r3, [r7, #14]
 80033c6:	2ba8      	cmp	r3, #168	; 0xa8
 80033c8:	d002      	beq.n	80033d0 <SelecMode+0x1f0>
				|| key == NINE) {
 80033ca:	7bbb      	ldrb	r3, [r7, #14]
 80033cc:	2b90      	cmp	r3, #144	; 0x90
 80033ce:	d121      	bne.n	8003414 <SelecMode+0x234>
			Mode[i] = key; //若输入符合要求，则将键值存入模式缓存区中
 80033d0:	4a32      	ldr	r2, [pc, #200]	; (800349c <SelecMode+0x2bc>)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4413      	add	r3, r2
 80033d6:	7bba      	ldrb	r2, [r7, #14]
 80033d8:	701a      	strb	r2, [r3, #0]
			printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3],
 80033da:	4b30      	ldr	r3, [pc, #192]	; (800349c <SelecMode+0x2bc>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	4619      	mov	r1, r3
 80033e0:	4b2e      	ldr	r3, [pc, #184]	; (800349c <SelecMode+0x2bc>)
 80033e2:	785b      	ldrb	r3, [r3, #1]
 80033e4:	4618      	mov	r0, r3
 80033e6:	4b2d      	ldr	r3, [pc, #180]	; (800349c <SelecMode+0x2bc>)
 80033e8:	789b      	ldrb	r3, [r3, #2]
 80033ea:	461c      	mov	r4, r3
 80033ec:	4b2b      	ldr	r3, [pc, #172]	; (800349c <SelecMode+0x2bc>)
 80033ee:	78db      	ldrb	r3, [r3, #3]
 80033f0:	461a      	mov	r2, r3
					Mode[4]);
 80033f2:	4b2a      	ldr	r3, [pc, #168]	; (800349c <SelecMode+0x2bc>)
 80033f4:	791b      	ldrb	r3, [r3, #4]
			printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3],
 80033f6:	9301      	str	r3, [sp, #4]
 80033f8:	9200      	str	r2, [sp, #0]
 80033fa:	4623      	mov	r3, r4
 80033fc:	4602      	mov	r2, r0
 80033fe:	4830      	ldr	r0, [pc, #192]	; (80034c0 <SelecMode+0x2e0>)
 8003400:	f006 fd20 	bl	8009e44 <iprintf>

			//在LCD中显示按键信息
			ShowMode(key, i);
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	b2da      	uxtb	r2, r3
 8003408:	7bbb      	ldrb	r3, [r7, #14]
 800340a:	4611      	mov	r1, r2
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff f9cd 	bl	80027ac <ShowMode>

			continue;
 8003412:	e07d      	b.n	8003510 <SelecMode+0x330>
		} else if (key == DETER) {
 8003414:	7bbb      	ldrb	r3, [r7, #14]
 8003416:	2b38      	cmp	r3, #56	; 0x38
 8003418:	d109      	bne.n	800342e <SelecMode+0x24e>
			HAL_TIM_Base_Start(&htim5); //按下确定键后开始计时
 800341a:	4824      	ldr	r0, [pc, #144]	; (80034ac <SelecMode+0x2cc>)
 800341c:	f004 f85a 	bl	80074d4 <HAL_TIM_Base_Start>
			PID_Reset(&pid_X);		   //并重置PID信息
 8003420:	4823      	ldr	r0, [pc, #140]	; (80034b0 <SelecMode+0x2d0>)
 8003422:	f7fe fcbd 	bl	8001da0 <PID_Reset>
			PID_Reset(&pid_Y);
 8003426:	4823      	ldr	r0, [pc, #140]	; (80034b4 <SelecMode+0x2d4>)
 8003428:	f7fe fcba 	bl	8001da0 <PID_Reset>
			break;
 800342c:	e077      	b.n	800351e <SelecMode+0x33e>
		} else if (key == REPLACE) {
 800342e:	7bbb      	ldrb	r3, [r7, #14]
 8003430:	2b68      	cmp	r3, #104	; 0x68
 8003432:	d12a      	bne.n	800348a <SelecMode+0x2aa>
			for (i = 0; i <= 4; i++) {		   //按下复位键后，将模式缓存区中的信息清零
 8003434:	2300      	movs	r3, #0
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	e007      	b.n	800344a <SelecMode+0x26a>
				Mode[i] = 0;
 800343a:	4a18      	ldr	r2, [pc, #96]	; (800349c <SelecMode+0x2bc>)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
			for (i = 0; i <= 4; i++) {		   //按下复位键后，将模式缓存区中的信息清零
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	3301      	adds	r3, #1
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b04      	cmp	r3, #4
 800344e:	ddf4      	ble.n	800343a <SelecMode+0x25a>
			}
			ssd1306_SetCursor(88, 35);
 8003450:	2123      	movs	r1, #35	; 0x23
 8003452:	2058      	movs	r0, #88	; 0x58
 8003454:	f7fd ffbc 	bl	80013d0 <ssd1306_SetCursor>
			ssd1306_WriteString("      ", Font_6x8, White);
 8003458:	4a1a      	ldr	r2, [pc, #104]	; (80034c4 <SelecMode+0x2e4>)
 800345a:	2301      	movs	r3, #1
 800345c:	ca06      	ldmia	r2, {r1, r2}
 800345e:	481a      	ldr	r0, [pc, #104]	; (80034c8 <SelecMode+0x2e8>)
 8003460:	f7fd ff90 	bl	8001384 <ssd1306_WriteString>
			ssd1306_SetCursor(88, 44);
 8003464:	212c      	movs	r1, #44	; 0x2c
 8003466:	2058      	movs	r0, #88	; 0x58
 8003468:	f7fd ffb2 	bl	80013d0 <ssd1306_SetCursor>
			ssd1306_WriteString("      ", Font_6x8, White);
 800346c:	4a15      	ldr	r2, [pc, #84]	; (80034c4 <SelecMode+0x2e4>)
 800346e:	2301      	movs	r3, #1
 8003470:	ca06      	ldmia	r2, {r1, r2}
 8003472:	4815      	ldr	r0, [pc, #84]	; (80034c8 <SelecMode+0x2e8>)
 8003474:	f7fd ff86 	bl	8001384 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8003478:	f7fd fe74 	bl	8001164 <ssd1306_UpdateScreen>
			i = -1;		   //i=-1,进入下一个循环后，会自动加一，即从0重新开始
 800347c:	f04f 33ff 	mov.w	r3, #4294967295
 8003480:	613b      	str	r3, [r7, #16]
			printf("复位\r\n");
 8003482:	4812      	ldr	r0, [pc, #72]	; (80034cc <SelecMode+0x2ec>)
 8003484:	f006 fd64 	bl	8009f50 <puts>
			continue;
 8003488:	e042      	b.n	8003510 <SelecMode+0x330>
		}

		//若按下CANCEL键，则取消以上输入，并将模式缓存区的数据恢复
		if (key == CANCEL) {
 800348a:	7bbb      	ldrb	r3, [r7, #14]
 800348c:	2bb0      	cmp	r3, #176	; 0xb0
 800348e:	d139      	bne.n	8003504 <SelecMode+0x324>
			if (isInit == 0) {
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d12f      	bne.n	80034f6 <SelecMode+0x316>
				for (uint8_t i = 0; i < 6; i++) { //恢复模式缓存区原本的信息
 8003496:	2300      	movs	r3, #0
 8003498:	73fb      	strb	r3, [r7, #15]
 800349a:	e025      	b.n	80034e8 <SelecMode+0x308>
 800349c:	200007c0 	.word	0x200007c0
 80034a0:	20000a00 	.word	0x20000a00
 80034a4:	0800d83c 	.word	0x0800d83c
 80034a8:	42be0000 	.word	0x42be0000
 80034ac:	20000970 	.word	0x20000970
 80034b0:	20000824 	.word	0x20000824
 80034b4:	200007e0 	.word	0x200007e0
 80034b8:	0800d894 	.word	0x0800d894
 80034bc:	0800d8d0 	.word	0x0800d8d0
 80034c0:	0800d908 	.word	0x0800d908
 80034c4:	20000000 	.word	0x20000000
 80034c8:	0800d920 	.word	0x0800d920
 80034cc:	0800d928 	.word	0x0800d928
					Mode[i] = ModeBuffer[i];
 80034d0:	7bfa      	ldrb	r2, [r7, #15]
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	f107 0118 	add.w	r1, r7, #24
 80034d8:	440a      	add	r2, r1
 80034da:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 80034de:	4a15      	ldr	r2, [pc, #84]	; (8003534 <SelecMode+0x354>)
 80034e0:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < 6; i++) { //恢复模式缓存区原本的信息
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	3301      	adds	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d9f0      	bls.n	80034d0 <SelecMode+0x2f0>
				}
				HAL_TIM_Base_Start(&htim5); //重新开始计时
 80034ee:	4812      	ldr	r0, [pc, #72]	; (8003538 <SelecMode+0x358>)
 80034f0:	f003 fff0 	bl	80074d4 <HAL_TIM_Base_Start>
				return;
 80034f4:	e01a      	b.n	800352c <SelecMode+0x34c>
			} else {
				printf("你输入的格式不符合要求，初次设置模式，不能使用取消键!\r\n");
 80034f6:	4811      	ldr	r0, [pc, #68]	; (800353c <SelecMode+0x35c>)
 80034f8:	f006 fd2a 	bl	8009f50 <puts>
				i -= 1; //在初始化选择模式时，不能使用取消键
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	3b01      	subs	r3, #1
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	e005      	b.n	8003510 <SelecMode+0x330>
			}
		} else {
			printf("你输入的格式不符合要求，请输入数字按键!\r\n");
 8003504:	480e      	ldr	r0, [pc, #56]	; (8003540 <SelecMode+0x360>)
 8003506:	f006 fd23 	bl	8009f50 <puts>
			i -= 1;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	3b01      	subs	r3, #1
 800350e:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 6; i++) {
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	3301      	adds	r3, #1
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b05      	cmp	r3, #5
 800351a:	f77f ae89 	ble.w	8003230 <SelecMode+0x50>
		}
	}
	HAL_TIM_Base_Stop_IT(&htim1);     //停止定时器更新时、产生中断
 800351e:	4809      	ldr	r0, [pc, #36]	; (8003544 <SelecMode+0x364>)
 8003520:	f004 f8d8 	bl	80076d4 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim1, TIM_CHANNEL_1);    //关闭输入捕获中断
 8003524:	2100      	movs	r1, #0
 8003526:	4807      	ldr	r0, [pc, #28]	; (8003544 <SelecMode+0x364>)
 8003528:	f004 fa74 	bl	8007a14 <HAL_TIM_IC_Stop_IT>
}
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	bd90      	pop	{r4, r7, pc}
 8003532:	bf00      	nop
 8003534:	200007c0 	.word	0x200007c0
 8003538:	20000970 	.word	0x20000970
 800353c:	0800d930 	.word	0x0800d930
 8003540:	0800d984 	.word	0x0800d984
 8003544:	20000a00 	.word	0x20000a00

08003548 <app_main_init>:

//初始化函数
void app_main_init(void) {
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
	//OLED初始化
	ssd1306_Init();
 800354c:	f7fd fd7c 	bl	8001048 <ssd1306_Init>
	ssd1306_Fill(Black);
 8003550:	2000      	movs	r0, #0
 8003552:	f7fd fde3 	bl	800111c <ssd1306_Fill>

	//PCA9685初始化,将通道一和通道二(本次需要使用这两个通道)的角度初始化
	PCA9685_Init(&hi2c1);
 8003556:	480a      	ldr	r0, [pc, #40]	; (8003580 <app_main_init+0x38>)
 8003558:	f7fe fa3a 	bl	80019d0 <PCA9685_Init>

	//显示信息
	ShowString();
 800355c:	f7fe fffc 	bl	8002558 <ShowString>
	//选择模式
	SelecMode(1);
 8003560:	2001      	movs	r0, #1
 8003562:	f7ff fe3d 	bl	80031e0 <SelecMode>

	//PID初始化, 并设定预设球位置
	PID_Init(&pid_X);
 8003566:	4807      	ldr	r0, [pc, #28]	; (8003584 <app_main_init+0x3c>)
 8003568:	f7fe fa48 	bl	80019fc <PID_Init>
	PID_Init(&pid_Y);
 800356c:	4806      	ldr	r0, [pc, #24]	; (8003588 <app_main_init+0x40>)
 800356e:	f7fe fa45 	bl	80019fc <PID_Init>

	HAL_Delay(500);   //延时0.5s用于舵机调整角度
 8003572:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003576:	f000 ffef 	bl	8004558 <HAL_Delay>
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	200008c4 	.word	0x200008c4
 8003584:	20000824 	.word	0x20000824
 8003588:	200007e0 	.word	0x200007e0

0800358c <app_main>:

//主程序函数
void app_main(void) {
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
	if (Mode[0] == STABLE) {
 8003590:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <app_main+0x30>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b10      	cmp	r3, #16
 8003596:	d102      	bne.n	800359e <app_main+0x12>
		ModeStable();
 8003598:	f7ff fb7e 	bl	8002c98 <ModeStable>
	} else if (Mode[0] == MOVE) {
		ModeMove();
	} else if (Mode[0] == ROUND) {
		ModeRound();
	}
}
 800359c:	e00c      	b.n	80035b8 <app_main+0x2c>
	} else if (Mode[0] == MOVE) {
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <app_main+0x30>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b4a      	cmp	r3, #74	; 0x4a
 80035a4:	d102      	bne.n	80035ac <app_main+0x20>
		ModeMove();
 80035a6:	f7ff fbcf 	bl	8002d48 <ModeMove>
}
 80035aa:	e005      	b.n	80035b8 <app_main+0x2c>
	} else if (Mode[0] == ROUND) {
 80035ac:	4b03      	ldr	r3, [pc, #12]	; (80035bc <app_main+0x30>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b5a      	cmp	r3, #90	; 0x5a
 80035b2:	d101      	bne.n	80035b8 <app_main+0x2c>
		ModeRound();
 80035b4:	f7ff fcc2 	bl	8002f3c <ModeRound>
}
 80035b8:	bf00      	nop
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	200007c0 	.word	0x200007c0

080035c0 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 80035c8:	bf00      	nop
 80035ca:	4b08      	ldr	r3, [pc, #32]	; (80035ec <__io_putchar+0x2c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f9      	beq.n	80035ca <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4b04      	ldr	r3, [pc, #16]	; (80035ec <__io_putchar+0x2c>)
 80035dc:	605a      	str	r2, [r3, #4]

	//  while ((USART2->SR & 0X40) == 0) {
	//  }; //循环发送,直到发送完毕
	//  USART2->DR = (uint8_t) ch;

	return ch;
 80035de:	687b      	ldr	r3, [r7, #4]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	40011000 	.word	0x40011000

080035f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	607b      	str	r3, [r7, #4]
 80035fa:	4b0c      	ldr	r3, [pc, #48]	; (800362c <MX_DMA_Init+0x3c>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	4a0b      	ldr	r2, [pc, #44]	; (800362c <MX_DMA_Init+0x3c>)
 8003600:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003604:	6313      	str	r3, [r2, #48]	; 0x30
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <MX_DMA_Init+0x3c>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360e:	607b      	str	r3, [r7, #4]
 8003610:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003612:	2200      	movs	r2, #0
 8003614:	2100      	movs	r1, #0
 8003616:	203a      	movs	r0, #58	; 0x3a
 8003618:	f001 f89d 	bl	8004756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800361c:	203a      	movs	r0, #58	; 0x3a
 800361e:	f001 f8b6 	bl	800478e <HAL_NVIC_EnableIRQ>

}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800

08003630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08c      	sub	sp, #48	; 0x30
 8003634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003636:	f107 031c 	add.w	r3, r7, #28
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	609a      	str	r2, [r3, #8]
 8003642:	60da      	str	r2, [r3, #12]
 8003644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	4b6a      	ldr	r3, [pc, #424]	; (80037f4 <MX_GPIO_Init+0x1c4>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	4a69      	ldr	r2, [pc, #420]	; (80037f4 <MX_GPIO_Init+0x1c4>)
 8003650:	f043 0310 	orr.w	r3, r3, #16
 8003654:	6313      	str	r3, [r2, #48]	; 0x30
 8003656:	4b67      	ldr	r3, [pc, #412]	; (80037f4 <MX_GPIO_Init+0x1c4>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	4b63      	ldr	r3, [pc, #396]	; (80037f4 <MX_GPIO_Init+0x1c4>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	4a62      	ldr	r2, [pc, #392]	; (80037f4 <MX_GPIO_Init+0x1c4>)
 800366c:	f043 0320 	orr.w	r3, r3, #32
 8003670:	6313      	str	r3, [r2, #48]	; 0x30
 8003672:	4b60      	ldr	r3, [pc, #384]	; (80037f4 <MX_GPIO_Init+0x1c4>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	4b5c      	ldr	r3, [pc, #368]	; (80037f4 <MX_GPIO_Init+0x1c4>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	4a5b      	ldr	r2, [pc, #364]	; (80037f4 <MX_GPIO_Init+0x1c4>)
 8003688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800368c:	6313      	str	r3, [r2, #48]	; 0x30
 800368e:	4b59      	ldr	r3, [pc, #356]	; (80037f4 <MX_GPIO_Init+0x1c4>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	4b55      	ldr	r3, [pc, #340]	; (80037f4 <MX_GPIO_Init+0x1c4>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	4a54      	ldr	r2, [pc, #336]	; (80037f4 <MX_GPIO_Init+0x1c4>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	6313      	str	r3, [r2, #48]	; 0x30
 80036aa:	4b52      	ldr	r3, [pc, #328]	; (80037f4 <MX_GPIO_Init+0x1c4>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	4b4e      	ldr	r3, [pc, #312]	; (80037f4 <MX_GPIO_Init+0x1c4>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	4a4d      	ldr	r2, [pc, #308]	; (80037f4 <MX_GPIO_Init+0x1c4>)
 80036c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036c4:	6313      	str	r3, [r2, #48]	; 0x30
 80036c6:	4b4b      	ldr	r3, [pc, #300]	; (80037f4 <MX_GPIO_Init+0x1c4>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	607b      	str	r3, [r7, #4]
 80036d6:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <MX_GPIO_Init+0x1c4>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	4a46      	ldr	r2, [pc, #280]	; (80037f4 <MX_GPIO_Init+0x1c4>)
 80036dc:	f043 0302 	orr.w	r3, r3, #2
 80036e0:	6313      	str	r3, [r2, #48]	; 0x30
 80036e2:	4b44      	ldr	r3, [pc, #272]	; (80037f4 <MX_GPIO_Init+0x1c4>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	607b      	str	r3, [r7, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_Res_GPIO_Port, OLED_Res_Pin, GPIO_PIN_SET);
 80036ee:	2201      	movs	r2, #1
 80036f0:	2104      	movs	r1, #4
 80036f2:	4841      	ldr	r0, [pc, #260]	; (80037f8 <MX_GPIO_Init+0x1c8>)
 80036f4:	f001 fe1c 	bl	8005330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_DC_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 80036f8:	2200      	movs	r2, #0
 80036fa:	2118      	movs	r1, #24
 80036fc:	483e      	ldr	r0, [pc, #248]	; (80037f8 <MX_GPIO_Init+0x1c8>)
 80036fe:	f001 fe17 	bl	8005330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8003702:	2200      	movs	r2, #0
 8003704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003708:	483c      	ldr	r0, [pc, #240]	; (80037fc <MX_GPIO_Init+0x1cc>)
 800370a:	f001 fe11 	bl	8005330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin, GPIO_PIN_RESET);
 800370e:	2200      	movs	r2, #0
 8003710:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8003714:	483a      	ldr	r0, [pc, #232]	; (8003800 <MX_GPIO_Init+0x1d0>)
 8003716:	f001 fe0b 	bl	8005330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_Res_Pin;
 800371a:	2304      	movs	r3, #4
 800371c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800371e:	2301      	movs	r3, #1
 8003720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003722:	2301      	movs	r3, #1
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003726:	2300      	movs	r3, #0
 8003728:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OLED_Res_GPIO_Port, &GPIO_InitStruct);
 800372a:	f107 031c 	add.w	r3, r7, #28
 800372e:	4619      	mov	r1, r3
 8003730:	4831      	ldr	r0, [pc, #196]	; (80037f8 <MX_GPIO_Init+0x1c8>)
 8003732:	f001 fc49 	bl	8004fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8003736:	2308      	movs	r3, #8
 8003738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800373a:	2301      	movs	r3, #1
 800373c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373e:	2300      	movs	r3, #0
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003742:	2300      	movs	r3, #0
 8003744:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8003746:	f107 031c 	add.w	r3, r7, #28
 800374a:	4619      	mov	r1, r3
 800374c:	482a      	ldr	r0, [pc, #168]	; (80037f8 <MX_GPIO_Init+0x1c8>)
 800374e:	f001 fc3b 	bl	8004fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8003752:	2310      	movs	r3, #16
 8003754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003756:	2301      	movs	r3, #1
 8003758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800375a:	2302      	movs	r3, #2
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375e:	2300      	movs	r3, #0
 8003760:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8003762:	f107 031c 	add.w	r3, r7, #28
 8003766:	4619      	mov	r1, r3
 8003768:	4823      	ldr	r0, [pc, #140]	; (80037f8 <MX_GPIO_Init+0x1c8>)
 800376a:	f001 fc2d 	bl	8004fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 800376e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003774:	2301      	movs	r3, #1
 8003776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003778:	2302      	movs	r3, #2
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800377c:	2302      	movs	r3, #2
 800377e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 8003780:	f107 031c 	add.w	r3, r7, #28
 8003784:	4619      	mov	r1, r3
 8003786:	481d      	ldr	r0, [pc, #116]	; (80037fc <MX_GPIO_Init+0x1cc>)
 8003788:	f001 fc1e 	bl	8004fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KY_UP_Pin;
 800378c:	2301      	movs	r3, #1
 800378e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003790:	4b1c      	ldr	r3, [pc, #112]	; (8003804 <MX_GPIO_Init+0x1d4>)
 8003792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003794:	2302      	movs	r3, #2
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KY_UP_GPIO_Port, &GPIO_InitStruct);
 8003798:	f107 031c 	add.w	r3, r7, #28
 800379c:	4619      	mov	r1, r3
 800379e:	481a      	ldr	r0, [pc, #104]	; (8003808 <MX_GPIO_Init+0x1d8>)
 80037a0:	f001 fc12 	bl	8004fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = Row4_Pin|Row3_Pin|Row2_Pin|Row1_Pin;
 80037a4:	233c      	movs	r3, #60	; 0x3c
 80037a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037a8:	2300      	movs	r3, #0
 80037aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037ac:	2301      	movs	r3, #1
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037b0:	f107 031c 	add.w	r3, r7, #28
 80037b4:	4619      	mov	r1, r3
 80037b6:	4812      	ldr	r0, [pc, #72]	; (8003800 <MX_GPIO_Init+0x1d0>)
 80037b8:	f001 fc06 	bl	8004fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin;
 80037bc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80037c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c2:	2301      	movs	r3, #1
 80037c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037c6:	2302      	movs	r3, #2
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037ca:	2302      	movs	r3, #2
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037ce:	f107 031c 	add.w	r3, r7, #28
 80037d2:	4619      	mov	r1, r3
 80037d4:	480a      	ldr	r0, [pc, #40]	; (8003800 <MX_GPIO_Init+0x1d0>)
 80037d6:	f001 fbf7 	bl	8004fc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 80037da:	2200      	movs	r2, #0
 80037dc:	2102      	movs	r1, #2
 80037de:	2006      	movs	r0, #6
 80037e0:	f000 ffb9 	bl	8004756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80037e4:	2006      	movs	r0, #6
 80037e6:	f000 ffd2 	bl	800478e <HAL_NVIC_EnableIRQ>

}
 80037ea:	bf00      	nop
 80037ec:	3730      	adds	r7, #48	; 0x30
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40021400 	.word	0x40021400
 8003800:	40021800 	.word	0x40021800
 8003804:	10110000 	.word	0x10110000
 8003808:	40020000 	.word	0x40020000

0800380c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003810:	4b12      	ldr	r3, [pc, #72]	; (800385c <MX_I2C1_Init+0x50>)
 8003812:	4a13      	ldr	r2, [pc, #76]	; (8003860 <MX_I2C1_Init+0x54>)
 8003814:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003816:	4b11      	ldr	r3, [pc, #68]	; (800385c <MX_I2C1_Init+0x50>)
 8003818:	4a12      	ldr	r2, [pc, #72]	; (8003864 <MX_I2C1_Init+0x58>)
 800381a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <MX_I2C1_Init+0x50>)
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003822:	4b0e      	ldr	r3, [pc, #56]	; (800385c <MX_I2C1_Init+0x50>)
 8003824:	2200      	movs	r2, #0
 8003826:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <MX_I2C1_Init+0x50>)
 800382a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800382e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <MX_I2C1_Init+0x50>)
 8003832:	2200      	movs	r2, #0
 8003834:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <MX_I2C1_Init+0x50>)
 8003838:	2200      	movs	r2, #0
 800383a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 800383c:	4b07      	ldr	r3, [pc, #28]	; (800385c <MX_I2C1_Init+0x50>)
 800383e:	2240      	movs	r2, #64	; 0x40
 8003840:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <MX_I2C1_Init+0x50>)
 8003844:	2200      	movs	r2, #0
 8003846:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003848:	4804      	ldr	r0, [pc, #16]	; (800385c <MX_I2C1_Init+0x50>)
 800384a:	f001 fdaf 	bl	80053ac <HAL_I2C_Init>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003854:	f000 f8d8 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003858:	bf00      	nop
 800385a:	bd80      	pop	{r7, pc}
 800385c:	200008c4 	.word	0x200008c4
 8003860:	40005400 	.word	0x40005400
 8003864:	00061a80 	.word	0x00061a80

08003868 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a19      	ldr	r2, [pc, #100]	; (80038ec <HAL_I2C_MspInit+0x84>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d12c      	bne.n	80038e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	4b18      	ldr	r3, [pc, #96]	; (80038f0 <HAL_I2C_MspInit+0x88>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	4a17      	ldr	r2, [pc, #92]	; (80038f0 <HAL_I2C_MspInit+0x88>)
 8003894:	f043 0302 	orr.w	r3, r3, #2
 8003898:	6313      	str	r3, [r2, #48]	; 0x30
 800389a:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <HAL_I2C_MspInit+0x88>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038ac:	2312      	movs	r3, #18
 80038ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038b0:	2301      	movs	r3, #1
 80038b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b4:	2303      	movs	r3, #3
 80038b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038b8:	2304      	movs	r3, #4
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038bc:	f107 0314 	add.w	r3, r7, #20
 80038c0:	4619      	mov	r1, r3
 80038c2:	480c      	ldr	r0, [pc, #48]	; (80038f4 <HAL_I2C_MspInit+0x8c>)
 80038c4:	f001 fb80 	bl	8004fc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038c8:	2300      	movs	r3, #0
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <HAL_I2C_MspInit+0x88>)
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <HAL_I2C_MspInit+0x88>)
 80038d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038d6:	6413      	str	r3, [r2, #64]	; 0x40
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <HAL_I2C_MspInit+0x88>)
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80038e4:	bf00      	nop
 80038e6:	3728      	adds	r7, #40	; 0x28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40005400 	.word	0x40005400
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40020400 	.word	0x40020400

080038f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038fc:	f000 fdba 	bl	8004474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003900:	f000 f818 	bl	8003934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003904:	f7ff fe94 	bl	8003630 <MX_GPIO_Init>
  MX_DMA_Init();
 8003908:	f7ff fe72 	bl	80035f0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800390c:	f000 fccc 	bl	80042a8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003910:	f7ff ff7c 	bl	800380c <MX_I2C1_Init>
  MX_TIM2_Init();
 8003914:	f000 fb34 	bl	8003f80 <MX_TIM2_Init>
  MX_TIM5_Init();
 8003918:	f000 fbce 	bl	80040b8 <MX_TIM5_Init>
  MX_SPI1_Init();
 800391c:	f000 f87a 	bl	8003a14 <MX_SPI1_Init>
  MX_TIM1_Init();
 8003920:	f000 fad8 	bl	8003ed4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003924:	f000 fb7a 	bl	800401c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	app_main_init();
 8003928:	f7ff fe0e 	bl	8003548 <app_main_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		app_main();
 800392c:	f7ff fe2e 	bl	800358c <app_main>
 8003930:	e7fc      	b.n	800392c <main+0x34>
	...

08003934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b094      	sub	sp, #80	; 0x50
 8003938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800393a:	f107 0320 	add.w	r3, r7, #32
 800393e:	2230      	movs	r2, #48	; 0x30
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f005 fe0c 	bl	8009560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003948:	f107 030c 	add.w	r3, r7, #12
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003958:	2300      	movs	r3, #0
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	4b28      	ldr	r3, [pc, #160]	; (8003a00 <SystemClock_Config+0xcc>)
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	4a27      	ldr	r2, [pc, #156]	; (8003a00 <SystemClock_Config+0xcc>)
 8003962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003966:	6413      	str	r3, [r2, #64]	; 0x40
 8003968:	4b25      	ldr	r3, [pc, #148]	; (8003a00 <SystemClock_Config+0xcc>)
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003974:	2300      	movs	r3, #0
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <SystemClock_Config+0xd0>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a21      	ldr	r2, [pc, #132]	; (8003a04 <SystemClock_Config+0xd0>)
 800397e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	4b1f      	ldr	r3, [pc, #124]	; (8003a04 <SystemClock_Config+0xd0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398c:	607b      	str	r3, [r7, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003990:	2301      	movs	r3, #1
 8003992:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003994:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800399a:	2302      	movs	r3, #2
 800399c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800399e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80039a4:	2304      	movs	r3, #4
 80039a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80039a8:	23a8      	movs	r3, #168	; 0xa8
 80039aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039ac:	2302      	movs	r3, #2
 80039ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80039b0:	2304      	movs	r3, #4
 80039b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039b4:	f107 0320 	add.w	r3, r7, #32
 80039b8:	4618      	mov	r0, r3
 80039ba:	f002 fe37 	bl	800662c <HAL_RCC_OscConfig>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80039c4:	f000 f820 	bl	8003a08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039c8:	230f      	movs	r3, #15
 80039ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039cc:	2302      	movs	r3, #2
 80039ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80039d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80039d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80039e0:	f107 030c 	add.w	r3, r7, #12
 80039e4:	2105      	movs	r1, #5
 80039e6:	4618      	mov	r0, r3
 80039e8:	f003 f898 	bl	8006b1c <HAL_RCC_ClockConfig>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80039f2:	f000 f809 	bl	8003a08 <Error_Handler>
  }
}
 80039f6:	bf00      	nop
 80039f8:	3750      	adds	r7, #80	; 0x50
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40007000 	.word	0x40007000

08003a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a0c:	b672      	cpsid	i
}
 8003a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003a10:	e7fe      	b.n	8003a10 <Error_Handler+0x8>
	...

08003a14 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003a18:	4b17      	ldr	r3, [pc, #92]	; (8003a78 <MX_SPI1_Init+0x64>)
 8003a1a:	4a18      	ldr	r2, [pc, #96]	; (8003a7c <MX_SPI1_Init+0x68>)
 8003a1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a1e:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <MX_SPI1_Init+0x64>)
 8003a20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a26:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <MX_SPI1_Init+0x64>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a2c:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <MX_SPI1_Init+0x64>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <MX_SPI1_Init+0x64>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a38:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <MX_SPI1_Init+0x64>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <MX_SPI1_Init+0x64>)
 8003a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <MX_SPI1_Init+0x64>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <MX_SPI1_Init+0x64>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a52:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <MX_SPI1_Init+0x64>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a58:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <MX_SPI1_Init+0x64>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <MX_SPI1_Init+0x64>)
 8003a60:	220a      	movs	r2, #10
 8003a62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a64:	4804      	ldr	r0, [pc, #16]	; (8003a78 <MX_SPI1_Init+0x64>)
 8003a66:	f003 fa55 	bl	8006f14 <HAL_SPI_Init>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003a70:	f7ff ffca 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a74:	bf00      	nop
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000918 	.word	0x20000918
 8003a7c:	40013000 	.word	0x40013000

08003a80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08a      	sub	sp, #40	; 0x28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a88:	f107 0314 	add.w	r3, r7, #20
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	609a      	str	r2, [r3, #8]
 8003a94:	60da      	str	r2, [r3, #12]
 8003a96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a28      	ldr	r2, [pc, #160]	; (8003b40 <HAL_SPI_MspInit+0xc0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d149      	bne.n	8003b36 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	4b27      	ldr	r3, [pc, #156]	; (8003b44 <HAL_SPI_MspInit+0xc4>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	4a26      	ldr	r2, [pc, #152]	; (8003b44 <HAL_SPI_MspInit+0xc4>)
 8003aac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ab2:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <HAL_SPI_MspInit+0xc4>)
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	4b20      	ldr	r3, [pc, #128]	; (8003b44 <HAL_SPI_MspInit+0xc4>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	4a1f      	ldr	r2, [pc, #124]	; (8003b44 <HAL_SPI_MspInit+0xc4>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ace:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <HAL_SPI_MspInit+0xc4>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_SPI_MspInit+0xc4>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <HAL_SPI_MspInit+0xc4>)
 8003ae4:	f043 0302 	orr.w	r3, r3, #2
 8003ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aea:	4b16      	ldr	r3, [pc, #88]	; (8003b44 <HAL_SPI_MspInit+0xc4>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003af6:	2320      	movs	r3, #32
 8003af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afa:	2302      	movs	r3, #2
 8003afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b02:	2303      	movs	r3, #3
 8003b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b06:	2305      	movs	r3, #5
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0a:	f107 0314 	add.w	r3, r7, #20
 8003b0e:	4619      	mov	r1, r3
 8003b10:	480d      	ldr	r0, [pc, #52]	; (8003b48 <HAL_SPI_MspInit+0xc8>)
 8003b12:	f001 fa59 	bl	8004fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003b16:	2330      	movs	r3, #48	; 0x30
 8003b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b22:	2303      	movs	r3, #3
 8003b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b26:	2305      	movs	r3, #5
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b2a:	f107 0314 	add.w	r3, r7, #20
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4806      	ldr	r0, [pc, #24]	; (8003b4c <HAL_SPI_MspInit+0xcc>)
 8003b32:	f001 fa49 	bl	8004fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003b36:	bf00      	nop
 8003b38:	3728      	adds	r7, #40	; 0x28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40013000 	.word	0x40013000
 8003b44:	40023800 	.word	0x40023800
 8003b48:	40020000 	.word	0x40020000
 8003b4c:	40020400 	.word	0x40020400

08003b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	607b      	str	r3, [r7, #4]
 8003b5a:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <HAL_MspInit+0x4c>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	4a0f      	ldr	r2, [pc, #60]	; (8003b9c <HAL_MspInit+0x4c>)
 8003b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b64:	6453      	str	r3, [r2, #68]	; 0x44
 8003b66:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <HAL_MspInit+0x4c>)
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6e:	607b      	str	r3, [r7, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	603b      	str	r3, [r7, #0]
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_MspInit+0x4c>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	4a08      	ldr	r2, [pc, #32]	; (8003b9c <HAL_MspInit+0x4c>)
 8003b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b80:	6413      	str	r3, [r2, #64]	; 0x40
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <HAL_MspInit+0x4c>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40023800 	.word	0x40023800

08003ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003ba4:	e7fe      	b.n	8003ba4 <NMI_Handler+0x4>

08003ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003baa:	e7fe      	b.n	8003baa <HardFault_Handler+0x4>

08003bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bb0:	e7fe      	b.n	8003bb0 <MemManage_Handler+0x4>

08003bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bb6:	e7fe      	b.n	8003bb6 <BusFault_Handler+0x4>

08003bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bbc:	e7fe      	b.n	8003bbc <UsageFault_Handler+0x4>

08003bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bd0:	bf00      	nop
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bec:	f000 fc94 	bl	8004518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bf0:	bf00      	nop
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003bf4:	b590      	push	{r4, r7, lr}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	f001 fbb2 	bl	8005364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	HAL_Delay(20);
 8003c00:	2014      	movs	r0, #20
 8003c02:	f000 fca9 	bl	8004558 <HAL_Delay>
	if (KY_UP == GPIO_PIN_SET) {
 8003c06:	2101      	movs	r1, #1
 8003c08:	4825      	ldr	r0, [pc, #148]	; (8003ca0 <EXTI0_IRQHandler+0xac>)
 8003c0a:	f001 fb79 	bl	8005300 <HAL_GPIO_ReadPin>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d140      	bne.n	8003c96 <EXTI0_IRQHandler+0xa2>
		HAL_TIM_Base_Stop(&htim5);
 8003c14:	4823      	ldr	r0, [pc, #140]	; (8003ca4 <EXTI0_IRQHandler+0xb0>)
 8003c16:	f003 fcc5 	bl	80075a4 <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 8003c1a:	4b22      	ldr	r3, [pc, #136]	; (8003ca4 <EXTI0_IRQHandler+0xb0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24
		ssd1306_SetCursor(88, 35);
 8003c22:	2123      	movs	r1, #35	; 0x23
 8003c24:	2058      	movs	r0, #88	; 0x58
 8003c26:	f7fd fbd3 	bl	80013d0 <ssd1306_SetCursor>
		ssd1306_WriteString("      ", Font_6x8, White);
 8003c2a:	4a1f      	ldr	r2, [pc, #124]	; (8003ca8 <EXTI0_IRQHandler+0xb4>)
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	ca06      	ldmia	r2, {r1, r2}
 8003c30:	481e      	ldr	r0, [pc, #120]	; (8003cac <EXTI0_IRQHandler+0xb8>)
 8003c32:	f7fd fba7 	bl	8001384 <ssd1306_WriteString>
		ssd1306_SetCursor(88, 44);
 8003c36:	212c      	movs	r1, #44	; 0x2c
 8003c38:	2058      	movs	r0, #88	; 0x58
 8003c3a:	f7fd fbc9 	bl	80013d0 <ssd1306_SetCursor>
		ssd1306_WriteString("      ", Font_6x8, White);
 8003c3e:	4a1a      	ldr	r2, [pc, #104]	; (8003ca8 <EXTI0_IRQHandler+0xb4>)
 8003c40:	2301      	movs	r3, #1
 8003c42:	ca06      	ldmia	r2, {r1, r2}
 8003c44:	4819      	ldr	r0, [pc, #100]	; (8003cac <EXTI0_IRQHandler+0xb8>)
 8003c46:	f7fd fb9d 	bl	8001384 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8003c4a:	f7fd fa8b 	bl	8001164 <ssd1306_UpdateScreen>
		//让舵机角度再次回到初始值
		PCA9685_SetServoAngle(0, 90);
 8003c4e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8003cb0 <EXTI0_IRQHandler+0xbc>
 8003c52:	2000      	movs	r0, #0
 8003c54:	f7fd fe60 	bl	8001918 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(1, 90);
 8003c58:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8003cb0 <EXTI0_IRQHandler+0xbc>
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f7fd fe5b 	bl	8001918 <PCA9685_SetServoAngle>
		PID_Reset();
 8003c62:	f7fe f89d 	bl	8001da0 <PID_Reset>
		//使用矩形键盘设置模式
		SelecMode(0);
 8003c66:	2000      	movs	r0, #0
 8003c68:	f7ff faba 	bl	80031e0 <SelecMode>
		printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3],
 8003c6c:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <EXTI0_IRQHandler+0xc0>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	4619      	mov	r1, r3
 8003c72:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <EXTI0_IRQHandler+0xc0>)
 8003c74:	785b      	ldrb	r3, [r3, #1]
 8003c76:	4618      	mov	r0, r3
 8003c78:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <EXTI0_IRQHandler+0xc0>)
 8003c7a:	789b      	ldrb	r3, [r3, #2]
 8003c7c:	461c      	mov	r4, r3
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <EXTI0_IRQHandler+0xc0>)
 8003c80:	78db      	ldrb	r3, [r3, #3]
 8003c82:	461a      	mov	r2, r3
				Mode[4]);
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <EXTI0_IRQHandler+0xc0>)
 8003c86:	791b      	ldrb	r3, [r3, #4]
		printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3],
 8003c88:	9301      	str	r3, [sp, #4]
 8003c8a:	9200      	str	r2, [sp, #0]
 8003c8c:	4623      	mov	r3, r4
 8003c8e:	4602      	mov	r2, r0
 8003c90:	4809      	ldr	r0, [pc, #36]	; (8003cb8 <EXTI0_IRQHandler+0xc4>)
 8003c92:	f006 f8d7 	bl	8009e44 <iprintf>
	}
  /* USER CODE END EXTI0_IRQn 1 */
}
 8003c96:	bf00      	nop
 8003c98:	3704      	adds	r7, #4
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd90      	pop	{r4, r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40020000 	.word	0x40020000
 8003ca4:	20000970 	.word	0x20000970
 8003ca8:	20000000 	.word	0x20000000
 8003cac:	0800d9c0 	.word	0x0800d9c0
 8003cb0:	42b40000 	.word	0x42b40000
 8003cb4:	200007c0 	.word	0x200007c0
 8003cb8:	0800d9c8 	.word	0x0800d9c8

08003cbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cc0:	4802      	ldr	r0, [pc, #8]	; (8003ccc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003cc2:	f003 ff4f 	bl	8007b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003cc6:	bf00      	nop
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000a00 	.word	0x20000a00

08003cd0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cd4:	4802      	ldr	r0, [pc, #8]	; (8003ce0 <TIM1_CC_IRQHandler+0x10>)
 8003cd6:	f003 ff45 	bl	8007b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003cda:	bf00      	nop
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000a00 	.word	0x20000a00

08003ce4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ce8:	4802      	ldr	r0, [pc, #8]	; (8003cf4 <TIM2_IRQHandler+0x10>)
 8003cea:	f003 ff3b 	bl	8007b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003cee:	bf00      	nop
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000a48 	.word	0x20000a48

08003cf8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003cfc:	4803      	ldr	r0, [pc, #12]	; (8003d0c <USART1_IRQHandler+0x14>)
 8003cfe:	f004 fde5 	bl	80088cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	// 新添加的函数，用来处理串口空闲中断
	USER_UART_IRQHandler(&huart1);
 8003d02:	4802      	ldr	r0, [pc, #8]	; (8003d0c <USART1_IRQHandler+0x14>)
 8003d04:	f7fe faae 	bl	8002264 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8003d08:	bf00      	nop
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000af0 	.word	0x20000af0

08003d10 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003d14:	4802      	ldr	r0, [pc, #8]	; (8003d20 <DMA2_Stream2_IRQHandler+0x10>)
 8003d16:	f000 feed 	bl	8004af4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000a90 	.word	0x20000a90

08003d24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
	return 1;
 8003d28:	2301      	movs	r3, #1
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <_kill>:

int _kill(int pid, int sig)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d3e:	f005 fbd7 	bl	80094f0 <__errno>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2216      	movs	r2, #22
 8003d46:	601a      	str	r2, [r3, #0]
	return -1;
 8003d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <_exit>:

void _exit (int status)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ffe7 	bl	8003d34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d66:	e7fe      	b.n	8003d66 <_exit+0x12>

08003d68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	e00a      	b.n	8003d90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d7a:	f3af 8000 	nop.w
 8003d7e:	4601      	mov	r1, r0
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	60ba      	str	r2, [r7, #8]
 8003d86:	b2ca      	uxtb	r2, r1
 8003d88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	dbf0      	blt.n	8003d7a <_read+0x12>
	}

return len;
 8003d98:	687b      	ldr	r3, [r7, #4]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b086      	sub	sp, #24
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	e009      	b.n	8003dc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	60ba      	str	r2, [r7, #8]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff fbff 	bl	80035c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	dbf1      	blt.n	8003db4 <_write+0x12>
	}
	return len;
 8003dd0:	687b      	ldr	r3, [r7, #4]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <_close>:

int _close(int file)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
	return -1;
 8003de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e02:	605a      	str	r2, [r3, #4]
	return 0;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <_isatty>:

int _isatty(int file)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
	return 1;
 8003e1a:	2301      	movs	r3, #1
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
	return 0;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e4c:	4a14      	ldr	r2, [pc, #80]	; (8003ea0 <_sbrk+0x5c>)
 8003e4e:	4b15      	ldr	r3, [pc, #84]	; (8003ea4 <_sbrk+0x60>)
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e58:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <_sbrk+0x64>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d102      	bne.n	8003e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e60:	4b11      	ldr	r3, [pc, #68]	; (8003ea8 <_sbrk+0x64>)
 8003e62:	4a12      	ldr	r2, [pc, #72]	; (8003eac <_sbrk+0x68>)
 8003e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e66:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <_sbrk+0x64>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d207      	bcs.n	8003e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e74:	f005 fb3c 	bl	80094f0 <__errno>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	220c      	movs	r2, #12
 8003e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e82:	e009      	b.n	8003e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e84:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <_sbrk+0x64>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e8a:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <_sbrk+0x64>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4413      	add	r3, r2
 8003e92:	4a05      	ldr	r2, [pc, #20]	; (8003ea8 <_sbrk+0x64>)
 8003e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e96:	68fb      	ldr	r3, [r7, #12]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20020000 	.word	0x20020000
 8003ea4:	00000400 	.word	0x00000400
 8003ea8:	200007c8 	.word	0x200007c8
 8003eac:	20000b48 	.word	0x20000b48

08003eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003eb4:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <SystemInit+0x20>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	4a05      	ldr	r2, [pc, #20]	; (8003ed0 <SystemInit+0x20>)
 8003ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ec4:	bf00      	nop
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	e000ed00 	.word	0xe000ed00

08003ed4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003eda:	f107 0310 	add.w	r3, r7, #16
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003ee4:	463b      	mov	r3, r7
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	605a      	str	r2, [r3, #4]
 8003eec:	609a      	str	r2, [r3, #8]
 8003eee:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003ef0:	4b21      	ldr	r3, [pc, #132]	; (8003f78 <MX_TIM1_Init+0xa4>)
 8003ef2:	4a22      	ldr	r2, [pc, #136]	; (8003f7c <MX_TIM1_Init+0xa8>)
 8003ef4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8003ef6:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <MX_TIM1_Init+0xa4>)
 8003ef8:	22a7      	movs	r2, #167	; 0xa7
 8003efa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003efc:	4b1e      	ldr	r3, [pc, #120]	; (8003f78 <MX_TIM1_Init+0xa4>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003f02:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <MX_TIM1_Init+0xa4>)
 8003f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f0a:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <MX_TIM1_Init+0xa4>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f10:	4b19      	ldr	r3, [pc, #100]	; (8003f78 <MX_TIM1_Init+0xa4>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f16:	4b18      	ldr	r3, [pc, #96]	; (8003f78 <MX_TIM1_Init+0xa4>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003f1c:	4816      	ldr	r0, [pc, #88]	; (8003f78 <MX_TIM1_Init+0xa4>)
 8003f1e:	f003 fc08 	bl	8007732 <HAL_TIM_IC_Init>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003f28:	f7ff fd6e 	bl	8003a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f34:	f107 0310 	add.w	r3, r7, #16
 8003f38:	4619      	mov	r1, r3
 8003f3a:	480f      	ldr	r0, [pc, #60]	; (8003f78 <MX_TIM1_Init+0xa4>)
 8003f3c:	f004 fb5e 	bl	80085fc <HAL_TIMEx_MasterConfigSynchronization>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003f46:	f7ff fd5f 	bl	8003a08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003f5a:	463b      	mov	r3, r7
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4805      	ldr	r0, [pc, #20]	; (8003f78 <MX_TIM1_Init+0xa4>)
 8003f62:	f003 ff07 	bl	8007d74 <HAL_TIM_IC_ConfigChannel>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8003f6c:	f7ff fd4c 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003f70:	bf00      	nop
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000a00 	.word	0x20000a00
 8003f7c:	40010000 	.word	0x40010000

08003f80 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f86:	f107 0308 	add.w	r3, r7, #8
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	605a      	str	r2, [r3, #4]
 8003f90:	609a      	str	r2, [r3, #8]
 8003f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f94:	463b      	mov	r3, r7
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f9c:	4b1e      	ldr	r3, [pc, #120]	; (8004018 <MX_TIM2_Init+0x98>)
 8003f9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fa2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8003fa4:	4b1c      	ldr	r3, [pc, #112]	; (8004018 <MX_TIM2_Init+0x98>)
 8003fa6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003faa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fac:	4b1a      	ldr	r3, [pc, #104]	; (8004018 <MX_TIM2_Init+0x98>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003fb2:	4b19      	ldr	r3, [pc, #100]	; (8004018 <MX_TIM2_Init+0x98>)
 8003fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fba:	4b17      	ldr	r3, [pc, #92]	; (8004018 <MX_TIM2_Init+0x98>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fc0:	4b15      	ldr	r3, [pc, #84]	; (8004018 <MX_TIM2_Init+0x98>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003fc6:	4814      	ldr	r0, [pc, #80]	; (8004018 <MX_TIM2_Init+0x98>)
 8003fc8:	f003 fa34 	bl	8007434 <HAL_TIM_Base_Init>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003fd2:	f7ff fd19 	bl	8003a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003fdc:	f107 0308 	add.w	r3, r7, #8
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	480d      	ldr	r0, [pc, #52]	; (8004018 <MX_TIM2_Init+0x98>)
 8003fe4:	f003 ff5a 	bl	8007e9c <HAL_TIM_ConfigClockSource>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003fee:	f7ff fd0b 	bl	8003a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ffa:	463b      	mov	r3, r7
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4806      	ldr	r0, [pc, #24]	; (8004018 <MX_TIM2_Init+0x98>)
 8004000:	f004 fafc 	bl	80085fc <HAL_TIMEx_MasterConfigSynchronization>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800400a:	f7ff fcfd 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800400e:	bf00      	nop
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20000a48 	.word	0x20000a48

0800401c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004022:	f107 0308 	add.w	r3, r7, #8
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	605a      	str	r2, [r3, #4]
 800402c:	609a      	str	r2, [r3, #8]
 800402e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004030:	463b      	mov	r3, r7
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004038:	4b1d      	ldr	r3, [pc, #116]	; (80040b0 <MX_TIM3_Init+0x94>)
 800403a:	4a1e      	ldr	r2, [pc, #120]	; (80040b4 <MX_TIM3_Init+0x98>)
 800403c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 800403e:	4b1c      	ldr	r3, [pc, #112]	; (80040b0 <MX_TIM3_Init+0x94>)
 8004040:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004044:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004046:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <MX_TIM3_Init+0x94>)
 8004048:	2200      	movs	r2, #0
 800404a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800404c:	4b18      	ldr	r3, [pc, #96]	; (80040b0 <MX_TIM3_Init+0x94>)
 800404e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004052:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004054:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <MX_TIM3_Init+0x94>)
 8004056:	2200      	movs	r2, #0
 8004058:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800405a:	4b15      	ldr	r3, [pc, #84]	; (80040b0 <MX_TIM3_Init+0x94>)
 800405c:	2280      	movs	r2, #128	; 0x80
 800405e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004060:	4813      	ldr	r0, [pc, #76]	; (80040b0 <MX_TIM3_Init+0x94>)
 8004062:	f003 f9e7 	bl	8007434 <HAL_TIM_Base_Init>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800406c:	f7ff fccc 	bl	8003a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004074:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004076:	f107 0308 	add.w	r3, r7, #8
 800407a:	4619      	mov	r1, r3
 800407c:	480c      	ldr	r0, [pc, #48]	; (80040b0 <MX_TIM3_Init+0x94>)
 800407e:	f003 ff0d 	bl	8007e9c <HAL_TIM_ConfigClockSource>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004088:	f7ff fcbe 	bl	8003a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800408c:	2300      	movs	r3, #0
 800408e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004090:	2300      	movs	r3, #0
 8004092:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004094:	463b      	mov	r3, r7
 8004096:	4619      	mov	r1, r3
 8004098:	4805      	ldr	r0, [pc, #20]	; (80040b0 <MX_TIM3_Init+0x94>)
 800409a:	f004 faaf 	bl	80085fc <HAL_TIMEx_MasterConfigSynchronization>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80040a4:	f7ff fcb0 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80040a8:	bf00      	nop
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	200009b8 	.word	0x200009b8
 80040b4:	40000400 	.word	0x40000400

080040b8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040be:	f107 0308 	add.w	r3, r7, #8
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	605a      	str	r2, [r3, #4]
 80040c8:	609a      	str	r2, [r3, #8]
 80040ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040cc:	463b      	mov	r3, r7
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80040d4:	4b1d      	ldr	r3, [pc, #116]	; (800414c <MX_TIM5_Init+0x94>)
 80040d6:	4a1e      	ldr	r2, [pc, #120]	; (8004150 <MX_TIM5_Init+0x98>)
 80040d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400-1;
 80040da:	4b1c      	ldr	r3, [pc, #112]	; (800414c <MX_TIM5_Init+0x94>)
 80040dc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80040e0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040e2:	4b1a      	ldr	r3, [pc, #104]	; (800414c <MX_TIM5_Init+0x94>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80040e8:	4b18      	ldr	r3, [pc, #96]	; (800414c <MX_TIM5_Init+0x94>)
 80040ea:	f04f 32ff 	mov.w	r2, #4294967295
 80040ee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040f0:	4b16      	ldr	r3, [pc, #88]	; (800414c <MX_TIM5_Init+0x94>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040f6:	4b15      	ldr	r3, [pc, #84]	; (800414c <MX_TIM5_Init+0x94>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80040fc:	4813      	ldr	r0, [pc, #76]	; (800414c <MX_TIM5_Init+0x94>)
 80040fe:	f003 f999 	bl	8007434 <HAL_TIM_Base_Init>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004108:	f7ff fc7e 	bl	8003a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800410c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004110:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004112:	f107 0308 	add.w	r3, r7, #8
 8004116:	4619      	mov	r1, r3
 8004118:	480c      	ldr	r0, [pc, #48]	; (800414c <MX_TIM5_Init+0x94>)
 800411a:	f003 febf 	bl	8007e9c <HAL_TIM_ConfigClockSource>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004124:	f7ff fc70 	bl	8003a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004128:	2300      	movs	r3, #0
 800412a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800412c:	2300      	movs	r3, #0
 800412e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004130:	463b      	mov	r3, r7
 8004132:	4619      	mov	r1, r3
 8004134:	4805      	ldr	r0, [pc, #20]	; (800414c <MX_TIM5_Init+0x94>)
 8004136:	f004 fa61 	bl	80085fc <HAL_TIMEx_MasterConfigSynchronization>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004140:	f7ff fc62 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004144:	bf00      	nop
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	20000970 	.word	0x20000970
 8004150:	40000c00 	.word	0x40000c00

08004154 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08a      	sub	sp, #40	; 0x28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800415c:	f107 0314 	add.w	r3, r7, #20
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	609a      	str	r2, [r3, #8]
 8004168:	60da      	str	r2, [r3, #12]
 800416a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a21      	ldr	r2, [pc, #132]	; (80041f8 <HAL_TIM_IC_MspInit+0xa4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d13c      	bne.n	80041f0 <HAL_TIM_IC_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004176:	2300      	movs	r3, #0
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	4b20      	ldr	r3, [pc, #128]	; (80041fc <HAL_TIM_IC_MspInit+0xa8>)
 800417c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417e:	4a1f      	ldr	r2, [pc, #124]	; (80041fc <HAL_TIM_IC_MspInit+0xa8>)
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	6453      	str	r3, [r2, #68]	; 0x44
 8004186:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <HAL_TIM_IC_MspInit+0xa8>)
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	613b      	str	r3, [r7, #16]
 8004190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	4b19      	ldr	r3, [pc, #100]	; (80041fc <HAL_TIM_IC_MspInit+0xa8>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	4a18      	ldr	r2, [pc, #96]	; (80041fc <HAL_TIM_IC_MspInit+0xa8>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6313      	str	r3, [r2, #48]	; 0x30
 80041a2:	4b16      	ldr	r3, [pc, #88]	; (80041fc <HAL_TIM_IC_MspInit+0xa8>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b4:	2302      	movs	r3, #2
 80041b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041bc:	2300      	movs	r3, #0
 80041be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80041c0:	2301      	movs	r3, #1
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c4:	f107 0314 	add.w	r3, r7, #20
 80041c8:	4619      	mov	r1, r3
 80041ca:	480d      	ldr	r0, [pc, #52]	; (8004200 <HAL_TIM_IC_MspInit+0xac>)
 80041cc:	f000 fefc 	bl	8004fc8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80041d0:	2200      	movs	r2, #0
 80041d2:	2101      	movs	r1, #1
 80041d4:	2019      	movs	r0, #25
 80041d6:	f000 fabe 	bl	8004756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80041da:	2019      	movs	r0, #25
 80041dc:	f000 fad7 	bl	800478e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80041e0:	2200      	movs	r2, #0
 80041e2:	2101      	movs	r1, #1
 80041e4:	201b      	movs	r0, #27
 80041e6:	f000 fab6 	bl	8004756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80041ea:	201b      	movs	r0, #27
 80041ec:	f000 facf 	bl	800478e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80041f0:	bf00      	nop
 80041f2:	3728      	adds	r7, #40	; 0x28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40010000 	.word	0x40010000
 80041fc:	40023800 	.word	0x40023800
 8004200:	40020000 	.word	0x40020000

08004204 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004214:	d116      	bne.n	8004244 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	4b20      	ldr	r3, [pc, #128]	; (800429c <HAL_TIM_Base_MspInit+0x98>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	4a1f      	ldr	r2, [pc, #124]	; (800429c <HAL_TIM_Base_MspInit+0x98>)
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	6413      	str	r3, [r2, #64]	; 0x40
 8004226:	4b1d      	ldr	r3, [pc, #116]	; (800429c <HAL_TIM_Base_MspInit+0x98>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8004232:	2200      	movs	r2, #0
 8004234:	2103      	movs	r1, #3
 8004236:	201c      	movs	r0, #28
 8004238:	f000 fa8d 	bl	8004756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800423c:	201c      	movs	r0, #28
 800423e:	f000 faa6 	bl	800478e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004242:	e026      	b.n	8004292 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a15      	ldr	r2, [pc, #84]	; (80042a0 <HAL_TIM_Base_MspInit+0x9c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d10e      	bne.n	800426c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	4b12      	ldr	r3, [pc, #72]	; (800429c <HAL_TIM_Base_MspInit+0x98>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	4a11      	ldr	r2, [pc, #68]	; (800429c <HAL_TIM_Base_MspInit+0x98>)
 8004258:	f043 0302 	orr.w	r3, r3, #2
 800425c:	6413      	str	r3, [r2, #64]	; 0x40
 800425e:	4b0f      	ldr	r3, [pc, #60]	; (800429c <HAL_TIM_Base_MspInit+0x98>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	613b      	str	r3, [r7, #16]
 8004268:	693b      	ldr	r3, [r7, #16]
}
 800426a:	e012      	b.n	8004292 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a0c      	ldr	r2, [pc, #48]	; (80042a4 <HAL_TIM_Base_MspInit+0xa0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d10d      	bne.n	8004292 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	4b08      	ldr	r3, [pc, #32]	; (800429c <HAL_TIM_Base_MspInit+0x98>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	4a07      	ldr	r2, [pc, #28]	; (800429c <HAL_TIM_Base_MspInit+0x98>)
 8004280:	f043 0308 	orr.w	r3, r3, #8
 8004284:	6413      	str	r3, [r2, #64]	; 0x40
 8004286:	4b05      	ldr	r3, [pc, #20]	; (800429c <HAL_TIM_Base_MspInit+0x98>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
}
 8004292:	bf00      	nop
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40023800 	.word	0x40023800
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000c00 	.word	0x40000c00

080042a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80042ac:	4b17      	ldr	r3, [pc, #92]	; (800430c <MX_USART1_UART_Init+0x64>)
 80042ae:	4a18      	ldr	r2, [pc, #96]	; (8004310 <MX_USART1_UART_Init+0x68>)
 80042b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80042b2:	4b16      	ldr	r3, [pc, #88]	; (800430c <MX_USART1_UART_Init+0x64>)
 80042b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80042ba:	4b14      	ldr	r3, [pc, #80]	; (800430c <MX_USART1_UART_Init+0x64>)
 80042bc:	2200      	movs	r2, #0
 80042be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80042c0:	4b12      	ldr	r3, [pc, #72]	; (800430c <MX_USART1_UART_Init+0x64>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <MX_USART1_UART_Init+0x64>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <MX_USART1_UART_Init+0x64>)
 80042ce:	220c      	movs	r2, #12
 80042d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042d2:	4b0e      	ldr	r3, [pc, #56]	; (800430c <MX_USART1_UART_Init+0x64>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <MX_USART1_UART_Init+0x64>)
 80042da:	2200      	movs	r2, #0
 80042dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80042de:	480b      	ldr	r0, [pc, #44]	; (800430c <MX_USART1_UART_Init+0x64>)
 80042e0:	f004 fa1c 	bl	800871c <HAL_UART_Init>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80042ea:	f7ff fb8d 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);  // 使能串口空闲中断
 80042ee:	4b07      	ldr	r3, [pc, #28]	; (800430c <MX_USART1_UART_Init+0x64>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <MX_USART1_UART_Init+0x64>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0210 	orr.w	r2, r2, #16
 80042fc:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(&huart1, (uint8_t*) receive_buff, 8); //设置DMA传输，将串口1的数据搬运到recvive_buff中，每次8个字节
 80042fe:	2208      	movs	r2, #8
 8004300:	4904      	ldr	r1, [pc, #16]	; (8004314 <MX_USART1_UART_Init+0x6c>)
 8004302:	4802      	ldr	r0, [pc, #8]	; (800430c <MX_USART1_UART_Init+0x64>)
 8004304:	f004 fa57 	bl	80087b6 <HAL_UART_Receive_DMA>
  /* USER CODE END USART1_Init 2 */

}
 8004308:	bf00      	nop
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000af0 	.word	0x20000af0
 8004310:	40011000 	.word	0x40011000
 8004314:	20000720 	.word	0x20000720

08004318 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08a      	sub	sp, #40	; 0x28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004320:	f107 0314 	add.w	r3, r7, #20
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	605a      	str	r2, [r3, #4]
 800432a:	609a      	str	r2, [r3, #8]
 800432c:	60da      	str	r2, [r3, #12]
 800432e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a35      	ldr	r2, [pc, #212]	; (800440c <HAL_UART_MspInit+0xf4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d164      	bne.n	8004404 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	4b34      	ldr	r3, [pc, #208]	; (8004410 <HAL_UART_MspInit+0xf8>)
 8004340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004342:	4a33      	ldr	r2, [pc, #204]	; (8004410 <HAL_UART_MspInit+0xf8>)
 8004344:	f043 0310 	orr.w	r3, r3, #16
 8004348:	6453      	str	r3, [r2, #68]	; 0x44
 800434a:	4b31      	ldr	r3, [pc, #196]	; (8004410 <HAL_UART_MspInit+0xf8>)
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	4b2d      	ldr	r3, [pc, #180]	; (8004410 <HAL_UART_MspInit+0xf8>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	4a2c      	ldr	r2, [pc, #176]	; (8004410 <HAL_UART_MspInit+0xf8>)
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	6313      	str	r3, [r2, #48]	; 0x30
 8004366:	4b2a      	ldr	r3, [pc, #168]	; (8004410 <HAL_UART_MspInit+0xf8>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004372:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004378:	2302      	movs	r3, #2
 800437a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437c:	2300      	movs	r3, #0
 800437e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004380:	2303      	movs	r3, #3
 8004382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004384:	2307      	movs	r3, #7
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004388:	f107 0314 	add.w	r3, r7, #20
 800438c:	4619      	mov	r1, r3
 800438e:	4821      	ldr	r0, [pc, #132]	; (8004414 <HAL_UART_MspInit+0xfc>)
 8004390:	f000 fe1a 	bl	8004fc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004394:	4b20      	ldr	r3, [pc, #128]	; (8004418 <HAL_UART_MspInit+0x100>)
 8004396:	4a21      	ldr	r2, [pc, #132]	; (800441c <HAL_UART_MspInit+0x104>)
 8004398:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800439a:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <HAL_UART_MspInit+0x100>)
 800439c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043a2:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <HAL_UART_MspInit+0x100>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043a8:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <HAL_UART_MspInit+0x100>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043ae:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <HAL_UART_MspInit+0x100>)
 80043b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043b6:	4b18      	ldr	r3, [pc, #96]	; (8004418 <HAL_UART_MspInit+0x100>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043bc:	4b16      	ldr	r3, [pc, #88]	; (8004418 <HAL_UART_MspInit+0x100>)
 80043be:	2200      	movs	r2, #0
 80043c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80043c2:	4b15      	ldr	r3, [pc, #84]	; (8004418 <HAL_UART_MspInit+0x100>)
 80043c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043c8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80043ca:	4b13      	ldr	r3, [pc, #76]	; (8004418 <HAL_UART_MspInit+0x100>)
 80043cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043d0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043d2:	4b11      	ldr	r3, [pc, #68]	; (8004418 <HAL_UART_MspInit+0x100>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80043d8:	480f      	ldr	r0, [pc, #60]	; (8004418 <HAL_UART_MspInit+0x100>)
 80043da:	f000 f9f3 	bl	80047c4 <HAL_DMA_Init>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80043e4:	f7ff fb10 	bl	8003a08 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a0b      	ldr	r2, [pc, #44]	; (8004418 <HAL_UART_MspInit+0x100>)
 80043ec:	639a      	str	r2, [r3, #56]	; 0x38
 80043ee:	4a0a      	ldr	r2, [pc, #40]	; (8004418 <HAL_UART_MspInit+0x100>)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80043f4:	2200      	movs	r2, #0
 80043f6:	2100      	movs	r1, #0
 80043f8:	2025      	movs	r0, #37	; 0x25
 80043fa:	f000 f9ac 	bl	8004756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80043fe:	2025      	movs	r0, #37	; 0x25
 8004400:	f000 f9c5 	bl	800478e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004404:	bf00      	nop
 8004406:	3728      	adds	r7, #40	; 0x28
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40011000 	.word	0x40011000
 8004410:	40023800 	.word	0x40023800
 8004414:	40020000 	.word	0x40020000
 8004418:	20000a90 	.word	0x20000a90
 800441c:	40026440 	.word	0x40026440

08004420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004458 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004424:	480d      	ldr	r0, [pc, #52]	; (800445c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004426:	490e      	ldr	r1, [pc, #56]	; (8004460 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004428:	4a0e      	ldr	r2, [pc, #56]	; (8004464 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800442a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800442c:	e002      	b.n	8004434 <LoopCopyDataInit>

0800442e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800442e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004432:	3304      	adds	r3, #4

08004434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004438:	d3f9      	bcc.n	800442e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800443a:	4a0b      	ldr	r2, [pc, #44]	; (8004468 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800443c:	4c0b      	ldr	r4, [pc, #44]	; (800446c <LoopFillZerobss+0x26>)
  movs r3, #0
 800443e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004440:	e001      	b.n	8004446 <LoopFillZerobss>

08004442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004444:	3204      	adds	r2, #4

08004446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004448:	d3fb      	bcc.n	8004442 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800444a:	f7ff fd31 	bl	8003eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800444e:	f005 f855 	bl	80094fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004452:	f7ff fa51 	bl	80038f8 <main>
  bx  lr    
 8004456:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004458:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800445c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004460:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004464:	0800e5c0 	.word	0x0800e5c0
  ldr r2, =_sbss
 8004468:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800446c:	20000b48 	.word	0x20000b48

08004470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004470:	e7fe      	b.n	8004470 <ADC_IRQHandler>
	...

08004474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004478:	4b0e      	ldr	r3, [pc, #56]	; (80044b4 <HAL_Init+0x40>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a0d      	ldr	r2, [pc, #52]	; (80044b4 <HAL_Init+0x40>)
 800447e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004482:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004484:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_Init+0x40>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a0a      	ldr	r2, [pc, #40]	; (80044b4 <HAL_Init+0x40>)
 800448a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800448e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004490:	4b08      	ldr	r3, [pc, #32]	; (80044b4 <HAL_Init+0x40>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a07      	ldr	r2, [pc, #28]	; (80044b4 <HAL_Init+0x40>)
 8004496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800449c:	2003      	movs	r0, #3
 800449e:	f000 f94f 	bl	8004740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044a2:	2000      	movs	r0, #0
 80044a4:	f000 f808 	bl	80044b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044a8:	f7ff fb52 	bl	8003b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40023c00 	.word	0x40023c00

080044b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044c0:	4b12      	ldr	r3, [pc, #72]	; (800450c <HAL_InitTick+0x54>)
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	4b12      	ldr	r3, [pc, #72]	; (8004510 <HAL_InitTick+0x58>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	4619      	mov	r1, r3
 80044ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80044d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f967 	bl	80047aa <HAL_SYSTICK_Config>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e00e      	b.n	8004504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b0f      	cmp	r3, #15
 80044ea:	d80a      	bhi.n	8004502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044ec:	2200      	movs	r2, #0
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	f04f 30ff 	mov.w	r0, #4294967295
 80044f4:	f000 f92f 	bl	8004756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044f8:	4a06      	ldr	r2, [pc, #24]	; (8004514 <HAL_InitTick+0x5c>)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	e000      	b.n	8004504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
}
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	2000000c 	.word	0x2000000c
 8004510:	20000014 	.word	0x20000014
 8004514:	20000010 	.word	0x20000010

08004518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_IncTick+0x20>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_IncTick+0x24>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4413      	add	r3, r2
 8004528:	4a04      	ldr	r2, [pc, #16]	; (800453c <HAL_IncTick+0x24>)
 800452a:	6013      	str	r3, [r2, #0]
}
 800452c:	bf00      	nop
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	20000014 	.word	0x20000014
 800453c:	20000b34 	.word	0x20000b34

08004540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  return uwTick;
 8004544:	4b03      	ldr	r3, [pc, #12]	; (8004554 <HAL_GetTick+0x14>)
 8004546:	681b      	ldr	r3, [r3, #0]
}
 8004548:	4618      	mov	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	20000b34 	.word	0x20000b34

08004558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004560:	f7ff ffee 	bl	8004540 <HAL_GetTick>
 8004564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004570:	d005      	beq.n	800457e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004572:	4b0a      	ldr	r3, [pc, #40]	; (800459c <HAL_Delay+0x44>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800457e:	bf00      	nop
 8004580:	f7ff ffde 	bl	8004540 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	429a      	cmp	r2, r3
 800458e:	d8f7      	bhi.n	8004580 <HAL_Delay+0x28>
  {
  }
}
 8004590:	bf00      	nop
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000014 	.word	0x20000014

080045a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <__NVIC_SetPriorityGrouping+0x44>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045bc:	4013      	ands	r3, r2
 80045be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045d2:	4a04      	ldr	r2, [pc, #16]	; (80045e4 <__NVIC_SetPriorityGrouping+0x44>)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	60d3      	str	r3, [r2, #12]
}
 80045d8:	bf00      	nop
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	e000ed00 	.word	0xe000ed00

080045e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045ec:	4b04      	ldr	r3, [pc, #16]	; (8004600 <__NVIC_GetPriorityGrouping+0x18>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	0a1b      	lsrs	r3, r3, #8
 80045f2:	f003 0307 	and.w	r3, r3, #7
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	e000ed00 	.word	0xe000ed00

08004604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	4603      	mov	r3, r0
 800460c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800460e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004612:	2b00      	cmp	r3, #0
 8004614:	db0b      	blt.n	800462e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	f003 021f 	and.w	r2, r3, #31
 800461c:	4907      	ldr	r1, [pc, #28]	; (800463c <__NVIC_EnableIRQ+0x38>)
 800461e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	2001      	movs	r0, #1
 8004626:	fa00 f202 	lsl.w	r2, r0, r2
 800462a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	e000e100 	.word	0xe000e100

08004640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	6039      	str	r1, [r7, #0]
 800464a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800464c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004650:	2b00      	cmp	r3, #0
 8004652:	db0a      	blt.n	800466a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	b2da      	uxtb	r2, r3
 8004658:	490c      	ldr	r1, [pc, #48]	; (800468c <__NVIC_SetPriority+0x4c>)
 800465a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465e:	0112      	lsls	r2, r2, #4
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	440b      	add	r3, r1
 8004664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004668:	e00a      	b.n	8004680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	b2da      	uxtb	r2, r3
 800466e:	4908      	ldr	r1, [pc, #32]	; (8004690 <__NVIC_SetPriority+0x50>)
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	3b04      	subs	r3, #4
 8004678:	0112      	lsls	r2, r2, #4
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	440b      	add	r3, r1
 800467e:	761a      	strb	r2, [r3, #24]
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	e000e100 	.word	0xe000e100
 8004690:	e000ed00 	.word	0xe000ed00

08004694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004694:	b480      	push	{r7}
 8004696:	b089      	sub	sp, #36	; 0x24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f1c3 0307 	rsb	r3, r3, #7
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	bf28      	it	cs
 80046b2:	2304      	movcs	r3, #4
 80046b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	3304      	adds	r3, #4
 80046ba:	2b06      	cmp	r3, #6
 80046bc:	d902      	bls.n	80046c4 <NVIC_EncodePriority+0x30>
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	3b03      	subs	r3, #3
 80046c2:	e000      	b.n	80046c6 <NVIC_EncodePriority+0x32>
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c8:	f04f 32ff 	mov.w	r2, #4294967295
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	43da      	mvns	r2, r3
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	401a      	ands	r2, r3
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046dc:	f04f 31ff 	mov.w	r1, #4294967295
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	fa01 f303 	lsl.w	r3, r1, r3
 80046e6:	43d9      	mvns	r1, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046ec:	4313      	orrs	r3, r2
         );
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3724      	adds	r7, #36	; 0x24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
	...

080046fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3b01      	subs	r3, #1
 8004708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800470c:	d301      	bcc.n	8004712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800470e:	2301      	movs	r3, #1
 8004710:	e00f      	b.n	8004732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004712:	4a0a      	ldr	r2, [pc, #40]	; (800473c <SysTick_Config+0x40>)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3b01      	subs	r3, #1
 8004718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800471a:	210f      	movs	r1, #15
 800471c:	f04f 30ff 	mov.w	r0, #4294967295
 8004720:	f7ff ff8e 	bl	8004640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004724:	4b05      	ldr	r3, [pc, #20]	; (800473c <SysTick_Config+0x40>)
 8004726:	2200      	movs	r2, #0
 8004728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800472a:	4b04      	ldr	r3, [pc, #16]	; (800473c <SysTick_Config+0x40>)
 800472c:	2207      	movs	r2, #7
 800472e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	e000e010 	.word	0xe000e010

08004740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff ff29 	bl	80045a0 <__NVIC_SetPriorityGrouping>
}
 800474e:	bf00      	nop
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004756:	b580      	push	{r7, lr}
 8004758:	b086      	sub	sp, #24
 800475a:	af00      	add	r7, sp, #0
 800475c:	4603      	mov	r3, r0
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	607a      	str	r2, [r7, #4]
 8004762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004764:	2300      	movs	r3, #0
 8004766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004768:	f7ff ff3e 	bl	80045e8 <__NVIC_GetPriorityGrouping>
 800476c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	6978      	ldr	r0, [r7, #20]
 8004774:	f7ff ff8e 	bl	8004694 <NVIC_EncodePriority>
 8004778:	4602      	mov	r2, r0
 800477a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800477e:	4611      	mov	r1, r2
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff ff5d 	bl	8004640 <__NVIC_SetPriority>
}
 8004786:	bf00      	nop
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	4603      	mov	r3, r0
 8004796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff ff31 	bl	8004604 <__NVIC_EnableIRQ>
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff ffa2 	bl	80046fc <SysTick_Config>
 80047b8:	4603      	mov	r3, r0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047d0:	f7ff feb6 	bl	8004540 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e099      	b.n	8004914 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004800:	e00f      	b.n	8004822 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004802:	f7ff fe9d 	bl	8004540 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b05      	cmp	r3, #5
 800480e:	d908      	bls.n	8004822 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2203      	movs	r2, #3
 800481a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e078      	b.n	8004914 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1e8      	bne.n	8004802 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4b38      	ldr	r3, [pc, #224]	; (800491c <HAL_DMA_Init+0x158>)
 800483c:	4013      	ands	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800484e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800485a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	2b04      	cmp	r3, #4
 800487a:	d107      	bne.n	800488c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	4313      	orrs	r3, r2
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f023 0307 	bic.w	r3, r3, #7
 80048a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d117      	bne.n	80048e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00e      	beq.n	80048e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fb01 	bl	8004ed0 <DMA_CheckFifoParam>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2240      	movs	r2, #64	; 0x40
 80048d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048e2:	2301      	movs	r3, #1
 80048e4:	e016      	b.n	8004914 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fab8 	bl	8004e64 <DMA_CalcBaseAndBitshift>
 80048f4:	4603      	mov	r3, r0
 80048f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fc:	223f      	movs	r2, #63	; 0x3f
 80048fe:	409a      	lsls	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	f010803f 	.word	0xf010803f

08004920 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004936:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_DMA_Start_IT+0x26>
 8004942:	2302      	movs	r3, #2
 8004944:	e040      	b.n	80049c8 <HAL_DMA_Start_IT+0xa8>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b01      	cmp	r3, #1
 8004958:	d12f      	bne.n	80049ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2202      	movs	r2, #2
 800495e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 fa4a 	bl	8004e08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004978:	223f      	movs	r2, #63	; 0x3f
 800497a:	409a      	lsls	r2, r3
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0216 	orr.w	r2, r2, #22
 800498e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d007      	beq.n	80049a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0208 	orr.w	r2, r2, #8
 80049a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	e005      	b.n	80049c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049c2:	2302      	movs	r3, #2
 80049c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049de:	f7ff fdaf 	bl	8004540 <HAL_GetTick>
 80049e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d008      	beq.n	8004a02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2280      	movs	r2, #128	; 0x80
 80049f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e052      	b.n	8004aa8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0216 	bic.w	r2, r2, #22
 8004a10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695a      	ldr	r2, [r3, #20]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d103      	bne.n	8004a32 <HAL_DMA_Abort+0x62>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0208 	bic.w	r2, r2, #8
 8004a40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0201 	bic.w	r2, r2, #1
 8004a50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a52:	e013      	b.n	8004a7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a54:	f7ff fd74 	bl	8004540 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b05      	cmp	r3, #5
 8004a60:	d90c      	bls.n	8004a7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2203      	movs	r2, #3
 8004a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e015      	b.n	8004aa8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1e4      	bne.n	8004a54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8e:	223f      	movs	r2, #63	; 0x3f
 8004a90:	409a      	lsls	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d004      	beq.n	8004ace <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2280      	movs	r2, #128	; 0x80
 8004ac8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e00c      	b.n	8004ae8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2205      	movs	r2, #5
 8004ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0201 	bic.w	r2, r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b00:	4b92      	ldr	r3, [pc, #584]	; (8004d4c <HAL_DMA_IRQHandler+0x258>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a92      	ldr	r2, [pc, #584]	; (8004d50 <HAL_DMA_IRQHandler+0x25c>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	0a9b      	lsrs	r3, r3, #10
 8004b0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1e:	2208      	movs	r2, #8
 8004b20:	409a      	lsls	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01a      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d013      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0204 	bic.w	r2, r2, #4
 8004b46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	409a      	lsls	r2, r3
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b58:	f043 0201 	orr.w	r2, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b64:	2201      	movs	r2, #1
 8004b66:	409a      	lsls	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d012      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00b      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b82:	2201      	movs	r2, #1
 8004b84:	409a      	lsls	r2, r3
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8e:	f043 0202 	orr.w	r2, r3, #2
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9a:	2204      	movs	r2, #4
 8004b9c:	409a      	lsls	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d012      	beq.n	8004bcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00b      	beq.n	8004bcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb8:	2204      	movs	r2, #4
 8004bba:	409a      	lsls	r2, r3
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc4:	f043 0204 	orr.w	r2, r3, #4
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd0:	2210      	movs	r2, #16
 8004bd2:	409a      	lsls	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d043      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d03c      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bee:	2210      	movs	r2, #16
 8004bf0:	409a      	lsls	r2, r3
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d018      	beq.n	8004c36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d108      	bne.n	8004c24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d024      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	4798      	blx	r3
 8004c22:	e01f      	b.n	8004c64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01b      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	4798      	blx	r3
 8004c34:	e016      	b.n	8004c64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d107      	bne.n	8004c54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0208 	bic.w	r2, r2, #8
 8004c52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c68:	2220      	movs	r2, #32
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 808e 	beq.w	8004d92 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8086 	beq.w	8004d92 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	409a      	lsls	r2, r3
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b05      	cmp	r3, #5
 8004c9c:	d136      	bne.n	8004d0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0216 	bic.w	r2, r2, #22
 8004cac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695a      	ldr	r2, [r3, #20]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d103      	bne.n	8004cce <HAL_DMA_IRQHandler+0x1da>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d007      	beq.n	8004cde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0208 	bic.w	r2, r2, #8
 8004cdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce2:	223f      	movs	r2, #63	; 0x3f
 8004ce4:	409a      	lsls	r2, r3
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d07d      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	4798      	blx	r3
        }
        return;
 8004d0a:	e078      	b.n	8004dfe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01c      	beq.n	8004d54 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d108      	bne.n	8004d3a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d030      	beq.n	8004d92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	4798      	blx	r3
 8004d38:	e02b      	b.n	8004d92 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d027      	beq.n	8004d92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	4798      	blx	r3
 8004d4a:	e022      	b.n	8004d92 <HAL_DMA_IRQHandler+0x29e>
 8004d4c:	2000000c 	.word	0x2000000c
 8004d50:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10f      	bne.n	8004d82 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0210 	bic.w	r2, r2, #16
 8004d70:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d032      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d022      	beq.n	8004dec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2205      	movs	r2, #5
 8004daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0201 	bic.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	60bb      	str	r3, [r7, #8]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d307      	bcc.n	8004dda <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f2      	bne.n	8004dbe <HAL_DMA_IRQHandler+0x2ca>
 8004dd8:	e000      	b.n	8004ddc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004dda:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	4798      	blx	r3
 8004dfc:	e000      	b.n	8004e00 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004dfe:	bf00      	nop
    }
  }
}
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop

08004e08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b40      	cmp	r3, #64	; 0x40
 8004e34:	d108      	bne.n	8004e48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e46:	e007      	b.n	8004e58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	60da      	str	r2, [r3, #12]
}
 8004e58:	bf00      	nop
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	3b10      	subs	r3, #16
 8004e74:	4a14      	ldr	r2, [pc, #80]	; (8004ec8 <DMA_CalcBaseAndBitshift+0x64>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	091b      	lsrs	r3, r3, #4
 8004e7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e7e:	4a13      	ldr	r2, [pc, #76]	; (8004ecc <DMA_CalcBaseAndBitshift+0x68>)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4413      	add	r3, r2
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	d909      	bls.n	8004ea6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e9a:	f023 0303 	bic.w	r3, r3, #3
 8004e9e:	1d1a      	adds	r2, r3, #4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	659a      	str	r2, [r3, #88]	; 0x58
 8004ea4:	e007      	b.n	8004eb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004eae:	f023 0303 	bic.w	r3, r3, #3
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	aaaaaaab 	.word	0xaaaaaaab
 8004ecc:	0800dfe8 	.word	0x0800dfe8

08004ed0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d11f      	bne.n	8004f2a <DMA_CheckFifoParam+0x5a>
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d856      	bhi.n	8004f9e <DMA_CheckFifoParam+0xce>
 8004ef0:	a201      	add	r2, pc, #4	; (adr r2, 8004ef8 <DMA_CheckFifoParam+0x28>)
 8004ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef6:	bf00      	nop
 8004ef8:	08004f09 	.word	0x08004f09
 8004efc:	08004f1b 	.word	0x08004f1b
 8004f00:	08004f09 	.word	0x08004f09
 8004f04:	08004f9f 	.word	0x08004f9f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d046      	beq.n	8004fa2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f18:	e043      	b.n	8004fa2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f22:	d140      	bne.n	8004fa6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f28:	e03d      	b.n	8004fa6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f32:	d121      	bne.n	8004f78 <DMA_CheckFifoParam+0xa8>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d837      	bhi.n	8004faa <DMA_CheckFifoParam+0xda>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <DMA_CheckFifoParam+0x70>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f51 	.word	0x08004f51
 8004f44:	08004f57 	.word	0x08004f57
 8004f48:	08004f51 	.word	0x08004f51
 8004f4c:	08004f69 	.word	0x08004f69
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
      break;
 8004f54:	e030      	b.n	8004fb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d025      	beq.n	8004fae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f66:	e022      	b.n	8004fae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f70:	d11f      	bne.n	8004fb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f76:	e01c      	b.n	8004fb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d903      	bls.n	8004f86 <DMA_CheckFifoParam+0xb6>
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d003      	beq.n	8004f8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f84:	e018      	b.n	8004fb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	73fb      	strb	r3, [r7, #15]
      break;
 8004f8a:	e015      	b.n	8004fb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00e      	beq.n	8004fb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f9c:	e00b      	b.n	8004fb6 <DMA_CheckFifoParam+0xe6>
      break;
 8004f9e:	bf00      	nop
 8004fa0:	e00a      	b.n	8004fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fa2:	bf00      	nop
 8004fa4:	e008      	b.n	8004fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fa6:	bf00      	nop
 8004fa8:	e006      	b.n	8004fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8004faa:	bf00      	nop
 8004fac:	e004      	b.n	8004fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fae:	bf00      	nop
 8004fb0:	e002      	b.n	8004fb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004fb2:	bf00      	nop
 8004fb4:	e000      	b.n	8004fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fb6:	bf00      	nop
    }
  } 
  
  return status; 
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop

08004fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b089      	sub	sp, #36	; 0x24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	e16b      	b.n	80052bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	f040 815a 	bne.w	80052b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	2b01      	cmp	r3, #1
 800500c:	d005      	beq.n	800501a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005016:	2b02      	cmp	r3, #2
 8005018:	d130      	bne.n	800507c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	2203      	movs	r2, #3
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	43db      	mvns	r3, r3
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	4013      	ands	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	fa02 f303 	lsl.w	r3, r2, r3
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	4313      	orrs	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005050:	2201      	movs	r2, #1
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	43db      	mvns	r3, r3
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	4013      	ands	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	091b      	lsrs	r3, r3, #4
 8005066:	f003 0201 	and.w	r2, r3, #1
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	4313      	orrs	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	2b03      	cmp	r3, #3
 8005086:	d017      	beq.n	80050b8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	2203      	movs	r2, #3
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	43db      	mvns	r3, r3
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	4013      	ands	r3, r2
 800509e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f003 0303 	and.w	r3, r3, #3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d123      	bne.n	800510c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	08da      	lsrs	r2, r3, #3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3208      	adds	r2, #8
 80050cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	220f      	movs	r2, #15
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	43db      	mvns	r3, r3
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	4013      	ands	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	08da      	lsrs	r2, r3, #3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3208      	adds	r2, #8
 8005106:	69b9      	ldr	r1, [r7, #24]
 8005108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	2203      	movs	r2, #3
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	43db      	mvns	r3, r3
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	4013      	ands	r3, r2
 8005122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 0203 	and.w	r2, r3, #3
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	4313      	orrs	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 80b4 	beq.w	80052b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	4b60      	ldr	r3, [pc, #384]	; (80052d4 <HAL_GPIO_Init+0x30c>)
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	4a5f      	ldr	r2, [pc, #380]	; (80052d4 <HAL_GPIO_Init+0x30c>)
 8005158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800515c:	6453      	str	r3, [r2, #68]	; 0x44
 800515e:	4b5d      	ldr	r3, [pc, #372]	; (80052d4 <HAL_GPIO_Init+0x30c>)
 8005160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800516a:	4a5b      	ldr	r2, [pc, #364]	; (80052d8 <HAL_GPIO_Init+0x310>)
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	089b      	lsrs	r3, r3, #2
 8005170:	3302      	adds	r3, #2
 8005172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	220f      	movs	r2, #15
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	43db      	mvns	r3, r3
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	4013      	ands	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a52      	ldr	r2, [pc, #328]	; (80052dc <HAL_GPIO_Init+0x314>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d02b      	beq.n	80051ee <HAL_GPIO_Init+0x226>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a51      	ldr	r2, [pc, #324]	; (80052e0 <HAL_GPIO_Init+0x318>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d025      	beq.n	80051ea <HAL_GPIO_Init+0x222>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a50      	ldr	r2, [pc, #320]	; (80052e4 <HAL_GPIO_Init+0x31c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d01f      	beq.n	80051e6 <HAL_GPIO_Init+0x21e>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a4f      	ldr	r2, [pc, #316]	; (80052e8 <HAL_GPIO_Init+0x320>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d019      	beq.n	80051e2 <HAL_GPIO_Init+0x21a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a4e      	ldr	r2, [pc, #312]	; (80052ec <HAL_GPIO_Init+0x324>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <HAL_GPIO_Init+0x216>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a4d      	ldr	r2, [pc, #308]	; (80052f0 <HAL_GPIO_Init+0x328>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00d      	beq.n	80051da <HAL_GPIO_Init+0x212>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a4c      	ldr	r2, [pc, #304]	; (80052f4 <HAL_GPIO_Init+0x32c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d007      	beq.n	80051d6 <HAL_GPIO_Init+0x20e>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a4b      	ldr	r2, [pc, #300]	; (80052f8 <HAL_GPIO_Init+0x330>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d101      	bne.n	80051d2 <HAL_GPIO_Init+0x20a>
 80051ce:	2307      	movs	r3, #7
 80051d0:	e00e      	b.n	80051f0 <HAL_GPIO_Init+0x228>
 80051d2:	2308      	movs	r3, #8
 80051d4:	e00c      	b.n	80051f0 <HAL_GPIO_Init+0x228>
 80051d6:	2306      	movs	r3, #6
 80051d8:	e00a      	b.n	80051f0 <HAL_GPIO_Init+0x228>
 80051da:	2305      	movs	r3, #5
 80051dc:	e008      	b.n	80051f0 <HAL_GPIO_Init+0x228>
 80051de:	2304      	movs	r3, #4
 80051e0:	e006      	b.n	80051f0 <HAL_GPIO_Init+0x228>
 80051e2:	2303      	movs	r3, #3
 80051e4:	e004      	b.n	80051f0 <HAL_GPIO_Init+0x228>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e002      	b.n	80051f0 <HAL_GPIO_Init+0x228>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <HAL_GPIO_Init+0x228>
 80051ee:	2300      	movs	r3, #0
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	f002 0203 	and.w	r2, r2, #3
 80051f6:	0092      	lsls	r2, r2, #2
 80051f8:	4093      	lsls	r3, r2
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005200:	4935      	ldr	r1, [pc, #212]	; (80052d8 <HAL_GPIO_Init+0x310>)
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	089b      	lsrs	r3, r3, #2
 8005206:	3302      	adds	r3, #2
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800520e:	4b3b      	ldr	r3, [pc, #236]	; (80052fc <HAL_GPIO_Init+0x334>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	43db      	mvns	r3, r3
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	4013      	ands	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005232:	4a32      	ldr	r2, [pc, #200]	; (80052fc <HAL_GPIO_Init+0x334>)
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005238:	4b30      	ldr	r3, [pc, #192]	; (80052fc <HAL_GPIO_Init+0x334>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	43db      	mvns	r3, r3
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	4013      	ands	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800525c:	4a27      	ldr	r2, [pc, #156]	; (80052fc <HAL_GPIO_Init+0x334>)
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005262:	4b26      	ldr	r3, [pc, #152]	; (80052fc <HAL_GPIO_Init+0x334>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	43db      	mvns	r3, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4013      	ands	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005286:	4a1d      	ldr	r2, [pc, #116]	; (80052fc <HAL_GPIO_Init+0x334>)
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800528c:	4b1b      	ldr	r3, [pc, #108]	; (80052fc <HAL_GPIO_Init+0x334>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	43db      	mvns	r3, r3
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	4013      	ands	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052b0:	4a12      	ldr	r2, [pc, #72]	; (80052fc <HAL_GPIO_Init+0x334>)
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	3301      	adds	r3, #1
 80052ba:	61fb      	str	r3, [r7, #28]
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	2b0f      	cmp	r3, #15
 80052c0:	f67f ae90 	bls.w	8004fe4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	3724      	adds	r7, #36	; 0x24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	40023800 	.word	0x40023800
 80052d8:	40013800 	.word	0x40013800
 80052dc:	40020000 	.word	0x40020000
 80052e0:	40020400 	.word	0x40020400
 80052e4:	40020800 	.word	0x40020800
 80052e8:	40020c00 	.word	0x40020c00
 80052ec:	40021000 	.word	0x40021000
 80052f0:	40021400 	.word	0x40021400
 80052f4:	40021800 	.word	0x40021800
 80052f8:	40021c00 	.word	0x40021c00
 80052fc:	40013c00 	.word	0x40013c00

08005300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691a      	ldr	r2, [r3, #16]
 8005310:	887b      	ldrh	r3, [r7, #2]
 8005312:	4013      	ands	r3, r2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005318:	2301      	movs	r3, #1
 800531a:	73fb      	strb	r3, [r7, #15]
 800531c:	e001      	b.n	8005322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800531e:	2300      	movs	r3, #0
 8005320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005322:	7bfb      	ldrb	r3, [r7, #15]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	807b      	strh	r3, [r7, #2]
 800533c:	4613      	mov	r3, r2
 800533e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005340:	787b      	ldrb	r3, [r7, #1]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005346:	887a      	ldrh	r2, [r7, #2]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800534c:	e003      	b.n	8005356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800534e:	887b      	ldrh	r3, [r7, #2]
 8005350:	041a      	lsls	r2, r3, #16
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	619a      	str	r2, [r3, #24]
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
	...

08005364 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	4603      	mov	r3, r0
 800536c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800536e:	4b08      	ldr	r3, [pc, #32]	; (8005390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005370:	695a      	ldr	r2, [r3, #20]
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	4013      	ands	r3, r2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d006      	beq.n	8005388 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800537a:	4a05      	ldr	r2, [pc, #20]	; (8005390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800537c:	88fb      	ldrh	r3, [r7, #6]
 800537e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005380:	88fb      	ldrh	r3, [r7, #6]
 8005382:	4618      	mov	r0, r3
 8005384:	f000 f806 	bl	8005394 <HAL_GPIO_EXTI_Callback>
  }
}
 8005388:	bf00      	nop
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40013c00 	.word	0x40013c00

08005394 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
	...

080053ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e12b      	b.n	8005616 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fe fa48 	bl	8003868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2224      	movs	r2, #36	; 0x24
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0201 	bic.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800540e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005410:	f001 fd58 	bl	8006ec4 <HAL_RCC_GetPCLK1Freq>
 8005414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	4a81      	ldr	r2, [pc, #516]	; (8005620 <HAL_I2C_Init+0x274>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d807      	bhi.n	8005430 <HAL_I2C_Init+0x84>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a80      	ldr	r2, [pc, #512]	; (8005624 <HAL_I2C_Init+0x278>)
 8005424:	4293      	cmp	r3, r2
 8005426:	bf94      	ite	ls
 8005428:	2301      	movls	r3, #1
 800542a:	2300      	movhi	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	e006      	b.n	800543e <HAL_I2C_Init+0x92>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4a7d      	ldr	r2, [pc, #500]	; (8005628 <HAL_I2C_Init+0x27c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	bf94      	ite	ls
 8005438:	2301      	movls	r3, #1
 800543a:	2300      	movhi	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e0e7      	b.n	8005616 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4a78      	ldr	r2, [pc, #480]	; (800562c <HAL_I2C_Init+0x280>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	0c9b      	lsrs	r3, r3, #18
 8005450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	430a      	orrs	r2, r1
 8005464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4a6a      	ldr	r2, [pc, #424]	; (8005620 <HAL_I2C_Init+0x274>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d802      	bhi.n	8005480 <HAL_I2C_Init+0xd4>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	3301      	adds	r3, #1
 800547e:	e009      	b.n	8005494 <HAL_I2C_Init+0xe8>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005486:	fb02 f303 	mul.w	r3, r2, r3
 800548a:	4a69      	ldr	r2, [pc, #420]	; (8005630 <HAL_I2C_Init+0x284>)
 800548c:	fba2 2303 	umull	r2, r3, r2, r3
 8005490:	099b      	lsrs	r3, r3, #6
 8005492:	3301      	adds	r3, #1
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6812      	ldr	r2, [r2, #0]
 8005498:	430b      	orrs	r3, r1
 800549a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	495c      	ldr	r1, [pc, #368]	; (8005620 <HAL_I2C_Init+0x274>)
 80054b0:	428b      	cmp	r3, r1
 80054b2:	d819      	bhi.n	80054e8 <HAL_I2C_Init+0x13c>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	1e59      	subs	r1, r3, #1
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	fbb1 f3f3 	udiv	r3, r1, r3
 80054c2:	1c59      	adds	r1, r3, #1
 80054c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80054c8:	400b      	ands	r3, r1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <HAL_I2C_Init+0x138>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1e59      	subs	r1, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80054dc:	3301      	adds	r3, #1
 80054de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e2:	e051      	b.n	8005588 <HAL_I2C_Init+0x1dc>
 80054e4:	2304      	movs	r3, #4
 80054e6:	e04f      	b.n	8005588 <HAL_I2C_Init+0x1dc>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d111      	bne.n	8005514 <HAL_I2C_Init+0x168>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	1e58      	subs	r0, r3, #1
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6859      	ldr	r1, [r3, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	440b      	add	r3, r1
 80054fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005502:	3301      	adds	r3, #1
 8005504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005508:	2b00      	cmp	r3, #0
 800550a:	bf0c      	ite	eq
 800550c:	2301      	moveq	r3, #1
 800550e:	2300      	movne	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	e012      	b.n	800553a <HAL_I2C_Init+0x18e>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	1e58      	subs	r0, r3, #1
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6859      	ldr	r1, [r3, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	0099      	lsls	r1, r3, #2
 8005524:	440b      	add	r3, r1
 8005526:	fbb0 f3f3 	udiv	r3, r0, r3
 800552a:	3301      	adds	r3, #1
 800552c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005530:	2b00      	cmp	r3, #0
 8005532:	bf0c      	ite	eq
 8005534:	2301      	moveq	r3, #1
 8005536:	2300      	movne	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_I2C_Init+0x196>
 800553e:	2301      	movs	r3, #1
 8005540:	e022      	b.n	8005588 <HAL_I2C_Init+0x1dc>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10e      	bne.n	8005568 <HAL_I2C_Init+0x1bc>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1e58      	subs	r0, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6859      	ldr	r1, [r3, #4]
 8005552:	460b      	mov	r3, r1
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	440b      	add	r3, r1
 8005558:	fbb0 f3f3 	udiv	r3, r0, r3
 800555c:	3301      	adds	r3, #1
 800555e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005566:	e00f      	b.n	8005588 <HAL_I2C_Init+0x1dc>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	1e58      	subs	r0, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6859      	ldr	r1, [r3, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	0099      	lsls	r1, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	fbb0 f3f3 	udiv	r3, r0, r3
 800557e:	3301      	adds	r3, #1
 8005580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005588:	6879      	ldr	r1, [r7, #4]
 800558a:	6809      	ldr	r1, [r1, #0]
 800558c:	4313      	orrs	r3, r2
 800558e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69da      	ldr	r2, [r3, #28]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80055b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6911      	ldr	r1, [r2, #16]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	68d2      	ldr	r2, [r2, #12]
 80055c2:	4311      	orrs	r1, r2
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	430b      	orrs	r3, r1
 80055ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	000186a0 	.word	0x000186a0
 8005624:	001e847f 	.word	0x001e847f
 8005628:	003d08ff 	.word	0x003d08ff
 800562c:	431bde83 	.word	0x431bde83
 8005630:	10624dd3 	.word	0x10624dd3

08005634 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af02      	add	r7, sp, #8
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	607a      	str	r2, [r7, #4]
 800563e:	461a      	mov	r2, r3
 8005640:	460b      	mov	r3, r1
 8005642:	817b      	strh	r3, [r7, #10]
 8005644:	4613      	mov	r3, r2
 8005646:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005648:	f7fe ff7a 	bl	8004540 <HAL_GetTick>
 800564c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b20      	cmp	r3, #32
 8005658:	f040 80e0 	bne.w	800581c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	2319      	movs	r3, #25
 8005662:	2201      	movs	r2, #1
 8005664:	4970      	ldr	r1, [pc, #448]	; (8005828 <HAL_I2C_Master_Transmit+0x1f4>)
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 fe02 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005672:	2302      	movs	r3, #2
 8005674:	e0d3      	b.n	800581e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_I2C_Master_Transmit+0x50>
 8005680:	2302      	movs	r3, #2
 8005682:	e0cc      	b.n	800581e <HAL_I2C_Master_Transmit+0x1ea>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b01      	cmp	r3, #1
 8005698:	d007      	beq.n	80056aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0201 	orr.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2221      	movs	r2, #33	; 0x21
 80056be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2210      	movs	r2, #16
 80056c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	893a      	ldrh	r2, [r7, #8]
 80056da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4a50      	ldr	r2, [pc, #320]	; (800582c <HAL_I2C_Master_Transmit+0x1f8>)
 80056ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80056ec:	8979      	ldrh	r1, [r7, #10]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	6a3a      	ldr	r2, [r7, #32]
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 fbbc 	bl	8005e70 <I2C_MasterRequestWrite>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e08d      	b.n	800581e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005702:	2300      	movs	r3, #0
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005718:	e066      	b.n	80057e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	6a39      	ldr	r1, [r7, #32]
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 fe7c 	bl	800641c <I2C_WaitOnTXEFlagUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00d      	beq.n	8005746 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	2b04      	cmp	r3, #4
 8005730:	d107      	bne.n	8005742 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005740:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e06b      	b.n	800581e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	781a      	ldrb	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576e:	3b01      	subs	r3, #1
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b04      	cmp	r3, #4
 8005782:	d11b      	bne.n	80057bc <HAL_I2C_Master_Transmit+0x188>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005788:	2b00      	cmp	r3, #0
 800578a:	d017      	beq.n	80057bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	781a      	ldrb	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	6a39      	ldr	r1, [r7, #32]
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 fe6c 	bl	800649e <I2C_WaitOnBTFFlagUntilTimeout>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00d      	beq.n	80057e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d107      	bne.n	80057e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e01a      	b.n	800581e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d194      	bne.n	800571a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	e000      	b.n	800581e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800581c:	2302      	movs	r3, #2
  }
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	00100002 	.word	0x00100002
 800582c:	ffff0000 	.word	0xffff0000

08005830 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b088      	sub	sp, #32
 8005834:	af02      	add	r7, sp, #8
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	4608      	mov	r0, r1
 800583a:	4611      	mov	r1, r2
 800583c:	461a      	mov	r2, r3
 800583e:	4603      	mov	r3, r0
 8005840:	817b      	strh	r3, [r7, #10]
 8005842:	460b      	mov	r3, r1
 8005844:	813b      	strh	r3, [r7, #8]
 8005846:	4613      	mov	r3, r2
 8005848:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800584a:	f7fe fe79 	bl	8004540 <HAL_GetTick>
 800584e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b20      	cmp	r3, #32
 800585a:	f040 80d9 	bne.w	8005a10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	2319      	movs	r3, #25
 8005864:	2201      	movs	r2, #1
 8005866:	496d      	ldr	r1, [pc, #436]	; (8005a1c <HAL_I2C_Mem_Write+0x1ec>)
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 fd01 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005874:	2302      	movs	r3, #2
 8005876:	e0cc      	b.n	8005a12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <HAL_I2C_Mem_Write+0x56>
 8005882:	2302      	movs	r3, #2
 8005884:	e0c5      	b.n	8005a12 <HAL_I2C_Mem_Write+0x1e2>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b01      	cmp	r3, #1
 800589a:	d007      	beq.n	80058ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0201 	orr.w	r2, r2, #1
 80058aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2221      	movs	r2, #33	; 0x21
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2240      	movs	r2, #64	; 0x40
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a3a      	ldr	r2, [r7, #32]
 80058d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4a4d      	ldr	r2, [pc, #308]	; (8005a20 <HAL_I2C_Mem_Write+0x1f0>)
 80058ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058ee:	88f8      	ldrh	r0, [r7, #6]
 80058f0:	893a      	ldrh	r2, [r7, #8]
 80058f2:	8979      	ldrh	r1, [r7, #10]
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	9301      	str	r3, [sp, #4]
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	4603      	mov	r3, r0
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fb38 	bl	8005f74 <I2C_RequestMemoryWrite>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d052      	beq.n	80059b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e081      	b.n	8005a12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 fd82 	bl	800641c <I2C_WaitOnTXEFlagUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00d      	beq.n	800593a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	2b04      	cmp	r3, #4
 8005924:	d107      	bne.n	8005936 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005934:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e06b      	b.n	8005a12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	781a      	ldrb	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005960:	b29b      	uxth	r3, r3
 8005962:	3b01      	subs	r3, #1
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b04      	cmp	r3, #4
 8005976:	d11b      	bne.n	80059b0 <HAL_I2C_Mem_Write+0x180>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597c:	2b00      	cmp	r3, #0
 800597e:	d017      	beq.n	80059b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	781a      	ldrb	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1aa      	bne.n	800590e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 fd6e 	bl	800649e <I2C_WaitOnBTFFlagUntilTimeout>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00d      	beq.n	80059e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d107      	bne.n	80059e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e016      	b.n	8005a12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e000      	b.n	8005a12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005a10:	2302      	movs	r3, #2
  }
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3718      	adds	r7, #24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	00100002 	.word	0x00100002
 8005a20:	ffff0000 	.word	0xffff0000

08005a24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08c      	sub	sp, #48	; 0x30
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	4608      	mov	r0, r1
 8005a2e:	4611      	mov	r1, r2
 8005a30:	461a      	mov	r2, r3
 8005a32:	4603      	mov	r3, r0
 8005a34:	817b      	strh	r3, [r7, #10]
 8005a36:	460b      	mov	r3, r1
 8005a38:	813b      	strh	r3, [r7, #8]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a3e:	f7fe fd7f 	bl	8004540 <HAL_GetTick>
 8005a42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b20      	cmp	r3, #32
 8005a4e:	f040 8208 	bne.w	8005e62 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	2319      	movs	r3, #25
 8005a58:	2201      	movs	r2, #1
 8005a5a:	497b      	ldr	r1, [pc, #492]	; (8005c48 <HAL_I2C_Mem_Read+0x224>)
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 fc07 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e1fb      	b.n	8005e64 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <HAL_I2C_Mem_Read+0x56>
 8005a76:	2302      	movs	r3, #2
 8005a78:	e1f4      	b.n	8005e64 <HAL_I2C_Mem_Read+0x440>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d007      	beq.n	8005aa0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0201 	orr.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2222      	movs	r2, #34	; 0x22
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2240      	movs	r2, #64	; 0x40
 8005abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4a5b      	ldr	r2, [pc, #364]	; (8005c4c <HAL_I2C_Mem_Read+0x228>)
 8005ae0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ae2:	88f8      	ldrh	r0, [r7, #6]
 8005ae4:	893a      	ldrh	r2, [r7, #8]
 8005ae6:	8979      	ldrh	r1, [r7, #10]
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	9301      	str	r3, [sp, #4]
 8005aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	4603      	mov	r3, r0
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 fad4 	bl	80060a0 <I2C_RequestMemoryRead>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e1b0      	b.n	8005e64 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d113      	bne.n	8005b32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	623b      	str	r3, [r7, #32]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	623b      	str	r3, [r7, #32]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	623b      	str	r3, [r7, #32]
 8005b1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	e184      	b.n	8005e3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d11b      	bne.n	8005b72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	61fb      	str	r3, [r7, #28]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	61fb      	str	r3, [r7, #28]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	61fb      	str	r3, [r7, #28]
 8005b5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	e164      	b.n	8005e3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d11b      	bne.n	8005bb2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61bb      	str	r3, [r7, #24]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	61bb      	str	r3, [r7, #24]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	e144      	b.n	8005e3c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	617b      	str	r3, [r7, #20]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	617b      	str	r3, [r7, #20]
 8005bc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005bc8:	e138      	b.n	8005e3c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	f200 80f1 	bhi.w	8005db6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d123      	bne.n	8005c24 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 fc9d 	bl	8006520 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e139      	b.n	8005e64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691a      	ldr	r2, [r3, #16]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c22:	e10b      	b.n	8005e3c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d14e      	bne.n	8005cca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c32:	2200      	movs	r2, #0
 8005c34:	4906      	ldr	r1, [pc, #24]	; (8005c50 <HAL_I2C_Mem_Read+0x22c>)
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 fb1a 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d008      	beq.n	8005c54 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e10e      	b.n	8005e64 <HAL_I2C_Mem_Read+0x440>
 8005c46:	bf00      	nop
 8005c48:	00100002 	.word	0x00100002
 8005c4c:	ffff0000 	.word	0xffff0000
 8005c50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691a      	ldr	r2, [r3, #16]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cc8:	e0b8      	b.n	8005e3c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	4966      	ldr	r1, [pc, #408]	; (8005e6c <HAL_I2C_Mem_Read+0x448>)
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 facb 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e0bf      	b.n	8005e64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691a      	ldr	r2, [r3, #16]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	494f      	ldr	r1, [pc, #316]	; (8005e6c <HAL_I2C_Mem_Read+0x448>)
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 fa9d 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e091      	b.n	8005e64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005db4:	e042      	b.n	8005e3c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 fbb0 	bl	8006520 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e04c      	b.n	8005e64 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de6:	3b01      	subs	r3, #1
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d118      	bne.n	8005e3c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	691a      	ldr	r2, [r3, #16]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	b2d2      	uxtb	r2, r2
 8005e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f47f aec2 	bne.w	8005bca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	e000      	b.n	8005e64 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005e62:	2302      	movs	r3, #2
  }
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3728      	adds	r7, #40	; 0x28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	00010004 	.word	0x00010004

08005e70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b088      	sub	sp, #32
 8005e74:	af02      	add	r7, sp, #8
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	607a      	str	r2, [r7, #4]
 8005e7a:	603b      	str	r3, [r7, #0]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d006      	beq.n	8005e9a <I2C_MasterRequestWrite+0x2a>
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d003      	beq.n	8005e9a <I2C_MasterRequestWrite+0x2a>
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e98:	d108      	bne.n	8005eac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	e00b      	b.n	8005ec4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb0:	2b12      	cmp	r3, #18
 8005eb2:	d107      	bne.n	8005ec4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ec2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f9cd 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00d      	beq.n	8005ef8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eea:	d103      	bne.n	8005ef4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ef2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e035      	b.n	8005f64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f00:	d108      	bne.n	8005f14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f02:	897b      	ldrh	r3, [r7, #10]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	461a      	mov	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f10:	611a      	str	r2, [r3, #16]
 8005f12:	e01b      	b.n	8005f4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f14:	897b      	ldrh	r3, [r7, #10]
 8005f16:	11db      	asrs	r3, r3, #7
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	f003 0306 	and.w	r3, r3, #6
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	f063 030f 	orn	r3, r3, #15
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	490e      	ldr	r1, [pc, #56]	; (8005f6c <I2C_MasterRequestWrite+0xfc>)
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 f9f3 	bl	800631e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e010      	b.n	8005f64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f42:	897b      	ldrh	r3, [r7, #10]
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	4907      	ldr	r1, [pc, #28]	; (8005f70 <I2C_MasterRequestWrite+0x100>)
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 f9e3 	bl	800631e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	00010008 	.word	0x00010008
 8005f70:	00010002 	.word	0x00010002

08005f74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	4611      	mov	r1, r2
 8005f80:	461a      	mov	r2, r3
 8005f82:	4603      	mov	r3, r0
 8005f84:	817b      	strh	r3, [r7, #10]
 8005f86:	460b      	mov	r3, r1
 8005f88:	813b      	strh	r3, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f960 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00d      	beq.n	8005fd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fc4:	d103      	bne.n	8005fce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e05f      	b.n	8006092 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fd2:	897b      	ldrh	r3, [r7, #10]
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fe0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	6a3a      	ldr	r2, [r7, #32]
 8005fe6:	492d      	ldr	r1, [pc, #180]	; (800609c <I2C_RequestMemoryWrite+0x128>)
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 f998 	bl	800631e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e04c      	b.n	8006092 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800600e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006010:	6a39      	ldr	r1, [r7, #32]
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 fa02 	bl	800641c <I2C_WaitOnTXEFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00d      	beq.n	800603a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	2b04      	cmp	r3, #4
 8006024:	d107      	bne.n	8006036 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006034:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e02b      	b.n	8006092 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800603a:	88fb      	ldrh	r3, [r7, #6]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d105      	bne.n	800604c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006040:	893b      	ldrh	r3, [r7, #8]
 8006042:	b2da      	uxtb	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	611a      	str	r2, [r3, #16]
 800604a:	e021      	b.n	8006090 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800604c:	893b      	ldrh	r3, [r7, #8]
 800604e:	0a1b      	lsrs	r3, r3, #8
 8006050:	b29b      	uxth	r3, r3
 8006052:	b2da      	uxtb	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800605a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800605c:	6a39      	ldr	r1, [r7, #32]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 f9dc 	bl	800641c <I2C_WaitOnTXEFlagUntilTimeout>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00d      	beq.n	8006086 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	2b04      	cmp	r3, #4
 8006070:	d107      	bne.n	8006082 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006080:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e005      	b.n	8006092 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006086:	893b      	ldrh	r3, [r7, #8]
 8006088:	b2da      	uxtb	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	00010002 	.word	0x00010002

080060a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b088      	sub	sp, #32
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	4608      	mov	r0, r1
 80060aa:	4611      	mov	r1, r2
 80060ac:	461a      	mov	r2, r3
 80060ae:	4603      	mov	r3, r0
 80060b0:	817b      	strh	r3, [r7, #10]
 80060b2:	460b      	mov	r3, r1
 80060b4:	813b      	strh	r3, [r7, #8]
 80060b6:	4613      	mov	r3, r2
 80060b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 f8c2 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00d      	beq.n	800610e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006100:	d103      	bne.n	800610a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006108:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e0aa      	b.n	8006264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800610e:	897b      	ldrh	r3, [r7, #10]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800611c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	6a3a      	ldr	r2, [r7, #32]
 8006122:	4952      	ldr	r1, [pc, #328]	; (800626c <I2C_RequestMemoryRead+0x1cc>)
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 f8fa 	bl	800631e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e097      	b.n	8006264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006134:	2300      	movs	r3, #0
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800614a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614c:	6a39      	ldr	r1, [r7, #32]
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 f964 	bl	800641c <I2C_WaitOnTXEFlagUntilTimeout>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00d      	beq.n	8006176 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	2b04      	cmp	r3, #4
 8006160:	d107      	bne.n	8006172 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006170:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e076      	b.n	8006264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006176:	88fb      	ldrh	r3, [r7, #6]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d105      	bne.n	8006188 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800617c:	893b      	ldrh	r3, [r7, #8]
 800617e:	b2da      	uxtb	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	611a      	str	r2, [r3, #16]
 8006186:	e021      	b.n	80061cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006188:	893b      	ldrh	r3, [r7, #8]
 800618a:	0a1b      	lsrs	r3, r3, #8
 800618c:	b29b      	uxth	r3, r3
 800618e:	b2da      	uxtb	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006198:	6a39      	ldr	r1, [r7, #32]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f93e 	bl	800641c <I2C_WaitOnTXEFlagUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00d      	beq.n	80061c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d107      	bne.n	80061be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e050      	b.n	8006264 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061c2:	893b      	ldrh	r3, [r7, #8]
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ce:	6a39      	ldr	r1, [r7, #32]
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 f923 	bl	800641c <I2C_WaitOnTXEFlagUntilTimeout>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00d      	beq.n	80061f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d107      	bne.n	80061f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e035      	b.n	8006264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006206:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	2200      	movs	r2, #0
 8006210:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f82b 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00d      	beq.n	800623c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800622e:	d103      	bne.n	8006238 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006236:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e013      	b.n	8006264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800623c:	897b      	ldrh	r3, [r7, #10]
 800623e:	b2db      	uxtb	r3, r3
 8006240:	f043 0301 	orr.w	r3, r3, #1
 8006244:	b2da      	uxtb	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	6a3a      	ldr	r2, [r7, #32]
 8006250:	4906      	ldr	r1, [pc, #24]	; (800626c <I2C_RequestMemoryRead+0x1cc>)
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 f863 	bl	800631e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	00010002 	.word	0x00010002

08006270 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	4613      	mov	r3, r2
 800627e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006280:	e025      	b.n	80062ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006288:	d021      	beq.n	80062ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628a:	f7fe f959 	bl	8004540 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d302      	bcc.n	80062a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d116      	bne.n	80062ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	f043 0220 	orr.w	r2, r3, #32
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e023      	b.n	8006316 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	0c1b      	lsrs	r3, r3, #16
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d10d      	bne.n	80062f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	43da      	mvns	r2, r3
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	4013      	ands	r3, r2
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	bf0c      	ite	eq
 80062ea:	2301      	moveq	r3, #1
 80062ec:	2300      	movne	r3, #0
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	461a      	mov	r2, r3
 80062f2:	e00c      	b.n	800630e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	43da      	mvns	r2, r3
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	4013      	ands	r3, r2
 8006300:	b29b      	uxth	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	bf0c      	ite	eq
 8006306:	2301      	moveq	r3, #1
 8006308:	2300      	movne	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	429a      	cmp	r2, r3
 8006312:	d0b6      	beq.n	8006282 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b084      	sub	sp, #16
 8006322:	af00      	add	r7, sp, #0
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	607a      	str	r2, [r7, #4]
 800632a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800632c:	e051      	b.n	80063d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800633c:	d123      	bne.n	8006386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800634c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006356:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	f043 0204 	orr.w	r2, r3, #4
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e046      	b.n	8006414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638c:	d021      	beq.n	80063d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800638e:	f7fe f8d7 	bl	8004540 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	429a      	cmp	r2, r3
 800639c:	d302      	bcc.n	80063a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d116      	bne.n	80063d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	f043 0220 	orr.w	r2, r3, #32
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e020      	b.n	8006414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	0c1b      	lsrs	r3, r3, #16
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d10c      	bne.n	80063f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	43da      	mvns	r2, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	4013      	ands	r3, r2
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	bf14      	ite	ne
 80063ee:	2301      	movne	r3, #1
 80063f0:	2300      	moveq	r3, #0
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	e00b      	b.n	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	43da      	mvns	r2, r3
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	4013      	ands	r3, r2
 8006402:	b29b      	uxth	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	bf14      	ite	ne
 8006408:	2301      	movne	r3, #1
 800640a:	2300      	moveq	r3, #0
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d18d      	bne.n	800632e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006428:	e02d      	b.n	8006486 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 f8ce 	bl	80065cc <I2C_IsAcknowledgeFailed>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e02d      	b.n	8006496 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d021      	beq.n	8006486 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006442:	f7fe f87d 	bl	8004540 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	429a      	cmp	r2, r3
 8006450:	d302      	bcc.n	8006458 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d116      	bne.n	8006486 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2220      	movs	r2, #32
 8006462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	f043 0220 	orr.w	r2, r3, #32
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e007      	b.n	8006496 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006490:	2b80      	cmp	r3, #128	; 0x80
 8006492:	d1ca      	bne.n	800642a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064aa:	e02d      	b.n	8006508 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 f88d 	bl	80065cc <I2C_IsAcknowledgeFailed>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e02d      	b.n	8006518 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c2:	d021      	beq.n	8006508 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064c4:	f7fe f83c 	bl	8004540 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d302      	bcc.n	80064da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d116      	bne.n	8006508 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f4:	f043 0220 	orr.w	r2, r3, #32
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e007      	b.n	8006518 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b04      	cmp	r3, #4
 8006514:	d1ca      	bne.n	80064ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800652c:	e042      	b.n	80065b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b10      	cmp	r3, #16
 800653a:	d119      	bne.n	8006570 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f06f 0210 	mvn.w	r2, #16
 8006544:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2220      	movs	r2, #32
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e029      	b.n	80065c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006570:	f7fd ffe6 	bl	8004540 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	429a      	cmp	r2, r3
 800657e:	d302      	bcc.n	8006586 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d116      	bne.n	80065b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	f043 0220 	orr.w	r2, r3, #32
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e007      	b.n	80065c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065be:	2b40      	cmp	r3, #64	; 0x40
 80065c0:	d1b5      	bne.n	800652e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065e2:	d11b      	bne.n	800661c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	f043 0204 	orr.w	r2, r3, #4
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
	...

0800662c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e264      	b.n	8006b08 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d075      	beq.n	8006736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800664a:	4ba3      	ldr	r3, [pc, #652]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 030c 	and.w	r3, r3, #12
 8006652:	2b04      	cmp	r3, #4
 8006654:	d00c      	beq.n	8006670 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006656:	4ba0      	ldr	r3, [pc, #640]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800665e:	2b08      	cmp	r3, #8
 8006660:	d112      	bne.n	8006688 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006662:	4b9d      	ldr	r3, [pc, #628]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800666a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800666e:	d10b      	bne.n	8006688 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006670:	4b99      	ldr	r3, [pc, #612]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d05b      	beq.n	8006734 <HAL_RCC_OscConfig+0x108>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d157      	bne.n	8006734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e23f      	b.n	8006b08 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006690:	d106      	bne.n	80066a0 <HAL_RCC_OscConfig+0x74>
 8006692:	4b91      	ldr	r3, [pc, #580]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a90      	ldr	r2, [pc, #576]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 8006698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	e01d      	b.n	80066dc <HAL_RCC_OscConfig+0xb0>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066a8:	d10c      	bne.n	80066c4 <HAL_RCC_OscConfig+0x98>
 80066aa:	4b8b      	ldr	r3, [pc, #556]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a8a      	ldr	r2, [pc, #552]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 80066b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	4b88      	ldr	r3, [pc, #544]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a87      	ldr	r2, [pc, #540]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 80066bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	e00b      	b.n	80066dc <HAL_RCC_OscConfig+0xb0>
 80066c4:	4b84      	ldr	r3, [pc, #528]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a83      	ldr	r2, [pc, #524]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 80066ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	4b81      	ldr	r3, [pc, #516]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a80      	ldr	r2, [pc, #512]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 80066d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d013      	beq.n	800670c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e4:	f7fd ff2c 	bl	8004540 <HAL_GetTick>
 80066e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ea:	e008      	b.n	80066fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066ec:	f7fd ff28 	bl	8004540 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b64      	cmp	r3, #100	; 0x64
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e204      	b.n	8006b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066fe:	4b76      	ldr	r3, [pc, #472]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0f0      	beq.n	80066ec <HAL_RCC_OscConfig+0xc0>
 800670a:	e014      	b.n	8006736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800670c:	f7fd ff18 	bl	8004540 <HAL_GetTick>
 8006710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006712:	e008      	b.n	8006726 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006714:	f7fd ff14 	bl	8004540 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b64      	cmp	r3, #100	; 0x64
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e1f0      	b.n	8006b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006726:	4b6c      	ldr	r3, [pc, #432]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1f0      	bne.n	8006714 <HAL_RCC_OscConfig+0xe8>
 8006732:	e000      	b.n	8006736 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d063      	beq.n	800680a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006742:	4b65      	ldr	r3, [pc, #404]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 030c 	and.w	r3, r3, #12
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00b      	beq.n	8006766 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800674e:	4b62      	ldr	r3, [pc, #392]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006756:	2b08      	cmp	r3, #8
 8006758:	d11c      	bne.n	8006794 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800675a:	4b5f      	ldr	r3, [pc, #380]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d116      	bne.n	8006794 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006766:	4b5c      	ldr	r3, [pc, #368]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d005      	beq.n	800677e <HAL_RCC_OscConfig+0x152>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d001      	beq.n	800677e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e1c4      	b.n	8006b08 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800677e:	4b56      	ldr	r3, [pc, #344]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	4952      	ldr	r1, [pc, #328]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 800678e:	4313      	orrs	r3, r2
 8006790:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006792:	e03a      	b.n	800680a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d020      	beq.n	80067de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800679c:	4b4f      	ldr	r3, [pc, #316]	; (80068dc <HAL_RCC_OscConfig+0x2b0>)
 800679e:	2201      	movs	r2, #1
 80067a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a2:	f7fd fecd 	bl	8004540 <HAL_GetTick>
 80067a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067a8:	e008      	b.n	80067bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067aa:	f7fd fec9 	bl	8004540 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e1a5      	b.n	8006b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067bc:	4b46      	ldr	r3, [pc, #280]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0f0      	beq.n	80067aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067c8:	4b43      	ldr	r3, [pc, #268]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	4940      	ldr	r1, [pc, #256]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	600b      	str	r3, [r1, #0]
 80067dc:	e015      	b.n	800680a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067de:	4b3f      	ldr	r3, [pc, #252]	; (80068dc <HAL_RCC_OscConfig+0x2b0>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e4:	f7fd feac 	bl	8004540 <HAL_GetTick>
 80067e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067ec:	f7fd fea8 	bl	8004540 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e184      	b.n	8006b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067fe:	4b36      	ldr	r3, [pc, #216]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1f0      	bne.n	80067ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0308 	and.w	r3, r3, #8
 8006812:	2b00      	cmp	r3, #0
 8006814:	d030      	beq.n	8006878 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d016      	beq.n	800684c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800681e:	4b30      	ldr	r3, [pc, #192]	; (80068e0 <HAL_RCC_OscConfig+0x2b4>)
 8006820:	2201      	movs	r2, #1
 8006822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006824:	f7fd fe8c 	bl	8004540 <HAL_GetTick>
 8006828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800682c:	f7fd fe88 	bl	8004540 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e164      	b.n	8006b08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800683e:	4b26      	ldr	r3, [pc, #152]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 8006840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0f0      	beq.n	800682c <HAL_RCC_OscConfig+0x200>
 800684a:	e015      	b.n	8006878 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800684c:	4b24      	ldr	r3, [pc, #144]	; (80068e0 <HAL_RCC_OscConfig+0x2b4>)
 800684e:	2200      	movs	r2, #0
 8006850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006852:	f7fd fe75 	bl	8004540 <HAL_GetTick>
 8006856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006858:	e008      	b.n	800686c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800685a:	f7fd fe71 	bl	8004540 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	2b02      	cmp	r3, #2
 8006866:	d901      	bls.n	800686c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e14d      	b.n	8006b08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800686c:	4b1a      	ldr	r3, [pc, #104]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 800686e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1f0      	bne.n	800685a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 80a0 	beq.w	80069c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006886:	2300      	movs	r3, #0
 8006888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800688a:	4b13      	ldr	r3, [pc, #76]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10f      	bne.n	80068b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006896:	2300      	movs	r3, #0
 8006898:	60bb      	str	r3, [r7, #8]
 800689a:	4b0f      	ldr	r3, [pc, #60]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	4a0e      	ldr	r2, [pc, #56]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 80068a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068a4:	6413      	str	r3, [r2, #64]	; 0x40
 80068a6:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <HAL_RCC_OscConfig+0x2ac>)
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ae:	60bb      	str	r3, [r7, #8]
 80068b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068b2:	2301      	movs	r3, #1
 80068b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b6:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <HAL_RCC_OscConfig+0x2b8>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d121      	bne.n	8006906 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068c2:	4b08      	ldr	r3, [pc, #32]	; (80068e4 <HAL_RCC_OscConfig+0x2b8>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a07      	ldr	r2, [pc, #28]	; (80068e4 <HAL_RCC_OscConfig+0x2b8>)
 80068c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068ce:	f7fd fe37 	bl	8004540 <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068d4:	e011      	b.n	80068fa <HAL_RCC_OscConfig+0x2ce>
 80068d6:	bf00      	nop
 80068d8:	40023800 	.word	0x40023800
 80068dc:	42470000 	.word	0x42470000
 80068e0:	42470e80 	.word	0x42470e80
 80068e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e8:	f7fd fe2a 	bl	8004540 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e106      	b.n	8006b08 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068fa:	4b85      	ldr	r3, [pc, #532]	; (8006b10 <HAL_RCC_OscConfig+0x4e4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0f0      	beq.n	80068e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d106      	bne.n	800691c <HAL_RCC_OscConfig+0x2f0>
 800690e:	4b81      	ldr	r3, [pc, #516]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 8006910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006912:	4a80      	ldr	r2, [pc, #512]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 8006914:	f043 0301 	orr.w	r3, r3, #1
 8006918:	6713      	str	r3, [r2, #112]	; 0x70
 800691a:	e01c      	b.n	8006956 <HAL_RCC_OscConfig+0x32a>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	2b05      	cmp	r3, #5
 8006922:	d10c      	bne.n	800693e <HAL_RCC_OscConfig+0x312>
 8006924:	4b7b      	ldr	r3, [pc, #492]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 8006926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006928:	4a7a      	ldr	r2, [pc, #488]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 800692a:	f043 0304 	orr.w	r3, r3, #4
 800692e:	6713      	str	r3, [r2, #112]	; 0x70
 8006930:	4b78      	ldr	r3, [pc, #480]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 8006932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006934:	4a77      	ldr	r2, [pc, #476]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 8006936:	f043 0301 	orr.w	r3, r3, #1
 800693a:	6713      	str	r3, [r2, #112]	; 0x70
 800693c:	e00b      	b.n	8006956 <HAL_RCC_OscConfig+0x32a>
 800693e:	4b75      	ldr	r3, [pc, #468]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 8006940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006942:	4a74      	ldr	r2, [pc, #464]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 8006944:	f023 0301 	bic.w	r3, r3, #1
 8006948:	6713      	str	r3, [r2, #112]	; 0x70
 800694a:	4b72      	ldr	r3, [pc, #456]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 800694c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694e:	4a71      	ldr	r2, [pc, #452]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 8006950:	f023 0304 	bic.w	r3, r3, #4
 8006954:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d015      	beq.n	800698a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800695e:	f7fd fdef 	bl	8004540 <HAL_GetTick>
 8006962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006964:	e00a      	b.n	800697c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006966:	f7fd fdeb 	bl	8004540 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	f241 3288 	movw	r2, #5000	; 0x1388
 8006974:	4293      	cmp	r3, r2
 8006976:	d901      	bls.n	800697c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e0c5      	b.n	8006b08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800697c:	4b65      	ldr	r3, [pc, #404]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 800697e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0ee      	beq.n	8006966 <HAL_RCC_OscConfig+0x33a>
 8006988:	e014      	b.n	80069b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800698a:	f7fd fdd9 	bl	8004540 <HAL_GetTick>
 800698e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006990:	e00a      	b.n	80069a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006992:	f7fd fdd5 	bl	8004540 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	f241 3288 	movw	r2, #5000	; 0x1388
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e0af      	b.n	8006b08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069a8:	4b5a      	ldr	r3, [pc, #360]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 80069aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1ee      	bne.n	8006992 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069b4:	7dfb      	ldrb	r3, [r7, #23]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d105      	bne.n	80069c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069ba:	4b56      	ldr	r3, [pc, #344]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	4a55      	ldr	r2, [pc, #340]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 80069c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 809b 	beq.w	8006b06 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069d0:	4b50      	ldr	r3, [pc, #320]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f003 030c 	and.w	r3, r3, #12
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d05c      	beq.n	8006a96 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d141      	bne.n	8006a68 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069e4:	4b4c      	ldr	r3, [pc, #304]	; (8006b18 <HAL_RCC_OscConfig+0x4ec>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ea:	f7fd fda9 	bl	8004540 <HAL_GetTick>
 80069ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069f0:	e008      	b.n	8006a04 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069f2:	f7fd fda5 	bl	8004540 <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d901      	bls.n	8006a04 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e081      	b.n	8006b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a04:	4b43      	ldr	r3, [pc, #268]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1f0      	bne.n	80069f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	69da      	ldr	r2, [r3, #28]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	019b      	lsls	r3, r3, #6
 8006a20:	431a      	orrs	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a26:	085b      	lsrs	r3, r3, #1
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	041b      	lsls	r3, r3, #16
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a32:	061b      	lsls	r3, r3, #24
 8006a34:	4937      	ldr	r1, [pc, #220]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a3a:	4b37      	ldr	r3, [pc, #220]	; (8006b18 <HAL_RCC_OscConfig+0x4ec>)
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a40:	f7fd fd7e 	bl	8004540 <HAL_GetTick>
 8006a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a46:	e008      	b.n	8006a5a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a48:	f7fd fd7a 	bl	8004540 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e056      	b.n	8006b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a5a:	4b2e      	ldr	r3, [pc, #184]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0f0      	beq.n	8006a48 <HAL_RCC_OscConfig+0x41c>
 8006a66:	e04e      	b.n	8006b06 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a68:	4b2b      	ldr	r3, [pc, #172]	; (8006b18 <HAL_RCC_OscConfig+0x4ec>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a6e:	f7fd fd67 	bl	8004540 <HAL_GetTick>
 8006a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a74:	e008      	b.n	8006a88 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a76:	f7fd fd63 	bl	8004540 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d901      	bls.n	8006a88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e03f      	b.n	8006b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a88:	4b22      	ldr	r3, [pc, #136]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1f0      	bne.n	8006a76 <HAL_RCC_OscConfig+0x44a>
 8006a94:	e037      	b.n	8006b06 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d101      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e032      	b.n	8006b08 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006aa2:	4b1c      	ldr	r3, [pc, #112]	; (8006b14 <HAL_RCC_OscConfig+0x4e8>)
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d028      	beq.n	8006b02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d121      	bne.n	8006b02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d11a      	bne.n	8006b02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ad8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d111      	bne.n	8006b02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae8:	085b      	lsrs	r3, r3, #1
 8006aea:	3b01      	subs	r3, #1
 8006aec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d107      	bne.n	8006b02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d001      	beq.n	8006b06 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e000      	b.n	8006b08 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	40007000 	.word	0x40007000
 8006b14:	40023800 	.word	0x40023800
 8006b18:	42470060 	.word	0x42470060

08006b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e0cc      	b.n	8006cca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b30:	4b68      	ldr	r3, [pc, #416]	; (8006cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d90c      	bls.n	8006b58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b3e:	4b65      	ldr	r3, [pc, #404]	; (8006cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b46:	4b63      	ldr	r3, [pc, #396]	; (8006cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0307 	and.w	r3, r3, #7
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d001      	beq.n	8006b58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e0b8      	b.n	8006cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d020      	beq.n	8006ba6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d005      	beq.n	8006b7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b70:	4b59      	ldr	r3, [pc, #356]	; (8006cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	4a58      	ldr	r2, [pc, #352]	; (8006cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b88:	4b53      	ldr	r3, [pc, #332]	; (8006cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	4a52      	ldr	r2, [pc, #328]	; (8006cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b94:	4b50      	ldr	r3, [pc, #320]	; (8006cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	494d      	ldr	r1, [pc, #308]	; (8006cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d044      	beq.n	8006c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d107      	bne.n	8006bca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bba:	4b47      	ldr	r3, [pc, #284]	; (8006cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d119      	bne.n	8006bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e07f      	b.n	8006cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d003      	beq.n	8006bda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	d107      	bne.n	8006bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bda:	4b3f      	ldr	r3, [pc, #252]	; (8006cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d109      	bne.n	8006bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e06f      	b.n	8006cca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bea:	4b3b      	ldr	r3, [pc, #236]	; (8006cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e067      	b.n	8006cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bfa:	4b37      	ldr	r3, [pc, #220]	; (8006cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f023 0203 	bic.w	r2, r3, #3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	4934      	ldr	r1, [pc, #208]	; (8006cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c0c:	f7fd fc98 	bl	8004540 <HAL_GetTick>
 8006c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c12:	e00a      	b.n	8006c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c14:	f7fd fc94 	bl	8004540 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e04f      	b.n	8006cca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c2a:	4b2b      	ldr	r3, [pc, #172]	; (8006cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f003 020c 	and.w	r2, r3, #12
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d1eb      	bne.n	8006c14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c3c:	4b25      	ldr	r3, [pc, #148]	; (8006cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0307 	and.w	r3, r3, #7
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d20c      	bcs.n	8006c64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c4a:	4b22      	ldr	r3, [pc, #136]	; (8006cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c52:	4b20      	ldr	r3, [pc, #128]	; (8006cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0307 	and.w	r3, r3, #7
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d001      	beq.n	8006c64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e032      	b.n	8006cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d008      	beq.n	8006c82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c70:	4b19      	ldr	r3, [pc, #100]	; (8006cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	4916      	ldr	r1, [pc, #88]	; (8006cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d009      	beq.n	8006ca2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c8e:	4b12      	ldr	r3, [pc, #72]	; (8006cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	490e      	ldr	r1, [pc, #56]	; (8006cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ca2:	f000 f821 	bl	8006ce8 <HAL_RCC_GetSysClockFreq>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	4b0b      	ldr	r3, [pc, #44]	; (8006cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	091b      	lsrs	r3, r3, #4
 8006cae:	f003 030f 	and.w	r3, r3, #15
 8006cb2:	490a      	ldr	r1, [pc, #40]	; (8006cdc <HAL_RCC_ClockConfig+0x1c0>)
 8006cb4:	5ccb      	ldrb	r3, [r1, r3]
 8006cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cba:	4a09      	ldr	r2, [pc, #36]	; (8006ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8006cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006cbe:	4b09      	ldr	r3, [pc, #36]	; (8006ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fd fbf8 	bl	80044b8 <HAL_InitTick>

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	40023c00 	.word	0x40023c00
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	0800dfd0 	.word	0x0800dfd0
 8006ce0:	2000000c 	.word	0x2000000c
 8006ce4:	20000010 	.word	0x20000010

08006ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ce8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	607b      	str	r3, [r7, #4]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d00:	4b67      	ldr	r3, [pc, #412]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f003 030c 	and.w	r3, r3, #12
 8006d08:	2b08      	cmp	r3, #8
 8006d0a:	d00d      	beq.n	8006d28 <HAL_RCC_GetSysClockFreq+0x40>
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	f200 80bd 	bhi.w	8006e8c <HAL_RCC_GetSysClockFreq+0x1a4>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <HAL_RCC_GetSysClockFreq+0x34>
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	d003      	beq.n	8006d22 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d1a:	e0b7      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d1c:	4b61      	ldr	r3, [pc, #388]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006d1e:	60bb      	str	r3, [r7, #8]
       break;
 8006d20:	e0b7      	b.n	8006e92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d22:	4b61      	ldr	r3, [pc, #388]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006d24:	60bb      	str	r3, [r7, #8]
      break;
 8006d26:	e0b4      	b.n	8006e92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d28:	4b5d      	ldr	r3, [pc, #372]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d32:	4b5b      	ldr	r3, [pc, #364]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d04d      	beq.n	8006dda <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d3e:	4b58      	ldr	r3, [pc, #352]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	099b      	lsrs	r3, r3, #6
 8006d44:	461a      	mov	r2, r3
 8006d46:	f04f 0300 	mov.w	r3, #0
 8006d4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006d4e:	f04f 0100 	mov.w	r1, #0
 8006d52:	ea02 0800 	and.w	r8, r2, r0
 8006d56:	ea03 0901 	and.w	r9, r3, r1
 8006d5a:	4640      	mov	r0, r8
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	f04f 0200 	mov.w	r2, #0
 8006d62:	f04f 0300 	mov.w	r3, #0
 8006d66:	014b      	lsls	r3, r1, #5
 8006d68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006d6c:	0142      	lsls	r2, r0, #5
 8006d6e:	4610      	mov	r0, r2
 8006d70:	4619      	mov	r1, r3
 8006d72:	ebb0 0008 	subs.w	r0, r0, r8
 8006d76:	eb61 0109 	sbc.w	r1, r1, r9
 8006d7a:	f04f 0200 	mov.w	r2, #0
 8006d7e:	f04f 0300 	mov.w	r3, #0
 8006d82:	018b      	lsls	r3, r1, #6
 8006d84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006d88:	0182      	lsls	r2, r0, #6
 8006d8a:	1a12      	subs	r2, r2, r0
 8006d8c:	eb63 0301 	sbc.w	r3, r3, r1
 8006d90:	f04f 0000 	mov.w	r0, #0
 8006d94:	f04f 0100 	mov.w	r1, #0
 8006d98:	00d9      	lsls	r1, r3, #3
 8006d9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d9e:	00d0      	lsls	r0, r2, #3
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	eb12 0208 	adds.w	r2, r2, r8
 8006da8:	eb43 0309 	adc.w	r3, r3, r9
 8006dac:	f04f 0000 	mov.w	r0, #0
 8006db0:	f04f 0100 	mov.w	r1, #0
 8006db4:	0259      	lsls	r1, r3, #9
 8006db6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006dba:	0250      	lsls	r0, r2, #9
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	f7f9 ff5c 	bl	8000c88 <__aeabi_uldivmod>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]
 8006dd8:	e04a      	b.n	8006e70 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dda:	4b31      	ldr	r3, [pc, #196]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	099b      	lsrs	r3, r3, #6
 8006de0:	461a      	mov	r2, r3
 8006de2:	f04f 0300 	mov.w	r3, #0
 8006de6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006dea:	f04f 0100 	mov.w	r1, #0
 8006dee:	ea02 0400 	and.w	r4, r2, r0
 8006df2:	ea03 0501 	and.w	r5, r3, r1
 8006df6:	4620      	mov	r0, r4
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	014b      	lsls	r3, r1, #5
 8006e04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e08:	0142      	lsls	r2, r0, #5
 8006e0a:	4610      	mov	r0, r2
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	1b00      	subs	r0, r0, r4
 8006e10:	eb61 0105 	sbc.w	r1, r1, r5
 8006e14:	f04f 0200 	mov.w	r2, #0
 8006e18:	f04f 0300 	mov.w	r3, #0
 8006e1c:	018b      	lsls	r3, r1, #6
 8006e1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e22:	0182      	lsls	r2, r0, #6
 8006e24:	1a12      	subs	r2, r2, r0
 8006e26:	eb63 0301 	sbc.w	r3, r3, r1
 8006e2a:	f04f 0000 	mov.w	r0, #0
 8006e2e:	f04f 0100 	mov.w	r1, #0
 8006e32:	00d9      	lsls	r1, r3, #3
 8006e34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e38:	00d0      	lsls	r0, r2, #3
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	1912      	adds	r2, r2, r4
 8006e40:	eb45 0303 	adc.w	r3, r5, r3
 8006e44:	f04f 0000 	mov.w	r0, #0
 8006e48:	f04f 0100 	mov.w	r1, #0
 8006e4c:	0299      	lsls	r1, r3, #10
 8006e4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006e52:	0290      	lsls	r0, r2, #10
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4610      	mov	r0, r2
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f04f 0300 	mov.w	r3, #0
 8006e64:	f7f9 ff10 	bl	8000c88 <__aeabi_uldivmod>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e70:	4b0b      	ldr	r3, [pc, #44]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	0c1b      	lsrs	r3, r3, #16
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e88:	60bb      	str	r3, [r7, #8]
      break;
 8006e8a:	e002      	b.n	8006e92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e8c:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006e8e:	60bb      	str	r3, [r7, #8]
      break;
 8006e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e92:	68bb      	ldr	r3, [r7, #8]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006e9e:	bf00      	nop
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	00f42400 	.word	0x00f42400
 8006ea8:	007a1200 	.word	0x007a1200

08006eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eac:	b480      	push	{r7}
 8006eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006eb0:	4b03      	ldr	r3, [pc, #12]	; (8006ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	2000000c 	.word	0x2000000c

08006ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ec8:	f7ff fff0 	bl	8006eac <HAL_RCC_GetHCLKFreq>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	0a9b      	lsrs	r3, r3, #10
 8006ed4:	f003 0307 	and.w	r3, r3, #7
 8006ed8:	4903      	ldr	r1, [pc, #12]	; (8006ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006eda:	5ccb      	ldrb	r3, [r1, r3]
 8006edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	0800dfe0 	.word	0x0800dfe0

08006eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ef0:	f7ff ffdc 	bl	8006eac <HAL_RCC_GetHCLKFreq>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	0b5b      	lsrs	r3, r3, #13
 8006efc:	f003 0307 	and.w	r3, r3, #7
 8006f00:	4903      	ldr	r1, [pc, #12]	; (8006f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f02:	5ccb      	ldrb	r3, [r1, r3]
 8006f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	40023800 	.word	0x40023800
 8006f10:	0800dfe0 	.word	0x0800dfe0

08006f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e07b      	b.n	800701e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d108      	bne.n	8006f40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f36:	d009      	beq.n	8006f4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	61da      	str	r2, [r3, #28]
 8006f3e:	e005      	b.n	8006f4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d106      	bne.n	8006f6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7fc fd8a 	bl	8003a80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f94:	431a      	orrs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd0:	ea42 0103 	orr.w	r1, r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	0c1b      	lsrs	r3, r3, #16
 8006fea:	f003 0104 	and.w	r1, r3, #4
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff2:	f003 0210 	and.w	r2, r3, #16
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69da      	ldr	r2, [r3, #28]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800700c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b088      	sub	sp, #32
 800702a:	af00      	add	r7, sp, #0
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	603b      	str	r3, [r7, #0]
 8007032:	4613      	mov	r3, r2
 8007034:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007040:	2b01      	cmp	r3, #1
 8007042:	d101      	bne.n	8007048 <HAL_SPI_Transmit+0x22>
 8007044:	2302      	movs	r3, #2
 8007046:	e126      	b.n	8007296 <HAL_SPI_Transmit+0x270>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007050:	f7fd fa76 	bl	8004540 <HAL_GetTick>
 8007054:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007056:	88fb      	ldrh	r3, [r7, #6]
 8007058:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b01      	cmp	r3, #1
 8007064:	d002      	beq.n	800706c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007066:	2302      	movs	r3, #2
 8007068:	77fb      	strb	r3, [r7, #31]
    goto error;
 800706a:	e10b      	b.n	8007284 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <HAL_SPI_Transmit+0x52>
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d102      	bne.n	800707e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800707c:	e102      	b.n	8007284 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2203      	movs	r2, #3
 8007082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	88fa      	ldrh	r2, [r7, #6]
 8007096:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	88fa      	ldrh	r2, [r7, #6]
 800709c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070c4:	d10f      	bne.n	80070e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f0:	2b40      	cmp	r3, #64	; 0x40
 80070f2:	d007      	beq.n	8007104 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007102:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800710c:	d14b      	bne.n	80071a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <HAL_SPI_Transmit+0xf6>
 8007116:	8afb      	ldrh	r3, [r7, #22]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d13e      	bne.n	800719a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007120:	881a      	ldrh	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712c:	1c9a      	adds	r2, r3, #2
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007136:	b29b      	uxth	r3, r3
 8007138:	3b01      	subs	r3, #1
 800713a:	b29a      	uxth	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007140:	e02b      	b.n	800719a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	2b02      	cmp	r3, #2
 800714e:	d112      	bne.n	8007176 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007154:	881a      	ldrh	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007160:	1c9a      	adds	r2, r3, #2
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800716a:	b29b      	uxth	r3, r3
 800716c:	3b01      	subs	r3, #1
 800716e:	b29a      	uxth	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	86da      	strh	r2, [r3, #54]	; 0x36
 8007174:	e011      	b.n	800719a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007176:	f7fd f9e3 	bl	8004540 <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	429a      	cmp	r2, r3
 8007184:	d803      	bhi.n	800718e <HAL_SPI_Transmit+0x168>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718c:	d102      	bne.n	8007194 <HAL_SPI_Transmit+0x16e>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d102      	bne.n	800719a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007198:	e074      	b.n	8007284 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800719e:	b29b      	uxth	r3, r3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1ce      	bne.n	8007142 <HAL_SPI_Transmit+0x11c>
 80071a4:	e04c      	b.n	8007240 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d002      	beq.n	80071b4 <HAL_SPI_Transmit+0x18e>
 80071ae:	8afb      	ldrh	r3, [r7, #22]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d140      	bne.n	8007236 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	330c      	adds	r3, #12
 80071be:	7812      	ldrb	r2, [r2, #0]
 80071c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	3b01      	subs	r3, #1
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80071da:	e02c      	b.n	8007236 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d113      	bne.n	8007212 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	330c      	adds	r3, #12
 80071f4:	7812      	ldrb	r2, [r2, #0]
 80071f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fc:	1c5a      	adds	r2, r3, #1
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007206:	b29b      	uxth	r3, r3
 8007208:	3b01      	subs	r3, #1
 800720a:	b29a      	uxth	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007210:	e011      	b.n	8007236 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007212:	f7fd f995 	bl	8004540 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	429a      	cmp	r2, r3
 8007220:	d803      	bhi.n	800722a <HAL_SPI_Transmit+0x204>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007228:	d102      	bne.n	8007230 <HAL_SPI_Transmit+0x20a>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d102      	bne.n	8007236 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007234:	e026      	b.n	8007284 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800723a:	b29b      	uxth	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1cd      	bne.n	80071dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 f8b3 	bl	80073b0 <SPI_EndRxTxTransaction>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2220      	movs	r2, #32
 8007254:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10a      	bne.n	8007274 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800725e:	2300      	movs	r3, #0
 8007260:	613b      	str	r3, [r7, #16]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	613b      	str	r3, [r7, #16]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	613b      	str	r3, [r7, #16]
 8007272:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	77fb      	strb	r3, [r7, #31]
 8007280:	e000      	b.n	8007284 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007282:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007294:	7ffb      	ldrb	r3, [r7, #31]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3720      	adds	r7, #32
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	603b      	str	r3, [r7, #0]
 80072ac:	4613      	mov	r3, r2
 80072ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80072b0:	f7fd f946 	bl	8004540 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b8:	1a9b      	subs	r3, r3, r2
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	4413      	add	r3, r2
 80072be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072c0:	f7fd f93e 	bl	8004540 <HAL_GetTick>
 80072c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072c6:	4b39      	ldr	r3, [pc, #228]	; (80073ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	015b      	lsls	r3, r3, #5
 80072cc:	0d1b      	lsrs	r3, r3, #20
 80072ce:	69fa      	ldr	r2, [r7, #28]
 80072d0:	fb02 f303 	mul.w	r3, r2, r3
 80072d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072d6:	e054      	b.n	8007382 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072de:	d050      	beq.n	8007382 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072e0:	f7fd f92e 	bl	8004540 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	69fa      	ldr	r2, [r7, #28]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d902      	bls.n	80072f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d13d      	bne.n	8007372 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007304:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800730e:	d111      	bne.n	8007334 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007318:	d004      	beq.n	8007324 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007322:	d107      	bne.n	8007334 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007332:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800733c:	d10f      	bne.n	800735e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800735c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e017      	b.n	80073a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	3b01      	subs	r3, #1
 8007380:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4013      	ands	r3, r2
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	429a      	cmp	r2, r3
 8007390:	bf0c      	ite	eq
 8007392:	2301      	moveq	r3, #1
 8007394:	2300      	movne	r3, #0
 8007396:	b2db      	uxtb	r3, r3
 8007398:	461a      	mov	r2, r3
 800739a:	79fb      	ldrb	r3, [r7, #7]
 800739c:	429a      	cmp	r2, r3
 800739e:	d19b      	bne.n	80072d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3720      	adds	r7, #32
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	2000000c 	.word	0x2000000c

080073b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b088      	sub	sp, #32
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80073bc:	4b1b      	ldr	r3, [pc, #108]	; (800742c <SPI_EndRxTxTransaction+0x7c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1b      	ldr	r2, [pc, #108]	; (8007430 <SPI_EndRxTxTransaction+0x80>)
 80073c2:	fba2 2303 	umull	r2, r3, r2, r3
 80073c6:	0d5b      	lsrs	r3, r3, #21
 80073c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073cc:	fb02 f303 	mul.w	r3, r2, r3
 80073d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073da:	d112      	bne.n	8007402 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2200      	movs	r2, #0
 80073e4:	2180      	movs	r1, #128	; 0x80
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f7ff ff5a 	bl	80072a0 <SPI_WaitFlagStateUntilTimeout>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d016      	beq.n	8007420 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f6:	f043 0220 	orr.w	r2, r3, #32
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e00f      	b.n	8007422 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00a      	beq.n	800741e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	3b01      	subs	r3, #1
 800740c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007418:	2b80      	cmp	r3, #128	; 0x80
 800741a:	d0f2      	beq.n	8007402 <SPI_EndRxTxTransaction+0x52>
 800741c:	e000      	b.n	8007420 <SPI_EndRxTxTransaction+0x70>
        break;
 800741e:	bf00      	nop
  }

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	2000000c 	.word	0x2000000c
 8007430:	165e9f81 	.word	0x165e9f81

08007434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e041      	b.n	80074ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d106      	bne.n	8007460 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7fc fed2 	bl	8004204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	3304      	adds	r3, #4
 8007470:	4619      	mov	r1, r3
 8007472:	4610      	mov	r0, r2
 8007474:	f000 fe38 	bl	80080e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
	...

080074d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d001      	beq.n	80074ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e046      	b.n	800757a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a23      	ldr	r2, [pc, #140]	; (8007588 <HAL_TIM_Base_Start+0xb4>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d022      	beq.n	8007544 <HAL_TIM_Base_Start+0x70>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007506:	d01d      	beq.n	8007544 <HAL_TIM_Base_Start+0x70>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a1f      	ldr	r2, [pc, #124]	; (800758c <HAL_TIM_Base_Start+0xb8>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d018      	beq.n	8007544 <HAL_TIM_Base_Start+0x70>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a1e      	ldr	r2, [pc, #120]	; (8007590 <HAL_TIM_Base_Start+0xbc>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d013      	beq.n	8007544 <HAL_TIM_Base_Start+0x70>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a1c      	ldr	r2, [pc, #112]	; (8007594 <HAL_TIM_Base_Start+0xc0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d00e      	beq.n	8007544 <HAL_TIM_Base_Start+0x70>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a1b      	ldr	r2, [pc, #108]	; (8007598 <HAL_TIM_Base_Start+0xc4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d009      	beq.n	8007544 <HAL_TIM_Base_Start+0x70>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a19      	ldr	r2, [pc, #100]	; (800759c <HAL_TIM_Base_Start+0xc8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d004      	beq.n	8007544 <HAL_TIM_Base_Start+0x70>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a18      	ldr	r2, [pc, #96]	; (80075a0 <HAL_TIM_Base_Start+0xcc>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d111      	bne.n	8007568 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f003 0307 	and.w	r3, r3, #7
 800754e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2b06      	cmp	r3, #6
 8007554:	d010      	beq.n	8007578 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f042 0201 	orr.w	r2, r2, #1
 8007564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007566:	e007      	b.n	8007578 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0201 	orr.w	r2, r2, #1
 8007576:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	40010000 	.word	0x40010000
 800758c:	40000400 	.word	0x40000400
 8007590:	40000800 	.word	0x40000800
 8007594:	40000c00 	.word	0x40000c00
 8007598:	40010400 	.word	0x40010400
 800759c:	40014000 	.word	0x40014000
 80075a0:	40001800 	.word	0x40001800

080075a4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6a1a      	ldr	r2, [r3, #32]
 80075b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80075b6:	4013      	ands	r3, r2
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10f      	bne.n	80075dc <HAL_TIM_Base_Stop+0x38>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6a1a      	ldr	r2, [r3, #32]
 80075c2:	f240 4344 	movw	r3, #1092	; 0x444
 80075c6:	4013      	ands	r3, r2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d107      	bne.n	80075dc <HAL_TIM_Base_Stop+0x38>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0201 	bic.w	r2, r2, #1
 80075da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
	...

080075f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b01      	cmp	r3, #1
 8007606:	d001      	beq.n	800760c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e04e      	b.n	80076aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f042 0201 	orr.w	r2, r2, #1
 8007622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a23      	ldr	r2, [pc, #140]	; (80076b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d022      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x80>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007636:	d01d      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x80>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a1f      	ldr	r2, [pc, #124]	; (80076bc <HAL_TIM_Base_Start_IT+0xc8>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d018      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x80>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a1e      	ldr	r2, [pc, #120]	; (80076c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d013      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x80>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a1c      	ldr	r2, [pc, #112]	; (80076c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d00e      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x80>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a1b      	ldr	r2, [pc, #108]	; (80076c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d009      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x80>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a19      	ldr	r2, [pc, #100]	; (80076cc <HAL_TIM_Base_Start_IT+0xd8>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d004      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x80>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a18      	ldr	r2, [pc, #96]	; (80076d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d111      	bne.n	8007698 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f003 0307 	and.w	r3, r3, #7
 800767e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2b06      	cmp	r3, #6
 8007684:	d010      	beq.n	80076a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 0201 	orr.w	r2, r2, #1
 8007694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007696:	e007      	b.n	80076a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0201 	orr.w	r2, r2, #1
 80076a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	40010000 	.word	0x40010000
 80076bc:	40000400 	.word	0x40000400
 80076c0:	40000800 	.word	0x40000800
 80076c4:	40000c00 	.word	0x40000c00
 80076c8:	40010400 	.word	0x40010400
 80076cc:	40014000 	.word	0x40014000
 80076d0:	40001800 	.word	0x40001800

080076d4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68da      	ldr	r2, [r3, #12]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0201 	bic.w	r2, r2, #1
 80076ea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6a1a      	ldr	r2, [r3, #32]
 80076f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80076f6:	4013      	ands	r3, r2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10f      	bne.n	800771c <HAL_TIM_Base_Stop_IT+0x48>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6a1a      	ldr	r2, [r3, #32]
 8007702:	f240 4344 	movw	r3, #1092	; 0x444
 8007706:	4013      	ands	r3, r2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d107      	bne.n	800771c <HAL_TIM_Base_Stop_IT+0x48>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 0201 	bic.w	r2, r2, #1
 800771a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b082      	sub	sp, #8
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e041      	b.n	80077c8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d106      	bne.n	800775e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7fc fcfb 	bl	8004154 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2202      	movs	r2, #2
 8007762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	3304      	adds	r3, #4
 800776e:	4619      	mov	r1, r3
 8007770:	4610      	mov	r0, r2
 8007772:	f000 fcb9 	bl	80080e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d104      	bne.n	80077ea <HAL_TIM_IC_Start_IT+0x1a>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	e013      	b.n	8007812 <HAL_TIM_IC_Start_IT+0x42>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	d104      	bne.n	80077fa <HAL_TIM_IC_Start_IT+0x2a>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	e00b      	b.n	8007812 <HAL_TIM_IC_Start_IT+0x42>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d104      	bne.n	800780a <HAL_TIM_IC_Start_IT+0x3a>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007806:	b2db      	uxtb	r3, r3
 8007808:	e003      	b.n	8007812 <HAL_TIM_IC_Start_IT+0x42>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007810:	b2db      	uxtb	r3, r3
 8007812:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d104      	bne.n	8007824 <HAL_TIM_IC_Start_IT+0x54>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007820:	b2db      	uxtb	r3, r3
 8007822:	e013      	b.n	800784c <HAL_TIM_IC_Start_IT+0x7c>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b04      	cmp	r3, #4
 8007828:	d104      	bne.n	8007834 <HAL_TIM_IC_Start_IT+0x64>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007830:	b2db      	uxtb	r3, r3
 8007832:	e00b      	b.n	800784c <HAL_TIM_IC_Start_IT+0x7c>
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b08      	cmp	r3, #8
 8007838:	d104      	bne.n	8007844 <HAL_TIM_IC_Start_IT+0x74>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007840:	b2db      	uxtb	r3, r3
 8007842:	e003      	b.n	800784c <HAL_TIM_IC_Start_IT+0x7c>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800784a:	b2db      	uxtb	r3, r3
 800784c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800784e:	7bfb      	ldrb	r3, [r7, #15]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d102      	bne.n	800785a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d001      	beq.n	800785e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e0c7      	b.n	80079ee <HAL_TIM_IC_Start_IT+0x21e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d104      	bne.n	800786e <HAL_TIM_IC_Start_IT+0x9e>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800786c:	e013      	b.n	8007896 <HAL_TIM_IC_Start_IT+0xc6>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2b04      	cmp	r3, #4
 8007872:	d104      	bne.n	800787e <HAL_TIM_IC_Start_IT+0xae>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2202      	movs	r2, #2
 8007878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800787c:	e00b      	b.n	8007896 <HAL_TIM_IC_Start_IT+0xc6>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b08      	cmp	r3, #8
 8007882:	d104      	bne.n	800788e <HAL_TIM_IC_Start_IT+0xbe>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800788c:	e003      	b.n	8007896 <HAL_TIM_IC_Start_IT+0xc6>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2202      	movs	r2, #2
 8007892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d104      	bne.n	80078a6 <HAL_TIM_IC_Start_IT+0xd6>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2202      	movs	r2, #2
 80078a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078a4:	e013      	b.n	80078ce <HAL_TIM_IC_Start_IT+0xfe>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b04      	cmp	r3, #4
 80078aa:	d104      	bne.n	80078b6 <HAL_TIM_IC_Start_IT+0xe6>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078b4:	e00b      	b.n	80078ce <HAL_TIM_IC_Start_IT+0xfe>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b08      	cmp	r3, #8
 80078ba:	d104      	bne.n	80078c6 <HAL_TIM_IC_Start_IT+0xf6>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078c4:	e003      	b.n	80078ce <HAL_TIM_IC_Start_IT+0xfe>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2202      	movs	r2, #2
 80078ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b0c      	cmp	r3, #12
 80078d2:	d841      	bhi.n	8007958 <HAL_TIM_IC_Start_IT+0x188>
 80078d4:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <HAL_TIM_IC_Start_IT+0x10c>)
 80078d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078da:	bf00      	nop
 80078dc:	08007911 	.word	0x08007911
 80078e0:	08007959 	.word	0x08007959
 80078e4:	08007959 	.word	0x08007959
 80078e8:	08007959 	.word	0x08007959
 80078ec:	08007923 	.word	0x08007923
 80078f0:	08007959 	.word	0x08007959
 80078f4:	08007959 	.word	0x08007959
 80078f8:	08007959 	.word	0x08007959
 80078fc:	08007935 	.word	0x08007935
 8007900:	08007959 	.word	0x08007959
 8007904:	08007959 	.word	0x08007959
 8007908:	08007959 	.word	0x08007959
 800790c:	08007947 	.word	0x08007947
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68da      	ldr	r2, [r3, #12]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f042 0202 	orr.w	r2, r2, #2
 800791e:	60da      	str	r2, [r3, #12]
      break;
 8007920:	e01b      	b.n	800795a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68da      	ldr	r2, [r3, #12]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f042 0204 	orr.w	r2, r2, #4
 8007930:	60da      	str	r2, [r3, #12]
      break;
 8007932:	e012      	b.n	800795a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68da      	ldr	r2, [r3, #12]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f042 0208 	orr.w	r2, r2, #8
 8007942:	60da      	str	r2, [r3, #12]
      break;
 8007944:	e009      	b.n	800795a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f042 0210 	orr.w	r2, r2, #16
 8007954:	60da      	str	r2, [r3, #12]
      break;
 8007956:	e000      	b.n	800795a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8007958:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2201      	movs	r2, #1
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	4618      	mov	r0, r3
 8007964:	f000 fe24 	bl	80085b0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a22      	ldr	r2, [pc, #136]	; (80079f8 <HAL_TIM_IC_Start_IT+0x228>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d022      	beq.n	80079b8 <HAL_TIM_IC_Start_IT+0x1e8>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800797a:	d01d      	beq.n	80079b8 <HAL_TIM_IC_Start_IT+0x1e8>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a1e      	ldr	r2, [pc, #120]	; (80079fc <HAL_TIM_IC_Start_IT+0x22c>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d018      	beq.n	80079b8 <HAL_TIM_IC_Start_IT+0x1e8>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a1d      	ldr	r2, [pc, #116]	; (8007a00 <HAL_TIM_IC_Start_IT+0x230>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d013      	beq.n	80079b8 <HAL_TIM_IC_Start_IT+0x1e8>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a1b      	ldr	r2, [pc, #108]	; (8007a04 <HAL_TIM_IC_Start_IT+0x234>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00e      	beq.n	80079b8 <HAL_TIM_IC_Start_IT+0x1e8>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a1a      	ldr	r2, [pc, #104]	; (8007a08 <HAL_TIM_IC_Start_IT+0x238>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d009      	beq.n	80079b8 <HAL_TIM_IC_Start_IT+0x1e8>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a18      	ldr	r2, [pc, #96]	; (8007a0c <HAL_TIM_IC_Start_IT+0x23c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d004      	beq.n	80079b8 <HAL_TIM_IC_Start_IT+0x1e8>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a17      	ldr	r2, [pc, #92]	; (8007a10 <HAL_TIM_IC_Start_IT+0x240>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d111      	bne.n	80079dc <HAL_TIM_IC_Start_IT+0x20c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f003 0307 	and.w	r3, r3, #7
 80079c2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2b06      	cmp	r3, #6
 80079c8:	d010      	beq.n	80079ec <HAL_TIM_IC_Start_IT+0x21c>
    {
      __HAL_TIM_ENABLE(htim);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f042 0201 	orr.w	r2, r2, #1
 80079d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079da:	e007      	b.n	80079ec <HAL_TIM_IC_Start_IT+0x21c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f042 0201 	orr.w	r2, r2, #1
 80079ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	40010000 	.word	0x40010000
 80079fc:	40000400 	.word	0x40000400
 8007a00:	40000800 	.word	0x40000800
 8007a04:	40000c00 	.word	0x40000c00
 8007a08:	40010400 	.word	0x40010400
 8007a0c:	40014000 	.word	0x40014000
 8007a10:	40001800 	.word	0x40001800

08007a14 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b0c      	cmp	r3, #12
 8007a22:	d841      	bhi.n	8007aa8 <HAL_TIM_IC_Stop_IT+0x94>
 8007a24:	a201      	add	r2, pc, #4	; (adr r2, 8007a2c <HAL_TIM_IC_Stop_IT+0x18>)
 8007a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2a:	bf00      	nop
 8007a2c:	08007a61 	.word	0x08007a61
 8007a30:	08007aa9 	.word	0x08007aa9
 8007a34:	08007aa9 	.word	0x08007aa9
 8007a38:	08007aa9 	.word	0x08007aa9
 8007a3c:	08007a73 	.word	0x08007a73
 8007a40:	08007aa9 	.word	0x08007aa9
 8007a44:	08007aa9 	.word	0x08007aa9
 8007a48:	08007aa9 	.word	0x08007aa9
 8007a4c:	08007a85 	.word	0x08007a85
 8007a50:	08007aa9 	.word	0x08007aa9
 8007a54:	08007aa9 	.word	0x08007aa9
 8007a58:	08007aa9 	.word	0x08007aa9
 8007a5c:	08007a97 	.word	0x08007a97
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0202 	bic.w	r2, r2, #2
 8007a6e:	60da      	str	r2, [r3, #12]
      break;
 8007a70:	e01b      	b.n	8007aaa <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f022 0204 	bic.w	r2, r2, #4
 8007a80:	60da      	str	r2, [r3, #12]
      break;
 8007a82:	e012      	b.n	8007aaa <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0208 	bic.w	r2, r2, #8
 8007a92:	60da      	str	r2, [r3, #12]
      break;
 8007a94:	e009      	b.n	8007aaa <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68da      	ldr	r2, [r3, #12]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f022 0210 	bic.w	r2, r2, #16
 8007aa4:	60da      	str	r2, [r3, #12]
      break;
 8007aa6:	e000      	b.n	8007aaa <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8007aa8:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f000 fd7c 	bl	80085b0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6a1a      	ldr	r2, [r3, #32]
 8007abe:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10f      	bne.n	8007ae8 <HAL_TIM_IC_Stop_IT+0xd4>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6a1a      	ldr	r2, [r3, #32]
 8007ace:	f240 4344 	movw	r3, #1092	; 0x444
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d107      	bne.n	8007ae8 <HAL_TIM_IC_Stop_IT+0xd4>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f022 0201 	bic.w	r2, r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d104      	bne.n	8007af8 <HAL_TIM_IC_Stop_IT+0xe4>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007af6:	e013      	b.n	8007b20 <HAL_TIM_IC_Stop_IT+0x10c>
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	d104      	bne.n	8007b08 <HAL_TIM_IC_Stop_IT+0xf4>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b06:	e00b      	b.n	8007b20 <HAL_TIM_IC_Stop_IT+0x10c>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2b08      	cmp	r3, #8
 8007b0c:	d104      	bne.n	8007b18 <HAL_TIM_IC_Stop_IT+0x104>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b16:	e003      	b.n	8007b20 <HAL_TIM_IC_Stop_IT+0x10c>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d104      	bne.n	8007b30 <HAL_TIM_IC_Stop_IT+0x11c>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b2e:	e013      	b.n	8007b58 <HAL_TIM_IC_Stop_IT+0x144>
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d104      	bne.n	8007b40 <HAL_TIM_IC_Stop_IT+0x12c>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b3e:	e00b      	b.n	8007b58 <HAL_TIM_IC_Stop_IT+0x144>
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2b08      	cmp	r3, #8
 8007b44:	d104      	bne.n	8007b50 <HAL_TIM_IC_Stop_IT+0x13c>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b4e:	e003      	b.n	8007b58 <HAL_TIM_IC_Stop_IT+0x144>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop

08007b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	f003 0302 	and.w	r3, r3, #2
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d122      	bne.n	8007bc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d11b      	bne.n	8007bc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f06f 0202 	mvn.w	r2, #2
 8007b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	f003 0303 	and.w	r3, r3, #3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7fa f932 	bl	8001e10 <HAL_TIM_IC_CaptureCallback>
 8007bac:	e005      	b.n	8007bba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fa7c 	bl	80080ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fa83 	bl	80080c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	f003 0304 	and.w	r3, r3, #4
 8007bca:	2b04      	cmp	r3, #4
 8007bcc:	d122      	bne.n	8007c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	f003 0304 	and.w	r3, r3, #4
 8007bd8:	2b04      	cmp	r3, #4
 8007bda:	d11b      	bne.n	8007c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f06f 0204 	mvn.w	r2, #4
 8007be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2202      	movs	r2, #2
 8007bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7fa f908 	bl	8001e10 <HAL_TIM_IC_CaptureCallback>
 8007c00:	e005      	b.n	8007c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fa52 	bl	80080ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fa59 	bl	80080c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	f003 0308 	and.w	r3, r3, #8
 8007c1e:	2b08      	cmp	r3, #8
 8007c20:	d122      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	f003 0308 	and.w	r3, r3, #8
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d11b      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f06f 0208 	mvn.w	r2, #8
 8007c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2204      	movs	r2, #4
 8007c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	f003 0303 	and.w	r3, r3, #3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7fa f8de 	bl	8001e10 <HAL_TIM_IC_CaptureCallback>
 8007c54:	e005      	b.n	8007c62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fa28 	bl	80080ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fa2f 	bl	80080c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	f003 0310 	and.w	r3, r3, #16
 8007c72:	2b10      	cmp	r3, #16
 8007c74:	d122      	bne.n	8007cbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f003 0310 	and.w	r3, r3, #16
 8007c80:	2b10      	cmp	r3, #16
 8007c82:	d11b      	bne.n	8007cbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f06f 0210 	mvn.w	r2, #16
 8007c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2208      	movs	r2, #8
 8007c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	69db      	ldr	r3, [r3, #28]
 8007c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7fa f8b4 	bl	8001e10 <HAL_TIM_IC_CaptureCallback>
 8007ca8:	e005      	b.n	8007cb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f9fe 	bl	80080ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fa05 	bl	80080c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d10e      	bne.n	8007ce8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d107      	bne.n	8007ce8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f06f 0201 	mvn.w	r2, #1
 8007ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7fa f882 	bl	8001dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf2:	2b80      	cmp	r3, #128	; 0x80
 8007cf4:	d10e      	bne.n	8007d14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d00:	2b80      	cmp	r3, #128	; 0x80
 8007d02:	d107      	bne.n	8007d14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fcfa 	bl	8008708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d1e:	2b40      	cmp	r3, #64	; 0x40
 8007d20:	d10e      	bne.n	8007d40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2c:	2b40      	cmp	r3, #64	; 0x40
 8007d2e:	d107      	bne.n	8007d40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f9ca 	bl	80080d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	f003 0320 	and.w	r3, r3, #32
 8007d4a:	2b20      	cmp	r3, #32
 8007d4c:	d10e      	bne.n	8007d6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f003 0320 	and.w	r3, r3, #32
 8007d58:	2b20      	cmp	r3, #32
 8007d5a:	d107      	bne.n	8007d6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f06f 0220 	mvn.w	r2, #32
 8007d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fcc4 	bl	80086f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d101      	bne.n	8007d8e <HAL_TIM_IC_ConfigChannel+0x1a>
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	e082      	b.n	8007e94 <HAL_TIM_IC_ConfigChannel+0x120>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d11b      	bne.n	8007dd4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6818      	ldr	r0, [r3, #0]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	6819      	ldr	r1, [r3, #0]
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f000 fa3c 	bl	8008228 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	699a      	ldr	r2, [r3, #24]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 020c 	bic.w	r2, r2, #12
 8007dbe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6999      	ldr	r1, [r3, #24]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	689a      	ldr	r2, [r3, #8]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	619a      	str	r2, [r3, #24]
 8007dd2:	e05a      	b.n	8007e8a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b04      	cmp	r3, #4
 8007dd8:	d11c      	bne.n	8007e14 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	6819      	ldr	r1, [r3, #0]
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	f000 fac0 	bl	800836e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	699a      	ldr	r2, [r3, #24]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007dfc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6999      	ldr	r1, [r3, #24]
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	021a      	lsls	r2, r3, #8
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	619a      	str	r2, [r3, #24]
 8007e12:	e03a      	b.n	8007e8a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b08      	cmp	r3, #8
 8007e18:	d11b      	bne.n	8007e52 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	6819      	ldr	r1, [r3, #0]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	f000 fb0d 	bl	8008448 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	69da      	ldr	r2, [r3, #28]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 020c 	bic.w	r2, r2, #12
 8007e3c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	69d9      	ldr	r1, [r3, #28]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	689a      	ldr	r2, [r3, #8]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	61da      	str	r2, [r3, #28]
 8007e50:	e01b      	b.n	8007e8a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6818      	ldr	r0, [r3, #0]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	6819      	ldr	r1, [r3, #0]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	f000 fb2d 	bl	80084c0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	69da      	ldr	r2, [r3, #28]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007e74:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	69d9      	ldr	r1, [r3, #28]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	021a      	lsls	r2, r3, #8
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d101      	bne.n	8007eb4 <HAL_TIM_ConfigClockSource+0x18>
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	e0b3      	b.n	800801c <HAL_TIM_ConfigClockSource+0x180>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ed2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eec:	d03e      	beq.n	8007f6c <HAL_TIM_ConfigClockSource+0xd0>
 8007eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ef2:	f200 8087 	bhi.w	8008004 <HAL_TIM_ConfigClockSource+0x168>
 8007ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007efa:	f000 8085 	beq.w	8008008 <HAL_TIM_ConfigClockSource+0x16c>
 8007efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f02:	d87f      	bhi.n	8008004 <HAL_TIM_ConfigClockSource+0x168>
 8007f04:	2b70      	cmp	r3, #112	; 0x70
 8007f06:	d01a      	beq.n	8007f3e <HAL_TIM_ConfigClockSource+0xa2>
 8007f08:	2b70      	cmp	r3, #112	; 0x70
 8007f0a:	d87b      	bhi.n	8008004 <HAL_TIM_ConfigClockSource+0x168>
 8007f0c:	2b60      	cmp	r3, #96	; 0x60
 8007f0e:	d050      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0x116>
 8007f10:	2b60      	cmp	r3, #96	; 0x60
 8007f12:	d877      	bhi.n	8008004 <HAL_TIM_ConfigClockSource+0x168>
 8007f14:	2b50      	cmp	r3, #80	; 0x50
 8007f16:	d03c      	beq.n	8007f92 <HAL_TIM_ConfigClockSource+0xf6>
 8007f18:	2b50      	cmp	r3, #80	; 0x50
 8007f1a:	d873      	bhi.n	8008004 <HAL_TIM_ConfigClockSource+0x168>
 8007f1c:	2b40      	cmp	r3, #64	; 0x40
 8007f1e:	d058      	beq.n	8007fd2 <HAL_TIM_ConfigClockSource+0x136>
 8007f20:	2b40      	cmp	r3, #64	; 0x40
 8007f22:	d86f      	bhi.n	8008004 <HAL_TIM_ConfigClockSource+0x168>
 8007f24:	2b30      	cmp	r3, #48	; 0x30
 8007f26:	d064      	beq.n	8007ff2 <HAL_TIM_ConfigClockSource+0x156>
 8007f28:	2b30      	cmp	r3, #48	; 0x30
 8007f2a:	d86b      	bhi.n	8008004 <HAL_TIM_ConfigClockSource+0x168>
 8007f2c:	2b20      	cmp	r3, #32
 8007f2e:	d060      	beq.n	8007ff2 <HAL_TIM_ConfigClockSource+0x156>
 8007f30:	2b20      	cmp	r3, #32
 8007f32:	d867      	bhi.n	8008004 <HAL_TIM_ConfigClockSource+0x168>
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d05c      	beq.n	8007ff2 <HAL_TIM_ConfigClockSource+0x156>
 8007f38:	2b10      	cmp	r3, #16
 8007f3a:	d05a      	beq.n	8007ff2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007f3c:	e062      	b.n	8008004 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6818      	ldr	r0, [r3, #0]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	6899      	ldr	r1, [r3, #8]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	f000 fb0f 	bl	8008570 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	609a      	str	r2, [r3, #8]
      break;
 8007f6a:	e04e      	b.n	800800a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6818      	ldr	r0, [r3, #0]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	6899      	ldr	r1, [r3, #8]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f000 faf8 	bl	8008570 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689a      	ldr	r2, [r3, #8]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f8e:	609a      	str	r2, [r3, #8]
      break;
 8007f90:	e03b      	b.n	800800a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6818      	ldr	r0, [r3, #0]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	6859      	ldr	r1, [r3, #4]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f000 f9b6 	bl	8008310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2150      	movs	r1, #80	; 0x50
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 fac5 	bl	800853a <TIM_ITRx_SetConfig>
      break;
 8007fb0:	e02b      	b.n	800800a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6818      	ldr	r0, [r3, #0]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	6859      	ldr	r1, [r3, #4]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	f000 fa12 	bl	80083e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2160      	movs	r1, #96	; 0x60
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fab5 	bl	800853a <TIM_ITRx_SetConfig>
      break;
 8007fd0:	e01b      	b.n	800800a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6818      	ldr	r0, [r3, #0]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	6859      	ldr	r1, [r3, #4]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f000 f996 	bl	8008310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2140      	movs	r1, #64	; 0x40
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 faa5 	bl	800853a <TIM_ITRx_SetConfig>
      break;
 8007ff0:	e00b      	b.n	800800a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	f000 fa9c 	bl	800853a <TIM_ITRx_SetConfig>
        break;
 8008002:	e002      	b.n	800800a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008004:	bf00      	nop
 8008006:	e000      	b.n	800800a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008008:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800802e:	2300      	movs	r3, #0
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2b0c      	cmp	r3, #12
 8008036:	d831      	bhi.n	800809c <HAL_TIM_ReadCapturedValue+0x78>
 8008038:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <HAL_TIM_ReadCapturedValue+0x1c>)
 800803a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803e:	bf00      	nop
 8008040:	08008075 	.word	0x08008075
 8008044:	0800809d 	.word	0x0800809d
 8008048:	0800809d 	.word	0x0800809d
 800804c:	0800809d 	.word	0x0800809d
 8008050:	0800807f 	.word	0x0800807f
 8008054:	0800809d 	.word	0x0800809d
 8008058:	0800809d 	.word	0x0800809d
 800805c:	0800809d 	.word	0x0800809d
 8008060:	08008089 	.word	0x08008089
 8008064:	0800809d 	.word	0x0800809d
 8008068:	0800809d 	.word	0x0800809d
 800806c:	0800809d 	.word	0x0800809d
 8008070:	08008093 	.word	0x08008093
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800807a:	60fb      	str	r3, [r7, #12]

      break;
 800807c:	e00f      	b.n	800809e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008084:	60fb      	str	r3, [r7, #12]

      break;
 8008086:	e00a      	b.n	800809e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800808e:	60fb      	str	r3, [r7, #12]

      break;
 8008090:	e005      	b.n	800809e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008098:	60fb      	str	r3, [r7, #12]

      break;
 800809a:	e000      	b.n	800809e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800809c:	bf00      	nop
  }

  return tmpreg;
 800809e:	68fb      	ldr	r3, [r7, #12]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a40      	ldr	r2, [pc, #256]	; (80081fc <TIM_Base_SetConfig+0x114>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d013      	beq.n	8008128 <TIM_Base_SetConfig+0x40>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008106:	d00f      	beq.n	8008128 <TIM_Base_SetConfig+0x40>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a3d      	ldr	r2, [pc, #244]	; (8008200 <TIM_Base_SetConfig+0x118>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d00b      	beq.n	8008128 <TIM_Base_SetConfig+0x40>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a3c      	ldr	r2, [pc, #240]	; (8008204 <TIM_Base_SetConfig+0x11c>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d007      	beq.n	8008128 <TIM_Base_SetConfig+0x40>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a3b      	ldr	r2, [pc, #236]	; (8008208 <TIM_Base_SetConfig+0x120>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d003      	beq.n	8008128 <TIM_Base_SetConfig+0x40>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a3a      	ldr	r2, [pc, #232]	; (800820c <TIM_Base_SetConfig+0x124>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d108      	bne.n	800813a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800812e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	4313      	orrs	r3, r2
 8008138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a2f      	ldr	r2, [pc, #188]	; (80081fc <TIM_Base_SetConfig+0x114>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d02b      	beq.n	800819a <TIM_Base_SetConfig+0xb2>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008148:	d027      	beq.n	800819a <TIM_Base_SetConfig+0xb2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a2c      	ldr	r2, [pc, #176]	; (8008200 <TIM_Base_SetConfig+0x118>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d023      	beq.n	800819a <TIM_Base_SetConfig+0xb2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a2b      	ldr	r2, [pc, #172]	; (8008204 <TIM_Base_SetConfig+0x11c>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d01f      	beq.n	800819a <TIM_Base_SetConfig+0xb2>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a2a      	ldr	r2, [pc, #168]	; (8008208 <TIM_Base_SetConfig+0x120>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d01b      	beq.n	800819a <TIM_Base_SetConfig+0xb2>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a29      	ldr	r2, [pc, #164]	; (800820c <TIM_Base_SetConfig+0x124>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d017      	beq.n	800819a <TIM_Base_SetConfig+0xb2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a28      	ldr	r2, [pc, #160]	; (8008210 <TIM_Base_SetConfig+0x128>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d013      	beq.n	800819a <TIM_Base_SetConfig+0xb2>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a27      	ldr	r2, [pc, #156]	; (8008214 <TIM_Base_SetConfig+0x12c>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d00f      	beq.n	800819a <TIM_Base_SetConfig+0xb2>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a26      	ldr	r2, [pc, #152]	; (8008218 <TIM_Base_SetConfig+0x130>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d00b      	beq.n	800819a <TIM_Base_SetConfig+0xb2>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a25      	ldr	r2, [pc, #148]	; (800821c <TIM_Base_SetConfig+0x134>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d007      	beq.n	800819a <TIM_Base_SetConfig+0xb2>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a24      	ldr	r2, [pc, #144]	; (8008220 <TIM_Base_SetConfig+0x138>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d003      	beq.n	800819a <TIM_Base_SetConfig+0xb2>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a23      	ldr	r2, [pc, #140]	; (8008224 <TIM_Base_SetConfig+0x13c>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d108      	bne.n	80081ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	689a      	ldr	r2, [r3, #8]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a0a      	ldr	r2, [pc, #40]	; (80081fc <TIM_Base_SetConfig+0x114>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d003      	beq.n	80081e0 <TIM_Base_SetConfig+0xf8>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a0c      	ldr	r2, [pc, #48]	; (800820c <TIM_Base_SetConfig+0x124>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d103      	bne.n	80081e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	691a      	ldr	r2, [r3, #16]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	615a      	str	r2, [r3, #20]
}
 80081ee:	bf00      	nop
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	40010000 	.word	0x40010000
 8008200:	40000400 	.word	0x40000400
 8008204:	40000800 	.word	0x40000800
 8008208:	40000c00 	.word	0x40000c00
 800820c:	40010400 	.word	0x40010400
 8008210:	40014000 	.word	0x40014000
 8008214:	40014400 	.word	0x40014400
 8008218:	40014800 	.word	0x40014800
 800821c:	40001800 	.word	0x40001800
 8008220:	40001c00 	.word	0x40001c00
 8008224:	40002000 	.word	0x40002000

08008228 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	f023 0201 	bic.w	r2, r3, #1
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6a1b      	ldr	r3, [r3, #32]
 800824c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	4a28      	ldr	r2, [pc, #160]	; (80082f4 <TIM_TI1_SetConfig+0xcc>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d01b      	beq.n	800828e <TIM_TI1_SetConfig+0x66>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825c:	d017      	beq.n	800828e <TIM_TI1_SetConfig+0x66>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	4a25      	ldr	r2, [pc, #148]	; (80082f8 <TIM_TI1_SetConfig+0xd0>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d013      	beq.n	800828e <TIM_TI1_SetConfig+0x66>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	4a24      	ldr	r2, [pc, #144]	; (80082fc <TIM_TI1_SetConfig+0xd4>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d00f      	beq.n	800828e <TIM_TI1_SetConfig+0x66>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	4a23      	ldr	r2, [pc, #140]	; (8008300 <TIM_TI1_SetConfig+0xd8>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d00b      	beq.n	800828e <TIM_TI1_SetConfig+0x66>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	4a22      	ldr	r2, [pc, #136]	; (8008304 <TIM_TI1_SetConfig+0xdc>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d007      	beq.n	800828e <TIM_TI1_SetConfig+0x66>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4a21      	ldr	r2, [pc, #132]	; (8008308 <TIM_TI1_SetConfig+0xe0>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d003      	beq.n	800828e <TIM_TI1_SetConfig+0x66>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4a20      	ldr	r2, [pc, #128]	; (800830c <TIM_TI1_SetConfig+0xe4>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d101      	bne.n	8008292 <TIM_TI1_SetConfig+0x6a>
 800828e:	2301      	movs	r3, #1
 8008290:	e000      	b.n	8008294 <TIM_TI1_SetConfig+0x6c>
 8008292:	2300      	movs	r3, #0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d008      	beq.n	80082aa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	f023 0303 	bic.w	r3, r3, #3
 800829e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	617b      	str	r3, [r7, #20]
 80082a8:	e003      	b.n	80082b2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	f043 0301 	orr.w	r3, r3, #1
 80082b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	011b      	lsls	r3, r3, #4
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	f023 030a 	bic.w	r3, r3, #10
 80082cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	f003 030a 	and.w	r3, r3, #10
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	621a      	str	r2, [r3, #32]
}
 80082e6:	bf00      	nop
 80082e8:	371c      	adds	r7, #28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	40010000 	.word	0x40010000
 80082f8:	40000400 	.word	0x40000400
 80082fc:	40000800 	.word	0x40000800
 8008300:	40000c00 	.word	0x40000c00
 8008304:	40010400 	.word	0x40010400
 8008308:	40014000 	.word	0x40014000
 800830c:	40001800 	.word	0x40001800

08008310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008310:	b480      	push	{r7}
 8008312:	b087      	sub	sp, #28
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	f023 0201 	bic.w	r2, r3, #1
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800833a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	011b      	lsls	r3, r3, #4
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	4313      	orrs	r3, r2
 8008344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	f023 030a 	bic.w	r3, r3, #10
 800834c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	4313      	orrs	r3, r2
 8008354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	621a      	str	r2, [r3, #32]
}
 8008362:	bf00      	nop
 8008364:	371c      	adds	r7, #28
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800836e:	b480      	push	{r7}
 8008370:	b087      	sub	sp, #28
 8008372:	af00      	add	r7, sp, #0
 8008374:	60f8      	str	r0, [r7, #12]
 8008376:	60b9      	str	r1, [r7, #8]
 8008378:	607a      	str	r2, [r7, #4]
 800837a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6a1b      	ldr	r3, [r3, #32]
 8008380:	f023 0210 	bic.w	r2, r3, #16
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800839a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	021b      	lsls	r3, r3, #8
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	031b      	lsls	r3, r3, #12
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	011b      	lsls	r3, r3, #4
 80083c6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	621a      	str	r2, [r3, #32]
}
 80083dc:	bf00      	nop
 80083de:	371c      	adds	r7, #28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b087      	sub	sp, #28
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	f023 0210 	bic.w	r2, r3, #16
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008412:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	031b      	lsls	r3, r3, #12
 8008418:	697a      	ldr	r2, [r7, #20]
 800841a:	4313      	orrs	r3, r2
 800841c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008424:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	011b      	lsls	r3, r3, #4
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	4313      	orrs	r3, r2
 800842e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	621a      	str	r2, [r3, #32]
}
 800843c:	bf00      	nop
 800843e:	371c      	adds	r7, #28
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008448:	b480      	push	{r7}
 800844a:	b087      	sub	sp, #28
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
 8008454:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f023 0303 	bic.w	r3, r3, #3
 8008474:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4313      	orrs	r3, r2
 800847c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008484:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	011b      	lsls	r3, r3, #4
 800848a:	b2db      	uxtb	r3, r3
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	4313      	orrs	r3, r2
 8008490:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008498:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	021b      	lsls	r3, r3, #8
 800849e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	621a      	str	r2, [r3, #32]
}
 80084b4:	bf00      	nop
 80084b6:	371c      	adds	r7, #28
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	69db      	ldr	r3, [r3, #28]
 80084de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6a1b      	ldr	r3, [r3, #32]
 80084e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	021b      	lsls	r3, r3, #8
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	031b      	lsls	r3, r3, #12
 8008504:	b29b      	uxth	r3, r3
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	4313      	orrs	r3, r2
 800850a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008512:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	031b      	lsls	r3, r3, #12
 8008518:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	621a      	str	r2, [r3, #32]
}
 800852e:	bf00      	nop
 8008530:	371c      	adds	r7, #28
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800853a:	b480      	push	{r7}
 800853c:	b085      	sub	sp, #20
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4313      	orrs	r3, r2
 8008558:	f043 0307 	orr.w	r3, r3, #7
 800855c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	609a      	str	r2, [r3, #8]
}
 8008564:	bf00      	nop
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800858a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	021a      	lsls	r2, r3, #8
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	431a      	orrs	r2, r3
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	4313      	orrs	r3, r2
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	4313      	orrs	r3, r2
 800859c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	609a      	str	r2, [r3, #8]
}
 80085a4:	bf00      	nop
 80085a6:	371c      	adds	r7, #28
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	f003 031f 	and.w	r3, r3, #31
 80085c2:	2201      	movs	r2, #1
 80085c4:	fa02 f303 	lsl.w	r3, r2, r3
 80085c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6a1a      	ldr	r2, [r3, #32]
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	43db      	mvns	r3, r3
 80085d2:	401a      	ands	r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6a1a      	ldr	r2, [r3, #32]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	f003 031f 	and.w	r3, r3, #31
 80085e2:	6879      	ldr	r1, [r7, #4]
 80085e4:	fa01 f303 	lsl.w	r3, r1, r3
 80085e8:	431a      	orrs	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	621a      	str	r2, [r3, #32]
}
 80085ee:	bf00      	nop
 80085f0:	371c      	adds	r7, #28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
	...

080085fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800860c:	2b01      	cmp	r3, #1
 800860e:	d101      	bne.n	8008614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008610:	2302      	movs	r3, #2
 8008612:	e05a      	b.n	80086ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800863a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	4313      	orrs	r3, r2
 8008644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a21      	ldr	r2, [pc, #132]	; (80086d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d022      	beq.n	800869e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008660:	d01d      	beq.n	800869e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a1d      	ldr	r2, [pc, #116]	; (80086dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d018      	beq.n	800869e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a1b      	ldr	r2, [pc, #108]	; (80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d013      	beq.n	800869e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a1a      	ldr	r2, [pc, #104]	; (80086e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d00e      	beq.n	800869e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a18      	ldr	r2, [pc, #96]	; (80086e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d009      	beq.n	800869e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a17      	ldr	r2, [pc, #92]	; (80086ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d004      	beq.n	800869e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a15      	ldr	r2, [pc, #84]	; (80086f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d10c      	bne.n	80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	40010000 	.word	0x40010000
 80086dc:	40000400 	.word	0x40000400
 80086e0:	40000800 	.word	0x40000800
 80086e4:	40000c00 	.word	0x40000c00
 80086e8:	40010400 	.word	0x40010400
 80086ec:	40014000 	.word	0x40014000
 80086f0:	40001800 	.word	0x40001800

080086f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d101      	bne.n	800872e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e03f      	b.n	80087ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d106      	bne.n	8008748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7fb fde8 	bl	8004318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2224      	movs	r2, #36	; 0x24
 800874c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68da      	ldr	r2, [r3, #12]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800875e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fcfd 	bl	8009160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	691a      	ldr	r2, [r3, #16]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	695a      	ldr	r2, [r3, #20]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68da      	ldr	r2, [r3, #12]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2220      	movs	r2, #32
 80087a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2220      	movs	r2, #32
 80087a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b084      	sub	sp, #16
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	60f8      	str	r0, [r7, #12]
 80087be:	60b9      	str	r1, [r7, #8]
 80087c0:	4613      	mov	r3, r2
 80087c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b20      	cmp	r3, #32
 80087ce:	d11d      	bne.n	800880c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <HAL_UART_Receive_DMA+0x26>
 80087d6:	88fb      	ldrh	r3, [r7, #6]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e016      	b.n	800880e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d101      	bne.n	80087ee <HAL_UART_Receive_DMA+0x38>
 80087ea:	2302      	movs	r3, #2
 80087ec:	e00f      	b.n	800880e <HAL_UART_Receive_DMA+0x58>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80087fc:	88fb      	ldrh	r3, [r7, #6]
 80087fe:	461a      	mov	r2, r3
 8008800:	68b9      	ldr	r1, [r7, #8]
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f000 faf2 	bl	8008dec <UART_Start_Receive_DMA>
 8008808:	4603      	mov	r3, r0
 800880a:	e000      	b.n	800880e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800880c:	2302      	movs	r3, #2
  }
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b084      	sub	sp, #16
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800881e:	2300      	movs	r3, #0
 8008820:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800882c:	2b80      	cmp	r3, #128	; 0x80
 800882e:	bf0c      	ite	eq
 8008830:	2301      	moveq	r3, #1
 8008832:	2300      	movne	r3, #0
 8008834:	b2db      	uxtb	r3, r3
 8008836:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b21      	cmp	r3, #33	; 0x21
 8008842:	d116      	bne.n	8008872 <HAL_UART_DMAStop+0x5c>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d013      	beq.n	8008872 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	695a      	ldr	r2, [r3, #20]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008858:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885e:	2b00      	cmp	r3, #0
 8008860:	d004      	beq.n	800886c <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008866:	4618      	mov	r0, r3
 8008868:	f7fc f8b2 	bl	80049d0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fb21 	bl	8008eb4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887c:	2b40      	cmp	r3, #64	; 0x40
 800887e:	bf0c      	ite	eq
 8008880:	2301      	moveq	r3, #1
 8008882:	2300      	movne	r3, #0
 8008884:	b2db      	uxtb	r3, r3
 8008886:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b22      	cmp	r3, #34	; 0x22
 8008892:	d116      	bne.n	80088c2 <HAL_UART_DMAStop+0xac>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d013      	beq.n	80088c2 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	695a      	ldr	r2, [r3, #20]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088a8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d004      	beq.n	80088bc <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fc f88a 	bl	80049d0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fb0f 	bl	8008ee0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b08a      	sub	sp, #40	; 0x28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80088ec:	2300      	movs	r3, #0
 80088ee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80088f0:	2300      	movs	r3, #0
 80088f2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	f003 030f 	and.w	r3, r3, #15
 80088fa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10d      	bne.n	800891e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	f003 0320 	and.w	r3, r3, #32
 8008908:	2b00      	cmp	r3, #0
 800890a:	d008      	beq.n	800891e <HAL_UART_IRQHandler+0x52>
 800890c:	6a3b      	ldr	r3, [r7, #32]
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	2b00      	cmp	r3, #0
 8008914:	d003      	beq.n	800891e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fb8b 	bl	8009032 <UART_Receive_IT>
      return;
 800891c:	e17c      	b.n	8008c18 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	2b00      	cmp	r3, #0
 8008922:	f000 80b1 	beq.w	8008a88 <HAL_UART_IRQHandler+0x1bc>
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d105      	bne.n	800893c <HAL_UART_IRQHandler+0x70>
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 80a6 	beq.w	8008a88 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00a      	beq.n	800895c <HAL_UART_IRQHandler+0x90>
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800894c:	2b00      	cmp	r3, #0
 800894e:	d005      	beq.n	800895c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008954:	f043 0201 	orr.w	r2, r3, #1
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	f003 0304 	and.w	r3, r3, #4
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <HAL_UART_IRQHandler+0xb0>
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b00      	cmp	r3, #0
 800896e:	d005      	beq.n	800897c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008974:	f043 0202 	orr.w	r2, r3, #2
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897e:	f003 0302 	and.w	r3, r3, #2
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00a      	beq.n	800899c <HAL_UART_IRQHandler+0xd0>
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d005      	beq.n	800899c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008994:	f043 0204 	orr.w	r2, r3, #4
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	f003 0308 	and.w	r3, r3, #8
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00f      	beq.n	80089c6 <HAL_UART_IRQHandler+0xfa>
 80089a6:	6a3b      	ldr	r3, [r7, #32]
 80089a8:	f003 0320 	and.w	r3, r3, #32
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d104      	bne.n	80089ba <HAL_UART_IRQHandler+0xee>
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d005      	beq.n	80089c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089be:	f043 0208 	orr.w	r2, r3, #8
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 811f 	beq.w	8008c0e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	f003 0320 	and.w	r3, r3, #32
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d007      	beq.n	80089ea <HAL_UART_IRQHandler+0x11e>
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	f003 0320 	and.w	r3, r3, #32
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d002      	beq.n	80089ea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fb24 	bl	8009032 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f4:	2b40      	cmp	r3, #64	; 0x40
 80089f6:	bf0c      	ite	eq
 80089f8:	2301      	moveq	r3, #1
 80089fa:	2300      	movne	r3, #0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a04:	f003 0308 	and.w	r3, r3, #8
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d102      	bne.n	8008a12 <HAL_UART_IRQHandler+0x146>
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d031      	beq.n	8008a76 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fa64 	bl	8008ee0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a22:	2b40      	cmp	r3, #64	; 0x40
 8008a24:	d123      	bne.n	8008a6e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	695a      	ldr	r2, [r3, #20]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a34:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d013      	beq.n	8008a66 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a42:	4a77      	ldr	r2, [pc, #476]	; (8008c20 <HAL_UART_IRQHandler+0x354>)
 8008a44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fc f830 	bl	8004ab0 <HAL_DMA_Abort_IT>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d016      	beq.n	8008a84 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008a60:	4610      	mov	r0, r2
 8008a62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a64:	e00e      	b.n	8008a84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f8fa 	bl	8008c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a6c:	e00a      	b.n	8008a84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f8f6 	bl	8008c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a74:	e006      	b.n	8008a84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f8f2 	bl	8008c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008a82:	e0c4      	b.n	8008c0e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a84:	bf00      	nop
    return;
 8008a86:	e0c2      	b.n	8008c0e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	f040 80a2 	bne.w	8008bd6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a94:	f003 0310 	and.w	r3, r3, #16
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 809c 	beq.w	8008bd6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008a9e:	6a3b      	ldr	r3, [r7, #32]
 8008aa0:	f003 0310 	and.w	r3, r3, #16
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 8096 	beq.w	8008bd6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008aaa:	2300      	movs	r3, #0
 8008aac:	60fb      	str	r3, [r7, #12]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	60fb      	str	r3, [r7, #12]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	60fb      	str	r3, [r7, #12]
 8008abe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aca:	2b40      	cmp	r3, #64	; 0x40
 8008acc:	d14f      	bne.n	8008b6e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008ad8:	8a3b      	ldrh	r3, [r7, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 8099 	beq.w	8008c12 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ae4:	8a3a      	ldrh	r2, [r7, #16]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	f080 8093 	bcs.w	8008c12 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	8a3a      	ldrh	r2, [r7, #16]
 8008af0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008afc:	d02b      	beq.n	8008b56 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68da      	ldr	r2, [r3, #12]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b0c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	695a      	ldr	r2, [r3, #20]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f022 0201 	bic.w	r2, r2, #1
 8008b1c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	695a      	ldr	r2, [r3, #20]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b2c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2220      	movs	r2, #32
 8008b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68da      	ldr	r2, [r3, #12]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f022 0210 	bic.w	r2, r2, #16
 8008b4a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fb ff3d 	bl	80049d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	4619      	mov	r1, r3
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f884 	bl	8008c74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008b6c:	e051      	b.n	8008c12 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d047      	beq.n	8008c16 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8008b86:	8a7b      	ldrh	r3, [r7, #18]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d044      	beq.n	8008c16 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68da      	ldr	r2, [r3, #12]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008b9a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	695a      	ldr	r2, [r3, #20]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f022 0201 	bic.w	r2, r2, #1
 8008baa:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2220      	movs	r2, #32
 8008bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68da      	ldr	r2, [r3, #12]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f022 0210 	bic.w	r2, r2, #16
 8008bc8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bca:	8a7b      	ldrh	r3, [r7, #18]
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f850 	bl	8008c74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008bd4:	e01f      	b.n	8008c16 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d008      	beq.n	8008bf2 <HAL_UART_IRQHandler+0x326>
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f9b9 	bl	8008f62 <UART_Transmit_IT>
    return;
 8008bf0:	e012      	b.n	8008c18 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00d      	beq.n	8008c18 <HAL_UART_IRQHandler+0x34c>
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d008      	beq.n	8008c18 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f9fb 	bl	8009002 <UART_EndTransmit_IT>
    return;
 8008c0c:	e004      	b.n	8008c18 <HAL_UART_IRQHandler+0x34c>
    return;
 8008c0e:	bf00      	nop
 8008c10:	e002      	b.n	8008c18 <HAL_UART_IRQHandler+0x34c>
      return;
 8008c12:	bf00      	nop
 8008c14:	e000      	b.n	8008c18 <HAL_UART_IRQHandler+0x34c>
      return;
 8008c16:	bf00      	nop
  }
}
 8008c18:	3728      	adds	r7, #40	; 0x28
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	08008f3b 	.word	0x08008f3b

08008c24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c98:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d12a      	bne.n	8008cfe <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68da      	ldr	r2, [r3, #12]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cbc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	695a      	ldr	r2, [r3, #20]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f022 0201 	bic.w	r2, r2, #1
 8008ccc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	695a      	ldr	r2, [r3, #20]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cdc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2220      	movs	r2, #32
 8008ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d107      	bne.n	8008cfe <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68da      	ldr	r2, [r3, #12]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f022 0210 	bic.w	r2, r2, #16
 8008cfc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d106      	bne.n	8008d14 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f7ff ffb1 	bl	8008c74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d12:	e002      	b.n	8008d1a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f7ff ff8f 	bl	8008c38 <HAL_UART_RxCpltCallback>
}
 8008d1a:	bf00      	nop
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d108      	bne.n	8008d4a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d3c:	085b      	lsrs	r3, r3, #1
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	4619      	mov	r1, r3
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f7ff ff96 	bl	8008c74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d48:	e002      	b.n	8008d50 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f7ff ff7e 	bl	8008c4c <HAL_UART_RxHalfCpltCallback>
}
 8008d50:	bf00      	nop
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d68:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d74:	2b80      	cmp	r3, #128	; 0x80
 8008d76:	bf0c      	ite	eq
 8008d78:	2301      	moveq	r3, #1
 8008d7a:	2300      	movne	r3, #0
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b21      	cmp	r3, #33	; 0x21
 8008d8a:	d108      	bne.n	8008d9e <UART_DMAError+0x46>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d005      	beq.n	8008d9e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2200      	movs	r2, #0
 8008d96:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008d98:	68b8      	ldr	r0, [r7, #8]
 8008d9a:	f000 f88b 	bl	8008eb4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	695b      	ldr	r3, [r3, #20]
 8008da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da8:	2b40      	cmp	r3, #64	; 0x40
 8008daa:	bf0c      	ite	eq
 8008dac:	2301      	moveq	r3, #1
 8008dae:	2300      	movne	r3, #0
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b22      	cmp	r3, #34	; 0x22
 8008dbe:	d108      	bne.n	8008dd2 <UART_DMAError+0x7a>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d005      	beq.n	8008dd2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008dcc:	68b8      	ldr	r0, [r7, #8]
 8008dce:	f000 f887 	bl	8008ee0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd6:	f043 0210 	orr.w	r2, r3, #16
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dde:	68b8      	ldr	r0, [r7, #8]
 8008de0:	f7ff ff3e 	bl	8008c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008de4:	bf00      	nop
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	4613      	mov	r3, r2
 8008df8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	88fa      	ldrh	r2, [r7, #6]
 8008e04:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2222      	movs	r2, #34	; 0x22
 8008e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e18:	4a23      	ldr	r2, [pc, #140]	; (8008ea8 <UART_Start_Receive_DMA+0xbc>)
 8008e1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e20:	4a22      	ldr	r2, [pc, #136]	; (8008eac <UART_Start_Receive_DMA+0xc0>)
 8008e22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e28:	4a21      	ldr	r2, [pc, #132]	; (8008eb0 <UART_Start_Receive_DMA+0xc4>)
 8008e2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e30:	2200      	movs	r2, #0
 8008e32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008e34:	f107 0308 	add.w	r3, r7, #8
 8008e38:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3304      	adds	r3, #4
 8008e44:	4619      	mov	r1, r3
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	88fb      	ldrh	r3, [r7, #6]
 8008e4c:	f7fb fd68 	bl	8004920 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008e50:	2300      	movs	r3, #0
 8008e52:	613b      	str	r3, [r7, #16]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	613b      	str	r3, [r7, #16]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	613b      	str	r3, [r7, #16]
 8008e64:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68da      	ldr	r2, [r3, #12]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e7c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	695a      	ldr	r2, [r3, #20]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f042 0201 	orr.w	r2, r2, #1
 8008e8c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	695a      	ldr	r2, [r3, #20]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e9c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	08008c8d 	.word	0x08008c8d
 8008eac:	08008d23 	.word	0x08008d23
 8008eb0:	08008d59 	.word	0x08008d59

08008eb4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68da      	ldr	r2, [r3, #12]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008eca:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2220      	movs	r2, #32
 8008ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68da      	ldr	r2, [r3, #12]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008ef6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	695a      	ldr	r2, [r3, #20]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f022 0201 	bic.w	r2, r2, #1
 8008f06:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d107      	bne.n	8008f20 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68da      	ldr	r2, [r3, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f022 0210 	bic.w	r2, r2, #16
 8008f1e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2220      	movs	r2, #32
 8008f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008f2e:	bf00      	nop
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b084      	sub	sp, #16
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f7ff fe83 	bl	8008c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f5a:	bf00      	nop
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b085      	sub	sp, #20
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b21      	cmp	r3, #33	; 0x21
 8008f74:	d13e      	bne.n	8008ff4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f7e:	d114      	bne.n	8008faa <UART_Transmit_IT+0x48>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d110      	bne.n	8008faa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a1b      	ldr	r3, [r3, #32]
 8008f8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	461a      	mov	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	1c9a      	adds	r2, r3, #2
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	621a      	str	r2, [r3, #32]
 8008fa8:	e008      	b.n	8008fbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a1b      	ldr	r3, [r3, #32]
 8008fae:	1c59      	adds	r1, r3, #1
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	6211      	str	r1, [r2, #32]
 8008fb4:	781a      	ldrb	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	4619      	mov	r1, r3
 8008fca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10f      	bne.n	8008ff0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68da      	ldr	r2, [r3, #12]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68da      	ldr	r2, [r3, #12]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	e000      	b.n	8008ff6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008ff4:	2302      	movs	r3, #2
  }
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b082      	sub	sp, #8
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68da      	ldr	r2, [r3, #12]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009018:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2220      	movs	r2, #32
 800901e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7ff fdfe 	bl	8008c24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b084      	sub	sp, #16
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2b22      	cmp	r3, #34	; 0x22
 8009044:	f040 8087 	bne.w	8009156 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009050:	d117      	bne.n	8009082 <UART_Receive_IT+0x50>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d113      	bne.n	8009082 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009062:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	b29b      	uxth	r3, r3
 800906c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009070:	b29a      	uxth	r2, r3
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907a:	1c9a      	adds	r2, r3, #2
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	629a      	str	r2, [r3, #40]	; 0x28
 8009080:	e026      	b.n	80090d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009086:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009088:	2300      	movs	r3, #0
 800908a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009094:	d007      	beq.n	80090a6 <UART_Receive_IT+0x74>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10a      	bne.n	80090b4 <UART_Receive_IT+0x82>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d106      	bne.n	80090b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	701a      	strb	r2, [r3, #0]
 80090b2:	e008      	b.n	80090c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090c0:	b2da      	uxtb	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ca:	1c5a      	adds	r2, r3, #1
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	3b01      	subs	r3, #1
 80090d8:	b29b      	uxth	r3, r3
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	4619      	mov	r1, r3
 80090de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d136      	bne.n	8009152 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68da      	ldr	r2, [r3, #12]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f022 0220 	bic.w	r2, r2, #32
 80090f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68da      	ldr	r2, [r3, #12]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009102:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	695a      	ldr	r2, [r3, #20]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f022 0201 	bic.w	r2, r2, #1
 8009112:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2220      	movs	r2, #32
 8009118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009120:	2b01      	cmp	r3, #1
 8009122:	d10e      	bne.n	8009142 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68da      	ldr	r2, [r3, #12]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f022 0210 	bic.w	r2, r2, #16
 8009132:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7ff fd9a 	bl	8008c74 <HAL_UARTEx_RxEventCallback>
 8009140:	e002      	b.n	8009148 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7ff fd78 	bl	8008c38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800914e:	2300      	movs	r3, #0
 8009150:	e002      	b.n	8009158 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	e000      	b.n	8009158 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009156:	2302      	movs	r3, #2
  }
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	b09f      	sub	sp, #124	; 0x7c
 8009166:	af00      	add	r7, sp, #0
 8009168:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800916a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009176:	68d9      	ldr	r1, [r3, #12]
 8009178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	ea40 0301 	orr.w	r3, r0, r1
 8009180:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009184:	689a      	ldr	r2, [r3, #8]
 8009186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	431a      	orrs	r2, r3
 800918c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800918e:	695b      	ldr	r3, [r3, #20]
 8009190:	431a      	orrs	r2, r3
 8009192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	4313      	orrs	r3, r2
 8009198:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800919a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80091a4:	f021 010c 	bic.w	r1, r1, #12
 80091a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091ae:	430b      	orrs	r3, r1
 80091b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80091b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	695b      	ldr	r3, [r3, #20]
 80091b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80091bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091be:	6999      	ldr	r1, [r3, #24]
 80091c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	ea40 0301 	orr.w	r3, r0, r1
 80091c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	4bc5      	ldr	r3, [pc, #788]	; (80094e4 <UART_SetConfig+0x384>)
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d004      	beq.n	80091de <UART_SetConfig+0x7e>
 80091d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	4bc3      	ldr	r3, [pc, #780]	; (80094e8 <UART_SetConfig+0x388>)
 80091da:	429a      	cmp	r2, r3
 80091dc:	d103      	bne.n	80091e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091de:	f7fd fe85 	bl	8006eec <HAL_RCC_GetPCLK2Freq>
 80091e2:	6778      	str	r0, [r7, #116]	; 0x74
 80091e4:	e002      	b.n	80091ec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80091e6:	f7fd fe6d 	bl	8006ec4 <HAL_RCC_GetPCLK1Freq>
 80091ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091f4:	f040 80b6 	bne.w	8009364 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091fa:	461c      	mov	r4, r3
 80091fc:	f04f 0500 	mov.w	r5, #0
 8009200:	4622      	mov	r2, r4
 8009202:	462b      	mov	r3, r5
 8009204:	1891      	adds	r1, r2, r2
 8009206:	6439      	str	r1, [r7, #64]	; 0x40
 8009208:	415b      	adcs	r3, r3
 800920a:	647b      	str	r3, [r7, #68]	; 0x44
 800920c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009210:	1912      	adds	r2, r2, r4
 8009212:	eb45 0303 	adc.w	r3, r5, r3
 8009216:	f04f 0000 	mov.w	r0, #0
 800921a:	f04f 0100 	mov.w	r1, #0
 800921e:	00d9      	lsls	r1, r3, #3
 8009220:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009224:	00d0      	lsls	r0, r2, #3
 8009226:	4602      	mov	r2, r0
 8009228:	460b      	mov	r3, r1
 800922a:	1911      	adds	r1, r2, r4
 800922c:	6639      	str	r1, [r7, #96]	; 0x60
 800922e:	416b      	adcs	r3, r5
 8009230:	667b      	str	r3, [r7, #100]	; 0x64
 8009232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	461a      	mov	r2, r3
 8009238:	f04f 0300 	mov.w	r3, #0
 800923c:	1891      	adds	r1, r2, r2
 800923e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009240:	415b      	adcs	r3, r3
 8009242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009244:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009248:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800924c:	f7f7 fd1c 	bl	8000c88 <__aeabi_uldivmod>
 8009250:	4602      	mov	r2, r0
 8009252:	460b      	mov	r3, r1
 8009254:	4ba5      	ldr	r3, [pc, #660]	; (80094ec <UART_SetConfig+0x38c>)
 8009256:	fba3 2302 	umull	r2, r3, r3, r2
 800925a:	095b      	lsrs	r3, r3, #5
 800925c:	011e      	lsls	r6, r3, #4
 800925e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009260:	461c      	mov	r4, r3
 8009262:	f04f 0500 	mov.w	r5, #0
 8009266:	4622      	mov	r2, r4
 8009268:	462b      	mov	r3, r5
 800926a:	1891      	adds	r1, r2, r2
 800926c:	6339      	str	r1, [r7, #48]	; 0x30
 800926e:	415b      	adcs	r3, r3
 8009270:	637b      	str	r3, [r7, #52]	; 0x34
 8009272:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009276:	1912      	adds	r2, r2, r4
 8009278:	eb45 0303 	adc.w	r3, r5, r3
 800927c:	f04f 0000 	mov.w	r0, #0
 8009280:	f04f 0100 	mov.w	r1, #0
 8009284:	00d9      	lsls	r1, r3, #3
 8009286:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800928a:	00d0      	lsls	r0, r2, #3
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	1911      	adds	r1, r2, r4
 8009292:	65b9      	str	r1, [r7, #88]	; 0x58
 8009294:	416b      	adcs	r3, r5
 8009296:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	461a      	mov	r2, r3
 800929e:	f04f 0300 	mov.w	r3, #0
 80092a2:	1891      	adds	r1, r2, r2
 80092a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80092a6:	415b      	adcs	r3, r3
 80092a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80092b2:	f7f7 fce9 	bl	8000c88 <__aeabi_uldivmod>
 80092b6:	4602      	mov	r2, r0
 80092b8:	460b      	mov	r3, r1
 80092ba:	4b8c      	ldr	r3, [pc, #560]	; (80094ec <UART_SetConfig+0x38c>)
 80092bc:	fba3 1302 	umull	r1, r3, r3, r2
 80092c0:	095b      	lsrs	r3, r3, #5
 80092c2:	2164      	movs	r1, #100	; 0x64
 80092c4:	fb01 f303 	mul.w	r3, r1, r3
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	00db      	lsls	r3, r3, #3
 80092cc:	3332      	adds	r3, #50	; 0x32
 80092ce:	4a87      	ldr	r2, [pc, #540]	; (80094ec <UART_SetConfig+0x38c>)
 80092d0:	fba2 2303 	umull	r2, r3, r2, r3
 80092d4:	095b      	lsrs	r3, r3, #5
 80092d6:	005b      	lsls	r3, r3, #1
 80092d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80092dc:	441e      	add	r6, r3
 80092de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092e0:	4618      	mov	r0, r3
 80092e2:	f04f 0100 	mov.w	r1, #0
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	1894      	adds	r4, r2, r2
 80092ec:	623c      	str	r4, [r7, #32]
 80092ee:	415b      	adcs	r3, r3
 80092f0:	627b      	str	r3, [r7, #36]	; 0x24
 80092f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80092f6:	1812      	adds	r2, r2, r0
 80092f8:	eb41 0303 	adc.w	r3, r1, r3
 80092fc:	f04f 0400 	mov.w	r4, #0
 8009300:	f04f 0500 	mov.w	r5, #0
 8009304:	00dd      	lsls	r5, r3, #3
 8009306:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800930a:	00d4      	lsls	r4, r2, #3
 800930c:	4622      	mov	r2, r4
 800930e:	462b      	mov	r3, r5
 8009310:	1814      	adds	r4, r2, r0
 8009312:	653c      	str	r4, [r7, #80]	; 0x50
 8009314:	414b      	adcs	r3, r1
 8009316:	657b      	str	r3, [r7, #84]	; 0x54
 8009318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	461a      	mov	r2, r3
 800931e:	f04f 0300 	mov.w	r3, #0
 8009322:	1891      	adds	r1, r2, r2
 8009324:	61b9      	str	r1, [r7, #24]
 8009326:	415b      	adcs	r3, r3
 8009328:	61fb      	str	r3, [r7, #28]
 800932a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800932e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009332:	f7f7 fca9 	bl	8000c88 <__aeabi_uldivmod>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	4b6c      	ldr	r3, [pc, #432]	; (80094ec <UART_SetConfig+0x38c>)
 800933c:	fba3 1302 	umull	r1, r3, r3, r2
 8009340:	095b      	lsrs	r3, r3, #5
 8009342:	2164      	movs	r1, #100	; 0x64
 8009344:	fb01 f303 	mul.w	r3, r1, r3
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	00db      	lsls	r3, r3, #3
 800934c:	3332      	adds	r3, #50	; 0x32
 800934e:	4a67      	ldr	r2, [pc, #412]	; (80094ec <UART_SetConfig+0x38c>)
 8009350:	fba2 2303 	umull	r2, r3, r2, r3
 8009354:	095b      	lsrs	r3, r3, #5
 8009356:	f003 0207 	and.w	r2, r3, #7
 800935a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4432      	add	r2, r6
 8009360:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009362:	e0b9      	b.n	80094d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009366:	461c      	mov	r4, r3
 8009368:	f04f 0500 	mov.w	r5, #0
 800936c:	4622      	mov	r2, r4
 800936e:	462b      	mov	r3, r5
 8009370:	1891      	adds	r1, r2, r2
 8009372:	6139      	str	r1, [r7, #16]
 8009374:	415b      	adcs	r3, r3
 8009376:	617b      	str	r3, [r7, #20]
 8009378:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800937c:	1912      	adds	r2, r2, r4
 800937e:	eb45 0303 	adc.w	r3, r5, r3
 8009382:	f04f 0000 	mov.w	r0, #0
 8009386:	f04f 0100 	mov.w	r1, #0
 800938a:	00d9      	lsls	r1, r3, #3
 800938c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009390:	00d0      	lsls	r0, r2, #3
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	eb12 0804 	adds.w	r8, r2, r4
 800939a:	eb43 0905 	adc.w	r9, r3, r5
 800939e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f04f 0100 	mov.w	r1, #0
 80093a8:	f04f 0200 	mov.w	r2, #0
 80093ac:	f04f 0300 	mov.w	r3, #0
 80093b0:	008b      	lsls	r3, r1, #2
 80093b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80093b6:	0082      	lsls	r2, r0, #2
 80093b8:	4640      	mov	r0, r8
 80093ba:	4649      	mov	r1, r9
 80093bc:	f7f7 fc64 	bl	8000c88 <__aeabi_uldivmod>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4b49      	ldr	r3, [pc, #292]	; (80094ec <UART_SetConfig+0x38c>)
 80093c6:	fba3 2302 	umull	r2, r3, r3, r2
 80093ca:	095b      	lsrs	r3, r3, #5
 80093cc:	011e      	lsls	r6, r3, #4
 80093ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093d0:	4618      	mov	r0, r3
 80093d2:	f04f 0100 	mov.w	r1, #0
 80093d6:	4602      	mov	r2, r0
 80093d8:	460b      	mov	r3, r1
 80093da:	1894      	adds	r4, r2, r2
 80093dc:	60bc      	str	r4, [r7, #8]
 80093de:	415b      	adcs	r3, r3
 80093e0:	60fb      	str	r3, [r7, #12]
 80093e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093e6:	1812      	adds	r2, r2, r0
 80093e8:	eb41 0303 	adc.w	r3, r1, r3
 80093ec:	f04f 0400 	mov.w	r4, #0
 80093f0:	f04f 0500 	mov.w	r5, #0
 80093f4:	00dd      	lsls	r5, r3, #3
 80093f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80093fa:	00d4      	lsls	r4, r2, #3
 80093fc:	4622      	mov	r2, r4
 80093fe:	462b      	mov	r3, r5
 8009400:	1814      	adds	r4, r2, r0
 8009402:	64bc      	str	r4, [r7, #72]	; 0x48
 8009404:	414b      	adcs	r3, r1
 8009406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	4618      	mov	r0, r3
 800940e:	f04f 0100 	mov.w	r1, #0
 8009412:	f04f 0200 	mov.w	r2, #0
 8009416:	f04f 0300 	mov.w	r3, #0
 800941a:	008b      	lsls	r3, r1, #2
 800941c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009420:	0082      	lsls	r2, r0, #2
 8009422:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009426:	f7f7 fc2f 	bl	8000c88 <__aeabi_uldivmod>
 800942a:	4602      	mov	r2, r0
 800942c:	460b      	mov	r3, r1
 800942e:	4b2f      	ldr	r3, [pc, #188]	; (80094ec <UART_SetConfig+0x38c>)
 8009430:	fba3 1302 	umull	r1, r3, r3, r2
 8009434:	095b      	lsrs	r3, r3, #5
 8009436:	2164      	movs	r1, #100	; 0x64
 8009438:	fb01 f303 	mul.w	r3, r1, r3
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	011b      	lsls	r3, r3, #4
 8009440:	3332      	adds	r3, #50	; 0x32
 8009442:	4a2a      	ldr	r2, [pc, #168]	; (80094ec <UART_SetConfig+0x38c>)
 8009444:	fba2 2303 	umull	r2, r3, r2, r3
 8009448:	095b      	lsrs	r3, r3, #5
 800944a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800944e:	441e      	add	r6, r3
 8009450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009452:	4618      	mov	r0, r3
 8009454:	f04f 0100 	mov.w	r1, #0
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	1894      	adds	r4, r2, r2
 800945e:	603c      	str	r4, [r7, #0]
 8009460:	415b      	adcs	r3, r3
 8009462:	607b      	str	r3, [r7, #4]
 8009464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009468:	1812      	adds	r2, r2, r0
 800946a:	eb41 0303 	adc.w	r3, r1, r3
 800946e:	f04f 0400 	mov.w	r4, #0
 8009472:	f04f 0500 	mov.w	r5, #0
 8009476:	00dd      	lsls	r5, r3, #3
 8009478:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800947c:	00d4      	lsls	r4, r2, #3
 800947e:	4622      	mov	r2, r4
 8009480:	462b      	mov	r3, r5
 8009482:	eb12 0a00 	adds.w	sl, r2, r0
 8009486:	eb43 0b01 	adc.w	fp, r3, r1
 800948a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	4618      	mov	r0, r3
 8009490:	f04f 0100 	mov.w	r1, #0
 8009494:	f04f 0200 	mov.w	r2, #0
 8009498:	f04f 0300 	mov.w	r3, #0
 800949c:	008b      	lsls	r3, r1, #2
 800949e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80094a2:	0082      	lsls	r2, r0, #2
 80094a4:	4650      	mov	r0, sl
 80094a6:	4659      	mov	r1, fp
 80094a8:	f7f7 fbee 	bl	8000c88 <__aeabi_uldivmod>
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	4b0e      	ldr	r3, [pc, #56]	; (80094ec <UART_SetConfig+0x38c>)
 80094b2:	fba3 1302 	umull	r1, r3, r3, r2
 80094b6:	095b      	lsrs	r3, r3, #5
 80094b8:	2164      	movs	r1, #100	; 0x64
 80094ba:	fb01 f303 	mul.w	r3, r1, r3
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	011b      	lsls	r3, r3, #4
 80094c2:	3332      	adds	r3, #50	; 0x32
 80094c4:	4a09      	ldr	r2, [pc, #36]	; (80094ec <UART_SetConfig+0x38c>)
 80094c6:	fba2 2303 	umull	r2, r3, r2, r3
 80094ca:	095b      	lsrs	r3, r3, #5
 80094cc:	f003 020f 	and.w	r2, r3, #15
 80094d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4432      	add	r2, r6
 80094d6:	609a      	str	r2, [r3, #8]
}
 80094d8:	bf00      	nop
 80094da:	377c      	adds	r7, #124	; 0x7c
 80094dc:	46bd      	mov	sp, r7
 80094de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e2:	bf00      	nop
 80094e4:	40011000 	.word	0x40011000
 80094e8:	40011400 	.word	0x40011400
 80094ec:	51eb851f 	.word	0x51eb851f

080094f0 <__errno>:
 80094f0:	4b01      	ldr	r3, [pc, #4]	; (80094f8 <__errno+0x8>)
 80094f2:	6818      	ldr	r0, [r3, #0]
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	20000018 	.word	0x20000018

080094fc <__libc_init_array>:
 80094fc:	b570      	push	{r4, r5, r6, lr}
 80094fe:	4d0d      	ldr	r5, [pc, #52]	; (8009534 <__libc_init_array+0x38>)
 8009500:	4c0d      	ldr	r4, [pc, #52]	; (8009538 <__libc_init_array+0x3c>)
 8009502:	1b64      	subs	r4, r4, r5
 8009504:	10a4      	asrs	r4, r4, #2
 8009506:	2600      	movs	r6, #0
 8009508:	42a6      	cmp	r6, r4
 800950a:	d109      	bne.n	8009520 <__libc_init_array+0x24>
 800950c:	4d0b      	ldr	r5, [pc, #44]	; (800953c <__libc_init_array+0x40>)
 800950e:	4c0c      	ldr	r4, [pc, #48]	; (8009540 <__libc_init_array+0x44>)
 8009510:	f004 f8e0 	bl	800d6d4 <_init>
 8009514:	1b64      	subs	r4, r4, r5
 8009516:	10a4      	asrs	r4, r4, #2
 8009518:	2600      	movs	r6, #0
 800951a:	42a6      	cmp	r6, r4
 800951c:	d105      	bne.n	800952a <__libc_init_array+0x2e>
 800951e:	bd70      	pop	{r4, r5, r6, pc}
 8009520:	f855 3b04 	ldr.w	r3, [r5], #4
 8009524:	4798      	blx	r3
 8009526:	3601      	adds	r6, #1
 8009528:	e7ee      	b.n	8009508 <__libc_init_array+0xc>
 800952a:	f855 3b04 	ldr.w	r3, [r5], #4
 800952e:	4798      	blx	r3
 8009530:	3601      	adds	r6, #1
 8009532:	e7f2      	b.n	800951a <__libc_init_array+0x1e>
 8009534:	0800e5b8 	.word	0x0800e5b8
 8009538:	0800e5b8 	.word	0x0800e5b8
 800953c:	0800e5b8 	.word	0x0800e5b8
 8009540:	0800e5bc 	.word	0x0800e5bc

08009544 <memcpy>:
 8009544:	440a      	add	r2, r1
 8009546:	4291      	cmp	r1, r2
 8009548:	f100 33ff 	add.w	r3, r0, #4294967295
 800954c:	d100      	bne.n	8009550 <memcpy+0xc>
 800954e:	4770      	bx	lr
 8009550:	b510      	push	{r4, lr}
 8009552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009556:	f803 4f01 	strb.w	r4, [r3, #1]!
 800955a:	4291      	cmp	r1, r2
 800955c:	d1f9      	bne.n	8009552 <memcpy+0xe>
 800955e:	bd10      	pop	{r4, pc}

08009560 <memset>:
 8009560:	4402      	add	r2, r0
 8009562:	4603      	mov	r3, r0
 8009564:	4293      	cmp	r3, r2
 8009566:	d100      	bne.n	800956a <memset+0xa>
 8009568:	4770      	bx	lr
 800956a:	f803 1b01 	strb.w	r1, [r3], #1
 800956e:	e7f9      	b.n	8009564 <memset+0x4>

08009570 <__cvt>:
 8009570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009574:	ec55 4b10 	vmov	r4, r5, d0
 8009578:	2d00      	cmp	r5, #0
 800957a:	460e      	mov	r6, r1
 800957c:	4619      	mov	r1, r3
 800957e:	462b      	mov	r3, r5
 8009580:	bfbb      	ittet	lt
 8009582:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009586:	461d      	movlt	r5, r3
 8009588:	2300      	movge	r3, #0
 800958a:	232d      	movlt	r3, #45	; 0x2d
 800958c:	700b      	strb	r3, [r1, #0]
 800958e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009590:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009594:	4691      	mov	r9, r2
 8009596:	f023 0820 	bic.w	r8, r3, #32
 800959a:	bfbc      	itt	lt
 800959c:	4622      	movlt	r2, r4
 800959e:	4614      	movlt	r4, r2
 80095a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095a4:	d005      	beq.n	80095b2 <__cvt+0x42>
 80095a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80095aa:	d100      	bne.n	80095ae <__cvt+0x3e>
 80095ac:	3601      	adds	r6, #1
 80095ae:	2102      	movs	r1, #2
 80095b0:	e000      	b.n	80095b4 <__cvt+0x44>
 80095b2:	2103      	movs	r1, #3
 80095b4:	ab03      	add	r3, sp, #12
 80095b6:	9301      	str	r3, [sp, #4]
 80095b8:	ab02      	add	r3, sp, #8
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	ec45 4b10 	vmov	d0, r4, r5
 80095c0:	4653      	mov	r3, sl
 80095c2:	4632      	mov	r2, r6
 80095c4:	f000 fe38 	bl	800a238 <_dtoa_r>
 80095c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80095cc:	4607      	mov	r7, r0
 80095ce:	d102      	bne.n	80095d6 <__cvt+0x66>
 80095d0:	f019 0f01 	tst.w	r9, #1
 80095d4:	d022      	beq.n	800961c <__cvt+0xac>
 80095d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095da:	eb07 0906 	add.w	r9, r7, r6
 80095de:	d110      	bne.n	8009602 <__cvt+0x92>
 80095e0:	783b      	ldrb	r3, [r7, #0]
 80095e2:	2b30      	cmp	r3, #48	; 0x30
 80095e4:	d10a      	bne.n	80095fc <__cvt+0x8c>
 80095e6:	2200      	movs	r2, #0
 80095e8:	2300      	movs	r3, #0
 80095ea:	4620      	mov	r0, r4
 80095ec:	4629      	mov	r1, r5
 80095ee:	f7f7 fa6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80095f2:	b918      	cbnz	r0, 80095fc <__cvt+0x8c>
 80095f4:	f1c6 0601 	rsb	r6, r6, #1
 80095f8:	f8ca 6000 	str.w	r6, [sl]
 80095fc:	f8da 3000 	ldr.w	r3, [sl]
 8009600:	4499      	add	r9, r3
 8009602:	2200      	movs	r2, #0
 8009604:	2300      	movs	r3, #0
 8009606:	4620      	mov	r0, r4
 8009608:	4629      	mov	r1, r5
 800960a:	f7f7 fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800960e:	b108      	cbz	r0, 8009614 <__cvt+0xa4>
 8009610:	f8cd 900c 	str.w	r9, [sp, #12]
 8009614:	2230      	movs	r2, #48	; 0x30
 8009616:	9b03      	ldr	r3, [sp, #12]
 8009618:	454b      	cmp	r3, r9
 800961a:	d307      	bcc.n	800962c <__cvt+0xbc>
 800961c:	9b03      	ldr	r3, [sp, #12]
 800961e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009620:	1bdb      	subs	r3, r3, r7
 8009622:	4638      	mov	r0, r7
 8009624:	6013      	str	r3, [r2, #0]
 8009626:	b004      	add	sp, #16
 8009628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800962c:	1c59      	adds	r1, r3, #1
 800962e:	9103      	str	r1, [sp, #12]
 8009630:	701a      	strb	r2, [r3, #0]
 8009632:	e7f0      	b.n	8009616 <__cvt+0xa6>

08009634 <__exponent>:
 8009634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009636:	4603      	mov	r3, r0
 8009638:	2900      	cmp	r1, #0
 800963a:	bfb8      	it	lt
 800963c:	4249      	neglt	r1, r1
 800963e:	f803 2b02 	strb.w	r2, [r3], #2
 8009642:	bfb4      	ite	lt
 8009644:	222d      	movlt	r2, #45	; 0x2d
 8009646:	222b      	movge	r2, #43	; 0x2b
 8009648:	2909      	cmp	r1, #9
 800964a:	7042      	strb	r2, [r0, #1]
 800964c:	dd2a      	ble.n	80096a4 <__exponent+0x70>
 800964e:	f10d 0407 	add.w	r4, sp, #7
 8009652:	46a4      	mov	ip, r4
 8009654:	270a      	movs	r7, #10
 8009656:	46a6      	mov	lr, r4
 8009658:	460a      	mov	r2, r1
 800965a:	fb91 f6f7 	sdiv	r6, r1, r7
 800965e:	fb07 1516 	mls	r5, r7, r6, r1
 8009662:	3530      	adds	r5, #48	; 0x30
 8009664:	2a63      	cmp	r2, #99	; 0x63
 8009666:	f104 34ff 	add.w	r4, r4, #4294967295
 800966a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800966e:	4631      	mov	r1, r6
 8009670:	dcf1      	bgt.n	8009656 <__exponent+0x22>
 8009672:	3130      	adds	r1, #48	; 0x30
 8009674:	f1ae 0502 	sub.w	r5, lr, #2
 8009678:	f804 1c01 	strb.w	r1, [r4, #-1]
 800967c:	1c44      	adds	r4, r0, #1
 800967e:	4629      	mov	r1, r5
 8009680:	4561      	cmp	r1, ip
 8009682:	d30a      	bcc.n	800969a <__exponent+0x66>
 8009684:	f10d 0209 	add.w	r2, sp, #9
 8009688:	eba2 020e 	sub.w	r2, r2, lr
 800968c:	4565      	cmp	r5, ip
 800968e:	bf88      	it	hi
 8009690:	2200      	movhi	r2, #0
 8009692:	4413      	add	r3, r2
 8009694:	1a18      	subs	r0, r3, r0
 8009696:	b003      	add	sp, #12
 8009698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800969a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800969e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80096a2:	e7ed      	b.n	8009680 <__exponent+0x4c>
 80096a4:	2330      	movs	r3, #48	; 0x30
 80096a6:	3130      	adds	r1, #48	; 0x30
 80096a8:	7083      	strb	r3, [r0, #2]
 80096aa:	70c1      	strb	r1, [r0, #3]
 80096ac:	1d03      	adds	r3, r0, #4
 80096ae:	e7f1      	b.n	8009694 <__exponent+0x60>

080096b0 <_printf_float>:
 80096b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b4:	ed2d 8b02 	vpush	{d8}
 80096b8:	b08d      	sub	sp, #52	; 0x34
 80096ba:	460c      	mov	r4, r1
 80096bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80096c0:	4616      	mov	r6, r2
 80096c2:	461f      	mov	r7, r3
 80096c4:	4605      	mov	r5, r0
 80096c6:	f001 fd5b 	bl	800b180 <_localeconv_r>
 80096ca:	f8d0 a000 	ldr.w	sl, [r0]
 80096ce:	4650      	mov	r0, sl
 80096d0:	f7f6 fd7e 	bl	80001d0 <strlen>
 80096d4:	2300      	movs	r3, #0
 80096d6:	930a      	str	r3, [sp, #40]	; 0x28
 80096d8:	6823      	ldr	r3, [r4, #0]
 80096da:	9305      	str	r3, [sp, #20]
 80096dc:	f8d8 3000 	ldr.w	r3, [r8]
 80096e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80096e4:	3307      	adds	r3, #7
 80096e6:	f023 0307 	bic.w	r3, r3, #7
 80096ea:	f103 0208 	add.w	r2, r3, #8
 80096ee:	f8c8 2000 	str.w	r2, [r8]
 80096f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80096fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80096fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009702:	9307      	str	r3, [sp, #28]
 8009704:	f8cd 8018 	str.w	r8, [sp, #24]
 8009708:	ee08 0a10 	vmov	s16, r0
 800970c:	4b9f      	ldr	r3, [pc, #636]	; (800998c <_printf_float+0x2dc>)
 800970e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009712:	f04f 32ff 	mov.w	r2, #4294967295
 8009716:	f7f7 fa09 	bl	8000b2c <__aeabi_dcmpun>
 800971a:	bb88      	cbnz	r0, 8009780 <_printf_float+0xd0>
 800971c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009720:	4b9a      	ldr	r3, [pc, #616]	; (800998c <_printf_float+0x2dc>)
 8009722:	f04f 32ff 	mov.w	r2, #4294967295
 8009726:	f7f7 f9e3 	bl	8000af0 <__aeabi_dcmple>
 800972a:	bb48      	cbnz	r0, 8009780 <_printf_float+0xd0>
 800972c:	2200      	movs	r2, #0
 800972e:	2300      	movs	r3, #0
 8009730:	4640      	mov	r0, r8
 8009732:	4649      	mov	r1, r9
 8009734:	f7f7 f9d2 	bl	8000adc <__aeabi_dcmplt>
 8009738:	b110      	cbz	r0, 8009740 <_printf_float+0x90>
 800973a:	232d      	movs	r3, #45	; 0x2d
 800973c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009740:	4b93      	ldr	r3, [pc, #588]	; (8009990 <_printf_float+0x2e0>)
 8009742:	4894      	ldr	r0, [pc, #592]	; (8009994 <_printf_float+0x2e4>)
 8009744:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009748:	bf94      	ite	ls
 800974a:	4698      	movls	r8, r3
 800974c:	4680      	movhi	r8, r0
 800974e:	2303      	movs	r3, #3
 8009750:	6123      	str	r3, [r4, #16]
 8009752:	9b05      	ldr	r3, [sp, #20]
 8009754:	f023 0204 	bic.w	r2, r3, #4
 8009758:	6022      	str	r2, [r4, #0]
 800975a:	f04f 0900 	mov.w	r9, #0
 800975e:	9700      	str	r7, [sp, #0]
 8009760:	4633      	mov	r3, r6
 8009762:	aa0b      	add	r2, sp, #44	; 0x2c
 8009764:	4621      	mov	r1, r4
 8009766:	4628      	mov	r0, r5
 8009768:	f000 f9d8 	bl	8009b1c <_printf_common>
 800976c:	3001      	adds	r0, #1
 800976e:	f040 8090 	bne.w	8009892 <_printf_float+0x1e2>
 8009772:	f04f 30ff 	mov.w	r0, #4294967295
 8009776:	b00d      	add	sp, #52	; 0x34
 8009778:	ecbd 8b02 	vpop	{d8}
 800977c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009780:	4642      	mov	r2, r8
 8009782:	464b      	mov	r3, r9
 8009784:	4640      	mov	r0, r8
 8009786:	4649      	mov	r1, r9
 8009788:	f7f7 f9d0 	bl	8000b2c <__aeabi_dcmpun>
 800978c:	b140      	cbz	r0, 80097a0 <_printf_float+0xf0>
 800978e:	464b      	mov	r3, r9
 8009790:	2b00      	cmp	r3, #0
 8009792:	bfbc      	itt	lt
 8009794:	232d      	movlt	r3, #45	; 0x2d
 8009796:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800979a:	487f      	ldr	r0, [pc, #508]	; (8009998 <_printf_float+0x2e8>)
 800979c:	4b7f      	ldr	r3, [pc, #508]	; (800999c <_printf_float+0x2ec>)
 800979e:	e7d1      	b.n	8009744 <_printf_float+0x94>
 80097a0:	6863      	ldr	r3, [r4, #4]
 80097a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80097a6:	9206      	str	r2, [sp, #24]
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	d13f      	bne.n	800982c <_printf_float+0x17c>
 80097ac:	2306      	movs	r3, #6
 80097ae:	6063      	str	r3, [r4, #4]
 80097b0:	9b05      	ldr	r3, [sp, #20]
 80097b2:	6861      	ldr	r1, [r4, #4]
 80097b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80097b8:	2300      	movs	r3, #0
 80097ba:	9303      	str	r3, [sp, #12]
 80097bc:	ab0a      	add	r3, sp, #40	; 0x28
 80097be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80097c2:	ab09      	add	r3, sp, #36	; 0x24
 80097c4:	ec49 8b10 	vmov	d0, r8, r9
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	6022      	str	r2, [r4, #0]
 80097cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80097d0:	4628      	mov	r0, r5
 80097d2:	f7ff fecd 	bl	8009570 <__cvt>
 80097d6:	9b06      	ldr	r3, [sp, #24]
 80097d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097da:	2b47      	cmp	r3, #71	; 0x47
 80097dc:	4680      	mov	r8, r0
 80097de:	d108      	bne.n	80097f2 <_printf_float+0x142>
 80097e0:	1cc8      	adds	r0, r1, #3
 80097e2:	db02      	blt.n	80097ea <_printf_float+0x13a>
 80097e4:	6863      	ldr	r3, [r4, #4]
 80097e6:	4299      	cmp	r1, r3
 80097e8:	dd41      	ble.n	800986e <_printf_float+0x1be>
 80097ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80097ee:	fa5f fb8b 	uxtb.w	fp, fp
 80097f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80097f6:	d820      	bhi.n	800983a <_printf_float+0x18a>
 80097f8:	3901      	subs	r1, #1
 80097fa:	465a      	mov	r2, fp
 80097fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009800:	9109      	str	r1, [sp, #36]	; 0x24
 8009802:	f7ff ff17 	bl	8009634 <__exponent>
 8009806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009808:	1813      	adds	r3, r2, r0
 800980a:	2a01      	cmp	r2, #1
 800980c:	4681      	mov	r9, r0
 800980e:	6123      	str	r3, [r4, #16]
 8009810:	dc02      	bgt.n	8009818 <_printf_float+0x168>
 8009812:	6822      	ldr	r2, [r4, #0]
 8009814:	07d2      	lsls	r2, r2, #31
 8009816:	d501      	bpl.n	800981c <_printf_float+0x16c>
 8009818:	3301      	adds	r3, #1
 800981a:	6123      	str	r3, [r4, #16]
 800981c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009820:	2b00      	cmp	r3, #0
 8009822:	d09c      	beq.n	800975e <_printf_float+0xae>
 8009824:	232d      	movs	r3, #45	; 0x2d
 8009826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800982a:	e798      	b.n	800975e <_printf_float+0xae>
 800982c:	9a06      	ldr	r2, [sp, #24]
 800982e:	2a47      	cmp	r2, #71	; 0x47
 8009830:	d1be      	bne.n	80097b0 <_printf_float+0x100>
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1bc      	bne.n	80097b0 <_printf_float+0x100>
 8009836:	2301      	movs	r3, #1
 8009838:	e7b9      	b.n	80097ae <_printf_float+0xfe>
 800983a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800983e:	d118      	bne.n	8009872 <_printf_float+0x1c2>
 8009840:	2900      	cmp	r1, #0
 8009842:	6863      	ldr	r3, [r4, #4]
 8009844:	dd0b      	ble.n	800985e <_printf_float+0x1ae>
 8009846:	6121      	str	r1, [r4, #16]
 8009848:	b913      	cbnz	r3, 8009850 <_printf_float+0x1a0>
 800984a:	6822      	ldr	r2, [r4, #0]
 800984c:	07d0      	lsls	r0, r2, #31
 800984e:	d502      	bpl.n	8009856 <_printf_float+0x1a6>
 8009850:	3301      	adds	r3, #1
 8009852:	440b      	add	r3, r1
 8009854:	6123      	str	r3, [r4, #16]
 8009856:	65a1      	str	r1, [r4, #88]	; 0x58
 8009858:	f04f 0900 	mov.w	r9, #0
 800985c:	e7de      	b.n	800981c <_printf_float+0x16c>
 800985e:	b913      	cbnz	r3, 8009866 <_printf_float+0x1b6>
 8009860:	6822      	ldr	r2, [r4, #0]
 8009862:	07d2      	lsls	r2, r2, #31
 8009864:	d501      	bpl.n	800986a <_printf_float+0x1ba>
 8009866:	3302      	adds	r3, #2
 8009868:	e7f4      	b.n	8009854 <_printf_float+0x1a4>
 800986a:	2301      	movs	r3, #1
 800986c:	e7f2      	b.n	8009854 <_printf_float+0x1a4>
 800986e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009874:	4299      	cmp	r1, r3
 8009876:	db05      	blt.n	8009884 <_printf_float+0x1d4>
 8009878:	6823      	ldr	r3, [r4, #0]
 800987a:	6121      	str	r1, [r4, #16]
 800987c:	07d8      	lsls	r0, r3, #31
 800987e:	d5ea      	bpl.n	8009856 <_printf_float+0x1a6>
 8009880:	1c4b      	adds	r3, r1, #1
 8009882:	e7e7      	b.n	8009854 <_printf_float+0x1a4>
 8009884:	2900      	cmp	r1, #0
 8009886:	bfd4      	ite	le
 8009888:	f1c1 0202 	rsble	r2, r1, #2
 800988c:	2201      	movgt	r2, #1
 800988e:	4413      	add	r3, r2
 8009890:	e7e0      	b.n	8009854 <_printf_float+0x1a4>
 8009892:	6823      	ldr	r3, [r4, #0]
 8009894:	055a      	lsls	r2, r3, #21
 8009896:	d407      	bmi.n	80098a8 <_printf_float+0x1f8>
 8009898:	6923      	ldr	r3, [r4, #16]
 800989a:	4642      	mov	r2, r8
 800989c:	4631      	mov	r1, r6
 800989e:	4628      	mov	r0, r5
 80098a0:	47b8      	blx	r7
 80098a2:	3001      	adds	r0, #1
 80098a4:	d12c      	bne.n	8009900 <_printf_float+0x250>
 80098a6:	e764      	b.n	8009772 <_printf_float+0xc2>
 80098a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098ac:	f240 80e0 	bls.w	8009a70 <_printf_float+0x3c0>
 80098b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098b4:	2200      	movs	r2, #0
 80098b6:	2300      	movs	r3, #0
 80098b8:	f7f7 f906 	bl	8000ac8 <__aeabi_dcmpeq>
 80098bc:	2800      	cmp	r0, #0
 80098be:	d034      	beq.n	800992a <_printf_float+0x27a>
 80098c0:	4a37      	ldr	r2, [pc, #220]	; (80099a0 <_printf_float+0x2f0>)
 80098c2:	2301      	movs	r3, #1
 80098c4:	4631      	mov	r1, r6
 80098c6:	4628      	mov	r0, r5
 80098c8:	47b8      	blx	r7
 80098ca:	3001      	adds	r0, #1
 80098cc:	f43f af51 	beq.w	8009772 <_printf_float+0xc2>
 80098d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098d4:	429a      	cmp	r2, r3
 80098d6:	db02      	blt.n	80098de <_printf_float+0x22e>
 80098d8:	6823      	ldr	r3, [r4, #0]
 80098da:	07d8      	lsls	r0, r3, #31
 80098dc:	d510      	bpl.n	8009900 <_printf_float+0x250>
 80098de:	ee18 3a10 	vmov	r3, s16
 80098e2:	4652      	mov	r2, sl
 80098e4:	4631      	mov	r1, r6
 80098e6:	4628      	mov	r0, r5
 80098e8:	47b8      	blx	r7
 80098ea:	3001      	adds	r0, #1
 80098ec:	f43f af41 	beq.w	8009772 <_printf_float+0xc2>
 80098f0:	f04f 0800 	mov.w	r8, #0
 80098f4:	f104 091a 	add.w	r9, r4, #26
 80098f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098fa:	3b01      	subs	r3, #1
 80098fc:	4543      	cmp	r3, r8
 80098fe:	dc09      	bgt.n	8009914 <_printf_float+0x264>
 8009900:	6823      	ldr	r3, [r4, #0]
 8009902:	079b      	lsls	r3, r3, #30
 8009904:	f100 8105 	bmi.w	8009b12 <_printf_float+0x462>
 8009908:	68e0      	ldr	r0, [r4, #12]
 800990a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800990c:	4298      	cmp	r0, r3
 800990e:	bfb8      	it	lt
 8009910:	4618      	movlt	r0, r3
 8009912:	e730      	b.n	8009776 <_printf_float+0xc6>
 8009914:	2301      	movs	r3, #1
 8009916:	464a      	mov	r2, r9
 8009918:	4631      	mov	r1, r6
 800991a:	4628      	mov	r0, r5
 800991c:	47b8      	blx	r7
 800991e:	3001      	adds	r0, #1
 8009920:	f43f af27 	beq.w	8009772 <_printf_float+0xc2>
 8009924:	f108 0801 	add.w	r8, r8, #1
 8009928:	e7e6      	b.n	80098f8 <_printf_float+0x248>
 800992a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800992c:	2b00      	cmp	r3, #0
 800992e:	dc39      	bgt.n	80099a4 <_printf_float+0x2f4>
 8009930:	4a1b      	ldr	r2, [pc, #108]	; (80099a0 <_printf_float+0x2f0>)
 8009932:	2301      	movs	r3, #1
 8009934:	4631      	mov	r1, r6
 8009936:	4628      	mov	r0, r5
 8009938:	47b8      	blx	r7
 800993a:	3001      	adds	r0, #1
 800993c:	f43f af19 	beq.w	8009772 <_printf_float+0xc2>
 8009940:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009944:	4313      	orrs	r3, r2
 8009946:	d102      	bne.n	800994e <_printf_float+0x29e>
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	07d9      	lsls	r1, r3, #31
 800994c:	d5d8      	bpl.n	8009900 <_printf_float+0x250>
 800994e:	ee18 3a10 	vmov	r3, s16
 8009952:	4652      	mov	r2, sl
 8009954:	4631      	mov	r1, r6
 8009956:	4628      	mov	r0, r5
 8009958:	47b8      	blx	r7
 800995a:	3001      	adds	r0, #1
 800995c:	f43f af09 	beq.w	8009772 <_printf_float+0xc2>
 8009960:	f04f 0900 	mov.w	r9, #0
 8009964:	f104 0a1a 	add.w	sl, r4, #26
 8009968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800996a:	425b      	negs	r3, r3
 800996c:	454b      	cmp	r3, r9
 800996e:	dc01      	bgt.n	8009974 <_printf_float+0x2c4>
 8009970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009972:	e792      	b.n	800989a <_printf_float+0x1ea>
 8009974:	2301      	movs	r3, #1
 8009976:	4652      	mov	r2, sl
 8009978:	4631      	mov	r1, r6
 800997a:	4628      	mov	r0, r5
 800997c:	47b8      	blx	r7
 800997e:	3001      	adds	r0, #1
 8009980:	f43f aef7 	beq.w	8009772 <_printf_float+0xc2>
 8009984:	f109 0901 	add.w	r9, r9, #1
 8009988:	e7ee      	b.n	8009968 <_printf_float+0x2b8>
 800998a:	bf00      	nop
 800998c:	7fefffff 	.word	0x7fefffff
 8009990:	0800dff4 	.word	0x0800dff4
 8009994:	0800dff8 	.word	0x0800dff8
 8009998:	0800e000 	.word	0x0800e000
 800999c:	0800dffc 	.word	0x0800dffc
 80099a0:	0800e004 	.word	0x0800e004
 80099a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099a8:	429a      	cmp	r2, r3
 80099aa:	bfa8      	it	ge
 80099ac:	461a      	movge	r2, r3
 80099ae:	2a00      	cmp	r2, #0
 80099b0:	4691      	mov	r9, r2
 80099b2:	dc37      	bgt.n	8009a24 <_printf_float+0x374>
 80099b4:	f04f 0b00 	mov.w	fp, #0
 80099b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099bc:	f104 021a 	add.w	r2, r4, #26
 80099c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099c2:	9305      	str	r3, [sp, #20]
 80099c4:	eba3 0309 	sub.w	r3, r3, r9
 80099c8:	455b      	cmp	r3, fp
 80099ca:	dc33      	bgt.n	8009a34 <_printf_float+0x384>
 80099cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099d0:	429a      	cmp	r2, r3
 80099d2:	db3b      	blt.n	8009a4c <_printf_float+0x39c>
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	07da      	lsls	r2, r3, #31
 80099d8:	d438      	bmi.n	8009a4c <_printf_float+0x39c>
 80099da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099dc:	9b05      	ldr	r3, [sp, #20]
 80099de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	eba2 0901 	sub.w	r9, r2, r1
 80099e6:	4599      	cmp	r9, r3
 80099e8:	bfa8      	it	ge
 80099ea:	4699      	movge	r9, r3
 80099ec:	f1b9 0f00 	cmp.w	r9, #0
 80099f0:	dc35      	bgt.n	8009a5e <_printf_float+0x3ae>
 80099f2:	f04f 0800 	mov.w	r8, #0
 80099f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099fa:	f104 0a1a 	add.w	sl, r4, #26
 80099fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a02:	1a9b      	subs	r3, r3, r2
 8009a04:	eba3 0309 	sub.w	r3, r3, r9
 8009a08:	4543      	cmp	r3, r8
 8009a0a:	f77f af79 	ble.w	8009900 <_printf_float+0x250>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	4652      	mov	r2, sl
 8009a12:	4631      	mov	r1, r6
 8009a14:	4628      	mov	r0, r5
 8009a16:	47b8      	blx	r7
 8009a18:	3001      	adds	r0, #1
 8009a1a:	f43f aeaa 	beq.w	8009772 <_printf_float+0xc2>
 8009a1e:	f108 0801 	add.w	r8, r8, #1
 8009a22:	e7ec      	b.n	80099fe <_printf_float+0x34e>
 8009a24:	4613      	mov	r3, r2
 8009a26:	4631      	mov	r1, r6
 8009a28:	4642      	mov	r2, r8
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	47b8      	blx	r7
 8009a2e:	3001      	adds	r0, #1
 8009a30:	d1c0      	bne.n	80099b4 <_printf_float+0x304>
 8009a32:	e69e      	b.n	8009772 <_printf_float+0xc2>
 8009a34:	2301      	movs	r3, #1
 8009a36:	4631      	mov	r1, r6
 8009a38:	4628      	mov	r0, r5
 8009a3a:	9205      	str	r2, [sp, #20]
 8009a3c:	47b8      	blx	r7
 8009a3e:	3001      	adds	r0, #1
 8009a40:	f43f ae97 	beq.w	8009772 <_printf_float+0xc2>
 8009a44:	9a05      	ldr	r2, [sp, #20]
 8009a46:	f10b 0b01 	add.w	fp, fp, #1
 8009a4a:	e7b9      	b.n	80099c0 <_printf_float+0x310>
 8009a4c:	ee18 3a10 	vmov	r3, s16
 8009a50:	4652      	mov	r2, sl
 8009a52:	4631      	mov	r1, r6
 8009a54:	4628      	mov	r0, r5
 8009a56:	47b8      	blx	r7
 8009a58:	3001      	adds	r0, #1
 8009a5a:	d1be      	bne.n	80099da <_printf_float+0x32a>
 8009a5c:	e689      	b.n	8009772 <_printf_float+0xc2>
 8009a5e:	9a05      	ldr	r2, [sp, #20]
 8009a60:	464b      	mov	r3, r9
 8009a62:	4442      	add	r2, r8
 8009a64:	4631      	mov	r1, r6
 8009a66:	4628      	mov	r0, r5
 8009a68:	47b8      	blx	r7
 8009a6a:	3001      	adds	r0, #1
 8009a6c:	d1c1      	bne.n	80099f2 <_printf_float+0x342>
 8009a6e:	e680      	b.n	8009772 <_printf_float+0xc2>
 8009a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a72:	2a01      	cmp	r2, #1
 8009a74:	dc01      	bgt.n	8009a7a <_printf_float+0x3ca>
 8009a76:	07db      	lsls	r3, r3, #31
 8009a78:	d538      	bpl.n	8009aec <_printf_float+0x43c>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	4642      	mov	r2, r8
 8009a7e:	4631      	mov	r1, r6
 8009a80:	4628      	mov	r0, r5
 8009a82:	47b8      	blx	r7
 8009a84:	3001      	adds	r0, #1
 8009a86:	f43f ae74 	beq.w	8009772 <_printf_float+0xc2>
 8009a8a:	ee18 3a10 	vmov	r3, s16
 8009a8e:	4652      	mov	r2, sl
 8009a90:	4631      	mov	r1, r6
 8009a92:	4628      	mov	r0, r5
 8009a94:	47b8      	blx	r7
 8009a96:	3001      	adds	r0, #1
 8009a98:	f43f ae6b 	beq.w	8009772 <_printf_float+0xc2>
 8009a9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	f7f7 f810 	bl	8000ac8 <__aeabi_dcmpeq>
 8009aa8:	b9d8      	cbnz	r0, 8009ae2 <_printf_float+0x432>
 8009aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aac:	f108 0201 	add.w	r2, r8, #1
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	4631      	mov	r1, r6
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	47b8      	blx	r7
 8009ab8:	3001      	adds	r0, #1
 8009aba:	d10e      	bne.n	8009ada <_printf_float+0x42a>
 8009abc:	e659      	b.n	8009772 <_printf_float+0xc2>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	4652      	mov	r2, sl
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	47b8      	blx	r7
 8009ac8:	3001      	adds	r0, #1
 8009aca:	f43f ae52 	beq.w	8009772 <_printf_float+0xc2>
 8009ace:	f108 0801 	add.w	r8, r8, #1
 8009ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	4543      	cmp	r3, r8
 8009ad8:	dcf1      	bgt.n	8009abe <_printf_float+0x40e>
 8009ada:	464b      	mov	r3, r9
 8009adc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ae0:	e6dc      	b.n	800989c <_printf_float+0x1ec>
 8009ae2:	f04f 0800 	mov.w	r8, #0
 8009ae6:	f104 0a1a 	add.w	sl, r4, #26
 8009aea:	e7f2      	b.n	8009ad2 <_printf_float+0x422>
 8009aec:	2301      	movs	r3, #1
 8009aee:	4642      	mov	r2, r8
 8009af0:	e7df      	b.n	8009ab2 <_printf_float+0x402>
 8009af2:	2301      	movs	r3, #1
 8009af4:	464a      	mov	r2, r9
 8009af6:	4631      	mov	r1, r6
 8009af8:	4628      	mov	r0, r5
 8009afa:	47b8      	blx	r7
 8009afc:	3001      	adds	r0, #1
 8009afe:	f43f ae38 	beq.w	8009772 <_printf_float+0xc2>
 8009b02:	f108 0801 	add.w	r8, r8, #1
 8009b06:	68e3      	ldr	r3, [r4, #12]
 8009b08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b0a:	1a5b      	subs	r3, r3, r1
 8009b0c:	4543      	cmp	r3, r8
 8009b0e:	dcf0      	bgt.n	8009af2 <_printf_float+0x442>
 8009b10:	e6fa      	b.n	8009908 <_printf_float+0x258>
 8009b12:	f04f 0800 	mov.w	r8, #0
 8009b16:	f104 0919 	add.w	r9, r4, #25
 8009b1a:	e7f4      	b.n	8009b06 <_printf_float+0x456>

08009b1c <_printf_common>:
 8009b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b20:	4616      	mov	r6, r2
 8009b22:	4699      	mov	r9, r3
 8009b24:	688a      	ldr	r2, [r1, #8]
 8009b26:	690b      	ldr	r3, [r1, #16]
 8009b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	bfb8      	it	lt
 8009b30:	4613      	movlt	r3, r2
 8009b32:	6033      	str	r3, [r6, #0]
 8009b34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b38:	4607      	mov	r7, r0
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	b10a      	cbz	r2, 8009b42 <_printf_common+0x26>
 8009b3e:	3301      	adds	r3, #1
 8009b40:	6033      	str	r3, [r6, #0]
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	0699      	lsls	r1, r3, #26
 8009b46:	bf42      	ittt	mi
 8009b48:	6833      	ldrmi	r3, [r6, #0]
 8009b4a:	3302      	addmi	r3, #2
 8009b4c:	6033      	strmi	r3, [r6, #0]
 8009b4e:	6825      	ldr	r5, [r4, #0]
 8009b50:	f015 0506 	ands.w	r5, r5, #6
 8009b54:	d106      	bne.n	8009b64 <_printf_common+0x48>
 8009b56:	f104 0a19 	add.w	sl, r4, #25
 8009b5a:	68e3      	ldr	r3, [r4, #12]
 8009b5c:	6832      	ldr	r2, [r6, #0]
 8009b5e:	1a9b      	subs	r3, r3, r2
 8009b60:	42ab      	cmp	r3, r5
 8009b62:	dc26      	bgt.n	8009bb2 <_printf_common+0x96>
 8009b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b68:	1e13      	subs	r3, r2, #0
 8009b6a:	6822      	ldr	r2, [r4, #0]
 8009b6c:	bf18      	it	ne
 8009b6e:	2301      	movne	r3, #1
 8009b70:	0692      	lsls	r2, r2, #26
 8009b72:	d42b      	bmi.n	8009bcc <_printf_common+0xb0>
 8009b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b78:	4649      	mov	r1, r9
 8009b7a:	4638      	mov	r0, r7
 8009b7c:	47c0      	blx	r8
 8009b7e:	3001      	adds	r0, #1
 8009b80:	d01e      	beq.n	8009bc0 <_printf_common+0xa4>
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	68e5      	ldr	r5, [r4, #12]
 8009b86:	6832      	ldr	r2, [r6, #0]
 8009b88:	f003 0306 	and.w	r3, r3, #6
 8009b8c:	2b04      	cmp	r3, #4
 8009b8e:	bf08      	it	eq
 8009b90:	1aad      	subeq	r5, r5, r2
 8009b92:	68a3      	ldr	r3, [r4, #8]
 8009b94:	6922      	ldr	r2, [r4, #16]
 8009b96:	bf0c      	ite	eq
 8009b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b9c:	2500      	movne	r5, #0
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	bfc4      	itt	gt
 8009ba2:	1a9b      	subgt	r3, r3, r2
 8009ba4:	18ed      	addgt	r5, r5, r3
 8009ba6:	2600      	movs	r6, #0
 8009ba8:	341a      	adds	r4, #26
 8009baa:	42b5      	cmp	r5, r6
 8009bac:	d11a      	bne.n	8009be4 <_printf_common+0xc8>
 8009bae:	2000      	movs	r0, #0
 8009bb0:	e008      	b.n	8009bc4 <_printf_common+0xa8>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	4652      	mov	r2, sl
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	4638      	mov	r0, r7
 8009bba:	47c0      	blx	r8
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d103      	bne.n	8009bc8 <_printf_common+0xac>
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bc8:	3501      	adds	r5, #1
 8009bca:	e7c6      	b.n	8009b5a <_printf_common+0x3e>
 8009bcc:	18e1      	adds	r1, r4, r3
 8009bce:	1c5a      	adds	r2, r3, #1
 8009bd0:	2030      	movs	r0, #48	; 0x30
 8009bd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bd6:	4422      	add	r2, r4
 8009bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009be0:	3302      	adds	r3, #2
 8009be2:	e7c7      	b.n	8009b74 <_printf_common+0x58>
 8009be4:	2301      	movs	r3, #1
 8009be6:	4622      	mov	r2, r4
 8009be8:	4649      	mov	r1, r9
 8009bea:	4638      	mov	r0, r7
 8009bec:	47c0      	blx	r8
 8009bee:	3001      	adds	r0, #1
 8009bf0:	d0e6      	beq.n	8009bc0 <_printf_common+0xa4>
 8009bf2:	3601      	adds	r6, #1
 8009bf4:	e7d9      	b.n	8009baa <_printf_common+0x8e>
	...

08009bf8 <_printf_i>:
 8009bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	4691      	mov	r9, r2
 8009c00:	7e27      	ldrb	r7, [r4, #24]
 8009c02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c04:	2f78      	cmp	r7, #120	; 0x78
 8009c06:	4680      	mov	r8, r0
 8009c08:	469a      	mov	sl, r3
 8009c0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c0e:	d807      	bhi.n	8009c20 <_printf_i+0x28>
 8009c10:	2f62      	cmp	r7, #98	; 0x62
 8009c12:	d80a      	bhi.n	8009c2a <_printf_i+0x32>
 8009c14:	2f00      	cmp	r7, #0
 8009c16:	f000 80d8 	beq.w	8009dca <_printf_i+0x1d2>
 8009c1a:	2f58      	cmp	r7, #88	; 0x58
 8009c1c:	f000 80a3 	beq.w	8009d66 <_printf_i+0x16e>
 8009c20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c28:	e03a      	b.n	8009ca0 <_printf_i+0xa8>
 8009c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c2e:	2b15      	cmp	r3, #21
 8009c30:	d8f6      	bhi.n	8009c20 <_printf_i+0x28>
 8009c32:	a001      	add	r0, pc, #4	; (adr r0, 8009c38 <_printf_i+0x40>)
 8009c34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009c38:	08009c91 	.word	0x08009c91
 8009c3c:	08009ca5 	.word	0x08009ca5
 8009c40:	08009c21 	.word	0x08009c21
 8009c44:	08009c21 	.word	0x08009c21
 8009c48:	08009c21 	.word	0x08009c21
 8009c4c:	08009c21 	.word	0x08009c21
 8009c50:	08009ca5 	.word	0x08009ca5
 8009c54:	08009c21 	.word	0x08009c21
 8009c58:	08009c21 	.word	0x08009c21
 8009c5c:	08009c21 	.word	0x08009c21
 8009c60:	08009c21 	.word	0x08009c21
 8009c64:	08009db1 	.word	0x08009db1
 8009c68:	08009cd5 	.word	0x08009cd5
 8009c6c:	08009d93 	.word	0x08009d93
 8009c70:	08009c21 	.word	0x08009c21
 8009c74:	08009c21 	.word	0x08009c21
 8009c78:	08009dd3 	.word	0x08009dd3
 8009c7c:	08009c21 	.word	0x08009c21
 8009c80:	08009cd5 	.word	0x08009cd5
 8009c84:	08009c21 	.word	0x08009c21
 8009c88:	08009c21 	.word	0x08009c21
 8009c8c:	08009d9b 	.word	0x08009d9b
 8009c90:	680b      	ldr	r3, [r1, #0]
 8009c92:	1d1a      	adds	r2, r3, #4
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	600a      	str	r2, [r1, #0]
 8009c98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e0a3      	b.n	8009dec <_printf_i+0x1f4>
 8009ca4:	6825      	ldr	r5, [r4, #0]
 8009ca6:	6808      	ldr	r0, [r1, #0]
 8009ca8:	062e      	lsls	r6, r5, #24
 8009caa:	f100 0304 	add.w	r3, r0, #4
 8009cae:	d50a      	bpl.n	8009cc6 <_printf_i+0xce>
 8009cb0:	6805      	ldr	r5, [r0, #0]
 8009cb2:	600b      	str	r3, [r1, #0]
 8009cb4:	2d00      	cmp	r5, #0
 8009cb6:	da03      	bge.n	8009cc0 <_printf_i+0xc8>
 8009cb8:	232d      	movs	r3, #45	; 0x2d
 8009cba:	426d      	negs	r5, r5
 8009cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cc0:	485e      	ldr	r0, [pc, #376]	; (8009e3c <_printf_i+0x244>)
 8009cc2:	230a      	movs	r3, #10
 8009cc4:	e019      	b.n	8009cfa <_printf_i+0x102>
 8009cc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009cca:	6805      	ldr	r5, [r0, #0]
 8009ccc:	600b      	str	r3, [r1, #0]
 8009cce:	bf18      	it	ne
 8009cd0:	b22d      	sxthne	r5, r5
 8009cd2:	e7ef      	b.n	8009cb4 <_printf_i+0xbc>
 8009cd4:	680b      	ldr	r3, [r1, #0]
 8009cd6:	6825      	ldr	r5, [r4, #0]
 8009cd8:	1d18      	adds	r0, r3, #4
 8009cda:	6008      	str	r0, [r1, #0]
 8009cdc:	0628      	lsls	r0, r5, #24
 8009cde:	d501      	bpl.n	8009ce4 <_printf_i+0xec>
 8009ce0:	681d      	ldr	r5, [r3, #0]
 8009ce2:	e002      	b.n	8009cea <_printf_i+0xf2>
 8009ce4:	0669      	lsls	r1, r5, #25
 8009ce6:	d5fb      	bpl.n	8009ce0 <_printf_i+0xe8>
 8009ce8:	881d      	ldrh	r5, [r3, #0]
 8009cea:	4854      	ldr	r0, [pc, #336]	; (8009e3c <_printf_i+0x244>)
 8009cec:	2f6f      	cmp	r7, #111	; 0x6f
 8009cee:	bf0c      	ite	eq
 8009cf0:	2308      	moveq	r3, #8
 8009cf2:	230a      	movne	r3, #10
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cfa:	6866      	ldr	r6, [r4, #4]
 8009cfc:	60a6      	str	r6, [r4, #8]
 8009cfe:	2e00      	cmp	r6, #0
 8009d00:	bfa2      	ittt	ge
 8009d02:	6821      	ldrge	r1, [r4, #0]
 8009d04:	f021 0104 	bicge.w	r1, r1, #4
 8009d08:	6021      	strge	r1, [r4, #0]
 8009d0a:	b90d      	cbnz	r5, 8009d10 <_printf_i+0x118>
 8009d0c:	2e00      	cmp	r6, #0
 8009d0e:	d04d      	beq.n	8009dac <_printf_i+0x1b4>
 8009d10:	4616      	mov	r6, r2
 8009d12:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d16:	fb03 5711 	mls	r7, r3, r1, r5
 8009d1a:	5dc7      	ldrb	r7, [r0, r7]
 8009d1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d20:	462f      	mov	r7, r5
 8009d22:	42bb      	cmp	r3, r7
 8009d24:	460d      	mov	r5, r1
 8009d26:	d9f4      	bls.n	8009d12 <_printf_i+0x11a>
 8009d28:	2b08      	cmp	r3, #8
 8009d2a:	d10b      	bne.n	8009d44 <_printf_i+0x14c>
 8009d2c:	6823      	ldr	r3, [r4, #0]
 8009d2e:	07df      	lsls	r7, r3, #31
 8009d30:	d508      	bpl.n	8009d44 <_printf_i+0x14c>
 8009d32:	6923      	ldr	r3, [r4, #16]
 8009d34:	6861      	ldr	r1, [r4, #4]
 8009d36:	4299      	cmp	r1, r3
 8009d38:	bfde      	ittt	le
 8009d3a:	2330      	movle	r3, #48	; 0x30
 8009d3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d44:	1b92      	subs	r2, r2, r6
 8009d46:	6122      	str	r2, [r4, #16]
 8009d48:	f8cd a000 	str.w	sl, [sp]
 8009d4c:	464b      	mov	r3, r9
 8009d4e:	aa03      	add	r2, sp, #12
 8009d50:	4621      	mov	r1, r4
 8009d52:	4640      	mov	r0, r8
 8009d54:	f7ff fee2 	bl	8009b1c <_printf_common>
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d14c      	bne.n	8009df6 <_printf_i+0x1fe>
 8009d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d60:	b004      	add	sp, #16
 8009d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d66:	4835      	ldr	r0, [pc, #212]	; (8009e3c <_printf_i+0x244>)
 8009d68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	680e      	ldr	r6, [r1, #0]
 8009d70:	061f      	lsls	r7, r3, #24
 8009d72:	f856 5b04 	ldr.w	r5, [r6], #4
 8009d76:	600e      	str	r6, [r1, #0]
 8009d78:	d514      	bpl.n	8009da4 <_printf_i+0x1ac>
 8009d7a:	07d9      	lsls	r1, r3, #31
 8009d7c:	bf44      	itt	mi
 8009d7e:	f043 0320 	orrmi.w	r3, r3, #32
 8009d82:	6023      	strmi	r3, [r4, #0]
 8009d84:	b91d      	cbnz	r5, 8009d8e <_printf_i+0x196>
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	f023 0320 	bic.w	r3, r3, #32
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	2310      	movs	r3, #16
 8009d90:	e7b0      	b.n	8009cf4 <_printf_i+0xfc>
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	f043 0320 	orr.w	r3, r3, #32
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	2378      	movs	r3, #120	; 0x78
 8009d9c:	4828      	ldr	r0, [pc, #160]	; (8009e40 <_printf_i+0x248>)
 8009d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009da2:	e7e3      	b.n	8009d6c <_printf_i+0x174>
 8009da4:	065e      	lsls	r6, r3, #25
 8009da6:	bf48      	it	mi
 8009da8:	b2ad      	uxthmi	r5, r5
 8009daa:	e7e6      	b.n	8009d7a <_printf_i+0x182>
 8009dac:	4616      	mov	r6, r2
 8009dae:	e7bb      	b.n	8009d28 <_printf_i+0x130>
 8009db0:	680b      	ldr	r3, [r1, #0]
 8009db2:	6826      	ldr	r6, [r4, #0]
 8009db4:	6960      	ldr	r0, [r4, #20]
 8009db6:	1d1d      	adds	r5, r3, #4
 8009db8:	600d      	str	r5, [r1, #0]
 8009dba:	0635      	lsls	r5, r6, #24
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	d501      	bpl.n	8009dc4 <_printf_i+0x1cc>
 8009dc0:	6018      	str	r0, [r3, #0]
 8009dc2:	e002      	b.n	8009dca <_printf_i+0x1d2>
 8009dc4:	0671      	lsls	r1, r6, #25
 8009dc6:	d5fb      	bpl.n	8009dc0 <_printf_i+0x1c8>
 8009dc8:	8018      	strh	r0, [r3, #0]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	6123      	str	r3, [r4, #16]
 8009dce:	4616      	mov	r6, r2
 8009dd0:	e7ba      	b.n	8009d48 <_printf_i+0x150>
 8009dd2:	680b      	ldr	r3, [r1, #0]
 8009dd4:	1d1a      	adds	r2, r3, #4
 8009dd6:	600a      	str	r2, [r1, #0]
 8009dd8:	681e      	ldr	r6, [r3, #0]
 8009dda:	6862      	ldr	r2, [r4, #4]
 8009ddc:	2100      	movs	r1, #0
 8009dde:	4630      	mov	r0, r6
 8009de0:	f7f6 f9fe 	bl	80001e0 <memchr>
 8009de4:	b108      	cbz	r0, 8009dea <_printf_i+0x1f2>
 8009de6:	1b80      	subs	r0, r0, r6
 8009de8:	6060      	str	r0, [r4, #4]
 8009dea:	6863      	ldr	r3, [r4, #4]
 8009dec:	6123      	str	r3, [r4, #16]
 8009dee:	2300      	movs	r3, #0
 8009df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009df4:	e7a8      	b.n	8009d48 <_printf_i+0x150>
 8009df6:	6923      	ldr	r3, [r4, #16]
 8009df8:	4632      	mov	r2, r6
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	4640      	mov	r0, r8
 8009dfe:	47d0      	blx	sl
 8009e00:	3001      	adds	r0, #1
 8009e02:	d0ab      	beq.n	8009d5c <_printf_i+0x164>
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	079b      	lsls	r3, r3, #30
 8009e08:	d413      	bmi.n	8009e32 <_printf_i+0x23a>
 8009e0a:	68e0      	ldr	r0, [r4, #12]
 8009e0c:	9b03      	ldr	r3, [sp, #12]
 8009e0e:	4298      	cmp	r0, r3
 8009e10:	bfb8      	it	lt
 8009e12:	4618      	movlt	r0, r3
 8009e14:	e7a4      	b.n	8009d60 <_printf_i+0x168>
 8009e16:	2301      	movs	r3, #1
 8009e18:	4632      	mov	r2, r6
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	47d0      	blx	sl
 8009e20:	3001      	adds	r0, #1
 8009e22:	d09b      	beq.n	8009d5c <_printf_i+0x164>
 8009e24:	3501      	adds	r5, #1
 8009e26:	68e3      	ldr	r3, [r4, #12]
 8009e28:	9903      	ldr	r1, [sp, #12]
 8009e2a:	1a5b      	subs	r3, r3, r1
 8009e2c:	42ab      	cmp	r3, r5
 8009e2e:	dcf2      	bgt.n	8009e16 <_printf_i+0x21e>
 8009e30:	e7eb      	b.n	8009e0a <_printf_i+0x212>
 8009e32:	2500      	movs	r5, #0
 8009e34:	f104 0619 	add.w	r6, r4, #25
 8009e38:	e7f5      	b.n	8009e26 <_printf_i+0x22e>
 8009e3a:	bf00      	nop
 8009e3c:	0800e006 	.word	0x0800e006
 8009e40:	0800e017 	.word	0x0800e017

08009e44 <iprintf>:
 8009e44:	b40f      	push	{r0, r1, r2, r3}
 8009e46:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <iprintf+0x2c>)
 8009e48:	b513      	push	{r0, r1, r4, lr}
 8009e4a:	681c      	ldr	r4, [r3, #0]
 8009e4c:	b124      	cbz	r4, 8009e58 <iprintf+0x14>
 8009e4e:	69a3      	ldr	r3, [r4, #24]
 8009e50:	b913      	cbnz	r3, 8009e58 <iprintf+0x14>
 8009e52:	4620      	mov	r0, r4
 8009e54:	f001 f8f6 	bl	800b044 <__sinit>
 8009e58:	ab05      	add	r3, sp, #20
 8009e5a:	9a04      	ldr	r2, [sp, #16]
 8009e5c:	68a1      	ldr	r1, [r4, #8]
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	4620      	mov	r0, r4
 8009e62:	f001 ffbf 	bl	800bde4 <_vfiprintf_r>
 8009e66:	b002      	add	sp, #8
 8009e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e6c:	b004      	add	sp, #16
 8009e6e:	4770      	bx	lr
 8009e70:	20000018 	.word	0x20000018

08009e74 <_puts_r>:
 8009e74:	b570      	push	{r4, r5, r6, lr}
 8009e76:	460e      	mov	r6, r1
 8009e78:	4605      	mov	r5, r0
 8009e7a:	b118      	cbz	r0, 8009e84 <_puts_r+0x10>
 8009e7c:	6983      	ldr	r3, [r0, #24]
 8009e7e:	b90b      	cbnz	r3, 8009e84 <_puts_r+0x10>
 8009e80:	f001 f8e0 	bl	800b044 <__sinit>
 8009e84:	69ab      	ldr	r3, [r5, #24]
 8009e86:	68ac      	ldr	r4, [r5, #8]
 8009e88:	b913      	cbnz	r3, 8009e90 <_puts_r+0x1c>
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	f001 f8da 	bl	800b044 <__sinit>
 8009e90:	4b2c      	ldr	r3, [pc, #176]	; (8009f44 <_puts_r+0xd0>)
 8009e92:	429c      	cmp	r4, r3
 8009e94:	d120      	bne.n	8009ed8 <_puts_r+0x64>
 8009e96:	686c      	ldr	r4, [r5, #4]
 8009e98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e9a:	07db      	lsls	r3, r3, #31
 8009e9c:	d405      	bmi.n	8009eaa <_puts_r+0x36>
 8009e9e:	89a3      	ldrh	r3, [r4, #12]
 8009ea0:	0598      	lsls	r0, r3, #22
 8009ea2:	d402      	bmi.n	8009eaa <_puts_r+0x36>
 8009ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ea6:	f001 f970 	bl	800b18a <__retarget_lock_acquire_recursive>
 8009eaa:	89a3      	ldrh	r3, [r4, #12]
 8009eac:	0719      	lsls	r1, r3, #28
 8009eae:	d51d      	bpl.n	8009eec <_puts_r+0x78>
 8009eb0:	6923      	ldr	r3, [r4, #16]
 8009eb2:	b1db      	cbz	r3, 8009eec <_puts_r+0x78>
 8009eb4:	3e01      	subs	r6, #1
 8009eb6:	68a3      	ldr	r3, [r4, #8]
 8009eb8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	60a3      	str	r3, [r4, #8]
 8009ec0:	bb39      	cbnz	r1, 8009f12 <_puts_r+0x9e>
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	da38      	bge.n	8009f38 <_puts_r+0xc4>
 8009ec6:	4622      	mov	r2, r4
 8009ec8:	210a      	movs	r1, #10
 8009eca:	4628      	mov	r0, r5
 8009ecc:	f000 f868 	bl	8009fa0 <__swbuf_r>
 8009ed0:	3001      	adds	r0, #1
 8009ed2:	d011      	beq.n	8009ef8 <_puts_r+0x84>
 8009ed4:	250a      	movs	r5, #10
 8009ed6:	e011      	b.n	8009efc <_puts_r+0x88>
 8009ed8:	4b1b      	ldr	r3, [pc, #108]	; (8009f48 <_puts_r+0xd4>)
 8009eda:	429c      	cmp	r4, r3
 8009edc:	d101      	bne.n	8009ee2 <_puts_r+0x6e>
 8009ede:	68ac      	ldr	r4, [r5, #8]
 8009ee0:	e7da      	b.n	8009e98 <_puts_r+0x24>
 8009ee2:	4b1a      	ldr	r3, [pc, #104]	; (8009f4c <_puts_r+0xd8>)
 8009ee4:	429c      	cmp	r4, r3
 8009ee6:	bf08      	it	eq
 8009ee8:	68ec      	ldreq	r4, [r5, #12]
 8009eea:	e7d5      	b.n	8009e98 <_puts_r+0x24>
 8009eec:	4621      	mov	r1, r4
 8009eee:	4628      	mov	r0, r5
 8009ef0:	f000 f8a8 	bl	800a044 <__swsetup_r>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d0dd      	beq.n	8009eb4 <_puts_r+0x40>
 8009ef8:	f04f 35ff 	mov.w	r5, #4294967295
 8009efc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009efe:	07da      	lsls	r2, r3, #31
 8009f00:	d405      	bmi.n	8009f0e <_puts_r+0x9a>
 8009f02:	89a3      	ldrh	r3, [r4, #12]
 8009f04:	059b      	lsls	r3, r3, #22
 8009f06:	d402      	bmi.n	8009f0e <_puts_r+0x9a>
 8009f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f0a:	f001 f93f 	bl	800b18c <__retarget_lock_release_recursive>
 8009f0e:	4628      	mov	r0, r5
 8009f10:	bd70      	pop	{r4, r5, r6, pc}
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	da04      	bge.n	8009f20 <_puts_r+0xac>
 8009f16:	69a2      	ldr	r2, [r4, #24]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	dc06      	bgt.n	8009f2a <_puts_r+0xb6>
 8009f1c:	290a      	cmp	r1, #10
 8009f1e:	d004      	beq.n	8009f2a <_puts_r+0xb6>
 8009f20:	6823      	ldr	r3, [r4, #0]
 8009f22:	1c5a      	adds	r2, r3, #1
 8009f24:	6022      	str	r2, [r4, #0]
 8009f26:	7019      	strb	r1, [r3, #0]
 8009f28:	e7c5      	b.n	8009eb6 <_puts_r+0x42>
 8009f2a:	4622      	mov	r2, r4
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	f000 f837 	bl	8009fa0 <__swbuf_r>
 8009f32:	3001      	adds	r0, #1
 8009f34:	d1bf      	bne.n	8009eb6 <_puts_r+0x42>
 8009f36:	e7df      	b.n	8009ef8 <_puts_r+0x84>
 8009f38:	6823      	ldr	r3, [r4, #0]
 8009f3a:	250a      	movs	r5, #10
 8009f3c:	1c5a      	adds	r2, r3, #1
 8009f3e:	6022      	str	r2, [r4, #0]
 8009f40:	701d      	strb	r5, [r3, #0]
 8009f42:	e7db      	b.n	8009efc <_puts_r+0x88>
 8009f44:	0800e0dc 	.word	0x0800e0dc
 8009f48:	0800e0fc 	.word	0x0800e0fc
 8009f4c:	0800e0bc 	.word	0x0800e0bc

08009f50 <puts>:
 8009f50:	4b02      	ldr	r3, [pc, #8]	; (8009f5c <puts+0xc>)
 8009f52:	4601      	mov	r1, r0
 8009f54:	6818      	ldr	r0, [r3, #0]
 8009f56:	f7ff bf8d 	b.w	8009e74 <_puts_r>
 8009f5a:	bf00      	nop
 8009f5c:	20000018 	.word	0x20000018

08009f60 <siprintf>:
 8009f60:	b40e      	push	{r1, r2, r3}
 8009f62:	b500      	push	{lr}
 8009f64:	b09c      	sub	sp, #112	; 0x70
 8009f66:	ab1d      	add	r3, sp, #116	; 0x74
 8009f68:	9002      	str	r0, [sp, #8]
 8009f6a:	9006      	str	r0, [sp, #24]
 8009f6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f70:	4809      	ldr	r0, [pc, #36]	; (8009f98 <siprintf+0x38>)
 8009f72:	9107      	str	r1, [sp, #28]
 8009f74:	9104      	str	r1, [sp, #16]
 8009f76:	4909      	ldr	r1, [pc, #36]	; (8009f9c <siprintf+0x3c>)
 8009f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f7c:	9105      	str	r1, [sp, #20]
 8009f7e:	6800      	ldr	r0, [r0, #0]
 8009f80:	9301      	str	r3, [sp, #4]
 8009f82:	a902      	add	r1, sp, #8
 8009f84:	f001 fe04 	bl	800bb90 <_svfiprintf_r>
 8009f88:	9b02      	ldr	r3, [sp, #8]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	701a      	strb	r2, [r3, #0]
 8009f8e:	b01c      	add	sp, #112	; 0x70
 8009f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f94:	b003      	add	sp, #12
 8009f96:	4770      	bx	lr
 8009f98:	20000018 	.word	0x20000018
 8009f9c:	ffff0208 	.word	0xffff0208

08009fa0 <__swbuf_r>:
 8009fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa2:	460e      	mov	r6, r1
 8009fa4:	4614      	mov	r4, r2
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	b118      	cbz	r0, 8009fb2 <__swbuf_r+0x12>
 8009faa:	6983      	ldr	r3, [r0, #24]
 8009fac:	b90b      	cbnz	r3, 8009fb2 <__swbuf_r+0x12>
 8009fae:	f001 f849 	bl	800b044 <__sinit>
 8009fb2:	4b21      	ldr	r3, [pc, #132]	; (800a038 <__swbuf_r+0x98>)
 8009fb4:	429c      	cmp	r4, r3
 8009fb6:	d12b      	bne.n	800a010 <__swbuf_r+0x70>
 8009fb8:	686c      	ldr	r4, [r5, #4]
 8009fba:	69a3      	ldr	r3, [r4, #24]
 8009fbc:	60a3      	str	r3, [r4, #8]
 8009fbe:	89a3      	ldrh	r3, [r4, #12]
 8009fc0:	071a      	lsls	r2, r3, #28
 8009fc2:	d52f      	bpl.n	800a024 <__swbuf_r+0x84>
 8009fc4:	6923      	ldr	r3, [r4, #16]
 8009fc6:	b36b      	cbz	r3, 800a024 <__swbuf_r+0x84>
 8009fc8:	6923      	ldr	r3, [r4, #16]
 8009fca:	6820      	ldr	r0, [r4, #0]
 8009fcc:	1ac0      	subs	r0, r0, r3
 8009fce:	6963      	ldr	r3, [r4, #20]
 8009fd0:	b2f6      	uxtb	r6, r6
 8009fd2:	4283      	cmp	r3, r0
 8009fd4:	4637      	mov	r7, r6
 8009fd6:	dc04      	bgt.n	8009fe2 <__swbuf_r+0x42>
 8009fd8:	4621      	mov	r1, r4
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f000 ff9e 	bl	800af1c <_fflush_r>
 8009fe0:	bb30      	cbnz	r0, 800a030 <__swbuf_r+0x90>
 8009fe2:	68a3      	ldr	r3, [r4, #8]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	60a3      	str	r3, [r4, #8]
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	1c5a      	adds	r2, r3, #1
 8009fec:	6022      	str	r2, [r4, #0]
 8009fee:	701e      	strb	r6, [r3, #0]
 8009ff0:	6963      	ldr	r3, [r4, #20]
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	4283      	cmp	r3, r0
 8009ff6:	d004      	beq.n	800a002 <__swbuf_r+0x62>
 8009ff8:	89a3      	ldrh	r3, [r4, #12]
 8009ffa:	07db      	lsls	r3, r3, #31
 8009ffc:	d506      	bpl.n	800a00c <__swbuf_r+0x6c>
 8009ffe:	2e0a      	cmp	r6, #10
 800a000:	d104      	bne.n	800a00c <__swbuf_r+0x6c>
 800a002:	4621      	mov	r1, r4
 800a004:	4628      	mov	r0, r5
 800a006:	f000 ff89 	bl	800af1c <_fflush_r>
 800a00a:	b988      	cbnz	r0, 800a030 <__swbuf_r+0x90>
 800a00c:	4638      	mov	r0, r7
 800a00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a010:	4b0a      	ldr	r3, [pc, #40]	; (800a03c <__swbuf_r+0x9c>)
 800a012:	429c      	cmp	r4, r3
 800a014:	d101      	bne.n	800a01a <__swbuf_r+0x7a>
 800a016:	68ac      	ldr	r4, [r5, #8]
 800a018:	e7cf      	b.n	8009fba <__swbuf_r+0x1a>
 800a01a:	4b09      	ldr	r3, [pc, #36]	; (800a040 <__swbuf_r+0xa0>)
 800a01c:	429c      	cmp	r4, r3
 800a01e:	bf08      	it	eq
 800a020:	68ec      	ldreq	r4, [r5, #12]
 800a022:	e7ca      	b.n	8009fba <__swbuf_r+0x1a>
 800a024:	4621      	mov	r1, r4
 800a026:	4628      	mov	r0, r5
 800a028:	f000 f80c 	bl	800a044 <__swsetup_r>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d0cb      	beq.n	8009fc8 <__swbuf_r+0x28>
 800a030:	f04f 37ff 	mov.w	r7, #4294967295
 800a034:	e7ea      	b.n	800a00c <__swbuf_r+0x6c>
 800a036:	bf00      	nop
 800a038:	0800e0dc 	.word	0x0800e0dc
 800a03c:	0800e0fc 	.word	0x0800e0fc
 800a040:	0800e0bc 	.word	0x0800e0bc

0800a044 <__swsetup_r>:
 800a044:	4b32      	ldr	r3, [pc, #200]	; (800a110 <__swsetup_r+0xcc>)
 800a046:	b570      	push	{r4, r5, r6, lr}
 800a048:	681d      	ldr	r5, [r3, #0]
 800a04a:	4606      	mov	r6, r0
 800a04c:	460c      	mov	r4, r1
 800a04e:	b125      	cbz	r5, 800a05a <__swsetup_r+0x16>
 800a050:	69ab      	ldr	r3, [r5, #24]
 800a052:	b913      	cbnz	r3, 800a05a <__swsetup_r+0x16>
 800a054:	4628      	mov	r0, r5
 800a056:	f000 fff5 	bl	800b044 <__sinit>
 800a05a:	4b2e      	ldr	r3, [pc, #184]	; (800a114 <__swsetup_r+0xd0>)
 800a05c:	429c      	cmp	r4, r3
 800a05e:	d10f      	bne.n	800a080 <__swsetup_r+0x3c>
 800a060:	686c      	ldr	r4, [r5, #4]
 800a062:	89a3      	ldrh	r3, [r4, #12]
 800a064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a068:	0719      	lsls	r1, r3, #28
 800a06a:	d42c      	bmi.n	800a0c6 <__swsetup_r+0x82>
 800a06c:	06dd      	lsls	r5, r3, #27
 800a06e:	d411      	bmi.n	800a094 <__swsetup_r+0x50>
 800a070:	2309      	movs	r3, #9
 800a072:	6033      	str	r3, [r6, #0]
 800a074:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a078:	81a3      	strh	r3, [r4, #12]
 800a07a:	f04f 30ff 	mov.w	r0, #4294967295
 800a07e:	e03e      	b.n	800a0fe <__swsetup_r+0xba>
 800a080:	4b25      	ldr	r3, [pc, #148]	; (800a118 <__swsetup_r+0xd4>)
 800a082:	429c      	cmp	r4, r3
 800a084:	d101      	bne.n	800a08a <__swsetup_r+0x46>
 800a086:	68ac      	ldr	r4, [r5, #8]
 800a088:	e7eb      	b.n	800a062 <__swsetup_r+0x1e>
 800a08a:	4b24      	ldr	r3, [pc, #144]	; (800a11c <__swsetup_r+0xd8>)
 800a08c:	429c      	cmp	r4, r3
 800a08e:	bf08      	it	eq
 800a090:	68ec      	ldreq	r4, [r5, #12]
 800a092:	e7e6      	b.n	800a062 <__swsetup_r+0x1e>
 800a094:	0758      	lsls	r0, r3, #29
 800a096:	d512      	bpl.n	800a0be <__swsetup_r+0x7a>
 800a098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a09a:	b141      	cbz	r1, 800a0ae <__swsetup_r+0x6a>
 800a09c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0a0:	4299      	cmp	r1, r3
 800a0a2:	d002      	beq.n	800a0aa <__swsetup_r+0x66>
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	f001 fc6d 	bl	800b984 <_free_r>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	6363      	str	r3, [r4, #52]	; 0x34
 800a0ae:	89a3      	ldrh	r3, [r4, #12]
 800a0b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0b4:	81a3      	strh	r3, [r4, #12]
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	6063      	str	r3, [r4, #4]
 800a0ba:	6923      	ldr	r3, [r4, #16]
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	89a3      	ldrh	r3, [r4, #12]
 800a0c0:	f043 0308 	orr.w	r3, r3, #8
 800a0c4:	81a3      	strh	r3, [r4, #12]
 800a0c6:	6923      	ldr	r3, [r4, #16]
 800a0c8:	b94b      	cbnz	r3, 800a0de <__swsetup_r+0x9a>
 800a0ca:	89a3      	ldrh	r3, [r4, #12]
 800a0cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0d4:	d003      	beq.n	800a0de <__swsetup_r+0x9a>
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f001 f87d 	bl	800b1d8 <__smakebuf_r>
 800a0de:	89a0      	ldrh	r0, [r4, #12]
 800a0e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0e4:	f010 0301 	ands.w	r3, r0, #1
 800a0e8:	d00a      	beq.n	800a100 <__swsetup_r+0xbc>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	60a3      	str	r3, [r4, #8]
 800a0ee:	6963      	ldr	r3, [r4, #20]
 800a0f0:	425b      	negs	r3, r3
 800a0f2:	61a3      	str	r3, [r4, #24]
 800a0f4:	6923      	ldr	r3, [r4, #16]
 800a0f6:	b943      	cbnz	r3, 800a10a <__swsetup_r+0xc6>
 800a0f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0fc:	d1ba      	bne.n	800a074 <__swsetup_r+0x30>
 800a0fe:	bd70      	pop	{r4, r5, r6, pc}
 800a100:	0781      	lsls	r1, r0, #30
 800a102:	bf58      	it	pl
 800a104:	6963      	ldrpl	r3, [r4, #20]
 800a106:	60a3      	str	r3, [r4, #8]
 800a108:	e7f4      	b.n	800a0f4 <__swsetup_r+0xb0>
 800a10a:	2000      	movs	r0, #0
 800a10c:	e7f7      	b.n	800a0fe <__swsetup_r+0xba>
 800a10e:	bf00      	nop
 800a110:	20000018 	.word	0x20000018
 800a114:	0800e0dc 	.word	0x0800e0dc
 800a118:	0800e0fc 	.word	0x0800e0fc
 800a11c:	0800e0bc 	.word	0x0800e0bc

0800a120 <quorem>:
 800a120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a124:	6903      	ldr	r3, [r0, #16]
 800a126:	690c      	ldr	r4, [r1, #16]
 800a128:	42a3      	cmp	r3, r4
 800a12a:	4607      	mov	r7, r0
 800a12c:	f2c0 8081 	blt.w	800a232 <quorem+0x112>
 800a130:	3c01      	subs	r4, #1
 800a132:	f101 0814 	add.w	r8, r1, #20
 800a136:	f100 0514 	add.w	r5, r0, #20
 800a13a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a13e:	9301      	str	r3, [sp, #4]
 800a140:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a144:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a148:	3301      	adds	r3, #1
 800a14a:	429a      	cmp	r2, r3
 800a14c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a150:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a154:	fbb2 f6f3 	udiv	r6, r2, r3
 800a158:	d331      	bcc.n	800a1be <quorem+0x9e>
 800a15a:	f04f 0e00 	mov.w	lr, #0
 800a15e:	4640      	mov	r0, r8
 800a160:	46ac      	mov	ip, r5
 800a162:	46f2      	mov	sl, lr
 800a164:	f850 2b04 	ldr.w	r2, [r0], #4
 800a168:	b293      	uxth	r3, r2
 800a16a:	fb06 e303 	mla	r3, r6, r3, lr
 800a16e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a172:	b29b      	uxth	r3, r3
 800a174:	ebaa 0303 	sub.w	r3, sl, r3
 800a178:	0c12      	lsrs	r2, r2, #16
 800a17a:	f8dc a000 	ldr.w	sl, [ip]
 800a17e:	fb06 e202 	mla	r2, r6, r2, lr
 800a182:	fa13 f38a 	uxtah	r3, r3, sl
 800a186:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a18a:	fa1f fa82 	uxth.w	sl, r2
 800a18e:	f8dc 2000 	ldr.w	r2, [ip]
 800a192:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a196:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1a0:	4581      	cmp	r9, r0
 800a1a2:	f84c 3b04 	str.w	r3, [ip], #4
 800a1a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1aa:	d2db      	bcs.n	800a164 <quorem+0x44>
 800a1ac:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1b0:	b92b      	cbnz	r3, 800a1be <quorem+0x9e>
 800a1b2:	9b01      	ldr	r3, [sp, #4]
 800a1b4:	3b04      	subs	r3, #4
 800a1b6:	429d      	cmp	r5, r3
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	d32e      	bcc.n	800a21a <quorem+0xfa>
 800a1bc:	613c      	str	r4, [r7, #16]
 800a1be:	4638      	mov	r0, r7
 800a1c0:	f001 fad0 	bl	800b764 <__mcmp>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	db24      	blt.n	800a212 <quorem+0xf2>
 800a1c8:	3601      	adds	r6, #1
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	f04f 0c00 	mov.w	ip, #0
 800a1d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1d4:	f8d0 e000 	ldr.w	lr, [r0]
 800a1d8:	b293      	uxth	r3, r2
 800a1da:	ebac 0303 	sub.w	r3, ip, r3
 800a1de:	0c12      	lsrs	r2, r2, #16
 800a1e0:	fa13 f38e 	uxtah	r3, r3, lr
 800a1e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1f2:	45c1      	cmp	r9, r8
 800a1f4:	f840 3b04 	str.w	r3, [r0], #4
 800a1f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a1fc:	d2e8      	bcs.n	800a1d0 <quorem+0xb0>
 800a1fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a202:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a206:	b922      	cbnz	r2, 800a212 <quorem+0xf2>
 800a208:	3b04      	subs	r3, #4
 800a20a:	429d      	cmp	r5, r3
 800a20c:	461a      	mov	r2, r3
 800a20e:	d30a      	bcc.n	800a226 <quorem+0x106>
 800a210:	613c      	str	r4, [r7, #16]
 800a212:	4630      	mov	r0, r6
 800a214:	b003      	add	sp, #12
 800a216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21a:	6812      	ldr	r2, [r2, #0]
 800a21c:	3b04      	subs	r3, #4
 800a21e:	2a00      	cmp	r2, #0
 800a220:	d1cc      	bne.n	800a1bc <quorem+0x9c>
 800a222:	3c01      	subs	r4, #1
 800a224:	e7c7      	b.n	800a1b6 <quorem+0x96>
 800a226:	6812      	ldr	r2, [r2, #0]
 800a228:	3b04      	subs	r3, #4
 800a22a:	2a00      	cmp	r2, #0
 800a22c:	d1f0      	bne.n	800a210 <quorem+0xf0>
 800a22e:	3c01      	subs	r4, #1
 800a230:	e7eb      	b.n	800a20a <quorem+0xea>
 800a232:	2000      	movs	r0, #0
 800a234:	e7ee      	b.n	800a214 <quorem+0xf4>
	...

0800a238 <_dtoa_r>:
 800a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	ed2d 8b02 	vpush	{d8}
 800a240:	ec57 6b10 	vmov	r6, r7, d0
 800a244:	b095      	sub	sp, #84	; 0x54
 800a246:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a248:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a24c:	9105      	str	r1, [sp, #20]
 800a24e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a252:	4604      	mov	r4, r0
 800a254:	9209      	str	r2, [sp, #36]	; 0x24
 800a256:	930f      	str	r3, [sp, #60]	; 0x3c
 800a258:	b975      	cbnz	r5, 800a278 <_dtoa_r+0x40>
 800a25a:	2010      	movs	r0, #16
 800a25c:	f000 fffc 	bl	800b258 <malloc>
 800a260:	4602      	mov	r2, r0
 800a262:	6260      	str	r0, [r4, #36]	; 0x24
 800a264:	b920      	cbnz	r0, 800a270 <_dtoa_r+0x38>
 800a266:	4bb2      	ldr	r3, [pc, #712]	; (800a530 <_dtoa_r+0x2f8>)
 800a268:	21ea      	movs	r1, #234	; 0xea
 800a26a:	48b2      	ldr	r0, [pc, #712]	; (800a534 <_dtoa_r+0x2fc>)
 800a26c:	f001 ff50 	bl	800c110 <__assert_func>
 800a270:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a274:	6005      	str	r5, [r0, #0]
 800a276:	60c5      	str	r5, [r0, #12]
 800a278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a27a:	6819      	ldr	r1, [r3, #0]
 800a27c:	b151      	cbz	r1, 800a294 <_dtoa_r+0x5c>
 800a27e:	685a      	ldr	r2, [r3, #4]
 800a280:	604a      	str	r2, [r1, #4]
 800a282:	2301      	movs	r3, #1
 800a284:	4093      	lsls	r3, r2
 800a286:	608b      	str	r3, [r1, #8]
 800a288:	4620      	mov	r0, r4
 800a28a:	f001 f82d 	bl	800b2e8 <_Bfree>
 800a28e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a290:	2200      	movs	r2, #0
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	1e3b      	subs	r3, r7, #0
 800a296:	bfb9      	ittee	lt
 800a298:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a29c:	9303      	strlt	r3, [sp, #12]
 800a29e:	2300      	movge	r3, #0
 800a2a0:	f8c8 3000 	strge.w	r3, [r8]
 800a2a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a2a8:	4ba3      	ldr	r3, [pc, #652]	; (800a538 <_dtoa_r+0x300>)
 800a2aa:	bfbc      	itt	lt
 800a2ac:	2201      	movlt	r2, #1
 800a2ae:	f8c8 2000 	strlt.w	r2, [r8]
 800a2b2:	ea33 0309 	bics.w	r3, r3, r9
 800a2b6:	d11b      	bne.n	800a2f0 <_dtoa_r+0xb8>
 800a2b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2ba:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2be:	6013      	str	r3, [r2, #0]
 800a2c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2c4:	4333      	orrs	r3, r6
 800a2c6:	f000 857a 	beq.w	800adbe <_dtoa_r+0xb86>
 800a2ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2cc:	b963      	cbnz	r3, 800a2e8 <_dtoa_r+0xb0>
 800a2ce:	4b9b      	ldr	r3, [pc, #620]	; (800a53c <_dtoa_r+0x304>)
 800a2d0:	e024      	b.n	800a31c <_dtoa_r+0xe4>
 800a2d2:	4b9b      	ldr	r3, [pc, #620]	; (800a540 <_dtoa_r+0x308>)
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	3308      	adds	r3, #8
 800a2d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2da:	6013      	str	r3, [r2, #0]
 800a2dc:	9800      	ldr	r0, [sp, #0]
 800a2de:	b015      	add	sp, #84	; 0x54
 800a2e0:	ecbd 8b02 	vpop	{d8}
 800a2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e8:	4b94      	ldr	r3, [pc, #592]	; (800a53c <_dtoa_r+0x304>)
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	3303      	adds	r3, #3
 800a2ee:	e7f3      	b.n	800a2d8 <_dtoa_r+0xa0>
 800a2f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	ec51 0b17 	vmov	r0, r1, d7
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a300:	f7f6 fbe2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a304:	4680      	mov	r8, r0
 800a306:	b158      	cbz	r0, 800a320 <_dtoa_r+0xe8>
 800a308:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a30a:	2301      	movs	r3, #1
 800a30c:	6013      	str	r3, [r2, #0]
 800a30e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 8551 	beq.w	800adb8 <_dtoa_r+0xb80>
 800a316:	488b      	ldr	r0, [pc, #556]	; (800a544 <_dtoa_r+0x30c>)
 800a318:	6018      	str	r0, [r3, #0]
 800a31a:	1e43      	subs	r3, r0, #1
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	e7dd      	b.n	800a2dc <_dtoa_r+0xa4>
 800a320:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a324:	aa12      	add	r2, sp, #72	; 0x48
 800a326:	a913      	add	r1, sp, #76	; 0x4c
 800a328:	4620      	mov	r0, r4
 800a32a:	f001 fabf 	bl	800b8ac <__d2b>
 800a32e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a332:	4683      	mov	fp, r0
 800a334:	2d00      	cmp	r5, #0
 800a336:	d07c      	beq.n	800a432 <_dtoa_r+0x1fa>
 800a338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a33a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a33e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a342:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a346:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a34a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a34e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a352:	4b7d      	ldr	r3, [pc, #500]	; (800a548 <_dtoa_r+0x310>)
 800a354:	2200      	movs	r2, #0
 800a356:	4630      	mov	r0, r6
 800a358:	4639      	mov	r1, r7
 800a35a:	f7f5 ff95 	bl	8000288 <__aeabi_dsub>
 800a35e:	a36e      	add	r3, pc, #440	; (adr r3, 800a518 <_dtoa_r+0x2e0>)
 800a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a364:	f7f6 f948 	bl	80005f8 <__aeabi_dmul>
 800a368:	a36d      	add	r3, pc, #436	; (adr r3, 800a520 <_dtoa_r+0x2e8>)
 800a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36e:	f7f5 ff8d 	bl	800028c <__adddf3>
 800a372:	4606      	mov	r6, r0
 800a374:	4628      	mov	r0, r5
 800a376:	460f      	mov	r7, r1
 800a378:	f7f6 f8d4 	bl	8000524 <__aeabi_i2d>
 800a37c:	a36a      	add	r3, pc, #424	; (adr r3, 800a528 <_dtoa_r+0x2f0>)
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	f7f6 f939 	bl	80005f8 <__aeabi_dmul>
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	4630      	mov	r0, r6
 800a38c:	4639      	mov	r1, r7
 800a38e:	f7f5 ff7d 	bl	800028c <__adddf3>
 800a392:	4606      	mov	r6, r0
 800a394:	460f      	mov	r7, r1
 800a396:	f7f6 fbdf 	bl	8000b58 <__aeabi_d2iz>
 800a39a:	2200      	movs	r2, #0
 800a39c:	4682      	mov	sl, r0
 800a39e:	2300      	movs	r3, #0
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	4639      	mov	r1, r7
 800a3a4:	f7f6 fb9a 	bl	8000adc <__aeabi_dcmplt>
 800a3a8:	b148      	cbz	r0, 800a3be <_dtoa_r+0x186>
 800a3aa:	4650      	mov	r0, sl
 800a3ac:	f7f6 f8ba 	bl	8000524 <__aeabi_i2d>
 800a3b0:	4632      	mov	r2, r6
 800a3b2:	463b      	mov	r3, r7
 800a3b4:	f7f6 fb88 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3b8:	b908      	cbnz	r0, 800a3be <_dtoa_r+0x186>
 800a3ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3be:	f1ba 0f16 	cmp.w	sl, #22
 800a3c2:	d854      	bhi.n	800a46e <_dtoa_r+0x236>
 800a3c4:	4b61      	ldr	r3, [pc, #388]	; (800a54c <_dtoa_r+0x314>)
 800a3c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a3d2:	f7f6 fb83 	bl	8000adc <__aeabi_dcmplt>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d04b      	beq.n	800a472 <_dtoa_r+0x23a>
 800a3da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3de:	2300      	movs	r3, #0
 800a3e0:	930e      	str	r3, [sp, #56]	; 0x38
 800a3e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3e4:	1b5d      	subs	r5, r3, r5
 800a3e6:	1e6b      	subs	r3, r5, #1
 800a3e8:	9304      	str	r3, [sp, #16]
 800a3ea:	bf43      	ittte	mi
 800a3ec:	2300      	movmi	r3, #0
 800a3ee:	f1c5 0801 	rsbmi	r8, r5, #1
 800a3f2:	9304      	strmi	r3, [sp, #16]
 800a3f4:	f04f 0800 	movpl.w	r8, #0
 800a3f8:	f1ba 0f00 	cmp.w	sl, #0
 800a3fc:	db3b      	blt.n	800a476 <_dtoa_r+0x23e>
 800a3fe:	9b04      	ldr	r3, [sp, #16]
 800a400:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a404:	4453      	add	r3, sl
 800a406:	9304      	str	r3, [sp, #16]
 800a408:	2300      	movs	r3, #0
 800a40a:	9306      	str	r3, [sp, #24]
 800a40c:	9b05      	ldr	r3, [sp, #20]
 800a40e:	2b09      	cmp	r3, #9
 800a410:	d869      	bhi.n	800a4e6 <_dtoa_r+0x2ae>
 800a412:	2b05      	cmp	r3, #5
 800a414:	bfc4      	itt	gt
 800a416:	3b04      	subgt	r3, #4
 800a418:	9305      	strgt	r3, [sp, #20]
 800a41a:	9b05      	ldr	r3, [sp, #20]
 800a41c:	f1a3 0302 	sub.w	r3, r3, #2
 800a420:	bfcc      	ite	gt
 800a422:	2500      	movgt	r5, #0
 800a424:	2501      	movle	r5, #1
 800a426:	2b03      	cmp	r3, #3
 800a428:	d869      	bhi.n	800a4fe <_dtoa_r+0x2c6>
 800a42a:	e8df f003 	tbb	[pc, r3]
 800a42e:	4e2c      	.short	0x4e2c
 800a430:	5a4c      	.short	0x5a4c
 800a432:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a436:	441d      	add	r5, r3
 800a438:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a43c:	2b20      	cmp	r3, #32
 800a43e:	bfc1      	itttt	gt
 800a440:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a444:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a448:	fa09 f303 	lslgt.w	r3, r9, r3
 800a44c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a450:	bfda      	itte	le
 800a452:	f1c3 0320 	rsble	r3, r3, #32
 800a456:	fa06 f003 	lslle.w	r0, r6, r3
 800a45a:	4318      	orrgt	r0, r3
 800a45c:	f7f6 f852 	bl	8000504 <__aeabi_ui2d>
 800a460:	2301      	movs	r3, #1
 800a462:	4606      	mov	r6, r0
 800a464:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a468:	3d01      	subs	r5, #1
 800a46a:	9310      	str	r3, [sp, #64]	; 0x40
 800a46c:	e771      	b.n	800a352 <_dtoa_r+0x11a>
 800a46e:	2301      	movs	r3, #1
 800a470:	e7b6      	b.n	800a3e0 <_dtoa_r+0x1a8>
 800a472:	900e      	str	r0, [sp, #56]	; 0x38
 800a474:	e7b5      	b.n	800a3e2 <_dtoa_r+0x1aa>
 800a476:	f1ca 0300 	rsb	r3, sl, #0
 800a47a:	9306      	str	r3, [sp, #24]
 800a47c:	2300      	movs	r3, #0
 800a47e:	eba8 080a 	sub.w	r8, r8, sl
 800a482:	930d      	str	r3, [sp, #52]	; 0x34
 800a484:	e7c2      	b.n	800a40c <_dtoa_r+0x1d4>
 800a486:	2300      	movs	r3, #0
 800a488:	9308      	str	r3, [sp, #32]
 800a48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	dc39      	bgt.n	800a504 <_dtoa_r+0x2cc>
 800a490:	f04f 0901 	mov.w	r9, #1
 800a494:	f8cd 9004 	str.w	r9, [sp, #4]
 800a498:	464b      	mov	r3, r9
 800a49a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a49e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	6042      	str	r2, [r0, #4]
 800a4a4:	2204      	movs	r2, #4
 800a4a6:	f102 0614 	add.w	r6, r2, #20
 800a4aa:	429e      	cmp	r6, r3
 800a4ac:	6841      	ldr	r1, [r0, #4]
 800a4ae:	d92f      	bls.n	800a510 <_dtoa_r+0x2d8>
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f000 fed9 	bl	800b268 <_Balloc>
 800a4b6:	9000      	str	r0, [sp, #0]
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	d14b      	bne.n	800a554 <_dtoa_r+0x31c>
 800a4bc:	4b24      	ldr	r3, [pc, #144]	; (800a550 <_dtoa_r+0x318>)
 800a4be:	4602      	mov	r2, r0
 800a4c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4c4:	e6d1      	b.n	800a26a <_dtoa_r+0x32>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e7de      	b.n	800a488 <_dtoa_r+0x250>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	9308      	str	r3, [sp, #32]
 800a4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d0:	eb0a 0903 	add.w	r9, sl, r3
 800a4d4:	f109 0301 	add.w	r3, r9, #1
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	9301      	str	r3, [sp, #4]
 800a4dc:	bfb8      	it	lt
 800a4de:	2301      	movlt	r3, #1
 800a4e0:	e7dd      	b.n	800a49e <_dtoa_r+0x266>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e7f2      	b.n	800a4cc <_dtoa_r+0x294>
 800a4e6:	2501      	movs	r5, #1
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	9305      	str	r3, [sp, #20]
 800a4ec:	9508      	str	r5, [sp, #32]
 800a4ee:	f04f 39ff 	mov.w	r9, #4294967295
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4f8:	2312      	movs	r3, #18
 800a4fa:	9209      	str	r2, [sp, #36]	; 0x24
 800a4fc:	e7cf      	b.n	800a49e <_dtoa_r+0x266>
 800a4fe:	2301      	movs	r3, #1
 800a500:	9308      	str	r3, [sp, #32]
 800a502:	e7f4      	b.n	800a4ee <_dtoa_r+0x2b6>
 800a504:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a508:	f8cd 9004 	str.w	r9, [sp, #4]
 800a50c:	464b      	mov	r3, r9
 800a50e:	e7c6      	b.n	800a49e <_dtoa_r+0x266>
 800a510:	3101      	adds	r1, #1
 800a512:	6041      	str	r1, [r0, #4]
 800a514:	0052      	lsls	r2, r2, #1
 800a516:	e7c6      	b.n	800a4a6 <_dtoa_r+0x26e>
 800a518:	636f4361 	.word	0x636f4361
 800a51c:	3fd287a7 	.word	0x3fd287a7
 800a520:	8b60c8b3 	.word	0x8b60c8b3
 800a524:	3fc68a28 	.word	0x3fc68a28
 800a528:	509f79fb 	.word	0x509f79fb
 800a52c:	3fd34413 	.word	0x3fd34413
 800a530:	0800e035 	.word	0x0800e035
 800a534:	0800e04c 	.word	0x0800e04c
 800a538:	7ff00000 	.word	0x7ff00000
 800a53c:	0800e031 	.word	0x0800e031
 800a540:	0800e028 	.word	0x0800e028
 800a544:	0800e005 	.word	0x0800e005
 800a548:	3ff80000 	.word	0x3ff80000
 800a54c:	0800e1a8 	.word	0x0800e1a8
 800a550:	0800e0ab 	.word	0x0800e0ab
 800a554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a556:	9a00      	ldr	r2, [sp, #0]
 800a558:	601a      	str	r2, [r3, #0]
 800a55a:	9b01      	ldr	r3, [sp, #4]
 800a55c:	2b0e      	cmp	r3, #14
 800a55e:	f200 80ad 	bhi.w	800a6bc <_dtoa_r+0x484>
 800a562:	2d00      	cmp	r5, #0
 800a564:	f000 80aa 	beq.w	800a6bc <_dtoa_r+0x484>
 800a568:	f1ba 0f00 	cmp.w	sl, #0
 800a56c:	dd36      	ble.n	800a5dc <_dtoa_r+0x3a4>
 800a56e:	4ac3      	ldr	r2, [pc, #780]	; (800a87c <_dtoa_r+0x644>)
 800a570:	f00a 030f 	and.w	r3, sl, #15
 800a574:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a578:	ed93 7b00 	vldr	d7, [r3]
 800a57c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a580:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a584:	eeb0 8a47 	vmov.f32	s16, s14
 800a588:	eef0 8a67 	vmov.f32	s17, s15
 800a58c:	d016      	beq.n	800a5bc <_dtoa_r+0x384>
 800a58e:	4bbc      	ldr	r3, [pc, #752]	; (800a880 <_dtoa_r+0x648>)
 800a590:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a594:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a598:	f7f6 f958 	bl	800084c <__aeabi_ddiv>
 800a59c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5a0:	f007 070f 	and.w	r7, r7, #15
 800a5a4:	2503      	movs	r5, #3
 800a5a6:	4eb6      	ldr	r6, [pc, #728]	; (800a880 <_dtoa_r+0x648>)
 800a5a8:	b957      	cbnz	r7, 800a5c0 <_dtoa_r+0x388>
 800a5aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5ae:	ec53 2b18 	vmov	r2, r3, d8
 800a5b2:	f7f6 f94b 	bl	800084c <__aeabi_ddiv>
 800a5b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5ba:	e029      	b.n	800a610 <_dtoa_r+0x3d8>
 800a5bc:	2502      	movs	r5, #2
 800a5be:	e7f2      	b.n	800a5a6 <_dtoa_r+0x36e>
 800a5c0:	07f9      	lsls	r1, r7, #31
 800a5c2:	d508      	bpl.n	800a5d6 <_dtoa_r+0x39e>
 800a5c4:	ec51 0b18 	vmov	r0, r1, d8
 800a5c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5cc:	f7f6 f814 	bl	80005f8 <__aeabi_dmul>
 800a5d0:	ec41 0b18 	vmov	d8, r0, r1
 800a5d4:	3501      	adds	r5, #1
 800a5d6:	107f      	asrs	r7, r7, #1
 800a5d8:	3608      	adds	r6, #8
 800a5da:	e7e5      	b.n	800a5a8 <_dtoa_r+0x370>
 800a5dc:	f000 80a6 	beq.w	800a72c <_dtoa_r+0x4f4>
 800a5e0:	f1ca 0600 	rsb	r6, sl, #0
 800a5e4:	4ba5      	ldr	r3, [pc, #660]	; (800a87c <_dtoa_r+0x644>)
 800a5e6:	4fa6      	ldr	r7, [pc, #664]	; (800a880 <_dtoa_r+0x648>)
 800a5e8:	f006 020f 	and.w	r2, r6, #15
 800a5ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a5f8:	f7f5 fffe 	bl	80005f8 <__aeabi_dmul>
 800a5fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a600:	1136      	asrs	r6, r6, #4
 800a602:	2300      	movs	r3, #0
 800a604:	2502      	movs	r5, #2
 800a606:	2e00      	cmp	r6, #0
 800a608:	f040 8085 	bne.w	800a716 <_dtoa_r+0x4de>
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d1d2      	bne.n	800a5b6 <_dtoa_r+0x37e>
 800a610:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a612:	2b00      	cmp	r3, #0
 800a614:	f000 808c 	beq.w	800a730 <_dtoa_r+0x4f8>
 800a618:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a61c:	4b99      	ldr	r3, [pc, #612]	; (800a884 <_dtoa_r+0x64c>)
 800a61e:	2200      	movs	r2, #0
 800a620:	4630      	mov	r0, r6
 800a622:	4639      	mov	r1, r7
 800a624:	f7f6 fa5a 	bl	8000adc <__aeabi_dcmplt>
 800a628:	2800      	cmp	r0, #0
 800a62a:	f000 8081 	beq.w	800a730 <_dtoa_r+0x4f8>
 800a62e:	9b01      	ldr	r3, [sp, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d07d      	beq.n	800a730 <_dtoa_r+0x4f8>
 800a634:	f1b9 0f00 	cmp.w	r9, #0
 800a638:	dd3c      	ble.n	800a6b4 <_dtoa_r+0x47c>
 800a63a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a63e:	9307      	str	r3, [sp, #28]
 800a640:	2200      	movs	r2, #0
 800a642:	4b91      	ldr	r3, [pc, #580]	; (800a888 <_dtoa_r+0x650>)
 800a644:	4630      	mov	r0, r6
 800a646:	4639      	mov	r1, r7
 800a648:	f7f5 ffd6 	bl	80005f8 <__aeabi_dmul>
 800a64c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a650:	3501      	adds	r5, #1
 800a652:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a656:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a65a:	4628      	mov	r0, r5
 800a65c:	f7f5 ff62 	bl	8000524 <__aeabi_i2d>
 800a660:	4632      	mov	r2, r6
 800a662:	463b      	mov	r3, r7
 800a664:	f7f5 ffc8 	bl	80005f8 <__aeabi_dmul>
 800a668:	4b88      	ldr	r3, [pc, #544]	; (800a88c <_dtoa_r+0x654>)
 800a66a:	2200      	movs	r2, #0
 800a66c:	f7f5 fe0e 	bl	800028c <__adddf3>
 800a670:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a678:	9303      	str	r3, [sp, #12]
 800a67a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d15c      	bne.n	800a73a <_dtoa_r+0x502>
 800a680:	4b83      	ldr	r3, [pc, #524]	; (800a890 <_dtoa_r+0x658>)
 800a682:	2200      	movs	r2, #0
 800a684:	4630      	mov	r0, r6
 800a686:	4639      	mov	r1, r7
 800a688:	f7f5 fdfe 	bl	8000288 <__aeabi_dsub>
 800a68c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a690:	4606      	mov	r6, r0
 800a692:	460f      	mov	r7, r1
 800a694:	f7f6 fa40 	bl	8000b18 <__aeabi_dcmpgt>
 800a698:	2800      	cmp	r0, #0
 800a69a:	f040 8296 	bne.w	800abca <_dtoa_r+0x992>
 800a69e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6a8:	4639      	mov	r1, r7
 800a6aa:	f7f6 fa17 	bl	8000adc <__aeabi_dcmplt>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	f040 8288 	bne.w	800abc4 <_dtoa_r+0x98c>
 800a6b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a6b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f2c0 8158 	blt.w	800a974 <_dtoa_r+0x73c>
 800a6c4:	f1ba 0f0e 	cmp.w	sl, #14
 800a6c8:	f300 8154 	bgt.w	800a974 <_dtoa_r+0x73c>
 800a6cc:	4b6b      	ldr	r3, [pc, #428]	; (800a87c <_dtoa_r+0x644>)
 800a6ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a6d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f280 80e3 	bge.w	800a8a4 <_dtoa_r+0x66c>
 800a6de:	9b01      	ldr	r3, [sp, #4]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f300 80df 	bgt.w	800a8a4 <_dtoa_r+0x66c>
 800a6e6:	f040 826d 	bne.w	800abc4 <_dtoa_r+0x98c>
 800a6ea:	4b69      	ldr	r3, [pc, #420]	; (800a890 <_dtoa_r+0x658>)
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	4640      	mov	r0, r8
 800a6f0:	4649      	mov	r1, r9
 800a6f2:	f7f5 ff81 	bl	80005f8 <__aeabi_dmul>
 800a6f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6fa:	f7f6 fa03 	bl	8000b04 <__aeabi_dcmpge>
 800a6fe:	9e01      	ldr	r6, [sp, #4]
 800a700:	4637      	mov	r7, r6
 800a702:	2800      	cmp	r0, #0
 800a704:	f040 8243 	bne.w	800ab8e <_dtoa_r+0x956>
 800a708:	9d00      	ldr	r5, [sp, #0]
 800a70a:	2331      	movs	r3, #49	; 0x31
 800a70c:	f805 3b01 	strb.w	r3, [r5], #1
 800a710:	f10a 0a01 	add.w	sl, sl, #1
 800a714:	e23f      	b.n	800ab96 <_dtoa_r+0x95e>
 800a716:	07f2      	lsls	r2, r6, #31
 800a718:	d505      	bpl.n	800a726 <_dtoa_r+0x4ee>
 800a71a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a71e:	f7f5 ff6b 	bl	80005f8 <__aeabi_dmul>
 800a722:	3501      	adds	r5, #1
 800a724:	2301      	movs	r3, #1
 800a726:	1076      	asrs	r6, r6, #1
 800a728:	3708      	adds	r7, #8
 800a72a:	e76c      	b.n	800a606 <_dtoa_r+0x3ce>
 800a72c:	2502      	movs	r5, #2
 800a72e:	e76f      	b.n	800a610 <_dtoa_r+0x3d8>
 800a730:	9b01      	ldr	r3, [sp, #4]
 800a732:	f8cd a01c 	str.w	sl, [sp, #28]
 800a736:	930c      	str	r3, [sp, #48]	; 0x30
 800a738:	e78d      	b.n	800a656 <_dtoa_r+0x41e>
 800a73a:	9900      	ldr	r1, [sp, #0]
 800a73c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a73e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a740:	4b4e      	ldr	r3, [pc, #312]	; (800a87c <_dtoa_r+0x644>)
 800a742:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a746:	4401      	add	r1, r0
 800a748:	9102      	str	r1, [sp, #8]
 800a74a:	9908      	ldr	r1, [sp, #32]
 800a74c:	eeb0 8a47 	vmov.f32	s16, s14
 800a750:	eef0 8a67 	vmov.f32	s17, s15
 800a754:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a758:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a75c:	2900      	cmp	r1, #0
 800a75e:	d045      	beq.n	800a7ec <_dtoa_r+0x5b4>
 800a760:	494c      	ldr	r1, [pc, #304]	; (800a894 <_dtoa_r+0x65c>)
 800a762:	2000      	movs	r0, #0
 800a764:	f7f6 f872 	bl	800084c <__aeabi_ddiv>
 800a768:	ec53 2b18 	vmov	r2, r3, d8
 800a76c:	f7f5 fd8c 	bl	8000288 <__aeabi_dsub>
 800a770:	9d00      	ldr	r5, [sp, #0]
 800a772:	ec41 0b18 	vmov	d8, r0, r1
 800a776:	4639      	mov	r1, r7
 800a778:	4630      	mov	r0, r6
 800a77a:	f7f6 f9ed 	bl	8000b58 <__aeabi_d2iz>
 800a77e:	900c      	str	r0, [sp, #48]	; 0x30
 800a780:	f7f5 fed0 	bl	8000524 <__aeabi_i2d>
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	4630      	mov	r0, r6
 800a78a:	4639      	mov	r1, r7
 800a78c:	f7f5 fd7c 	bl	8000288 <__aeabi_dsub>
 800a790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a792:	3330      	adds	r3, #48	; 0x30
 800a794:	f805 3b01 	strb.w	r3, [r5], #1
 800a798:	ec53 2b18 	vmov	r2, r3, d8
 800a79c:	4606      	mov	r6, r0
 800a79e:	460f      	mov	r7, r1
 800a7a0:	f7f6 f99c 	bl	8000adc <__aeabi_dcmplt>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d165      	bne.n	800a874 <_dtoa_r+0x63c>
 800a7a8:	4632      	mov	r2, r6
 800a7aa:	463b      	mov	r3, r7
 800a7ac:	4935      	ldr	r1, [pc, #212]	; (800a884 <_dtoa_r+0x64c>)
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	f7f5 fd6a 	bl	8000288 <__aeabi_dsub>
 800a7b4:	ec53 2b18 	vmov	r2, r3, d8
 800a7b8:	f7f6 f990 	bl	8000adc <__aeabi_dcmplt>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	f040 80b9 	bne.w	800a934 <_dtoa_r+0x6fc>
 800a7c2:	9b02      	ldr	r3, [sp, #8]
 800a7c4:	429d      	cmp	r5, r3
 800a7c6:	f43f af75 	beq.w	800a6b4 <_dtoa_r+0x47c>
 800a7ca:	4b2f      	ldr	r3, [pc, #188]	; (800a888 <_dtoa_r+0x650>)
 800a7cc:	ec51 0b18 	vmov	r0, r1, d8
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f7f5 ff11 	bl	80005f8 <__aeabi_dmul>
 800a7d6:	4b2c      	ldr	r3, [pc, #176]	; (800a888 <_dtoa_r+0x650>)
 800a7d8:	ec41 0b18 	vmov	d8, r0, r1
 800a7dc:	2200      	movs	r2, #0
 800a7de:	4630      	mov	r0, r6
 800a7e0:	4639      	mov	r1, r7
 800a7e2:	f7f5 ff09 	bl	80005f8 <__aeabi_dmul>
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	460f      	mov	r7, r1
 800a7ea:	e7c4      	b.n	800a776 <_dtoa_r+0x53e>
 800a7ec:	ec51 0b17 	vmov	r0, r1, d7
 800a7f0:	f7f5 ff02 	bl	80005f8 <__aeabi_dmul>
 800a7f4:	9b02      	ldr	r3, [sp, #8]
 800a7f6:	9d00      	ldr	r5, [sp, #0]
 800a7f8:	930c      	str	r3, [sp, #48]	; 0x30
 800a7fa:	ec41 0b18 	vmov	d8, r0, r1
 800a7fe:	4639      	mov	r1, r7
 800a800:	4630      	mov	r0, r6
 800a802:	f7f6 f9a9 	bl	8000b58 <__aeabi_d2iz>
 800a806:	9011      	str	r0, [sp, #68]	; 0x44
 800a808:	f7f5 fe8c 	bl	8000524 <__aeabi_i2d>
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	4630      	mov	r0, r6
 800a812:	4639      	mov	r1, r7
 800a814:	f7f5 fd38 	bl	8000288 <__aeabi_dsub>
 800a818:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a81a:	3330      	adds	r3, #48	; 0x30
 800a81c:	f805 3b01 	strb.w	r3, [r5], #1
 800a820:	9b02      	ldr	r3, [sp, #8]
 800a822:	429d      	cmp	r5, r3
 800a824:	4606      	mov	r6, r0
 800a826:	460f      	mov	r7, r1
 800a828:	f04f 0200 	mov.w	r2, #0
 800a82c:	d134      	bne.n	800a898 <_dtoa_r+0x660>
 800a82e:	4b19      	ldr	r3, [pc, #100]	; (800a894 <_dtoa_r+0x65c>)
 800a830:	ec51 0b18 	vmov	r0, r1, d8
 800a834:	f7f5 fd2a 	bl	800028c <__adddf3>
 800a838:	4602      	mov	r2, r0
 800a83a:	460b      	mov	r3, r1
 800a83c:	4630      	mov	r0, r6
 800a83e:	4639      	mov	r1, r7
 800a840:	f7f6 f96a 	bl	8000b18 <__aeabi_dcmpgt>
 800a844:	2800      	cmp	r0, #0
 800a846:	d175      	bne.n	800a934 <_dtoa_r+0x6fc>
 800a848:	ec53 2b18 	vmov	r2, r3, d8
 800a84c:	4911      	ldr	r1, [pc, #68]	; (800a894 <_dtoa_r+0x65c>)
 800a84e:	2000      	movs	r0, #0
 800a850:	f7f5 fd1a 	bl	8000288 <__aeabi_dsub>
 800a854:	4602      	mov	r2, r0
 800a856:	460b      	mov	r3, r1
 800a858:	4630      	mov	r0, r6
 800a85a:	4639      	mov	r1, r7
 800a85c:	f7f6 f93e 	bl	8000adc <__aeabi_dcmplt>
 800a860:	2800      	cmp	r0, #0
 800a862:	f43f af27 	beq.w	800a6b4 <_dtoa_r+0x47c>
 800a866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a868:	1e6b      	subs	r3, r5, #1
 800a86a:	930c      	str	r3, [sp, #48]	; 0x30
 800a86c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a870:	2b30      	cmp	r3, #48	; 0x30
 800a872:	d0f8      	beq.n	800a866 <_dtoa_r+0x62e>
 800a874:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a878:	e04a      	b.n	800a910 <_dtoa_r+0x6d8>
 800a87a:	bf00      	nop
 800a87c:	0800e1a8 	.word	0x0800e1a8
 800a880:	0800e180 	.word	0x0800e180
 800a884:	3ff00000 	.word	0x3ff00000
 800a888:	40240000 	.word	0x40240000
 800a88c:	401c0000 	.word	0x401c0000
 800a890:	40140000 	.word	0x40140000
 800a894:	3fe00000 	.word	0x3fe00000
 800a898:	4baf      	ldr	r3, [pc, #700]	; (800ab58 <_dtoa_r+0x920>)
 800a89a:	f7f5 fead 	bl	80005f8 <__aeabi_dmul>
 800a89e:	4606      	mov	r6, r0
 800a8a0:	460f      	mov	r7, r1
 800a8a2:	e7ac      	b.n	800a7fe <_dtoa_r+0x5c6>
 800a8a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a8a8:	9d00      	ldr	r5, [sp, #0]
 800a8aa:	4642      	mov	r2, r8
 800a8ac:	464b      	mov	r3, r9
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	4639      	mov	r1, r7
 800a8b2:	f7f5 ffcb 	bl	800084c <__aeabi_ddiv>
 800a8b6:	f7f6 f94f 	bl	8000b58 <__aeabi_d2iz>
 800a8ba:	9002      	str	r0, [sp, #8]
 800a8bc:	f7f5 fe32 	bl	8000524 <__aeabi_i2d>
 800a8c0:	4642      	mov	r2, r8
 800a8c2:	464b      	mov	r3, r9
 800a8c4:	f7f5 fe98 	bl	80005f8 <__aeabi_dmul>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	4639      	mov	r1, r7
 800a8d0:	f7f5 fcda 	bl	8000288 <__aeabi_dsub>
 800a8d4:	9e02      	ldr	r6, [sp, #8]
 800a8d6:	9f01      	ldr	r7, [sp, #4]
 800a8d8:	3630      	adds	r6, #48	; 0x30
 800a8da:	f805 6b01 	strb.w	r6, [r5], #1
 800a8de:	9e00      	ldr	r6, [sp, #0]
 800a8e0:	1bae      	subs	r6, r5, r6
 800a8e2:	42b7      	cmp	r7, r6
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	d137      	bne.n	800a95a <_dtoa_r+0x722>
 800a8ea:	f7f5 fccf 	bl	800028c <__adddf3>
 800a8ee:	4642      	mov	r2, r8
 800a8f0:	464b      	mov	r3, r9
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	460f      	mov	r7, r1
 800a8f6:	f7f6 f90f 	bl	8000b18 <__aeabi_dcmpgt>
 800a8fa:	b9c8      	cbnz	r0, 800a930 <_dtoa_r+0x6f8>
 800a8fc:	4642      	mov	r2, r8
 800a8fe:	464b      	mov	r3, r9
 800a900:	4630      	mov	r0, r6
 800a902:	4639      	mov	r1, r7
 800a904:	f7f6 f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a908:	b110      	cbz	r0, 800a910 <_dtoa_r+0x6d8>
 800a90a:	9b02      	ldr	r3, [sp, #8]
 800a90c:	07d9      	lsls	r1, r3, #31
 800a90e:	d40f      	bmi.n	800a930 <_dtoa_r+0x6f8>
 800a910:	4620      	mov	r0, r4
 800a912:	4659      	mov	r1, fp
 800a914:	f000 fce8 	bl	800b2e8 <_Bfree>
 800a918:	2300      	movs	r3, #0
 800a91a:	702b      	strb	r3, [r5, #0]
 800a91c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a91e:	f10a 0001 	add.w	r0, sl, #1
 800a922:	6018      	str	r0, [r3, #0]
 800a924:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a926:	2b00      	cmp	r3, #0
 800a928:	f43f acd8 	beq.w	800a2dc <_dtoa_r+0xa4>
 800a92c:	601d      	str	r5, [r3, #0]
 800a92e:	e4d5      	b.n	800a2dc <_dtoa_r+0xa4>
 800a930:	f8cd a01c 	str.w	sl, [sp, #28]
 800a934:	462b      	mov	r3, r5
 800a936:	461d      	mov	r5, r3
 800a938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a93c:	2a39      	cmp	r2, #57	; 0x39
 800a93e:	d108      	bne.n	800a952 <_dtoa_r+0x71a>
 800a940:	9a00      	ldr	r2, [sp, #0]
 800a942:	429a      	cmp	r2, r3
 800a944:	d1f7      	bne.n	800a936 <_dtoa_r+0x6fe>
 800a946:	9a07      	ldr	r2, [sp, #28]
 800a948:	9900      	ldr	r1, [sp, #0]
 800a94a:	3201      	adds	r2, #1
 800a94c:	9207      	str	r2, [sp, #28]
 800a94e:	2230      	movs	r2, #48	; 0x30
 800a950:	700a      	strb	r2, [r1, #0]
 800a952:	781a      	ldrb	r2, [r3, #0]
 800a954:	3201      	adds	r2, #1
 800a956:	701a      	strb	r2, [r3, #0]
 800a958:	e78c      	b.n	800a874 <_dtoa_r+0x63c>
 800a95a:	4b7f      	ldr	r3, [pc, #508]	; (800ab58 <_dtoa_r+0x920>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	f7f5 fe4b 	bl	80005f8 <__aeabi_dmul>
 800a962:	2200      	movs	r2, #0
 800a964:	2300      	movs	r3, #0
 800a966:	4606      	mov	r6, r0
 800a968:	460f      	mov	r7, r1
 800a96a:	f7f6 f8ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800a96e:	2800      	cmp	r0, #0
 800a970:	d09b      	beq.n	800a8aa <_dtoa_r+0x672>
 800a972:	e7cd      	b.n	800a910 <_dtoa_r+0x6d8>
 800a974:	9a08      	ldr	r2, [sp, #32]
 800a976:	2a00      	cmp	r2, #0
 800a978:	f000 80c4 	beq.w	800ab04 <_dtoa_r+0x8cc>
 800a97c:	9a05      	ldr	r2, [sp, #20]
 800a97e:	2a01      	cmp	r2, #1
 800a980:	f300 80a8 	bgt.w	800aad4 <_dtoa_r+0x89c>
 800a984:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a986:	2a00      	cmp	r2, #0
 800a988:	f000 80a0 	beq.w	800aacc <_dtoa_r+0x894>
 800a98c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a990:	9e06      	ldr	r6, [sp, #24]
 800a992:	4645      	mov	r5, r8
 800a994:	9a04      	ldr	r2, [sp, #16]
 800a996:	2101      	movs	r1, #1
 800a998:	441a      	add	r2, r3
 800a99a:	4620      	mov	r0, r4
 800a99c:	4498      	add	r8, r3
 800a99e:	9204      	str	r2, [sp, #16]
 800a9a0:	f000 fd5e 	bl	800b460 <__i2b>
 800a9a4:	4607      	mov	r7, r0
 800a9a6:	2d00      	cmp	r5, #0
 800a9a8:	dd0b      	ble.n	800a9c2 <_dtoa_r+0x78a>
 800a9aa:	9b04      	ldr	r3, [sp, #16]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	dd08      	ble.n	800a9c2 <_dtoa_r+0x78a>
 800a9b0:	42ab      	cmp	r3, r5
 800a9b2:	9a04      	ldr	r2, [sp, #16]
 800a9b4:	bfa8      	it	ge
 800a9b6:	462b      	movge	r3, r5
 800a9b8:	eba8 0803 	sub.w	r8, r8, r3
 800a9bc:	1aed      	subs	r5, r5, r3
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	9304      	str	r3, [sp, #16]
 800a9c2:	9b06      	ldr	r3, [sp, #24]
 800a9c4:	b1fb      	cbz	r3, 800aa06 <_dtoa_r+0x7ce>
 800a9c6:	9b08      	ldr	r3, [sp, #32]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f000 809f 	beq.w	800ab0c <_dtoa_r+0x8d4>
 800a9ce:	2e00      	cmp	r6, #0
 800a9d0:	dd11      	ble.n	800a9f6 <_dtoa_r+0x7be>
 800a9d2:	4639      	mov	r1, r7
 800a9d4:	4632      	mov	r2, r6
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f000 fdfe 	bl	800b5d8 <__pow5mult>
 800a9dc:	465a      	mov	r2, fp
 800a9de:	4601      	mov	r1, r0
 800a9e0:	4607      	mov	r7, r0
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f000 fd52 	bl	800b48c <__multiply>
 800a9e8:	4659      	mov	r1, fp
 800a9ea:	9007      	str	r0, [sp, #28]
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f000 fc7b 	bl	800b2e8 <_Bfree>
 800a9f2:	9b07      	ldr	r3, [sp, #28]
 800a9f4:	469b      	mov	fp, r3
 800a9f6:	9b06      	ldr	r3, [sp, #24]
 800a9f8:	1b9a      	subs	r2, r3, r6
 800a9fa:	d004      	beq.n	800aa06 <_dtoa_r+0x7ce>
 800a9fc:	4659      	mov	r1, fp
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f000 fdea 	bl	800b5d8 <__pow5mult>
 800aa04:	4683      	mov	fp, r0
 800aa06:	2101      	movs	r1, #1
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f000 fd29 	bl	800b460 <__i2b>
 800aa0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	4606      	mov	r6, r0
 800aa14:	dd7c      	ble.n	800ab10 <_dtoa_r+0x8d8>
 800aa16:	461a      	mov	r2, r3
 800aa18:	4601      	mov	r1, r0
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f000 fddc 	bl	800b5d8 <__pow5mult>
 800aa20:	9b05      	ldr	r3, [sp, #20]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	4606      	mov	r6, r0
 800aa26:	dd76      	ble.n	800ab16 <_dtoa_r+0x8de>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	9306      	str	r3, [sp, #24]
 800aa2c:	6933      	ldr	r3, [r6, #16]
 800aa2e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa32:	6918      	ldr	r0, [r3, #16]
 800aa34:	f000 fcc4 	bl	800b3c0 <__hi0bits>
 800aa38:	f1c0 0020 	rsb	r0, r0, #32
 800aa3c:	9b04      	ldr	r3, [sp, #16]
 800aa3e:	4418      	add	r0, r3
 800aa40:	f010 001f 	ands.w	r0, r0, #31
 800aa44:	f000 8086 	beq.w	800ab54 <_dtoa_r+0x91c>
 800aa48:	f1c0 0320 	rsb	r3, r0, #32
 800aa4c:	2b04      	cmp	r3, #4
 800aa4e:	dd7f      	ble.n	800ab50 <_dtoa_r+0x918>
 800aa50:	f1c0 001c 	rsb	r0, r0, #28
 800aa54:	9b04      	ldr	r3, [sp, #16]
 800aa56:	4403      	add	r3, r0
 800aa58:	4480      	add	r8, r0
 800aa5a:	4405      	add	r5, r0
 800aa5c:	9304      	str	r3, [sp, #16]
 800aa5e:	f1b8 0f00 	cmp.w	r8, #0
 800aa62:	dd05      	ble.n	800aa70 <_dtoa_r+0x838>
 800aa64:	4659      	mov	r1, fp
 800aa66:	4642      	mov	r2, r8
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f000 fe0f 	bl	800b68c <__lshift>
 800aa6e:	4683      	mov	fp, r0
 800aa70:	9b04      	ldr	r3, [sp, #16]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	dd05      	ble.n	800aa82 <_dtoa_r+0x84a>
 800aa76:	4631      	mov	r1, r6
 800aa78:	461a      	mov	r2, r3
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 fe06 	bl	800b68c <__lshift>
 800aa80:	4606      	mov	r6, r0
 800aa82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d069      	beq.n	800ab5c <_dtoa_r+0x924>
 800aa88:	4631      	mov	r1, r6
 800aa8a:	4658      	mov	r0, fp
 800aa8c:	f000 fe6a 	bl	800b764 <__mcmp>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	da63      	bge.n	800ab5c <_dtoa_r+0x924>
 800aa94:	2300      	movs	r3, #0
 800aa96:	4659      	mov	r1, fp
 800aa98:	220a      	movs	r2, #10
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f000 fc46 	bl	800b32c <__multadd>
 800aaa0:	9b08      	ldr	r3, [sp, #32]
 800aaa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aaa6:	4683      	mov	fp, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 818f 	beq.w	800adcc <_dtoa_r+0xb94>
 800aaae:	4639      	mov	r1, r7
 800aab0:	2300      	movs	r3, #0
 800aab2:	220a      	movs	r2, #10
 800aab4:	4620      	mov	r0, r4
 800aab6:	f000 fc39 	bl	800b32c <__multadd>
 800aaba:	f1b9 0f00 	cmp.w	r9, #0
 800aabe:	4607      	mov	r7, r0
 800aac0:	f300 808e 	bgt.w	800abe0 <_dtoa_r+0x9a8>
 800aac4:	9b05      	ldr	r3, [sp, #20]
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	dc50      	bgt.n	800ab6c <_dtoa_r+0x934>
 800aaca:	e089      	b.n	800abe0 <_dtoa_r+0x9a8>
 800aacc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aace:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aad2:	e75d      	b.n	800a990 <_dtoa_r+0x758>
 800aad4:	9b01      	ldr	r3, [sp, #4]
 800aad6:	1e5e      	subs	r6, r3, #1
 800aad8:	9b06      	ldr	r3, [sp, #24]
 800aada:	42b3      	cmp	r3, r6
 800aadc:	bfbf      	itttt	lt
 800aade:	9b06      	ldrlt	r3, [sp, #24]
 800aae0:	9606      	strlt	r6, [sp, #24]
 800aae2:	1af2      	sublt	r2, r6, r3
 800aae4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800aae6:	bfb6      	itet	lt
 800aae8:	189b      	addlt	r3, r3, r2
 800aaea:	1b9e      	subge	r6, r3, r6
 800aaec:	930d      	strlt	r3, [sp, #52]	; 0x34
 800aaee:	9b01      	ldr	r3, [sp, #4]
 800aaf0:	bfb8      	it	lt
 800aaf2:	2600      	movlt	r6, #0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	bfb5      	itete	lt
 800aaf8:	eba8 0503 	sublt.w	r5, r8, r3
 800aafc:	9b01      	ldrge	r3, [sp, #4]
 800aafe:	2300      	movlt	r3, #0
 800ab00:	4645      	movge	r5, r8
 800ab02:	e747      	b.n	800a994 <_dtoa_r+0x75c>
 800ab04:	9e06      	ldr	r6, [sp, #24]
 800ab06:	9f08      	ldr	r7, [sp, #32]
 800ab08:	4645      	mov	r5, r8
 800ab0a:	e74c      	b.n	800a9a6 <_dtoa_r+0x76e>
 800ab0c:	9a06      	ldr	r2, [sp, #24]
 800ab0e:	e775      	b.n	800a9fc <_dtoa_r+0x7c4>
 800ab10:	9b05      	ldr	r3, [sp, #20]
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	dc18      	bgt.n	800ab48 <_dtoa_r+0x910>
 800ab16:	9b02      	ldr	r3, [sp, #8]
 800ab18:	b9b3      	cbnz	r3, 800ab48 <_dtoa_r+0x910>
 800ab1a:	9b03      	ldr	r3, [sp, #12]
 800ab1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab20:	b9a3      	cbnz	r3, 800ab4c <_dtoa_r+0x914>
 800ab22:	9b03      	ldr	r3, [sp, #12]
 800ab24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab28:	0d1b      	lsrs	r3, r3, #20
 800ab2a:	051b      	lsls	r3, r3, #20
 800ab2c:	b12b      	cbz	r3, 800ab3a <_dtoa_r+0x902>
 800ab2e:	9b04      	ldr	r3, [sp, #16]
 800ab30:	3301      	adds	r3, #1
 800ab32:	9304      	str	r3, [sp, #16]
 800ab34:	f108 0801 	add.w	r8, r8, #1
 800ab38:	2301      	movs	r3, #1
 800ab3a:	9306      	str	r3, [sp, #24]
 800ab3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f47f af74 	bne.w	800aa2c <_dtoa_r+0x7f4>
 800ab44:	2001      	movs	r0, #1
 800ab46:	e779      	b.n	800aa3c <_dtoa_r+0x804>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	e7f6      	b.n	800ab3a <_dtoa_r+0x902>
 800ab4c:	9b02      	ldr	r3, [sp, #8]
 800ab4e:	e7f4      	b.n	800ab3a <_dtoa_r+0x902>
 800ab50:	d085      	beq.n	800aa5e <_dtoa_r+0x826>
 800ab52:	4618      	mov	r0, r3
 800ab54:	301c      	adds	r0, #28
 800ab56:	e77d      	b.n	800aa54 <_dtoa_r+0x81c>
 800ab58:	40240000 	.word	0x40240000
 800ab5c:	9b01      	ldr	r3, [sp, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	dc38      	bgt.n	800abd4 <_dtoa_r+0x99c>
 800ab62:	9b05      	ldr	r3, [sp, #20]
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	dd35      	ble.n	800abd4 <_dtoa_r+0x99c>
 800ab68:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ab6c:	f1b9 0f00 	cmp.w	r9, #0
 800ab70:	d10d      	bne.n	800ab8e <_dtoa_r+0x956>
 800ab72:	4631      	mov	r1, r6
 800ab74:	464b      	mov	r3, r9
 800ab76:	2205      	movs	r2, #5
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f000 fbd7 	bl	800b32c <__multadd>
 800ab7e:	4601      	mov	r1, r0
 800ab80:	4606      	mov	r6, r0
 800ab82:	4658      	mov	r0, fp
 800ab84:	f000 fdee 	bl	800b764 <__mcmp>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	f73f adbd 	bgt.w	800a708 <_dtoa_r+0x4d0>
 800ab8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab90:	9d00      	ldr	r5, [sp, #0]
 800ab92:	ea6f 0a03 	mvn.w	sl, r3
 800ab96:	f04f 0800 	mov.w	r8, #0
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f000 fba3 	bl	800b2e8 <_Bfree>
 800aba2:	2f00      	cmp	r7, #0
 800aba4:	f43f aeb4 	beq.w	800a910 <_dtoa_r+0x6d8>
 800aba8:	f1b8 0f00 	cmp.w	r8, #0
 800abac:	d005      	beq.n	800abba <_dtoa_r+0x982>
 800abae:	45b8      	cmp	r8, r7
 800abb0:	d003      	beq.n	800abba <_dtoa_r+0x982>
 800abb2:	4641      	mov	r1, r8
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 fb97 	bl	800b2e8 <_Bfree>
 800abba:	4639      	mov	r1, r7
 800abbc:	4620      	mov	r0, r4
 800abbe:	f000 fb93 	bl	800b2e8 <_Bfree>
 800abc2:	e6a5      	b.n	800a910 <_dtoa_r+0x6d8>
 800abc4:	2600      	movs	r6, #0
 800abc6:	4637      	mov	r7, r6
 800abc8:	e7e1      	b.n	800ab8e <_dtoa_r+0x956>
 800abca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800abcc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800abd0:	4637      	mov	r7, r6
 800abd2:	e599      	b.n	800a708 <_dtoa_r+0x4d0>
 800abd4:	9b08      	ldr	r3, [sp, #32]
 800abd6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f000 80fd 	beq.w	800adda <_dtoa_r+0xba2>
 800abe0:	2d00      	cmp	r5, #0
 800abe2:	dd05      	ble.n	800abf0 <_dtoa_r+0x9b8>
 800abe4:	4639      	mov	r1, r7
 800abe6:	462a      	mov	r2, r5
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 fd4f 	bl	800b68c <__lshift>
 800abee:	4607      	mov	r7, r0
 800abf0:	9b06      	ldr	r3, [sp, #24]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d05c      	beq.n	800acb0 <_dtoa_r+0xa78>
 800abf6:	6879      	ldr	r1, [r7, #4]
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 fb35 	bl	800b268 <_Balloc>
 800abfe:	4605      	mov	r5, r0
 800ac00:	b928      	cbnz	r0, 800ac0e <_dtoa_r+0x9d6>
 800ac02:	4b80      	ldr	r3, [pc, #512]	; (800ae04 <_dtoa_r+0xbcc>)
 800ac04:	4602      	mov	r2, r0
 800ac06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac0a:	f7ff bb2e 	b.w	800a26a <_dtoa_r+0x32>
 800ac0e:	693a      	ldr	r2, [r7, #16]
 800ac10:	3202      	adds	r2, #2
 800ac12:	0092      	lsls	r2, r2, #2
 800ac14:	f107 010c 	add.w	r1, r7, #12
 800ac18:	300c      	adds	r0, #12
 800ac1a:	f7fe fc93 	bl	8009544 <memcpy>
 800ac1e:	2201      	movs	r2, #1
 800ac20:	4629      	mov	r1, r5
 800ac22:	4620      	mov	r0, r4
 800ac24:	f000 fd32 	bl	800b68c <__lshift>
 800ac28:	9b00      	ldr	r3, [sp, #0]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	9301      	str	r3, [sp, #4]
 800ac2e:	9b00      	ldr	r3, [sp, #0]
 800ac30:	444b      	add	r3, r9
 800ac32:	9307      	str	r3, [sp, #28]
 800ac34:	9b02      	ldr	r3, [sp, #8]
 800ac36:	f003 0301 	and.w	r3, r3, #1
 800ac3a:	46b8      	mov	r8, r7
 800ac3c:	9306      	str	r3, [sp, #24]
 800ac3e:	4607      	mov	r7, r0
 800ac40:	9b01      	ldr	r3, [sp, #4]
 800ac42:	4631      	mov	r1, r6
 800ac44:	3b01      	subs	r3, #1
 800ac46:	4658      	mov	r0, fp
 800ac48:	9302      	str	r3, [sp, #8]
 800ac4a:	f7ff fa69 	bl	800a120 <quorem>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	3330      	adds	r3, #48	; 0x30
 800ac52:	9004      	str	r0, [sp, #16]
 800ac54:	4641      	mov	r1, r8
 800ac56:	4658      	mov	r0, fp
 800ac58:	9308      	str	r3, [sp, #32]
 800ac5a:	f000 fd83 	bl	800b764 <__mcmp>
 800ac5e:	463a      	mov	r2, r7
 800ac60:	4681      	mov	r9, r0
 800ac62:	4631      	mov	r1, r6
 800ac64:	4620      	mov	r0, r4
 800ac66:	f000 fd99 	bl	800b79c <__mdiff>
 800ac6a:	68c2      	ldr	r2, [r0, #12]
 800ac6c:	9b08      	ldr	r3, [sp, #32]
 800ac6e:	4605      	mov	r5, r0
 800ac70:	bb02      	cbnz	r2, 800acb4 <_dtoa_r+0xa7c>
 800ac72:	4601      	mov	r1, r0
 800ac74:	4658      	mov	r0, fp
 800ac76:	f000 fd75 	bl	800b764 <__mcmp>
 800ac7a:	9b08      	ldr	r3, [sp, #32]
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	4629      	mov	r1, r5
 800ac80:	4620      	mov	r0, r4
 800ac82:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ac86:	f000 fb2f 	bl	800b2e8 <_Bfree>
 800ac8a:	9b05      	ldr	r3, [sp, #20]
 800ac8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac8e:	9d01      	ldr	r5, [sp, #4]
 800ac90:	ea43 0102 	orr.w	r1, r3, r2
 800ac94:	9b06      	ldr	r3, [sp, #24]
 800ac96:	430b      	orrs	r3, r1
 800ac98:	9b08      	ldr	r3, [sp, #32]
 800ac9a:	d10d      	bne.n	800acb8 <_dtoa_r+0xa80>
 800ac9c:	2b39      	cmp	r3, #57	; 0x39
 800ac9e:	d029      	beq.n	800acf4 <_dtoa_r+0xabc>
 800aca0:	f1b9 0f00 	cmp.w	r9, #0
 800aca4:	dd01      	ble.n	800acaa <_dtoa_r+0xa72>
 800aca6:	9b04      	ldr	r3, [sp, #16]
 800aca8:	3331      	adds	r3, #49	; 0x31
 800acaa:	9a02      	ldr	r2, [sp, #8]
 800acac:	7013      	strb	r3, [r2, #0]
 800acae:	e774      	b.n	800ab9a <_dtoa_r+0x962>
 800acb0:	4638      	mov	r0, r7
 800acb2:	e7b9      	b.n	800ac28 <_dtoa_r+0x9f0>
 800acb4:	2201      	movs	r2, #1
 800acb6:	e7e2      	b.n	800ac7e <_dtoa_r+0xa46>
 800acb8:	f1b9 0f00 	cmp.w	r9, #0
 800acbc:	db06      	blt.n	800accc <_dtoa_r+0xa94>
 800acbe:	9905      	ldr	r1, [sp, #20]
 800acc0:	ea41 0909 	orr.w	r9, r1, r9
 800acc4:	9906      	ldr	r1, [sp, #24]
 800acc6:	ea59 0101 	orrs.w	r1, r9, r1
 800acca:	d120      	bne.n	800ad0e <_dtoa_r+0xad6>
 800accc:	2a00      	cmp	r2, #0
 800acce:	ddec      	ble.n	800acaa <_dtoa_r+0xa72>
 800acd0:	4659      	mov	r1, fp
 800acd2:	2201      	movs	r2, #1
 800acd4:	4620      	mov	r0, r4
 800acd6:	9301      	str	r3, [sp, #4]
 800acd8:	f000 fcd8 	bl	800b68c <__lshift>
 800acdc:	4631      	mov	r1, r6
 800acde:	4683      	mov	fp, r0
 800ace0:	f000 fd40 	bl	800b764 <__mcmp>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	9b01      	ldr	r3, [sp, #4]
 800ace8:	dc02      	bgt.n	800acf0 <_dtoa_r+0xab8>
 800acea:	d1de      	bne.n	800acaa <_dtoa_r+0xa72>
 800acec:	07da      	lsls	r2, r3, #31
 800acee:	d5dc      	bpl.n	800acaa <_dtoa_r+0xa72>
 800acf0:	2b39      	cmp	r3, #57	; 0x39
 800acf2:	d1d8      	bne.n	800aca6 <_dtoa_r+0xa6e>
 800acf4:	9a02      	ldr	r2, [sp, #8]
 800acf6:	2339      	movs	r3, #57	; 0x39
 800acf8:	7013      	strb	r3, [r2, #0]
 800acfa:	462b      	mov	r3, r5
 800acfc:	461d      	mov	r5, r3
 800acfe:	3b01      	subs	r3, #1
 800ad00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad04:	2a39      	cmp	r2, #57	; 0x39
 800ad06:	d050      	beq.n	800adaa <_dtoa_r+0xb72>
 800ad08:	3201      	adds	r2, #1
 800ad0a:	701a      	strb	r2, [r3, #0]
 800ad0c:	e745      	b.n	800ab9a <_dtoa_r+0x962>
 800ad0e:	2a00      	cmp	r2, #0
 800ad10:	dd03      	ble.n	800ad1a <_dtoa_r+0xae2>
 800ad12:	2b39      	cmp	r3, #57	; 0x39
 800ad14:	d0ee      	beq.n	800acf4 <_dtoa_r+0xabc>
 800ad16:	3301      	adds	r3, #1
 800ad18:	e7c7      	b.n	800acaa <_dtoa_r+0xa72>
 800ad1a:	9a01      	ldr	r2, [sp, #4]
 800ad1c:	9907      	ldr	r1, [sp, #28]
 800ad1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad22:	428a      	cmp	r2, r1
 800ad24:	d02a      	beq.n	800ad7c <_dtoa_r+0xb44>
 800ad26:	4659      	mov	r1, fp
 800ad28:	2300      	movs	r3, #0
 800ad2a:	220a      	movs	r2, #10
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	f000 fafd 	bl	800b32c <__multadd>
 800ad32:	45b8      	cmp	r8, r7
 800ad34:	4683      	mov	fp, r0
 800ad36:	f04f 0300 	mov.w	r3, #0
 800ad3a:	f04f 020a 	mov.w	r2, #10
 800ad3e:	4641      	mov	r1, r8
 800ad40:	4620      	mov	r0, r4
 800ad42:	d107      	bne.n	800ad54 <_dtoa_r+0xb1c>
 800ad44:	f000 faf2 	bl	800b32c <__multadd>
 800ad48:	4680      	mov	r8, r0
 800ad4a:	4607      	mov	r7, r0
 800ad4c:	9b01      	ldr	r3, [sp, #4]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	9301      	str	r3, [sp, #4]
 800ad52:	e775      	b.n	800ac40 <_dtoa_r+0xa08>
 800ad54:	f000 faea 	bl	800b32c <__multadd>
 800ad58:	4639      	mov	r1, r7
 800ad5a:	4680      	mov	r8, r0
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	220a      	movs	r2, #10
 800ad60:	4620      	mov	r0, r4
 800ad62:	f000 fae3 	bl	800b32c <__multadd>
 800ad66:	4607      	mov	r7, r0
 800ad68:	e7f0      	b.n	800ad4c <_dtoa_r+0xb14>
 800ad6a:	f1b9 0f00 	cmp.w	r9, #0
 800ad6e:	9a00      	ldr	r2, [sp, #0]
 800ad70:	bfcc      	ite	gt
 800ad72:	464d      	movgt	r5, r9
 800ad74:	2501      	movle	r5, #1
 800ad76:	4415      	add	r5, r2
 800ad78:	f04f 0800 	mov.w	r8, #0
 800ad7c:	4659      	mov	r1, fp
 800ad7e:	2201      	movs	r2, #1
 800ad80:	4620      	mov	r0, r4
 800ad82:	9301      	str	r3, [sp, #4]
 800ad84:	f000 fc82 	bl	800b68c <__lshift>
 800ad88:	4631      	mov	r1, r6
 800ad8a:	4683      	mov	fp, r0
 800ad8c:	f000 fcea 	bl	800b764 <__mcmp>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	dcb2      	bgt.n	800acfa <_dtoa_r+0xac2>
 800ad94:	d102      	bne.n	800ad9c <_dtoa_r+0xb64>
 800ad96:	9b01      	ldr	r3, [sp, #4]
 800ad98:	07db      	lsls	r3, r3, #31
 800ad9a:	d4ae      	bmi.n	800acfa <_dtoa_r+0xac2>
 800ad9c:	462b      	mov	r3, r5
 800ad9e:	461d      	mov	r5, r3
 800ada0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ada4:	2a30      	cmp	r2, #48	; 0x30
 800ada6:	d0fa      	beq.n	800ad9e <_dtoa_r+0xb66>
 800ada8:	e6f7      	b.n	800ab9a <_dtoa_r+0x962>
 800adaa:	9a00      	ldr	r2, [sp, #0]
 800adac:	429a      	cmp	r2, r3
 800adae:	d1a5      	bne.n	800acfc <_dtoa_r+0xac4>
 800adb0:	f10a 0a01 	add.w	sl, sl, #1
 800adb4:	2331      	movs	r3, #49	; 0x31
 800adb6:	e779      	b.n	800acac <_dtoa_r+0xa74>
 800adb8:	4b13      	ldr	r3, [pc, #76]	; (800ae08 <_dtoa_r+0xbd0>)
 800adba:	f7ff baaf 	b.w	800a31c <_dtoa_r+0xe4>
 800adbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f47f aa86 	bne.w	800a2d2 <_dtoa_r+0x9a>
 800adc6:	4b11      	ldr	r3, [pc, #68]	; (800ae0c <_dtoa_r+0xbd4>)
 800adc8:	f7ff baa8 	b.w	800a31c <_dtoa_r+0xe4>
 800adcc:	f1b9 0f00 	cmp.w	r9, #0
 800add0:	dc03      	bgt.n	800adda <_dtoa_r+0xba2>
 800add2:	9b05      	ldr	r3, [sp, #20]
 800add4:	2b02      	cmp	r3, #2
 800add6:	f73f aec9 	bgt.w	800ab6c <_dtoa_r+0x934>
 800adda:	9d00      	ldr	r5, [sp, #0]
 800addc:	4631      	mov	r1, r6
 800adde:	4658      	mov	r0, fp
 800ade0:	f7ff f99e 	bl	800a120 <quorem>
 800ade4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ade8:	f805 3b01 	strb.w	r3, [r5], #1
 800adec:	9a00      	ldr	r2, [sp, #0]
 800adee:	1aaa      	subs	r2, r5, r2
 800adf0:	4591      	cmp	r9, r2
 800adf2:	ddba      	ble.n	800ad6a <_dtoa_r+0xb32>
 800adf4:	4659      	mov	r1, fp
 800adf6:	2300      	movs	r3, #0
 800adf8:	220a      	movs	r2, #10
 800adfa:	4620      	mov	r0, r4
 800adfc:	f000 fa96 	bl	800b32c <__multadd>
 800ae00:	4683      	mov	fp, r0
 800ae02:	e7eb      	b.n	800addc <_dtoa_r+0xba4>
 800ae04:	0800e0ab 	.word	0x0800e0ab
 800ae08:	0800e004 	.word	0x0800e004
 800ae0c:	0800e028 	.word	0x0800e028

0800ae10 <__sflush_r>:
 800ae10:	898a      	ldrh	r2, [r1, #12]
 800ae12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae16:	4605      	mov	r5, r0
 800ae18:	0710      	lsls	r0, r2, #28
 800ae1a:	460c      	mov	r4, r1
 800ae1c:	d458      	bmi.n	800aed0 <__sflush_r+0xc0>
 800ae1e:	684b      	ldr	r3, [r1, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	dc05      	bgt.n	800ae30 <__sflush_r+0x20>
 800ae24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	dc02      	bgt.n	800ae30 <__sflush_r+0x20>
 800ae2a:	2000      	movs	r0, #0
 800ae2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae32:	2e00      	cmp	r6, #0
 800ae34:	d0f9      	beq.n	800ae2a <__sflush_r+0x1a>
 800ae36:	2300      	movs	r3, #0
 800ae38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae3c:	682f      	ldr	r7, [r5, #0]
 800ae3e:	602b      	str	r3, [r5, #0]
 800ae40:	d032      	beq.n	800aea8 <__sflush_r+0x98>
 800ae42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae44:	89a3      	ldrh	r3, [r4, #12]
 800ae46:	075a      	lsls	r2, r3, #29
 800ae48:	d505      	bpl.n	800ae56 <__sflush_r+0x46>
 800ae4a:	6863      	ldr	r3, [r4, #4]
 800ae4c:	1ac0      	subs	r0, r0, r3
 800ae4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae50:	b10b      	cbz	r3, 800ae56 <__sflush_r+0x46>
 800ae52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae54:	1ac0      	subs	r0, r0, r3
 800ae56:	2300      	movs	r3, #0
 800ae58:	4602      	mov	r2, r0
 800ae5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae5c:	6a21      	ldr	r1, [r4, #32]
 800ae5e:	4628      	mov	r0, r5
 800ae60:	47b0      	blx	r6
 800ae62:	1c43      	adds	r3, r0, #1
 800ae64:	89a3      	ldrh	r3, [r4, #12]
 800ae66:	d106      	bne.n	800ae76 <__sflush_r+0x66>
 800ae68:	6829      	ldr	r1, [r5, #0]
 800ae6a:	291d      	cmp	r1, #29
 800ae6c:	d82c      	bhi.n	800aec8 <__sflush_r+0xb8>
 800ae6e:	4a2a      	ldr	r2, [pc, #168]	; (800af18 <__sflush_r+0x108>)
 800ae70:	40ca      	lsrs	r2, r1
 800ae72:	07d6      	lsls	r6, r2, #31
 800ae74:	d528      	bpl.n	800aec8 <__sflush_r+0xb8>
 800ae76:	2200      	movs	r2, #0
 800ae78:	6062      	str	r2, [r4, #4]
 800ae7a:	04d9      	lsls	r1, r3, #19
 800ae7c:	6922      	ldr	r2, [r4, #16]
 800ae7e:	6022      	str	r2, [r4, #0]
 800ae80:	d504      	bpl.n	800ae8c <__sflush_r+0x7c>
 800ae82:	1c42      	adds	r2, r0, #1
 800ae84:	d101      	bne.n	800ae8a <__sflush_r+0x7a>
 800ae86:	682b      	ldr	r3, [r5, #0]
 800ae88:	b903      	cbnz	r3, 800ae8c <__sflush_r+0x7c>
 800ae8a:	6560      	str	r0, [r4, #84]	; 0x54
 800ae8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae8e:	602f      	str	r7, [r5, #0]
 800ae90:	2900      	cmp	r1, #0
 800ae92:	d0ca      	beq.n	800ae2a <__sflush_r+0x1a>
 800ae94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae98:	4299      	cmp	r1, r3
 800ae9a:	d002      	beq.n	800aea2 <__sflush_r+0x92>
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	f000 fd71 	bl	800b984 <_free_r>
 800aea2:	2000      	movs	r0, #0
 800aea4:	6360      	str	r0, [r4, #52]	; 0x34
 800aea6:	e7c1      	b.n	800ae2c <__sflush_r+0x1c>
 800aea8:	6a21      	ldr	r1, [r4, #32]
 800aeaa:	2301      	movs	r3, #1
 800aeac:	4628      	mov	r0, r5
 800aeae:	47b0      	blx	r6
 800aeb0:	1c41      	adds	r1, r0, #1
 800aeb2:	d1c7      	bne.n	800ae44 <__sflush_r+0x34>
 800aeb4:	682b      	ldr	r3, [r5, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d0c4      	beq.n	800ae44 <__sflush_r+0x34>
 800aeba:	2b1d      	cmp	r3, #29
 800aebc:	d001      	beq.n	800aec2 <__sflush_r+0xb2>
 800aebe:	2b16      	cmp	r3, #22
 800aec0:	d101      	bne.n	800aec6 <__sflush_r+0xb6>
 800aec2:	602f      	str	r7, [r5, #0]
 800aec4:	e7b1      	b.n	800ae2a <__sflush_r+0x1a>
 800aec6:	89a3      	ldrh	r3, [r4, #12]
 800aec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aecc:	81a3      	strh	r3, [r4, #12]
 800aece:	e7ad      	b.n	800ae2c <__sflush_r+0x1c>
 800aed0:	690f      	ldr	r7, [r1, #16]
 800aed2:	2f00      	cmp	r7, #0
 800aed4:	d0a9      	beq.n	800ae2a <__sflush_r+0x1a>
 800aed6:	0793      	lsls	r3, r2, #30
 800aed8:	680e      	ldr	r6, [r1, #0]
 800aeda:	bf08      	it	eq
 800aedc:	694b      	ldreq	r3, [r1, #20]
 800aede:	600f      	str	r7, [r1, #0]
 800aee0:	bf18      	it	ne
 800aee2:	2300      	movne	r3, #0
 800aee4:	eba6 0807 	sub.w	r8, r6, r7
 800aee8:	608b      	str	r3, [r1, #8]
 800aeea:	f1b8 0f00 	cmp.w	r8, #0
 800aeee:	dd9c      	ble.n	800ae2a <__sflush_r+0x1a>
 800aef0:	6a21      	ldr	r1, [r4, #32]
 800aef2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aef4:	4643      	mov	r3, r8
 800aef6:	463a      	mov	r2, r7
 800aef8:	4628      	mov	r0, r5
 800aefa:	47b0      	blx	r6
 800aefc:	2800      	cmp	r0, #0
 800aefe:	dc06      	bgt.n	800af0e <__sflush_r+0xfe>
 800af00:	89a3      	ldrh	r3, [r4, #12]
 800af02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af06:	81a3      	strh	r3, [r4, #12]
 800af08:	f04f 30ff 	mov.w	r0, #4294967295
 800af0c:	e78e      	b.n	800ae2c <__sflush_r+0x1c>
 800af0e:	4407      	add	r7, r0
 800af10:	eba8 0800 	sub.w	r8, r8, r0
 800af14:	e7e9      	b.n	800aeea <__sflush_r+0xda>
 800af16:	bf00      	nop
 800af18:	20400001 	.word	0x20400001

0800af1c <_fflush_r>:
 800af1c:	b538      	push	{r3, r4, r5, lr}
 800af1e:	690b      	ldr	r3, [r1, #16]
 800af20:	4605      	mov	r5, r0
 800af22:	460c      	mov	r4, r1
 800af24:	b913      	cbnz	r3, 800af2c <_fflush_r+0x10>
 800af26:	2500      	movs	r5, #0
 800af28:	4628      	mov	r0, r5
 800af2a:	bd38      	pop	{r3, r4, r5, pc}
 800af2c:	b118      	cbz	r0, 800af36 <_fflush_r+0x1a>
 800af2e:	6983      	ldr	r3, [r0, #24]
 800af30:	b90b      	cbnz	r3, 800af36 <_fflush_r+0x1a>
 800af32:	f000 f887 	bl	800b044 <__sinit>
 800af36:	4b14      	ldr	r3, [pc, #80]	; (800af88 <_fflush_r+0x6c>)
 800af38:	429c      	cmp	r4, r3
 800af3a:	d11b      	bne.n	800af74 <_fflush_r+0x58>
 800af3c:	686c      	ldr	r4, [r5, #4]
 800af3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d0ef      	beq.n	800af26 <_fflush_r+0xa>
 800af46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af48:	07d0      	lsls	r0, r2, #31
 800af4a:	d404      	bmi.n	800af56 <_fflush_r+0x3a>
 800af4c:	0599      	lsls	r1, r3, #22
 800af4e:	d402      	bmi.n	800af56 <_fflush_r+0x3a>
 800af50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af52:	f000 f91a 	bl	800b18a <__retarget_lock_acquire_recursive>
 800af56:	4628      	mov	r0, r5
 800af58:	4621      	mov	r1, r4
 800af5a:	f7ff ff59 	bl	800ae10 <__sflush_r>
 800af5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af60:	07da      	lsls	r2, r3, #31
 800af62:	4605      	mov	r5, r0
 800af64:	d4e0      	bmi.n	800af28 <_fflush_r+0xc>
 800af66:	89a3      	ldrh	r3, [r4, #12]
 800af68:	059b      	lsls	r3, r3, #22
 800af6a:	d4dd      	bmi.n	800af28 <_fflush_r+0xc>
 800af6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af6e:	f000 f90d 	bl	800b18c <__retarget_lock_release_recursive>
 800af72:	e7d9      	b.n	800af28 <_fflush_r+0xc>
 800af74:	4b05      	ldr	r3, [pc, #20]	; (800af8c <_fflush_r+0x70>)
 800af76:	429c      	cmp	r4, r3
 800af78:	d101      	bne.n	800af7e <_fflush_r+0x62>
 800af7a:	68ac      	ldr	r4, [r5, #8]
 800af7c:	e7df      	b.n	800af3e <_fflush_r+0x22>
 800af7e:	4b04      	ldr	r3, [pc, #16]	; (800af90 <_fflush_r+0x74>)
 800af80:	429c      	cmp	r4, r3
 800af82:	bf08      	it	eq
 800af84:	68ec      	ldreq	r4, [r5, #12]
 800af86:	e7da      	b.n	800af3e <_fflush_r+0x22>
 800af88:	0800e0dc 	.word	0x0800e0dc
 800af8c:	0800e0fc 	.word	0x0800e0fc
 800af90:	0800e0bc 	.word	0x0800e0bc

0800af94 <std>:
 800af94:	2300      	movs	r3, #0
 800af96:	b510      	push	{r4, lr}
 800af98:	4604      	mov	r4, r0
 800af9a:	e9c0 3300 	strd	r3, r3, [r0]
 800af9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afa2:	6083      	str	r3, [r0, #8]
 800afa4:	8181      	strh	r1, [r0, #12]
 800afa6:	6643      	str	r3, [r0, #100]	; 0x64
 800afa8:	81c2      	strh	r2, [r0, #14]
 800afaa:	6183      	str	r3, [r0, #24]
 800afac:	4619      	mov	r1, r3
 800afae:	2208      	movs	r2, #8
 800afb0:	305c      	adds	r0, #92	; 0x5c
 800afb2:	f7fe fad5 	bl	8009560 <memset>
 800afb6:	4b05      	ldr	r3, [pc, #20]	; (800afcc <std+0x38>)
 800afb8:	6263      	str	r3, [r4, #36]	; 0x24
 800afba:	4b05      	ldr	r3, [pc, #20]	; (800afd0 <std+0x3c>)
 800afbc:	62a3      	str	r3, [r4, #40]	; 0x28
 800afbe:	4b05      	ldr	r3, [pc, #20]	; (800afd4 <std+0x40>)
 800afc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afc2:	4b05      	ldr	r3, [pc, #20]	; (800afd8 <std+0x44>)
 800afc4:	6224      	str	r4, [r4, #32]
 800afc6:	6323      	str	r3, [r4, #48]	; 0x30
 800afc8:	bd10      	pop	{r4, pc}
 800afca:	bf00      	nop
 800afcc:	0800c065 	.word	0x0800c065
 800afd0:	0800c087 	.word	0x0800c087
 800afd4:	0800c0bf 	.word	0x0800c0bf
 800afd8:	0800c0e3 	.word	0x0800c0e3

0800afdc <_cleanup_r>:
 800afdc:	4901      	ldr	r1, [pc, #4]	; (800afe4 <_cleanup_r+0x8>)
 800afde:	f000 b8af 	b.w	800b140 <_fwalk_reent>
 800afe2:	bf00      	nop
 800afe4:	0800af1d 	.word	0x0800af1d

0800afe8 <__sfmoreglue>:
 800afe8:	b570      	push	{r4, r5, r6, lr}
 800afea:	1e4a      	subs	r2, r1, #1
 800afec:	2568      	movs	r5, #104	; 0x68
 800afee:	4355      	muls	r5, r2
 800aff0:	460e      	mov	r6, r1
 800aff2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aff6:	f000 fd15 	bl	800ba24 <_malloc_r>
 800affa:	4604      	mov	r4, r0
 800affc:	b140      	cbz	r0, 800b010 <__sfmoreglue+0x28>
 800affe:	2100      	movs	r1, #0
 800b000:	e9c0 1600 	strd	r1, r6, [r0]
 800b004:	300c      	adds	r0, #12
 800b006:	60a0      	str	r0, [r4, #8]
 800b008:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b00c:	f7fe faa8 	bl	8009560 <memset>
 800b010:	4620      	mov	r0, r4
 800b012:	bd70      	pop	{r4, r5, r6, pc}

0800b014 <__sfp_lock_acquire>:
 800b014:	4801      	ldr	r0, [pc, #4]	; (800b01c <__sfp_lock_acquire+0x8>)
 800b016:	f000 b8b8 	b.w	800b18a <__retarget_lock_acquire_recursive>
 800b01a:	bf00      	nop
 800b01c:	20000b40 	.word	0x20000b40

0800b020 <__sfp_lock_release>:
 800b020:	4801      	ldr	r0, [pc, #4]	; (800b028 <__sfp_lock_release+0x8>)
 800b022:	f000 b8b3 	b.w	800b18c <__retarget_lock_release_recursive>
 800b026:	bf00      	nop
 800b028:	20000b40 	.word	0x20000b40

0800b02c <__sinit_lock_acquire>:
 800b02c:	4801      	ldr	r0, [pc, #4]	; (800b034 <__sinit_lock_acquire+0x8>)
 800b02e:	f000 b8ac 	b.w	800b18a <__retarget_lock_acquire_recursive>
 800b032:	bf00      	nop
 800b034:	20000b3b 	.word	0x20000b3b

0800b038 <__sinit_lock_release>:
 800b038:	4801      	ldr	r0, [pc, #4]	; (800b040 <__sinit_lock_release+0x8>)
 800b03a:	f000 b8a7 	b.w	800b18c <__retarget_lock_release_recursive>
 800b03e:	bf00      	nop
 800b040:	20000b3b 	.word	0x20000b3b

0800b044 <__sinit>:
 800b044:	b510      	push	{r4, lr}
 800b046:	4604      	mov	r4, r0
 800b048:	f7ff fff0 	bl	800b02c <__sinit_lock_acquire>
 800b04c:	69a3      	ldr	r3, [r4, #24]
 800b04e:	b11b      	cbz	r3, 800b058 <__sinit+0x14>
 800b050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b054:	f7ff bff0 	b.w	800b038 <__sinit_lock_release>
 800b058:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b05c:	6523      	str	r3, [r4, #80]	; 0x50
 800b05e:	4b13      	ldr	r3, [pc, #76]	; (800b0ac <__sinit+0x68>)
 800b060:	4a13      	ldr	r2, [pc, #76]	; (800b0b0 <__sinit+0x6c>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	62a2      	str	r2, [r4, #40]	; 0x28
 800b066:	42a3      	cmp	r3, r4
 800b068:	bf04      	itt	eq
 800b06a:	2301      	moveq	r3, #1
 800b06c:	61a3      	streq	r3, [r4, #24]
 800b06e:	4620      	mov	r0, r4
 800b070:	f000 f820 	bl	800b0b4 <__sfp>
 800b074:	6060      	str	r0, [r4, #4]
 800b076:	4620      	mov	r0, r4
 800b078:	f000 f81c 	bl	800b0b4 <__sfp>
 800b07c:	60a0      	str	r0, [r4, #8]
 800b07e:	4620      	mov	r0, r4
 800b080:	f000 f818 	bl	800b0b4 <__sfp>
 800b084:	2200      	movs	r2, #0
 800b086:	60e0      	str	r0, [r4, #12]
 800b088:	2104      	movs	r1, #4
 800b08a:	6860      	ldr	r0, [r4, #4]
 800b08c:	f7ff ff82 	bl	800af94 <std>
 800b090:	68a0      	ldr	r0, [r4, #8]
 800b092:	2201      	movs	r2, #1
 800b094:	2109      	movs	r1, #9
 800b096:	f7ff ff7d 	bl	800af94 <std>
 800b09a:	68e0      	ldr	r0, [r4, #12]
 800b09c:	2202      	movs	r2, #2
 800b09e:	2112      	movs	r1, #18
 800b0a0:	f7ff ff78 	bl	800af94 <std>
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	61a3      	str	r3, [r4, #24]
 800b0a8:	e7d2      	b.n	800b050 <__sinit+0xc>
 800b0aa:	bf00      	nop
 800b0ac:	0800dff0 	.word	0x0800dff0
 800b0b0:	0800afdd 	.word	0x0800afdd

0800b0b4 <__sfp>:
 800b0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b6:	4607      	mov	r7, r0
 800b0b8:	f7ff ffac 	bl	800b014 <__sfp_lock_acquire>
 800b0bc:	4b1e      	ldr	r3, [pc, #120]	; (800b138 <__sfp+0x84>)
 800b0be:	681e      	ldr	r6, [r3, #0]
 800b0c0:	69b3      	ldr	r3, [r6, #24]
 800b0c2:	b913      	cbnz	r3, 800b0ca <__sfp+0x16>
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	f7ff ffbd 	bl	800b044 <__sinit>
 800b0ca:	3648      	adds	r6, #72	; 0x48
 800b0cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	d503      	bpl.n	800b0dc <__sfp+0x28>
 800b0d4:	6833      	ldr	r3, [r6, #0]
 800b0d6:	b30b      	cbz	r3, 800b11c <__sfp+0x68>
 800b0d8:	6836      	ldr	r6, [r6, #0]
 800b0da:	e7f7      	b.n	800b0cc <__sfp+0x18>
 800b0dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b0e0:	b9d5      	cbnz	r5, 800b118 <__sfp+0x64>
 800b0e2:	4b16      	ldr	r3, [pc, #88]	; (800b13c <__sfp+0x88>)
 800b0e4:	60e3      	str	r3, [r4, #12]
 800b0e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0ea:	6665      	str	r5, [r4, #100]	; 0x64
 800b0ec:	f000 f84c 	bl	800b188 <__retarget_lock_init_recursive>
 800b0f0:	f7ff ff96 	bl	800b020 <__sfp_lock_release>
 800b0f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0fc:	6025      	str	r5, [r4, #0]
 800b0fe:	61a5      	str	r5, [r4, #24]
 800b100:	2208      	movs	r2, #8
 800b102:	4629      	mov	r1, r5
 800b104:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b108:	f7fe fa2a 	bl	8009560 <memset>
 800b10c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b110:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b114:	4620      	mov	r0, r4
 800b116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b118:	3468      	adds	r4, #104	; 0x68
 800b11a:	e7d9      	b.n	800b0d0 <__sfp+0x1c>
 800b11c:	2104      	movs	r1, #4
 800b11e:	4638      	mov	r0, r7
 800b120:	f7ff ff62 	bl	800afe8 <__sfmoreglue>
 800b124:	4604      	mov	r4, r0
 800b126:	6030      	str	r0, [r6, #0]
 800b128:	2800      	cmp	r0, #0
 800b12a:	d1d5      	bne.n	800b0d8 <__sfp+0x24>
 800b12c:	f7ff ff78 	bl	800b020 <__sfp_lock_release>
 800b130:	230c      	movs	r3, #12
 800b132:	603b      	str	r3, [r7, #0]
 800b134:	e7ee      	b.n	800b114 <__sfp+0x60>
 800b136:	bf00      	nop
 800b138:	0800dff0 	.word	0x0800dff0
 800b13c:	ffff0001 	.word	0xffff0001

0800b140 <_fwalk_reent>:
 800b140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b144:	4606      	mov	r6, r0
 800b146:	4688      	mov	r8, r1
 800b148:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b14c:	2700      	movs	r7, #0
 800b14e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b152:	f1b9 0901 	subs.w	r9, r9, #1
 800b156:	d505      	bpl.n	800b164 <_fwalk_reent+0x24>
 800b158:	6824      	ldr	r4, [r4, #0]
 800b15a:	2c00      	cmp	r4, #0
 800b15c:	d1f7      	bne.n	800b14e <_fwalk_reent+0xe>
 800b15e:	4638      	mov	r0, r7
 800b160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b164:	89ab      	ldrh	r3, [r5, #12]
 800b166:	2b01      	cmp	r3, #1
 800b168:	d907      	bls.n	800b17a <_fwalk_reent+0x3a>
 800b16a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b16e:	3301      	adds	r3, #1
 800b170:	d003      	beq.n	800b17a <_fwalk_reent+0x3a>
 800b172:	4629      	mov	r1, r5
 800b174:	4630      	mov	r0, r6
 800b176:	47c0      	blx	r8
 800b178:	4307      	orrs	r7, r0
 800b17a:	3568      	adds	r5, #104	; 0x68
 800b17c:	e7e9      	b.n	800b152 <_fwalk_reent+0x12>
	...

0800b180 <_localeconv_r>:
 800b180:	4800      	ldr	r0, [pc, #0]	; (800b184 <_localeconv_r+0x4>)
 800b182:	4770      	bx	lr
 800b184:	2000016c 	.word	0x2000016c

0800b188 <__retarget_lock_init_recursive>:
 800b188:	4770      	bx	lr

0800b18a <__retarget_lock_acquire_recursive>:
 800b18a:	4770      	bx	lr

0800b18c <__retarget_lock_release_recursive>:
 800b18c:	4770      	bx	lr

0800b18e <__swhatbuf_r>:
 800b18e:	b570      	push	{r4, r5, r6, lr}
 800b190:	460e      	mov	r6, r1
 800b192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b196:	2900      	cmp	r1, #0
 800b198:	b096      	sub	sp, #88	; 0x58
 800b19a:	4614      	mov	r4, r2
 800b19c:	461d      	mov	r5, r3
 800b19e:	da07      	bge.n	800b1b0 <__swhatbuf_r+0x22>
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	602b      	str	r3, [r5, #0]
 800b1a4:	89b3      	ldrh	r3, [r6, #12]
 800b1a6:	061a      	lsls	r2, r3, #24
 800b1a8:	d410      	bmi.n	800b1cc <__swhatbuf_r+0x3e>
 800b1aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1ae:	e00e      	b.n	800b1ce <__swhatbuf_r+0x40>
 800b1b0:	466a      	mov	r2, sp
 800b1b2:	f000 ffed 	bl	800c190 <_fstat_r>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	dbf2      	blt.n	800b1a0 <__swhatbuf_r+0x12>
 800b1ba:	9a01      	ldr	r2, [sp, #4]
 800b1bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b1c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b1c4:	425a      	negs	r2, r3
 800b1c6:	415a      	adcs	r2, r3
 800b1c8:	602a      	str	r2, [r5, #0]
 800b1ca:	e7ee      	b.n	800b1aa <__swhatbuf_r+0x1c>
 800b1cc:	2340      	movs	r3, #64	; 0x40
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	6023      	str	r3, [r4, #0]
 800b1d2:	b016      	add	sp, #88	; 0x58
 800b1d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b1d8 <__smakebuf_r>:
 800b1d8:	898b      	ldrh	r3, [r1, #12]
 800b1da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1dc:	079d      	lsls	r5, r3, #30
 800b1de:	4606      	mov	r6, r0
 800b1e0:	460c      	mov	r4, r1
 800b1e2:	d507      	bpl.n	800b1f4 <__smakebuf_r+0x1c>
 800b1e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1e8:	6023      	str	r3, [r4, #0]
 800b1ea:	6123      	str	r3, [r4, #16]
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	6163      	str	r3, [r4, #20]
 800b1f0:	b002      	add	sp, #8
 800b1f2:	bd70      	pop	{r4, r5, r6, pc}
 800b1f4:	ab01      	add	r3, sp, #4
 800b1f6:	466a      	mov	r2, sp
 800b1f8:	f7ff ffc9 	bl	800b18e <__swhatbuf_r>
 800b1fc:	9900      	ldr	r1, [sp, #0]
 800b1fe:	4605      	mov	r5, r0
 800b200:	4630      	mov	r0, r6
 800b202:	f000 fc0f 	bl	800ba24 <_malloc_r>
 800b206:	b948      	cbnz	r0, 800b21c <__smakebuf_r+0x44>
 800b208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b20c:	059a      	lsls	r2, r3, #22
 800b20e:	d4ef      	bmi.n	800b1f0 <__smakebuf_r+0x18>
 800b210:	f023 0303 	bic.w	r3, r3, #3
 800b214:	f043 0302 	orr.w	r3, r3, #2
 800b218:	81a3      	strh	r3, [r4, #12]
 800b21a:	e7e3      	b.n	800b1e4 <__smakebuf_r+0xc>
 800b21c:	4b0d      	ldr	r3, [pc, #52]	; (800b254 <__smakebuf_r+0x7c>)
 800b21e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b220:	89a3      	ldrh	r3, [r4, #12]
 800b222:	6020      	str	r0, [r4, #0]
 800b224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b228:	81a3      	strh	r3, [r4, #12]
 800b22a:	9b00      	ldr	r3, [sp, #0]
 800b22c:	6163      	str	r3, [r4, #20]
 800b22e:	9b01      	ldr	r3, [sp, #4]
 800b230:	6120      	str	r0, [r4, #16]
 800b232:	b15b      	cbz	r3, 800b24c <__smakebuf_r+0x74>
 800b234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b238:	4630      	mov	r0, r6
 800b23a:	f000 ffbb 	bl	800c1b4 <_isatty_r>
 800b23e:	b128      	cbz	r0, 800b24c <__smakebuf_r+0x74>
 800b240:	89a3      	ldrh	r3, [r4, #12]
 800b242:	f023 0303 	bic.w	r3, r3, #3
 800b246:	f043 0301 	orr.w	r3, r3, #1
 800b24a:	81a3      	strh	r3, [r4, #12]
 800b24c:	89a0      	ldrh	r0, [r4, #12]
 800b24e:	4305      	orrs	r5, r0
 800b250:	81a5      	strh	r5, [r4, #12]
 800b252:	e7cd      	b.n	800b1f0 <__smakebuf_r+0x18>
 800b254:	0800afdd 	.word	0x0800afdd

0800b258 <malloc>:
 800b258:	4b02      	ldr	r3, [pc, #8]	; (800b264 <malloc+0xc>)
 800b25a:	4601      	mov	r1, r0
 800b25c:	6818      	ldr	r0, [r3, #0]
 800b25e:	f000 bbe1 	b.w	800ba24 <_malloc_r>
 800b262:	bf00      	nop
 800b264:	20000018 	.word	0x20000018

0800b268 <_Balloc>:
 800b268:	b570      	push	{r4, r5, r6, lr}
 800b26a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b26c:	4604      	mov	r4, r0
 800b26e:	460d      	mov	r5, r1
 800b270:	b976      	cbnz	r6, 800b290 <_Balloc+0x28>
 800b272:	2010      	movs	r0, #16
 800b274:	f7ff fff0 	bl	800b258 <malloc>
 800b278:	4602      	mov	r2, r0
 800b27a:	6260      	str	r0, [r4, #36]	; 0x24
 800b27c:	b920      	cbnz	r0, 800b288 <_Balloc+0x20>
 800b27e:	4b18      	ldr	r3, [pc, #96]	; (800b2e0 <_Balloc+0x78>)
 800b280:	4818      	ldr	r0, [pc, #96]	; (800b2e4 <_Balloc+0x7c>)
 800b282:	2166      	movs	r1, #102	; 0x66
 800b284:	f000 ff44 	bl	800c110 <__assert_func>
 800b288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b28c:	6006      	str	r6, [r0, #0]
 800b28e:	60c6      	str	r6, [r0, #12]
 800b290:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b292:	68f3      	ldr	r3, [r6, #12]
 800b294:	b183      	cbz	r3, 800b2b8 <_Balloc+0x50>
 800b296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b29e:	b9b8      	cbnz	r0, 800b2d0 <_Balloc+0x68>
 800b2a0:	2101      	movs	r1, #1
 800b2a2:	fa01 f605 	lsl.w	r6, r1, r5
 800b2a6:	1d72      	adds	r2, r6, #5
 800b2a8:	0092      	lsls	r2, r2, #2
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	f000 fb5a 	bl	800b964 <_calloc_r>
 800b2b0:	b160      	cbz	r0, 800b2cc <_Balloc+0x64>
 800b2b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2b6:	e00e      	b.n	800b2d6 <_Balloc+0x6e>
 800b2b8:	2221      	movs	r2, #33	; 0x21
 800b2ba:	2104      	movs	r1, #4
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f000 fb51 	bl	800b964 <_calloc_r>
 800b2c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2c4:	60f0      	str	r0, [r6, #12]
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d1e4      	bne.n	800b296 <_Balloc+0x2e>
 800b2cc:	2000      	movs	r0, #0
 800b2ce:	bd70      	pop	{r4, r5, r6, pc}
 800b2d0:	6802      	ldr	r2, [r0, #0]
 800b2d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2dc:	e7f7      	b.n	800b2ce <_Balloc+0x66>
 800b2de:	bf00      	nop
 800b2e0:	0800e035 	.word	0x0800e035
 800b2e4:	0800e11c 	.word	0x0800e11c

0800b2e8 <_Bfree>:
 800b2e8:	b570      	push	{r4, r5, r6, lr}
 800b2ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b2ec:	4605      	mov	r5, r0
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	b976      	cbnz	r6, 800b310 <_Bfree+0x28>
 800b2f2:	2010      	movs	r0, #16
 800b2f4:	f7ff ffb0 	bl	800b258 <malloc>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	6268      	str	r0, [r5, #36]	; 0x24
 800b2fc:	b920      	cbnz	r0, 800b308 <_Bfree+0x20>
 800b2fe:	4b09      	ldr	r3, [pc, #36]	; (800b324 <_Bfree+0x3c>)
 800b300:	4809      	ldr	r0, [pc, #36]	; (800b328 <_Bfree+0x40>)
 800b302:	218a      	movs	r1, #138	; 0x8a
 800b304:	f000 ff04 	bl	800c110 <__assert_func>
 800b308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b30c:	6006      	str	r6, [r0, #0]
 800b30e:	60c6      	str	r6, [r0, #12]
 800b310:	b13c      	cbz	r4, 800b322 <_Bfree+0x3a>
 800b312:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b314:	6862      	ldr	r2, [r4, #4]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b31c:	6021      	str	r1, [r4, #0]
 800b31e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b322:	bd70      	pop	{r4, r5, r6, pc}
 800b324:	0800e035 	.word	0x0800e035
 800b328:	0800e11c 	.word	0x0800e11c

0800b32c <__multadd>:
 800b32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b330:	690e      	ldr	r6, [r1, #16]
 800b332:	4607      	mov	r7, r0
 800b334:	4698      	mov	r8, r3
 800b336:	460c      	mov	r4, r1
 800b338:	f101 0014 	add.w	r0, r1, #20
 800b33c:	2300      	movs	r3, #0
 800b33e:	6805      	ldr	r5, [r0, #0]
 800b340:	b2a9      	uxth	r1, r5
 800b342:	fb02 8101 	mla	r1, r2, r1, r8
 800b346:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b34a:	0c2d      	lsrs	r5, r5, #16
 800b34c:	fb02 c505 	mla	r5, r2, r5, ip
 800b350:	b289      	uxth	r1, r1
 800b352:	3301      	adds	r3, #1
 800b354:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b358:	429e      	cmp	r6, r3
 800b35a:	f840 1b04 	str.w	r1, [r0], #4
 800b35e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b362:	dcec      	bgt.n	800b33e <__multadd+0x12>
 800b364:	f1b8 0f00 	cmp.w	r8, #0
 800b368:	d022      	beq.n	800b3b0 <__multadd+0x84>
 800b36a:	68a3      	ldr	r3, [r4, #8]
 800b36c:	42b3      	cmp	r3, r6
 800b36e:	dc19      	bgt.n	800b3a4 <__multadd+0x78>
 800b370:	6861      	ldr	r1, [r4, #4]
 800b372:	4638      	mov	r0, r7
 800b374:	3101      	adds	r1, #1
 800b376:	f7ff ff77 	bl	800b268 <_Balloc>
 800b37a:	4605      	mov	r5, r0
 800b37c:	b928      	cbnz	r0, 800b38a <__multadd+0x5e>
 800b37e:	4602      	mov	r2, r0
 800b380:	4b0d      	ldr	r3, [pc, #52]	; (800b3b8 <__multadd+0x8c>)
 800b382:	480e      	ldr	r0, [pc, #56]	; (800b3bc <__multadd+0x90>)
 800b384:	21b5      	movs	r1, #181	; 0xb5
 800b386:	f000 fec3 	bl	800c110 <__assert_func>
 800b38a:	6922      	ldr	r2, [r4, #16]
 800b38c:	3202      	adds	r2, #2
 800b38e:	f104 010c 	add.w	r1, r4, #12
 800b392:	0092      	lsls	r2, r2, #2
 800b394:	300c      	adds	r0, #12
 800b396:	f7fe f8d5 	bl	8009544 <memcpy>
 800b39a:	4621      	mov	r1, r4
 800b39c:	4638      	mov	r0, r7
 800b39e:	f7ff ffa3 	bl	800b2e8 <_Bfree>
 800b3a2:	462c      	mov	r4, r5
 800b3a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b3a8:	3601      	adds	r6, #1
 800b3aa:	f8c3 8014 	str.w	r8, [r3, #20]
 800b3ae:	6126      	str	r6, [r4, #16]
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3b6:	bf00      	nop
 800b3b8:	0800e0ab 	.word	0x0800e0ab
 800b3bc:	0800e11c 	.word	0x0800e11c

0800b3c0 <__hi0bits>:
 800b3c0:	0c03      	lsrs	r3, r0, #16
 800b3c2:	041b      	lsls	r3, r3, #16
 800b3c4:	b9d3      	cbnz	r3, 800b3fc <__hi0bits+0x3c>
 800b3c6:	0400      	lsls	r0, r0, #16
 800b3c8:	2310      	movs	r3, #16
 800b3ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b3ce:	bf04      	itt	eq
 800b3d0:	0200      	lsleq	r0, r0, #8
 800b3d2:	3308      	addeq	r3, #8
 800b3d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3d8:	bf04      	itt	eq
 800b3da:	0100      	lsleq	r0, r0, #4
 800b3dc:	3304      	addeq	r3, #4
 800b3de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b3e2:	bf04      	itt	eq
 800b3e4:	0080      	lsleq	r0, r0, #2
 800b3e6:	3302      	addeq	r3, #2
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	db05      	blt.n	800b3f8 <__hi0bits+0x38>
 800b3ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b3f0:	f103 0301 	add.w	r3, r3, #1
 800b3f4:	bf08      	it	eq
 800b3f6:	2320      	moveq	r3, #32
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	4770      	bx	lr
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	e7e4      	b.n	800b3ca <__hi0bits+0xa>

0800b400 <__lo0bits>:
 800b400:	6803      	ldr	r3, [r0, #0]
 800b402:	f013 0207 	ands.w	r2, r3, #7
 800b406:	4601      	mov	r1, r0
 800b408:	d00b      	beq.n	800b422 <__lo0bits+0x22>
 800b40a:	07da      	lsls	r2, r3, #31
 800b40c:	d424      	bmi.n	800b458 <__lo0bits+0x58>
 800b40e:	0798      	lsls	r0, r3, #30
 800b410:	bf49      	itett	mi
 800b412:	085b      	lsrmi	r3, r3, #1
 800b414:	089b      	lsrpl	r3, r3, #2
 800b416:	2001      	movmi	r0, #1
 800b418:	600b      	strmi	r3, [r1, #0]
 800b41a:	bf5c      	itt	pl
 800b41c:	600b      	strpl	r3, [r1, #0]
 800b41e:	2002      	movpl	r0, #2
 800b420:	4770      	bx	lr
 800b422:	b298      	uxth	r0, r3
 800b424:	b9b0      	cbnz	r0, 800b454 <__lo0bits+0x54>
 800b426:	0c1b      	lsrs	r3, r3, #16
 800b428:	2010      	movs	r0, #16
 800b42a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b42e:	bf04      	itt	eq
 800b430:	0a1b      	lsreq	r3, r3, #8
 800b432:	3008      	addeq	r0, #8
 800b434:	071a      	lsls	r2, r3, #28
 800b436:	bf04      	itt	eq
 800b438:	091b      	lsreq	r3, r3, #4
 800b43a:	3004      	addeq	r0, #4
 800b43c:	079a      	lsls	r2, r3, #30
 800b43e:	bf04      	itt	eq
 800b440:	089b      	lsreq	r3, r3, #2
 800b442:	3002      	addeq	r0, #2
 800b444:	07da      	lsls	r2, r3, #31
 800b446:	d403      	bmi.n	800b450 <__lo0bits+0x50>
 800b448:	085b      	lsrs	r3, r3, #1
 800b44a:	f100 0001 	add.w	r0, r0, #1
 800b44e:	d005      	beq.n	800b45c <__lo0bits+0x5c>
 800b450:	600b      	str	r3, [r1, #0]
 800b452:	4770      	bx	lr
 800b454:	4610      	mov	r0, r2
 800b456:	e7e8      	b.n	800b42a <__lo0bits+0x2a>
 800b458:	2000      	movs	r0, #0
 800b45a:	4770      	bx	lr
 800b45c:	2020      	movs	r0, #32
 800b45e:	4770      	bx	lr

0800b460 <__i2b>:
 800b460:	b510      	push	{r4, lr}
 800b462:	460c      	mov	r4, r1
 800b464:	2101      	movs	r1, #1
 800b466:	f7ff feff 	bl	800b268 <_Balloc>
 800b46a:	4602      	mov	r2, r0
 800b46c:	b928      	cbnz	r0, 800b47a <__i2b+0x1a>
 800b46e:	4b05      	ldr	r3, [pc, #20]	; (800b484 <__i2b+0x24>)
 800b470:	4805      	ldr	r0, [pc, #20]	; (800b488 <__i2b+0x28>)
 800b472:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b476:	f000 fe4b 	bl	800c110 <__assert_func>
 800b47a:	2301      	movs	r3, #1
 800b47c:	6144      	str	r4, [r0, #20]
 800b47e:	6103      	str	r3, [r0, #16]
 800b480:	bd10      	pop	{r4, pc}
 800b482:	bf00      	nop
 800b484:	0800e0ab 	.word	0x0800e0ab
 800b488:	0800e11c 	.word	0x0800e11c

0800b48c <__multiply>:
 800b48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b490:	4614      	mov	r4, r2
 800b492:	690a      	ldr	r2, [r1, #16]
 800b494:	6923      	ldr	r3, [r4, #16]
 800b496:	429a      	cmp	r2, r3
 800b498:	bfb8      	it	lt
 800b49a:	460b      	movlt	r3, r1
 800b49c:	460d      	mov	r5, r1
 800b49e:	bfbc      	itt	lt
 800b4a0:	4625      	movlt	r5, r4
 800b4a2:	461c      	movlt	r4, r3
 800b4a4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b4a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b4ac:	68ab      	ldr	r3, [r5, #8]
 800b4ae:	6869      	ldr	r1, [r5, #4]
 800b4b0:	eb0a 0709 	add.w	r7, sl, r9
 800b4b4:	42bb      	cmp	r3, r7
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	bfb8      	it	lt
 800b4ba:	3101      	addlt	r1, #1
 800b4bc:	f7ff fed4 	bl	800b268 <_Balloc>
 800b4c0:	b930      	cbnz	r0, 800b4d0 <__multiply+0x44>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	4b42      	ldr	r3, [pc, #264]	; (800b5d0 <__multiply+0x144>)
 800b4c6:	4843      	ldr	r0, [pc, #268]	; (800b5d4 <__multiply+0x148>)
 800b4c8:	f240 115d 	movw	r1, #349	; 0x15d
 800b4cc:	f000 fe20 	bl	800c110 <__assert_func>
 800b4d0:	f100 0614 	add.w	r6, r0, #20
 800b4d4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b4d8:	4633      	mov	r3, r6
 800b4da:	2200      	movs	r2, #0
 800b4dc:	4543      	cmp	r3, r8
 800b4de:	d31e      	bcc.n	800b51e <__multiply+0x92>
 800b4e0:	f105 0c14 	add.w	ip, r5, #20
 800b4e4:	f104 0314 	add.w	r3, r4, #20
 800b4e8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b4ec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b4f0:	9202      	str	r2, [sp, #8]
 800b4f2:	ebac 0205 	sub.w	r2, ip, r5
 800b4f6:	3a15      	subs	r2, #21
 800b4f8:	f022 0203 	bic.w	r2, r2, #3
 800b4fc:	3204      	adds	r2, #4
 800b4fe:	f105 0115 	add.w	r1, r5, #21
 800b502:	458c      	cmp	ip, r1
 800b504:	bf38      	it	cc
 800b506:	2204      	movcc	r2, #4
 800b508:	9201      	str	r2, [sp, #4]
 800b50a:	9a02      	ldr	r2, [sp, #8]
 800b50c:	9303      	str	r3, [sp, #12]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d808      	bhi.n	800b524 <__multiply+0x98>
 800b512:	2f00      	cmp	r7, #0
 800b514:	dc55      	bgt.n	800b5c2 <__multiply+0x136>
 800b516:	6107      	str	r7, [r0, #16]
 800b518:	b005      	add	sp, #20
 800b51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51e:	f843 2b04 	str.w	r2, [r3], #4
 800b522:	e7db      	b.n	800b4dc <__multiply+0x50>
 800b524:	f8b3 a000 	ldrh.w	sl, [r3]
 800b528:	f1ba 0f00 	cmp.w	sl, #0
 800b52c:	d020      	beq.n	800b570 <__multiply+0xe4>
 800b52e:	f105 0e14 	add.w	lr, r5, #20
 800b532:	46b1      	mov	r9, r6
 800b534:	2200      	movs	r2, #0
 800b536:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b53a:	f8d9 b000 	ldr.w	fp, [r9]
 800b53e:	b2a1      	uxth	r1, r4
 800b540:	fa1f fb8b 	uxth.w	fp, fp
 800b544:	fb0a b101 	mla	r1, sl, r1, fp
 800b548:	4411      	add	r1, r2
 800b54a:	f8d9 2000 	ldr.w	r2, [r9]
 800b54e:	0c24      	lsrs	r4, r4, #16
 800b550:	0c12      	lsrs	r2, r2, #16
 800b552:	fb0a 2404 	mla	r4, sl, r4, r2
 800b556:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b55a:	b289      	uxth	r1, r1
 800b55c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b560:	45f4      	cmp	ip, lr
 800b562:	f849 1b04 	str.w	r1, [r9], #4
 800b566:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b56a:	d8e4      	bhi.n	800b536 <__multiply+0xaa>
 800b56c:	9901      	ldr	r1, [sp, #4]
 800b56e:	5072      	str	r2, [r6, r1]
 800b570:	9a03      	ldr	r2, [sp, #12]
 800b572:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b576:	3304      	adds	r3, #4
 800b578:	f1b9 0f00 	cmp.w	r9, #0
 800b57c:	d01f      	beq.n	800b5be <__multiply+0x132>
 800b57e:	6834      	ldr	r4, [r6, #0]
 800b580:	f105 0114 	add.w	r1, r5, #20
 800b584:	46b6      	mov	lr, r6
 800b586:	f04f 0a00 	mov.w	sl, #0
 800b58a:	880a      	ldrh	r2, [r1, #0]
 800b58c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b590:	fb09 b202 	mla	r2, r9, r2, fp
 800b594:	4492      	add	sl, r2
 800b596:	b2a4      	uxth	r4, r4
 800b598:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b59c:	f84e 4b04 	str.w	r4, [lr], #4
 800b5a0:	f851 4b04 	ldr.w	r4, [r1], #4
 800b5a4:	f8be 2000 	ldrh.w	r2, [lr]
 800b5a8:	0c24      	lsrs	r4, r4, #16
 800b5aa:	fb09 2404 	mla	r4, r9, r4, r2
 800b5ae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b5b2:	458c      	cmp	ip, r1
 800b5b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b5b8:	d8e7      	bhi.n	800b58a <__multiply+0xfe>
 800b5ba:	9a01      	ldr	r2, [sp, #4]
 800b5bc:	50b4      	str	r4, [r6, r2]
 800b5be:	3604      	adds	r6, #4
 800b5c0:	e7a3      	b.n	800b50a <__multiply+0x7e>
 800b5c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1a5      	bne.n	800b516 <__multiply+0x8a>
 800b5ca:	3f01      	subs	r7, #1
 800b5cc:	e7a1      	b.n	800b512 <__multiply+0x86>
 800b5ce:	bf00      	nop
 800b5d0:	0800e0ab 	.word	0x0800e0ab
 800b5d4:	0800e11c 	.word	0x0800e11c

0800b5d8 <__pow5mult>:
 800b5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5dc:	4615      	mov	r5, r2
 800b5de:	f012 0203 	ands.w	r2, r2, #3
 800b5e2:	4606      	mov	r6, r0
 800b5e4:	460f      	mov	r7, r1
 800b5e6:	d007      	beq.n	800b5f8 <__pow5mult+0x20>
 800b5e8:	4c25      	ldr	r4, [pc, #148]	; (800b680 <__pow5mult+0xa8>)
 800b5ea:	3a01      	subs	r2, #1
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5f2:	f7ff fe9b 	bl	800b32c <__multadd>
 800b5f6:	4607      	mov	r7, r0
 800b5f8:	10ad      	asrs	r5, r5, #2
 800b5fa:	d03d      	beq.n	800b678 <__pow5mult+0xa0>
 800b5fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5fe:	b97c      	cbnz	r4, 800b620 <__pow5mult+0x48>
 800b600:	2010      	movs	r0, #16
 800b602:	f7ff fe29 	bl	800b258 <malloc>
 800b606:	4602      	mov	r2, r0
 800b608:	6270      	str	r0, [r6, #36]	; 0x24
 800b60a:	b928      	cbnz	r0, 800b618 <__pow5mult+0x40>
 800b60c:	4b1d      	ldr	r3, [pc, #116]	; (800b684 <__pow5mult+0xac>)
 800b60e:	481e      	ldr	r0, [pc, #120]	; (800b688 <__pow5mult+0xb0>)
 800b610:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b614:	f000 fd7c 	bl	800c110 <__assert_func>
 800b618:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b61c:	6004      	str	r4, [r0, #0]
 800b61e:	60c4      	str	r4, [r0, #12]
 800b620:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b624:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b628:	b94c      	cbnz	r4, 800b63e <__pow5mult+0x66>
 800b62a:	f240 2171 	movw	r1, #625	; 0x271
 800b62e:	4630      	mov	r0, r6
 800b630:	f7ff ff16 	bl	800b460 <__i2b>
 800b634:	2300      	movs	r3, #0
 800b636:	f8c8 0008 	str.w	r0, [r8, #8]
 800b63a:	4604      	mov	r4, r0
 800b63c:	6003      	str	r3, [r0, #0]
 800b63e:	f04f 0900 	mov.w	r9, #0
 800b642:	07eb      	lsls	r3, r5, #31
 800b644:	d50a      	bpl.n	800b65c <__pow5mult+0x84>
 800b646:	4639      	mov	r1, r7
 800b648:	4622      	mov	r2, r4
 800b64a:	4630      	mov	r0, r6
 800b64c:	f7ff ff1e 	bl	800b48c <__multiply>
 800b650:	4639      	mov	r1, r7
 800b652:	4680      	mov	r8, r0
 800b654:	4630      	mov	r0, r6
 800b656:	f7ff fe47 	bl	800b2e8 <_Bfree>
 800b65a:	4647      	mov	r7, r8
 800b65c:	106d      	asrs	r5, r5, #1
 800b65e:	d00b      	beq.n	800b678 <__pow5mult+0xa0>
 800b660:	6820      	ldr	r0, [r4, #0]
 800b662:	b938      	cbnz	r0, 800b674 <__pow5mult+0x9c>
 800b664:	4622      	mov	r2, r4
 800b666:	4621      	mov	r1, r4
 800b668:	4630      	mov	r0, r6
 800b66a:	f7ff ff0f 	bl	800b48c <__multiply>
 800b66e:	6020      	str	r0, [r4, #0]
 800b670:	f8c0 9000 	str.w	r9, [r0]
 800b674:	4604      	mov	r4, r0
 800b676:	e7e4      	b.n	800b642 <__pow5mult+0x6a>
 800b678:	4638      	mov	r0, r7
 800b67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b67e:	bf00      	nop
 800b680:	0800e270 	.word	0x0800e270
 800b684:	0800e035 	.word	0x0800e035
 800b688:	0800e11c 	.word	0x0800e11c

0800b68c <__lshift>:
 800b68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b690:	460c      	mov	r4, r1
 800b692:	6849      	ldr	r1, [r1, #4]
 800b694:	6923      	ldr	r3, [r4, #16]
 800b696:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b69a:	68a3      	ldr	r3, [r4, #8]
 800b69c:	4607      	mov	r7, r0
 800b69e:	4691      	mov	r9, r2
 800b6a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6a4:	f108 0601 	add.w	r6, r8, #1
 800b6a8:	42b3      	cmp	r3, r6
 800b6aa:	db0b      	blt.n	800b6c4 <__lshift+0x38>
 800b6ac:	4638      	mov	r0, r7
 800b6ae:	f7ff fddb 	bl	800b268 <_Balloc>
 800b6b2:	4605      	mov	r5, r0
 800b6b4:	b948      	cbnz	r0, 800b6ca <__lshift+0x3e>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	4b28      	ldr	r3, [pc, #160]	; (800b75c <__lshift+0xd0>)
 800b6ba:	4829      	ldr	r0, [pc, #164]	; (800b760 <__lshift+0xd4>)
 800b6bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b6c0:	f000 fd26 	bl	800c110 <__assert_func>
 800b6c4:	3101      	adds	r1, #1
 800b6c6:	005b      	lsls	r3, r3, #1
 800b6c8:	e7ee      	b.n	800b6a8 <__lshift+0x1c>
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	f100 0114 	add.w	r1, r0, #20
 800b6d0:	f100 0210 	add.w	r2, r0, #16
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	4553      	cmp	r3, sl
 800b6d8:	db33      	blt.n	800b742 <__lshift+0xb6>
 800b6da:	6920      	ldr	r0, [r4, #16]
 800b6dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6e0:	f104 0314 	add.w	r3, r4, #20
 800b6e4:	f019 091f 	ands.w	r9, r9, #31
 800b6e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b6f0:	d02b      	beq.n	800b74a <__lshift+0xbe>
 800b6f2:	f1c9 0e20 	rsb	lr, r9, #32
 800b6f6:	468a      	mov	sl, r1
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	6818      	ldr	r0, [r3, #0]
 800b6fc:	fa00 f009 	lsl.w	r0, r0, r9
 800b700:	4302      	orrs	r2, r0
 800b702:	f84a 2b04 	str.w	r2, [sl], #4
 800b706:	f853 2b04 	ldr.w	r2, [r3], #4
 800b70a:	459c      	cmp	ip, r3
 800b70c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b710:	d8f3      	bhi.n	800b6fa <__lshift+0x6e>
 800b712:	ebac 0304 	sub.w	r3, ip, r4
 800b716:	3b15      	subs	r3, #21
 800b718:	f023 0303 	bic.w	r3, r3, #3
 800b71c:	3304      	adds	r3, #4
 800b71e:	f104 0015 	add.w	r0, r4, #21
 800b722:	4584      	cmp	ip, r0
 800b724:	bf38      	it	cc
 800b726:	2304      	movcc	r3, #4
 800b728:	50ca      	str	r2, [r1, r3]
 800b72a:	b10a      	cbz	r2, 800b730 <__lshift+0xa4>
 800b72c:	f108 0602 	add.w	r6, r8, #2
 800b730:	3e01      	subs	r6, #1
 800b732:	4638      	mov	r0, r7
 800b734:	612e      	str	r6, [r5, #16]
 800b736:	4621      	mov	r1, r4
 800b738:	f7ff fdd6 	bl	800b2e8 <_Bfree>
 800b73c:	4628      	mov	r0, r5
 800b73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b742:	f842 0f04 	str.w	r0, [r2, #4]!
 800b746:	3301      	adds	r3, #1
 800b748:	e7c5      	b.n	800b6d6 <__lshift+0x4a>
 800b74a:	3904      	subs	r1, #4
 800b74c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b750:	f841 2f04 	str.w	r2, [r1, #4]!
 800b754:	459c      	cmp	ip, r3
 800b756:	d8f9      	bhi.n	800b74c <__lshift+0xc0>
 800b758:	e7ea      	b.n	800b730 <__lshift+0xa4>
 800b75a:	bf00      	nop
 800b75c:	0800e0ab 	.word	0x0800e0ab
 800b760:	0800e11c 	.word	0x0800e11c

0800b764 <__mcmp>:
 800b764:	b530      	push	{r4, r5, lr}
 800b766:	6902      	ldr	r2, [r0, #16]
 800b768:	690c      	ldr	r4, [r1, #16]
 800b76a:	1b12      	subs	r2, r2, r4
 800b76c:	d10e      	bne.n	800b78c <__mcmp+0x28>
 800b76e:	f100 0314 	add.w	r3, r0, #20
 800b772:	3114      	adds	r1, #20
 800b774:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b778:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b77c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b780:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b784:	42a5      	cmp	r5, r4
 800b786:	d003      	beq.n	800b790 <__mcmp+0x2c>
 800b788:	d305      	bcc.n	800b796 <__mcmp+0x32>
 800b78a:	2201      	movs	r2, #1
 800b78c:	4610      	mov	r0, r2
 800b78e:	bd30      	pop	{r4, r5, pc}
 800b790:	4283      	cmp	r3, r0
 800b792:	d3f3      	bcc.n	800b77c <__mcmp+0x18>
 800b794:	e7fa      	b.n	800b78c <__mcmp+0x28>
 800b796:	f04f 32ff 	mov.w	r2, #4294967295
 800b79a:	e7f7      	b.n	800b78c <__mcmp+0x28>

0800b79c <__mdiff>:
 800b79c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	4606      	mov	r6, r0
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	4617      	mov	r7, r2
 800b7aa:	f7ff ffdb 	bl	800b764 <__mcmp>
 800b7ae:	1e05      	subs	r5, r0, #0
 800b7b0:	d110      	bne.n	800b7d4 <__mdiff+0x38>
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	f7ff fd57 	bl	800b268 <_Balloc>
 800b7ba:	b930      	cbnz	r0, 800b7ca <__mdiff+0x2e>
 800b7bc:	4b39      	ldr	r3, [pc, #228]	; (800b8a4 <__mdiff+0x108>)
 800b7be:	4602      	mov	r2, r0
 800b7c0:	f240 2132 	movw	r1, #562	; 0x232
 800b7c4:	4838      	ldr	r0, [pc, #224]	; (800b8a8 <__mdiff+0x10c>)
 800b7c6:	f000 fca3 	bl	800c110 <__assert_func>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d4:	bfa4      	itt	ge
 800b7d6:	463b      	movge	r3, r7
 800b7d8:	4627      	movge	r7, r4
 800b7da:	4630      	mov	r0, r6
 800b7dc:	6879      	ldr	r1, [r7, #4]
 800b7de:	bfa6      	itte	ge
 800b7e0:	461c      	movge	r4, r3
 800b7e2:	2500      	movge	r5, #0
 800b7e4:	2501      	movlt	r5, #1
 800b7e6:	f7ff fd3f 	bl	800b268 <_Balloc>
 800b7ea:	b920      	cbnz	r0, 800b7f6 <__mdiff+0x5a>
 800b7ec:	4b2d      	ldr	r3, [pc, #180]	; (800b8a4 <__mdiff+0x108>)
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b7f4:	e7e6      	b.n	800b7c4 <__mdiff+0x28>
 800b7f6:	693e      	ldr	r6, [r7, #16]
 800b7f8:	60c5      	str	r5, [r0, #12]
 800b7fa:	6925      	ldr	r5, [r4, #16]
 800b7fc:	f107 0114 	add.w	r1, r7, #20
 800b800:	f104 0914 	add.w	r9, r4, #20
 800b804:	f100 0e14 	add.w	lr, r0, #20
 800b808:	f107 0210 	add.w	r2, r7, #16
 800b80c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b810:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b814:	46f2      	mov	sl, lr
 800b816:	2700      	movs	r7, #0
 800b818:	f859 3b04 	ldr.w	r3, [r9], #4
 800b81c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b820:	fa1f f883 	uxth.w	r8, r3
 800b824:	fa17 f78b 	uxtah	r7, r7, fp
 800b828:	0c1b      	lsrs	r3, r3, #16
 800b82a:	eba7 0808 	sub.w	r8, r7, r8
 800b82e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b832:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b836:	fa1f f888 	uxth.w	r8, r8
 800b83a:	141f      	asrs	r7, r3, #16
 800b83c:	454d      	cmp	r5, r9
 800b83e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b842:	f84a 3b04 	str.w	r3, [sl], #4
 800b846:	d8e7      	bhi.n	800b818 <__mdiff+0x7c>
 800b848:	1b2b      	subs	r3, r5, r4
 800b84a:	3b15      	subs	r3, #21
 800b84c:	f023 0303 	bic.w	r3, r3, #3
 800b850:	3304      	adds	r3, #4
 800b852:	3415      	adds	r4, #21
 800b854:	42a5      	cmp	r5, r4
 800b856:	bf38      	it	cc
 800b858:	2304      	movcc	r3, #4
 800b85a:	4419      	add	r1, r3
 800b85c:	4473      	add	r3, lr
 800b85e:	469e      	mov	lr, r3
 800b860:	460d      	mov	r5, r1
 800b862:	4565      	cmp	r5, ip
 800b864:	d30e      	bcc.n	800b884 <__mdiff+0xe8>
 800b866:	f10c 0203 	add.w	r2, ip, #3
 800b86a:	1a52      	subs	r2, r2, r1
 800b86c:	f022 0203 	bic.w	r2, r2, #3
 800b870:	3903      	subs	r1, #3
 800b872:	458c      	cmp	ip, r1
 800b874:	bf38      	it	cc
 800b876:	2200      	movcc	r2, #0
 800b878:	441a      	add	r2, r3
 800b87a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b87e:	b17b      	cbz	r3, 800b8a0 <__mdiff+0x104>
 800b880:	6106      	str	r6, [r0, #16]
 800b882:	e7a5      	b.n	800b7d0 <__mdiff+0x34>
 800b884:	f855 8b04 	ldr.w	r8, [r5], #4
 800b888:	fa17 f488 	uxtah	r4, r7, r8
 800b88c:	1422      	asrs	r2, r4, #16
 800b88e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b892:	b2a4      	uxth	r4, r4
 800b894:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b898:	f84e 4b04 	str.w	r4, [lr], #4
 800b89c:	1417      	asrs	r7, r2, #16
 800b89e:	e7e0      	b.n	800b862 <__mdiff+0xc6>
 800b8a0:	3e01      	subs	r6, #1
 800b8a2:	e7ea      	b.n	800b87a <__mdiff+0xde>
 800b8a4:	0800e0ab 	.word	0x0800e0ab
 800b8a8:	0800e11c 	.word	0x0800e11c

0800b8ac <__d2b>:
 800b8ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8b0:	4689      	mov	r9, r1
 800b8b2:	2101      	movs	r1, #1
 800b8b4:	ec57 6b10 	vmov	r6, r7, d0
 800b8b8:	4690      	mov	r8, r2
 800b8ba:	f7ff fcd5 	bl	800b268 <_Balloc>
 800b8be:	4604      	mov	r4, r0
 800b8c0:	b930      	cbnz	r0, 800b8d0 <__d2b+0x24>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	4b25      	ldr	r3, [pc, #148]	; (800b95c <__d2b+0xb0>)
 800b8c6:	4826      	ldr	r0, [pc, #152]	; (800b960 <__d2b+0xb4>)
 800b8c8:	f240 310a 	movw	r1, #778	; 0x30a
 800b8cc:	f000 fc20 	bl	800c110 <__assert_func>
 800b8d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b8d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8d8:	bb35      	cbnz	r5, 800b928 <__d2b+0x7c>
 800b8da:	2e00      	cmp	r6, #0
 800b8dc:	9301      	str	r3, [sp, #4]
 800b8de:	d028      	beq.n	800b932 <__d2b+0x86>
 800b8e0:	4668      	mov	r0, sp
 800b8e2:	9600      	str	r6, [sp, #0]
 800b8e4:	f7ff fd8c 	bl	800b400 <__lo0bits>
 800b8e8:	9900      	ldr	r1, [sp, #0]
 800b8ea:	b300      	cbz	r0, 800b92e <__d2b+0x82>
 800b8ec:	9a01      	ldr	r2, [sp, #4]
 800b8ee:	f1c0 0320 	rsb	r3, r0, #32
 800b8f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f6:	430b      	orrs	r3, r1
 800b8f8:	40c2      	lsrs	r2, r0
 800b8fa:	6163      	str	r3, [r4, #20]
 800b8fc:	9201      	str	r2, [sp, #4]
 800b8fe:	9b01      	ldr	r3, [sp, #4]
 800b900:	61a3      	str	r3, [r4, #24]
 800b902:	2b00      	cmp	r3, #0
 800b904:	bf14      	ite	ne
 800b906:	2202      	movne	r2, #2
 800b908:	2201      	moveq	r2, #1
 800b90a:	6122      	str	r2, [r4, #16]
 800b90c:	b1d5      	cbz	r5, 800b944 <__d2b+0x98>
 800b90e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b912:	4405      	add	r5, r0
 800b914:	f8c9 5000 	str.w	r5, [r9]
 800b918:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b91c:	f8c8 0000 	str.w	r0, [r8]
 800b920:	4620      	mov	r0, r4
 800b922:	b003      	add	sp, #12
 800b924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b928:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b92c:	e7d5      	b.n	800b8da <__d2b+0x2e>
 800b92e:	6161      	str	r1, [r4, #20]
 800b930:	e7e5      	b.n	800b8fe <__d2b+0x52>
 800b932:	a801      	add	r0, sp, #4
 800b934:	f7ff fd64 	bl	800b400 <__lo0bits>
 800b938:	9b01      	ldr	r3, [sp, #4]
 800b93a:	6163      	str	r3, [r4, #20]
 800b93c:	2201      	movs	r2, #1
 800b93e:	6122      	str	r2, [r4, #16]
 800b940:	3020      	adds	r0, #32
 800b942:	e7e3      	b.n	800b90c <__d2b+0x60>
 800b944:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b948:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b94c:	f8c9 0000 	str.w	r0, [r9]
 800b950:	6918      	ldr	r0, [r3, #16]
 800b952:	f7ff fd35 	bl	800b3c0 <__hi0bits>
 800b956:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b95a:	e7df      	b.n	800b91c <__d2b+0x70>
 800b95c:	0800e0ab 	.word	0x0800e0ab
 800b960:	0800e11c 	.word	0x0800e11c

0800b964 <_calloc_r>:
 800b964:	b513      	push	{r0, r1, r4, lr}
 800b966:	434a      	muls	r2, r1
 800b968:	4611      	mov	r1, r2
 800b96a:	9201      	str	r2, [sp, #4]
 800b96c:	f000 f85a 	bl	800ba24 <_malloc_r>
 800b970:	4604      	mov	r4, r0
 800b972:	b118      	cbz	r0, 800b97c <_calloc_r+0x18>
 800b974:	9a01      	ldr	r2, [sp, #4]
 800b976:	2100      	movs	r1, #0
 800b978:	f7fd fdf2 	bl	8009560 <memset>
 800b97c:	4620      	mov	r0, r4
 800b97e:	b002      	add	sp, #8
 800b980:	bd10      	pop	{r4, pc}
	...

0800b984 <_free_r>:
 800b984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b986:	2900      	cmp	r1, #0
 800b988:	d048      	beq.n	800ba1c <_free_r+0x98>
 800b98a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b98e:	9001      	str	r0, [sp, #4]
 800b990:	2b00      	cmp	r3, #0
 800b992:	f1a1 0404 	sub.w	r4, r1, #4
 800b996:	bfb8      	it	lt
 800b998:	18e4      	addlt	r4, r4, r3
 800b99a:	f000 fc59 	bl	800c250 <__malloc_lock>
 800b99e:	4a20      	ldr	r2, [pc, #128]	; (800ba20 <_free_r+0x9c>)
 800b9a0:	9801      	ldr	r0, [sp, #4]
 800b9a2:	6813      	ldr	r3, [r2, #0]
 800b9a4:	4615      	mov	r5, r2
 800b9a6:	b933      	cbnz	r3, 800b9b6 <_free_r+0x32>
 800b9a8:	6063      	str	r3, [r4, #4]
 800b9aa:	6014      	str	r4, [r2, #0]
 800b9ac:	b003      	add	sp, #12
 800b9ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9b2:	f000 bc53 	b.w	800c25c <__malloc_unlock>
 800b9b6:	42a3      	cmp	r3, r4
 800b9b8:	d90b      	bls.n	800b9d2 <_free_r+0x4e>
 800b9ba:	6821      	ldr	r1, [r4, #0]
 800b9bc:	1862      	adds	r2, r4, r1
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	bf04      	itt	eq
 800b9c2:	681a      	ldreq	r2, [r3, #0]
 800b9c4:	685b      	ldreq	r3, [r3, #4]
 800b9c6:	6063      	str	r3, [r4, #4]
 800b9c8:	bf04      	itt	eq
 800b9ca:	1852      	addeq	r2, r2, r1
 800b9cc:	6022      	streq	r2, [r4, #0]
 800b9ce:	602c      	str	r4, [r5, #0]
 800b9d0:	e7ec      	b.n	800b9ac <_free_r+0x28>
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	b10b      	cbz	r3, 800b9dc <_free_r+0x58>
 800b9d8:	42a3      	cmp	r3, r4
 800b9da:	d9fa      	bls.n	800b9d2 <_free_r+0x4e>
 800b9dc:	6811      	ldr	r1, [r2, #0]
 800b9de:	1855      	adds	r5, r2, r1
 800b9e0:	42a5      	cmp	r5, r4
 800b9e2:	d10b      	bne.n	800b9fc <_free_r+0x78>
 800b9e4:	6824      	ldr	r4, [r4, #0]
 800b9e6:	4421      	add	r1, r4
 800b9e8:	1854      	adds	r4, r2, r1
 800b9ea:	42a3      	cmp	r3, r4
 800b9ec:	6011      	str	r1, [r2, #0]
 800b9ee:	d1dd      	bne.n	800b9ac <_free_r+0x28>
 800b9f0:	681c      	ldr	r4, [r3, #0]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	6053      	str	r3, [r2, #4]
 800b9f6:	4421      	add	r1, r4
 800b9f8:	6011      	str	r1, [r2, #0]
 800b9fa:	e7d7      	b.n	800b9ac <_free_r+0x28>
 800b9fc:	d902      	bls.n	800ba04 <_free_r+0x80>
 800b9fe:	230c      	movs	r3, #12
 800ba00:	6003      	str	r3, [r0, #0]
 800ba02:	e7d3      	b.n	800b9ac <_free_r+0x28>
 800ba04:	6825      	ldr	r5, [r4, #0]
 800ba06:	1961      	adds	r1, r4, r5
 800ba08:	428b      	cmp	r3, r1
 800ba0a:	bf04      	itt	eq
 800ba0c:	6819      	ldreq	r1, [r3, #0]
 800ba0e:	685b      	ldreq	r3, [r3, #4]
 800ba10:	6063      	str	r3, [r4, #4]
 800ba12:	bf04      	itt	eq
 800ba14:	1949      	addeq	r1, r1, r5
 800ba16:	6021      	streq	r1, [r4, #0]
 800ba18:	6054      	str	r4, [r2, #4]
 800ba1a:	e7c7      	b.n	800b9ac <_free_r+0x28>
 800ba1c:	b003      	add	sp, #12
 800ba1e:	bd30      	pop	{r4, r5, pc}
 800ba20:	200007cc 	.word	0x200007cc

0800ba24 <_malloc_r>:
 800ba24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba26:	1ccd      	adds	r5, r1, #3
 800ba28:	f025 0503 	bic.w	r5, r5, #3
 800ba2c:	3508      	adds	r5, #8
 800ba2e:	2d0c      	cmp	r5, #12
 800ba30:	bf38      	it	cc
 800ba32:	250c      	movcc	r5, #12
 800ba34:	2d00      	cmp	r5, #0
 800ba36:	4606      	mov	r6, r0
 800ba38:	db01      	blt.n	800ba3e <_malloc_r+0x1a>
 800ba3a:	42a9      	cmp	r1, r5
 800ba3c:	d903      	bls.n	800ba46 <_malloc_r+0x22>
 800ba3e:	230c      	movs	r3, #12
 800ba40:	6033      	str	r3, [r6, #0]
 800ba42:	2000      	movs	r0, #0
 800ba44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba46:	f000 fc03 	bl	800c250 <__malloc_lock>
 800ba4a:	4921      	ldr	r1, [pc, #132]	; (800bad0 <_malloc_r+0xac>)
 800ba4c:	680a      	ldr	r2, [r1, #0]
 800ba4e:	4614      	mov	r4, r2
 800ba50:	b99c      	cbnz	r4, 800ba7a <_malloc_r+0x56>
 800ba52:	4f20      	ldr	r7, [pc, #128]	; (800bad4 <_malloc_r+0xb0>)
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	b923      	cbnz	r3, 800ba62 <_malloc_r+0x3e>
 800ba58:	4621      	mov	r1, r4
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f000 faf2 	bl	800c044 <_sbrk_r>
 800ba60:	6038      	str	r0, [r7, #0]
 800ba62:	4629      	mov	r1, r5
 800ba64:	4630      	mov	r0, r6
 800ba66:	f000 faed 	bl	800c044 <_sbrk_r>
 800ba6a:	1c43      	adds	r3, r0, #1
 800ba6c:	d123      	bne.n	800bab6 <_malloc_r+0x92>
 800ba6e:	230c      	movs	r3, #12
 800ba70:	6033      	str	r3, [r6, #0]
 800ba72:	4630      	mov	r0, r6
 800ba74:	f000 fbf2 	bl	800c25c <__malloc_unlock>
 800ba78:	e7e3      	b.n	800ba42 <_malloc_r+0x1e>
 800ba7a:	6823      	ldr	r3, [r4, #0]
 800ba7c:	1b5b      	subs	r3, r3, r5
 800ba7e:	d417      	bmi.n	800bab0 <_malloc_r+0x8c>
 800ba80:	2b0b      	cmp	r3, #11
 800ba82:	d903      	bls.n	800ba8c <_malloc_r+0x68>
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	441c      	add	r4, r3
 800ba88:	6025      	str	r5, [r4, #0]
 800ba8a:	e004      	b.n	800ba96 <_malloc_r+0x72>
 800ba8c:	6863      	ldr	r3, [r4, #4]
 800ba8e:	42a2      	cmp	r2, r4
 800ba90:	bf0c      	ite	eq
 800ba92:	600b      	streq	r3, [r1, #0]
 800ba94:	6053      	strne	r3, [r2, #4]
 800ba96:	4630      	mov	r0, r6
 800ba98:	f000 fbe0 	bl	800c25c <__malloc_unlock>
 800ba9c:	f104 000b 	add.w	r0, r4, #11
 800baa0:	1d23      	adds	r3, r4, #4
 800baa2:	f020 0007 	bic.w	r0, r0, #7
 800baa6:	1ac2      	subs	r2, r0, r3
 800baa8:	d0cc      	beq.n	800ba44 <_malloc_r+0x20>
 800baaa:	1a1b      	subs	r3, r3, r0
 800baac:	50a3      	str	r3, [r4, r2]
 800baae:	e7c9      	b.n	800ba44 <_malloc_r+0x20>
 800bab0:	4622      	mov	r2, r4
 800bab2:	6864      	ldr	r4, [r4, #4]
 800bab4:	e7cc      	b.n	800ba50 <_malloc_r+0x2c>
 800bab6:	1cc4      	adds	r4, r0, #3
 800bab8:	f024 0403 	bic.w	r4, r4, #3
 800babc:	42a0      	cmp	r0, r4
 800babe:	d0e3      	beq.n	800ba88 <_malloc_r+0x64>
 800bac0:	1a21      	subs	r1, r4, r0
 800bac2:	4630      	mov	r0, r6
 800bac4:	f000 fabe 	bl	800c044 <_sbrk_r>
 800bac8:	3001      	adds	r0, #1
 800baca:	d1dd      	bne.n	800ba88 <_malloc_r+0x64>
 800bacc:	e7cf      	b.n	800ba6e <_malloc_r+0x4a>
 800bace:	bf00      	nop
 800bad0:	200007cc 	.word	0x200007cc
 800bad4:	200007d0 	.word	0x200007d0

0800bad8 <__ssputs_r>:
 800bad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800badc:	688e      	ldr	r6, [r1, #8]
 800bade:	429e      	cmp	r6, r3
 800bae0:	4682      	mov	sl, r0
 800bae2:	460c      	mov	r4, r1
 800bae4:	4690      	mov	r8, r2
 800bae6:	461f      	mov	r7, r3
 800bae8:	d838      	bhi.n	800bb5c <__ssputs_r+0x84>
 800baea:	898a      	ldrh	r2, [r1, #12]
 800baec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800baf0:	d032      	beq.n	800bb58 <__ssputs_r+0x80>
 800baf2:	6825      	ldr	r5, [r4, #0]
 800baf4:	6909      	ldr	r1, [r1, #16]
 800baf6:	eba5 0901 	sub.w	r9, r5, r1
 800bafa:	6965      	ldr	r5, [r4, #20]
 800bafc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb04:	3301      	adds	r3, #1
 800bb06:	444b      	add	r3, r9
 800bb08:	106d      	asrs	r5, r5, #1
 800bb0a:	429d      	cmp	r5, r3
 800bb0c:	bf38      	it	cc
 800bb0e:	461d      	movcc	r5, r3
 800bb10:	0553      	lsls	r3, r2, #21
 800bb12:	d531      	bpl.n	800bb78 <__ssputs_r+0xa0>
 800bb14:	4629      	mov	r1, r5
 800bb16:	f7ff ff85 	bl	800ba24 <_malloc_r>
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	b950      	cbnz	r0, 800bb34 <__ssputs_r+0x5c>
 800bb1e:	230c      	movs	r3, #12
 800bb20:	f8ca 3000 	str.w	r3, [sl]
 800bb24:	89a3      	ldrh	r3, [r4, #12]
 800bb26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb2a:	81a3      	strh	r3, [r4, #12]
 800bb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb34:	6921      	ldr	r1, [r4, #16]
 800bb36:	464a      	mov	r2, r9
 800bb38:	f7fd fd04 	bl	8009544 <memcpy>
 800bb3c:	89a3      	ldrh	r3, [r4, #12]
 800bb3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb46:	81a3      	strh	r3, [r4, #12]
 800bb48:	6126      	str	r6, [r4, #16]
 800bb4a:	6165      	str	r5, [r4, #20]
 800bb4c:	444e      	add	r6, r9
 800bb4e:	eba5 0509 	sub.w	r5, r5, r9
 800bb52:	6026      	str	r6, [r4, #0]
 800bb54:	60a5      	str	r5, [r4, #8]
 800bb56:	463e      	mov	r6, r7
 800bb58:	42be      	cmp	r6, r7
 800bb5a:	d900      	bls.n	800bb5e <__ssputs_r+0x86>
 800bb5c:	463e      	mov	r6, r7
 800bb5e:	4632      	mov	r2, r6
 800bb60:	6820      	ldr	r0, [r4, #0]
 800bb62:	4641      	mov	r1, r8
 800bb64:	f000 fb5a 	bl	800c21c <memmove>
 800bb68:	68a3      	ldr	r3, [r4, #8]
 800bb6a:	6822      	ldr	r2, [r4, #0]
 800bb6c:	1b9b      	subs	r3, r3, r6
 800bb6e:	4432      	add	r2, r6
 800bb70:	60a3      	str	r3, [r4, #8]
 800bb72:	6022      	str	r2, [r4, #0]
 800bb74:	2000      	movs	r0, #0
 800bb76:	e7db      	b.n	800bb30 <__ssputs_r+0x58>
 800bb78:	462a      	mov	r2, r5
 800bb7a:	f000 fb75 	bl	800c268 <_realloc_r>
 800bb7e:	4606      	mov	r6, r0
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d1e1      	bne.n	800bb48 <__ssputs_r+0x70>
 800bb84:	6921      	ldr	r1, [r4, #16]
 800bb86:	4650      	mov	r0, sl
 800bb88:	f7ff fefc 	bl	800b984 <_free_r>
 800bb8c:	e7c7      	b.n	800bb1e <__ssputs_r+0x46>
	...

0800bb90 <_svfiprintf_r>:
 800bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb94:	4698      	mov	r8, r3
 800bb96:	898b      	ldrh	r3, [r1, #12]
 800bb98:	061b      	lsls	r3, r3, #24
 800bb9a:	b09d      	sub	sp, #116	; 0x74
 800bb9c:	4607      	mov	r7, r0
 800bb9e:	460d      	mov	r5, r1
 800bba0:	4614      	mov	r4, r2
 800bba2:	d50e      	bpl.n	800bbc2 <_svfiprintf_r+0x32>
 800bba4:	690b      	ldr	r3, [r1, #16]
 800bba6:	b963      	cbnz	r3, 800bbc2 <_svfiprintf_r+0x32>
 800bba8:	2140      	movs	r1, #64	; 0x40
 800bbaa:	f7ff ff3b 	bl	800ba24 <_malloc_r>
 800bbae:	6028      	str	r0, [r5, #0]
 800bbb0:	6128      	str	r0, [r5, #16]
 800bbb2:	b920      	cbnz	r0, 800bbbe <_svfiprintf_r+0x2e>
 800bbb4:	230c      	movs	r3, #12
 800bbb6:	603b      	str	r3, [r7, #0]
 800bbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbbc:	e0d1      	b.n	800bd62 <_svfiprintf_r+0x1d2>
 800bbbe:	2340      	movs	r3, #64	; 0x40
 800bbc0:	616b      	str	r3, [r5, #20]
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	9309      	str	r3, [sp, #36]	; 0x24
 800bbc6:	2320      	movs	r3, #32
 800bbc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbd0:	2330      	movs	r3, #48	; 0x30
 800bbd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd7c <_svfiprintf_r+0x1ec>
 800bbd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbda:	f04f 0901 	mov.w	r9, #1
 800bbde:	4623      	mov	r3, r4
 800bbe0:	469a      	mov	sl, r3
 800bbe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbe6:	b10a      	cbz	r2, 800bbec <_svfiprintf_r+0x5c>
 800bbe8:	2a25      	cmp	r2, #37	; 0x25
 800bbea:	d1f9      	bne.n	800bbe0 <_svfiprintf_r+0x50>
 800bbec:	ebba 0b04 	subs.w	fp, sl, r4
 800bbf0:	d00b      	beq.n	800bc0a <_svfiprintf_r+0x7a>
 800bbf2:	465b      	mov	r3, fp
 800bbf4:	4622      	mov	r2, r4
 800bbf6:	4629      	mov	r1, r5
 800bbf8:	4638      	mov	r0, r7
 800bbfa:	f7ff ff6d 	bl	800bad8 <__ssputs_r>
 800bbfe:	3001      	adds	r0, #1
 800bc00:	f000 80aa 	beq.w	800bd58 <_svfiprintf_r+0x1c8>
 800bc04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc06:	445a      	add	r2, fp
 800bc08:	9209      	str	r2, [sp, #36]	; 0x24
 800bc0a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	f000 80a2 	beq.w	800bd58 <_svfiprintf_r+0x1c8>
 800bc14:	2300      	movs	r3, #0
 800bc16:	f04f 32ff 	mov.w	r2, #4294967295
 800bc1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc1e:	f10a 0a01 	add.w	sl, sl, #1
 800bc22:	9304      	str	r3, [sp, #16]
 800bc24:	9307      	str	r3, [sp, #28]
 800bc26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc2a:	931a      	str	r3, [sp, #104]	; 0x68
 800bc2c:	4654      	mov	r4, sl
 800bc2e:	2205      	movs	r2, #5
 800bc30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc34:	4851      	ldr	r0, [pc, #324]	; (800bd7c <_svfiprintf_r+0x1ec>)
 800bc36:	f7f4 fad3 	bl	80001e0 <memchr>
 800bc3a:	9a04      	ldr	r2, [sp, #16]
 800bc3c:	b9d8      	cbnz	r0, 800bc76 <_svfiprintf_r+0xe6>
 800bc3e:	06d0      	lsls	r0, r2, #27
 800bc40:	bf44      	itt	mi
 800bc42:	2320      	movmi	r3, #32
 800bc44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc48:	0711      	lsls	r1, r2, #28
 800bc4a:	bf44      	itt	mi
 800bc4c:	232b      	movmi	r3, #43	; 0x2b
 800bc4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc52:	f89a 3000 	ldrb.w	r3, [sl]
 800bc56:	2b2a      	cmp	r3, #42	; 0x2a
 800bc58:	d015      	beq.n	800bc86 <_svfiprintf_r+0xf6>
 800bc5a:	9a07      	ldr	r2, [sp, #28]
 800bc5c:	4654      	mov	r4, sl
 800bc5e:	2000      	movs	r0, #0
 800bc60:	f04f 0c0a 	mov.w	ip, #10
 800bc64:	4621      	mov	r1, r4
 800bc66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc6a:	3b30      	subs	r3, #48	; 0x30
 800bc6c:	2b09      	cmp	r3, #9
 800bc6e:	d94e      	bls.n	800bd0e <_svfiprintf_r+0x17e>
 800bc70:	b1b0      	cbz	r0, 800bca0 <_svfiprintf_r+0x110>
 800bc72:	9207      	str	r2, [sp, #28]
 800bc74:	e014      	b.n	800bca0 <_svfiprintf_r+0x110>
 800bc76:	eba0 0308 	sub.w	r3, r0, r8
 800bc7a:	fa09 f303 	lsl.w	r3, r9, r3
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	9304      	str	r3, [sp, #16]
 800bc82:	46a2      	mov	sl, r4
 800bc84:	e7d2      	b.n	800bc2c <_svfiprintf_r+0x9c>
 800bc86:	9b03      	ldr	r3, [sp, #12]
 800bc88:	1d19      	adds	r1, r3, #4
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	9103      	str	r1, [sp, #12]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	bfbb      	ittet	lt
 800bc92:	425b      	neglt	r3, r3
 800bc94:	f042 0202 	orrlt.w	r2, r2, #2
 800bc98:	9307      	strge	r3, [sp, #28]
 800bc9a:	9307      	strlt	r3, [sp, #28]
 800bc9c:	bfb8      	it	lt
 800bc9e:	9204      	strlt	r2, [sp, #16]
 800bca0:	7823      	ldrb	r3, [r4, #0]
 800bca2:	2b2e      	cmp	r3, #46	; 0x2e
 800bca4:	d10c      	bne.n	800bcc0 <_svfiprintf_r+0x130>
 800bca6:	7863      	ldrb	r3, [r4, #1]
 800bca8:	2b2a      	cmp	r3, #42	; 0x2a
 800bcaa:	d135      	bne.n	800bd18 <_svfiprintf_r+0x188>
 800bcac:	9b03      	ldr	r3, [sp, #12]
 800bcae:	1d1a      	adds	r2, r3, #4
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	9203      	str	r2, [sp, #12]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	bfb8      	it	lt
 800bcb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcbc:	3402      	adds	r4, #2
 800bcbe:	9305      	str	r3, [sp, #20]
 800bcc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd8c <_svfiprintf_r+0x1fc>
 800bcc4:	7821      	ldrb	r1, [r4, #0]
 800bcc6:	2203      	movs	r2, #3
 800bcc8:	4650      	mov	r0, sl
 800bcca:	f7f4 fa89 	bl	80001e0 <memchr>
 800bcce:	b140      	cbz	r0, 800bce2 <_svfiprintf_r+0x152>
 800bcd0:	2340      	movs	r3, #64	; 0x40
 800bcd2:	eba0 000a 	sub.w	r0, r0, sl
 800bcd6:	fa03 f000 	lsl.w	r0, r3, r0
 800bcda:	9b04      	ldr	r3, [sp, #16]
 800bcdc:	4303      	orrs	r3, r0
 800bcde:	3401      	adds	r4, #1
 800bce0:	9304      	str	r3, [sp, #16]
 800bce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce6:	4826      	ldr	r0, [pc, #152]	; (800bd80 <_svfiprintf_r+0x1f0>)
 800bce8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcec:	2206      	movs	r2, #6
 800bcee:	f7f4 fa77 	bl	80001e0 <memchr>
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d038      	beq.n	800bd68 <_svfiprintf_r+0x1d8>
 800bcf6:	4b23      	ldr	r3, [pc, #140]	; (800bd84 <_svfiprintf_r+0x1f4>)
 800bcf8:	bb1b      	cbnz	r3, 800bd42 <_svfiprintf_r+0x1b2>
 800bcfa:	9b03      	ldr	r3, [sp, #12]
 800bcfc:	3307      	adds	r3, #7
 800bcfe:	f023 0307 	bic.w	r3, r3, #7
 800bd02:	3308      	adds	r3, #8
 800bd04:	9303      	str	r3, [sp, #12]
 800bd06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd08:	4433      	add	r3, r6
 800bd0a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd0c:	e767      	b.n	800bbde <_svfiprintf_r+0x4e>
 800bd0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd12:	460c      	mov	r4, r1
 800bd14:	2001      	movs	r0, #1
 800bd16:	e7a5      	b.n	800bc64 <_svfiprintf_r+0xd4>
 800bd18:	2300      	movs	r3, #0
 800bd1a:	3401      	adds	r4, #1
 800bd1c:	9305      	str	r3, [sp, #20]
 800bd1e:	4619      	mov	r1, r3
 800bd20:	f04f 0c0a 	mov.w	ip, #10
 800bd24:	4620      	mov	r0, r4
 800bd26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd2a:	3a30      	subs	r2, #48	; 0x30
 800bd2c:	2a09      	cmp	r2, #9
 800bd2e:	d903      	bls.n	800bd38 <_svfiprintf_r+0x1a8>
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d0c5      	beq.n	800bcc0 <_svfiprintf_r+0x130>
 800bd34:	9105      	str	r1, [sp, #20]
 800bd36:	e7c3      	b.n	800bcc0 <_svfiprintf_r+0x130>
 800bd38:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e7f0      	b.n	800bd24 <_svfiprintf_r+0x194>
 800bd42:	ab03      	add	r3, sp, #12
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	462a      	mov	r2, r5
 800bd48:	4b0f      	ldr	r3, [pc, #60]	; (800bd88 <_svfiprintf_r+0x1f8>)
 800bd4a:	a904      	add	r1, sp, #16
 800bd4c:	4638      	mov	r0, r7
 800bd4e:	f7fd fcaf 	bl	80096b0 <_printf_float>
 800bd52:	1c42      	adds	r2, r0, #1
 800bd54:	4606      	mov	r6, r0
 800bd56:	d1d6      	bne.n	800bd06 <_svfiprintf_r+0x176>
 800bd58:	89ab      	ldrh	r3, [r5, #12]
 800bd5a:	065b      	lsls	r3, r3, #25
 800bd5c:	f53f af2c 	bmi.w	800bbb8 <_svfiprintf_r+0x28>
 800bd60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd62:	b01d      	add	sp, #116	; 0x74
 800bd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd68:	ab03      	add	r3, sp, #12
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	462a      	mov	r2, r5
 800bd6e:	4b06      	ldr	r3, [pc, #24]	; (800bd88 <_svfiprintf_r+0x1f8>)
 800bd70:	a904      	add	r1, sp, #16
 800bd72:	4638      	mov	r0, r7
 800bd74:	f7fd ff40 	bl	8009bf8 <_printf_i>
 800bd78:	e7eb      	b.n	800bd52 <_svfiprintf_r+0x1c2>
 800bd7a:	bf00      	nop
 800bd7c:	0800e27c 	.word	0x0800e27c
 800bd80:	0800e286 	.word	0x0800e286
 800bd84:	080096b1 	.word	0x080096b1
 800bd88:	0800bad9 	.word	0x0800bad9
 800bd8c:	0800e282 	.word	0x0800e282

0800bd90 <__sfputc_r>:
 800bd90:	6893      	ldr	r3, [r2, #8]
 800bd92:	3b01      	subs	r3, #1
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	b410      	push	{r4}
 800bd98:	6093      	str	r3, [r2, #8]
 800bd9a:	da08      	bge.n	800bdae <__sfputc_r+0x1e>
 800bd9c:	6994      	ldr	r4, [r2, #24]
 800bd9e:	42a3      	cmp	r3, r4
 800bda0:	db01      	blt.n	800bda6 <__sfputc_r+0x16>
 800bda2:	290a      	cmp	r1, #10
 800bda4:	d103      	bne.n	800bdae <__sfputc_r+0x1e>
 800bda6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdaa:	f7fe b8f9 	b.w	8009fa0 <__swbuf_r>
 800bdae:	6813      	ldr	r3, [r2, #0]
 800bdb0:	1c58      	adds	r0, r3, #1
 800bdb2:	6010      	str	r0, [r2, #0]
 800bdb4:	7019      	strb	r1, [r3, #0]
 800bdb6:	4608      	mov	r0, r1
 800bdb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdbc:	4770      	bx	lr

0800bdbe <__sfputs_r>:
 800bdbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc0:	4606      	mov	r6, r0
 800bdc2:	460f      	mov	r7, r1
 800bdc4:	4614      	mov	r4, r2
 800bdc6:	18d5      	adds	r5, r2, r3
 800bdc8:	42ac      	cmp	r4, r5
 800bdca:	d101      	bne.n	800bdd0 <__sfputs_r+0x12>
 800bdcc:	2000      	movs	r0, #0
 800bdce:	e007      	b.n	800bde0 <__sfputs_r+0x22>
 800bdd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd4:	463a      	mov	r2, r7
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	f7ff ffda 	bl	800bd90 <__sfputc_r>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d1f3      	bne.n	800bdc8 <__sfputs_r+0xa>
 800bde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bde4 <_vfiprintf_r>:
 800bde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde8:	460d      	mov	r5, r1
 800bdea:	b09d      	sub	sp, #116	; 0x74
 800bdec:	4614      	mov	r4, r2
 800bdee:	4698      	mov	r8, r3
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	b118      	cbz	r0, 800bdfc <_vfiprintf_r+0x18>
 800bdf4:	6983      	ldr	r3, [r0, #24]
 800bdf6:	b90b      	cbnz	r3, 800bdfc <_vfiprintf_r+0x18>
 800bdf8:	f7ff f924 	bl	800b044 <__sinit>
 800bdfc:	4b89      	ldr	r3, [pc, #548]	; (800c024 <_vfiprintf_r+0x240>)
 800bdfe:	429d      	cmp	r5, r3
 800be00:	d11b      	bne.n	800be3a <_vfiprintf_r+0x56>
 800be02:	6875      	ldr	r5, [r6, #4]
 800be04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be06:	07d9      	lsls	r1, r3, #31
 800be08:	d405      	bmi.n	800be16 <_vfiprintf_r+0x32>
 800be0a:	89ab      	ldrh	r3, [r5, #12]
 800be0c:	059a      	lsls	r2, r3, #22
 800be0e:	d402      	bmi.n	800be16 <_vfiprintf_r+0x32>
 800be10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be12:	f7ff f9ba 	bl	800b18a <__retarget_lock_acquire_recursive>
 800be16:	89ab      	ldrh	r3, [r5, #12]
 800be18:	071b      	lsls	r3, r3, #28
 800be1a:	d501      	bpl.n	800be20 <_vfiprintf_r+0x3c>
 800be1c:	692b      	ldr	r3, [r5, #16]
 800be1e:	b9eb      	cbnz	r3, 800be5c <_vfiprintf_r+0x78>
 800be20:	4629      	mov	r1, r5
 800be22:	4630      	mov	r0, r6
 800be24:	f7fe f90e 	bl	800a044 <__swsetup_r>
 800be28:	b1c0      	cbz	r0, 800be5c <_vfiprintf_r+0x78>
 800be2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be2c:	07dc      	lsls	r4, r3, #31
 800be2e:	d50e      	bpl.n	800be4e <_vfiprintf_r+0x6a>
 800be30:	f04f 30ff 	mov.w	r0, #4294967295
 800be34:	b01d      	add	sp, #116	; 0x74
 800be36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be3a:	4b7b      	ldr	r3, [pc, #492]	; (800c028 <_vfiprintf_r+0x244>)
 800be3c:	429d      	cmp	r5, r3
 800be3e:	d101      	bne.n	800be44 <_vfiprintf_r+0x60>
 800be40:	68b5      	ldr	r5, [r6, #8]
 800be42:	e7df      	b.n	800be04 <_vfiprintf_r+0x20>
 800be44:	4b79      	ldr	r3, [pc, #484]	; (800c02c <_vfiprintf_r+0x248>)
 800be46:	429d      	cmp	r5, r3
 800be48:	bf08      	it	eq
 800be4a:	68f5      	ldreq	r5, [r6, #12]
 800be4c:	e7da      	b.n	800be04 <_vfiprintf_r+0x20>
 800be4e:	89ab      	ldrh	r3, [r5, #12]
 800be50:	0598      	lsls	r0, r3, #22
 800be52:	d4ed      	bmi.n	800be30 <_vfiprintf_r+0x4c>
 800be54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be56:	f7ff f999 	bl	800b18c <__retarget_lock_release_recursive>
 800be5a:	e7e9      	b.n	800be30 <_vfiprintf_r+0x4c>
 800be5c:	2300      	movs	r3, #0
 800be5e:	9309      	str	r3, [sp, #36]	; 0x24
 800be60:	2320      	movs	r3, #32
 800be62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be66:	f8cd 800c 	str.w	r8, [sp, #12]
 800be6a:	2330      	movs	r3, #48	; 0x30
 800be6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c030 <_vfiprintf_r+0x24c>
 800be70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be74:	f04f 0901 	mov.w	r9, #1
 800be78:	4623      	mov	r3, r4
 800be7a:	469a      	mov	sl, r3
 800be7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be80:	b10a      	cbz	r2, 800be86 <_vfiprintf_r+0xa2>
 800be82:	2a25      	cmp	r2, #37	; 0x25
 800be84:	d1f9      	bne.n	800be7a <_vfiprintf_r+0x96>
 800be86:	ebba 0b04 	subs.w	fp, sl, r4
 800be8a:	d00b      	beq.n	800bea4 <_vfiprintf_r+0xc0>
 800be8c:	465b      	mov	r3, fp
 800be8e:	4622      	mov	r2, r4
 800be90:	4629      	mov	r1, r5
 800be92:	4630      	mov	r0, r6
 800be94:	f7ff ff93 	bl	800bdbe <__sfputs_r>
 800be98:	3001      	adds	r0, #1
 800be9a:	f000 80aa 	beq.w	800bff2 <_vfiprintf_r+0x20e>
 800be9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bea0:	445a      	add	r2, fp
 800bea2:	9209      	str	r2, [sp, #36]	; 0x24
 800bea4:	f89a 3000 	ldrb.w	r3, [sl]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f000 80a2 	beq.w	800bff2 <_vfiprintf_r+0x20e>
 800beae:	2300      	movs	r3, #0
 800beb0:	f04f 32ff 	mov.w	r2, #4294967295
 800beb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800beb8:	f10a 0a01 	add.w	sl, sl, #1
 800bebc:	9304      	str	r3, [sp, #16]
 800bebe:	9307      	str	r3, [sp, #28]
 800bec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bec4:	931a      	str	r3, [sp, #104]	; 0x68
 800bec6:	4654      	mov	r4, sl
 800bec8:	2205      	movs	r2, #5
 800beca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bece:	4858      	ldr	r0, [pc, #352]	; (800c030 <_vfiprintf_r+0x24c>)
 800bed0:	f7f4 f986 	bl	80001e0 <memchr>
 800bed4:	9a04      	ldr	r2, [sp, #16]
 800bed6:	b9d8      	cbnz	r0, 800bf10 <_vfiprintf_r+0x12c>
 800bed8:	06d1      	lsls	r1, r2, #27
 800beda:	bf44      	itt	mi
 800bedc:	2320      	movmi	r3, #32
 800bede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bee2:	0713      	lsls	r3, r2, #28
 800bee4:	bf44      	itt	mi
 800bee6:	232b      	movmi	r3, #43	; 0x2b
 800bee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beec:	f89a 3000 	ldrb.w	r3, [sl]
 800bef0:	2b2a      	cmp	r3, #42	; 0x2a
 800bef2:	d015      	beq.n	800bf20 <_vfiprintf_r+0x13c>
 800bef4:	9a07      	ldr	r2, [sp, #28]
 800bef6:	4654      	mov	r4, sl
 800bef8:	2000      	movs	r0, #0
 800befa:	f04f 0c0a 	mov.w	ip, #10
 800befe:	4621      	mov	r1, r4
 800bf00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf04:	3b30      	subs	r3, #48	; 0x30
 800bf06:	2b09      	cmp	r3, #9
 800bf08:	d94e      	bls.n	800bfa8 <_vfiprintf_r+0x1c4>
 800bf0a:	b1b0      	cbz	r0, 800bf3a <_vfiprintf_r+0x156>
 800bf0c:	9207      	str	r2, [sp, #28]
 800bf0e:	e014      	b.n	800bf3a <_vfiprintf_r+0x156>
 800bf10:	eba0 0308 	sub.w	r3, r0, r8
 800bf14:	fa09 f303 	lsl.w	r3, r9, r3
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	9304      	str	r3, [sp, #16]
 800bf1c:	46a2      	mov	sl, r4
 800bf1e:	e7d2      	b.n	800bec6 <_vfiprintf_r+0xe2>
 800bf20:	9b03      	ldr	r3, [sp, #12]
 800bf22:	1d19      	adds	r1, r3, #4
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	9103      	str	r1, [sp, #12]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	bfbb      	ittet	lt
 800bf2c:	425b      	neglt	r3, r3
 800bf2e:	f042 0202 	orrlt.w	r2, r2, #2
 800bf32:	9307      	strge	r3, [sp, #28]
 800bf34:	9307      	strlt	r3, [sp, #28]
 800bf36:	bfb8      	it	lt
 800bf38:	9204      	strlt	r2, [sp, #16]
 800bf3a:	7823      	ldrb	r3, [r4, #0]
 800bf3c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf3e:	d10c      	bne.n	800bf5a <_vfiprintf_r+0x176>
 800bf40:	7863      	ldrb	r3, [r4, #1]
 800bf42:	2b2a      	cmp	r3, #42	; 0x2a
 800bf44:	d135      	bne.n	800bfb2 <_vfiprintf_r+0x1ce>
 800bf46:	9b03      	ldr	r3, [sp, #12]
 800bf48:	1d1a      	adds	r2, r3, #4
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	9203      	str	r2, [sp, #12]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	bfb8      	it	lt
 800bf52:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf56:	3402      	adds	r4, #2
 800bf58:	9305      	str	r3, [sp, #20]
 800bf5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c040 <_vfiprintf_r+0x25c>
 800bf5e:	7821      	ldrb	r1, [r4, #0]
 800bf60:	2203      	movs	r2, #3
 800bf62:	4650      	mov	r0, sl
 800bf64:	f7f4 f93c 	bl	80001e0 <memchr>
 800bf68:	b140      	cbz	r0, 800bf7c <_vfiprintf_r+0x198>
 800bf6a:	2340      	movs	r3, #64	; 0x40
 800bf6c:	eba0 000a 	sub.w	r0, r0, sl
 800bf70:	fa03 f000 	lsl.w	r0, r3, r0
 800bf74:	9b04      	ldr	r3, [sp, #16]
 800bf76:	4303      	orrs	r3, r0
 800bf78:	3401      	adds	r4, #1
 800bf7a:	9304      	str	r3, [sp, #16]
 800bf7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf80:	482c      	ldr	r0, [pc, #176]	; (800c034 <_vfiprintf_r+0x250>)
 800bf82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf86:	2206      	movs	r2, #6
 800bf88:	f7f4 f92a 	bl	80001e0 <memchr>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	d03f      	beq.n	800c010 <_vfiprintf_r+0x22c>
 800bf90:	4b29      	ldr	r3, [pc, #164]	; (800c038 <_vfiprintf_r+0x254>)
 800bf92:	bb1b      	cbnz	r3, 800bfdc <_vfiprintf_r+0x1f8>
 800bf94:	9b03      	ldr	r3, [sp, #12]
 800bf96:	3307      	adds	r3, #7
 800bf98:	f023 0307 	bic.w	r3, r3, #7
 800bf9c:	3308      	adds	r3, #8
 800bf9e:	9303      	str	r3, [sp, #12]
 800bfa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfa2:	443b      	add	r3, r7
 800bfa4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa6:	e767      	b.n	800be78 <_vfiprintf_r+0x94>
 800bfa8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfac:	460c      	mov	r4, r1
 800bfae:	2001      	movs	r0, #1
 800bfb0:	e7a5      	b.n	800befe <_vfiprintf_r+0x11a>
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	3401      	adds	r4, #1
 800bfb6:	9305      	str	r3, [sp, #20]
 800bfb8:	4619      	mov	r1, r3
 800bfba:	f04f 0c0a 	mov.w	ip, #10
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfc4:	3a30      	subs	r2, #48	; 0x30
 800bfc6:	2a09      	cmp	r2, #9
 800bfc8:	d903      	bls.n	800bfd2 <_vfiprintf_r+0x1ee>
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d0c5      	beq.n	800bf5a <_vfiprintf_r+0x176>
 800bfce:	9105      	str	r1, [sp, #20]
 800bfd0:	e7c3      	b.n	800bf5a <_vfiprintf_r+0x176>
 800bfd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e7f0      	b.n	800bfbe <_vfiprintf_r+0x1da>
 800bfdc:	ab03      	add	r3, sp, #12
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	462a      	mov	r2, r5
 800bfe2:	4b16      	ldr	r3, [pc, #88]	; (800c03c <_vfiprintf_r+0x258>)
 800bfe4:	a904      	add	r1, sp, #16
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	f7fd fb62 	bl	80096b0 <_printf_float>
 800bfec:	4607      	mov	r7, r0
 800bfee:	1c78      	adds	r0, r7, #1
 800bff0:	d1d6      	bne.n	800bfa0 <_vfiprintf_r+0x1bc>
 800bff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bff4:	07d9      	lsls	r1, r3, #31
 800bff6:	d405      	bmi.n	800c004 <_vfiprintf_r+0x220>
 800bff8:	89ab      	ldrh	r3, [r5, #12]
 800bffa:	059a      	lsls	r2, r3, #22
 800bffc:	d402      	bmi.n	800c004 <_vfiprintf_r+0x220>
 800bffe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c000:	f7ff f8c4 	bl	800b18c <__retarget_lock_release_recursive>
 800c004:	89ab      	ldrh	r3, [r5, #12]
 800c006:	065b      	lsls	r3, r3, #25
 800c008:	f53f af12 	bmi.w	800be30 <_vfiprintf_r+0x4c>
 800c00c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c00e:	e711      	b.n	800be34 <_vfiprintf_r+0x50>
 800c010:	ab03      	add	r3, sp, #12
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	462a      	mov	r2, r5
 800c016:	4b09      	ldr	r3, [pc, #36]	; (800c03c <_vfiprintf_r+0x258>)
 800c018:	a904      	add	r1, sp, #16
 800c01a:	4630      	mov	r0, r6
 800c01c:	f7fd fdec 	bl	8009bf8 <_printf_i>
 800c020:	e7e4      	b.n	800bfec <_vfiprintf_r+0x208>
 800c022:	bf00      	nop
 800c024:	0800e0dc 	.word	0x0800e0dc
 800c028:	0800e0fc 	.word	0x0800e0fc
 800c02c:	0800e0bc 	.word	0x0800e0bc
 800c030:	0800e27c 	.word	0x0800e27c
 800c034:	0800e286 	.word	0x0800e286
 800c038:	080096b1 	.word	0x080096b1
 800c03c:	0800bdbf 	.word	0x0800bdbf
 800c040:	0800e282 	.word	0x0800e282

0800c044 <_sbrk_r>:
 800c044:	b538      	push	{r3, r4, r5, lr}
 800c046:	4d06      	ldr	r5, [pc, #24]	; (800c060 <_sbrk_r+0x1c>)
 800c048:	2300      	movs	r3, #0
 800c04a:	4604      	mov	r4, r0
 800c04c:	4608      	mov	r0, r1
 800c04e:	602b      	str	r3, [r5, #0]
 800c050:	f7f7 fef8 	bl	8003e44 <_sbrk>
 800c054:	1c43      	adds	r3, r0, #1
 800c056:	d102      	bne.n	800c05e <_sbrk_r+0x1a>
 800c058:	682b      	ldr	r3, [r5, #0]
 800c05a:	b103      	cbz	r3, 800c05e <_sbrk_r+0x1a>
 800c05c:	6023      	str	r3, [r4, #0]
 800c05e:	bd38      	pop	{r3, r4, r5, pc}
 800c060:	20000b44 	.word	0x20000b44

0800c064 <__sread>:
 800c064:	b510      	push	{r4, lr}
 800c066:	460c      	mov	r4, r1
 800c068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c06c:	f000 f922 	bl	800c2b4 <_read_r>
 800c070:	2800      	cmp	r0, #0
 800c072:	bfab      	itete	ge
 800c074:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c076:	89a3      	ldrhlt	r3, [r4, #12]
 800c078:	181b      	addge	r3, r3, r0
 800c07a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c07e:	bfac      	ite	ge
 800c080:	6563      	strge	r3, [r4, #84]	; 0x54
 800c082:	81a3      	strhlt	r3, [r4, #12]
 800c084:	bd10      	pop	{r4, pc}

0800c086 <__swrite>:
 800c086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c08a:	461f      	mov	r7, r3
 800c08c:	898b      	ldrh	r3, [r1, #12]
 800c08e:	05db      	lsls	r3, r3, #23
 800c090:	4605      	mov	r5, r0
 800c092:	460c      	mov	r4, r1
 800c094:	4616      	mov	r6, r2
 800c096:	d505      	bpl.n	800c0a4 <__swrite+0x1e>
 800c098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c09c:	2302      	movs	r3, #2
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f000 f898 	bl	800c1d4 <_lseek_r>
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0ae:	81a3      	strh	r3, [r4, #12]
 800c0b0:	4632      	mov	r2, r6
 800c0b2:	463b      	mov	r3, r7
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ba:	f000 b817 	b.w	800c0ec <_write_r>

0800c0be <__sseek>:
 800c0be:	b510      	push	{r4, lr}
 800c0c0:	460c      	mov	r4, r1
 800c0c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0c6:	f000 f885 	bl	800c1d4 <_lseek_r>
 800c0ca:	1c43      	adds	r3, r0, #1
 800c0cc:	89a3      	ldrh	r3, [r4, #12]
 800c0ce:	bf15      	itete	ne
 800c0d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0da:	81a3      	strheq	r3, [r4, #12]
 800c0dc:	bf18      	it	ne
 800c0de:	81a3      	strhne	r3, [r4, #12]
 800c0e0:	bd10      	pop	{r4, pc}

0800c0e2 <__sclose>:
 800c0e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0e6:	f000 b831 	b.w	800c14c <_close_r>
	...

0800c0ec <_write_r>:
 800c0ec:	b538      	push	{r3, r4, r5, lr}
 800c0ee:	4d07      	ldr	r5, [pc, #28]	; (800c10c <_write_r+0x20>)
 800c0f0:	4604      	mov	r4, r0
 800c0f2:	4608      	mov	r0, r1
 800c0f4:	4611      	mov	r1, r2
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	602a      	str	r2, [r5, #0]
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	f7f7 fe51 	bl	8003da2 <_write>
 800c100:	1c43      	adds	r3, r0, #1
 800c102:	d102      	bne.n	800c10a <_write_r+0x1e>
 800c104:	682b      	ldr	r3, [r5, #0]
 800c106:	b103      	cbz	r3, 800c10a <_write_r+0x1e>
 800c108:	6023      	str	r3, [r4, #0]
 800c10a:	bd38      	pop	{r3, r4, r5, pc}
 800c10c:	20000b44 	.word	0x20000b44

0800c110 <__assert_func>:
 800c110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c112:	4614      	mov	r4, r2
 800c114:	461a      	mov	r2, r3
 800c116:	4b09      	ldr	r3, [pc, #36]	; (800c13c <__assert_func+0x2c>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4605      	mov	r5, r0
 800c11c:	68d8      	ldr	r0, [r3, #12]
 800c11e:	b14c      	cbz	r4, 800c134 <__assert_func+0x24>
 800c120:	4b07      	ldr	r3, [pc, #28]	; (800c140 <__assert_func+0x30>)
 800c122:	9100      	str	r1, [sp, #0]
 800c124:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c128:	4906      	ldr	r1, [pc, #24]	; (800c144 <__assert_func+0x34>)
 800c12a:	462b      	mov	r3, r5
 800c12c:	f000 f81e 	bl	800c16c <fiprintf>
 800c130:	f000 f8df 	bl	800c2f2 <abort>
 800c134:	4b04      	ldr	r3, [pc, #16]	; (800c148 <__assert_func+0x38>)
 800c136:	461c      	mov	r4, r3
 800c138:	e7f3      	b.n	800c122 <__assert_func+0x12>
 800c13a:	bf00      	nop
 800c13c:	20000018 	.word	0x20000018
 800c140:	0800e28d 	.word	0x0800e28d
 800c144:	0800e29a 	.word	0x0800e29a
 800c148:	0800e2c8 	.word	0x0800e2c8

0800c14c <_close_r>:
 800c14c:	b538      	push	{r3, r4, r5, lr}
 800c14e:	4d06      	ldr	r5, [pc, #24]	; (800c168 <_close_r+0x1c>)
 800c150:	2300      	movs	r3, #0
 800c152:	4604      	mov	r4, r0
 800c154:	4608      	mov	r0, r1
 800c156:	602b      	str	r3, [r5, #0]
 800c158:	f7f7 fe3f 	bl	8003dda <_close>
 800c15c:	1c43      	adds	r3, r0, #1
 800c15e:	d102      	bne.n	800c166 <_close_r+0x1a>
 800c160:	682b      	ldr	r3, [r5, #0]
 800c162:	b103      	cbz	r3, 800c166 <_close_r+0x1a>
 800c164:	6023      	str	r3, [r4, #0]
 800c166:	bd38      	pop	{r3, r4, r5, pc}
 800c168:	20000b44 	.word	0x20000b44

0800c16c <fiprintf>:
 800c16c:	b40e      	push	{r1, r2, r3}
 800c16e:	b503      	push	{r0, r1, lr}
 800c170:	4601      	mov	r1, r0
 800c172:	ab03      	add	r3, sp, #12
 800c174:	4805      	ldr	r0, [pc, #20]	; (800c18c <fiprintf+0x20>)
 800c176:	f853 2b04 	ldr.w	r2, [r3], #4
 800c17a:	6800      	ldr	r0, [r0, #0]
 800c17c:	9301      	str	r3, [sp, #4]
 800c17e:	f7ff fe31 	bl	800bde4 <_vfiprintf_r>
 800c182:	b002      	add	sp, #8
 800c184:	f85d eb04 	ldr.w	lr, [sp], #4
 800c188:	b003      	add	sp, #12
 800c18a:	4770      	bx	lr
 800c18c:	20000018 	.word	0x20000018

0800c190 <_fstat_r>:
 800c190:	b538      	push	{r3, r4, r5, lr}
 800c192:	4d07      	ldr	r5, [pc, #28]	; (800c1b0 <_fstat_r+0x20>)
 800c194:	2300      	movs	r3, #0
 800c196:	4604      	mov	r4, r0
 800c198:	4608      	mov	r0, r1
 800c19a:	4611      	mov	r1, r2
 800c19c:	602b      	str	r3, [r5, #0]
 800c19e:	f7f7 fe28 	bl	8003df2 <_fstat>
 800c1a2:	1c43      	adds	r3, r0, #1
 800c1a4:	d102      	bne.n	800c1ac <_fstat_r+0x1c>
 800c1a6:	682b      	ldr	r3, [r5, #0]
 800c1a8:	b103      	cbz	r3, 800c1ac <_fstat_r+0x1c>
 800c1aa:	6023      	str	r3, [r4, #0]
 800c1ac:	bd38      	pop	{r3, r4, r5, pc}
 800c1ae:	bf00      	nop
 800c1b0:	20000b44 	.word	0x20000b44

0800c1b4 <_isatty_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	4d06      	ldr	r5, [pc, #24]	; (800c1d0 <_isatty_r+0x1c>)
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	4608      	mov	r0, r1
 800c1be:	602b      	str	r3, [r5, #0]
 800c1c0:	f7f7 fe27 	bl	8003e12 <_isatty>
 800c1c4:	1c43      	adds	r3, r0, #1
 800c1c6:	d102      	bne.n	800c1ce <_isatty_r+0x1a>
 800c1c8:	682b      	ldr	r3, [r5, #0]
 800c1ca:	b103      	cbz	r3, 800c1ce <_isatty_r+0x1a>
 800c1cc:	6023      	str	r3, [r4, #0]
 800c1ce:	bd38      	pop	{r3, r4, r5, pc}
 800c1d0:	20000b44 	.word	0x20000b44

0800c1d4 <_lseek_r>:
 800c1d4:	b538      	push	{r3, r4, r5, lr}
 800c1d6:	4d07      	ldr	r5, [pc, #28]	; (800c1f4 <_lseek_r+0x20>)
 800c1d8:	4604      	mov	r4, r0
 800c1da:	4608      	mov	r0, r1
 800c1dc:	4611      	mov	r1, r2
 800c1de:	2200      	movs	r2, #0
 800c1e0:	602a      	str	r2, [r5, #0]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	f7f7 fe20 	bl	8003e28 <_lseek>
 800c1e8:	1c43      	adds	r3, r0, #1
 800c1ea:	d102      	bne.n	800c1f2 <_lseek_r+0x1e>
 800c1ec:	682b      	ldr	r3, [r5, #0]
 800c1ee:	b103      	cbz	r3, 800c1f2 <_lseek_r+0x1e>
 800c1f0:	6023      	str	r3, [r4, #0]
 800c1f2:	bd38      	pop	{r3, r4, r5, pc}
 800c1f4:	20000b44 	.word	0x20000b44

0800c1f8 <__ascii_mbtowc>:
 800c1f8:	b082      	sub	sp, #8
 800c1fa:	b901      	cbnz	r1, 800c1fe <__ascii_mbtowc+0x6>
 800c1fc:	a901      	add	r1, sp, #4
 800c1fe:	b142      	cbz	r2, 800c212 <__ascii_mbtowc+0x1a>
 800c200:	b14b      	cbz	r3, 800c216 <__ascii_mbtowc+0x1e>
 800c202:	7813      	ldrb	r3, [r2, #0]
 800c204:	600b      	str	r3, [r1, #0]
 800c206:	7812      	ldrb	r2, [r2, #0]
 800c208:	1e10      	subs	r0, r2, #0
 800c20a:	bf18      	it	ne
 800c20c:	2001      	movne	r0, #1
 800c20e:	b002      	add	sp, #8
 800c210:	4770      	bx	lr
 800c212:	4610      	mov	r0, r2
 800c214:	e7fb      	b.n	800c20e <__ascii_mbtowc+0x16>
 800c216:	f06f 0001 	mvn.w	r0, #1
 800c21a:	e7f8      	b.n	800c20e <__ascii_mbtowc+0x16>

0800c21c <memmove>:
 800c21c:	4288      	cmp	r0, r1
 800c21e:	b510      	push	{r4, lr}
 800c220:	eb01 0402 	add.w	r4, r1, r2
 800c224:	d902      	bls.n	800c22c <memmove+0x10>
 800c226:	4284      	cmp	r4, r0
 800c228:	4623      	mov	r3, r4
 800c22a:	d807      	bhi.n	800c23c <memmove+0x20>
 800c22c:	1e43      	subs	r3, r0, #1
 800c22e:	42a1      	cmp	r1, r4
 800c230:	d008      	beq.n	800c244 <memmove+0x28>
 800c232:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c236:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c23a:	e7f8      	b.n	800c22e <memmove+0x12>
 800c23c:	4402      	add	r2, r0
 800c23e:	4601      	mov	r1, r0
 800c240:	428a      	cmp	r2, r1
 800c242:	d100      	bne.n	800c246 <memmove+0x2a>
 800c244:	bd10      	pop	{r4, pc}
 800c246:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c24a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c24e:	e7f7      	b.n	800c240 <memmove+0x24>

0800c250 <__malloc_lock>:
 800c250:	4801      	ldr	r0, [pc, #4]	; (800c258 <__malloc_lock+0x8>)
 800c252:	f7fe bf9a 	b.w	800b18a <__retarget_lock_acquire_recursive>
 800c256:	bf00      	nop
 800c258:	20000b3c 	.word	0x20000b3c

0800c25c <__malloc_unlock>:
 800c25c:	4801      	ldr	r0, [pc, #4]	; (800c264 <__malloc_unlock+0x8>)
 800c25e:	f7fe bf95 	b.w	800b18c <__retarget_lock_release_recursive>
 800c262:	bf00      	nop
 800c264:	20000b3c 	.word	0x20000b3c

0800c268 <_realloc_r>:
 800c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26a:	4607      	mov	r7, r0
 800c26c:	4614      	mov	r4, r2
 800c26e:	460e      	mov	r6, r1
 800c270:	b921      	cbnz	r1, 800c27c <_realloc_r+0x14>
 800c272:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c276:	4611      	mov	r1, r2
 800c278:	f7ff bbd4 	b.w	800ba24 <_malloc_r>
 800c27c:	b922      	cbnz	r2, 800c288 <_realloc_r+0x20>
 800c27e:	f7ff fb81 	bl	800b984 <_free_r>
 800c282:	4625      	mov	r5, r4
 800c284:	4628      	mov	r0, r5
 800c286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c288:	f000 f83a 	bl	800c300 <_malloc_usable_size_r>
 800c28c:	42a0      	cmp	r0, r4
 800c28e:	d20f      	bcs.n	800c2b0 <_realloc_r+0x48>
 800c290:	4621      	mov	r1, r4
 800c292:	4638      	mov	r0, r7
 800c294:	f7ff fbc6 	bl	800ba24 <_malloc_r>
 800c298:	4605      	mov	r5, r0
 800c29a:	2800      	cmp	r0, #0
 800c29c:	d0f2      	beq.n	800c284 <_realloc_r+0x1c>
 800c29e:	4631      	mov	r1, r6
 800c2a0:	4622      	mov	r2, r4
 800c2a2:	f7fd f94f 	bl	8009544 <memcpy>
 800c2a6:	4631      	mov	r1, r6
 800c2a8:	4638      	mov	r0, r7
 800c2aa:	f7ff fb6b 	bl	800b984 <_free_r>
 800c2ae:	e7e9      	b.n	800c284 <_realloc_r+0x1c>
 800c2b0:	4635      	mov	r5, r6
 800c2b2:	e7e7      	b.n	800c284 <_realloc_r+0x1c>

0800c2b4 <_read_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	4d07      	ldr	r5, [pc, #28]	; (800c2d4 <_read_r+0x20>)
 800c2b8:	4604      	mov	r4, r0
 800c2ba:	4608      	mov	r0, r1
 800c2bc:	4611      	mov	r1, r2
 800c2be:	2200      	movs	r2, #0
 800c2c0:	602a      	str	r2, [r5, #0]
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	f7f7 fd50 	bl	8003d68 <_read>
 800c2c8:	1c43      	adds	r3, r0, #1
 800c2ca:	d102      	bne.n	800c2d2 <_read_r+0x1e>
 800c2cc:	682b      	ldr	r3, [r5, #0]
 800c2ce:	b103      	cbz	r3, 800c2d2 <_read_r+0x1e>
 800c2d0:	6023      	str	r3, [r4, #0]
 800c2d2:	bd38      	pop	{r3, r4, r5, pc}
 800c2d4:	20000b44 	.word	0x20000b44

0800c2d8 <__ascii_wctomb>:
 800c2d8:	b149      	cbz	r1, 800c2ee <__ascii_wctomb+0x16>
 800c2da:	2aff      	cmp	r2, #255	; 0xff
 800c2dc:	bf85      	ittet	hi
 800c2de:	238a      	movhi	r3, #138	; 0x8a
 800c2e0:	6003      	strhi	r3, [r0, #0]
 800c2e2:	700a      	strbls	r2, [r1, #0]
 800c2e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c2e8:	bf98      	it	ls
 800c2ea:	2001      	movls	r0, #1
 800c2ec:	4770      	bx	lr
 800c2ee:	4608      	mov	r0, r1
 800c2f0:	4770      	bx	lr

0800c2f2 <abort>:
 800c2f2:	b508      	push	{r3, lr}
 800c2f4:	2006      	movs	r0, #6
 800c2f6:	f000 f833 	bl	800c360 <raise>
 800c2fa:	2001      	movs	r0, #1
 800c2fc:	f7f7 fd2a 	bl	8003d54 <_exit>

0800c300 <_malloc_usable_size_r>:
 800c300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c304:	1f18      	subs	r0, r3, #4
 800c306:	2b00      	cmp	r3, #0
 800c308:	bfbc      	itt	lt
 800c30a:	580b      	ldrlt	r3, [r1, r0]
 800c30c:	18c0      	addlt	r0, r0, r3
 800c30e:	4770      	bx	lr

0800c310 <_raise_r>:
 800c310:	291f      	cmp	r1, #31
 800c312:	b538      	push	{r3, r4, r5, lr}
 800c314:	4604      	mov	r4, r0
 800c316:	460d      	mov	r5, r1
 800c318:	d904      	bls.n	800c324 <_raise_r+0x14>
 800c31a:	2316      	movs	r3, #22
 800c31c:	6003      	str	r3, [r0, #0]
 800c31e:	f04f 30ff 	mov.w	r0, #4294967295
 800c322:	bd38      	pop	{r3, r4, r5, pc}
 800c324:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c326:	b112      	cbz	r2, 800c32e <_raise_r+0x1e>
 800c328:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c32c:	b94b      	cbnz	r3, 800c342 <_raise_r+0x32>
 800c32e:	4620      	mov	r0, r4
 800c330:	f000 f830 	bl	800c394 <_getpid_r>
 800c334:	462a      	mov	r2, r5
 800c336:	4601      	mov	r1, r0
 800c338:	4620      	mov	r0, r4
 800c33a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c33e:	f000 b817 	b.w	800c370 <_kill_r>
 800c342:	2b01      	cmp	r3, #1
 800c344:	d00a      	beq.n	800c35c <_raise_r+0x4c>
 800c346:	1c59      	adds	r1, r3, #1
 800c348:	d103      	bne.n	800c352 <_raise_r+0x42>
 800c34a:	2316      	movs	r3, #22
 800c34c:	6003      	str	r3, [r0, #0]
 800c34e:	2001      	movs	r0, #1
 800c350:	e7e7      	b.n	800c322 <_raise_r+0x12>
 800c352:	2400      	movs	r4, #0
 800c354:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c358:	4628      	mov	r0, r5
 800c35a:	4798      	blx	r3
 800c35c:	2000      	movs	r0, #0
 800c35e:	e7e0      	b.n	800c322 <_raise_r+0x12>

0800c360 <raise>:
 800c360:	4b02      	ldr	r3, [pc, #8]	; (800c36c <raise+0xc>)
 800c362:	4601      	mov	r1, r0
 800c364:	6818      	ldr	r0, [r3, #0]
 800c366:	f7ff bfd3 	b.w	800c310 <_raise_r>
 800c36a:	bf00      	nop
 800c36c:	20000018 	.word	0x20000018

0800c370 <_kill_r>:
 800c370:	b538      	push	{r3, r4, r5, lr}
 800c372:	4d07      	ldr	r5, [pc, #28]	; (800c390 <_kill_r+0x20>)
 800c374:	2300      	movs	r3, #0
 800c376:	4604      	mov	r4, r0
 800c378:	4608      	mov	r0, r1
 800c37a:	4611      	mov	r1, r2
 800c37c:	602b      	str	r3, [r5, #0]
 800c37e:	f7f7 fcd9 	bl	8003d34 <_kill>
 800c382:	1c43      	adds	r3, r0, #1
 800c384:	d102      	bne.n	800c38c <_kill_r+0x1c>
 800c386:	682b      	ldr	r3, [r5, #0]
 800c388:	b103      	cbz	r3, 800c38c <_kill_r+0x1c>
 800c38a:	6023      	str	r3, [r4, #0]
 800c38c:	bd38      	pop	{r3, r4, r5, pc}
 800c38e:	bf00      	nop
 800c390:	20000b44 	.word	0x20000b44

0800c394 <_getpid_r>:
 800c394:	f7f7 bcc6 	b.w	8003d24 <_getpid>

0800c398 <cos>:
 800c398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c39a:	ec53 2b10 	vmov	r2, r3, d0
 800c39e:	4824      	ldr	r0, [pc, #144]	; (800c430 <cos+0x98>)
 800c3a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c3a4:	4281      	cmp	r1, r0
 800c3a6:	dc06      	bgt.n	800c3b6 <cos+0x1e>
 800c3a8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800c428 <cos+0x90>
 800c3ac:	f000 fc44 	bl	800cc38 <__kernel_cos>
 800c3b0:	ec51 0b10 	vmov	r0, r1, d0
 800c3b4:	e007      	b.n	800c3c6 <cos+0x2e>
 800c3b6:	481f      	ldr	r0, [pc, #124]	; (800c434 <cos+0x9c>)
 800c3b8:	4281      	cmp	r1, r0
 800c3ba:	dd09      	ble.n	800c3d0 <cos+0x38>
 800c3bc:	ee10 0a10 	vmov	r0, s0
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	f7f3 ff61 	bl	8000288 <__aeabi_dsub>
 800c3c6:	ec41 0b10 	vmov	d0, r0, r1
 800c3ca:	b005      	add	sp, #20
 800c3cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800c3d0:	4668      	mov	r0, sp
 800c3d2:	f000 f96d 	bl	800c6b0 <__ieee754_rem_pio2>
 800c3d6:	f000 0003 	and.w	r0, r0, #3
 800c3da:	2801      	cmp	r0, #1
 800c3dc:	d007      	beq.n	800c3ee <cos+0x56>
 800c3de:	2802      	cmp	r0, #2
 800c3e0:	d012      	beq.n	800c408 <cos+0x70>
 800c3e2:	b9c0      	cbnz	r0, 800c416 <cos+0x7e>
 800c3e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3e8:	ed9d 0b00 	vldr	d0, [sp]
 800c3ec:	e7de      	b.n	800c3ac <cos+0x14>
 800c3ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3f2:	ed9d 0b00 	vldr	d0, [sp]
 800c3f6:	f001 f827 	bl	800d448 <__kernel_sin>
 800c3fa:	ec53 2b10 	vmov	r2, r3, d0
 800c3fe:	ee10 0a10 	vmov	r0, s0
 800c402:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c406:	e7de      	b.n	800c3c6 <cos+0x2e>
 800c408:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c40c:	ed9d 0b00 	vldr	d0, [sp]
 800c410:	f000 fc12 	bl	800cc38 <__kernel_cos>
 800c414:	e7f1      	b.n	800c3fa <cos+0x62>
 800c416:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c41a:	ed9d 0b00 	vldr	d0, [sp]
 800c41e:	2001      	movs	r0, #1
 800c420:	f001 f812 	bl	800d448 <__kernel_sin>
 800c424:	e7c4      	b.n	800c3b0 <cos+0x18>
 800c426:	bf00      	nop
	...
 800c430:	3fe921fb 	.word	0x3fe921fb
 800c434:	7fefffff 	.word	0x7fefffff

0800c438 <fabs>:
 800c438:	ec51 0b10 	vmov	r0, r1, d0
 800c43c:	ee10 2a10 	vmov	r2, s0
 800c440:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c444:	ec43 2b10 	vmov	d0, r2, r3
 800c448:	4770      	bx	lr
 800c44a:	0000      	movs	r0, r0
 800c44c:	0000      	movs	r0, r0
	...

0800c450 <floor>:
 800c450:	ec51 0b10 	vmov	r0, r1, d0
 800c454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c458:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c45c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c460:	2e13      	cmp	r6, #19
 800c462:	ee10 5a10 	vmov	r5, s0
 800c466:	ee10 8a10 	vmov	r8, s0
 800c46a:	460c      	mov	r4, r1
 800c46c:	dc32      	bgt.n	800c4d4 <floor+0x84>
 800c46e:	2e00      	cmp	r6, #0
 800c470:	da14      	bge.n	800c49c <floor+0x4c>
 800c472:	a333      	add	r3, pc, #204	; (adr r3, 800c540 <floor+0xf0>)
 800c474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c478:	f7f3 ff08 	bl	800028c <__adddf3>
 800c47c:	2200      	movs	r2, #0
 800c47e:	2300      	movs	r3, #0
 800c480:	f7f4 fb4a 	bl	8000b18 <__aeabi_dcmpgt>
 800c484:	b138      	cbz	r0, 800c496 <floor+0x46>
 800c486:	2c00      	cmp	r4, #0
 800c488:	da57      	bge.n	800c53a <floor+0xea>
 800c48a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c48e:	431d      	orrs	r5, r3
 800c490:	d001      	beq.n	800c496 <floor+0x46>
 800c492:	4c2d      	ldr	r4, [pc, #180]	; (800c548 <floor+0xf8>)
 800c494:	2500      	movs	r5, #0
 800c496:	4621      	mov	r1, r4
 800c498:	4628      	mov	r0, r5
 800c49a:	e025      	b.n	800c4e8 <floor+0x98>
 800c49c:	4f2b      	ldr	r7, [pc, #172]	; (800c54c <floor+0xfc>)
 800c49e:	4137      	asrs	r7, r6
 800c4a0:	ea01 0307 	and.w	r3, r1, r7
 800c4a4:	4303      	orrs	r3, r0
 800c4a6:	d01f      	beq.n	800c4e8 <floor+0x98>
 800c4a8:	a325      	add	r3, pc, #148	; (adr r3, 800c540 <floor+0xf0>)
 800c4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ae:	f7f3 feed 	bl	800028c <__adddf3>
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	f7f4 fb2f 	bl	8000b18 <__aeabi_dcmpgt>
 800c4ba:	2800      	cmp	r0, #0
 800c4bc:	d0eb      	beq.n	800c496 <floor+0x46>
 800c4be:	2c00      	cmp	r4, #0
 800c4c0:	bfbe      	ittt	lt
 800c4c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c4c6:	fa43 f606 	asrlt.w	r6, r3, r6
 800c4ca:	19a4      	addlt	r4, r4, r6
 800c4cc:	ea24 0407 	bic.w	r4, r4, r7
 800c4d0:	2500      	movs	r5, #0
 800c4d2:	e7e0      	b.n	800c496 <floor+0x46>
 800c4d4:	2e33      	cmp	r6, #51	; 0x33
 800c4d6:	dd0b      	ble.n	800c4f0 <floor+0xa0>
 800c4d8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c4dc:	d104      	bne.n	800c4e8 <floor+0x98>
 800c4de:	ee10 2a10 	vmov	r2, s0
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	f7f3 fed2 	bl	800028c <__adddf3>
 800c4e8:	ec41 0b10 	vmov	d0, r0, r1
 800c4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4f0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4f8:	fa23 f707 	lsr.w	r7, r3, r7
 800c4fc:	4207      	tst	r7, r0
 800c4fe:	d0f3      	beq.n	800c4e8 <floor+0x98>
 800c500:	a30f      	add	r3, pc, #60	; (adr r3, 800c540 <floor+0xf0>)
 800c502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c506:	f7f3 fec1 	bl	800028c <__adddf3>
 800c50a:	2200      	movs	r2, #0
 800c50c:	2300      	movs	r3, #0
 800c50e:	f7f4 fb03 	bl	8000b18 <__aeabi_dcmpgt>
 800c512:	2800      	cmp	r0, #0
 800c514:	d0bf      	beq.n	800c496 <floor+0x46>
 800c516:	2c00      	cmp	r4, #0
 800c518:	da02      	bge.n	800c520 <floor+0xd0>
 800c51a:	2e14      	cmp	r6, #20
 800c51c:	d103      	bne.n	800c526 <floor+0xd6>
 800c51e:	3401      	adds	r4, #1
 800c520:	ea25 0507 	bic.w	r5, r5, r7
 800c524:	e7b7      	b.n	800c496 <floor+0x46>
 800c526:	2301      	movs	r3, #1
 800c528:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c52c:	fa03 f606 	lsl.w	r6, r3, r6
 800c530:	4435      	add	r5, r6
 800c532:	4545      	cmp	r5, r8
 800c534:	bf38      	it	cc
 800c536:	18e4      	addcc	r4, r4, r3
 800c538:	e7f2      	b.n	800c520 <floor+0xd0>
 800c53a:	2500      	movs	r5, #0
 800c53c:	462c      	mov	r4, r5
 800c53e:	e7aa      	b.n	800c496 <floor+0x46>
 800c540:	8800759c 	.word	0x8800759c
 800c544:	7e37e43c 	.word	0x7e37e43c
 800c548:	bff00000 	.word	0xbff00000
 800c54c:	000fffff 	.word	0x000fffff

0800c550 <sin>:
 800c550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c552:	ec53 2b10 	vmov	r2, r3, d0
 800c556:	4826      	ldr	r0, [pc, #152]	; (800c5f0 <sin+0xa0>)
 800c558:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c55c:	4281      	cmp	r1, r0
 800c55e:	dc07      	bgt.n	800c570 <sin+0x20>
 800c560:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c5e8 <sin+0x98>
 800c564:	2000      	movs	r0, #0
 800c566:	f000 ff6f 	bl	800d448 <__kernel_sin>
 800c56a:	ec51 0b10 	vmov	r0, r1, d0
 800c56e:	e007      	b.n	800c580 <sin+0x30>
 800c570:	4820      	ldr	r0, [pc, #128]	; (800c5f4 <sin+0xa4>)
 800c572:	4281      	cmp	r1, r0
 800c574:	dd09      	ble.n	800c58a <sin+0x3a>
 800c576:	ee10 0a10 	vmov	r0, s0
 800c57a:	4619      	mov	r1, r3
 800c57c:	f7f3 fe84 	bl	8000288 <__aeabi_dsub>
 800c580:	ec41 0b10 	vmov	d0, r0, r1
 800c584:	b005      	add	sp, #20
 800c586:	f85d fb04 	ldr.w	pc, [sp], #4
 800c58a:	4668      	mov	r0, sp
 800c58c:	f000 f890 	bl	800c6b0 <__ieee754_rem_pio2>
 800c590:	f000 0003 	and.w	r0, r0, #3
 800c594:	2801      	cmp	r0, #1
 800c596:	d008      	beq.n	800c5aa <sin+0x5a>
 800c598:	2802      	cmp	r0, #2
 800c59a:	d00d      	beq.n	800c5b8 <sin+0x68>
 800c59c:	b9d0      	cbnz	r0, 800c5d4 <sin+0x84>
 800c59e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c5a2:	ed9d 0b00 	vldr	d0, [sp]
 800c5a6:	2001      	movs	r0, #1
 800c5a8:	e7dd      	b.n	800c566 <sin+0x16>
 800c5aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c5ae:	ed9d 0b00 	vldr	d0, [sp]
 800c5b2:	f000 fb41 	bl	800cc38 <__kernel_cos>
 800c5b6:	e7d8      	b.n	800c56a <sin+0x1a>
 800c5b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c5bc:	ed9d 0b00 	vldr	d0, [sp]
 800c5c0:	2001      	movs	r0, #1
 800c5c2:	f000 ff41 	bl	800d448 <__kernel_sin>
 800c5c6:	ec53 2b10 	vmov	r2, r3, d0
 800c5ca:	ee10 0a10 	vmov	r0, s0
 800c5ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c5d2:	e7d5      	b.n	800c580 <sin+0x30>
 800c5d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c5d8:	ed9d 0b00 	vldr	d0, [sp]
 800c5dc:	f000 fb2c 	bl	800cc38 <__kernel_cos>
 800c5e0:	e7f1      	b.n	800c5c6 <sin+0x76>
 800c5e2:	bf00      	nop
 800c5e4:	f3af 8000 	nop.w
	...
 800c5f0:	3fe921fb 	.word	0x3fe921fb
 800c5f4:	7fefffff 	.word	0x7fefffff

0800c5f8 <sqrt>:
 800c5f8:	b538      	push	{r3, r4, r5, lr}
 800c5fa:	ed2d 8b02 	vpush	{d8}
 800c5fe:	ec55 4b10 	vmov	r4, r5, d0
 800c602:	f000 fa5f 	bl	800cac4 <__ieee754_sqrt>
 800c606:	4b15      	ldr	r3, [pc, #84]	; (800c65c <sqrt+0x64>)
 800c608:	eeb0 8a40 	vmov.f32	s16, s0
 800c60c:	eef0 8a60 	vmov.f32	s17, s1
 800c610:	f993 3000 	ldrsb.w	r3, [r3]
 800c614:	3301      	adds	r3, #1
 800c616:	d019      	beq.n	800c64c <sqrt+0x54>
 800c618:	4622      	mov	r2, r4
 800c61a:	462b      	mov	r3, r5
 800c61c:	4620      	mov	r0, r4
 800c61e:	4629      	mov	r1, r5
 800c620:	f7f4 fa84 	bl	8000b2c <__aeabi_dcmpun>
 800c624:	b990      	cbnz	r0, 800c64c <sqrt+0x54>
 800c626:	2200      	movs	r2, #0
 800c628:	2300      	movs	r3, #0
 800c62a:	4620      	mov	r0, r4
 800c62c:	4629      	mov	r1, r5
 800c62e:	f7f4 fa55 	bl	8000adc <__aeabi_dcmplt>
 800c632:	b158      	cbz	r0, 800c64c <sqrt+0x54>
 800c634:	f7fc ff5c 	bl	80094f0 <__errno>
 800c638:	2321      	movs	r3, #33	; 0x21
 800c63a:	6003      	str	r3, [r0, #0]
 800c63c:	2200      	movs	r2, #0
 800c63e:	2300      	movs	r3, #0
 800c640:	4610      	mov	r0, r2
 800c642:	4619      	mov	r1, r3
 800c644:	f7f4 f902 	bl	800084c <__aeabi_ddiv>
 800c648:	ec41 0b18 	vmov	d8, r0, r1
 800c64c:	eeb0 0a48 	vmov.f32	s0, s16
 800c650:	eef0 0a68 	vmov.f32	s1, s17
 800c654:	ecbd 8b02 	vpop	{d8}
 800c658:	bd38      	pop	{r3, r4, r5, pc}
 800c65a:	bf00      	nop
 800c65c:	200001e8 	.word	0x200001e8

0800c660 <sqrtf>:
 800c660:	b508      	push	{r3, lr}
 800c662:	ed2d 8b02 	vpush	{d8}
 800c666:	eeb0 8a40 	vmov.f32	s16, s0
 800c66a:	f000 fadf 	bl	800cc2c <__ieee754_sqrtf>
 800c66e:	4b0d      	ldr	r3, [pc, #52]	; (800c6a4 <sqrtf+0x44>)
 800c670:	f993 3000 	ldrsb.w	r3, [r3]
 800c674:	3301      	adds	r3, #1
 800c676:	d011      	beq.n	800c69c <sqrtf+0x3c>
 800c678:	eeb4 8a48 	vcmp.f32	s16, s16
 800c67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c680:	d60c      	bvs.n	800c69c <sqrtf+0x3c>
 800c682:	eddf 8a09 	vldr	s17, [pc, #36]	; 800c6a8 <sqrtf+0x48>
 800c686:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c68e:	d505      	bpl.n	800c69c <sqrtf+0x3c>
 800c690:	f7fc ff2e 	bl	80094f0 <__errno>
 800c694:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c698:	2321      	movs	r3, #33	; 0x21
 800c69a:	6003      	str	r3, [r0, #0]
 800c69c:	ecbd 8b02 	vpop	{d8}
 800c6a0:	bd08      	pop	{r3, pc}
 800c6a2:	bf00      	nop
 800c6a4:	200001e8 	.word	0x200001e8
	...

0800c6b0 <__ieee754_rem_pio2>:
 800c6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b4:	ed2d 8b02 	vpush	{d8}
 800c6b8:	ec55 4b10 	vmov	r4, r5, d0
 800c6bc:	4bca      	ldr	r3, [pc, #808]	; (800c9e8 <__ieee754_rem_pio2+0x338>)
 800c6be:	b08b      	sub	sp, #44	; 0x2c
 800c6c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c6c4:	4598      	cmp	r8, r3
 800c6c6:	4682      	mov	sl, r0
 800c6c8:	9502      	str	r5, [sp, #8]
 800c6ca:	dc08      	bgt.n	800c6de <__ieee754_rem_pio2+0x2e>
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	ed80 0b00 	vstr	d0, [r0]
 800c6d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c6d8:	f04f 0b00 	mov.w	fp, #0
 800c6dc:	e028      	b.n	800c730 <__ieee754_rem_pio2+0x80>
 800c6de:	4bc3      	ldr	r3, [pc, #780]	; (800c9ec <__ieee754_rem_pio2+0x33c>)
 800c6e0:	4598      	cmp	r8, r3
 800c6e2:	dc78      	bgt.n	800c7d6 <__ieee754_rem_pio2+0x126>
 800c6e4:	9b02      	ldr	r3, [sp, #8]
 800c6e6:	4ec2      	ldr	r6, [pc, #776]	; (800c9f0 <__ieee754_rem_pio2+0x340>)
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	ee10 0a10 	vmov	r0, s0
 800c6ee:	a3b0      	add	r3, pc, #704	; (adr r3, 800c9b0 <__ieee754_rem_pio2+0x300>)
 800c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	dd39      	ble.n	800c76c <__ieee754_rem_pio2+0xbc>
 800c6f8:	f7f3 fdc6 	bl	8000288 <__aeabi_dsub>
 800c6fc:	45b0      	cmp	r8, r6
 800c6fe:	4604      	mov	r4, r0
 800c700:	460d      	mov	r5, r1
 800c702:	d01b      	beq.n	800c73c <__ieee754_rem_pio2+0x8c>
 800c704:	a3ac      	add	r3, pc, #688	; (adr r3, 800c9b8 <__ieee754_rem_pio2+0x308>)
 800c706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70a:	f7f3 fdbd 	bl	8000288 <__aeabi_dsub>
 800c70e:	4602      	mov	r2, r0
 800c710:	460b      	mov	r3, r1
 800c712:	e9ca 2300 	strd	r2, r3, [sl]
 800c716:	4620      	mov	r0, r4
 800c718:	4629      	mov	r1, r5
 800c71a:	f7f3 fdb5 	bl	8000288 <__aeabi_dsub>
 800c71e:	a3a6      	add	r3, pc, #664	; (adr r3, 800c9b8 <__ieee754_rem_pio2+0x308>)
 800c720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c724:	f7f3 fdb0 	bl	8000288 <__aeabi_dsub>
 800c728:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c72c:	f04f 0b01 	mov.w	fp, #1
 800c730:	4658      	mov	r0, fp
 800c732:	b00b      	add	sp, #44	; 0x2c
 800c734:	ecbd 8b02 	vpop	{d8}
 800c738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c73c:	a3a0      	add	r3, pc, #640	; (adr r3, 800c9c0 <__ieee754_rem_pio2+0x310>)
 800c73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c742:	f7f3 fda1 	bl	8000288 <__aeabi_dsub>
 800c746:	a3a0      	add	r3, pc, #640	; (adr r3, 800c9c8 <__ieee754_rem_pio2+0x318>)
 800c748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74c:	4604      	mov	r4, r0
 800c74e:	460d      	mov	r5, r1
 800c750:	f7f3 fd9a 	bl	8000288 <__aeabi_dsub>
 800c754:	4602      	mov	r2, r0
 800c756:	460b      	mov	r3, r1
 800c758:	e9ca 2300 	strd	r2, r3, [sl]
 800c75c:	4620      	mov	r0, r4
 800c75e:	4629      	mov	r1, r5
 800c760:	f7f3 fd92 	bl	8000288 <__aeabi_dsub>
 800c764:	a398      	add	r3, pc, #608	; (adr r3, 800c9c8 <__ieee754_rem_pio2+0x318>)
 800c766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76a:	e7db      	b.n	800c724 <__ieee754_rem_pio2+0x74>
 800c76c:	f7f3 fd8e 	bl	800028c <__adddf3>
 800c770:	45b0      	cmp	r8, r6
 800c772:	4604      	mov	r4, r0
 800c774:	460d      	mov	r5, r1
 800c776:	d016      	beq.n	800c7a6 <__ieee754_rem_pio2+0xf6>
 800c778:	a38f      	add	r3, pc, #572	; (adr r3, 800c9b8 <__ieee754_rem_pio2+0x308>)
 800c77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77e:	f7f3 fd85 	bl	800028c <__adddf3>
 800c782:	4602      	mov	r2, r0
 800c784:	460b      	mov	r3, r1
 800c786:	e9ca 2300 	strd	r2, r3, [sl]
 800c78a:	4620      	mov	r0, r4
 800c78c:	4629      	mov	r1, r5
 800c78e:	f7f3 fd7b 	bl	8000288 <__aeabi_dsub>
 800c792:	a389      	add	r3, pc, #548	; (adr r3, 800c9b8 <__ieee754_rem_pio2+0x308>)
 800c794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c798:	f7f3 fd78 	bl	800028c <__adddf3>
 800c79c:	f04f 3bff 	mov.w	fp, #4294967295
 800c7a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c7a4:	e7c4      	b.n	800c730 <__ieee754_rem_pio2+0x80>
 800c7a6:	a386      	add	r3, pc, #536	; (adr r3, 800c9c0 <__ieee754_rem_pio2+0x310>)
 800c7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ac:	f7f3 fd6e 	bl	800028c <__adddf3>
 800c7b0:	a385      	add	r3, pc, #532	; (adr r3, 800c9c8 <__ieee754_rem_pio2+0x318>)
 800c7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	460d      	mov	r5, r1
 800c7ba:	f7f3 fd67 	bl	800028c <__adddf3>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	e9ca 2300 	strd	r2, r3, [sl]
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	f7f3 fd5d 	bl	8000288 <__aeabi_dsub>
 800c7ce:	a37e      	add	r3, pc, #504	; (adr r3, 800c9c8 <__ieee754_rem_pio2+0x318>)
 800c7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d4:	e7e0      	b.n	800c798 <__ieee754_rem_pio2+0xe8>
 800c7d6:	4b87      	ldr	r3, [pc, #540]	; (800c9f4 <__ieee754_rem_pio2+0x344>)
 800c7d8:	4598      	cmp	r8, r3
 800c7da:	f300 80d9 	bgt.w	800c990 <__ieee754_rem_pio2+0x2e0>
 800c7de:	f7ff fe2b 	bl	800c438 <fabs>
 800c7e2:	ec55 4b10 	vmov	r4, r5, d0
 800c7e6:	ee10 0a10 	vmov	r0, s0
 800c7ea:	a379      	add	r3, pc, #484	; (adr r3, 800c9d0 <__ieee754_rem_pio2+0x320>)
 800c7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	f7f3 ff01 	bl	80005f8 <__aeabi_dmul>
 800c7f6:	4b80      	ldr	r3, [pc, #512]	; (800c9f8 <__ieee754_rem_pio2+0x348>)
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	f7f3 fd47 	bl	800028c <__adddf3>
 800c7fe:	f7f4 f9ab 	bl	8000b58 <__aeabi_d2iz>
 800c802:	4683      	mov	fp, r0
 800c804:	f7f3 fe8e 	bl	8000524 <__aeabi_i2d>
 800c808:	4602      	mov	r2, r0
 800c80a:	460b      	mov	r3, r1
 800c80c:	ec43 2b18 	vmov	d8, r2, r3
 800c810:	a367      	add	r3, pc, #412	; (adr r3, 800c9b0 <__ieee754_rem_pio2+0x300>)
 800c812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c816:	f7f3 feef 	bl	80005f8 <__aeabi_dmul>
 800c81a:	4602      	mov	r2, r0
 800c81c:	460b      	mov	r3, r1
 800c81e:	4620      	mov	r0, r4
 800c820:	4629      	mov	r1, r5
 800c822:	f7f3 fd31 	bl	8000288 <__aeabi_dsub>
 800c826:	a364      	add	r3, pc, #400	; (adr r3, 800c9b8 <__ieee754_rem_pio2+0x308>)
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	4606      	mov	r6, r0
 800c82e:	460f      	mov	r7, r1
 800c830:	ec51 0b18 	vmov	r0, r1, d8
 800c834:	f7f3 fee0 	bl	80005f8 <__aeabi_dmul>
 800c838:	f1bb 0f1f 	cmp.w	fp, #31
 800c83c:	4604      	mov	r4, r0
 800c83e:	460d      	mov	r5, r1
 800c840:	dc0d      	bgt.n	800c85e <__ieee754_rem_pio2+0x1ae>
 800c842:	4b6e      	ldr	r3, [pc, #440]	; (800c9fc <__ieee754_rem_pio2+0x34c>)
 800c844:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c84c:	4543      	cmp	r3, r8
 800c84e:	d006      	beq.n	800c85e <__ieee754_rem_pio2+0x1ae>
 800c850:	4622      	mov	r2, r4
 800c852:	462b      	mov	r3, r5
 800c854:	4630      	mov	r0, r6
 800c856:	4639      	mov	r1, r7
 800c858:	f7f3 fd16 	bl	8000288 <__aeabi_dsub>
 800c85c:	e00f      	b.n	800c87e <__ieee754_rem_pio2+0x1ce>
 800c85e:	462b      	mov	r3, r5
 800c860:	4622      	mov	r2, r4
 800c862:	4630      	mov	r0, r6
 800c864:	4639      	mov	r1, r7
 800c866:	f7f3 fd0f 	bl	8000288 <__aeabi_dsub>
 800c86a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c86e:	9303      	str	r3, [sp, #12]
 800c870:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c874:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c878:	f1b8 0f10 	cmp.w	r8, #16
 800c87c:	dc02      	bgt.n	800c884 <__ieee754_rem_pio2+0x1d4>
 800c87e:	e9ca 0100 	strd	r0, r1, [sl]
 800c882:	e039      	b.n	800c8f8 <__ieee754_rem_pio2+0x248>
 800c884:	a34e      	add	r3, pc, #312	; (adr r3, 800c9c0 <__ieee754_rem_pio2+0x310>)
 800c886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88a:	ec51 0b18 	vmov	r0, r1, d8
 800c88e:	f7f3 feb3 	bl	80005f8 <__aeabi_dmul>
 800c892:	4604      	mov	r4, r0
 800c894:	460d      	mov	r5, r1
 800c896:	4602      	mov	r2, r0
 800c898:	460b      	mov	r3, r1
 800c89a:	4630      	mov	r0, r6
 800c89c:	4639      	mov	r1, r7
 800c89e:	f7f3 fcf3 	bl	8000288 <__aeabi_dsub>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	4680      	mov	r8, r0
 800c8a8:	4689      	mov	r9, r1
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	4639      	mov	r1, r7
 800c8ae:	f7f3 fceb 	bl	8000288 <__aeabi_dsub>
 800c8b2:	4622      	mov	r2, r4
 800c8b4:	462b      	mov	r3, r5
 800c8b6:	f7f3 fce7 	bl	8000288 <__aeabi_dsub>
 800c8ba:	a343      	add	r3, pc, #268	; (adr r3, 800c9c8 <__ieee754_rem_pio2+0x318>)
 800c8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c0:	4604      	mov	r4, r0
 800c8c2:	460d      	mov	r5, r1
 800c8c4:	ec51 0b18 	vmov	r0, r1, d8
 800c8c8:	f7f3 fe96 	bl	80005f8 <__aeabi_dmul>
 800c8cc:	4622      	mov	r2, r4
 800c8ce:	462b      	mov	r3, r5
 800c8d0:	f7f3 fcda 	bl	8000288 <__aeabi_dsub>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	4604      	mov	r4, r0
 800c8da:	460d      	mov	r5, r1
 800c8dc:	4640      	mov	r0, r8
 800c8de:	4649      	mov	r1, r9
 800c8e0:	f7f3 fcd2 	bl	8000288 <__aeabi_dsub>
 800c8e4:	9a03      	ldr	r2, [sp, #12]
 800c8e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c8ea:	1ad3      	subs	r3, r2, r3
 800c8ec:	2b31      	cmp	r3, #49	; 0x31
 800c8ee:	dc24      	bgt.n	800c93a <__ieee754_rem_pio2+0x28a>
 800c8f0:	e9ca 0100 	strd	r0, r1, [sl]
 800c8f4:	4646      	mov	r6, r8
 800c8f6:	464f      	mov	r7, r9
 800c8f8:	e9da 8900 	ldrd	r8, r9, [sl]
 800c8fc:	4630      	mov	r0, r6
 800c8fe:	4642      	mov	r2, r8
 800c900:	464b      	mov	r3, r9
 800c902:	4639      	mov	r1, r7
 800c904:	f7f3 fcc0 	bl	8000288 <__aeabi_dsub>
 800c908:	462b      	mov	r3, r5
 800c90a:	4622      	mov	r2, r4
 800c90c:	f7f3 fcbc 	bl	8000288 <__aeabi_dsub>
 800c910:	9b02      	ldr	r3, [sp, #8]
 800c912:	2b00      	cmp	r3, #0
 800c914:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c918:	f6bf af0a 	bge.w	800c730 <__ieee754_rem_pio2+0x80>
 800c91c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c920:	f8ca 3004 	str.w	r3, [sl, #4]
 800c924:	f8ca 8000 	str.w	r8, [sl]
 800c928:	f8ca 0008 	str.w	r0, [sl, #8]
 800c92c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c930:	f8ca 300c 	str.w	r3, [sl, #12]
 800c934:	f1cb 0b00 	rsb	fp, fp, #0
 800c938:	e6fa      	b.n	800c730 <__ieee754_rem_pio2+0x80>
 800c93a:	a327      	add	r3, pc, #156	; (adr r3, 800c9d8 <__ieee754_rem_pio2+0x328>)
 800c93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c940:	ec51 0b18 	vmov	r0, r1, d8
 800c944:	f7f3 fe58 	bl	80005f8 <__aeabi_dmul>
 800c948:	4604      	mov	r4, r0
 800c94a:	460d      	mov	r5, r1
 800c94c:	4602      	mov	r2, r0
 800c94e:	460b      	mov	r3, r1
 800c950:	4640      	mov	r0, r8
 800c952:	4649      	mov	r1, r9
 800c954:	f7f3 fc98 	bl	8000288 <__aeabi_dsub>
 800c958:	4602      	mov	r2, r0
 800c95a:	460b      	mov	r3, r1
 800c95c:	4606      	mov	r6, r0
 800c95e:	460f      	mov	r7, r1
 800c960:	4640      	mov	r0, r8
 800c962:	4649      	mov	r1, r9
 800c964:	f7f3 fc90 	bl	8000288 <__aeabi_dsub>
 800c968:	4622      	mov	r2, r4
 800c96a:	462b      	mov	r3, r5
 800c96c:	f7f3 fc8c 	bl	8000288 <__aeabi_dsub>
 800c970:	a31b      	add	r3, pc, #108	; (adr r3, 800c9e0 <__ieee754_rem_pio2+0x330>)
 800c972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c976:	4604      	mov	r4, r0
 800c978:	460d      	mov	r5, r1
 800c97a:	ec51 0b18 	vmov	r0, r1, d8
 800c97e:	f7f3 fe3b 	bl	80005f8 <__aeabi_dmul>
 800c982:	4622      	mov	r2, r4
 800c984:	462b      	mov	r3, r5
 800c986:	f7f3 fc7f 	bl	8000288 <__aeabi_dsub>
 800c98a:	4604      	mov	r4, r0
 800c98c:	460d      	mov	r5, r1
 800c98e:	e75f      	b.n	800c850 <__ieee754_rem_pio2+0x1a0>
 800c990:	4b1b      	ldr	r3, [pc, #108]	; (800ca00 <__ieee754_rem_pio2+0x350>)
 800c992:	4598      	cmp	r8, r3
 800c994:	dd36      	ble.n	800ca04 <__ieee754_rem_pio2+0x354>
 800c996:	ee10 2a10 	vmov	r2, s0
 800c99a:	462b      	mov	r3, r5
 800c99c:	4620      	mov	r0, r4
 800c99e:	4629      	mov	r1, r5
 800c9a0:	f7f3 fc72 	bl	8000288 <__aeabi_dsub>
 800c9a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c9a8:	e9ca 0100 	strd	r0, r1, [sl]
 800c9ac:	e694      	b.n	800c6d8 <__ieee754_rem_pio2+0x28>
 800c9ae:	bf00      	nop
 800c9b0:	54400000 	.word	0x54400000
 800c9b4:	3ff921fb 	.word	0x3ff921fb
 800c9b8:	1a626331 	.word	0x1a626331
 800c9bc:	3dd0b461 	.word	0x3dd0b461
 800c9c0:	1a600000 	.word	0x1a600000
 800c9c4:	3dd0b461 	.word	0x3dd0b461
 800c9c8:	2e037073 	.word	0x2e037073
 800c9cc:	3ba3198a 	.word	0x3ba3198a
 800c9d0:	6dc9c883 	.word	0x6dc9c883
 800c9d4:	3fe45f30 	.word	0x3fe45f30
 800c9d8:	2e000000 	.word	0x2e000000
 800c9dc:	3ba3198a 	.word	0x3ba3198a
 800c9e0:	252049c1 	.word	0x252049c1
 800c9e4:	397b839a 	.word	0x397b839a
 800c9e8:	3fe921fb 	.word	0x3fe921fb
 800c9ec:	4002d97b 	.word	0x4002d97b
 800c9f0:	3ff921fb 	.word	0x3ff921fb
 800c9f4:	413921fb 	.word	0x413921fb
 800c9f8:	3fe00000 	.word	0x3fe00000
 800c9fc:	0800e3d4 	.word	0x0800e3d4
 800ca00:	7fefffff 	.word	0x7fefffff
 800ca04:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ca08:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ca0c:	ee10 0a10 	vmov	r0, s0
 800ca10:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ca14:	ee10 6a10 	vmov	r6, s0
 800ca18:	460f      	mov	r7, r1
 800ca1a:	f7f4 f89d 	bl	8000b58 <__aeabi_d2iz>
 800ca1e:	f7f3 fd81 	bl	8000524 <__aeabi_i2d>
 800ca22:	4602      	mov	r2, r0
 800ca24:	460b      	mov	r3, r1
 800ca26:	4630      	mov	r0, r6
 800ca28:	4639      	mov	r1, r7
 800ca2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ca2e:	f7f3 fc2b 	bl	8000288 <__aeabi_dsub>
 800ca32:	4b22      	ldr	r3, [pc, #136]	; (800cabc <__ieee754_rem_pio2+0x40c>)
 800ca34:	2200      	movs	r2, #0
 800ca36:	f7f3 fddf 	bl	80005f8 <__aeabi_dmul>
 800ca3a:	460f      	mov	r7, r1
 800ca3c:	4606      	mov	r6, r0
 800ca3e:	f7f4 f88b 	bl	8000b58 <__aeabi_d2iz>
 800ca42:	f7f3 fd6f 	bl	8000524 <__aeabi_i2d>
 800ca46:	4602      	mov	r2, r0
 800ca48:	460b      	mov	r3, r1
 800ca4a:	4630      	mov	r0, r6
 800ca4c:	4639      	mov	r1, r7
 800ca4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ca52:	f7f3 fc19 	bl	8000288 <__aeabi_dsub>
 800ca56:	4b19      	ldr	r3, [pc, #100]	; (800cabc <__ieee754_rem_pio2+0x40c>)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f7f3 fdcd 	bl	80005f8 <__aeabi_dmul>
 800ca5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ca62:	ad04      	add	r5, sp, #16
 800ca64:	f04f 0803 	mov.w	r8, #3
 800ca68:	46a9      	mov	r9, r5
 800ca6a:	2600      	movs	r6, #0
 800ca6c:	2700      	movs	r7, #0
 800ca6e:	4632      	mov	r2, r6
 800ca70:	463b      	mov	r3, r7
 800ca72:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ca76:	46c3      	mov	fp, r8
 800ca78:	3d08      	subs	r5, #8
 800ca7a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ca7e:	f7f4 f823 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d1f3      	bne.n	800ca6e <__ieee754_rem_pio2+0x3be>
 800ca86:	4b0e      	ldr	r3, [pc, #56]	; (800cac0 <__ieee754_rem_pio2+0x410>)
 800ca88:	9301      	str	r3, [sp, #4]
 800ca8a:	2302      	movs	r3, #2
 800ca8c:	9300      	str	r3, [sp, #0]
 800ca8e:	4622      	mov	r2, r4
 800ca90:	465b      	mov	r3, fp
 800ca92:	4651      	mov	r1, sl
 800ca94:	4648      	mov	r0, r9
 800ca96:	f000 f997 	bl	800cdc8 <__kernel_rem_pio2>
 800ca9a:	9b02      	ldr	r3, [sp, #8]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	4683      	mov	fp, r0
 800caa0:	f6bf ae46 	bge.w	800c730 <__ieee754_rem_pio2+0x80>
 800caa4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800caa8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800caac:	f8ca 3004 	str.w	r3, [sl, #4]
 800cab0:	f8da 300c 	ldr.w	r3, [sl, #12]
 800cab4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cab8:	e73a      	b.n	800c930 <__ieee754_rem_pio2+0x280>
 800caba:	bf00      	nop
 800cabc:	41700000 	.word	0x41700000
 800cac0:	0800e454 	.word	0x0800e454

0800cac4 <__ieee754_sqrt>:
 800cac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cac8:	ec55 4b10 	vmov	r4, r5, d0
 800cacc:	4e56      	ldr	r6, [pc, #344]	; (800cc28 <__ieee754_sqrt+0x164>)
 800cace:	43ae      	bics	r6, r5
 800cad0:	ee10 0a10 	vmov	r0, s0
 800cad4:	ee10 3a10 	vmov	r3, s0
 800cad8:	4629      	mov	r1, r5
 800cada:	462a      	mov	r2, r5
 800cadc:	d110      	bne.n	800cb00 <__ieee754_sqrt+0x3c>
 800cade:	ee10 2a10 	vmov	r2, s0
 800cae2:	462b      	mov	r3, r5
 800cae4:	f7f3 fd88 	bl	80005f8 <__aeabi_dmul>
 800cae8:	4602      	mov	r2, r0
 800caea:	460b      	mov	r3, r1
 800caec:	4620      	mov	r0, r4
 800caee:	4629      	mov	r1, r5
 800caf0:	f7f3 fbcc 	bl	800028c <__adddf3>
 800caf4:	4604      	mov	r4, r0
 800caf6:	460d      	mov	r5, r1
 800caf8:	ec45 4b10 	vmov	d0, r4, r5
 800cafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb00:	2d00      	cmp	r5, #0
 800cb02:	dc10      	bgt.n	800cb26 <__ieee754_sqrt+0x62>
 800cb04:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cb08:	4330      	orrs	r0, r6
 800cb0a:	d0f5      	beq.n	800caf8 <__ieee754_sqrt+0x34>
 800cb0c:	b15d      	cbz	r5, 800cb26 <__ieee754_sqrt+0x62>
 800cb0e:	ee10 2a10 	vmov	r2, s0
 800cb12:	462b      	mov	r3, r5
 800cb14:	ee10 0a10 	vmov	r0, s0
 800cb18:	f7f3 fbb6 	bl	8000288 <__aeabi_dsub>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	f7f3 fe94 	bl	800084c <__aeabi_ddiv>
 800cb24:	e7e6      	b.n	800caf4 <__ieee754_sqrt+0x30>
 800cb26:	1509      	asrs	r1, r1, #20
 800cb28:	d076      	beq.n	800cc18 <__ieee754_sqrt+0x154>
 800cb2a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cb2e:	07ce      	lsls	r6, r1, #31
 800cb30:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800cb34:	bf5e      	ittt	pl
 800cb36:	0fda      	lsrpl	r2, r3, #31
 800cb38:	005b      	lslpl	r3, r3, #1
 800cb3a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800cb3e:	0fda      	lsrs	r2, r3, #31
 800cb40:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800cb44:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800cb48:	2000      	movs	r0, #0
 800cb4a:	106d      	asrs	r5, r5, #1
 800cb4c:	005b      	lsls	r3, r3, #1
 800cb4e:	f04f 0e16 	mov.w	lr, #22
 800cb52:	4684      	mov	ip, r0
 800cb54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb58:	eb0c 0401 	add.w	r4, ip, r1
 800cb5c:	4294      	cmp	r4, r2
 800cb5e:	bfde      	ittt	le
 800cb60:	1b12      	suble	r2, r2, r4
 800cb62:	eb04 0c01 	addle.w	ip, r4, r1
 800cb66:	1840      	addle	r0, r0, r1
 800cb68:	0052      	lsls	r2, r2, #1
 800cb6a:	f1be 0e01 	subs.w	lr, lr, #1
 800cb6e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cb72:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cb76:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cb7a:	d1ed      	bne.n	800cb58 <__ieee754_sqrt+0x94>
 800cb7c:	4671      	mov	r1, lr
 800cb7e:	2720      	movs	r7, #32
 800cb80:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cb84:	4562      	cmp	r2, ip
 800cb86:	eb04 060e 	add.w	r6, r4, lr
 800cb8a:	dc02      	bgt.n	800cb92 <__ieee754_sqrt+0xce>
 800cb8c:	d113      	bne.n	800cbb6 <__ieee754_sqrt+0xf2>
 800cb8e:	429e      	cmp	r6, r3
 800cb90:	d811      	bhi.n	800cbb6 <__ieee754_sqrt+0xf2>
 800cb92:	2e00      	cmp	r6, #0
 800cb94:	eb06 0e04 	add.w	lr, r6, r4
 800cb98:	da43      	bge.n	800cc22 <__ieee754_sqrt+0x15e>
 800cb9a:	f1be 0f00 	cmp.w	lr, #0
 800cb9e:	db40      	blt.n	800cc22 <__ieee754_sqrt+0x15e>
 800cba0:	f10c 0801 	add.w	r8, ip, #1
 800cba4:	eba2 020c 	sub.w	r2, r2, ip
 800cba8:	429e      	cmp	r6, r3
 800cbaa:	bf88      	it	hi
 800cbac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cbb0:	1b9b      	subs	r3, r3, r6
 800cbb2:	4421      	add	r1, r4
 800cbb4:	46c4      	mov	ip, r8
 800cbb6:	0052      	lsls	r2, r2, #1
 800cbb8:	3f01      	subs	r7, #1
 800cbba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cbbe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cbc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cbc6:	d1dd      	bne.n	800cb84 <__ieee754_sqrt+0xc0>
 800cbc8:	4313      	orrs	r3, r2
 800cbca:	d006      	beq.n	800cbda <__ieee754_sqrt+0x116>
 800cbcc:	1c4c      	adds	r4, r1, #1
 800cbce:	bf13      	iteet	ne
 800cbd0:	3101      	addne	r1, #1
 800cbd2:	3001      	addeq	r0, #1
 800cbd4:	4639      	moveq	r1, r7
 800cbd6:	f021 0101 	bicne.w	r1, r1, #1
 800cbda:	1043      	asrs	r3, r0, #1
 800cbdc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cbe0:	0849      	lsrs	r1, r1, #1
 800cbe2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cbe6:	07c2      	lsls	r2, r0, #31
 800cbe8:	bf48      	it	mi
 800cbea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cbee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800cbf2:	460c      	mov	r4, r1
 800cbf4:	463d      	mov	r5, r7
 800cbf6:	e77f      	b.n	800caf8 <__ieee754_sqrt+0x34>
 800cbf8:	0ada      	lsrs	r2, r3, #11
 800cbfa:	3815      	subs	r0, #21
 800cbfc:	055b      	lsls	r3, r3, #21
 800cbfe:	2a00      	cmp	r2, #0
 800cc00:	d0fa      	beq.n	800cbf8 <__ieee754_sqrt+0x134>
 800cc02:	02d7      	lsls	r7, r2, #11
 800cc04:	d50a      	bpl.n	800cc1c <__ieee754_sqrt+0x158>
 800cc06:	f1c1 0420 	rsb	r4, r1, #32
 800cc0a:	fa23 f404 	lsr.w	r4, r3, r4
 800cc0e:	1e4d      	subs	r5, r1, #1
 800cc10:	408b      	lsls	r3, r1
 800cc12:	4322      	orrs	r2, r4
 800cc14:	1b41      	subs	r1, r0, r5
 800cc16:	e788      	b.n	800cb2a <__ieee754_sqrt+0x66>
 800cc18:	4608      	mov	r0, r1
 800cc1a:	e7f0      	b.n	800cbfe <__ieee754_sqrt+0x13a>
 800cc1c:	0052      	lsls	r2, r2, #1
 800cc1e:	3101      	adds	r1, #1
 800cc20:	e7ef      	b.n	800cc02 <__ieee754_sqrt+0x13e>
 800cc22:	46e0      	mov	r8, ip
 800cc24:	e7be      	b.n	800cba4 <__ieee754_sqrt+0xe0>
 800cc26:	bf00      	nop
 800cc28:	7ff00000 	.word	0x7ff00000

0800cc2c <__ieee754_sqrtf>:
 800cc2c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cc30:	4770      	bx	lr
 800cc32:	0000      	movs	r0, r0
 800cc34:	0000      	movs	r0, r0
	...

0800cc38 <__kernel_cos>:
 800cc38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc3c:	ec57 6b10 	vmov	r6, r7, d0
 800cc40:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800cc44:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800cc48:	ed8d 1b00 	vstr	d1, [sp]
 800cc4c:	da07      	bge.n	800cc5e <__kernel_cos+0x26>
 800cc4e:	ee10 0a10 	vmov	r0, s0
 800cc52:	4639      	mov	r1, r7
 800cc54:	f7f3 ff80 	bl	8000b58 <__aeabi_d2iz>
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	f000 8088 	beq.w	800cd6e <__kernel_cos+0x136>
 800cc5e:	4632      	mov	r2, r6
 800cc60:	463b      	mov	r3, r7
 800cc62:	4630      	mov	r0, r6
 800cc64:	4639      	mov	r1, r7
 800cc66:	f7f3 fcc7 	bl	80005f8 <__aeabi_dmul>
 800cc6a:	4b51      	ldr	r3, [pc, #324]	; (800cdb0 <__kernel_cos+0x178>)
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	4604      	mov	r4, r0
 800cc70:	460d      	mov	r5, r1
 800cc72:	f7f3 fcc1 	bl	80005f8 <__aeabi_dmul>
 800cc76:	a340      	add	r3, pc, #256	; (adr r3, 800cd78 <__kernel_cos+0x140>)
 800cc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7c:	4682      	mov	sl, r0
 800cc7e:	468b      	mov	fp, r1
 800cc80:	4620      	mov	r0, r4
 800cc82:	4629      	mov	r1, r5
 800cc84:	f7f3 fcb8 	bl	80005f8 <__aeabi_dmul>
 800cc88:	a33d      	add	r3, pc, #244	; (adr r3, 800cd80 <__kernel_cos+0x148>)
 800cc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8e:	f7f3 fafd 	bl	800028c <__adddf3>
 800cc92:	4622      	mov	r2, r4
 800cc94:	462b      	mov	r3, r5
 800cc96:	f7f3 fcaf 	bl	80005f8 <__aeabi_dmul>
 800cc9a:	a33b      	add	r3, pc, #236	; (adr r3, 800cd88 <__kernel_cos+0x150>)
 800cc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca0:	f7f3 faf2 	bl	8000288 <__aeabi_dsub>
 800cca4:	4622      	mov	r2, r4
 800cca6:	462b      	mov	r3, r5
 800cca8:	f7f3 fca6 	bl	80005f8 <__aeabi_dmul>
 800ccac:	a338      	add	r3, pc, #224	; (adr r3, 800cd90 <__kernel_cos+0x158>)
 800ccae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb2:	f7f3 faeb 	bl	800028c <__adddf3>
 800ccb6:	4622      	mov	r2, r4
 800ccb8:	462b      	mov	r3, r5
 800ccba:	f7f3 fc9d 	bl	80005f8 <__aeabi_dmul>
 800ccbe:	a336      	add	r3, pc, #216	; (adr r3, 800cd98 <__kernel_cos+0x160>)
 800ccc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc4:	f7f3 fae0 	bl	8000288 <__aeabi_dsub>
 800ccc8:	4622      	mov	r2, r4
 800ccca:	462b      	mov	r3, r5
 800cccc:	f7f3 fc94 	bl	80005f8 <__aeabi_dmul>
 800ccd0:	a333      	add	r3, pc, #204	; (adr r3, 800cda0 <__kernel_cos+0x168>)
 800ccd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd6:	f7f3 fad9 	bl	800028c <__adddf3>
 800ccda:	4622      	mov	r2, r4
 800ccdc:	462b      	mov	r3, r5
 800ccde:	f7f3 fc8b 	bl	80005f8 <__aeabi_dmul>
 800cce2:	4622      	mov	r2, r4
 800cce4:	462b      	mov	r3, r5
 800cce6:	f7f3 fc87 	bl	80005f8 <__aeabi_dmul>
 800ccea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccee:	4604      	mov	r4, r0
 800ccf0:	460d      	mov	r5, r1
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	4639      	mov	r1, r7
 800ccf6:	f7f3 fc7f 	bl	80005f8 <__aeabi_dmul>
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	4629      	mov	r1, r5
 800cd00:	4620      	mov	r0, r4
 800cd02:	f7f3 fac1 	bl	8000288 <__aeabi_dsub>
 800cd06:	4b2b      	ldr	r3, [pc, #172]	; (800cdb4 <__kernel_cos+0x17c>)
 800cd08:	4598      	cmp	r8, r3
 800cd0a:	4606      	mov	r6, r0
 800cd0c:	460f      	mov	r7, r1
 800cd0e:	dc10      	bgt.n	800cd32 <__kernel_cos+0xfa>
 800cd10:	4602      	mov	r2, r0
 800cd12:	460b      	mov	r3, r1
 800cd14:	4650      	mov	r0, sl
 800cd16:	4659      	mov	r1, fp
 800cd18:	f7f3 fab6 	bl	8000288 <__aeabi_dsub>
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	4926      	ldr	r1, [pc, #152]	; (800cdb8 <__kernel_cos+0x180>)
 800cd20:	4602      	mov	r2, r0
 800cd22:	2000      	movs	r0, #0
 800cd24:	f7f3 fab0 	bl	8000288 <__aeabi_dsub>
 800cd28:	ec41 0b10 	vmov	d0, r0, r1
 800cd2c:	b003      	add	sp, #12
 800cd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd32:	4b22      	ldr	r3, [pc, #136]	; (800cdbc <__kernel_cos+0x184>)
 800cd34:	4920      	ldr	r1, [pc, #128]	; (800cdb8 <__kernel_cos+0x180>)
 800cd36:	4598      	cmp	r8, r3
 800cd38:	bfcc      	ite	gt
 800cd3a:	4d21      	ldrgt	r5, [pc, #132]	; (800cdc0 <__kernel_cos+0x188>)
 800cd3c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800cd40:	2400      	movs	r4, #0
 800cd42:	4622      	mov	r2, r4
 800cd44:	462b      	mov	r3, r5
 800cd46:	2000      	movs	r0, #0
 800cd48:	f7f3 fa9e 	bl	8000288 <__aeabi_dsub>
 800cd4c:	4622      	mov	r2, r4
 800cd4e:	4680      	mov	r8, r0
 800cd50:	4689      	mov	r9, r1
 800cd52:	462b      	mov	r3, r5
 800cd54:	4650      	mov	r0, sl
 800cd56:	4659      	mov	r1, fp
 800cd58:	f7f3 fa96 	bl	8000288 <__aeabi_dsub>
 800cd5c:	4632      	mov	r2, r6
 800cd5e:	463b      	mov	r3, r7
 800cd60:	f7f3 fa92 	bl	8000288 <__aeabi_dsub>
 800cd64:	4602      	mov	r2, r0
 800cd66:	460b      	mov	r3, r1
 800cd68:	4640      	mov	r0, r8
 800cd6a:	4649      	mov	r1, r9
 800cd6c:	e7da      	b.n	800cd24 <__kernel_cos+0xec>
 800cd6e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800cda8 <__kernel_cos+0x170>
 800cd72:	e7db      	b.n	800cd2c <__kernel_cos+0xf4>
 800cd74:	f3af 8000 	nop.w
 800cd78:	be8838d4 	.word	0xbe8838d4
 800cd7c:	bda8fae9 	.word	0xbda8fae9
 800cd80:	bdb4b1c4 	.word	0xbdb4b1c4
 800cd84:	3e21ee9e 	.word	0x3e21ee9e
 800cd88:	809c52ad 	.word	0x809c52ad
 800cd8c:	3e927e4f 	.word	0x3e927e4f
 800cd90:	19cb1590 	.word	0x19cb1590
 800cd94:	3efa01a0 	.word	0x3efa01a0
 800cd98:	16c15177 	.word	0x16c15177
 800cd9c:	3f56c16c 	.word	0x3f56c16c
 800cda0:	5555554c 	.word	0x5555554c
 800cda4:	3fa55555 	.word	0x3fa55555
 800cda8:	00000000 	.word	0x00000000
 800cdac:	3ff00000 	.word	0x3ff00000
 800cdb0:	3fe00000 	.word	0x3fe00000
 800cdb4:	3fd33332 	.word	0x3fd33332
 800cdb8:	3ff00000 	.word	0x3ff00000
 800cdbc:	3fe90000 	.word	0x3fe90000
 800cdc0:	3fd20000 	.word	0x3fd20000
 800cdc4:	00000000 	.word	0x00000000

0800cdc8 <__kernel_rem_pio2>:
 800cdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdcc:	ed2d 8b02 	vpush	{d8}
 800cdd0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800cdd4:	f112 0f14 	cmn.w	r2, #20
 800cdd8:	9308      	str	r3, [sp, #32]
 800cdda:	9101      	str	r1, [sp, #4]
 800cddc:	4bc6      	ldr	r3, [pc, #792]	; (800d0f8 <__kernel_rem_pio2+0x330>)
 800cdde:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800cde0:	9009      	str	r0, [sp, #36]	; 0x24
 800cde2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cde6:	9304      	str	r3, [sp, #16]
 800cde8:	9b08      	ldr	r3, [sp, #32]
 800cdea:	f103 33ff 	add.w	r3, r3, #4294967295
 800cdee:	bfa8      	it	ge
 800cdf0:	1ed4      	subge	r4, r2, #3
 800cdf2:	9306      	str	r3, [sp, #24]
 800cdf4:	bfb2      	itee	lt
 800cdf6:	2400      	movlt	r4, #0
 800cdf8:	2318      	movge	r3, #24
 800cdfa:	fb94 f4f3 	sdivge	r4, r4, r3
 800cdfe:	f06f 0317 	mvn.w	r3, #23
 800ce02:	fb04 3303 	mla	r3, r4, r3, r3
 800ce06:	eb03 0a02 	add.w	sl, r3, r2
 800ce0a:	9b04      	ldr	r3, [sp, #16]
 800ce0c:	9a06      	ldr	r2, [sp, #24]
 800ce0e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800d0e8 <__kernel_rem_pio2+0x320>
 800ce12:	eb03 0802 	add.w	r8, r3, r2
 800ce16:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ce18:	1aa7      	subs	r7, r4, r2
 800ce1a:	ae20      	add	r6, sp, #128	; 0x80
 800ce1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ce20:	2500      	movs	r5, #0
 800ce22:	4545      	cmp	r5, r8
 800ce24:	dd18      	ble.n	800ce58 <__kernel_rem_pio2+0x90>
 800ce26:	9b08      	ldr	r3, [sp, #32]
 800ce28:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ce2c:	aa20      	add	r2, sp, #128	; 0x80
 800ce2e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800d0e8 <__kernel_rem_pio2+0x320>
 800ce32:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ce36:	f1c3 0301 	rsb	r3, r3, #1
 800ce3a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ce3e:	9307      	str	r3, [sp, #28]
 800ce40:	9b07      	ldr	r3, [sp, #28]
 800ce42:	9a04      	ldr	r2, [sp, #16]
 800ce44:	4443      	add	r3, r8
 800ce46:	429a      	cmp	r2, r3
 800ce48:	db2f      	blt.n	800ceaa <__kernel_rem_pio2+0xe2>
 800ce4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ce4e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ce52:	462f      	mov	r7, r5
 800ce54:	2600      	movs	r6, #0
 800ce56:	e01b      	b.n	800ce90 <__kernel_rem_pio2+0xc8>
 800ce58:	42ef      	cmn	r7, r5
 800ce5a:	d407      	bmi.n	800ce6c <__kernel_rem_pio2+0xa4>
 800ce5c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ce60:	f7f3 fb60 	bl	8000524 <__aeabi_i2d>
 800ce64:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ce68:	3501      	adds	r5, #1
 800ce6a:	e7da      	b.n	800ce22 <__kernel_rem_pio2+0x5a>
 800ce6c:	ec51 0b18 	vmov	r0, r1, d8
 800ce70:	e7f8      	b.n	800ce64 <__kernel_rem_pio2+0x9c>
 800ce72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce76:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ce7a:	f7f3 fbbd 	bl	80005f8 <__aeabi_dmul>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	460b      	mov	r3, r1
 800ce82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce86:	f7f3 fa01 	bl	800028c <__adddf3>
 800ce8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce8e:	3601      	adds	r6, #1
 800ce90:	9b06      	ldr	r3, [sp, #24]
 800ce92:	429e      	cmp	r6, r3
 800ce94:	f1a7 0708 	sub.w	r7, r7, #8
 800ce98:	ddeb      	ble.n	800ce72 <__kernel_rem_pio2+0xaa>
 800ce9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce9e:	3508      	adds	r5, #8
 800cea0:	ecab 7b02 	vstmia	fp!, {d7}
 800cea4:	f108 0801 	add.w	r8, r8, #1
 800cea8:	e7ca      	b.n	800ce40 <__kernel_rem_pio2+0x78>
 800ceaa:	9b04      	ldr	r3, [sp, #16]
 800ceac:	aa0c      	add	r2, sp, #48	; 0x30
 800ceae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ceb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800ceb4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ceb6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ceba:	9c04      	ldr	r4, [sp, #16]
 800cebc:	930a      	str	r3, [sp, #40]	; 0x28
 800cebe:	ab98      	add	r3, sp, #608	; 0x260
 800cec0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cec4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800cec8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800cecc:	f8cd b008 	str.w	fp, [sp, #8]
 800ced0:	4625      	mov	r5, r4
 800ced2:	2d00      	cmp	r5, #0
 800ced4:	dc78      	bgt.n	800cfc8 <__kernel_rem_pio2+0x200>
 800ced6:	ec47 6b10 	vmov	d0, r6, r7
 800ceda:	4650      	mov	r0, sl
 800cedc:	f000 fb74 	bl	800d5c8 <scalbn>
 800cee0:	ec57 6b10 	vmov	r6, r7, d0
 800cee4:	2200      	movs	r2, #0
 800cee6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ceea:	ee10 0a10 	vmov	r0, s0
 800ceee:	4639      	mov	r1, r7
 800cef0:	f7f3 fb82 	bl	80005f8 <__aeabi_dmul>
 800cef4:	ec41 0b10 	vmov	d0, r0, r1
 800cef8:	f7ff faaa 	bl	800c450 <floor>
 800cefc:	4b7f      	ldr	r3, [pc, #508]	; (800d0fc <__kernel_rem_pio2+0x334>)
 800cefe:	ec51 0b10 	vmov	r0, r1, d0
 800cf02:	2200      	movs	r2, #0
 800cf04:	f7f3 fb78 	bl	80005f8 <__aeabi_dmul>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	4630      	mov	r0, r6
 800cf0e:	4639      	mov	r1, r7
 800cf10:	f7f3 f9ba 	bl	8000288 <__aeabi_dsub>
 800cf14:	460f      	mov	r7, r1
 800cf16:	4606      	mov	r6, r0
 800cf18:	f7f3 fe1e 	bl	8000b58 <__aeabi_d2iz>
 800cf1c:	9007      	str	r0, [sp, #28]
 800cf1e:	f7f3 fb01 	bl	8000524 <__aeabi_i2d>
 800cf22:	4602      	mov	r2, r0
 800cf24:	460b      	mov	r3, r1
 800cf26:	4630      	mov	r0, r6
 800cf28:	4639      	mov	r1, r7
 800cf2a:	f7f3 f9ad 	bl	8000288 <__aeabi_dsub>
 800cf2e:	f1ba 0f00 	cmp.w	sl, #0
 800cf32:	4606      	mov	r6, r0
 800cf34:	460f      	mov	r7, r1
 800cf36:	dd70      	ble.n	800d01a <__kernel_rem_pio2+0x252>
 800cf38:	1e62      	subs	r2, r4, #1
 800cf3a:	ab0c      	add	r3, sp, #48	; 0x30
 800cf3c:	9d07      	ldr	r5, [sp, #28]
 800cf3e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cf42:	f1ca 0118 	rsb	r1, sl, #24
 800cf46:	fa40 f301 	asr.w	r3, r0, r1
 800cf4a:	441d      	add	r5, r3
 800cf4c:	408b      	lsls	r3, r1
 800cf4e:	1ac0      	subs	r0, r0, r3
 800cf50:	ab0c      	add	r3, sp, #48	; 0x30
 800cf52:	9507      	str	r5, [sp, #28]
 800cf54:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cf58:	f1ca 0317 	rsb	r3, sl, #23
 800cf5c:	fa40 f303 	asr.w	r3, r0, r3
 800cf60:	9302      	str	r3, [sp, #8]
 800cf62:	9b02      	ldr	r3, [sp, #8]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	dd66      	ble.n	800d036 <__kernel_rem_pio2+0x26e>
 800cf68:	9b07      	ldr	r3, [sp, #28]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	9307      	str	r3, [sp, #28]
 800cf70:	4615      	mov	r5, r2
 800cf72:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cf76:	4294      	cmp	r4, r2
 800cf78:	f300 8099 	bgt.w	800d0ae <__kernel_rem_pio2+0x2e6>
 800cf7c:	f1ba 0f00 	cmp.w	sl, #0
 800cf80:	dd07      	ble.n	800cf92 <__kernel_rem_pio2+0x1ca>
 800cf82:	f1ba 0f01 	cmp.w	sl, #1
 800cf86:	f000 80a5 	beq.w	800d0d4 <__kernel_rem_pio2+0x30c>
 800cf8a:	f1ba 0f02 	cmp.w	sl, #2
 800cf8e:	f000 80c1 	beq.w	800d114 <__kernel_rem_pio2+0x34c>
 800cf92:	9b02      	ldr	r3, [sp, #8]
 800cf94:	2b02      	cmp	r3, #2
 800cf96:	d14e      	bne.n	800d036 <__kernel_rem_pio2+0x26e>
 800cf98:	4632      	mov	r2, r6
 800cf9a:	463b      	mov	r3, r7
 800cf9c:	4958      	ldr	r1, [pc, #352]	; (800d100 <__kernel_rem_pio2+0x338>)
 800cf9e:	2000      	movs	r0, #0
 800cfa0:	f7f3 f972 	bl	8000288 <__aeabi_dsub>
 800cfa4:	4606      	mov	r6, r0
 800cfa6:	460f      	mov	r7, r1
 800cfa8:	2d00      	cmp	r5, #0
 800cfaa:	d044      	beq.n	800d036 <__kernel_rem_pio2+0x26e>
 800cfac:	4650      	mov	r0, sl
 800cfae:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800d0f0 <__kernel_rem_pio2+0x328>
 800cfb2:	f000 fb09 	bl	800d5c8 <scalbn>
 800cfb6:	4630      	mov	r0, r6
 800cfb8:	4639      	mov	r1, r7
 800cfba:	ec53 2b10 	vmov	r2, r3, d0
 800cfbe:	f7f3 f963 	bl	8000288 <__aeabi_dsub>
 800cfc2:	4606      	mov	r6, r0
 800cfc4:	460f      	mov	r7, r1
 800cfc6:	e036      	b.n	800d036 <__kernel_rem_pio2+0x26e>
 800cfc8:	4b4e      	ldr	r3, [pc, #312]	; (800d104 <__kernel_rem_pio2+0x33c>)
 800cfca:	2200      	movs	r2, #0
 800cfcc:	4630      	mov	r0, r6
 800cfce:	4639      	mov	r1, r7
 800cfd0:	f7f3 fb12 	bl	80005f8 <__aeabi_dmul>
 800cfd4:	f7f3 fdc0 	bl	8000b58 <__aeabi_d2iz>
 800cfd8:	f7f3 faa4 	bl	8000524 <__aeabi_i2d>
 800cfdc:	4b4a      	ldr	r3, [pc, #296]	; (800d108 <__kernel_rem_pio2+0x340>)
 800cfde:	2200      	movs	r2, #0
 800cfe0:	4680      	mov	r8, r0
 800cfe2:	4689      	mov	r9, r1
 800cfe4:	f7f3 fb08 	bl	80005f8 <__aeabi_dmul>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	460b      	mov	r3, r1
 800cfec:	4630      	mov	r0, r6
 800cfee:	4639      	mov	r1, r7
 800cff0:	f7f3 f94a 	bl	8000288 <__aeabi_dsub>
 800cff4:	f7f3 fdb0 	bl	8000b58 <__aeabi_d2iz>
 800cff8:	9b02      	ldr	r3, [sp, #8]
 800cffa:	f843 0b04 	str.w	r0, [r3], #4
 800cffe:	3d01      	subs	r5, #1
 800d000:	9302      	str	r3, [sp, #8]
 800d002:	ab70      	add	r3, sp, #448	; 0x1c0
 800d004:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00c:	4640      	mov	r0, r8
 800d00e:	4649      	mov	r1, r9
 800d010:	f7f3 f93c 	bl	800028c <__adddf3>
 800d014:	4606      	mov	r6, r0
 800d016:	460f      	mov	r7, r1
 800d018:	e75b      	b.n	800ced2 <__kernel_rem_pio2+0x10a>
 800d01a:	d105      	bne.n	800d028 <__kernel_rem_pio2+0x260>
 800d01c:	1e63      	subs	r3, r4, #1
 800d01e:	aa0c      	add	r2, sp, #48	; 0x30
 800d020:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d024:	15c3      	asrs	r3, r0, #23
 800d026:	e79b      	b.n	800cf60 <__kernel_rem_pio2+0x198>
 800d028:	4b38      	ldr	r3, [pc, #224]	; (800d10c <__kernel_rem_pio2+0x344>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	f7f3 fd6a 	bl	8000b04 <__aeabi_dcmpge>
 800d030:	2800      	cmp	r0, #0
 800d032:	d139      	bne.n	800d0a8 <__kernel_rem_pio2+0x2e0>
 800d034:	9002      	str	r0, [sp, #8]
 800d036:	2200      	movs	r2, #0
 800d038:	2300      	movs	r3, #0
 800d03a:	4630      	mov	r0, r6
 800d03c:	4639      	mov	r1, r7
 800d03e:	f7f3 fd43 	bl	8000ac8 <__aeabi_dcmpeq>
 800d042:	2800      	cmp	r0, #0
 800d044:	f000 80b4 	beq.w	800d1b0 <__kernel_rem_pio2+0x3e8>
 800d048:	f104 3bff 	add.w	fp, r4, #4294967295
 800d04c:	465b      	mov	r3, fp
 800d04e:	2200      	movs	r2, #0
 800d050:	9904      	ldr	r1, [sp, #16]
 800d052:	428b      	cmp	r3, r1
 800d054:	da65      	bge.n	800d122 <__kernel_rem_pio2+0x35a>
 800d056:	2a00      	cmp	r2, #0
 800d058:	d07b      	beq.n	800d152 <__kernel_rem_pio2+0x38a>
 800d05a:	ab0c      	add	r3, sp, #48	; 0x30
 800d05c:	f1aa 0a18 	sub.w	sl, sl, #24
 800d060:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800d064:	2b00      	cmp	r3, #0
 800d066:	f000 80a0 	beq.w	800d1aa <__kernel_rem_pio2+0x3e2>
 800d06a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800d0f0 <__kernel_rem_pio2+0x328>
 800d06e:	4650      	mov	r0, sl
 800d070:	f000 faaa 	bl	800d5c8 <scalbn>
 800d074:	4f23      	ldr	r7, [pc, #140]	; (800d104 <__kernel_rem_pio2+0x33c>)
 800d076:	ec55 4b10 	vmov	r4, r5, d0
 800d07a:	46d8      	mov	r8, fp
 800d07c:	2600      	movs	r6, #0
 800d07e:	f1b8 0f00 	cmp.w	r8, #0
 800d082:	f280 80cf 	bge.w	800d224 <__kernel_rem_pio2+0x45c>
 800d086:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800d0e8 <__kernel_rem_pio2+0x320>
 800d08a:	465f      	mov	r7, fp
 800d08c:	f04f 0800 	mov.w	r8, #0
 800d090:	2f00      	cmp	r7, #0
 800d092:	f2c0 80fd 	blt.w	800d290 <__kernel_rem_pio2+0x4c8>
 800d096:	ab70      	add	r3, sp, #448	; 0x1c0
 800d098:	f8df a074 	ldr.w	sl, [pc, #116]	; 800d110 <__kernel_rem_pio2+0x348>
 800d09c:	ec55 4b18 	vmov	r4, r5, d8
 800d0a0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800d0a4:	2600      	movs	r6, #0
 800d0a6:	e0e5      	b.n	800d274 <__kernel_rem_pio2+0x4ac>
 800d0a8:	2302      	movs	r3, #2
 800d0aa:	9302      	str	r3, [sp, #8]
 800d0ac:	e75c      	b.n	800cf68 <__kernel_rem_pio2+0x1a0>
 800d0ae:	f8db 3000 	ldr.w	r3, [fp]
 800d0b2:	b955      	cbnz	r5, 800d0ca <__kernel_rem_pio2+0x302>
 800d0b4:	b123      	cbz	r3, 800d0c0 <__kernel_rem_pio2+0x2f8>
 800d0b6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d0ba:	f8cb 3000 	str.w	r3, [fp]
 800d0be:	2301      	movs	r3, #1
 800d0c0:	3201      	adds	r2, #1
 800d0c2:	f10b 0b04 	add.w	fp, fp, #4
 800d0c6:	461d      	mov	r5, r3
 800d0c8:	e755      	b.n	800cf76 <__kernel_rem_pio2+0x1ae>
 800d0ca:	1acb      	subs	r3, r1, r3
 800d0cc:	f8cb 3000 	str.w	r3, [fp]
 800d0d0:	462b      	mov	r3, r5
 800d0d2:	e7f5      	b.n	800d0c0 <__kernel_rem_pio2+0x2f8>
 800d0d4:	1e62      	subs	r2, r4, #1
 800d0d6:	ab0c      	add	r3, sp, #48	; 0x30
 800d0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0dc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d0e0:	a90c      	add	r1, sp, #48	; 0x30
 800d0e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d0e6:	e754      	b.n	800cf92 <__kernel_rem_pio2+0x1ca>
	...
 800d0f4:	3ff00000 	.word	0x3ff00000
 800d0f8:	0800e5a0 	.word	0x0800e5a0
 800d0fc:	40200000 	.word	0x40200000
 800d100:	3ff00000 	.word	0x3ff00000
 800d104:	3e700000 	.word	0x3e700000
 800d108:	41700000 	.word	0x41700000
 800d10c:	3fe00000 	.word	0x3fe00000
 800d110:	0800e560 	.word	0x0800e560
 800d114:	1e62      	subs	r2, r4, #1
 800d116:	ab0c      	add	r3, sp, #48	; 0x30
 800d118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d11c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d120:	e7de      	b.n	800d0e0 <__kernel_rem_pio2+0x318>
 800d122:	a90c      	add	r1, sp, #48	; 0x30
 800d124:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d128:	3b01      	subs	r3, #1
 800d12a:	430a      	orrs	r2, r1
 800d12c:	e790      	b.n	800d050 <__kernel_rem_pio2+0x288>
 800d12e:	3301      	adds	r3, #1
 800d130:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d134:	2900      	cmp	r1, #0
 800d136:	d0fa      	beq.n	800d12e <__kernel_rem_pio2+0x366>
 800d138:	9a08      	ldr	r2, [sp, #32]
 800d13a:	18e3      	adds	r3, r4, r3
 800d13c:	18a6      	adds	r6, r4, r2
 800d13e:	aa20      	add	r2, sp, #128	; 0x80
 800d140:	1c65      	adds	r5, r4, #1
 800d142:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d146:	9302      	str	r3, [sp, #8]
 800d148:	9b02      	ldr	r3, [sp, #8]
 800d14a:	42ab      	cmp	r3, r5
 800d14c:	da04      	bge.n	800d158 <__kernel_rem_pio2+0x390>
 800d14e:	461c      	mov	r4, r3
 800d150:	e6b5      	b.n	800cebe <__kernel_rem_pio2+0xf6>
 800d152:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d154:	2301      	movs	r3, #1
 800d156:	e7eb      	b.n	800d130 <__kernel_rem_pio2+0x368>
 800d158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d15a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d15e:	f7f3 f9e1 	bl	8000524 <__aeabi_i2d>
 800d162:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d168:	46b3      	mov	fp, r6
 800d16a:	461c      	mov	r4, r3
 800d16c:	2700      	movs	r7, #0
 800d16e:	f04f 0800 	mov.w	r8, #0
 800d172:	f04f 0900 	mov.w	r9, #0
 800d176:	9b06      	ldr	r3, [sp, #24]
 800d178:	429f      	cmp	r7, r3
 800d17a:	dd06      	ble.n	800d18a <__kernel_rem_pio2+0x3c2>
 800d17c:	ab70      	add	r3, sp, #448	; 0x1c0
 800d17e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d182:	e9c3 8900 	strd	r8, r9, [r3]
 800d186:	3501      	adds	r5, #1
 800d188:	e7de      	b.n	800d148 <__kernel_rem_pio2+0x380>
 800d18a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d18e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d192:	f7f3 fa31 	bl	80005f8 <__aeabi_dmul>
 800d196:	4602      	mov	r2, r0
 800d198:	460b      	mov	r3, r1
 800d19a:	4640      	mov	r0, r8
 800d19c:	4649      	mov	r1, r9
 800d19e:	f7f3 f875 	bl	800028c <__adddf3>
 800d1a2:	3701      	adds	r7, #1
 800d1a4:	4680      	mov	r8, r0
 800d1a6:	4689      	mov	r9, r1
 800d1a8:	e7e5      	b.n	800d176 <__kernel_rem_pio2+0x3ae>
 800d1aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d1ae:	e754      	b.n	800d05a <__kernel_rem_pio2+0x292>
 800d1b0:	ec47 6b10 	vmov	d0, r6, r7
 800d1b4:	f1ca 0000 	rsb	r0, sl, #0
 800d1b8:	f000 fa06 	bl	800d5c8 <scalbn>
 800d1bc:	ec57 6b10 	vmov	r6, r7, d0
 800d1c0:	4b9f      	ldr	r3, [pc, #636]	; (800d440 <__kernel_rem_pio2+0x678>)
 800d1c2:	ee10 0a10 	vmov	r0, s0
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	4639      	mov	r1, r7
 800d1ca:	f7f3 fc9b 	bl	8000b04 <__aeabi_dcmpge>
 800d1ce:	b300      	cbz	r0, 800d212 <__kernel_rem_pio2+0x44a>
 800d1d0:	4b9c      	ldr	r3, [pc, #624]	; (800d444 <__kernel_rem_pio2+0x67c>)
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	4630      	mov	r0, r6
 800d1d6:	4639      	mov	r1, r7
 800d1d8:	f7f3 fa0e 	bl	80005f8 <__aeabi_dmul>
 800d1dc:	f7f3 fcbc 	bl	8000b58 <__aeabi_d2iz>
 800d1e0:	4605      	mov	r5, r0
 800d1e2:	f7f3 f99f 	bl	8000524 <__aeabi_i2d>
 800d1e6:	4b96      	ldr	r3, [pc, #600]	; (800d440 <__kernel_rem_pio2+0x678>)
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f7f3 fa05 	bl	80005f8 <__aeabi_dmul>
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	4639      	mov	r1, r7
 800d1f4:	4630      	mov	r0, r6
 800d1f6:	f7f3 f847 	bl	8000288 <__aeabi_dsub>
 800d1fa:	f7f3 fcad 	bl	8000b58 <__aeabi_d2iz>
 800d1fe:	f104 0b01 	add.w	fp, r4, #1
 800d202:	ab0c      	add	r3, sp, #48	; 0x30
 800d204:	f10a 0a18 	add.w	sl, sl, #24
 800d208:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d20c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800d210:	e72b      	b.n	800d06a <__kernel_rem_pio2+0x2a2>
 800d212:	4630      	mov	r0, r6
 800d214:	4639      	mov	r1, r7
 800d216:	f7f3 fc9f 	bl	8000b58 <__aeabi_d2iz>
 800d21a:	ab0c      	add	r3, sp, #48	; 0x30
 800d21c:	46a3      	mov	fp, r4
 800d21e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d222:	e722      	b.n	800d06a <__kernel_rem_pio2+0x2a2>
 800d224:	ab70      	add	r3, sp, #448	; 0x1c0
 800d226:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800d22a:	ab0c      	add	r3, sp, #48	; 0x30
 800d22c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d230:	f7f3 f978 	bl	8000524 <__aeabi_i2d>
 800d234:	4622      	mov	r2, r4
 800d236:	462b      	mov	r3, r5
 800d238:	f7f3 f9de 	bl	80005f8 <__aeabi_dmul>
 800d23c:	4632      	mov	r2, r6
 800d23e:	e9c9 0100 	strd	r0, r1, [r9]
 800d242:	463b      	mov	r3, r7
 800d244:	4620      	mov	r0, r4
 800d246:	4629      	mov	r1, r5
 800d248:	f7f3 f9d6 	bl	80005f8 <__aeabi_dmul>
 800d24c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d250:	4604      	mov	r4, r0
 800d252:	460d      	mov	r5, r1
 800d254:	e713      	b.n	800d07e <__kernel_rem_pio2+0x2b6>
 800d256:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d25a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d25e:	f7f3 f9cb 	bl	80005f8 <__aeabi_dmul>
 800d262:	4602      	mov	r2, r0
 800d264:	460b      	mov	r3, r1
 800d266:	4620      	mov	r0, r4
 800d268:	4629      	mov	r1, r5
 800d26a:	f7f3 f80f 	bl	800028c <__adddf3>
 800d26e:	3601      	adds	r6, #1
 800d270:	4604      	mov	r4, r0
 800d272:	460d      	mov	r5, r1
 800d274:	9b04      	ldr	r3, [sp, #16]
 800d276:	429e      	cmp	r6, r3
 800d278:	dc01      	bgt.n	800d27e <__kernel_rem_pio2+0x4b6>
 800d27a:	45b0      	cmp	r8, r6
 800d27c:	daeb      	bge.n	800d256 <__kernel_rem_pio2+0x48e>
 800d27e:	ab48      	add	r3, sp, #288	; 0x120
 800d280:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d284:	e9c3 4500 	strd	r4, r5, [r3]
 800d288:	3f01      	subs	r7, #1
 800d28a:	f108 0801 	add.w	r8, r8, #1
 800d28e:	e6ff      	b.n	800d090 <__kernel_rem_pio2+0x2c8>
 800d290:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d292:	2b02      	cmp	r3, #2
 800d294:	dc0b      	bgt.n	800d2ae <__kernel_rem_pio2+0x4e6>
 800d296:	2b00      	cmp	r3, #0
 800d298:	dc6e      	bgt.n	800d378 <__kernel_rem_pio2+0x5b0>
 800d29a:	d045      	beq.n	800d328 <__kernel_rem_pio2+0x560>
 800d29c:	9b07      	ldr	r3, [sp, #28]
 800d29e:	f003 0007 	and.w	r0, r3, #7
 800d2a2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d2a6:	ecbd 8b02 	vpop	{d8}
 800d2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d2b0:	2b03      	cmp	r3, #3
 800d2b2:	d1f3      	bne.n	800d29c <__kernel_rem_pio2+0x4d4>
 800d2b4:	ab48      	add	r3, sp, #288	; 0x120
 800d2b6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800d2ba:	46d0      	mov	r8, sl
 800d2bc:	46d9      	mov	r9, fp
 800d2be:	f1b9 0f00 	cmp.w	r9, #0
 800d2c2:	f1a8 0808 	sub.w	r8, r8, #8
 800d2c6:	dc64      	bgt.n	800d392 <__kernel_rem_pio2+0x5ca>
 800d2c8:	465c      	mov	r4, fp
 800d2ca:	2c01      	cmp	r4, #1
 800d2cc:	f1aa 0a08 	sub.w	sl, sl, #8
 800d2d0:	dc7e      	bgt.n	800d3d0 <__kernel_rem_pio2+0x608>
 800d2d2:	2000      	movs	r0, #0
 800d2d4:	2100      	movs	r1, #0
 800d2d6:	f1bb 0f01 	cmp.w	fp, #1
 800d2da:	f300 8097 	bgt.w	800d40c <__kernel_rem_pio2+0x644>
 800d2de:	9b02      	ldr	r3, [sp, #8]
 800d2e0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800d2e4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f040 8099 	bne.w	800d420 <__kernel_rem_pio2+0x658>
 800d2ee:	9b01      	ldr	r3, [sp, #4]
 800d2f0:	e9c3 5600 	strd	r5, r6, [r3]
 800d2f4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d2f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d2fc:	e7ce      	b.n	800d29c <__kernel_rem_pio2+0x4d4>
 800d2fe:	ab48      	add	r3, sp, #288	; 0x120
 800d300:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d308:	f7f2 ffc0 	bl	800028c <__adddf3>
 800d30c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d310:	f1bb 0f00 	cmp.w	fp, #0
 800d314:	daf3      	bge.n	800d2fe <__kernel_rem_pio2+0x536>
 800d316:	9b02      	ldr	r3, [sp, #8]
 800d318:	b113      	cbz	r3, 800d320 <__kernel_rem_pio2+0x558>
 800d31a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d31e:	4619      	mov	r1, r3
 800d320:	9b01      	ldr	r3, [sp, #4]
 800d322:	e9c3 0100 	strd	r0, r1, [r3]
 800d326:	e7b9      	b.n	800d29c <__kernel_rem_pio2+0x4d4>
 800d328:	2000      	movs	r0, #0
 800d32a:	2100      	movs	r1, #0
 800d32c:	e7f0      	b.n	800d310 <__kernel_rem_pio2+0x548>
 800d32e:	ab48      	add	r3, sp, #288	; 0x120
 800d330:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d338:	f7f2 ffa8 	bl	800028c <__adddf3>
 800d33c:	3c01      	subs	r4, #1
 800d33e:	2c00      	cmp	r4, #0
 800d340:	daf5      	bge.n	800d32e <__kernel_rem_pio2+0x566>
 800d342:	9b02      	ldr	r3, [sp, #8]
 800d344:	b1e3      	cbz	r3, 800d380 <__kernel_rem_pio2+0x5b8>
 800d346:	4602      	mov	r2, r0
 800d348:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d34c:	9c01      	ldr	r4, [sp, #4]
 800d34e:	e9c4 2300 	strd	r2, r3, [r4]
 800d352:	4602      	mov	r2, r0
 800d354:	460b      	mov	r3, r1
 800d356:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d35a:	f7f2 ff95 	bl	8000288 <__aeabi_dsub>
 800d35e:	ad4a      	add	r5, sp, #296	; 0x128
 800d360:	2401      	movs	r4, #1
 800d362:	45a3      	cmp	fp, r4
 800d364:	da0f      	bge.n	800d386 <__kernel_rem_pio2+0x5be>
 800d366:	9b02      	ldr	r3, [sp, #8]
 800d368:	b113      	cbz	r3, 800d370 <__kernel_rem_pio2+0x5a8>
 800d36a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d36e:	4619      	mov	r1, r3
 800d370:	9b01      	ldr	r3, [sp, #4]
 800d372:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d376:	e791      	b.n	800d29c <__kernel_rem_pio2+0x4d4>
 800d378:	465c      	mov	r4, fp
 800d37a:	2000      	movs	r0, #0
 800d37c:	2100      	movs	r1, #0
 800d37e:	e7de      	b.n	800d33e <__kernel_rem_pio2+0x576>
 800d380:	4602      	mov	r2, r0
 800d382:	460b      	mov	r3, r1
 800d384:	e7e2      	b.n	800d34c <__kernel_rem_pio2+0x584>
 800d386:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d38a:	f7f2 ff7f 	bl	800028c <__adddf3>
 800d38e:	3401      	adds	r4, #1
 800d390:	e7e7      	b.n	800d362 <__kernel_rem_pio2+0x59a>
 800d392:	e9d8 4500 	ldrd	r4, r5, [r8]
 800d396:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800d39a:	4620      	mov	r0, r4
 800d39c:	4632      	mov	r2, r6
 800d39e:	463b      	mov	r3, r7
 800d3a0:	4629      	mov	r1, r5
 800d3a2:	f7f2 ff73 	bl	800028c <__adddf3>
 800d3a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	4629      	mov	r1, r5
 800d3b2:	f7f2 ff69 	bl	8000288 <__aeabi_dsub>
 800d3b6:	4632      	mov	r2, r6
 800d3b8:	463b      	mov	r3, r7
 800d3ba:	f7f2 ff67 	bl	800028c <__adddf3>
 800d3be:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d3c2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800d3c6:	ed88 7b00 	vstr	d7, [r8]
 800d3ca:	f109 39ff 	add.w	r9, r9, #4294967295
 800d3ce:	e776      	b.n	800d2be <__kernel_rem_pio2+0x4f6>
 800d3d0:	e9da 8900 	ldrd	r8, r9, [sl]
 800d3d4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d3d8:	4640      	mov	r0, r8
 800d3da:	4632      	mov	r2, r6
 800d3dc:	463b      	mov	r3, r7
 800d3de:	4649      	mov	r1, r9
 800d3e0:	f7f2 ff54 	bl	800028c <__adddf3>
 800d3e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	4640      	mov	r0, r8
 800d3ee:	4649      	mov	r1, r9
 800d3f0:	f7f2 ff4a 	bl	8000288 <__aeabi_dsub>
 800d3f4:	4632      	mov	r2, r6
 800d3f6:	463b      	mov	r3, r7
 800d3f8:	f7f2 ff48 	bl	800028c <__adddf3>
 800d3fc:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d400:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d404:	ed8a 7b00 	vstr	d7, [sl]
 800d408:	3c01      	subs	r4, #1
 800d40a:	e75e      	b.n	800d2ca <__kernel_rem_pio2+0x502>
 800d40c:	ab48      	add	r3, sp, #288	; 0x120
 800d40e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d416:	f7f2 ff39 	bl	800028c <__adddf3>
 800d41a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d41e:	e75a      	b.n	800d2d6 <__kernel_rem_pio2+0x50e>
 800d420:	9b01      	ldr	r3, [sp, #4]
 800d422:	9a01      	ldr	r2, [sp, #4]
 800d424:	601d      	str	r5, [r3, #0]
 800d426:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d42a:	605c      	str	r4, [r3, #4]
 800d42c:	609f      	str	r7, [r3, #8]
 800d42e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d432:	60d3      	str	r3, [r2, #12]
 800d434:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d438:	6110      	str	r0, [r2, #16]
 800d43a:	6153      	str	r3, [r2, #20]
 800d43c:	e72e      	b.n	800d29c <__kernel_rem_pio2+0x4d4>
 800d43e:	bf00      	nop
 800d440:	41700000 	.word	0x41700000
 800d444:	3e700000 	.word	0x3e700000

0800d448 <__kernel_sin>:
 800d448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d44c:	ed2d 8b04 	vpush	{d8-d9}
 800d450:	eeb0 8a41 	vmov.f32	s16, s2
 800d454:	eef0 8a61 	vmov.f32	s17, s3
 800d458:	ec55 4b10 	vmov	r4, r5, d0
 800d45c:	b083      	sub	sp, #12
 800d45e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d462:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d466:	9001      	str	r0, [sp, #4]
 800d468:	da06      	bge.n	800d478 <__kernel_sin+0x30>
 800d46a:	ee10 0a10 	vmov	r0, s0
 800d46e:	4629      	mov	r1, r5
 800d470:	f7f3 fb72 	bl	8000b58 <__aeabi_d2iz>
 800d474:	2800      	cmp	r0, #0
 800d476:	d051      	beq.n	800d51c <__kernel_sin+0xd4>
 800d478:	4622      	mov	r2, r4
 800d47a:	462b      	mov	r3, r5
 800d47c:	4620      	mov	r0, r4
 800d47e:	4629      	mov	r1, r5
 800d480:	f7f3 f8ba 	bl	80005f8 <__aeabi_dmul>
 800d484:	4682      	mov	sl, r0
 800d486:	468b      	mov	fp, r1
 800d488:	4602      	mov	r2, r0
 800d48a:	460b      	mov	r3, r1
 800d48c:	4620      	mov	r0, r4
 800d48e:	4629      	mov	r1, r5
 800d490:	f7f3 f8b2 	bl	80005f8 <__aeabi_dmul>
 800d494:	a341      	add	r3, pc, #260	; (adr r3, 800d59c <__kernel_sin+0x154>)
 800d496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49a:	4680      	mov	r8, r0
 800d49c:	4689      	mov	r9, r1
 800d49e:	4650      	mov	r0, sl
 800d4a0:	4659      	mov	r1, fp
 800d4a2:	f7f3 f8a9 	bl	80005f8 <__aeabi_dmul>
 800d4a6:	a33f      	add	r3, pc, #252	; (adr r3, 800d5a4 <__kernel_sin+0x15c>)
 800d4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ac:	f7f2 feec 	bl	8000288 <__aeabi_dsub>
 800d4b0:	4652      	mov	r2, sl
 800d4b2:	465b      	mov	r3, fp
 800d4b4:	f7f3 f8a0 	bl	80005f8 <__aeabi_dmul>
 800d4b8:	a33c      	add	r3, pc, #240	; (adr r3, 800d5ac <__kernel_sin+0x164>)
 800d4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4be:	f7f2 fee5 	bl	800028c <__adddf3>
 800d4c2:	4652      	mov	r2, sl
 800d4c4:	465b      	mov	r3, fp
 800d4c6:	f7f3 f897 	bl	80005f8 <__aeabi_dmul>
 800d4ca:	a33a      	add	r3, pc, #232	; (adr r3, 800d5b4 <__kernel_sin+0x16c>)
 800d4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d0:	f7f2 feda 	bl	8000288 <__aeabi_dsub>
 800d4d4:	4652      	mov	r2, sl
 800d4d6:	465b      	mov	r3, fp
 800d4d8:	f7f3 f88e 	bl	80005f8 <__aeabi_dmul>
 800d4dc:	a337      	add	r3, pc, #220	; (adr r3, 800d5bc <__kernel_sin+0x174>)
 800d4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e2:	f7f2 fed3 	bl	800028c <__adddf3>
 800d4e6:	9b01      	ldr	r3, [sp, #4]
 800d4e8:	4606      	mov	r6, r0
 800d4ea:	460f      	mov	r7, r1
 800d4ec:	b9eb      	cbnz	r3, 800d52a <__kernel_sin+0xe2>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	4650      	mov	r0, sl
 800d4f4:	4659      	mov	r1, fp
 800d4f6:	f7f3 f87f 	bl	80005f8 <__aeabi_dmul>
 800d4fa:	a325      	add	r3, pc, #148	; (adr r3, 800d590 <__kernel_sin+0x148>)
 800d4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d500:	f7f2 fec2 	bl	8000288 <__aeabi_dsub>
 800d504:	4642      	mov	r2, r8
 800d506:	464b      	mov	r3, r9
 800d508:	f7f3 f876 	bl	80005f8 <__aeabi_dmul>
 800d50c:	4602      	mov	r2, r0
 800d50e:	460b      	mov	r3, r1
 800d510:	4620      	mov	r0, r4
 800d512:	4629      	mov	r1, r5
 800d514:	f7f2 feba 	bl	800028c <__adddf3>
 800d518:	4604      	mov	r4, r0
 800d51a:	460d      	mov	r5, r1
 800d51c:	ec45 4b10 	vmov	d0, r4, r5
 800d520:	b003      	add	sp, #12
 800d522:	ecbd 8b04 	vpop	{d8-d9}
 800d526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d52a:	4b1b      	ldr	r3, [pc, #108]	; (800d598 <__kernel_sin+0x150>)
 800d52c:	ec51 0b18 	vmov	r0, r1, d8
 800d530:	2200      	movs	r2, #0
 800d532:	f7f3 f861 	bl	80005f8 <__aeabi_dmul>
 800d536:	4632      	mov	r2, r6
 800d538:	ec41 0b19 	vmov	d9, r0, r1
 800d53c:	463b      	mov	r3, r7
 800d53e:	4640      	mov	r0, r8
 800d540:	4649      	mov	r1, r9
 800d542:	f7f3 f859 	bl	80005f8 <__aeabi_dmul>
 800d546:	4602      	mov	r2, r0
 800d548:	460b      	mov	r3, r1
 800d54a:	ec51 0b19 	vmov	r0, r1, d9
 800d54e:	f7f2 fe9b 	bl	8000288 <__aeabi_dsub>
 800d552:	4652      	mov	r2, sl
 800d554:	465b      	mov	r3, fp
 800d556:	f7f3 f84f 	bl	80005f8 <__aeabi_dmul>
 800d55a:	ec53 2b18 	vmov	r2, r3, d8
 800d55e:	f7f2 fe93 	bl	8000288 <__aeabi_dsub>
 800d562:	a30b      	add	r3, pc, #44	; (adr r3, 800d590 <__kernel_sin+0x148>)
 800d564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d568:	4606      	mov	r6, r0
 800d56a:	460f      	mov	r7, r1
 800d56c:	4640      	mov	r0, r8
 800d56e:	4649      	mov	r1, r9
 800d570:	f7f3 f842 	bl	80005f8 <__aeabi_dmul>
 800d574:	4602      	mov	r2, r0
 800d576:	460b      	mov	r3, r1
 800d578:	4630      	mov	r0, r6
 800d57a:	4639      	mov	r1, r7
 800d57c:	f7f2 fe86 	bl	800028c <__adddf3>
 800d580:	4602      	mov	r2, r0
 800d582:	460b      	mov	r3, r1
 800d584:	4620      	mov	r0, r4
 800d586:	4629      	mov	r1, r5
 800d588:	f7f2 fe7e 	bl	8000288 <__aeabi_dsub>
 800d58c:	e7c4      	b.n	800d518 <__kernel_sin+0xd0>
 800d58e:	bf00      	nop
 800d590:	55555549 	.word	0x55555549
 800d594:	3fc55555 	.word	0x3fc55555
 800d598:	3fe00000 	.word	0x3fe00000
 800d59c:	5acfd57c 	.word	0x5acfd57c
 800d5a0:	3de5d93a 	.word	0x3de5d93a
 800d5a4:	8a2b9ceb 	.word	0x8a2b9ceb
 800d5a8:	3e5ae5e6 	.word	0x3e5ae5e6
 800d5ac:	57b1fe7d 	.word	0x57b1fe7d
 800d5b0:	3ec71de3 	.word	0x3ec71de3
 800d5b4:	19c161d5 	.word	0x19c161d5
 800d5b8:	3f2a01a0 	.word	0x3f2a01a0
 800d5bc:	1110f8a6 	.word	0x1110f8a6
 800d5c0:	3f811111 	.word	0x3f811111
 800d5c4:	00000000 	.word	0x00000000

0800d5c8 <scalbn>:
 800d5c8:	b570      	push	{r4, r5, r6, lr}
 800d5ca:	ec55 4b10 	vmov	r4, r5, d0
 800d5ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d5d2:	4606      	mov	r6, r0
 800d5d4:	462b      	mov	r3, r5
 800d5d6:	b99a      	cbnz	r2, 800d600 <scalbn+0x38>
 800d5d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d5dc:	4323      	orrs	r3, r4
 800d5de:	d036      	beq.n	800d64e <scalbn+0x86>
 800d5e0:	4b39      	ldr	r3, [pc, #228]	; (800d6c8 <scalbn+0x100>)
 800d5e2:	4629      	mov	r1, r5
 800d5e4:	ee10 0a10 	vmov	r0, s0
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	f7f3 f805 	bl	80005f8 <__aeabi_dmul>
 800d5ee:	4b37      	ldr	r3, [pc, #220]	; (800d6cc <scalbn+0x104>)
 800d5f0:	429e      	cmp	r6, r3
 800d5f2:	4604      	mov	r4, r0
 800d5f4:	460d      	mov	r5, r1
 800d5f6:	da10      	bge.n	800d61a <scalbn+0x52>
 800d5f8:	a32b      	add	r3, pc, #172	; (adr r3, 800d6a8 <scalbn+0xe0>)
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	e03a      	b.n	800d676 <scalbn+0xae>
 800d600:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d604:	428a      	cmp	r2, r1
 800d606:	d10c      	bne.n	800d622 <scalbn+0x5a>
 800d608:	ee10 2a10 	vmov	r2, s0
 800d60c:	4620      	mov	r0, r4
 800d60e:	4629      	mov	r1, r5
 800d610:	f7f2 fe3c 	bl	800028c <__adddf3>
 800d614:	4604      	mov	r4, r0
 800d616:	460d      	mov	r5, r1
 800d618:	e019      	b.n	800d64e <scalbn+0x86>
 800d61a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d61e:	460b      	mov	r3, r1
 800d620:	3a36      	subs	r2, #54	; 0x36
 800d622:	4432      	add	r2, r6
 800d624:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d628:	428a      	cmp	r2, r1
 800d62a:	dd08      	ble.n	800d63e <scalbn+0x76>
 800d62c:	2d00      	cmp	r5, #0
 800d62e:	a120      	add	r1, pc, #128	; (adr r1, 800d6b0 <scalbn+0xe8>)
 800d630:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d634:	da1c      	bge.n	800d670 <scalbn+0xa8>
 800d636:	a120      	add	r1, pc, #128	; (adr r1, 800d6b8 <scalbn+0xf0>)
 800d638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d63c:	e018      	b.n	800d670 <scalbn+0xa8>
 800d63e:	2a00      	cmp	r2, #0
 800d640:	dd08      	ble.n	800d654 <scalbn+0x8c>
 800d642:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d646:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d64a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d64e:	ec45 4b10 	vmov	d0, r4, r5
 800d652:	bd70      	pop	{r4, r5, r6, pc}
 800d654:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d658:	da19      	bge.n	800d68e <scalbn+0xc6>
 800d65a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d65e:	429e      	cmp	r6, r3
 800d660:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d664:	dd0a      	ble.n	800d67c <scalbn+0xb4>
 800d666:	a112      	add	r1, pc, #72	; (adr r1, 800d6b0 <scalbn+0xe8>)
 800d668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d1e2      	bne.n	800d636 <scalbn+0x6e>
 800d670:	a30f      	add	r3, pc, #60	; (adr r3, 800d6b0 <scalbn+0xe8>)
 800d672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d676:	f7f2 ffbf 	bl	80005f8 <__aeabi_dmul>
 800d67a:	e7cb      	b.n	800d614 <scalbn+0x4c>
 800d67c:	a10a      	add	r1, pc, #40	; (adr r1, 800d6a8 <scalbn+0xe0>)
 800d67e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d0b8      	beq.n	800d5f8 <scalbn+0x30>
 800d686:	a10e      	add	r1, pc, #56	; (adr r1, 800d6c0 <scalbn+0xf8>)
 800d688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d68c:	e7b4      	b.n	800d5f8 <scalbn+0x30>
 800d68e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d692:	3236      	adds	r2, #54	; 0x36
 800d694:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d698:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d69c:	4620      	mov	r0, r4
 800d69e:	4b0c      	ldr	r3, [pc, #48]	; (800d6d0 <scalbn+0x108>)
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	e7e8      	b.n	800d676 <scalbn+0xae>
 800d6a4:	f3af 8000 	nop.w
 800d6a8:	c2f8f359 	.word	0xc2f8f359
 800d6ac:	01a56e1f 	.word	0x01a56e1f
 800d6b0:	8800759c 	.word	0x8800759c
 800d6b4:	7e37e43c 	.word	0x7e37e43c
 800d6b8:	8800759c 	.word	0x8800759c
 800d6bc:	fe37e43c 	.word	0xfe37e43c
 800d6c0:	c2f8f359 	.word	0xc2f8f359
 800d6c4:	81a56e1f 	.word	0x81a56e1f
 800d6c8:	43500000 	.word	0x43500000
 800d6cc:	ffff3cb0 	.word	0xffff3cb0
 800d6d0:	3c900000 	.word	0x3c900000

0800d6d4 <_init>:
 800d6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6d6:	bf00      	nop
 800d6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6da:	bc08      	pop	{r3}
 800d6dc:	469e      	mov	lr, r3
 800d6de:	4770      	bx	lr

0800d6e0 <_fini>:
 800d6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e2:	bf00      	nop
 800d6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6e6:	bc08      	pop	{r3}
 800d6e8:	469e      	mov	lr, r3
 800d6ea:	4770      	bx	lr
