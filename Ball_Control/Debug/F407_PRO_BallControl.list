
F407_PRO_BallControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f34c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d6c8  0800f4e0  0800f4e0  0001f4e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cba8  0801cba8  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801cba8  0801cba8  0002cba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cbb0  0801cbb0  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cbb0  0801cbb0  0002cbb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cbb4  0801cbb4  0002cbb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0801cbb8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  200001e8  0801cda0  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  0801cda0  000305f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c46e  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c4c  00000000  00000000  0004c686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  000502d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  000516e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002567d  00000000  00000000  00052978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a5dc  00000000  00000000  00077ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d35d2  00000000  00000000  000925d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00165ba3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000681c  00000000  00000000  00165bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f4c4 	.word	0x0800f4c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800f4c4 	.word	0x0800f4c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <keyboard_scan>:
 *      Author: Francis
 */

#include "keyboard.h"

uint8_t keyboard_scan(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	uint8_t i, keynum = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	71bb      	strb	r3, [r7, #6]
	static uint8_t lastnum = 0;
	if (Row1_INPUT_Read == GPIO_PIN_RESET) {			//当有按键按下
 8000f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8e:	48b8      	ldr	r0, [pc, #736]	; (8001270 <keyboard_scan+0x2f0>)
 8000f90:	f006 fef4 	bl	8007d7c <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d167      	bne.n	800106a <keyboard_scan+0xea>
		HAL_Delay(20);
 8000f9a:	2014      	movs	r0, #20
 8000f9c:	f006 f81a 	bl	8006fd4 <HAL_Delay>
		if (Row1_INPUT_Read == GPIO_PIN_RESET) { //消抖
 8000fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa4:	48b2      	ldr	r0, [pc, #712]	; (8001270 <keyboard_scan+0x2f0>)
 8000fa6:	f006 fee9 	bl	8007d7c <HAL_GPIO_ReadPin>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f040 81c7 	bne.w	8001340 <keyboard_scan+0x3c0>
			for (i = 1; i <= 4; i++) {
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	e054      	b.n	8001062 <keyboard_scan+0xe2>
				if (i == 1)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d105      	bne.n	8000fca <keyboard_scan+0x4a>
					Column1_OUT_High;		//逐个拉低每列的IO
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2108      	movs	r1, #8
 8000fc2:	48ab      	ldr	r0, [pc, #684]	; (8001270 <keyboard_scan+0x2f0>)
 8000fc4:	f006 fef2 	bl	8007dac <HAL_GPIO_WritePin>
 8000fc8:	e01a      	b.n	8001000 <keyboard_scan+0x80>
				else if (i == 2)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d105      	bne.n	8000fdc <keyboard_scan+0x5c>
					Column2_OUT_High;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2120      	movs	r1, #32
 8000fd4:	48a6      	ldr	r0, [pc, #664]	; (8001270 <keyboard_scan+0x2f0>)
 8000fd6:	f006 fee9 	bl	8007dac <HAL_GPIO_WritePin>
 8000fda:	e011      	b.n	8001000 <keyboard_scan+0x80>
				else if (i == 3)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d105      	bne.n	8000fee <keyboard_scan+0x6e>
					Column3_OUT_High;
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2180      	movs	r1, #128	; 0x80
 8000fe6:	48a2      	ldr	r0, [pc, #648]	; (8001270 <keyboard_scan+0x2f0>)
 8000fe8:	f006 fee0 	bl	8007dac <HAL_GPIO_WritePin>
 8000fec:	e008      	b.n	8001000 <keyboard_scan+0x80>
				else if (i == 4)
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d105      	bne.n	8001000 <keyboard_scan+0x80>
					Column4_OUT_High;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffa:	489d      	ldr	r0, [pc, #628]	; (8001270 <keyboard_scan+0x2f0>)
 8000ffc:	f006 fed6 	bl	8007dac <HAL_GPIO_WritePin>

				if (Row1_INPUT_Read == GPIO_PIN_SET) //如果检测到行IO电平跟着变化，则判断为该按键按下
 8001000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001004:	489a      	ldr	r0, [pc, #616]	; (8001270 <keyboard_scan+0x2f0>)
 8001006:	f006 feb9 	bl	8007d7c <HAL_GPIO_ReadPin>
 800100a:	4603      	mov	r3, r0
 800100c:	2b01      	cmp	r3, #1
 800100e:	d101      	bne.n	8001014 <keyboard_scan+0x94>
					keynum = i;
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	71bb      	strb	r3, [r7, #6]

				if (i == 1)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d105      	bne.n	8001026 <keyboard_scan+0xa6>
					Column1_OUT_Low;
 800101a:	2200      	movs	r2, #0
 800101c:	2108      	movs	r1, #8
 800101e:	4894      	ldr	r0, [pc, #592]	; (8001270 <keyboard_scan+0x2f0>)
 8001020:	f006 fec4 	bl	8007dac <HAL_GPIO_WritePin>
 8001024:	e01a      	b.n	800105c <keyboard_scan+0xdc>
				else if (i == 2)
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d105      	bne.n	8001038 <keyboard_scan+0xb8>
					Column2_OUT_Low;
 800102c:	2200      	movs	r2, #0
 800102e:	2120      	movs	r1, #32
 8001030:	488f      	ldr	r0, [pc, #572]	; (8001270 <keyboard_scan+0x2f0>)
 8001032:	f006 febb 	bl	8007dac <HAL_GPIO_WritePin>
 8001036:	e011      	b.n	800105c <keyboard_scan+0xdc>
				else if (i == 3)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b03      	cmp	r3, #3
 800103c:	d105      	bne.n	800104a <keyboard_scan+0xca>
					Column3_OUT_Low;	//每次列IO电平操作之后记得复原
 800103e:	2200      	movs	r2, #0
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	488b      	ldr	r0, [pc, #556]	; (8001270 <keyboard_scan+0x2f0>)
 8001044:	f006 feb2 	bl	8007dac <HAL_GPIO_WritePin>
 8001048:	e008      	b.n	800105c <keyboard_scan+0xdc>
				else if (i == 4)
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b04      	cmp	r3, #4
 800104e:	d105      	bne.n	800105c <keyboard_scan+0xdc>
					Column4_OUT_Low;
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001056:	4886      	ldr	r0, [pc, #536]	; (8001270 <keyboard_scan+0x2f0>)
 8001058:	f006 fea8 	bl	8007dac <HAL_GPIO_WritePin>
			for (i = 1; i <= 4; i++) {
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	3301      	adds	r3, #1
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b04      	cmp	r3, #4
 8001066:	d9a7      	bls.n	8000fb8 <keyboard_scan+0x38>
 8001068:	e16a      	b.n	8001340 <keyboard_scan+0x3c0>
			}
		}
	} else if (Row2_INPUT_Read == GPIO_PIN_RESET) {
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	4880      	ldr	r0, [pc, #512]	; (8001270 <keyboard_scan+0x2f0>)
 800106e:	f006 fe85 	bl	8007d7c <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d166      	bne.n	8001146 <keyboard_scan+0x1c6>
		HAL_Delay(20);
 8001078:	2014      	movs	r0, #20
 800107a:	f005 ffab 	bl	8006fd4 <HAL_Delay>
		if (Row2_INPUT_Read == GPIO_PIN_RESET) { //消抖
 800107e:	2140      	movs	r1, #64	; 0x40
 8001080:	487b      	ldr	r0, [pc, #492]	; (8001270 <keyboard_scan+0x2f0>)
 8001082:	f006 fe7b 	bl	8007d7c <HAL_GPIO_ReadPin>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	f040 8159 	bne.w	8001340 <keyboard_scan+0x3c0>
			for (i = 1; i <= 4; i++) {
 800108e:	2301      	movs	r3, #1
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	e054      	b.n	800113e <keyboard_scan+0x1be>
				if (i == 1)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d105      	bne.n	80010a6 <keyboard_scan+0x126>
					Column1_OUT_High;
 800109a:	2201      	movs	r2, #1
 800109c:	2108      	movs	r1, #8
 800109e:	4874      	ldr	r0, [pc, #464]	; (8001270 <keyboard_scan+0x2f0>)
 80010a0:	f006 fe84 	bl	8007dac <HAL_GPIO_WritePin>
 80010a4:	e01a      	b.n	80010dc <keyboard_scan+0x15c>
				else if (i == 2)
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d105      	bne.n	80010b8 <keyboard_scan+0x138>
					Column2_OUT_High;
 80010ac:	2201      	movs	r2, #1
 80010ae:	2120      	movs	r1, #32
 80010b0:	486f      	ldr	r0, [pc, #444]	; (8001270 <keyboard_scan+0x2f0>)
 80010b2:	f006 fe7b 	bl	8007dac <HAL_GPIO_WritePin>
 80010b6:	e011      	b.n	80010dc <keyboard_scan+0x15c>
				else if (i == 3)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d105      	bne.n	80010ca <keyboard_scan+0x14a>
					Column3_OUT_High;
 80010be:	2201      	movs	r2, #1
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	486b      	ldr	r0, [pc, #428]	; (8001270 <keyboard_scan+0x2f0>)
 80010c4:	f006 fe72 	bl	8007dac <HAL_GPIO_WritePin>
 80010c8:	e008      	b.n	80010dc <keyboard_scan+0x15c>
				else if (i == 4)
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d105      	bne.n	80010dc <keyboard_scan+0x15c>
					Column4_OUT_High;
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d6:	4866      	ldr	r0, [pc, #408]	; (8001270 <keyboard_scan+0x2f0>)
 80010d8:	f006 fe68 	bl	8007dac <HAL_GPIO_WritePin>

				if (Row2_INPUT_Read == GPIO_PIN_SET)
 80010dc:	2140      	movs	r1, #64	; 0x40
 80010de:	4864      	ldr	r0, [pc, #400]	; (8001270 <keyboard_scan+0x2f0>)
 80010e0:	f006 fe4c 	bl	8007d7c <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d102      	bne.n	80010f0 <keyboard_scan+0x170>
					keynum = i + 4;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	3304      	adds	r3, #4
 80010ee:	71bb      	strb	r3, [r7, #6]

				if (i == 1)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d105      	bne.n	8001102 <keyboard_scan+0x182>
					Column1_OUT_Low;
 80010f6:	2200      	movs	r2, #0
 80010f8:	2108      	movs	r1, #8
 80010fa:	485d      	ldr	r0, [pc, #372]	; (8001270 <keyboard_scan+0x2f0>)
 80010fc:	f006 fe56 	bl	8007dac <HAL_GPIO_WritePin>
 8001100:	e01a      	b.n	8001138 <keyboard_scan+0x1b8>
				else if (i == 2)
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d105      	bne.n	8001114 <keyboard_scan+0x194>
					Column2_OUT_Low;
 8001108:	2200      	movs	r2, #0
 800110a:	2120      	movs	r1, #32
 800110c:	4858      	ldr	r0, [pc, #352]	; (8001270 <keyboard_scan+0x2f0>)
 800110e:	f006 fe4d 	bl	8007dac <HAL_GPIO_WritePin>
 8001112:	e011      	b.n	8001138 <keyboard_scan+0x1b8>
				else if (i == 3)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d105      	bne.n	8001126 <keyboard_scan+0x1a6>
					Column3_OUT_Low;
 800111a:	2200      	movs	r2, #0
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	4854      	ldr	r0, [pc, #336]	; (8001270 <keyboard_scan+0x2f0>)
 8001120:	f006 fe44 	bl	8007dac <HAL_GPIO_WritePin>
 8001124:	e008      	b.n	8001138 <keyboard_scan+0x1b8>
				else if (i == 4)
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b04      	cmp	r3, #4
 800112a:	d105      	bne.n	8001138 <keyboard_scan+0x1b8>
					Column4_OUT_Low;
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001132:	484f      	ldr	r0, [pc, #316]	; (8001270 <keyboard_scan+0x2f0>)
 8001134:	f006 fe3a 	bl	8007dac <HAL_GPIO_WritePin>
			for (i = 1; i <= 4; i++) {
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	3301      	adds	r3, #1
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b04      	cmp	r3, #4
 8001142:	d9a7      	bls.n	8001094 <keyboard_scan+0x114>
 8001144:	e0fc      	b.n	8001340 <keyboard_scan+0x3c0>

			}
		}
	} else if (Row3_INPUT_Read == GPIO_PIN_RESET) {
 8001146:	2110      	movs	r1, #16
 8001148:	4849      	ldr	r0, [pc, #292]	; (8001270 <keyboard_scan+0x2f0>)
 800114a:	f006 fe17 	bl	8007d7c <HAL_GPIO_ReadPin>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d166      	bne.n	8001222 <keyboard_scan+0x2a2>
		HAL_Delay(20);
 8001154:	2014      	movs	r0, #20
 8001156:	f005 ff3d 	bl	8006fd4 <HAL_Delay>
		if (Row3_INPUT_Read == GPIO_PIN_RESET) { //消抖
 800115a:	2110      	movs	r1, #16
 800115c:	4844      	ldr	r0, [pc, #272]	; (8001270 <keyboard_scan+0x2f0>)
 800115e:	f006 fe0d 	bl	8007d7c <HAL_GPIO_ReadPin>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	f040 80eb 	bne.w	8001340 <keyboard_scan+0x3c0>
			for (i = 1; i <= 4; i++) {
 800116a:	2301      	movs	r3, #1
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	e054      	b.n	800121a <keyboard_scan+0x29a>
				if (i == 1)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d105      	bne.n	8001182 <keyboard_scan+0x202>
					Column1_OUT_High;
 8001176:	2201      	movs	r2, #1
 8001178:	2108      	movs	r1, #8
 800117a:	483d      	ldr	r0, [pc, #244]	; (8001270 <keyboard_scan+0x2f0>)
 800117c:	f006 fe16 	bl	8007dac <HAL_GPIO_WritePin>
 8001180:	e01a      	b.n	80011b8 <keyboard_scan+0x238>
				else if (i == 2)
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d105      	bne.n	8001194 <keyboard_scan+0x214>
					Column2_OUT_High;
 8001188:	2201      	movs	r2, #1
 800118a:	2120      	movs	r1, #32
 800118c:	4838      	ldr	r0, [pc, #224]	; (8001270 <keyboard_scan+0x2f0>)
 800118e:	f006 fe0d 	bl	8007dac <HAL_GPIO_WritePin>
 8001192:	e011      	b.n	80011b8 <keyboard_scan+0x238>
				else if (i == 3)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	2b03      	cmp	r3, #3
 8001198:	d105      	bne.n	80011a6 <keyboard_scan+0x226>
					Column3_OUT_High;
 800119a:	2201      	movs	r2, #1
 800119c:	2180      	movs	r1, #128	; 0x80
 800119e:	4834      	ldr	r0, [pc, #208]	; (8001270 <keyboard_scan+0x2f0>)
 80011a0:	f006 fe04 	bl	8007dac <HAL_GPIO_WritePin>
 80011a4:	e008      	b.n	80011b8 <keyboard_scan+0x238>
				else if (i == 4)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d105      	bne.n	80011b8 <keyboard_scan+0x238>
					Column4_OUT_High;
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b2:	482f      	ldr	r0, [pc, #188]	; (8001270 <keyboard_scan+0x2f0>)
 80011b4:	f006 fdfa 	bl	8007dac <HAL_GPIO_WritePin>

				if (Row3_INPUT_Read == GPIO_PIN_SET)
 80011b8:	2110      	movs	r1, #16
 80011ba:	482d      	ldr	r0, [pc, #180]	; (8001270 <keyboard_scan+0x2f0>)
 80011bc:	f006 fdde 	bl	8007d7c <HAL_GPIO_ReadPin>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d102      	bne.n	80011cc <keyboard_scan+0x24c>
					keynum = i + 8;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	3308      	adds	r3, #8
 80011ca:	71bb      	strb	r3, [r7, #6]

				if (i == 1)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d105      	bne.n	80011de <keyboard_scan+0x25e>
					Column1_OUT_Low;
 80011d2:	2200      	movs	r2, #0
 80011d4:	2108      	movs	r1, #8
 80011d6:	4826      	ldr	r0, [pc, #152]	; (8001270 <keyboard_scan+0x2f0>)
 80011d8:	f006 fde8 	bl	8007dac <HAL_GPIO_WritePin>
 80011dc:	e01a      	b.n	8001214 <keyboard_scan+0x294>
				else if (i == 2)
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d105      	bne.n	80011f0 <keyboard_scan+0x270>
					Column2_OUT_Low;
 80011e4:	2200      	movs	r2, #0
 80011e6:	2120      	movs	r1, #32
 80011e8:	4821      	ldr	r0, [pc, #132]	; (8001270 <keyboard_scan+0x2f0>)
 80011ea:	f006 fddf 	bl	8007dac <HAL_GPIO_WritePin>
 80011ee:	e011      	b.n	8001214 <keyboard_scan+0x294>
				else if (i == 3)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d105      	bne.n	8001202 <keyboard_scan+0x282>
					Column3_OUT_Low;
 80011f6:	2200      	movs	r2, #0
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	481d      	ldr	r0, [pc, #116]	; (8001270 <keyboard_scan+0x2f0>)
 80011fc:	f006 fdd6 	bl	8007dac <HAL_GPIO_WritePin>
 8001200:	e008      	b.n	8001214 <keyboard_scan+0x294>
				else if (i == 4)
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b04      	cmp	r3, #4
 8001206:	d105      	bne.n	8001214 <keyboard_scan+0x294>
					Column4_OUT_Low;
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800120e:	4818      	ldr	r0, [pc, #96]	; (8001270 <keyboard_scan+0x2f0>)
 8001210:	f006 fdcc 	bl	8007dac <HAL_GPIO_WritePin>
			for (i = 1; i <= 4; i++) {
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	3301      	adds	r3, #1
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b04      	cmp	r3, #4
 800121e:	d9a7      	bls.n	8001170 <keyboard_scan+0x1f0>
 8001220:	e08e      	b.n	8001340 <keyboard_scan+0x3c0>

			}
		}
	} else if (Row4_INPUT_Read == GPIO_PIN_RESET) {
 8001222:	2104      	movs	r1, #4
 8001224:	4812      	ldr	r0, [pc, #72]	; (8001270 <keyboard_scan+0x2f0>)
 8001226:	f006 fda9 	bl	8007d7c <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d168      	bne.n	8001302 <keyboard_scan+0x382>
		HAL_Delay(20);
 8001230:	2014      	movs	r0, #20
 8001232:	f005 fecf 	bl	8006fd4 <HAL_Delay>
		if (Row4_INPUT_Read == GPIO_PIN_RESET) { //消抖
 8001236:	2104      	movs	r1, #4
 8001238:	480d      	ldr	r0, [pc, #52]	; (8001270 <keyboard_scan+0x2f0>)
 800123a:	f006 fd9f 	bl	8007d7c <HAL_GPIO_ReadPin>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d17d      	bne.n	8001340 <keyboard_scan+0x3c0>
			for (i = 1; i <= 4; i++) {
 8001244:	2301      	movs	r3, #1
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	e057      	b.n	80012fa <keyboard_scan+0x37a>
				if (i == 1)
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d105      	bne.n	800125c <keyboard_scan+0x2dc>
					Column1_OUT_High;
 8001250:	2201      	movs	r2, #1
 8001252:	2108      	movs	r1, #8
 8001254:	4806      	ldr	r0, [pc, #24]	; (8001270 <keyboard_scan+0x2f0>)
 8001256:	f006 fda9 	bl	8007dac <HAL_GPIO_WritePin>
 800125a:	e01d      	b.n	8001298 <keyboard_scan+0x318>
				else if (i == 2)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d108      	bne.n	8001274 <keyboard_scan+0x2f4>
					Column2_OUT_High;
 8001262:	2201      	movs	r2, #1
 8001264:	2120      	movs	r1, #32
 8001266:	4802      	ldr	r0, [pc, #8]	; (8001270 <keyboard_scan+0x2f0>)
 8001268:	f006 fda0 	bl	8007dac <HAL_GPIO_WritePin>
 800126c:	e014      	b.n	8001298 <keyboard_scan+0x318>
 800126e:	bf00      	nop
 8001270:	40021800 	.word	0x40021800
				else if (i == 3)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b03      	cmp	r3, #3
 8001278:	d105      	bne.n	8001286 <keyboard_scan+0x306>
					Column3_OUT_High;
 800127a:	2201      	movs	r2, #1
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	483a      	ldr	r0, [pc, #232]	; (8001368 <keyboard_scan+0x3e8>)
 8001280:	f006 fd94 	bl	8007dac <HAL_GPIO_WritePin>
 8001284:	e008      	b.n	8001298 <keyboard_scan+0x318>
				else if (i == 4)
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b04      	cmp	r3, #4
 800128a:	d105      	bne.n	8001298 <keyboard_scan+0x318>
					Column4_OUT_High;
 800128c:	2201      	movs	r2, #1
 800128e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001292:	4835      	ldr	r0, [pc, #212]	; (8001368 <keyboard_scan+0x3e8>)
 8001294:	f006 fd8a 	bl	8007dac <HAL_GPIO_WritePin>

				if (Row4_INPUT_Read == GPIO_PIN_SET)
 8001298:	2104      	movs	r1, #4
 800129a:	4833      	ldr	r0, [pc, #204]	; (8001368 <keyboard_scan+0x3e8>)
 800129c:	f006 fd6e 	bl	8007d7c <HAL_GPIO_ReadPin>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d102      	bne.n	80012ac <keyboard_scan+0x32c>
					keynum = i + 12;
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	330c      	adds	r3, #12
 80012aa:	71bb      	strb	r3, [r7, #6]

				if (i == 1)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d105      	bne.n	80012be <keyboard_scan+0x33e>
					Column1_OUT_Low;
 80012b2:	2200      	movs	r2, #0
 80012b4:	2108      	movs	r1, #8
 80012b6:	482c      	ldr	r0, [pc, #176]	; (8001368 <keyboard_scan+0x3e8>)
 80012b8:	f006 fd78 	bl	8007dac <HAL_GPIO_WritePin>
 80012bc:	e01a      	b.n	80012f4 <keyboard_scan+0x374>
				else if (i == 2)
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d105      	bne.n	80012d0 <keyboard_scan+0x350>
					Column2_OUT_Low;
 80012c4:	2200      	movs	r2, #0
 80012c6:	2120      	movs	r1, #32
 80012c8:	4827      	ldr	r0, [pc, #156]	; (8001368 <keyboard_scan+0x3e8>)
 80012ca:	f006 fd6f 	bl	8007dac <HAL_GPIO_WritePin>
 80012ce:	e011      	b.n	80012f4 <keyboard_scan+0x374>
				else if (i == 3)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d105      	bne.n	80012e2 <keyboard_scan+0x362>
					Column3_OUT_Low;
 80012d6:	2200      	movs	r2, #0
 80012d8:	2180      	movs	r1, #128	; 0x80
 80012da:	4823      	ldr	r0, [pc, #140]	; (8001368 <keyboard_scan+0x3e8>)
 80012dc:	f006 fd66 	bl	8007dac <HAL_GPIO_WritePin>
 80012e0:	e008      	b.n	80012f4 <keyboard_scan+0x374>
				else if (i == 4)
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d105      	bne.n	80012f4 <keyboard_scan+0x374>
					Column4_OUT_Low;
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ee:	481e      	ldr	r0, [pc, #120]	; (8001368 <keyboard_scan+0x3e8>)
 80012f0:	f006 fd5c 	bl	8007dac <HAL_GPIO_WritePin>
			for (i = 1; i <= 4; i++) {
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	3301      	adds	r3, #1
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d9a4      	bls.n	800124a <keyboard_scan+0x2ca>
 8001300:	e01e      	b.n	8001340 <keyboard_scan+0x3c0>

			}
		}
	} else if (Row1_INPUT_Read == GPIO_PIN_SET
 8001302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001306:	4818      	ldr	r0, [pc, #96]	; (8001368 <keyboard_scan+0x3e8>)
 8001308:	f006 fd38 	bl	8007d7c <HAL_GPIO_ReadPin>
 800130c:	4603      	mov	r3, r0
 800130e:	2b01      	cmp	r3, #1
 8001310:	d116      	bne.n	8001340 <keyboard_scan+0x3c0>
			&& Row2_INPUT_Read == GPIO_PIN_RESET
 8001312:	2140      	movs	r1, #64	; 0x40
 8001314:	4814      	ldr	r0, [pc, #80]	; (8001368 <keyboard_scan+0x3e8>)
 8001316:	f006 fd31 	bl	8007d7c <HAL_GPIO_ReadPin>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10f      	bne.n	8001340 <keyboard_scan+0x3c0>
			&& Row3_INPUT_Read == GPIO_PIN_RESET
 8001320:	2110      	movs	r1, #16
 8001322:	4811      	ldr	r0, [pc, #68]	; (8001368 <keyboard_scan+0x3e8>)
 8001324:	f006 fd2a 	bl	8007d7c <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d108      	bne.n	8001340 <keyboard_scan+0x3c0>
			&& Row4_INPUT_Read == GPIO_PIN_RESET) {
 800132e:	2104      	movs	r1, #4
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <keyboard_scan+0x3e8>)
 8001332:	f006 fd23 	bl	8007d7c <HAL_GPIO_ReadPin>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <keyboard_scan+0x3c0>
		return NOPRES;
 800133c:	2300      	movs	r3, #0
 800133e:	e00f      	b.n	8001360 <keyboard_scan+0x3e0>
	}

	if(lastnum == keynum)
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <keyboard_scan+0x3ec>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	79ba      	ldrb	r2, [r7, #6]
 8001346:	429a      	cmp	r2, r3
 8001348:	d101      	bne.n	800134e <keyboard_scan+0x3ce>
	{
		return NOPRES;
 800134a:	2300      	movs	r3, #0
 800134c:	e008      	b.n	8001360 <keyboard_scan+0x3e0>
	}
	lastnum = keynum;
 800134e:	4a07      	ldr	r2, [pc, #28]	; (800136c <keyboard_scan+0x3ec>)
 8001350:	79bb      	ldrb	r3, [r7, #6]
 8001352:	7013      	strb	r3, [r2, #0]

	ShowMode(keynum, 0xff);
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	21ff      	movs	r1, #255	; 0xff
 8001358:	4618      	mov	r0, r3
 800135a:	f003 fffb 	bl	8005354 <ShowMode>

	return keynum;
 800135e:	79bb      	ldrb	r3, [r7, #6]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021800 	.word	0x40021800
 800136c:	20000204 	.word	0x20000204

08001370 <LCD_WR_REG>:
_lcd_dev lcddev;

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(__IO uint16_t regval)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
	regval=regval;		//使用-O2优化的时候,必须插入的延时
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	b29b      	uxth	r3, r3
 800137e:	80fb      	strh	r3, [r7, #6]
	TFT_LCD->LCD_REG=regval;//写入要写的寄存器序号
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <LCD_WR_REG+0x24>)
 8001382:	88fa      	ldrh	r2, [r7, #6]
 8001384:	b292      	uxth	r2, r2
 8001386:	801a      	strh	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	6c00007e 	.word	0x6c00007e

08001398 <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(__IO uint16_t data)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
	data=data;			//使用-O2优化的时候,必须插入的延时
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	80fb      	strh	r3, [r7, #6]
	TFT_LCD->LCD_RAM=data;
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <LCD_WR_DATA+0x24>)
 80013aa:	88fa      	ldrh	r2, [r7, #6]
 80013ac:	b292      	uxth	r2, r2
 80013ae:	805a      	strh	r2, [r3, #2]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	6c00007e 	.word	0x6c00007e

080013c0 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//防止被优化
	ram=TFT_LCD->LCD_RAM;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <LCD_RD_DATA+0x20>)
 80013c8:	885b      	ldrh	r3, [r3, #2]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	80fb      	strh	r3, [r7, #6]
	return ram;
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	b29b      	uxth	r3, r3
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	6c00007e 	.word	0x6c00007e

080013e4 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	460a      	mov	r2, r1
 80013ee:	80fb      	strh	r3, [r7, #6]
 80013f0:	4613      	mov	r3, r2
 80013f2:	80bb      	strh	r3, [r7, #4]
	TFT_LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 80013f4:	4a05      	ldr	r2, [pc, #20]	; (800140c <LCD_WriteReg+0x28>)
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	8013      	strh	r3, [r2, #0]
	TFT_LCD->LCD_RAM = LCD_RegValue;//写入数据
 80013fa:	4a04      	ldr	r2, [pc, #16]	; (800140c <LCD_WriteReg+0x28>)
 80013fc:	88bb      	ldrh	r3, [r7, #4]
 80013fe:	8053      	strh	r3, [r2, #2]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	6c00007e 	.word	0x6c00007e

08001410 <opt_delay>:

//当mdk -O1时间优化时需要设置
//延时i
void opt_delay(uint8_t i)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
	while(i--);
 800141a:	bf00      	nop
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	1e5a      	subs	r2, r3, #1
 8001420:	71fa      	strb	r2, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1fa      	bne.n	800141c <opt_delay+0xc>
}
 8001426:	bf00      	nop
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <LCD_WriteRAM_Prepare>:
	opt_delay(5);
	return LCD_RD_DATA();		//返回读到的值
}
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
 	TFT_LCD->LCD_REG=lcddev.wramcmd;
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <LCD_WriteRAM_Prepare+0x18>)
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <LCD_WriteRAM_Prepare+0x1c>)
 800143c:	8912      	ldrh	r2, [r2, #8]
 800143e:	801a      	strh	r2, [r3, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	6c00007e 	.word	0x6c00007e
 8001450:	20000310 	.word	0x20000310

08001454 <LCD_SetCursor>:
}
//设置光标位置(对RGB屏无效)
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	460a      	mov	r2, r1
 800145e:	80fb      	strh	r3, [r7, #6]
 8001460:	4613      	mov	r3, r2
 8001462:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001464:	4b6b      	ldr	r3, [pc, #428]	; (8001614 <LCD_SetCursor+0x1c0>)
 8001466:	889b      	ldrh	r3, [r3, #4]
 8001468:	f249 3241 	movw	r2, #37697	; 0x9341
 800146c:	4293      	cmp	r3, r2
 800146e:	d005      	beq.n	800147c <LCD_SetCursor+0x28>
 8001470:	4b68      	ldr	r3, [pc, #416]	; (8001614 <LCD_SetCursor+0x1c0>)
 8001472:	889b      	ldrh	r3, [r3, #4]
 8001474:	f245 3210 	movw	r2, #21264	; 0x5310
 8001478:	4293      	cmp	r3, r2
 800147a:	d122      	bne.n	80014c2 <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 800147c:	4b65      	ldr	r3, [pc, #404]	; (8001614 <LCD_SetCursor+0x1c0>)
 800147e:	895b      	ldrh	r3, [r3, #10]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff75 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff83 	bl	8001398 <LCD_WR_DATA>
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	b29b      	uxth	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff7d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 800149e:	4b5d      	ldr	r3, [pc, #372]	; (8001614 <LCD_SetCursor+0x1c0>)
 80014a0:	899b      	ldrh	r3, [r3, #12]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff64 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 80014a8:	88bb      	ldrh	r3, [r7, #4]
 80014aa:	0a1b      	lsrs	r3, r3, #8
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff72 	bl	8001398 <LCD_WR_DATA>
 80014b4:	88bb      	ldrh	r3, [r7, #4]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff6c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
	}
}
 80014c0:	e0a3      	b.n	800160a <LCD_SetCursor+0x1b6>
	}else if(lcddev.id==0X1963)
 80014c2:	4b54      	ldr	r3, [pc, #336]	; (8001614 <LCD_SetCursor+0x1c0>)
 80014c4:	889b      	ldrh	r3, [r3, #4]
 80014c6:	f641 1263 	movw	r2, #6499	; 0x1963
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d167      	bne.n	800159e <LCD_SetCursor+0x14a>
		if(lcddev.dir==0)//x坐标需要变换
 80014ce:	4b51      	ldr	r3, [pc, #324]	; (8001614 <LCD_SetCursor+0x1c0>)
 80014d0:	799b      	ldrb	r3, [r3, #6]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d11e      	bne.n	8001514 <LCD_SetCursor+0xc0>
			Xpos=lcddev.width-1-Xpos;
 80014d6:	4b4f      	ldr	r3, [pc, #316]	; (8001614 <LCD_SetCursor+0x1c0>)
 80014d8:	881a      	ldrh	r2, [r3, #0]
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	b29b      	uxth	r3, r3
 80014e0:	3b01      	subs	r3, #1
 80014e2:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 80014e4:	4b4b      	ldr	r3, [pc, #300]	; (8001614 <LCD_SetCursor+0x1c0>)
 80014e6:	895b      	ldrh	r3, [r3, #10]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff41 	bl	8001370 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f7ff ff52 	bl	8001398 <LCD_WR_DATA>
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff ff4f 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	b29b      	uxth	r3, r3
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff49 	bl	8001398 <LCD_WR_DATA>
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b29b      	uxth	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff43 	bl	8001398 <LCD_WR_DATA>
 8001512:	e021      	b.n	8001558 <LCD_SetCursor+0x104>
			LCD_WR_REG(lcddev.setxcmd);
 8001514:	4b3f      	ldr	r3, [pc, #252]	; (8001614 <LCD_SetCursor+0x1c0>)
 8001516:	895b      	ldrh	r3, [r3, #10]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff29 	bl	8001370 <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	b29b      	uxth	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff37 	bl	8001398 <LCD_WR_DATA>
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	b29b      	uxth	r3, r3
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff31 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001536:	4b37      	ldr	r3, [pc, #220]	; (8001614 <LCD_SetCursor+0x1c0>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	3b01      	subs	r3, #1
 800153c:	121b      	asrs	r3, r3, #8
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff29 	bl	8001398 <LCD_WR_DATA>
 8001546:	4b33      	ldr	r3, [pc, #204]	; (8001614 <LCD_SetCursor+0x1c0>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	3b01      	subs	r3, #1
 800154c:	b29b      	uxth	r3, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	b29b      	uxth	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff20 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001558:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <LCD_SetCursor+0x1c0>)
 800155a:	899b      	ldrh	r3, [r3, #12]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff07 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8001562:	88bb      	ldrh	r3, [r7, #4]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	b29b      	uxth	r3, r3
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff15 	bl	8001398 <LCD_WR_DATA>
 800156e:	88bb      	ldrh	r3, [r7, #4]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	b29b      	uxth	r3, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff0f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 800157a:	4b26      	ldr	r3, [pc, #152]	; (8001614 <LCD_SetCursor+0x1c0>)
 800157c:	885b      	ldrh	r3, [r3, #2]
 800157e:	3b01      	subs	r3, #1
 8001580:	121b      	asrs	r3, r3, #8
 8001582:	b29b      	uxth	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff07 	bl	8001398 <LCD_WR_DATA>
 800158a:	4b22      	ldr	r3, [pc, #136]	; (8001614 <LCD_SetCursor+0x1c0>)
 800158c:	885b      	ldrh	r3, [r3, #2]
 800158e:	3b01      	subs	r3, #1
 8001590:	b29b      	uxth	r3, r3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fefe 	bl	8001398 <LCD_WR_DATA>
}
 800159c:	e035      	b.n	800160a <LCD_SetCursor+0x1b6>
	}else if(lcddev.id==0X5510)
 800159e:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <LCD_SetCursor+0x1c0>)
 80015a0:	889b      	ldrh	r3, [r3, #4]
 80015a2:	f245 5210 	movw	r2, #21776	; 0x5510
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d12f      	bne.n	800160a <LCD_SetCursor+0x1b6>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <LCD_SetCursor+0x1c0>)
 80015ac:	895b      	ldrh	r3, [r3, #10]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fede 	bl	8001370 <LCD_WR_REG>
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	0a1b      	lsrs	r3, r3, #8
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff feec 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <LCD_SetCursor+0x1c0>)
 80015c2:	895b      	ldrh	r3, [r3, #10]
 80015c4:	3301      	adds	r3, #1
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fed1 	bl	8001370 <LCD_WR_REG>
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fedf 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <LCD_SetCursor+0x1c0>)
 80015dc:	899b      	ldrh	r3, [r3, #12]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fec6 	bl	8001370 <LCD_WR_REG>
 80015e4:	88bb      	ldrh	r3, [r7, #4]
 80015e6:	0a1b      	lsrs	r3, r3, #8
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fed4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <LCD_SetCursor+0x1c0>)
 80015f2:	899b      	ldrh	r3, [r3, #12]
 80015f4:	3301      	adds	r3, #1
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff feb9 	bl	8001370 <LCD_WR_REG>
 80015fe:	88bb      	ldrh	r3, [r7, #4]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	b29b      	uxth	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fec7 	bl	8001398 <LCD_WR_DATA>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000310 	.word	0x20000310

08001618 <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
	uint16_t regval=0;
 8001622:	2300      	movs	r3, #0
 8001624:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg=0;
 8001626:	2300      	movs	r3, #0
 8001628:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if((lcddev.dir==1&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对1963不改变扫描方向！竖屏时1963改变方向
 800162a:	4ba9      	ldr	r3, [pc, #676]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 800162c:	799b      	ldrb	r3, [r3, #6]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d105      	bne.n	800163e <LCD_Scan_Dir+0x26>
 8001632:	4ba7      	ldr	r3, [pc, #668]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 8001634:	889b      	ldrh	r3, [r3, #4]
 8001636:	f641 1263 	movw	r2, #6499	; 0x1963
 800163a:	4293      	cmp	r3, r2
 800163c:	d109      	bne.n	8001652 <LCD_Scan_Dir+0x3a>
 800163e:	4ba4      	ldr	r3, [pc, #656]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 8001640:	799b      	ldrb	r3, [r3, #6]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d134      	bne.n	80016b0 <LCD_Scan_Dir+0x98>
 8001646:	4ba2      	ldr	r3, [pc, #648]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 8001648:	889b      	ldrh	r3, [r3, #4]
 800164a:	f641 1263 	movw	r2, #6499	; 0x1963
 800164e:	4293      	cmp	r3, r2
 8001650:	d12e      	bne.n	80016b0 <LCD_Scan_Dir+0x98>
	{
		switch(dir)//方向转换
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b07      	cmp	r3, #7
 8001656:	d82c      	bhi.n	80016b2 <LCD_Scan_Dir+0x9a>
 8001658:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <LCD_Scan_Dir+0x48>)
 800165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165e:	bf00      	nop
 8001660:	08001681 	.word	0x08001681
 8001664:	08001687 	.word	0x08001687
 8001668:	0800168d 	.word	0x0800168d
 800166c:	08001693 	.word	0x08001693
 8001670:	08001699 	.word	0x08001699
 8001674:	0800169f 	.word	0x0800169f
 8001678:	080016a5 	.word	0x080016a5
 800167c:	080016ab 	.word	0x080016ab
		{
			case 0:dir=6;break;
 8001680:	2306      	movs	r3, #6
 8001682:	71fb      	strb	r3, [r7, #7]
 8001684:	e015      	b.n	80016b2 <LCD_Scan_Dir+0x9a>
			case 1:dir=7;break;
 8001686:	2307      	movs	r3, #7
 8001688:	71fb      	strb	r3, [r7, #7]
 800168a:	e012      	b.n	80016b2 <LCD_Scan_Dir+0x9a>
			case 2:dir=4;break;
 800168c:	2304      	movs	r3, #4
 800168e:	71fb      	strb	r3, [r7, #7]
 8001690:	e00f      	b.n	80016b2 <LCD_Scan_Dir+0x9a>
			case 3:dir=5;break;
 8001692:	2305      	movs	r3, #5
 8001694:	71fb      	strb	r3, [r7, #7]
 8001696:	e00c      	b.n	80016b2 <LCD_Scan_Dir+0x9a>
			case 4:dir=1;break;
 8001698:	2301      	movs	r3, #1
 800169a:	71fb      	strb	r3, [r7, #7]
 800169c:	e009      	b.n	80016b2 <LCD_Scan_Dir+0x9a>
			case 5:dir=0;break;
 800169e:	2300      	movs	r3, #0
 80016a0:	71fb      	strb	r3, [r7, #7]
 80016a2:	e006      	b.n	80016b2 <LCD_Scan_Dir+0x9a>
			case 6:dir=3;break;
 80016a4:	2303      	movs	r3, #3
 80016a6:	71fb      	strb	r3, [r7, #7]
 80016a8:	e003      	b.n	80016b2 <LCD_Scan_Dir+0x9a>
			case 7:dir=2;break;
 80016aa:	2302      	movs	r3, #2
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	e000      	b.n	80016b2 <LCD_Scan_Dir+0x9a>
		}
	}
 80016b0:	bf00      	nop
	if(lcddev.id==0x9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/5310/5510/1963,特殊处理
 80016b2:	4b87      	ldr	r3, [pc, #540]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80016b4:	889b      	ldrh	r3, [r3, #4]
 80016b6:	f249 3241 	movw	r2, #37697	; 0x9341
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d012      	beq.n	80016e4 <LCD_Scan_Dir+0xcc>
 80016be:	4b84      	ldr	r3, [pc, #528]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80016c0:	889b      	ldrh	r3, [r3, #4]
 80016c2:	f245 3210 	movw	r2, #21264	; 0x5310
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00c      	beq.n	80016e4 <LCD_Scan_Dir+0xcc>
 80016ca:	4b81      	ldr	r3, [pc, #516]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80016cc:	889b      	ldrh	r3, [r3, #4]
 80016ce:	f245 5210 	movw	r2, #21776	; 0x5510
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d006      	beq.n	80016e4 <LCD_Scan_Dir+0xcc>
 80016d6:	4b7e      	ldr	r3, [pc, #504]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80016d8:	889b      	ldrh	r3, [r3, #4]
 80016da:	f641 1263 	movw	r2, #6499	; 0x1963
 80016de:	4293      	cmp	r3, r2
 80016e0:	f040 8130 	bne.w	8001944 <LCD_Scan_Dir+0x32c>
	{
		switch(dir)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	2b07      	cmp	r3, #7
 80016e8:	d835      	bhi.n	8001756 <LCD_Scan_Dir+0x13e>
 80016ea:	a201      	add	r2, pc, #4	; (adr r2, 80016f0 <LCD_Scan_Dir+0xd8>)
 80016ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f0:	08001757 	.word	0x08001757
 80016f4:	08001711 	.word	0x08001711
 80016f8:	0800171b 	.word	0x0800171b
 80016fc:	08001725 	.word	0x08001725
 8001700:	0800172f 	.word	0x0800172f
 8001704:	08001739 	.word	0x08001739
 8001708:	08001743 	.word	0x08001743
 800170c:	0800174d 	.word	0x0800174d
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 8001710:	89fb      	ldrh	r3, [r7, #14]
 8001712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001716:	81fb      	strh	r3, [r7, #14]
				break;
 8001718:	e01d      	b.n	8001756 <LCD_Scan_Dir+0x13e>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 800171a:	89fb      	ldrh	r3, [r7, #14]
 800171c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001720:	81fb      	strh	r3, [r7, #14]
				break;
 8001722:	e018      	b.n	8001756 <LCD_Scan_Dir+0x13e>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 8001724:	89fb      	ldrh	r3, [r7, #14]
 8001726:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800172a:	81fb      	strh	r3, [r7, #14]
				break;
 800172c:	e013      	b.n	8001756 <LCD_Scan_Dir+0x13e>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	f043 0320 	orr.w	r3, r3, #32
 8001734:	81fb      	strh	r3, [r7, #14]
				break;
 8001736:	e00e      	b.n	8001756 <LCD_Scan_Dir+0x13e>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 8001738:	89fb      	ldrh	r3, [r7, #14]
 800173a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800173e:	81fb      	strh	r3, [r7, #14]
				break;
 8001740:	e009      	b.n	8001756 <LCD_Scan_Dir+0x13e>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 8001742:	89fb      	ldrh	r3, [r7, #14]
 8001744:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001748:	81fb      	strh	r3, [r7, #14]
				break;
 800174a:	e004      	b.n	8001756 <LCD_Scan_Dir+0x13e>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 800174c:	89fb      	ldrh	r3, [r7, #14]
 800174e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001752:	81fb      	strh	r3, [r7, #14]
				break;
 8001754:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 8001756:	4b5e      	ldr	r3, [pc, #376]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 8001758:	889b      	ldrh	r3, [r3, #4]
 800175a:	f245 5210 	movw	r2, #21776	; 0x5510
 800175e:	4293      	cmp	r3, r2
 8001760:	d103      	bne.n	800176a <LCD_Scan_Dir+0x152>
 8001762:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8001766:	81bb      	strh	r3, [r7, #12]
 8001768:	e001      	b.n	800176e <LCD_Scan_Dir+0x156>
		else dirreg=0X36;
 800176a:	2336      	movs	r3, #54	; 0x36
 800176c:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 800176e:	4b58      	ldr	r3, [pc, #352]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 8001770:	889b      	ldrh	r3, [r3, #4]
 8001772:	f245 3210 	movw	r2, #21264	; 0x5310
 8001776:	4293      	cmp	r3, r2
 8001778:	d00f      	beq.n	800179a <LCD_Scan_Dir+0x182>
 800177a:	4b55      	ldr	r3, [pc, #340]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 800177c:	889b      	ldrh	r3, [r3, #4]
 800177e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001782:	4293      	cmp	r3, r2
 8001784:	d009      	beq.n	800179a <LCD_Scan_Dir+0x182>
 8001786:	4b52      	ldr	r3, [pc, #328]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 8001788:	889b      	ldrh	r3, [r3, #4]
 800178a:	f641 1263 	movw	r2, #6499	; 0x1963
 800178e:	4293      	cmp	r3, r2
 8001790:	d003      	beq.n	800179a <LCD_Scan_Dir+0x182>
 8001792:	89fb      	ldrh	r3, [r7, #14]
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	81fb      	strh	r3, [r7, #14]
 		LCD_WriteReg(dirreg,regval);
 800179a:	89fa      	ldrh	r2, [r7, #14]
 800179c:	89bb      	ldrh	r3, [r7, #12]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fe1f 	bl	80013e4 <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 80017a6:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017a8:	889b      	ldrh	r3, [r3, #4]
 80017aa:	f641 1263 	movw	r2, #6499	; 0x1963
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d025      	beq.n	80017fe <LCD_Scan_Dir+0x1e6>
		{
			if(regval&0X20)
 80017b2:	89fb      	ldrh	r3, [r7, #14]
 80017b4:	f003 0320 	and.w	r3, r3, #32
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d010      	beq.n	80017de <LCD_Scan_Dir+0x1c6>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 80017bc:	4b44      	ldr	r3, [pc, #272]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017be:	881a      	ldrh	r2, [r3, #0]
 80017c0:	4b43      	ldr	r3, [pc, #268]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017c2:	885b      	ldrh	r3, [r3, #2]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d21a      	bcs.n	80017fe <LCD_Scan_Dir+0x1e6>
				{
					temp=lcddev.width;
 80017c8:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 80017ce:	4b40      	ldr	r3, [pc, #256]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017d0:	885a      	ldrh	r2, [r3, #2]
 80017d2:	4b3f      	ldr	r3, [pc, #252]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017d4:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 80017d6:	4a3e      	ldr	r2, [pc, #248]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017d8:	897b      	ldrh	r3, [r7, #10]
 80017da:	8053      	strh	r3, [r2, #2]
 80017dc:	e00f      	b.n	80017fe <LCD_Scan_Dir+0x1e6>
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 80017de:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017e0:	881a      	ldrh	r2, [r3, #0]
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017e4:	885b      	ldrh	r3, [r3, #2]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d909      	bls.n	80017fe <LCD_Scan_Dir+0x1e6>
				{
					temp=lcddev.width;
 80017ea:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 80017f0:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017f2:	885a      	ldrh	r2, [r3, #2]
 80017f4:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017f6:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 80017f8:	4a35      	ldr	r2, [pc, #212]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017fa:	897b      	ldrh	r3, [r7, #10]
 80017fc:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 80017fe:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 8001800:	889b      	ldrh	r3, [r3, #4]
 8001802:	f245 5210 	movw	r2, #21776	; 0x5510
 8001806:	4293      	cmp	r3, r2
 8001808:	d164      	bne.n	80018d4 <LCD_Scan_Dir+0x2bc>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 800180a:	4b31      	ldr	r3, [pc, #196]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 800180c:	895b      	ldrh	r3, [r3, #10]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fdae 	bl	8001370 <LCD_WR_REG>
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff fdbf 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 800181a:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 800181c:	895b      	ldrh	r3, [r3, #10]
 800181e:	3301      	adds	r3, #1
 8001820:	b29b      	uxth	r3, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fda4 	bl	8001370 <LCD_WR_REG>
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fdb5 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 800182e:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 8001830:	895b      	ldrh	r3, [r3, #10]
 8001832:	3302      	adds	r3, #2
 8001834:	b29b      	uxth	r3, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fd9a 	bl	8001370 <LCD_WR_REG>
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	3b01      	subs	r3, #1
 8001842:	121b      	asrs	r3, r3, #8
 8001844:	b29b      	uxth	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fda6 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 800184c:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 800184e:	895b      	ldrh	r3, [r3, #10]
 8001850:	3303      	adds	r3, #3
 8001852:	b29b      	uxth	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fd8b 	bl	8001370 <LCD_WR_REG>
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	3b01      	subs	r3, #1
 8001860:	b29b      	uxth	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	b29b      	uxth	r3, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fd96 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 800186e:	899b      	ldrh	r3, [r3, #12]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fd7d 	bl	8001370 <LCD_WR_REG>
 8001876:	2000      	movs	r0, #0
 8001878:	f7ff fd8e 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 800187e:	899b      	ldrh	r3, [r3, #12]
 8001880:	3301      	adds	r3, #1
 8001882:	b29b      	uxth	r3, r3
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fd73 	bl	8001370 <LCD_WR_REG>
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fd84 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 8001892:	899b      	ldrh	r3, [r3, #12]
 8001894:	3302      	adds	r3, #2
 8001896:	b29b      	uxth	r3, r3
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fd69 	bl	8001370 <LCD_WR_REG>
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80018a0:	885b      	ldrh	r3, [r3, #2]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	121b      	asrs	r3, r3, #8
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fd75 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80018b0:	899b      	ldrh	r3, [r3, #12]
 80018b2:	3303      	adds	r3, #3
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fd5a 	bl	8001370 <LCD_WR_REG>
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80018be:	885b      	ldrh	r3, [r3, #2]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fd65 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
			LCD_WR_DATA(0);LCD_WR_DATA(0);
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
		}
  	}
}
 80018ce:	e039      	b.n	8001944 <LCD_Scan_Dir+0x32c>
 80018d0:	20000310 	.word	0x20000310
			LCD_WR_REG(lcddev.setxcmd);
 80018d4:	4b1d      	ldr	r3, [pc, #116]	; (800194c <LCD_Scan_Dir+0x334>)
 80018d6:	895b      	ldrh	r3, [r3, #10]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fd49 	bl	8001370 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff fd5a 	bl	8001398 <LCD_WR_DATA>
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7ff fd57 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <LCD_Scan_Dir+0x334>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	121b      	asrs	r3, r3, #8
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fd4f 	bl	8001398 <LCD_WR_DATA>
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <LCD_Scan_Dir+0x334>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	3b01      	subs	r3, #1
 8001900:	b29b      	uxth	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	b29b      	uxth	r3, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fd46 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <LCD_Scan_Dir+0x334>)
 800190e:	899b      	ldrh	r3, [r3, #12]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fd2d 	bl	8001370 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001916:	2000      	movs	r0, #0
 8001918:	f7ff fd3e 	bl	8001398 <LCD_WR_DATA>
 800191c:	2000      	movs	r0, #0
 800191e:	f7ff fd3b 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <LCD_Scan_Dir+0x334>)
 8001924:	885b      	ldrh	r3, [r3, #2]
 8001926:	3b01      	subs	r3, #1
 8001928:	121b      	asrs	r3, r3, #8
 800192a:	b29b      	uxth	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fd33 	bl	8001398 <LCD_WR_DATA>
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <LCD_Scan_Dir+0x334>)
 8001934:	885b      	ldrh	r3, [r3, #2]
 8001936:	3b01      	subs	r3, #1
 8001938:	b29b      	uxth	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	b29b      	uxth	r3, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fd2a 	bl	8001398 <LCD_WR_DATA>
}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000310 	.word	0x20000310

08001950 <LCD_DrawPoint>:
//画点
//x,y:坐标
//POINT_COLOR:此点的颜色
void LCD_DrawPoint(uint16_t x,uint16_t y)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	460a      	mov	r2, r1
 800195a:	80fb      	strh	r3, [r7, #6]
 800195c:	4613      	mov	r3, r2
 800195e:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);		//设置光标位置
 8001960:	88ba      	ldrh	r2, [r7, #4]
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	4611      	mov	r1, r2
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fd74 	bl	8001454 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();	//开始写入GRAM
 800196c:	f7ff fd62 	bl	8001434 <LCD_WriteRAM_Prepare>
	TFT_LCD->LCD_RAM=POINT_COLOR;
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <LCD_DrawPoint+0x34>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <LCD_DrawPoint+0x38>)
 8001976:	b292      	uxth	r2, r2
 8001978:	805a      	strh	r2, [r3, #2]
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000000 	.word	0x20000000
 8001988:	6c00007e 	.word	0x6c00007e

0800198c <LCD_Fast_DrawPoint>:
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint32_t color)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	603a      	str	r2, [r7, #0]
 8001996:	80fb      	strh	r3, [r7, #6]
 8001998:	460b      	mov	r3, r1
 800199a:	80bb      	strh	r3, [r7, #4]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 800199c:	4b85      	ldr	r3, [pc, #532]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 800199e:	889b      	ldrh	r3, [r3, #4]
 80019a0:	f249 3241 	movw	r2, #37697	; 0x9341
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d005      	beq.n	80019b4 <LCD_Fast_DrawPoint+0x28>
 80019a8:	4b82      	ldr	r3, [pc, #520]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 80019aa:	889b      	ldrh	r3, [r3, #4]
 80019ac:	f245 3210 	movw	r2, #21264	; 0x5310
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d122      	bne.n	80019fa <LCD_Fast_DrawPoint+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 80019b4:	4b7f      	ldr	r3, [pc, #508]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 80019b6:	895b      	ldrh	r3, [r3, #10]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fcd9 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fce7 	bl	8001398 <LCD_WR_DATA>
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fce1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80019d6:	4b77      	ldr	r3, [pc, #476]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 80019d8:	899b      	ldrh	r3, [r3, #12]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fcc8 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80019e0:	88bb      	ldrh	r3, [r7, #4]
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fcd6 	bl	8001398 <LCD_WR_DATA>
 80019ec:	88bb      	ldrh	r3, [r7, #4]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fcd0 	bl	8001398 <LCD_WR_DATA>
 80019f8:	e0cf      	b.n	8001b9a <LCD_Fast_DrawPoint+0x20e>
	}else if(lcddev.id==0X5510)
 80019fa:	4b6e      	ldr	r3, [pc, #440]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 80019fc:	889b      	ldrh	r3, [r3, #4]
 80019fe:	f245 5210 	movw	r2, #21776	; 0x5510
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d130      	bne.n	8001a68 <LCD_Fast_DrawPoint+0xdc>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 8001a06:	4b6b      	ldr	r3, [pc, #428]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001a08:	895b      	ldrh	r3, [r3, #10]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fcb0 	bl	8001370 <LCD_WR_REG>
 8001a10:	88fb      	ldrh	r3, [r7, #6]
 8001a12:	0a1b      	lsrs	r3, r3, #8
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fcbe 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 8001a1c:	4b65      	ldr	r3, [pc, #404]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001a1e:	895b      	ldrh	r3, [r3, #10]
 8001a20:	3301      	adds	r3, #1
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fca3 	bl	8001370 <LCD_WR_REG>
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fcb1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 8001a36:	4b5f      	ldr	r3, [pc, #380]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001a38:	899b      	ldrh	r3, [r3, #12]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fc98 	bl	8001370 <LCD_WR_REG>
 8001a40:	88bb      	ldrh	r3, [r7, #4]
 8001a42:	0a1b      	lsrs	r3, r3, #8
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fca6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 8001a4c:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001a4e:	899b      	ldrh	r3, [r3, #12]
 8001a50:	3301      	adds	r3, #1
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fc8b 	bl	8001370 <LCD_WR_REG>
 8001a5a:	88bb      	ldrh	r3, [r7, #4]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fc99 	bl	8001398 <LCD_WR_DATA>
 8001a66:	e098      	b.n	8001b9a <LCD_Fast_DrawPoint+0x20e>
	}else if(lcddev.id==0X1963)
 8001a68:	4b52      	ldr	r3, [pc, #328]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001a6a:	889b      	ldrh	r3, [r3, #4]
 8001a6c:	f641 1263 	movw	r2, #6499	; 0x1963
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d145      	bne.n	8001b00 <LCD_Fast_DrawPoint+0x174>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 8001a74:	4b4f      	ldr	r3, [pc, #316]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001a76:	799b      	ldrb	r3, [r3, #6]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d106      	bne.n	8001a8a <LCD_Fast_DrawPoint+0xfe>
 8001a7c:	4b4d      	ldr	r3, [pc, #308]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001a7e:	881a      	ldrh	r2, [r3, #0]
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	3b01      	subs	r3, #1
 8001a88:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001a8a:	4b4a      	ldr	r3, [pc, #296]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001a8c:	895b      	ldrh	r3, [r3, #10]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fc6e 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fc7c 	bl	8001398 <LCD_WR_DATA>
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fc76 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	0a1b      	lsrs	r3, r3, #8
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fc70 	bl	8001398 <LCD_WR_DATA>
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fc6a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001ac4:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001ac6:	899b      	ldrh	r3, [r3, #12]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fc51 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001ace:	88bb      	ldrh	r3, [r7, #4]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fc5f 	bl	8001398 <LCD_WR_DATA>
 8001ada:	88bb      	ldrh	r3, [r7, #4]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fc59 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001ae6:	88bb      	ldrh	r3, [r7, #4]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fc53 	bl	8001398 <LCD_WR_DATA>
 8001af2:	88bb      	ldrh	r3, [r7, #4]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fc4d 	bl	8001398 <LCD_WR_DATA>
 8001afe:	e04c      	b.n	8001b9a <LCD_Fast_DrawPoint+0x20e>
	}else if(lcddev.id==0X6804)
 8001b00:	4b2c      	ldr	r3, [pc, #176]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b02:	889b      	ldrh	r3, [r3, #4]
 8001b04:	f646 0204 	movw	r2, #26628	; 0x6804
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d12d      	bne.n	8001b68 <LCD_Fast_DrawPoint+0x1dc>
	{
		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏时处理
 8001b0c:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b0e:	799b      	ldrb	r3, [r3, #6]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d106      	bne.n	8001b22 <LCD_Fast_DrawPoint+0x196>
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b16:	881a      	ldrh	r2, [r3, #0]
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001b22:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b24:	895b      	ldrh	r3, [r3, #10]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fc22 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fc30 	bl	8001398 <LCD_WR_DATA>
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fc2a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b46:	899b      	ldrh	r3, [r3, #12]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fc11 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001b4e:	88bb      	ldrh	r3, [r7, #4]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fc1f 	bl	8001398 <LCD_WR_DATA>
 8001b5a:	88bb      	ldrh	r3, [r7, #4]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fc19 	bl	8001398 <LCD_WR_DATA>
 8001b66:	e018      	b.n	8001b9a <LCD_Fast_DrawPoint+0x20e>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏其实就是调转x,y坐标
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b6a:	799b      	ldrb	r3, [r3, #6]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d106      	bne.n	8001b7e <LCD_Fast_DrawPoint+0x1f2>
 8001b70:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b72:	881a      	ldrh	r2, [r3, #0]
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b80:	895b      	ldrh	r3, [r3, #10]
 8001b82:	88fa      	ldrh	r2, [r7, #6]
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fc2c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b8e:	899b      	ldrh	r3, [r3, #12]
 8001b90:	88ba      	ldrh	r2, [r7, #4]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fc25 	bl	80013e4 <LCD_WriteReg>
	}
	TFT_LCD->LCD_REG=lcddev.wramcmd;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <LCD_Fast_DrawPoint+0x22c>)
 8001b9c:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b9e:	8912      	ldrh	r2, [r2, #8]
 8001ba0:	801a      	strh	r2, [r3, #0]
	TFT_LCD->LCD_RAM=color;
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <LCD_Fast_DrawPoint+0x22c>)
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	b292      	uxth	r2, r2
 8001ba8:	805a      	strh	r2, [r3, #2]
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000310 	.word	0x20000310
 8001bb8:	6c00007e 	.word	0x6c00007e
 8001bbc:	00000000 	.word	0x00000000

08001bc0 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001bca:	20be      	movs	r0, #190	; 0xbe
 8001bcc:	f7ff fbd0 	bl	8001370 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001bd0:	2005      	movs	r0, #5
 8001bd2:	f7ff fbe1 	bl	8001398 <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fca3 	bl	8000524 <__aeabi_i2d>
 8001bde:	a310      	add	r3, pc, #64	; (adr r3, 8001c20 <LCD_SSD_BackLightSet+0x60>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	f7fe fd08 	bl	80005f8 <__aeabi_dmul>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7fe ffda 	bl	8000ba8 <__aeabi_d2uiz>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fbcd 	bl	8001398 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f7ff fbca 	bl	8001398 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 8001c04:	20ff      	movs	r0, #255	; 0xff
 8001c06:	f7ff fbc7 	bl	8001398 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff fbc4 	bl	8001398 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 8001c10:	2000      	movs	r0, #0
 8001c12:	f7ff fbc1 	bl	8001398 <LCD_WR_DATA>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	66666666 	.word	0x66666666
 8001c24:	40046666 	.word	0x40046666

08001c28 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(uint8_t dir)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
	lcddev.dir=dir;		//竖屏/横屏
 8001c32:	4a64      	ldr	r2, [pc, #400]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	7193      	strb	r3, [r2, #6]
	if(dir==0)			//竖屏
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d15e      	bne.n	8001cfc <LCD_Display_Dir+0xd4>
	{
		lcddev.width=240;
 8001c3e:	4b61      	ldr	r3, [pc, #388]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c40:	22f0      	movs	r2, #240	; 0xf0
 8001c42:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001c44:	4b5f      	ldr	r3, [pc, #380]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c46:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c4a:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001c4c:	4b5d      	ldr	r3, [pc, #372]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c4e:	889b      	ldrh	r3, [r3, #4]
 8001c50:	f249 3241 	movw	r2, #37697	; 0x9341
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d005      	beq.n	8001c64 <LCD_Display_Dir+0x3c>
 8001c58:	4b5a      	ldr	r3, [pc, #360]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c5a:	889b      	ldrh	r3, [r3, #4]
 8001c5c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d118      	bne.n	8001c96 <LCD_Display_Dir+0x6e>
		{
			lcddev.wramcmd=0X2C;
 8001c64:	4b57      	ldr	r3, [pc, #348]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c66:	222c      	movs	r2, #44	; 0x2c
 8001c68:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8001c6a:	4b56      	ldr	r3, [pc, #344]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c6c:	222a      	movs	r2, #42	; 0x2a
 8001c6e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001c70:	4b54      	ldr	r3, [pc, #336]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c72:	222b      	movs	r2, #43	; 0x2b
 8001c74:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X5310)
 8001c76:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c78:	889b      	ldrh	r3, [r3, #4]
 8001c7a:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	f040 8099 	bne.w	8001db6 <LCD_Display_Dir+0x18e>
			{
				lcddev.width=320;
 8001c84:	4b4f      	ldr	r3, [pc, #316]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c86:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c8a:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 8001c8c:	4b4d      	ldr	r3, [pc, #308]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c8e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c92:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X5310)
 8001c94:	e08f      	b.n	8001db6 <LCD_Display_Dir+0x18e>
			}
		}else if(lcddev.id==0x5510)
 8001c96:	4b4b      	ldr	r3, [pc, #300]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c98:	889b      	ldrh	r3, [r3, #4]
 8001c9a:	f245 5210 	movw	r2, #21776	; 0x5510
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d114      	bne.n	8001ccc <LCD_Display_Dir+0xa4>
		{
			lcddev.wramcmd=0X2C00;
 8001ca2:	4b48      	ldr	r3, [pc, #288]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001ca4:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001ca8:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8001caa:	4b46      	ldr	r3, [pc, #280]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001cac:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001cb0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8001cb2:	4b44      	ldr	r3, [pc, #272]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001cb4:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001cb8:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 8001cba:	4b42      	ldr	r3, [pc, #264]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001cbc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001cc0:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 8001cc2:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001cc4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001cc8:	805a      	strh	r2, [r3, #2]
 8001cca:	e074      	b.n	8001db6 <LCD_Display_Dir+0x18e>
		}else if(lcddev.id==0X1963)
 8001ccc:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001cce:	889b      	ldrh	r3, [r3, #4]
 8001cd0:	f641 1263 	movw	r2, #6499	; 0x1963
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d16e      	bne.n	8001db6 <LCD_Display_Dir+0x18e>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001cda:	222c      	movs	r2, #44	; 0x2c
 8001cdc:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 8001cde:	4b39      	ldr	r3, [pc, #228]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001ce0:	222b      	movs	r2, #43	; 0x2b
 8001ce2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 8001ce4:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001ce6:	222a      	movs	r2, #42	; 0x2a
 8001ce8:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 8001cea:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001cec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001cf0:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 8001cf2:	4b34      	ldr	r3, [pc, #208]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001cf4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001cf8:	805a      	strh	r2, [r3, #2]
 8001cfa:	e05c      	b.n	8001db6 <LCD_Display_Dir+0x18e>
		}
	}else 				//横屏
	{
		lcddev.width=320;
 8001cfc:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001cfe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d02:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001d04:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d06:	22f0      	movs	r2, #240	; 0xf0
 8001d08:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d0c:	889b      	ldrh	r3, [r3, #4]
 8001d0e:	f249 3241 	movw	r2, #37697	; 0x9341
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d005      	beq.n	8001d22 <LCD_Display_Dir+0xfa>
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d18:	889b      	ldrh	r3, [r3, #4]
 8001d1a:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d109      	bne.n	8001d36 <LCD_Display_Dir+0x10e>
		{
			lcddev.wramcmd=0X2C;
 8001d22:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d24:	222c      	movs	r2, #44	; 0x2c
 8001d26:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8001d28:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d2a:	222a      	movs	r2, #42	; 0x2a
 8001d2c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001d2e:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d30:	222b      	movs	r2, #43	; 0x2b
 8001d32:	819a      	strh	r2, [r3, #12]
 8001d34:	e031      	b.n	8001d9a <LCD_Display_Dir+0x172>
		}else if(lcddev.id==0x5510)
 8001d36:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d38:	889b      	ldrh	r3, [r3, #4]
 8001d3a:	f245 5210 	movw	r2, #21776	; 0x5510
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d114      	bne.n	8001d6c <LCD_Display_Dir+0x144>
		{
			lcddev.wramcmd=0X2C00;
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d44:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001d48:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d4c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001d50:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d54:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001d58:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d5c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d60:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d64:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d68:	805a      	strh	r2, [r3, #2]
 8001d6a:	e016      	b.n	8001d9a <LCD_Display_Dir+0x172>
		}else if(lcddev.id==0X1963)
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d6e:	889b      	ldrh	r3, [r3, #4]
 8001d70:	f641 1263 	movw	r2, #6499	; 0x1963
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d110      	bne.n	8001d9a <LCD_Display_Dir+0x172>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d7a:	222c      	movs	r2, #44	; 0x2c
 8001d7c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d80:	222a      	movs	r2, #42	; 0x2a
 8001d82:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d86:	222b      	movs	r2, #43	; 0x2b
 8001d88:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d8c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d90:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d94:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d98:	805a      	strh	r2, [r3, #2]
		}
		if(lcddev.id==0X5310)
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d9c:	889b      	ldrh	r3, [r3, #4]
 8001d9e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d107      	bne.n	8001db6 <LCD_Display_Dir+0x18e>
		{
			lcddev.width=480;
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001da8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001dac:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 8001dae:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001db0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001db4:	805a      	strh	r2, [r3, #2]
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff fc2e 	bl	8001618 <LCD_Scan_Dir>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000310 	.word	0x20000310

08001dc8 <TFTLCD_Init>:


//初始化lcd
//该初始化函数可以初始化各种型号的LCD(详见本.c文件最前面的描述)
void TFTLCD_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	HAL_Delay(50); // delay 50 ms
 8001dcc:	2032      	movs	r0, #50	; 0x32
 8001dce:	f005 f901 	bl	8006fd4 <HAL_Delay>

	//尝试9341 ID的读取
	LCD_WR_REG(0XD3);
 8001dd2:	20d3      	movs	r0, #211	; 0xd3
 8001dd4:	f7ff facc 	bl	8001370 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001dd8:	f7ff faf2 	bl	80013c0 <LCD_RD_DATA>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b5e      	ldr	r3, [pc, #376]	; (8001f5c <TFTLCD_Init+0x194>)
 8001de2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();	//读到0X00
 8001de4:	f7ff faec 	bl	80013c0 <LCD_RD_DATA>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b5b      	ldr	r3, [pc, #364]	; (8001f5c <TFTLCD_Init+0x194>)
 8001dee:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();   	//读取93
 8001df0:	f7ff fae6 	bl	80013c0 <LCD_RD_DATA>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b58      	ldr	r3, [pc, #352]	; (8001f5c <TFTLCD_Init+0x194>)
 8001dfa:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001dfc:	4b57      	ldr	r3, [pc, #348]	; (8001f5c <TFTLCD_Init+0x194>)
 8001dfe:	889b      	ldrh	r3, [r3, #4]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	4b55      	ldr	r3, [pc, #340]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e06:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();  	//读取41
 8001e08:	f7ff fada 	bl	80013c0 <LCD_RD_DATA>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b52      	ldr	r3, [pc, #328]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e12:	889b      	ldrh	r3, [r3, #4]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4b50      	ldr	r3, [pc, #320]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e1a:	809a      	strh	r2, [r3, #4]
	if(lcddev.id!=0X9341)		//非9341,尝试看看是不是NT35310
 8001e1c:	4b4f      	ldr	r3, [pc, #316]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e1e:	889b      	ldrh	r3, [r3, #4]
 8001e20:	f249 3241 	movw	r2, #37697	; 0x9341
 8001e24:	4293      	cmp	r3, r2
 8001e26:	f000 808b 	beq.w	8001f40 <TFTLCD_Init+0x178>
	{
		LCD_WR_REG(0XD4);
 8001e2a:	20d4      	movs	r0, #212	; 0xd4
 8001e2c:	f7ff faa0 	bl	8001370 <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();//dummy read
 8001e30:	f7ff fac6 	bl	80013c0 <LCD_RD_DATA>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	4b48      	ldr	r3, [pc, #288]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e3a:	809a      	strh	r2, [r3, #4]
		lcddev.id=LCD_RD_DATA();//读回0X01
 8001e3c:	f7ff fac0 	bl	80013c0 <LCD_RD_DATA>
 8001e40:	4603      	mov	r3, r0
 8001e42:	461a      	mov	r2, r3
 8001e44:	4b45      	ldr	r3, [pc, #276]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e46:	809a      	strh	r2, [r3, #4]
		lcddev.id=LCD_RD_DATA();//读回0X53
 8001e48:	f7ff faba 	bl	80013c0 <LCD_RD_DATA>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4b42      	ldr	r3, [pc, #264]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e52:	809a      	strh	r2, [r3, #4]
		lcddev.id<<=8;
 8001e54:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e56:	889b      	ldrh	r3, [r3, #4]
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	4b3f      	ldr	r3, [pc, #252]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e5e:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 8001e60:	f7ff faae 	bl	80013c0 <LCD_RD_DATA>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e6a:	889b      	ldrh	r3, [r3, #4]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	4b3a      	ldr	r3, [pc, #232]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e72:	809a      	strh	r2, [r3, #4]
		if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001e74:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e76:	889b      	ldrh	r3, [r3, #4]
 8001e78:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d05f      	beq.n	8001f40 <TFTLCD_Init+0x178>
		{
			LCD_WR_REG(0XDA00);
 8001e80:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8001e84:	f7ff fa74 	bl	8001370 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA();		//读回0X00
 8001e88:	f7ff fa9a 	bl	80013c0 <LCD_RD_DATA>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e92:	809a      	strh	r2, [r3, #4]
			LCD_WR_REG(0XDB00);
 8001e94:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001e98:	f7ff fa6a 	bl	8001370 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA();		//读回0X80
 8001e9c:	f7ff fa90 	bl	80013c0 <LCD_RD_DATA>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <TFTLCD_Init+0x194>)
 8001ea6:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 8001ea8:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <TFTLCD_Init+0x194>)
 8001eaa:	889b      	ldrh	r3, [r3, #4]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <TFTLCD_Init+0x194>)
 8001eb2:	809a      	strh	r2, [r3, #4]
			LCD_WR_REG(0XDC00);
 8001eb4:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8001eb8:	f7ff fa5a 	bl	8001370 <LCD_WR_REG>
			lcddev.id|=LCD_RD_DATA();		//读回0X00
 8001ebc:	f7ff fa80 	bl	80013c0 <LCD_RD_DATA>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <TFTLCD_Init+0x194>)
 8001ec6:	889b      	ldrh	r3, [r3, #4]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <TFTLCD_Init+0x194>)
 8001ece:	809a      	strh	r2, [r3, #4]
			if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8001ed0:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <TFTLCD_Init+0x194>)
 8001ed2:	889b      	ldrh	r3, [r3, #4]
 8001ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ed8:	d103      	bne.n	8001ee2 <TFTLCD_Init+0x11a>
 8001eda:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <TFTLCD_Init+0x194>)
 8001edc:	f245 5210 	movw	r2, #21776	; 0x5510
 8001ee0:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <TFTLCD_Init+0x194>)
 8001ee4:	889b      	ldrh	r3, [r3, #4]
 8001ee6:	f245 5210 	movw	r2, #21776	; 0x5510
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d028      	beq.n	8001f40 <TFTLCD_Init+0x178>
			{
				LCD_WR_REG(0XA1);
 8001eee:	20a1      	movs	r0, #161	; 0xa1
 8001ef0:	f7ff fa3e 	bl	8001370 <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();
 8001ef4:	f7ff fa64 	bl	80013c0 <LCD_RD_DATA>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <TFTLCD_Init+0x194>)
 8001efe:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();	//读回0X57
 8001f00:	f7ff fa5e 	bl	80013c0 <LCD_RD_DATA>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <TFTLCD_Init+0x194>)
 8001f0a:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <TFTLCD_Init+0x194>)
 8001f0e:	889b      	ldrh	r3, [r3, #4]
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <TFTLCD_Init+0x194>)
 8001f16:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//读回0X61
 8001f18:	f7ff fa52 	bl	80013c0 <LCD_RD_DATA>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <TFTLCD_Init+0x194>)
 8001f22:	889b      	ldrh	r3, [r3, #4]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <TFTLCD_Init+0x194>)
 8001f2a:	809a      	strh	r2, [r3, #4]
				if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <TFTLCD_Init+0x194>)
 8001f2e:	889b      	ldrh	r3, [r3, #4]
 8001f30:	f245 7261 	movw	r2, #22369	; 0x5761
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d103      	bne.n	8001f40 <TFTLCD_Init+0x178>
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <TFTLCD_Init+0x194>)
 8001f3a:	f641 1263 	movw	r2, #6499	; 0x1963
 8001f3e:	809a      	strh	r2, [r3, #4]
			}
		}
	}
	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <TFTLCD_Init+0x194>)
 8001f42:	889b      	ldrh	r3, [r3, #4]
 8001f44:	4619      	mov	r1, r3
 8001f46:	4806      	ldr	r0, [pc, #24]	; (8001f60 <TFTLCD_Init+0x198>)
 8001f48:	f009 fe64 	bl	800bc14 <iprintf>
	if(lcddev.id==0X9341)	//9341初始化
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <TFTLCD_Init+0x194>)
 8001f4e:	889b      	ldrh	r3, [r3, #4]
 8001f50:	f249 3241 	movw	r2, #37697	; 0x9341
 8001f54:	4293      	cmp	r3, r2
 8001f56:	f040 811b 	bne.w	8002190 <TFTLCD_Init+0x3c8>
 8001f5a:	e003      	b.n	8001f64 <TFTLCD_Init+0x19c>
 8001f5c:	20000310 	.word	0x20000310
 8001f60:	0800f4e0 	.word	0x0800f4e0
	{
		LCD_WR_REG(0xCF);
 8001f64:	20cf      	movs	r0, #207	; 0xcf
 8001f66:	f7ff fa03 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f7ff fa14 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 8001f70:	20c1      	movs	r0, #193	; 0xc1
 8001f72:	f7ff fa11 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 8001f76:	2030      	movs	r0, #48	; 0x30
 8001f78:	f7ff fa0e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 8001f7c:	20ed      	movs	r0, #237	; 0xed
 8001f7e:	f7ff f9f7 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 8001f82:	2064      	movs	r0, #100	; 0x64
 8001f84:	f7ff fa08 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8001f88:	2003      	movs	r0, #3
 8001f8a:	f7ff fa05 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 8001f8e:	2012      	movs	r0, #18
 8001f90:	f7ff fa02 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 8001f94:	2081      	movs	r0, #129	; 0x81
 8001f96:	f7ff f9ff 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 8001f9a:	20e8      	movs	r0, #232	; 0xe8
 8001f9c:	f7ff f9e8 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 8001fa0:	2085      	movs	r0, #133	; 0x85
 8001fa2:	f7ff f9f9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8001fa6:	2010      	movs	r0, #16
 8001fa8:	f7ff f9f6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8001fac:	207a      	movs	r0, #122	; 0x7a
 8001fae:	f7ff f9f3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 8001fb2:	20cb      	movs	r0, #203	; 0xcb
 8001fb4:	f7ff f9dc 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 8001fb8:	2039      	movs	r0, #57	; 0x39
 8001fba:	f7ff f9ed 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8001fbe:	202c      	movs	r0, #44	; 0x2c
 8001fc0:	f7ff f9ea 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f7ff f9e7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8001fca:	2034      	movs	r0, #52	; 0x34
 8001fcc:	f7ff f9e4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8001fd0:	2002      	movs	r0, #2
 8001fd2:	f7ff f9e1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 8001fd6:	20f7      	movs	r0, #247	; 0xf7
 8001fd8:	f7ff f9ca 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8001fdc:	2020      	movs	r0, #32
 8001fde:	f7ff f9db 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 8001fe2:	20ea      	movs	r0, #234	; 0xea
 8001fe4:	f7ff f9c4 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7ff f9d5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f7ff f9d2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 8001ff4:	20c0      	movs	r0, #192	; 0xc0
 8001ff6:	f7ff f9bb 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001ffa:	201b      	movs	r0, #27
 8001ffc:	f7ff f9cc 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 8002000:	20c1      	movs	r0, #193	; 0xc1
 8002002:	f7ff f9b5 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002006:	2001      	movs	r0, #1
 8002008:	f7ff f9c6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 800200c:	20c5      	movs	r0, #197	; 0xc5
 800200e:	f7ff f9af 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 8002012:	2030      	movs	r0, #48	; 0x30
 8002014:	f7ff f9c0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 8002018:	2030      	movs	r0, #48	; 0x30
 800201a:	f7ff f9bd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 800201e:	20c7      	movs	r0, #199	; 0xc7
 8002020:	f7ff f9a6 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 8002024:	20b7      	movs	r0, #183	; 0xb7
 8002026:	f7ff f9b7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 800202a:	2036      	movs	r0, #54	; 0x36
 800202c:	f7ff f9a0 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 8002030:	2048      	movs	r0, #72	; 0x48
 8002032:	f7ff f9b1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 8002036:	203a      	movs	r0, #58	; 0x3a
 8002038:	f7ff f99a 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 800203c:	2055      	movs	r0, #85	; 0x55
 800203e:	f7ff f9ab 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 8002042:	20b1      	movs	r0, #177	; 0xb1
 8002044:	f7ff f994 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002048:	2000      	movs	r0, #0
 800204a:	f7ff f9a5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 800204e:	201a      	movs	r0, #26
 8002050:	f7ff f9a2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 8002054:	20b6      	movs	r0, #182	; 0xb6
 8002056:	f7ff f98b 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 800205a:	200a      	movs	r0, #10
 800205c:	f7ff f99c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002060:	20a2      	movs	r0, #162	; 0xa2
 8002062:	f7ff f999 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002066:	20f2      	movs	r0, #242	; 0xf2
 8002068:	f7ff f982 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800206c:	2000      	movs	r0, #0
 800206e:	f7ff f993 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 8002072:	2026      	movs	r0, #38	; 0x26
 8002074:	f7ff f97c 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002078:	2001      	movs	r0, #1
 800207a:	f7ff f98d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 800207e:	20e0      	movs	r0, #224	; 0xe0
 8002080:	f7ff f976 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 8002084:	200f      	movs	r0, #15
 8002086:	f7ff f987 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 800208a:	202a      	movs	r0, #42	; 0x2a
 800208c:	f7ff f984 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 8002090:	2028      	movs	r0, #40	; 0x28
 8002092:	f7ff f981 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8002096:	2008      	movs	r0, #8
 8002098:	f7ff f97e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 800209c:	200e      	movs	r0, #14
 800209e:	f7ff f97b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 80020a2:	2008      	movs	r0, #8
 80020a4:	f7ff f978 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 80020a8:	2054      	movs	r0, #84	; 0x54
 80020aa:	f7ff f975 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 80020ae:	20a9      	movs	r0, #169	; 0xa9
 80020b0:	f7ff f972 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 80020b4:	2043      	movs	r0, #67	; 0x43
 80020b6:	f7ff f96f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 80020ba:	200a      	movs	r0, #10
 80020bc:	f7ff f96c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 80020c0:	200f      	movs	r0, #15
 80020c2:	f7ff f969 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7ff f966 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020cc:	2000      	movs	r0, #0
 80020ce:	f7ff f963 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020d2:	2000      	movs	r0, #0
 80020d4:	f7ff f960 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020d8:	2000      	movs	r0, #0
 80020da:	f7ff f95d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 80020de:	20e1      	movs	r0, #225	; 0xe1
 80020e0:	f7ff f946 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff f957 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 80020ea:	2015      	movs	r0, #21
 80020ec:	f7ff f954 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 80020f0:	2017      	movs	r0, #23
 80020f2:	f7ff f951 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 80020f6:	2007      	movs	r0, #7
 80020f8:	f7ff f94e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 80020fc:	2011      	movs	r0, #17
 80020fe:	f7ff f94b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 8002102:	2006      	movs	r0, #6
 8002104:	f7ff f948 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 8002108:	202b      	movs	r0, #43	; 0x2b
 800210a:	f7ff f945 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 800210e:	2056      	movs	r0, #86	; 0x56
 8002110:	f7ff f942 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002114:	203c      	movs	r0, #60	; 0x3c
 8002116:	f7ff f93f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 800211a:	2005      	movs	r0, #5
 800211c:	f7ff f93c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8002120:	2010      	movs	r0, #16
 8002122:	f7ff f939 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8002126:	200f      	movs	r0, #15
 8002128:	f7ff f936 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 800212c:	203f      	movs	r0, #63	; 0x3f
 800212e:	f7ff f933 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8002132:	203f      	movs	r0, #63	; 0x3f
 8002134:	f7ff f930 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8002138:	200f      	movs	r0, #15
 800213a:	f7ff f92d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 800213e:	202b      	movs	r0, #43	; 0x2b
 8002140:	f7ff f916 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002144:	2000      	movs	r0, #0
 8002146:	f7ff f927 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800214a:	2000      	movs	r0, #0
 800214c:	f7ff f924 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8002150:	2001      	movs	r0, #1
 8002152:	f7ff f921 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 8002156:	203f      	movs	r0, #63	; 0x3f
 8002158:	f7ff f91e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 800215c:	202a      	movs	r0, #42	; 0x2a
 800215e:	f7ff f907 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002162:	2000      	movs	r0, #0
 8002164:	f7ff f918 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002168:	2000      	movs	r0, #0
 800216a:	f7ff f915 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800216e:	2000      	movs	r0, #0
 8002170:	f7ff f912 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 8002174:	20ef      	movs	r0, #239	; 0xef
 8002176:	f7ff f90f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 800217a:	2011      	movs	r0, #17
 800217c:	f7ff f8f8 	bl	8001370 <LCD_WR_REG>
		HAL_Delay(120);
 8002180:	2078      	movs	r0, #120	; 0x78
 8002182:	f004 ff27 	bl	8006fd4 <HAL_Delay>
		LCD_WR_REG(0x29); //display on
 8002186:	2029      	movs	r0, #41	; 0x29
 8002188:	f7ff f8f2 	bl	8001370 <LCD_WR_REG>
 800218c:	f001 bfca 	b.w	8004124 <TFTLCD_Init+0x235c>
	}else if(lcddev.id==0x5310)
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <TFTLCD_Init+0x3d8>)
 8002192:	889b      	ldrh	r3, [r3, #4]
 8002194:	f245 3210 	movw	r2, #21264	; 0x5310
 8002198:	4293      	cmp	r3, r2
 800219a:	f040 877c 	bne.w	8003096 <TFTLCD_Init+0x12ce>
 800219e:	e001      	b.n	80021a4 <TFTLCD_Init+0x3dc>
 80021a0:	20000310 	.word	0x20000310
	{
		LCD_WR_REG(0xED);
 80021a4:	20ed      	movs	r0, #237	; 0xed
 80021a6:	f7ff f8e3 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7ff f8f4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 80021b0:	20fe      	movs	r0, #254	; 0xfe
 80021b2:	f7ff f8f1 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 80021b6:	20ee      	movs	r0, #238	; 0xee
 80021b8:	f7ff f8da 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 80021bc:	20de      	movs	r0, #222	; 0xde
 80021be:	f7ff f8eb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 80021c2:	2021      	movs	r0, #33	; 0x21
 80021c4:	f7ff f8e8 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 80021c8:	20f1      	movs	r0, #241	; 0xf1
 80021ca:	f7ff f8d1 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80021ce:	2001      	movs	r0, #1
 80021d0:	f7ff f8e2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 80021d4:	20df      	movs	r0, #223	; 0xdf
 80021d6:	f7ff f8cb 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 80021da:	2010      	movs	r0, #16
 80021dc:	f7ff f8dc 	bl	8001398 <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80021e0:	20c4      	movs	r0, #196	; 0xc4
 80021e2:	f7ff f8c5 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 80021e6:	208f      	movs	r0, #143	; 0x8f
 80021e8:	f7ff f8d6 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 80021ec:	20c6      	movs	r0, #198	; 0xc6
 80021ee:	f7ff f8bf 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7ff f8d0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80021f8:	20e2      	movs	r0, #226	; 0xe2
 80021fa:	f7ff f8cd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80021fe:	20e2      	movs	r0, #226	; 0xe2
 8002200:	f7ff f8ca 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8002204:	20e2      	movs	r0, #226	; 0xe2
 8002206:	f7ff f8c7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 800220a:	20bf      	movs	r0, #191	; 0xbf
 800220c:	f7ff f8b0 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002210:	20aa      	movs	r0, #170	; 0xaa
 8002212:	f7ff f8c1 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 8002216:	20b0      	movs	r0, #176	; 0xb0
 8002218:	f7ff f8aa 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 800221c:	200d      	movs	r0, #13
 800221e:	f7ff f8bb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002222:	2000      	movs	r0, #0
 8002224:	f7ff f8b8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 8002228:	200d      	movs	r0, #13
 800222a:	f7ff f8b5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800222e:	2000      	movs	r0, #0
 8002230:	f7ff f8b2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8002234:	2011      	movs	r0, #17
 8002236:	f7ff f8af 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800223a:	2000      	movs	r0, #0
 800223c:	f7ff f8ac 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 8002240:	2019      	movs	r0, #25
 8002242:	f7ff f8a9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002246:	2000      	movs	r0, #0
 8002248:	f7ff f8a6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 800224c:	2021      	movs	r0, #33	; 0x21
 800224e:	f7ff f8a3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002252:	2000      	movs	r0, #0
 8002254:	f7ff f8a0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 8002258:	202d      	movs	r0, #45	; 0x2d
 800225a:	f7ff f89d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800225e:	2000      	movs	r0, #0
 8002260:	f7ff f89a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 8002264:	203d      	movs	r0, #61	; 0x3d
 8002266:	f7ff f897 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800226a:	2000      	movs	r0, #0
 800226c:	f7ff f894 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002270:	205d      	movs	r0, #93	; 0x5d
 8002272:	f7ff f891 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002276:	2000      	movs	r0, #0
 8002278:	f7ff f88e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 800227c:	205d      	movs	r0, #93	; 0x5d
 800227e:	f7ff f88b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002282:	2000      	movs	r0, #0
 8002284:	f7ff f888 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 8002288:	20b1      	movs	r0, #177	; 0xb1
 800228a:	f7ff f871 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 800228e:	2080      	movs	r0, #128	; 0x80
 8002290:	f7ff f882 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002294:	2000      	movs	r0, #0
 8002296:	f7ff f87f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 800229a:	208b      	movs	r0, #139	; 0x8b
 800229c:	f7ff f87c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7ff f879 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 80022a6:	2096      	movs	r0, #150	; 0x96
 80022a8:	f7ff f876 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7ff f873 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 80022b2:	20b2      	movs	r0, #178	; 0xb2
 80022b4:	f7ff f85c 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7ff f86d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022be:	2000      	movs	r0, #0
 80022c0:	f7ff f86a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 80022c4:	2002      	movs	r0, #2
 80022c6:	f7ff f867 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f7ff f864 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 80022d0:	2003      	movs	r0, #3
 80022d2:	f7ff f861 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f7ff f85e 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 80022dc:	20b3      	movs	r0, #179	; 0xb3
 80022de:	f7ff f847 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7ff f858 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7ff f855 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ee:	2000      	movs	r0, #0
 80022f0:	f7ff f852 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7ff f84f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f7ff f84c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002300:	2000      	movs	r0, #0
 8002302:	f7ff f849 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002306:	2000      	movs	r0, #0
 8002308:	f7ff f846 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800230c:	2000      	movs	r0, #0
 800230e:	f7ff f843 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002312:	2000      	movs	r0, #0
 8002314:	f7ff f840 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002318:	2000      	movs	r0, #0
 800231a:	f7ff f83d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800231e:	2000      	movs	r0, #0
 8002320:	f7ff f83a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002324:	2000      	movs	r0, #0
 8002326:	f7ff f837 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800232a:	2000      	movs	r0, #0
 800232c:	f7ff f834 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002330:	2000      	movs	r0, #0
 8002332:	f7ff f831 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002336:	2000      	movs	r0, #0
 8002338:	f7ff f82e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800233c:	2000      	movs	r0, #0
 800233e:	f7ff f82b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002342:	2000      	movs	r0, #0
 8002344:	f7ff f828 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002348:	2000      	movs	r0, #0
 800234a:	f7ff f825 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800234e:	2000      	movs	r0, #0
 8002350:	f7ff f822 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002354:	2000      	movs	r0, #0
 8002356:	f7ff f81f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800235a:	2000      	movs	r0, #0
 800235c:	f7ff f81c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff f819 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002366:	2000      	movs	r0, #0
 8002368:	f7ff f816 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800236c:	2000      	movs	r0, #0
 800236e:	f7ff f813 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 8002372:	20b4      	movs	r0, #180	; 0xb4
 8002374:	f7fe fffc 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 8002378:	208b      	movs	r0, #139	; 0x8b
 800237a:	f7ff f80d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800237e:	2000      	movs	r0, #0
 8002380:	f7ff f80a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8002384:	2096      	movs	r0, #150	; 0x96
 8002386:	f7ff f807 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800238a:	2000      	movs	r0, #0
 800238c:	f7ff f804 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 8002390:	20a1      	movs	r0, #161	; 0xa1
 8002392:	f7ff f801 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002396:	2000      	movs	r0, #0
 8002398:	f7fe fffe 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 800239c:	20b5      	movs	r0, #181	; 0xb5
 800239e:	f7fe ffe7 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 80023a2:	2002      	movs	r0, #2
 80023a4:	f7fe fff8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023a8:	2000      	movs	r0, #0
 80023aa:	f7fe fff5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 80023ae:	2003      	movs	r0, #3
 80023b0:	f7fe fff2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023b4:	2000      	movs	r0, #0
 80023b6:	f7fe ffef 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 80023ba:	2004      	movs	r0, #4
 80023bc:	f7fe ffec 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe ffe9 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 80023c6:	20b6      	movs	r0, #182	; 0xb6
 80023c8:	f7fe ffd2 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7fe ffe3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7fe ffe0 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 80023d8:	20b7      	movs	r0, #183	; 0xb7
 80023da:	f7fe ffc9 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80023de:	2000      	movs	r0, #0
 80023e0:	f7fe ffda 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7fe ffd7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80023ea:	203f      	movs	r0, #63	; 0x3f
 80023ec:	f7fe ffd4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7fe ffd1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 80023f6:	205e      	movs	r0, #94	; 0x5e
 80023f8:	f7fe ffce 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7fe ffcb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002402:	2064      	movs	r0, #100	; 0x64
 8002404:	f7fe ffc8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002408:	2000      	movs	r0, #0
 800240a:	f7fe ffc5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 800240e:	208c      	movs	r0, #140	; 0x8c
 8002410:	f7fe ffc2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002414:	2000      	movs	r0, #0
 8002416:	f7fe ffbf 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 800241a:	20ac      	movs	r0, #172	; 0xac
 800241c:	f7fe ffbc 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002420:	2000      	movs	r0, #0
 8002422:	f7fe ffb9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002426:	20dc      	movs	r0, #220	; 0xdc
 8002428:	f7fe ffb6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800242c:	2000      	movs	r0, #0
 800242e:	f7fe ffb3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 8002432:	2070      	movs	r0, #112	; 0x70
 8002434:	f7fe ffb0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe ffad 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 800243e:	2090      	movs	r0, #144	; 0x90
 8002440:	f7fe ffaa 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002444:	2000      	movs	r0, #0
 8002446:	f7fe ffa7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 800244a:	20eb      	movs	r0, #235	; 0xeb
 800244c:	f7fe ffa4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002450:	2000      	movs	r0, #0
 8002452:	f7fe ffa1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002456:	20dc      	movs	r0, #220	; 0xdc
 8002458:	f7fe ff9e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800245c:	2000      	movs	r0, #0
 800245e:	f7fe ff9b 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 8002462:	20b8      	movs	r0, #184	; 0xb8
 8002464:	f7fe ff84 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002468:	2000      	movs	r0, #0
 800246a:	f7fe ff95 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800246e:	2000      	movs	r0, #0
 8002470:	f7fe ff92 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002474:	2000      	movs	r0, #0
 8002476:	f7fe ff8f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800247a:	2000      	movs	r0, #0
 800247c:	f7fe ff8c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002480:	2000      	movs	r0, #0
 8002482:	f7fe ff89 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002486:	2000      	movs	r0, #0
 8002488:	f7fe ff86 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800248c:	2000      	movs	r0, #0
 800248e:	f7fe ff83 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002492:	2000      	movs	r0, #0
 8002494:	f7fe ff80 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 8002498:	20ba      	movs	r0, #186	; 0xba
 800249a:	f7fe ff69 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 800249e:	2024      	movs	r0, #36	; 0x24
 80024a0:	f7fe ff7a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7fe ff77 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7fe ff74 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7fe ff71 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 80024b6:	20c1      	movs	r0, #193	; 0xc1
 80024b8:	f7fe ff5a 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 80024bc:	2020      	movs	r0, #32
 80024be:	f7fe ff6b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7fe ff68 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 80024c8:	2054      	movs	r0, #84	; 0x54
 80024ca:	f7fe ff65 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7fe ff62 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 80024d4:	20ff      	movs	r0, #255	; 0xff
 80024d6:	f7fe ff5f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024da:	2000      	movs	r0, #0
 80024dc:	f7fe ff5c 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 80024e0:	20c2      	movs	r0, #194	; 0xc2
 80024e2:	f7fe ff45 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 80024e6:	200a      	movs	r0, #10
 80024e8:	f7fe ff56 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7fe ff53 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 80024f2:	2004      	movs	r0, #4
 80024f4:	f7fe ff50 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7fe ff4d 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 80024fe:	20c3      	movs	r0, #195	; 0xc3
 8002500:	f7fe ff36 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 8002504:	203c      	movs	r0, #60	; 0x3c
 8002506:	f7fe ff47 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800250a:	2000      	movs	r0, #0
 800250c:	f7fe ff44 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 8002510:	203a      	movs	r0, #58	; 0x3a
 8002512:	f7fe ff41 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe ff3e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 800251c:	2039      	movs	r0, #57	; 0x39
 800251e:	f7fe ff3b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002522:	2000      	movs	r0, #0
 8002524:	f7fe ff38 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 8002528:	2037      	movs	r0, #55	; 0x37
 800252a:	f7fe ff35 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800252e:	2000      	movs	r0, #0
 8002530:	f7fe ff32 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002534:	203c      	movs	r0, #60	; 0x3c
 8002536:	f7fe ff2f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800253a:	2000      	movs	r0, #0
 800253c:	f7fe ff2c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002540:	2036      	movs	r0, #54	; 0x36
 8002542:	f7fe ff29 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002546:	2000      	movs	r0, #0
 8002548:	f7fe ff26 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 800254c:	2032      	movs	r0, #50	; 0x32
 800254e:	f7fe ff23 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002552:	2000      	movs	r0, #0
 8002554:	f7fe ff20 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8002558:	202f      	movs	r0, #47	; 0x2f
 800255a:	f7fe ff1d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800255e:	2000      	movs	r0, #0
 8002560:	f7fe ff1a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002564:	202c      	movs	r0, #44	; 0x2c
 8002566:	f7fe ff17 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800256a:	2000      	movs	r0, #0
 800256c:	f7fe ff14 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002570:	2029      	movs	r0, #41	; 0x29
 8002572:	f7fe ff11 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002576:	2000      	movs	r0, #0
 8002578:	f7fe ff0e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 800257c:	2026      	movs	r0, #38	; 0x26
 800257e:	f7fe ff0b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002582:	2000      	movs	r0, #0
 8002584:	f7fe ff08 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002588:	2024      	movs	r0, #36	; 0x24
 800258a:	f7fe ff05 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800258e:	2000      	movs	r0, #0
 8002590:	f7fe ff02 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002594:	2024      	movs	r0, #36	; 0x24
 8002596:	f7fe feff 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800259a:	2000      	movs	r0, #0
 800259c:	f7fe fefc 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 80025a0:	2023      	movs	r0, #35	; 0x23
 80025a2:	f7fe fef9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7fe fef6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 80025ac:	203c      	movs	r0, #60	; 0x3c
 80025ae:	f7fe fef3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025b2:	2000      	movs	r0, #0
 80025b4:	f7fe fef0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80025b8:	2036      	movs	r0, #54	; 0x36
 80025ba:	f7fe feed 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025be:	2000      	movs	r0, #0
 80025c0:	f7fe feea 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 80025c4:	2032      	movs	r0, #50	; 0x32
 80025c6:	f7fe fee7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7fe fee4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 80025d0:	202f      	movs	r0, #47	; 0x2f
 80025d2:	f7fe fee1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7fe fede 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 80025dc:	202c      	movs	r0, #44	; 0x2c
 80025de:	f7fe fedb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe fed8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 80025e8:	2029      	movs	r0, #41	; 0x29
 80025ea:	f7fe fed5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7fe fed2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 80025f4:	2026      	movs	r0, #38	; 0x26
 80025f6:	f7fe fecf 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7fe fecc 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002600:	2024      	movs	r0, #36	; 0x24
 8002602:	f7fe fec9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002606:	2000      	movs	r0, #0
 8002608:	f7fe fec6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 800260c:	2024      	movs	r0, #36	; 0x24
 800260e:	f7fe fec3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002612:	2000      	movs	r0, #0
 8002614:	f7fe fec0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002618:	2023      	movs	r0, #35	; 0x23
 800261a:	f7fe febd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800261e:	2000      	movs	r0, #0
 8002620:	f7fe feba 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 8002624:	20c4      	movs	r0, #196	; 0xc4
 8002626:	f7fe fea3 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 800262a:	2062      	movs	r0, #98	; 0x62
 800262c:	f7fe feb4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002630:	2000      	movs	r0, #0
 8002632:	f7fe feb1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8002636:	2005      	movs	r0, #5
 8002638:	f7fe feae 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800263c:	2000      	movs	r0, #0
 800263e:	f7fe feab 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002642:	2084      	movs	r0, #132	; 0x84
 8002644:	f7fe fea8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002648:	2000      	movs	r0, #0
 800264a:	f7fe fea5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 800264e:	20f0      	movs	r0, #240	; 0xf0
 8002650:	f7fe fea2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002654:	2000      	movs	r0, #0
 8002656:	f7fe fe9f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 800265a:	2018      	movs	r0, #24
 800265c:	f7fe fe9c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002660:	2000      	movs	r0, #0
 8002662:	f7fe fe99 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 8002666:	20a4      	movs	r0, #164	; 0xa4
 8002668:	f7fe fe96 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800266c:	2000      	movs	r0, #0
 800266e:	f7fe fe93 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8002672:	2018      	movs	r0, #24
 8002674:	f7fe fe90 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002678:	2000      	movs	r0, #0
 800267a:	f7fe fe8d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 800267e:	2050      	movs	r0, #80	; 0x50
 8002680:	f7fe fe8a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002684:	2000      	movs	r0, #0
 8002686:	f7fe fe87 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 800268a:	200c      	movs	r0, #12
 800268c:	f7fe fe84 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002690:	2000      	movs	r0, #0
 8002692:	f7fe fe81 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8002696:	2017      	movs	r0, #23
 8002698:	f7fe fe7e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800269c:	2000      	movs	r0, #0
 800269e:	f7fe fe7b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 80026a2:	2095      	movs	r0, #149	; 0x95
 80026a4:	f7fe fe78 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7fe fe75 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80026ae:	20f3      	movs	r0, #243	; 0xf3
 80026b0:	f7fe fe72 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7fe fe6f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 80026ba:	20e6      	movs	r0, #230	; 0xe6
 80026bc:	f7fe fe6c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe fe69 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 80026c6:	20c5      	movs	r0, #197	; 0xc5
 80026c8:	f7fe fe52 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 80026cc:	2032      	movs	r0, #50	; 0x32
 80026ce:	f7fe fe63 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026d2:	2000      	movs	r0, #0
 80026d4:	f7fe fe60 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80026d8:	2044      	movs	r0, #68	; 0x44
 80026da:	f7fe fe5d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026de:	2000      	movs	r0, #0
 80026e0:	f7fe fe5a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 80026e4:	2065      	movs	r0, #101	; 0x65
 80026e6:	f7fe fe57 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f7fe fe54 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80026f0:	2076      	movs	r0, #118	; 0x76
 80026f2:	f7fe fe51 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7fe fe4e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80026fc:	2088      	movs	r0, #136	; 0x88
 80026fe:	f7fe fe4b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe fe48 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8002708:	20c6      	movs	r0, #198	; 0xc6
 800270a:	f7fe fe31 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 800270e:	2020      	movs	r0, #32
 8002710:	f7fe fe42 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002714:	2000      	movs	r0, #0
 8002716:	f7fe fe3f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 800271a:	2017      	movs	r0, #23
 800271c:	f7fe fe3c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe fe39 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8002726:	2001      	movs	r0, #1
 8002728:	f7fe fe36 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800272c:	2000      	movs	r0, #0
 800272e:	f7fe fe33 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 8002732:	20c7      	movs	r0, #199	; 0xc7
 8002734:	f7fe fe1c 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002738:	2000      	movs	r0, #0
 800273a:	f7fe fe2d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800273e:	2000      	movs	r0, #0
 8002740:	f7fe fe2a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002744:	2000      	movs	r0, #0
 8002746:	f7fe fe27 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800274a:	2000      	movs	r0, #0
 800274c:	f7fe fe24 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8002750:	20c8      	movs	r0, #200	; 0xc8
 8002752:	f7fe fe0d 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002756:	2000      	movs	r0, #0
 8002758:	f7fe fe1e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800275c:	2000      	movs	r0, #0
 800275e:	f7fe fe1b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002762:	2000      	movs	r0, #0
 8002764:	f7fe fe18 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002768:	2000      	movs	r0, #0
 800276a:	f7fe fe15 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 800276e:	20c9      	movs	r0, #201	; 0xc9
 8002770:	f7fe fdfe 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002774:	2000      	movs	r0, #0
 8002776:	f7fe fe0f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800277a:	2000      	movs	r0, #0
 800277c:	f7fe fe0c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002780:	2000      	movs	r0, #0
 8002782:	f7fe fe09 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002786:	2000      	movs	r0, #0
 8002788:	f7fe fe06 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800278c:	2000      	movs	r0, #0
 800278e:	f7fe fe03 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002792:	2000      	movs	r0, #0
 8002794:	f7fe fe00 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002798:	2000      	movs	r0, #0
 800279a:	f7fe fdfd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800279e:	2000      	movs	r0, #0
 80027a0:	f7fe fdfa 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7fe fdf7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7fe fdf4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7fe fdf1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7fe fdee 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027bc:	2000      	movs	r0, #0
 80027be:	f7fe fdeb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027c2:	2000      	movs	r0, #0
 80027c4:	f7fe fde8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7fe fde5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7fe fde2 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 80027d4:	20e0      	movs	r0, #224	; 0xe0
 80027d6:	f7fe fdcb 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 80027da:	2016      	movs	r0, #22
 80027dc:	f7fe fddc 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7fe fdd9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80027e6:	201c      	movs	r0, #28
 80027e8:	f7fe fdd6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7fe fdd3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 80027f2:	2021      	movs	r0, #33	; 0x21
 80027f4:	f7fe fdd0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7fe fdcd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80027fe:	2036      	movs	r0, #54	; 0x36
 8002800:	f7fe fdca 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002804:	2000      	movs	r0, #0
 8002806:	f7fe fdc7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 800280a:	2046      	movs	r0, #70	; 0x46
 800280c:	f7fe fdc4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002810:	2000      	movs	r0, #0
 8002812:	f7fe fdc1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 8002816:	2052      	movs	r0, #82	; 0x52
 8002818:	f7fe fdbe 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800281c:	2000      	movs	r0, #0
 800281e:	f7fe fdbb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002822:	2064      	movs	r0, #100	; 0x64
 8002824:	f7fe fdb8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002828:	2000      	movs	r0, #0
 800282a:	f7fe fdb5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 800282e:	207a      	movs	r0, #122	; 0x7a
 8002830:	f7fe fdb2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002834:	2000      	movs	r0, #0
 8002836:	f7fe fdaf 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 800283a:	208b      	movs	r0, #139	; 0x8b
 800283c:	f7fe fdac 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002840:	2000      	movs	r0, #0
 8002842:	f7fe fda9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002846:	2099      	movs	r0, #153	; 0x99
 8002848:	f7fe fda6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800284c:	2000      	movs	r0, #0
 800284e:	f7fe fda3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002852:	20a8      	movs	r0, #168	; 0xa8
 8002854:	f7fe fda0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002858:	2000      	movs	r0, #0
 800285a:	f7fe fd9d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 800285e:	20b9      	movs	r0, #185	; 0xb9
 8002860:	f7fe fd9a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002864:	2000      	movs	r0, #0
 8002866:	f7fe fd97 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800286a:	20c4      	movs	r0, #196	; 0xc4
 800286c:	f7fe fd94 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002870:	2000      	movs	r0, #0
 8002872:	f7fe fd91 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8002876:	20ca      	movs	r0, #202	; 0xca
 8002878:	f7fe fd8e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800287c:	2000      	movs	r0, #0
 800287e:	f7fe fd8b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002882:	20d2      	movs	r0, #210	; 0xd2
 8002884:	f7fe fd88 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002888:	2000      	movs	r0, #0
 800288a:	f7fe fd85 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 800288e:	20d9      	movs	r0, #217	; 0xd9
 8002890:	f7fe fd82 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002894:	2000      	movs	r0, #0
 8002896:	f7fe fd7f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 800289a:	20e0      	movs	r0, #224	; 0xe0
 800289c:	f7fe fd7c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7fe fd79 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80028a6:	20f3      	movs	r0, #243	; 0xf3
 80028a8:	f7fe fd76 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7fe fd73 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 80028b2:	20e1      	movs	r0, #225	; 0xe1
 80028b4:	f7fe fd5c 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 80028b8:	2016      	movs	r0, #22
 80028ba:	f7fe fd6d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028be:	2000      	movs	r0, #0
 80028c0:	f7fe fd6a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80028c4:	201c      	movs	r0, #28
 80028c6:	f7fe fd67 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ca:	2000      	movs	r0, #0
 80028cc:	f7fe fd64 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 80028d0:	2022      	movs	r0, #34	; 0x22
 80028d2:	f7fe fd61 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7fe fd5e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80028dc:	2036      	movs	r0, #54	; 0x36
 80028de:	f7fe fd5b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028e2:	2000      	movs	r0, #0
 80028e4:	f7fe fd58 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80028e8:	2045      	movs	r0, #69	; 0x45
 80028ea:	f7fe fd55 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7fe fd52 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80028f4:	2052      	movs	r0, #82	; 0x52
 80028f6:	f7fe fd4f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028fa:	2000      	movs	r0, #0
 80028fc:	f7fe fd4c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002900:	2064      	movs	r0, #100	; 0x64
 8002902:	f7fe fd49 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002906:	2000      	movs	r0, #0
 8002908:	f7fe fd46 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 800290c:	207a      	movs	r0, #122	; 0x7a
 800290e:	f7fe fd43 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002912:	2000      	movs	r0, #0
 8002914:	f7fe fd40 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8002918:	208b      	movs	r0, #139	; 0x8b
 800291a:	f7fe fd3d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800291e:	2000      	movs	r0, #0
 8002920:	f7fe fd3a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002924:	2099      	movs	r0, #153	; 0x99
 8002926:	f7fe fd37 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800292a:	2000      	movs	r0, #0
 800292c:	f7fe fd34 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002930:	20a8      	movs	r0, #168	; 0xa8
 8002932:	f7fe fd31 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002936:	2000      	movs	r0, #0
 8002938:	f7fe fd2e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 800293c:	20b9      	movs	r0, #185	; 0xb9
 800293e:	f7fe fd2b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002942:	2000      	movs	r0, #0
 8002944:	f7fe fd28 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002948:	20c4      	movs	r0, #196	; 0xc4
 800294a:	f7fe fd25 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800294e:	2000      	movs	r0, #0
 8002950:	f7fe fd22 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8002954:	20ca      	movs	r0, #202	; 0xca
 8002956:	f7fe fd1f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800295a:	2000      	movs	r0, #0
 800295c:	f7fe fd1c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002960:	20d2      	movs	r0, #210	; 0xd2
 8002962:	f7fe fd19 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002966:	2000      	movs	r0, #0
 8002968:	f7fe fd16 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 800296c:	20d8      	movs	r0, #216	; 0xd8
 800296e:	f7fe fd13 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002972:	2000      	movs	r0, #0
 8002974:	f7fe fd10 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8002978:	20e0      	movs	r0, #224	; 0xe0
 800297a:	f7fe fd0d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800297e:	2000      	movs	r0, #0
 8002980:	f7fe fd0a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002984:	20f3      	movs	r0, #243	; 0xf3
 8002986:	f7fe fd07 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800298a:	2000      	movs	r0, #0
 800298c:	f7fe fd04 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 8002990:	20e2      	movs	r0, #226	; 0xe2
 8002992:	f7fe fced 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8002996:	2005      	movs	r0, #5
 8002998:	f7fe fcfe 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800299c:	2000      	movs	r0, #0
 800299e:	f7fe fcfb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 80029a2:	200b      	movs	r0, #11
 80029a4:	f7fe fcf8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7fe fcf5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 80029ae:	201b      	movs	r0, #27
 80029b0:	f7fe fcf2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7fe fcef 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 80029ba:	2034      	movs	r0, #52	; 0x34
 80029bc:	f7fe fcec 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7fe fce9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80029c6:	2044      	movs	r0, #68	; 0x44
 80029c8:	f7fe fce6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7fe fce3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 80029d2:	204f      	movs	r0, #79	; 0x4f
 80029d4:	f7fe fce0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029d8:	2000      	movs	r0, #0
 80029da:	f7fe fcdd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 80029de:	2061      	movs	r0, #97	; 0x61
 80029e0:	f7fe fcda 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7fe fcd7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 80029ea:	2079      	movs	r0, #121	; 0x79
 80029ec:	f7fe fcd4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7fe fcd1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80029f6:	2088      	movs	r0, #136	; 0x88
 80029f8:	f7fe fcce 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7fe fccb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8002a02:	2097      	movs	r0, #151	; 0x97
 8002a04:	f7fe fcc8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7fe fcc5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8002a0e:	20a6      	movs	r0, #166	; 0xa6
 8002a10:	f7fe fcc2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fe fcbf 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 8002a1a:	20b7      	movs	r0, #183	; 0xb7
 8002a1c:	f7fe fcbc 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7fe fcb9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8002a26:	20c2      	movs	r0, #194	; 0xc2
 8002a28:	f7fe fcb6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7fe fcb3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8002a32:	20c7      	movs	r0, #199	; 0xc7
 8002a34:	f7fe fcb0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7fe fcad 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8002a3e:	20d1      	movs	r0, #209	; 0xd1
 8002a40:	f7fe fcaa 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7fe fca7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 8002a4a:	20d6      	movs	r0, #214	; 0xd6
 8002a4c:	f7fe fca4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7fe fca1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002a56:	20dd      	movs	r0, #221	; 0xdd
 8002a58:	f7fe fc9e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7fe fc9b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002a62:	20f3      	movs	r0, #243	; 0xf3
 8002a64:	f7fe fc98 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7fe fc95 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 8002a6e:	20e3      	movs	r0, #227	; 0xe3
 8002a70:	f7fe fc7e 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8002a74:	2005      	movs	r0, #5
 8002a76:	f7fe fc8f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f7fe fc8c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 8002a80:	200a      	movs	r0, #10
 8002a82:	f7fe fc89 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7fe fc86 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8002a8c:	201c      	movs	r0, #28
 8002a8e:	f7fe fc83 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f7fe fc80 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002a98:	2033      	movs	r0, #51	; 0x33
 8002a9a:	f7fe fc7d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7fe fc7a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002aa4:	2044      	movs	r0, #68	; 0x44
 8002aa6:	f7fe fc77 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7fe fc74 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002ab0:	2050      	movs	r0, #80	; 0x50
 8002ab2:	f7fe fc71 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7fe fc6e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 8002abc:	2062      	movs	r0, #98	; 0x62
 8002abe:	f7fe fc6b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f7fe fc68 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 8002ac8:	2078      	movs	r0, #120	; 0x78
 8002aca:	f7fe fc65 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f7fe fc62 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002ad4:	2088      	movs	r0, #136	; 0x88
 8002ad6:	f7fe fc5f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7fe fc5c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8002ae0:	2097      	movs	r0, #151	; 0x97
 8002ae2:	f7fe fc59 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7fe fc56 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8002aec:	20a6      	movs	r0, #166	; 0xa6
 8002aee:	f7fe fc53 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002af2:	2000      	movs	r0, #0
 8002af4:	f7fe fc50 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 8002af8:	20b7      	movs	r0, #183	; 0xb7
 8002afa:	f7fe fc4d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002afe:	2000      	movs	r0, #0
 8002b00:	f7fe fc4a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8002b04:	20c2      	movs	r0, #194	; 0xc2
 8002b06:	f7fe fc47 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f7fe fc44 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8002b10:	20c7      	movs	r0, #199	; 0xc7
 8002b12:	f7fe fc41 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b16:	2000      	movs	r0, #0
 8002b18:	f7fe fc3e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8002b1c:	20d1      	movs	r0, #209	; 0xd1
 8002b1e:	f7fe fc3b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b22:	2000      	movs	r0, #0
 8002b24:	f7fe fc38 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 8002b28:	20d5      	movs	r0, #213	; 0xd5
 8002b2a:	f7fe fc35 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7fe fc32 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002b34:	20dd      	movs	r0, #221	; 0xdd
 8002b36:	f7fe fc2f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f7fe fc2c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002b40:	20f3      	movs	r0, #243	; 0xf3
 8002b42:	f7fe fc29 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b46:	2000      	movs	r0, #0
 8002b48:	f7fe fc26 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 8002b4c:	20e4      	movs	r0, #228	; 0xe4
 8002b4e:	f7fe fc0f 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002b52:	2001      	movs	r0, #1
 8002b54:	f7fe fc20 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f7fe fc1d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8002b5e:	2001      	movs	r0, #1
 8002b60:	f7fe fc1a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7fe fc17 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002b6a:	2002      	movs	r0, #2
 8002b6c:	f7fe fc14 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b70:	2000      	movs	r0, #0
 8002b72:	f7fe fc11 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8002b76:	202a      	movs	r0, #42	; 0x2a
 8002b78:	f7fe fc0e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7fe fc0b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002b82:	203c      	movs	r0, #60	; 0x3c
 8002b84:	f7fe fc08 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f7fe fc05 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8002b8e:	204b      	movs	r0, #75	; 0x4b
 8002b90:	f7fe fc02 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7fe fbff 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002b9a:	205d      	movs	r0, #93	; 0x5d
 8002b9c:	f7fe fbfc 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f7fe fbf9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8002ba6:	2074      	movs	r0, #116	; 0x74
 8002ba8:	f7fe fbf6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bac:	2000      	movs	r0, #0
 8002bae:	f7fe fbf3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002bb2:	2084      	movs	r0, #132	; 0x84
 8002bb4:	f7fe fbf0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f7fe fbed 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8002bbe:	2093      	movs	r0, #147	; 0x93
 8002bc0:	f7fe fbea 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f7fe fbe7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002bca:	20a2      	movs	r0, #162	; 0xa2
 8002bcc:	f7fe fbe4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f7fe fbe1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8002bd6:	20b3      	movs	r0, #179	; 0xb3
 8002bd8:	f7fe fbde 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f7fe fbdb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8002be2:	20be      	movs	r0, #190	; 0xbe
 8002be4:	f7fe fbd8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002be8:	2000      	movs	r0, #0
 8002bea:	f7fe fbd5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002bee:	20c4      	movs	r0, #196	; 0xc4
 8002bf0:	f7fe fbd2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f7fe fbcf 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 8002bfa:	20cd      	movs	r0, #205	; 0xcd
 8002bfc:	f7fe fbcc 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c00:	2000      	movs	r0, #0
 8002c02:	f7fe fbc9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8002c06:	20d3      	movs	r0, #211	; 0xd3
 8002c08:	f7fe fbc6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7fe fbc3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002c12:	20dd      	movs	r0, #221	; 0xdd
 8002c14:	f7fe fbc0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f7fe fbbd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002c1e:	20f3      	movs	r0, #243	; 0xf3
 8002c20:	f7fe fbba 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7fe fbb7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 8002c2a:	20e5      	movs	r0, #229	; 0xe5
 8002c2c:	f7fe fba0 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002c30:	2000      	movs	r0, #0
 8002c32:	f7fe fbb1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f7fe fbae 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7fe fbab 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7fe fba8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002c48:	2002      	movs	r0, #2
 8002c4a:	f7fe fba5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f7fe fba2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002c54:	2029      	movs	r0, #41	; 0x29
 8002c56:	f7fe fb9f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f7fe fb9c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002c60:	203c      	movs	r0, #60	; 0x3c
 8002c62:	f7fe fb99 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7fe fb96 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8002c6c:	204b      	movs	r0, #75	; 0x4b
 8002c6e:	f7fe fb93 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c72:	2000      	movs	r0, #0
 8002c74:	f7fe fb90 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002c78:	205d      	movs	r0, #93	; 0x5d
 8002c7a:	f7fe fb8d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f7fe fb8a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8002c84:	2074      	movs	r0, #116	; 0x74
 8002c86:	f7fe fb87 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7fe fb84 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002c90:	2084      	movs	r0, #132	; 0x84
 8002c92:	f7fe fb81 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c96:	2000      	movs	r0, #0
 8002c98:	f7fe fb7e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8002c9c:	2093      	movs	r0, #147	; 0x93
 8002c9e:	f7fe fb7b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f7fe fb78 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002ca8:	20a2      	movs	r0, #162	; 0xa2
 8002caa:	f7fe fb75 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f7fe fb72 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8002cb4:	20b3      	movs	r0, #179	; 0xb3
 8002cb6:	f7fe fb6f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f7fe fb6c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8002cc0:	20be      	movs	r0, #190	; 0xbe
 8002cc2:	f7fe fb69 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f7fe fb66 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002ccc:	20c4      	movs	r0, #196	; 0xc4
 8002cce:	f7fe fb63 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f7fe fb60 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 8002cd8:	20cd      	movs	r0, #205	; 0xcd
 8002cda:	f7fe fb5d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f7fe fb5a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8002ce4:	20d3      	movs	r0, #211	; 0xd3
 8002ce6:	f7fe fb57 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cea:	2000      	movs	r0, #0
 8002cec:	f7fe fb54 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002cf0:	20dc      	movs	r0, #220	; 0xdc
 8002cf2:	f7fe fb51 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f7fe fb4e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002cfc:	20f3      	movs	r0, #243	; 0xf3
 8002cfe:	f7fe fb4b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7fe fb48 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 8002d08:	20e6      	movs	r0, #230	; 0xe6
 8002d0a:	f7fe fb31 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 8002d0e:	2011      	movs	r0, #17
 8002d10:	f7fe fb42 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d14:	2000      	movs	r0, #0
 8002d16:	f7fe fb3f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8002d1a:	2034      	movs	r0, #52	; 0x34
 8002d1c:	f7fe fb3c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d20:	2000      	movs	r0, #0
 8002d22:	f7fe fb39 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002d26:	2056      	movs	r0, #86	; 0x56
 8002d28:	f7fe fb36 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f7fe fb33 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002d32:	2076      	movs	r0, #118	; 0x76
 8002d34:	f7fe fb30 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f7fe fb2d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002d3e:	2077      	movs	r0, #119	; 0x77
 8002d40:	f7fe fb2a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7fe fb27 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002d4a:	2066      	movs	r0, #102	; 0x66
 8002d4c:	f7fe fb24 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d50:	2000      	movs	r0, #0
 8002d52:	f7fe fb21 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002d56:	2088      	movs	r0, #136	; 0x88
 8002d58:	f7fe fb1e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f7fe fb1b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002d62:	2099      	movs	r0, #153	; 0x99
 8002d64:	f7fe fb18 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7fe fb15 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002d6e:	20bb      	movs	r0, #187	; 0xbb
 8002d70:	f7fe fb12 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7fe fb0f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002d7a:	2099      	movs	r0, #153	; 0x99
 8002d7c:	f7fe fb0c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7fe fb09 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002d86:	2066      	movs	r0, #102	; 0x66
 8002d88:	f7fe fb06 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f7fe fb03 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002d92:	2055      	movs	r0, #85	; 0x55
 8002d94:	f7fe fb00 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f7fe fafd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002d9e:	2055      	movs	r0, #85	; 0x55
 8002da0:	f7fe fafa 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002da4:	2000      	movs	r0, #0
 8002da6:	f7fe faf7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8002daa:	2045      	movs	r0, #69	; 0x45
 8002dac:	f7fe faf4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002db0:	2000      	movs	r0, #0
 8002db2:	f7fe faf1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8002db6:	2043      	movs	r0, #67	; 0x43
 8002db8:	f7fe faee 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f7fe faeb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002dc2:	2044      	movs	r0, #68	; 0x44
 8002dc4:	f7fe fae8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f7fe fae5 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 8002dce:	20e7      	movs	r0, #231	; 0xe7
 8002dd0:	f7fe face 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8002dd4:	2032      	movs	r0, #50	; 0x32
 8002dd6:	f7fe fadf 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7fe fadc 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002de0:	2055      	movs	r0, #85	; 0x55
 8002de2:	f7fe fad9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002de6:	2000      	movs	r0, #0
 8002de8:	f7fe fad6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002dec:	2076      	movs	r0, #118	; 0x76
 8002dee:	f7fe fad3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002df2:	2000      	movs	r0, #0
 8002df4:	f7fe fad0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002df8:	2066      	movs	r0, #102	; 0x66
 8002dfa:	f7fe facd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f7fe faca 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8002e04:	2067      	movs	r0, #103	; 0x67
 8002e06:	f7fe fac7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f7fe fac4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8002e10:	2067      	movs	r0, #103	; 0x67
 8002e12:	f7fe fac1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e16:	2000      	movs	r0, #0
 8002e18:	f7fe fabe 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8002e1c:	2087      	movs	r0, #135	; 0x87
 8002e1e:	f7fe fabb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e22:	2000      	movs	r0, #0
 8002e24:	f7fe fab8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002e28:	2099      	movs	r0, #153	; 0x99
 8002e2a:	f7fe fab5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f7fe fab2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002e34:	20bb      	movs	r0, #187	; 0xbb
 8002e36:	f7fe faaf 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7fe faac 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002e40:	2099      	movs	r0, #153	; 0x99
 8002e42:	f7fe faa9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e46:	2000      	movs	r0, #0
 8002e48:	f7fe faa6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002e4c:	2077      	movs	r0, #119	; 0x77
 8002e4e:	f7fe faa3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e52:	2000      	movs	r0, #0
 8002e54:	f7fe faa0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002e58:	2044      	movs	r0, #68	; 0x44
 8002e5a:	f7fe fa9d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f7fe fa9a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002e64:	2056      	movs	r0, #86	; 0x56
 8002e66:	f7fe fa97 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f7fe fa94 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002e70:	2023      	movs	r0, #35	; 0x23
 8002e72:	f7fe fa91 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7fe fa8e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002e7c:	2033      	movs	r0, #51	; 0x33
 8002e7e:	f7fe fa8b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f7fe fa88 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8002e88:	2045      	movs	r0, #69	; 0x45
 8002e8a:	f7fe fa85 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f7fe fa82 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 8002e94:	20e8      	movs	r0, #232	; 0xe8
 8002e96:	f7fe fa6b 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7fe fa7c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f7fe fa79 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002ea6:	2099      	movs	r0, #153	; 0x99
 8002ea8:	f7fe fa76 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7fe fa73 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8002eb2:	2087      	movs	r0, #135	; 0x87
 8002eb4:	f7fe fa70 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f7fe fa6d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002ebe:	2088      	movs	r0, #136	; 0x88
 8002ec0:	f7fe fa6a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f7fe fa67 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002eca:	2077      	movs	r0, #119	; 0x77
 8002ecc:	f7fe fa64 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7fe fa61 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002ed6:	2066      	movs	r0, #102	; 0x66
 8002ed8:	f7fe fa5e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002edc:	2000      	movs	r0, #0
 8002ede:	f7fe fa5b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002ee2:	2088      	movs	r0, #136	; 0x88
 8002ee4:	f7fe fa58 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f7fe fa55 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 8002eee:	20aa      	movs	r0, #170	; 0xaa
 8002ef0:	f7fe fa52 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f7fe fa4f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002efa:	20bb      	movs	r0, #187	; 0xbb
 8002efc:	f7fe fa4c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7fe fa49 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002f06:	2099      	movs	r0, #153	; 0x99
 8002f08:	f7fe fa46 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f7fe fa43 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002f12:	2066      	movs	r0, #102	; 0x66
 8002f14:	f7fe fa40 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f18:	2000      	movs	r0, #0
 8002f1a:	f7fe fa3d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002f1e:	2055      	movs	r0, #85	; 0x55
 8002f20:	f7fe fa3a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7fe fa37 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002f2a:	2055      	movs	r0, #85	; 0x55
 8002f2c:	f7fe fa34 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f30:	2000      	movs	r0, #0
 8002f32:	f7fe fa31 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002f36:	2044      	movs	r0, #68	; 0x44
 8002f38:	f7fe fa2e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7fe fa2b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002f42:	2044      	movs	r0, #68	; 0x44
 8002f44:	f7fe fa28 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f7fe fa25 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002f4e:	2055      	movs	r0, #85	; 0x55
 8002f50:	f7fe fa22 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7fe fa1f 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 8002f5a:	20e9      	movs	r0, #233	; 0xe9
 8002f5c:	f7fe fa08 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002f60:	20aa      	movs	r0, #170	; 0xaa
 8002f62:	f7fe fa19 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f66:	2000      	movs	r0, #0
 8002f68:	f7fe fa16 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	f7fe fa13 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f72:	2000      	movs	r0, #0
 8002f74:	f7fe fa10 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f7fe f9f9 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002f7e:	20aa      	movs	r0, #170	; 0xaa
 8002f80:	f7fe fa0a 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 8002f84:	20cf      	movs	r0, #207	; 0xcf
 8002f86:	f7fe f9f3 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f7fe fa04 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7fe fa01 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7fe f9fe 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f7fe f9fb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f7fe f9f8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f7fe f9f5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f7fe f9f2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f7fe f9ef 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f7fe f9ec 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	f7fe f9e9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7fe f9e6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f7fe f9e3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f7fe f9e0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f7fe f9dd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f7fe f9da 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7fe f9d7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fea:	2000      	movs	r0, #0
 8002fec:	f7fe f9d4 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 8002ff0:	20f0      	movs	r0, #240	; 0xf0
 8002ff2:	f7fe f9bd 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f7fe f9ce 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002ffc:	2050      	movs	r0, #80	; 0x50
 8002ffe:	f7fe f9cb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003002:	2000      	movs	r0, #0
 8003004:	f7fe f9c8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003008:	2000      	movs	r0, #0
 800300a:	f7fe f9c5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800300e:	2000      	movs	r0, #0
 8003010:	f7fe f9c2 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 8003014:	20f3      	movs	r0, #243	; 0xf3
 8003016:	f7fe f9ab 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800301a:	2000      	movs	r0, #0
 800301c:	f7fe f9bc 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 8003020:	20f9      	movs	r0, #249	; 0xf9
 8003022:	f7fe f9a5 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 8003026:	2006      	movs	r0, #6
 8003028:	f7fe f9b6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 800302c:	2010      	movs	r0, #16
 800302e:	f7fe f9b3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8003032:	2029      	movs	r0, #41	; 0x29
 8003034:	f7fe f9b0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003038:	2000      	movs	r0, #0
 800303a:	f7fe f9ad 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 800303e:	203a      	movs	r0, #58	; 0x3a
 8003040:	f7fe f996 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8003044:	2055      	movs	r0, #85	; 0x55
 8003046:	f7fe f9a7 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 800304a:	2011      	movs	r0, #17
 800304c:	f7fe f990 	bl	8001370 <LCD_WR_REG>
		HAL_Delay(100);
 8003050:	2064      	movs	r0, #100	; 0x64
 8003052:	f003 ffbf 	bl	8006fd4 <HAL_Delay>
		LCD_WR_REG(0x29);
 8003056:	2029      	movs	r0, #41	; 0x29
 8003058:	f7fe f98a 	bl	8001370 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 800305c:	2035      	movs	r0, #53	; 0x35
 800305e:	f7fe f987 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003062:	2000      	movs	r0, #0
 8003064:	f7fe f998 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 8003068:	2051      	movs	r0, #81	; 0x51
 800306a:	f7fe f981 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 800306e:	20ff      	movs	r0, #255	; 0xff
 8003070:	f7fe f992 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 8003074:	2053      	movs	r0, #83	; 0x53
 8003076:	f7fe f97b 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 800307a:	202c      	movs	r0, #44	; 0x2c
 800307c:	f7fe f98c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 8003080:	2055      	movs	r0, #85	; 0x55
 8003082:	f7fe f975 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 8003086:	2082      	movs	r0, #130	; 0x82
 8003088:	f7fe f986 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 800308c:	202c      	movs	r0, #44	; 0x2c
 800308e:	f7fe f96f 	bl	8001370 <LCD_WR_REG>
 8003092:	f001 b847 	b.w	8004124 <TFTLCD_Init+0x235c>
	}else if(lcddev.id==0x5510)
 8003096:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <TFTLCD_Init+0x12e0>)
 8003098:	889b      	ldrh	r3, [r3, #4]
 800309a:	f245 5210 	movw	r2, #21776	; 0x5510
 800309e:	4293      	cmp	r3, r2
 80030a0:	f040 8781 	bne.w	8003fa6 <TFTLCD_Init+0x21de>
 80030a4:	e002      	b.n	80030ac <TFTLCD_Init+0x12e4>
 80030a6:	bf00      	nop
 80030a8:	20000310 	.word	0x20000310
	{
		LCD_WriteReg(0xF000,0x55);
 80030ac:	2155      	movs	r1, #85	; 0x55
 80030ae:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80030b2:	f7fe f997 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 80030b6:	21aa      	movs	r1, #170	; 0xaa
 80030b8:	f24f 0001 	movw	r0, #61441	; 0xf001
 80030bc:	f7fe f992 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 80030c0:	2152      	movs	r1, #82	; 0x52
 80030c2:	f24f 0002 	movw	r0, #61442	; 0xf002
 80030c6:	f7fe f98d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 80030ca:	2108      	movs	r1, #8
 80030cc:	f24f 0003 	movw	r0, #61443	; 0xf003
 80030d0:	f7fe f988 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 80030d4:	2101      	movs	r1, #1
 80030d6:	f24f 0004 	movw	r0, #61444	; 0xf004
 80030da:	f7fe f983 	bl	80013e4 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 80030de:	210d      	movs	r1, #13
 80030e0:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80030e4:	f7fe f97e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 80030e8:	210d      	movs	r1, #13
 80030ea:	f24b 0001 	movw	r0, #45057	; 0xb001
 80030ee:	f7fe f979 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 80030f2:	210d      	movs	r1, #13
 80030f4:	f24b 0002 	movw	r0, #45058	; 0xb002
 80030f8:	f7fe f974 	bl	80013e4 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 80030fc:	2134      	movs	r1, #52	; 0x34
 80030fe:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003102:	f7fe f96f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 8003106:	2134      	movs	r1, #52	; 0x34
 8003108:	f24b 6001 	movw	r0, #46593	; 0xb601
 800310c:	f7fe f96a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 8003110:	2134      	movs	r1, #52	; 0x34
 8003112:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003116:	f7fe f965 	bl	80013e4 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 800311a:	210d      	movs	r1, #13
 800311c:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003120:	f7fe f960 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 8003124:	210d      	movs	r1, #13
 8003126:	f24b 1001 	movw	r0, #45313	; 0xb101
 800312a:	f7fe f95b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 800312e:	210d      	movs	r1, #13
 8003130:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003134:	f7fe f956 	bl	80013e4 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 8003138:	2134      	movs	r1, #52	; 0x34
 800313a:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 800313e:	f7fe f951 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 8003142:	2134      	movs	r1, #52	; 0x34
 8003144:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003148:	f7fe f94c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 800314c:	2134      	movs	r1, #52	; 0x34
 800314e:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003152:	f7fe f947 	bl	80013e4 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 8003156:	2100      	movs	r1, #0
 8003158:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 800315c:	f7fe f942 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 8003160:	2100      	movs	r1, #0
 8003162:	f24b 2001 	movw	r0, #45569	; 0xb201
 8003166:	f7fe f93d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 800316a:	2100      	movs	r1, #0
 800316c:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003170:	f7fe f938 	bl	80013e4 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 8003174:	2124      	movs	r1, #36	; 0x24
 8003176:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800317a:	f7fe f933 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 800317e:	2124      	movs	r1, #36	; 0x24
 8003180:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003184:	f7fe f92e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 8003188:	2124      	movs	r1, #36	; 0x24
 800318a:	f64b 0002 	movw	r0, #47106	; 0xb802
 800318e:	f7fe f929 	bl	80013e4 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 8003192:	2101      	movs	r1, #1
 8003194:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003198:	f7fe f924 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 800319c:	210f      	movs	r1, #15
 800319e:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80031a2:	f7fe f91f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 80031a6:	210f      	movs	r1, #15
 80031a8:	f24b 3001 	movw	r0, #45825	; 0xb301
 80031ac:	f7fe f91a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 80031b0:	210f      	movs	r1, #15
 80031b2:	f24b 3002 	movw	r0, #45826	; 0xb302
 80031b6:	f7fe f915 	bl	80013e4 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 80031ba:	2134      	movs	r1, #52	; 0x34
 80031bc:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80031c0:	f7fe f910 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 80031c4:	2134      	movs	r1, #52	; 0x34
 80031c6:	f64b 1001 	movw	r0, #47361	; 0xb901
 80031ca:	f7fe f90b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 80031ce:	2134      	movs	r1, #52	; 0x34
 80031d0:	f64b 1002 	movw	r0, #47362	; 0xb902
 80031d4:	f7fe f906 	bl	80013e4 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 80031d8:	2108      	movs	r1, #8
 80031da:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80031de:	f7fe f901 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 80031e2:	2108      	movs	r1, #8
 80031e4:	f24b 5001 	movw	r0, #46337	; 0xb501
 80031e8:	f7fe f8fc 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 80031ec:	2108      	movs	r1, #8
 80031ee:	f24b 5002 	movw	r0, #46338	; 0xb502
 80031f2:	f7fe f8f7 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 80031f6:	2103      	movs	r1, #3
 80031f8:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80031fc:	f7fe f8f2 	bl	80013e4 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 8003200:	2124      	movs	r1, #36	; 0x24
 8003202:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8003206:	f7fe f8ed 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 800320a:	2124      	movs	r1, #36	; 0x24
 800320c:	f64b 2001 	movw	r0, #47617	; 0xba01
 8003210:	f7fe f8e8 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 8003214:	2124      	movs	r1, #36	; 0x24
 8003216:	f64b 2002 	movw	r0, #47618	; 0xba02
 800321a:	f7fe f8e3 	bl	80013e4 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 800321e:	2100      	movs	r1, #0
 8003220:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003224:	f7fe f8de 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 8003228:	2178      	movs	r1, #120	; 0x78
 800322a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800322e:	f7fe f8d9 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8003232:	2100      	movs	r1, #0
 8003234:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003238:	f7fe f8d4 	bl	80013e4 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 800323c:	2100      	movs	r1, #0
 800323e:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003242:	f7fe f8cf 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 8003246:	2178      	movs	r1, #120	; 0x78
 8003248:	f64b 5001 	movw	r0, #48385	; 0xbd01
 800324c:	f7fe f8ca 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8003250:	2100      	movs	r1, #0
 8003252:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8003256:	f7fe f8c5 	bl	80013e4 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 800325a:	2100      	movs	r1, #0
 800325c:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003260:	f7fe f8c0 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 8003264:	2164      	movs	r1, #100	; 0x64
 8003266:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800326a:	f7fe f8bb 	bl	80013e4 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 800326e:	2100      	movs	r1, #0
 8003270:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003274:	f7fe f8b6 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 8003278:	2133      	movs	r1, #51	; 0x33
 800327a:	f24d 1001 	movw	r0, #53505	; 0xd101
 800327e:	f7fe f8b1 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 8003282:	2100      	movs	r1, #0
 8003284:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003288:	f7fe f8ac 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 800328c:	2134      	movs	r1, #52	; 0x34
 800328e:	f24d 1003 	movw	r0, #53507	; 0xd103
 8003292:	f7fe f8a7 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 8003296:	2100      	movs	r1, #0
 8003298:	f24d 1004 	movw	r0, #53508	; 0xd104
 800329c:	f7fe f8a2 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 80032a0:	213a      	movs	r1, #58	; 0x3a
 80032a2:	f24d 1005 	movw	r0, #53509	; 0xd105
 80032a6:	f7fe f89d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 80032aa:	2100      	movs	r1, #0
 80032ac:	f24d 1006 	movw	r0, #53510	; 0xd106
 80032b0:	f7fe f898 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 80032b4:	214a      	movs	r1, #74	; 0x4a
 80032b6:	f24d 1007 	movw	r0, #53511	; 0xd107
 80032ba:	f7fe f893 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 80032be:	2100      	movs	r1, #0
 80032c0:	f24d 1008 	movw	r0, #53512	; 0xd108
 80032c4:	f7fe f88e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 80032c8:	215c      	movs	r1, #92	; 0x5c
 80032ca:	f24d 1009 	movw	r0, #53513	; 0xd109
 80032ce:	f7fe f889 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 80032d2:	2100      	movs	r1, #0
 80032d4:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80032d8:	f7fe f884 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 80032dc:	2181      	movs	r1, #129	; 0x81
 80032de:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80032e2:	f7fe f87f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 80032e6:	2100      	movs	r1, #0
 80032e8:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80032ec:	f7fe f87a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 80032f0:	21a6      	movs	r1, #166	; 0xa6
 80032f2:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80032f6:	f7fe f875 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 80032fa:	2100      	movs	r1, #0
 80032fc:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8003300:	f7fe f870 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 8003304:	21e5      	movs	r1, #229	; 0xe5
 8003306:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800330a:	f7fe f86b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 800330e:	2101      	movs	r1, #1
 8003310:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003314:	f7fe f866 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 8003318:	2113      	movs	r1, #19
 800331a:	f24d 1011 	movw	r0, #53521	; 0xd111
 800331e:	f7fe f861 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 8003322:	2101      	movs	r1, #1
 8003324:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003328:	f7fe f85c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 800332c:	2154      	movs	r1, #84	; 0x54
 800332e:	f24d 1013 	movw	r0, #53523	; 0xd113
 8003332:	f7fe f857 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 8003336:	2101      	movs	r1, #1
 8003338:	f24d 1014 	movw	r0, #53524	; 0xd114
 800333c:	f7fe f852 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8003340:	2182      	movs	r1, #130	; 0x82
 8003342:	f24d 1015 	movw	r0, #53525	; 0xd115
 8003346:	f7fe f84d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 800334a:	2101      	movs	r1, #1
 800334c:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003350:	f7fe f848 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 8003354:	21ca      	movs	r1, #202	; 0xca
 8003356:	f24d 1017 	movw	r0, #53527	; 0xd117
 800335a:	f7fe f843 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 800335e:	2102      	movs	r1, #2
 8003360:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003364:	f7fe f83e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 8003368:	2100      	movs	r1, #0
 800336a:	f24d 1019 	movw	r0, #53529	; 0xd119
 800336e:	f7fe f839 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 8003372:	2102      	movs	r1, #2
 8003374:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003378:	f7fe f834 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 800337c:	2101      	movs	r1, #1
 800337e:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8003382:	f7fe f82f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 8003386:	2102      	movs	r1, #2
 8003388:	f24d 101c 	movw	r0, #53532	; 0xd11c
 800338c:	f7fe f82a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 8003390:	2134      	movs	r1, #52	; 0x34
 8003392:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003396:	f7fe f825 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 800339a:	2102      	movs	r1, #2
 800339c:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80033a0:	f7fe f820 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 80033a4:	2167      	movs	r1, #103	; 0x67
 80033a6:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80033aa:	f7fe f81b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 80033ae:	2102      	movs	r1, #2
 80033b0:	f24d 1020 	movw	r0, #53536	; 0xd120
 80033b4:	f7fe f816 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 80033b8:	2184      	movs	r1, #132	; 0x84
 80033ba:	f24d 1021 	movw	r0, #53537	; 0xd121
 80033be:	f7fe f811 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 80033c2:	2102      	movs	r1, #2
 80033c4:	f24d 1022 	movw	r0, #53538	; 0xd122
 80033c8:	f7fe f80c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 80033cc:	21a4      	movs	r1, #164	; 0xa4
 80033ce:	f24d 1023 	movw	r0, #53539	; 0xd123
 80033d2:	f7fe f807 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 80033d6:	2102      	movs	r1, #2
 80033d8:	f24d 1024 	movw	r0, #53540	; 0xd124
 80033dc:	f7fe f802 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 80033e0:	21b7      	movs	r1, #183	; 0xb7
 80033e2:	f24d 1025 	movw	r0, #53541	; 0xd125
 80033e6:	f7fd fffd 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 80033ea:	2102      	movs	r1, #2
 80033ec:	f24d 1026 	movw	r0, #53542	; 0xd126
 80033f0:	f7fd fff8 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 80033f4:	21cf      	movs	r1, #207	; 0xcf
 80033f6:	f24d 1027 	movw	r0, #53543	; 0xd127
 80033fa:	f7fd fff3 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 80033fe:	2102      	movs	r1, #2
 8003400:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003404:	f7fd ffee 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 8003408:	21de      	movs	r1, #222	; 0xde
 800340a:	f24d 1029 	movw	r0, #53545	; 0xd129
 800340e:	f7fd ffe9 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 8003412:	2102      	movs	r1, #2
 8003414:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8003418:	f7fd ffe4 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 800341c:	21f2      	movs	r1, #242	; 0xf2
 800341e:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003422:	f7fd ffdf 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 8003426:	2102      	movs	r1, #2
 8003428:	f24d 102c 	movw	r0, #53548	; 0xd12c
 800342c:	f7fd ffda 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8003430:	21fe      	movs	r1, #254	; 0xfe
 8003432:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8003436:	f7fd ffd5 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 800343a:	2103      	movs	r1, #3
 800343c:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003440:	f7fd ffd0 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 8003444:	2110      	movs	r1, #16
 8003446:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800344a:	f7fd ffcb 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 800344e:	2103      	movs	r1, #3
 8003450:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003454:	f7fd ffc6 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 8003458:	2133      	movs	r1, #51	; 0x33
 800345a:	f24d 1031 	movw	r0, #53553	; 0xd131
 800345e:	f7fd ffc1 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 8003462:	2103      	movs	r1, #3
 8003464:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003468:	f7fd ffbc 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 800346c:	216d      	movs	r1, #109	; 0x6d
 800346e:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003472:	f7fd ffb7 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 8003476:	2100      	movs	r1, #0
 8003478:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 800347c:	f7fd ffb2 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 8003480:	2133      	movs	r1, #51	; 0x33
 8003482:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003486:	f7fd ffad 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 800348a:	2100      	movs	r1, #0
 800348c:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003490:	f7fd ffa8 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 8003494:	2134      	movs	r1, #52	; 0x34
 8003496:	f24d 2003 	movw	r0, #53763	; 0xd203
 800349a:	f7fd ffa3 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 800349e:	2100      	movs	r1, #0
 80034a0:	f24d 2004 	movw	r0, #53764	; 0xd204
 80034a4:	f7fd ff9e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 80034a8:	213a      	movs	r1, #58	; 0x3a
 80034aa:	f24d 2005 	movw	r0, #53765	; 0xd205
 80034ae:	f7fd ff99 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 80034b2:	2100      	movs	r1, #0
 80034b4:	f24d 2006 	movw	r0, #53766	; 0xd206
 80034b8:	f7fd ff94 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 80034bc:	214a      	movs	r1, #74	; 0x4a
 80034be:	f24d 2007 	movw	r0, #53767	; 0xd207
 80034c2:	f7fd ff8f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 80034c6:	2100      	movs	r1, #0
 80034c8:	f24d 2008 	movw	r0, #53768	; 0xd208
 80034cc:	f7fd ff8a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 80034d0:	215c      	movs	r1, #92	; 0x5c
 80034d2:	f24d 2009 	movw	r0, #53769	; 0xd209
 80034d6:	f7fd ff85 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 80034da:	2100      	movs	r1, #0
 80034dc:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80034e0:	f7fd ff80 	bl	80013e4 <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 80034e4:	2181      	movs	r1, #129	; 0x81
 80034e6:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80034ea:	f7fd ff7b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 80034ee:	2100      	movs	r1, #0
 80034f0:	f24d 200c 	movw	r0, #53772	; 0xd20c
 80034f4:	f7fd ff76 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 80034f8:	21a6      	movs	r1, #166	; 0xa6
 80034fa:	f24d 200d 	movw	r0, #53773	; 0xd20d
 80034fe:	f7fd ff71 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 8003502:	2100      	movs	r1, #0
 8003504:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003508:	f7fd ff6c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 800350c:	21e5      	movs	r1, #229	; 0xe5
 800350e:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003512:	f7fd ff67 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 8003516:	2101      	movs	r1, #1
 8003518:	f24d 2010 	movw	r0, #53776	; 0xd210
 800351c:	f7fd ff62 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 8003520:	2113      	movs	r1, #19
 8003522:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003526:	f7fd ff5d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 800352a:	2101      	movs	r1, #1
 800352c:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003530:	f7fd ff58 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 8003534:	2154      	movs	r1, #84	; 0x54
 8003536:	f24d 2013 	movw	r0, #53779	; 0xd213
 800353a:	f7fd ff53 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 800353e:	2101      	movs	r1, #1
 8003540:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003544:	f7fd ff4e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 8003548:	2182      	movs	r1, #130	; 0x82
 800354a:	f24d 2015 	movw	r0, #53781	; 0xd215
 800354e:	f7fd ff49 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 8003552:	2101      	movs	r1, #1
 8003554:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003558:	f7fd ff44 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 800355c:	21ca      	movs	r1, #202	; 0xca
 800355e:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003562:	f7fd ff3f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 8003566:	2102      	movs	r1, #2
 8003568:	f24d 2018 	movw	r0, #53784	; 0xd218
 800356c:	f7fd ff3a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 8003570:	2100      	movs	r1, #0
 8003572:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003576:	f7fd ff35 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 800357a:	2102      	movs	r1, #2
 800357c:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003580:	f7fd ff30 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 8003584:	2101      	movs	r1, #1
 8003586:	f24d 201b 	movw	r0, #53787	; 0xd21b
 800358a:	f7fd ff2b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 800358e:	2102      	movs	r1, #2
 8003590:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003594:	f7fd ff26 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 8003598:	2134      	movs	r1, #52	; 0x34
 800359a:	f24d 201d 	movw	r0, #53789	; 0xd21d
 800359e:	f7fd ff21 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 80035a2:	2102      	movs	r1, #2
 80035a4:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80035a8:	f7fd ff1c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 80035ac:	2167      	movs	r1, #103	; 0x67
 80035ae:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80035b2:	f7fd ff17 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 80035b6:	2102      	movs	r1, #2
 80035b8:	f24d 2020 	movw	r0, #53792	; 0xd220
 80035bc:	f7fd ff12 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 80035c0:	2184      	movs	r1, #132	; 0x84
 80035c2:	f24d 2021 	movw	r0, #53793	; 0xd221
 80035c6:	f7fd ff0d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 80035ca:	2102      	movs	r1, #2
 80035cc:	f24d 2022 	movw	r0, #53794	; 0xd222
 80035d0:	f7fd ff08 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 80035d4:	21a4      	movs	r1, #164	; 0xa4
 80035d6:	f24d 2023 	movw	r0, #53795	; 0xd223
 80035da:	f7fd ff03 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 80035de:	2102      	movs	r1, #2
 80035e0:	f24d 2024 	movw	r0, #53796	; 0xd224
 80035e4:	f7fd fefe 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 80035e8:	21b7      	movs	r1, #183	; 0xb7
 80035ea:	f24d 2025 	movw	r0, #53797	; 0xd225
 80035ee:	f7fd fef9 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 80035f2:	2102      	movs	r1, #2
 80035f4:	f24d 2026 	movw	r0, #53798	; 0xd226
 80035f8:	f7fd fef4 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 80035fc:	21cf      	movs	r1, #207	; 0xcf
 80035fe:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003602:	f7fd feef 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 8003606:	2102      	movs	r1, #2
 8003608:	f24d 2028 	movw	r0, #53800	; 0xd228
 800360c:	f7fd feea 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 8003610:	21de      	movs	r1, #222	; 0xde
 8003612:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003616:	f7fd fee5 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 800361a:	2102      	movs	r1, #2
 800361c:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003620:	f7fd fee0 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 8003624:	21f2      	movs	r1, #242	; 0xf2
 8003626:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800362a:	f7fd fedb 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 800362e:	2102      	movs	r1, #2
 8003630:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003634:	f7fd fed6 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 8003638:	21fe      	movs	r1, #254	; 0xfe
 800363a:	f24d 202d 	movw	r0, #53805	; 0xd22d
 800363e:	f7fd fed1 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 8003642:	2103      	movs	r1, #3
 8003644:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003648:	f7fd fecc 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 800364c:	2110      	movs	r1, #16
 800364e:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003652:	f7fd fec7 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 8003656:	2103      	movs	r1, #3
 8003658:	f24d 2030 	movw	r0, #53808	; 0xd230
 800365c:	f7fd fec2 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8003660:	2133      	movs	r1, #51	; 0x33
 8003662:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003666:	f7fd febd 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 800366a:	2103      	movs	r1, #3
 800366c:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003670:	f7fd feb8 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 8003674:	216d      	movs	r1, #109	; 0x6d
 8003676:	f24d 2033 	movw	r0, #53811	; 0xd233
 800367a:	f7fd feb3 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 800367e:	2100      	movs	r1, #0
 8003680:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003684:	f7fd feae 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 8003688:	2133      	movs	r1, #51	; 0x33
 800368a:	f24d 3001 	movw	r0, #54017	; 0xd301
 800368e:	f7fd fea9 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 8003692:	2100      	movs	r1, #0
 8003694:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003698:	f7fd fea4 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 800369c:	2134      	movs	r1, #52	; 0x34
 800369e:	f24d 3003 	movw	r0, #54019	; 0xd303
 80036a2:	f7fd fe9f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 80036a6:	2100      	movs	r1, #0
 80036a8:	f24d 3004 	movw	r0, #54020	; 0xd304
 80036ac:	f7fd fe9a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 80036b0:	213a      	movs	r1, #58	; 0x3a
 80036b2:	f24d 3005 	movw	r0, #54021	; 0xd305
 80036b6:	f7fd fe95 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 80036ba:	2100      	movs	r1, #0
 80036bc:	f24d 3006 	movw	r0, #54022	; 0xd306
 80036c0:	f7fd fe90 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 80036c4:	214a      	movs	r1, #74	; 0x4a
 80036c6:	f24d 3007 	movw	r0, #54023	; 0xd307
 80036ca:	f7fd fe8b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 80036ce:	2100      	movs	r1, #0
 80036d0:	f24d 3008 	movw	r0, #54024	; 0xd308
 80036d4:	f7fd fe86 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 80036d8:	215c      	movs	r1, #92	; 0x5c
 80036da:	f24d 3009 	movw	r0, #54025	; 0xd309
 80036de:	f7fd fe81 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 80036e2:	2100      	movs	r1, #0
 80036e4:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80036e8:	f7fd fe7c 	bl	80013e4 <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 80036ec:	2181      	movs	r1, #129	; 0x81
 80036ee:	f24d 300b 	movw	r0, #54027	; 0xd30b
 80036f2:	f7fd fe77 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 80036f6:	2100      	movs	r1, #0
 80036f8:	f24d 300c 	movw	r0, #54028	; 0xd30c
 80036fc:	f7fd fe72 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 8003700:	21a6      	movs	r1, #166	; 0xa6
 8003702:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003706:	f7fd fe6d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 800370a:	2100      	movs	r1, #0
 800370c:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003710:	f7fd fe68 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 8003714:	21e5      	movs	r1, #229	; 0xe5
 8003716:	f24d 300f 	movw	r0, #54031	; 0xd30f
 800371a:	f7fd fe63 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 800371e:	2101      	movs	r1, #1
 8003720:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003724:	f7fd fe5e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 8003728:	2113      	movs	r1, #19
 800372a:	f24d 3011 	movw	r0, #54033	; 0xd311
 800372e:	f7fd fe59 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 8003732:	2101      	movs	r1, #1
 8003734:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003738:	f7fd fe54 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 800373c:	2154      	movs	r1, #84	; 0x54
 800373e:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003742:	f7fd fe4f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 8003746:	2101      	movs	r1, #1
 8003748:	f24d 3014 	movw	r0, #54036	; 0xd314
 800374c:	f7fd fe4a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8003750:	2182      	movs	r1, #130	; 0x82
 8003752:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003756:	f7fd fe45 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 800375a:	2101      	movs	r1, #1
 800375c:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003760:	f7fd fe40 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 8003764:	21ca      	movs	r1, #202	; 0xca
 8003766:	f24d 3017 	movw	r0, #54039	; 0xd317
 800376a:	f7fd fe3b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 800376e:	2102      	movs	r1, #2
 8003770:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003774:	f7fd fe36 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 8003778:	2100      	movs	r1, #0
 800377a:	f24d 3019 	movw	r0, #54041	; 0xd319
 800377e:	f7fd fe31 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 8003782:	2102      	movs	r1, #2
 8003784:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003788:	f7fd fe2c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 800378c:	2101      	movs	r1, #1
 800378e:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003792:	f7fd fe27 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 8003796:	2102      	movs	r1, #2
 8003798:	f24d 301c 	movw	r0, #54044	; 0xd31c
 800379c:	f7fd fe22 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 80037a0:	2134      	movs	r1, #52	; 0x34
 80037a2:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80037a6:	f7fd fe1d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 80037aa:	2102      	movs	r1, #2
 80037ac:	f24d 301e 	movw	r0, #54046	; 0xd31e
 80037b0:	f7fd fe18 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 80037b4:	2167      	movs	r1, #103	; 0x67
 80037b6:	f24d 301f 	movw	r0, #54047	; 0xd31f
 80037ba:	f7fd fe13 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 80037be:	2102      	movs	r1, #2
 80037c0:	f24d 3020 	movw	r0, #54048	; 0xd320
 80037c4:	f7fd fe0e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 80037c8:	2184      	movs	r1, #132	; 0x84
 80037ca:	f24d 3021 	movw	r0, #54049	; 0xd321
 80037ce:	f7fd fe09 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 80037d2:	2102      	movs	r1, #2
 80037d4:	f24d 3022 	movw	r0, #54050	; 0xd322
 80037d8:	f7fd fe04 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 80037dc:	21a4      	movs	r1, #164	; 0xa4
 80037de:	f24d 3023 	movw	r0, #54051	; 0xd323
 80037e2:	f7fd fdff 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 80037e6:	2102      	movs	r1, #2
 80037e8:	f24d 3024 	movw	r0, #54052	; 0xd324
 80037ec:	f7fd fdfa 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 80037f0:	21b7      	movs	r1, #183	; 0xb7
 80037f2:	f24d 3025 	movw	r0, #54053	; 0xd325
 80037f6:	f7fd fdf5 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 80037fa:	2102      	movs	r1, #2
 80037fc:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003800:	f7fd fdf0 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 8003804:	21cf      	movs	r1, #207	; 0xcf
 8003806:	f24d 3027 	movw	r0, #54055	; 0xd327
 800380a:	f7fd fdeb 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 800380e:	2102      	movs	r1, #2
 8003810:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003814:	f7fd fde6 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 8003818:	21de      	movs	r1, #222	; 0xde
 800381a:	f24d 3029 	movw	r0, #54057	; 0xd329
 800381e:	f7fd fde1 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 8003822:	2102      	movs	r1, #2
 8003824:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003828:	f7fd fddc 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 800382c:	21f2      	movs	r1, #242	; 0xf2
 800382e:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003832:	f7fd fdd7 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 8003836:	2102      	movs	r1, #2
 8003838:	f24d 302c 	movw	r0, #54060	; 0xd32c
 800383c:	f7fd fdd2 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8003840:	21fe      	movs	r1, #254	; 0xfe
 8003842:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003846:	f7fd fdcd 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 800384a:	2103      	movs	r1, #3
 800384c:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003850:	f7fd fdc8 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 8003854:	2110      	movs	r1, #16
 8003856:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800385a:	f7fd fdc3 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 800385e:	2103      	movs	r1, #3
 8003860:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003864:	f7fd fdbe 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 8003868:	2133      	movs	r1, #51	; 0x33
 800386a:	f24d 3031 	movw	r0, #54065	; 0xd331
 800386e:	f7fd fdb9 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 8003872:	2103      	movs	r1, #3
 8003874:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003878:	f7fd fdb4 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 800387c:	216d      	movs	r1, #109	; 0x6d
 800387e:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003882:	f7fd fdaf 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 8003886:	2100      	movs	r1, #0
 8003888:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 800388c:	f7fd fdaa 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 8003890:	2133      	movs	r1, #51	; 0x33
 8003892:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003896:	f7fd fda5 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 800389a:	2100      	movs	r1, #0
 800389c:	f24d 4002 	movw	r0, #54274	; 0xd402
 80038a0:	f7fd fda0 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 80038a4:	2134      	movs	r1, #52	; 0x34
 80038a6:	f24d 4003 	movw	r0, #54275	; 0xd403
 80038aa:	f7fd fd9b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 80038ae:	2100      	movs	r1, #0
 80038b0:	f24d 4004 	movw	r0, #54276	; 0xd404
 80038b4:	f7fd fd96 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 80038b8:	213a      	movs	r1, #58	; 0x3a
 80038ba:	f24d 4005 	movw	r0, #54277	; 0xd405
 80038be:	f7fd fd91 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 80038c2:	2100      	movs	r1, #0
 80038c4:	f24d 4006 	movw	r0, #54278	; 0xd406
 80038c8:	f7fd fd8c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 80038cc:	214a      	movs	r1, #74	; 0x4a
 80038ce:	f24d 4007 	movw	r0, #54279	; 0xd407
 80038d2:	f7fd fd87 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 80038d6:	2100      	movs	r1, #0
 80038d8:	f24d 4008 	movw	r0, #54280	; 0xd408
 80038dc:	f7fd fd82 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 80038e0:	215c      	movs	r1, #92	; 0x5c
 80038e2:	f24d 4009 	movw	r0, #54281	; 0xd409
 80038e6:	f7fd fd7d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 80038ea:	2100      	movs	r1, #0
 80038ec:	f24d 400a 	movw	r0, #54282	; 0xd40a
 80038f0:	f7fd fd78 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 80038f4:	2181      	movs	r1, #129	; 0x81
 80038f6:	f24d 400b 	movw	r0, #54283	; 0xd40b
 80038fa:	f7fd fd73 	bl	80013e4 <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 80038fe:	2100      	movs	r1, #0
 8003900:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003904:	f7fd fd6e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 8003908:	21a6      	movs	r1, #166	; 0xa6
 800390a:	f24d 400d 	movw	r0, #54285	; 0xd40d
 800390e:	f7fd fd69 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 8003912:	2100      	movs	r1, #0
 8003914:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003918:	f7fd fd64 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 800391c:	21e5      	movs	r1, #229	; 0xe5
 800391e:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003922:	f7fd fd5f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 8003926:	2101      	movs	r1, #1
 8003928:	f24d 4010 	movw	r0, #54288	; 0xd410
 800392c:	f7fd fd5a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 8003930:	2113      	movs	r1, #19
 8003932:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003936:	f7fd fd55 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 800393a:	2101      	movs	r1, #1
 800393c:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003940:	f7fd fd50 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 8003944:	2154      	movs	r1, #84	; 0x54
 8003946:	f24d 4013 	movw	r0, #54291	; 0xd413
 800394a:	f7fd fd4b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 800394e:	2101      	movs	r1, #1
 8003950:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003954:	f7fd fd46 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 8003958:	2182      	movs	r1, #130	; 0x82
 800395a:	f24d 4015 	movw	r0, #54293	; 0xd415
 800395e:	f7fd fd41 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 8003962:	2101      	movs	r1, #1
 8003964:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003968:	f7fd fd3c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 800396c:	21ca      	movs	r1, #202	; 0xca
 800396e:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003972:	f7fd fd37 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 8003976:	2102      	movs	r1, #2
 8003978:	f24d 4018 	movw	r0, #54296	; 0xd418
 800397c:	f7fd fd32 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 8003980:	2100      	movs	r1, #0
 8003982:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003986:	f7fd fd2d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 800398a:	2102      	movs	r1, #2
 800398c:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003990:	f7fd fd28 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 8003994:	2101      	movs	r1, #1
 8003996:	f24d 401b 	movw	r0, #54299	; 0xd41b
 800399a:	f7fd fd23 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 800399e:	2102      	movs	r1, #2
 80039a0:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80039a4:	f7fd fd1e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 80039a8:	2134      	movs	r1, #52	; 0x34
 80039aa:	f24d 401d 	movw	r0, #54301	; 0xd41d
 80039ae:	f7fd fd19 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 80039b2:	2102      	movs	r1, #2
 80039b4:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80039b8:	f7fd fd14 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 80039bc:	2167      	movs	r1, #103	; 0x67
 80039be:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80039c2:	f7fd fd0f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 80039c6:	2102      	movs	r1, #2
 80039c8:	f24d 4020 	movw	r0, #54304	; 0xd420
 80039cc:	f7fd fd0a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 80039d0:	2184      	movs	r1, #132	; 0x84
 80039d2:	f24d 4021 	movw	r0, #54305	; 0xd421
 80039d6:	f7fd fd05 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 80039da:	2102      	movs	r1, #2
 80039dc:	f24d 4022 	movw	r0, #54306	; 0xd422
 80039e0:	f7fd fd00 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 80039e4:	21a4      	movs	r1, #164	; 0xa4
 80039e6:	f24d 4023 	movw	r0, #54307	; 0xd423
 80039ea:	f7fd fcfb 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 80039ee:	2102      	movs	r1, #2
 80039f0:	f24d 4024 	movw	r0, #54308	; 0xd424
 80039f4:	f7fd fcf6 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 80039f8:	21b7      	movs	r1, #183	; 0xb7
 80039fa:	f24d 4025 	movw	r0, #54309	; 0xd425
 80039fe:	f7fd fcf1 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 8003a02:	2102      	movs	r1, #2
 8003a04:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003a08:	f7fd fcec 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 8003a0c:	21cf      	movs	r1, #207	; 0xcf
 8003a0e:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003a12:	f7fd fce7 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 8003a16:	2102      	movs	r1, #2
 8003a18:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003a1c:	f7fd fce2 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 8003a20:	21de      	movs	r1, #222	; 0xde
 8003a22:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003a26:	f7fd fcdd 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003a30:	f7fd fcd8 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 8003a34:	21f2      	movs	r1, #242	; 0xf2
 8003a36:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003a3a:	f7fd fcd3 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 8003a3e:	2102      	movs	r1, #2
 8003a40:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003a44:	f7fd fcce 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 8003a48:	21fe      	movs	r1, #254	; 0xfe
 8003a4a:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003a4e:	f7fd fcc9 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 8003a52:	2103      	movs	r1, #3
 8003a54:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003a58:	f7fd fcc4 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 8003a5c:	2110      	movs	r1, #16
 8003a5e:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003a62:	f7fd fcbf 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 8003a66:	2103      	movs	r1, #3
 8003a68:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003a6c:	f7fd fcba 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 8003a70:	2133      	movs	r1, #51	; 0x33
 8003a72:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003a76:	f7fd fcb5 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 8003a7a:	2103      	movs	r1, #3
 8003a7c:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003a80:	f7fd fcb0 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 8003a84:	216d      	movs	r1, #109	; 0x6d
 8003a86:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003a8a:	f7fd fcab 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 8003a8e:	2100      	movs	r1, #0
 8003a90:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003a94:	f7fd fca6 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 8003a98:	2133      	movs	r1, #51	; 0x33
 8003a9a:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003a9e:	f7fd fca1 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003aa8:	f7fd fc9c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 8003aac:	2134      	movs	r1, #52	; 0x34
 8003aae:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003ab2:	f7fd fc97 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003abc:	f7fd fc92 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 8003ac0:	213a      	movs	r1, #58	; 0x3a
 8003ac2:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003ac6:	f7fd fc8d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 8003aca:	2100      	movs	r1, #0
 8003acc:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003ad0:	f7fd fc88 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 8003ad4:	214a      	movs	r1, #74	; 0x4a
 8003ad6:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003ada:	f7fd fc83 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 8003ade:	2100      	movs	r1, #0
 8003ae0:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003ae4:	f7fd fc7e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 8003ae8:	215c      	movs	r1, #92	; 0x5c
 8003aea:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003aee:	f7fd fc79 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 8003af2:	2100      	movs	r1, #0
 8003af4:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003af8:	f7fd fc74 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 8003afc:	2181      	movs	r1, #129	; 0x81
 8003afe:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003b02:	f7fd fc6f 	bl	80013e4 <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 8003b06:	2100      	movs	r1, #0
 8003b08:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003b0c:	f7fd fc6a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 8003b10:	21a6      	movs	r1, #166	; 0xa6
 8003b12:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003b16:	f7fd fc65 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003b20:	f7fd fc60 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 8003b24:	21e5      	movs	r1, #229	; 0xe5
 8003b26:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003b2a:	f7fd fc5b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 8003b2e:	2101      	movs	r1, #1
 8003b30:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003b34:	f7fd fc56 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 8003b38:	2113      	movs	r1, #19
 8003b3a:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003b3e:	f7fd fc51 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 8003b42:	2101      	movs	r1, #1
 8003b44:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003b48:	f7fd fc4c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 8003b4c:	2154      	movs	r1, #84	; 0x54
 8003b4e:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003b52:	f7fd fc47 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 8003b56:	2101      	movs	r1, #1
 8003b58:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003b5c:	f7fd fc42 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 8003b60:	2182      	movs	r1, #130	; 0x82
 8003b62:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003b66:	f7fd fc3d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003b70:	f7fd fc38 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 8003b74:	21ca      	movs	r1, #202	; 0xca
 8003b76:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003b7a:	f7fd fc33 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 8003b7e:	2102      	movs	r1, #2
 8003b80:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003b84:	f7fd fc2e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 8003b88:	2100      	movs	r1, #0
 8003b8a:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003b8e:	f7fd fc29 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 8003b92:	2102      	movs	r1, #2
 8003b94:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003b98:	f7fd fc24 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003ba2:	f7fd fc1f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003bac:	f7fd fc1a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 8003bb0:	2134      	movs	r1, #52	; 0x34
 8003bb2:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003bb6:	f7fd fc15 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 8003bba:	2102      	movs	r1, #2
 8003bbc:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003bc0:	f7fd fc10 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 8003bc4:	2167      	movs	r1, #103	; 0x67
 8003bc6:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003bca:	f7fd fc0b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 8003bce:	2102      	movs	r1, #2
 8003bd0:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003bd4:	f7fd fc06 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 8003bd8:	2184      	movs	r1, #132	; 0x84
 8003bda:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003bde:	f7fd fc01 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 8003be2:	2102      	movs	r1, #2
 8003be4:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003be8:	f7fd fbfc 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 8003bec:	21a4      	movs	r1, #164	; 0xa4
 8003bee:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003bf2:	f7fd fbf7 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003bfc:	f7fd fbf2 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 8003c00:	21b7      	movs	r1, #183	; 0xb7
 8003c02:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003c06:	f7fd fbed 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003c10:	f7fd fbe8 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 8003c14:	21cf      	movs	r1, #207	; 0xcf
 8003c16:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003c1a:	f7fd fbe3 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 8003c1e:	2102      	movs	r1, #2
 8003c20:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003c24:	f7fd fbde 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 8003c28:	21de      	movs	r1, #222	; 0xde
 8003c2a:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003c2e:	f7fd fbd9 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 8003c32:	2102      	movs	r1, #2
 8003c34:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003c38:	f7fd fbd4 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 8003c3c:	21f2      	movs	r1, #242	; 0xf2
 8003c3e:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003c42:	f7fd fbcf 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 8003c46:	2102      	movs	r1, #2
 8003c48:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003c4c:	f7fd fbca 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 8003c50:	21fe      	movs	r1, #254	; 0xfe
 8003c52:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003c56:	f7fd fbc5 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 8003c5a:	2103      	movs	r1, #3
 8003c5c:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003c60:	f7fd fbc0 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 8003c64:	2110      	movs	r1, #16
 8003c66:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003c6a:	f7fd fbbb 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 8003c6e:	2103      	movs	r1, #3
 8003c70:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003c74:	f7fd fbb6 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 8003c78:	2133      	movs	r1, #51	; 0x33
 8003c7a:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003c7e:	f7fd fbb1 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 8003c82:	2103      	movs	r1, #3
 8003c84:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003c88:	f7fd fbac 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 8003c8c:	216d      	movs	r1, #109	; 0x6d
 8003c8e:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003c92:	f7fd fba7 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 8003c96:	2100      	movs	r1, #0
 8003c98:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003c9c:	f7fd fba2 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 8003ca0:	2133      	movs	r1, #51	; 0x33
 8003ca2:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003ca6:	f7fd fb9d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 8003caa:	2100      	movs	r1, #0
 8003cac:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003cb0:	f7fd fb98 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 8003cb4:	2134      	movs	r1, #52	; 0x34
 8003cb6:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003cba:	f7fd fb93 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003cc4:	f7fd fb8e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 8003cc8:	213a      	movs	r1, #58	; 0x3a
 8003cca:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003cce:	f7fd fb89 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003cd8:	f7fd fb84 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 8003cdc:	214a      	movs	r1, #74	; 0x4a
 8003cde:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003ce2:	f7fd fb7f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003cec:	f7fd fb7a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 8003cf0:	215c      	movs	r1, #92	; 0x5c
 8003cf2:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003cf6:	f7fd fb75 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003d00:	f7fd fb70 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 8003d04:	2181      	movs	r1, #129	; 0x81
 8003d06:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003d0a:	f7fd fb6b 	bl	80013e4 <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 8003d0e:	2100      	movs	r1, #0
 8003d10:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003d14:	f7fd fb66 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 8003d18:	21a6      	movs	r1, #166	; 0xa6
 8003d1a:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003d1e:	f7fd fb61 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 8003d22:	2100      	movs	r1, #0
 8003d24:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003d28:	f7fd fb5c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 8003d2c:	21e5      	movs	r1, #229	; 0xe5
 8003d2e:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003d32:	f7fd fb57 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 8003d36:	2101      	movs	r1, #1
 8003d38:	f24d 6010 	movw	r0, #54800	; 0xd610
 8003d3c:	f7fd fb52 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 8003d40:	2113      	movs	r1, #19
 8003d42:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003d46:	f7fd fb4d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003d50:	f7fd fb48 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8003d54:	2154      	movs	r1, #84	; 0x54
 8003d56:	f24d 6013 	movw	r0, #54803	; 0xd613
 8003d5a:	f7fd fb43 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 8003d5e:	2101      	movs	r1, #1
 8003d60:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003d64:	f7fd fb3e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 8003d68:	2182      	movs	r1, #130	; 0x82
 8003d6a:	f24d 6015 	movw	r0, #54805	; 0xd615
 8003d6e:	f7fd fb39 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 8003d72:	2101      	movs	r1, #1
 8003d74:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003d78:	f7fd fb34 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 8003d7c:	21ca      	movs	r1, #202	; 0xca
 8003d7e:	f24d 6017 	movw	r0, #54807	; 0xd617
 8003d82:	f7fd fb2f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 8003d86:	2102      	movs	r1, #2
 8003d88:	f24d 6018 	movw	r0, #54808	; 0xd618
 8003d8c:	f7fd fb2a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 8003d90:	2100      	movs	r1, #0
 8003d92:	f24d 6019 	movw	r0, #54809	; 0xd619
 8003d96:	f7fd fb25 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8003da0:	f7fd fb20 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 8003da4:	2101      	movs	r1, #1
 8003da6:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8003daa:	f7fd fb1b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 8003dae:	2102      	movs	r1, #2
 8003db0:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8003db4:	f7fd fb16 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 8003db8:	2134      	movs	r1, #52	; 0x34
 8003dba:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8003dbe:	f7fd fb11 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8003dc8:	f7fd fb0c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 8003dcc:	2167      	movs	r1, #103	; 0x67
 8003dce:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8003dd2:	f7fd fb07 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	f24d 6020 	movw	r0, #54816	; 0xd620
 8003ddc:	f7fd fb02 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 8003de0:	2184      	movs	r1, #132	; 0x84
 8003de2:	f24d 6021 	movw	r0, #54817	; 0xd621
 8003de6:	f7fd fafd 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 8003dea:	2102      	movs	r1, #2
 8003dec:	f24d 6022 	movw	r0, #54818	; 0xd622
 8003df0:	f7fd faf8 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 8003df4:	21a4      	movs	r1, #164	; 0xa4
 8003df6:	f24d 6023 	movw	r0, #54819	; 0xd623
 8003dfa:	f7fd faf3 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 8003dfe:	2102      	movs	r1, #2
 8003e00:	f24d 6024 	movw	r0, #54820	; 0xd624
 8003e04:	f7fd faee 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 8003e08:	21b7      	movs	r1, #183	; 0xb7
 8003e0a:	f24d 6025 	movw	r0, #54821	; 0xd625
 8003e0e:	f7fd fae9 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 8003e12:	2102      	movs	r1, #2
 8003e14:	f24d 6026 	movw	r0, #54822	; 0xd626
 8003e18:	f7fd fae4 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 8003e1c:	21cf      	movs	r1, #207	; 0xcf
 8003e1e:	f24d 6027 	movw	r0, #54823	; 0xd627
 8003e22:	f7fd fadf 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 8003e26:	2102      	movs	r1, #2
 8003e28:	f24d 6028 	movw	r0, #54824	; 0xd628
 8003e2c:	f7fd fada 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 8003e30:	21de      	movs	r1, #222	; 0xde
 8003e32:	f24d 6029 	movw	r0, #54825	; 0xd629
 8003e36:	f7fd fad5 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 8003e3a:	2102      	movs	r1, #2
 8003e3c:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8003e40:	f7fd fad0 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8003e44:	21f2      	movs	r1, #242	; 0xf2
 8003e46:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8003e4a:	f7fd facb 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 8003e4e:	2102      	movs	r1, #2
 8003e50:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003e54:	f7fd fac6 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 8003e58:	21fe      	movs	r1, #254	; 0xfe
 8003e5a:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8003e5e:	f7fd fac1 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 8003e62:	2103      	movs	r1, #3
 8003e64:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003e68:	f7fd fabc 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 8003e6c:	2110      	movs	r1, #16
 8003e6e:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8003e72:	f7fd fab7 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 8003e76:	2103      	movs	r1, #3
 8003e78:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003e7c:	f7fd fab2 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 8003e80:	2133      	movs	r1, #51	; 0x33
 8003e82:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003e86:	f7fd faad 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 8003e8a:	2103      	movs	r1, #3
 8003e8c:	f24d 6032 	movw	r0, #54834	; 0xd632
 8003e90:	f7fd faa8 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 8003e94:	216d      	movs	r1, #109	; 0x6d
 8003e96:	f24d 6033 	movw	r0, #54835	; 0xd633
 8003e9a:	f7fd faa3 	bl	80013e4 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 8003e9e:	2155      	movs	r1, #85	; 0x55
 8003ea0:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003ea4:	f7fd fa9e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8003ea8:	21aa      	movs	r1, #170	; 0xaa
 8003eaa:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003eae:	f7fd fa99 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8003eb2:	2152      	movs	r1, #82	; 0x52
 8003eb4:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003eb8:	f7fd fa94 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8003ebc:	2108      	movs	r1, #8
 8003ebe:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003ec2:	f7fd fa8f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003ecc:	f7fd fa8a 	bl	80013e4 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8003ed0:	21cc      	movs	r1, #204	; 0xcc
 8003ed2:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003ed6:	f7fd fa85 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8003eda:	2100      	movs	r1, #0
 8003edc:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003ee0:	f7fd fa80 	bl	80013e4 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 8003ee4:	2105      	movs	r1, #5
 8003ee6:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003eea:	f7fd fa7b 	bl	80013e4 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 8003eee:	2170      	movs	r1, #112	; 0x70
 8003ef0:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003ef4:	f7fd fa76 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 8003ef8:	2170      	movs	r1, #112	; 0x70
 8003efa:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003efe:	f7fd fa71 	bl	80013e4 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 8003f02:	2101      	movs	r1, #1
 8003f04:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003f08:	f7fd fa6c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 8003f0c:	2103      	movs	r1, #3
 8003f0e:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003f12:	f7fd fa67 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 8003f16:	2103      	movs	r1, #3
 8003f18:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003f1c:	f7fd fa62 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 8003f20:	2103      	movs	r1, #3
 8003f22:	f64b 0003 	movw	r0, #47107	; 0xb803
 8003f26:	f7fd fa5d 	bl	80013e4 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 8003f2a:	2102      	movs	r1, #2
 8003f2c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003f30:	f7fd fa58 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 8003f34:	2100      	movs	r1, #0
 8003f36:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003f3a:	f7fd fa53 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8003f3e:	2100      	movs	r1, #0
 8003f40:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003f44:	f7fd fa4e 	bl	80013e4 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 8003f48:	21d0      	movs	r1, #208	; 0xd0
 8003f4a:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8003f4e:	f7fd fa49 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 8003f52:	2102      	movs	r1, #2
 8003f54:	f64c 1001 	movw	r0, #51457	; 0xc901
 8003f58:	f7fd fa44 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 8003f5c:	2150      	movs	r1, #80	; 0x50
 8003f5e:	f64c 1002 	movw	r0, #51458	; 0xc902
 8003f62:	f7fd fa3f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 8003f66:	2150      	movs	r1, #80	; 0x50
 8003f68:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003f6c:	f7fd fa3a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 8003f70:	2150      	movs	r1, #80	; 0x50
 8003f72:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003f76:	f7fd fa35 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8003f80:	f7fd fa30 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 8003f84:	2155      	movs	r1, #85	; 0x55
 8003f86:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003f8a:	f7fd fa2b 	bl	80013e4 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8003f8e:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8003f92:	f7fd f9ed 	bl	8001370 <LCD_WR_REG>
		opt_delay(120);
 8003f96:	2078      	movs	r0, #120	; 0x78
 8003f98:	f7fd fa3a 	bl	8001410 <opt_delay>
		LCD_WR_REG(0x2900);
 8003f9c:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8003fa0:	f7fd f9e6 	bl	8001370 <LCD_WR_REG>
 8003fa4:	e0be      	b.n	8004124 <TFTLCD_Init+0x235c>
	}else if(lcddev.id==0X1963)
 8003fa6:	4b7f      	ldr	r3, [pc, #508]	; (80041a4 <TFTLCD_Init+0x23dc>)
 8003fa8:	889b      	ldrh	r3, [r3, #4]
 8003faa:	f641 1263 	movw	r2, #6499	; 0x1963
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	f040 80b8 	bne.w	8004124 <TFTLCD_Init+0x235c>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8003fb4:	20e2      	movs	r0, #226	; 0xe2
 8003fb6:	f7fd f9db 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 8003fba:	201d      	movs	r0, #29
 8003fbc:	f7fd f9ec 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8003fc0:	2002      	movs	r0, #2
 8003fc2:	f7fd f9e9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 8003fc6:	2004      	movs	r0, #4
 8003fc8:	f7fd f9e6 	bl	8001398 <LCD_WR_DATA>
		opt_delay(100);
 8003fcc:	2064      	movs	r0, #100	; 0x64
 8003fce:	f7fd fa1f 	bl	8001410 <opt_delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8003fd2:	20e0      	movs	r0, #224	; 0xe0
 8003fd4:	f7fd f9cc 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8003fd8:	2001      	movs	r0, #1
 8003fda:	f7fd f9dd 	bl	8001398 <LCD_WR_DATA>
		HAL_Delay(10);
 8003fde:	200a      	movs	r0, #10
 8003fe0:	f002 fff8 	bl	8006fd4 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8003fe4:	20e0      	movs	r0, #224	; 0xe0
 8003fe6:	f7fd f9c3 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 8003fea:	2003      	movs	r0, #3
 8003fec:	f7fd f9d4 	bl	8001398 <LCD_WR_DATA>
		HAL_Delay(12);
 8003ff0:	200c      	movs	r0, #12
 8003ff2:	f002 ffef 	bl	8006fd4 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8003ff6:	2001      	movs	r0, #1
 8003ff8:	f7fd f9ba 	bl	8001370 <LCD_WR_REG>
		HAL_Delay(10);
 8003ffc:	200a      	movs	r0, #10
 8003ffe:	f002 ffe9 	bl	8006fd4 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8004002:	20e6      	movs	r0, #230	; 0xe6
 8004004:	f7fd f9b4 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8004008:	202f      	movs	r0, #47	; 0x2f
 800400a:	f7fd f9c5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 800400e:	20ff      	movs	r0, #255	; 0xff
 8004010:	f7fd f9c2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8004014:	20ff      	movs	r0, #255	; 0xff
 8004016:	f7fd f9bf 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 800401a:	20b0      	movs	r0, #176	; 0xb0
 800401c:	f7fd f9a8 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8004020:	2020      	movs	r0, #32
 8004022:	f7fd f9b9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 8004026:	2000      	movs	r0, #0
 8004028:	f7fd f9b6 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 800402c:	2003      	movs	r0, #3
 800402e:	f7fd f9b3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8004032:	f240 301f 	movw	r0, #799	; 0x31f
 8004036:	f7fd f9af 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 800403a:	2001      	movs	r0, #1
 800403c:	f7fd f9ac 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8004040:	f240 10df 	movw	r0, #479	; 0x1df
 8004044:	f7fd f9a8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 8004048:	2000      	movs	r0, #0
 800404a:	f7fd f9a5 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 800404e:	20b4      	movs	r0, #180	; 0xb4
 8004050:	f7fd f98e 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8004054:	2004      	movs	r0, #4
 8004056:	f7fd f99f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 800405a:	f240 401f 	movw	r0, #1055	; 0x41f
 800405e:	f7fd f99b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 8004062:	2000      	movs	r0, #0
 8004064:	f7fd f998 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 8004068:	202e      	movs	r0, #46	; 0x2e
 800406a:	f7fd f995 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 800406e:	2000      	movs	r0, #0
 8004070:	f7fd f992 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004074:	2000      	movs	r0, #0
 8004076:	f7fd f98f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800407a:	2000      	movs	r0, #0
 800407c:	f7fd f98c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004080:	2000      	movs	r0, #0
 8004082:	f7fd f989 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 8004086:	20b6      	movs	r0, #182	; 0xb6
 8004088:	f7fd f972 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 800408c:	2002      	movs	r0, #2
 800408e:	f7fd f983 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 8004092:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8004096:	f7fd f97f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 800409a:	2000      	movs	r0, #0
 800409c:	f7fd f97c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 80040a0:	2017      	movs	r0, #23
 80040a2:	f7fd f979 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 80040a6:	2015      	movs	r0, #21
 80040a8:	f7fd f976 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040ac:	2000      	movs	r0, #0
 80040ae:	f7fd f973 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040b2:	2000      	movs	r0, #0
 80040b4:	f7fd f970 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 80040b8:	20f0      	movs	r0, #240	; 0xf0
 80040ba:	f7fd f959 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 80040be:	2003      	movs	r0, #3
 80040c0:	f7fd f96a 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 80040c4:	2029      	movs	r0, #41	; 0x29
 80040c6:	f7fd f953 	bl	8001370 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 80040ca:	20d0      	movs	r0, #208	; 0xd0
 80040cc:	f7fd f950 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 80040d0:	2000      	movs	r0, #0
 80040d2:	f7fd f961 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 80040d6:	20be      	movs	r0, #190	; 0xbe
 80040d8:	f7fd f94a 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 80040dc:	2005      	movs	r0, #5
 80040de:	f7fd f95b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 80040e2:	20fe      	movs	r0, #254	; 0xfe
 80040e4:	f7fd f958 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 80040e8:	2001      	movs	r0, #1
 80040ea:	f7fd f955 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 80040ee:	2000      	movs	r0, #0
 80040f0:	f7fd f952 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 80040f4:	2000      	movs	r0, #0
 80040f6:	f7fd f94f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 80040fa:	2000      	movs	r0, #0
 80040fc:	f7fd f94c 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8004100:	20b8      	movs	r0, #184	; 0xb8
 8004102:	f7fd f935 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8004106:	2003      	movs	r0, #3
 8004108:	f7fd f946 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 800410c:	2001      	movs	r0, #1
 800410e:	f7fd f943 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 8004112:	20ba      	movs	r0, #186	; 0xba
 8004114:	f7fd f92c 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8004118:	2001      	movs	r0, #1
 800411a:	f7fd f93d 	bl	8001398 <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 800411e:	2064      	movs	r0, #100	; 0x64
 8004120:	f7fd fd4e 	bl	8001bc0 <LCD_SSD_BackLightSet>
	}
	//初始化完成以后,提速
	if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//如果是这几个IC,则设置WR时序为最快
 8004124:	4b1f      	ldr	r3, [pc, #124]	; (80041a4 <TFTLCD_Init+0x23dc>)
 8004126:	889b      	ldrh	r3, [r3, #4]
 8004128:	f249 3241 	movw	r2, #37697	; 0x9341
 800412c:	4293      	cmp	r3, r2
 800412e:	d011      	beq.n	8004154 <TFTLCD_Init+0x238c>
 8004130:	4b1c      	ldr	r3, [pc, #112]	; (80041a4 <TFTLCD_Init+0x23dc>)
 8004132:	889b      	ldrh	r3, [r3, #4]
 8004134:	f245 3210 	movw	r2, #21264	; 0x5310
 8004138:	4293      	cmp	r3, r2
 800413a:	d00b      	beq.n	8004154 <TFTLCD_Init+0x238c>
 800413c:	4b19      	ldr	r3, [pc, #100]	; (80041a4 <TFTLCD_Init+0x23dc>)
 800413e:	889b      	ldrh	r3, [r3, #4]
 8004140:	f245 5210 	movw	r2, #21776	; 0x5510
 8004144:	4293      	cmp	r3, r2
 8004146:	d005      	beq.n	8004154 <TFTLCD_Init+0x238c>
 8004148:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <TFTLCD_Init+0x23dc>)
 800414a:	889b      	ldrh	r3, [r3, #4]
 800414c:	f641 1263 	movw	r2, #6499	; 0x1963
 8004150:	4293      	cmp	r3, r2
 8004152:	d117      	bne.n	8004184 <TFTLCD_Init+0x23bc>
	{
		//重新配置写时序控制寄存器的时序
		FSMC_Bank1E->BWTR[6]&=~(0XF<<0);//地址建立时间(ADDSET)清零
 8004154:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <TFTLCD_Init+0x23e0>)
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	4a13      	ldr	r2, [pc, #76]	; (80041a8 <TFTLCD_Init+0x23e0>)
 800415a:	f023 030f 	bic.w	r3, r3, #15
 800415e:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]&=~(0XF<<8);//数据保存时间清零
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <TFTLCD_Init+0x23e0>)
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	4a10      	ldr	r2, [pc, #64]	; (80041a8 <TFTLCD_Init+0x23e0>)
 8004166:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800416a:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=3<<0;		//地址建立时间(ADDSET)为3个HCLK =18ns
 800416c:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <TFTLCD_Init+0x23e0>)
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	4a0d      	ldr	r2, [pc, #52]	; (80041a8 <TFTLCD_Init+0x23e0>)
 8004172:	f043 0303 	orr.w	r3, r3, #3
 8004176:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=2<<8; 	//数据保存时间(DATAST)为6ns*3个HCLK=18ns
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <TFTLCD_Init+0x23e0>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	4a0a      	ldr	r2, [pc, #40]	; (80041a8 <TFTLCD_Init+0x23e0>)
 800417e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004182:	6193      	str	r3, [r2, #24]
	}
	LCD_Display_Dir(0);		//默认为竖屏
 8004184:	2000      	movs	r0, #0
 8004186:	f7fd fd4f 	bl	8001c28 <LCD_Display_Dir>
	GPIOB->ODR |= 1<<15;					//点亮背光
 800418a:	4b08      	ldr	r3, [pc, #32]	; (80041ac <TFTLCD_Init+0x23e4>)
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	4a07      	ldr	r2, [pc, #28]	; (80041ac <TFTLCD_Init+0x23e4>)
 8004190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004194:	6153      	str	r3, [r2, #20]
	LCD_Clear(WHITE);
 8004196:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800419a:	f000 f809 	bl	80041b0 <LCD_Clear>
}
 800419e:	bf00      	nop
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000310 	.word	0x20000310
 80041a8:	a0000104 	.word	0xa0000104
 80041ac:	40020400 	.word	0x40020400

080041b0 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(uint32_t color)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	uint32_t index=0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint=lcddev.width;
 80041bc:	4b11      	ldr	r3, [pc, #68]	; (8004204 <LCD_Clear+0x54>)
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <LCD_Clear+0x54>)
 80041c4:	885b      	ldrh	r3, [r3, #2]
 80041c6:	461a      	mov	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	fb02 f303 	mul.w	r3, r2, r3
 80041ce:	60bb      	str	r3, [r7, #8]
	LCD_SetCursor(0x00,0x0000);			//设置光标位置
 80041d0:	2100      	movs	r1, #0
 80041d2:	2000      	movs	r0, #0
 80041d4:	f7fd f93e 	bl	8001454 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 80041d8:	f7fd f92c 	bl	8001434 <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 80041dc:	2300      	movs	r3, #0
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	e006      	b.n	80041f0 <LCD_Clear+0x40>
	{
		TFT_LCD->LCD_RAM=color;
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <LCD_Clear+0x58>)
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	b292      	uxth	r2, r2
 80041e8:	805a      	strh	r2, [r3, #2]
	for(index=0;index<totalpoint;index++)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3301      	adds	r3, #1
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d3f4      	bcc.n	80041e2 <LCD_Clear+0x32>
	}
}
 80041f8:	bf00      	nop
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000310 	.word	0x20000310
 8004208:	6c00007e 	.word	0x6c00007e

0800420c <LCD_Fill>:
//在指定区域内填充单个颜色
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
//color:要填充的颜色
void LCD_Fill(uint16_t sx,uint16_t sy,uint16_t ex,uint16_t ey,uint32_t color)
{
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	4604      	mov	r4, r0
 8004214:	4608      	mov	r0, r1
 8004216:	4611      	mov	r1, r2
 8004218:	461a      	mov	r2, r3
 800421a:	4623      	mov	r3, r4
 800421c:	80fb      	strh	r3, [r7, #6]
 800421e:	4603      	mov	r3, r0
 8004220:	80bb      	strh	r3, [r7, #4]
 8004222:	460b      	mov	r3, r1
 8004224:	807b      	strh	r3, [r7, #2]
 8004226:	4613      	mov	r3, r2
 8004228:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	uint16_t xlen=0;
 800422a:	2300      	movs	r3, #0
 800422c:	817b      	strh	r3, [r7, #10]
	xlen=ex-sx+1;
 800422e:	887a      	ldrh	r2, [r7, #2]
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	b29b      	uxth	r3, r3
 8004236:	3301      	adds	r3, #1
 8004238:	817b      	strh	r3, [r7, #10]
	for(i=sy;i<=ey;i++)
 800423a:	88bb      	ldrh	r3, [r7, #4]
 800423c:	81fb      	strh	r3, [r7, #14]
 800423e:	e018      	b.n	8004272 <LCD_Fill+0x66>
	{
		LCD_SetCursor(sx,i);      				//设置光标位置
 8004240:	89fa      	ldrh	r2, [r7, #14]
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	4611      	mov	r1, r2
 8004246:	4618      	mov	r0, r3
 8004248:	f7fd f904 	bl	8001454 <LCD_SetCursor>
		LCD_WriteRAM_Prepare();     			//开始写入GRAM
 800424c:	f7fd f8f2 	bl	8001434 <LCD_WriteRAM_Prepare>
		for(j=0;j<xlen;j++)TFT_LCD->LCD_RAM=color;	//显示颜色
 8004250:	2300      	movs	r3, #0
 8004252:	81bb      	strh	r3, [r7, #12]
 8004254:	e006      	b.n	8004264 <LCD_Fill+0x58>
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <LCD_Fill+0x78>)
 8004258:	6a3a      	ldr	r2, [r7, #32]
 800425a:	b292      	uxth	r2, r2
 800425c:	805a      	strh	r2, [r3, #2]
 800425e:	89bb      	ldrh	r3, [r7, #12]
 8004260:	3301      	adds	r3, #1
 8004262:	81bb      	strh	r3, [r7, #12]
 8004264:	89ba      	ldrh	r2, [r7, #12]
 8004266:	897b      	ldrh	r3, [r7, #10]
 8004268:	429a      	cmp	r2, r3
 800426a:	d3f4      	bcc.n	8004256 <LCD_Fill+0x4a>
	for(i=sy;i<=ey;i++)
 800426c:	89fb      	ldrh	r3, [r7, #14]
 800426e:	3301      	adds	r3, #1
 8004270:	81fb      	strh	r3, [r7, #14]
 8004272:	89fa      	ldrh	r2, [r7, #14]
 8004274:	883b      	ldrh	r3, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d9e2      	bls.n	8004240 <LCD_Fill+0x34>
	}
}
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	bd90      	pop	{r4, r7, pc}
 8004284:	6c00007e 	.word	0x6c00007e

08004288 <LCD_DrawLine>:
}
//画线
//x1,y1:起点坐标
//x2,y2:终点坐标
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8004288:	b590      	push	{r4, r7, lr}
 800428a:	b08d      	sub	sp, #52	; 0x34
 800428c:	af00      	add	r7, sp, #0
 800428e:	4604      	mov	r4, r0
 8004290:	4608      	mov	r0, r1
 8004292:	4611      	mov	r1, r2
 8004294:	461a      	mov	r2, r3
 8004296:	4623      	mov	r3, r4
 8004298:	80fb      	strh	r3, [r7, #6]
 800429a:	4603      	mov	r3, r0
 800429c:	80bb      	strh	r3, [r7, #4]
 800429e:	460b      	mov	r3, r1
 80042a0:	807b      	strh	r3, [r7, #2]
 80042a2:	4613      	mov	r3, r2
 80042a4:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80042a6:	2300      	movs	r3, #0
 80042a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042aa:	2300      	movs	r3, #0
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1; //计算坐标增量
 80042ae:	887a      	ldrh	r2, [r7, #2]
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80042b6:	883a      	ldrh	r2, [r7, #0]
 80042b8:	88bb      	ldrh	r3, [r7, #4]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80042c2:	88bb      	ldrh	r3, [r7, #4]
 80042c4:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1; //设置单步方向
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	dd02      	ble.n	80042d2 <LCD_DrawLine+0x4a>
 80042cc:	2301      	movs	r3, #1
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e00b      	b.n	80042ea <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;//垂直线
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d102      	bne.n	80042de <LCD_DrawLine+0x56>
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	e005      	b.n	80042ea <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 80042de:	f04f 33ff 	mov.w	r3, #4294967295
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	425b      	negs	r3, r3
 80042e8:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	dd02      	ble.n	80042f6 <LCD_DrawLine+0x6e>
 80042f0:	2301      	movs	r3, #1
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	e00b      	b.n	800430e <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;//水平线
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d102      	bne.n	8004302 <LCD_DrawLine+0x7a>
 80042fc:	2300      	movs	r3, #0
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	e005      	b.n	800430e <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;}
 8004302:	f04f 33ff 	mov.w	r3, #4294967295
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	425b      	negs	r3, r3
 800430c:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴
 800430e:	6a3a      	ldr	r2, [r7, #32]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	429a      	cmp	r2, r3
 8004314:	dd02      	ble.n	800431c <LCD_DrawLine+0x94>
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	e001      	b.n	8004320 <LCD_DrawLine+0x98>
	else distance=delta_y;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )//画线输出
 8004320:	2300      	movs	r3, #0
 8004322:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004324:	e02a      	b.n	800437c <LCD_DrawLine+0xf4>
	{
		LCD_DrawPoint(uRow,uCol);//画点
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	b29b      	uxth	r3, r3
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	b292      	uxth	r2, r2
 800432e:	4611      	mov	r1, r2
 8004330:	4618      	mov	r0, r3
 8004332:	f7fd fb0d 	bl	8001950 <LCD_DrawPoint>
		xerr+=delta_x ;
 8004336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	4413      	add	r3, r2
 800433c:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y ;
 800433e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	4413      	add	r3, r2
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8004346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	429a      	cmp	r2, r3
 800434c:	dd07      	ble.n	800435e <LCD_DrawLine+0xd6>
		{
			xerr-=distance;
 800434e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	4413      	add	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 800435e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	429a      	cmp	r2, r3
 8004364:	dd07      	ble.n	8004376 <LCD_DrawLine+0xee>
		{
			yerr-=distance;
 8004366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4413      	add	r3, r2
 8004374:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )//画线输出
 8004376:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004378:	3301      	adds	r3, #1
 800437a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800437c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	3301      	adds	r3, #1
 8004382:	429a      	cmp	r2, r3
 8004384:	ddcf      	ble.n	8004326 <LCD_DrawLine+0x9e>
		}
	}
}
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	3734      	adds	r7, #52	; 0x34
 800438c:	46bd      	mov	sp, r7
 800438e:	bd90      	pop	{r4, r7, pc}

08004390 <LCD_DrawRectangle>:
//画矩形
//(x1,y1),(x2,y2):矩形的对角坐标
void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8004390:	b590      	push	{r4, r7, lr}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	4604      	mov	r4, r0
 8004398:	4608      	mov	r0, r1
 800439a:	4611      	mov	r1, r2
 800439c:	461a      	mov	r2, r3
 800439e:	4623      	mov	r3, r4
 80043a0:	80fb      	strh	r3, [r7, #6]
 80043a2:	4603      	mov	r3, r0
 80043a4:	80bb      	strh	r3, [r7, #4]
 80043a6:	460b      	mov	r3, r1
 80043a8:	807b      	strh	r3, [r7, #2]
 80043aa:	4613      	mov	r3, r2
 80043ac:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1,y1,x2,y1);
 80043ae:	88bb      	ldrh	r3, [r7, #4]
 80043b0:	887a      	ldrh	r2, [r7, #2]
 80043b2:	88b9      	ldrh	r1, [r7, #4]
 80043b4:	88f8      	ldrh	r0, [r7, #6]
 80043b6:	f7ff ff67 	bl	8004288 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x1,y2);
 80043ba:	883b      	ldrh	r3, [r7, #0]
 80043bc:	88fa      	ldrh	r2, [r7, #6]
 80043be:	88b9      	ldrh	r1, [r7, #4]
 80043c0:	88f8      	ldrh	r0, [r7, #6]
 80043c2:	f7ff ff61 	bl	8004288 <LCD_DrawLine>
	LCD_DrawLine(x1,y2,x2,y2);
 80043c6:	883b      	ldrh	r3, [r7, #0]
 80043c8:	887a      	ldrh	r2, [r7, #2]
 80043ca:	8839      	ldrh	r1, [r7, #0]
 80043cc:	88f8      	ldrh	r0, [r7, #6]
 80043ce:	f7ff ff5b 	bl	8004288 <LCD_DrawLine>
	LCD_DrawLine(x2,y1,x2,y2);
 80043d2:	883b      	ldrh	r3, [r7, #0]
 80043d4:	887a      	ldrh	r2, [r7, #2]
 80043d6:	88b9      	ldrh	r1, [r7, #4]
 80043d8:	8878      	ldrh	r0, [r7, #2]
 80043da:	f7ff ff55 	bl	8004288 <LCD_DrawLine>
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd90      	pop	{r4, r7, pc}
	...

080043e8 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24/32
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 80043e8:	b590      	push	{r4, r7, lr}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4604      	mov	r4, r0
 80043f0:	4608      	mov	r0, r1
 80043f2:	4611      	mov	r1, r2
 80043f4:	461a      	mov	r2, r3
 80043f6:	4623      	mov	r3, r4
 80043f8:	80fb      	strh	r3, [r7, #6]
 80043fa:	4603      	mov	r3, r0
 80043fc:	80bb      	strh	r3, [r7, #4]
 80043fe:	460b      	mov	r3, r1
 8004400:	70fb      	strb	r3, [r7, #3]
 8004402:	4613      	mov	r3, r2
 8004404:	70bb      	strb	r3, [r7, #2]
    uint8_t temp,t1,t;
	uint16_t y0=y;
 8004406:	88bb      	ldrh	r3, [r7, #4]
 8004408:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 800440a:	78bb      	ldrb	r3, [r7, #2]
 800440c:	08db      	lsrs	r3, r3, #3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	78bb      	ldrb	r3, [r7, #2]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf14      	ite	ne
 800441e:	2301      	movne	r3, #1
 8004420:	2300      	moveq	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	4413      	add	r3, r2
 8004426:	b2da      	uxtb	r2, r3
 8004428:	78bb      	ldrb	r3, [r7, #2]
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	b2db      	uxtb	r3, r3
 800442e:	fb12 f303 	smulbb	r3, r2, r3
 8004432:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	3b20      	subs	r3, #32
 8004438:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 800443a:	2300      	movs	r3, #0
 800443c:	737b      	strb	r3, [r7, #13]
 800443e:	e08f      	b.n	8004560 <LCD_ShowChar+0x178>
	{
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
 8004440:	78bb      	ldrb	r3, [r7, #2]
 8004442:	2b0c      	cmp	r3, #12
 8004444:	d10b      	bne.n	800445e <LCD_ShowChar+0x76>
 8004446:	78fa      	ldrb	r2, [r7, #3]
 8004448:	7b79      	ldrb	r1, [r7, #13]
 800444a:	484b      	ldr	r0, [pc, #300]	; (8004578 <LCD_ShowChar+0x190>)
 800444c:	4613      	mov	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4403      	add	r3, r0
 8004456:	440b      	add	r3, r1
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	73fb      	strb	r3, [r7, #15]
 800445c:	e03f      	b.n	80044de <LCD_ShowChar+0xf6>
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
 800445e:	78bb      	ldrb	r3, [r7, #2]
 8004460:	2b10      	cmp	r3, #16
 8004462:	d108      	bne.n	8004476 <LCD_ShowChar+0x8e>
 8004464:	78fa      	ldrb	r2, [r7, #3]
 8004466:	7b7b      	ldrb	r3, [r7, #13]
 8004468:	4944      	ldr	r1, [pc, #272]	; (800457c <LCD_ShowChar+0x194>)
 800446a:	0112      	lsls	r2, r2, #4
 800446c:	440a      	add	r2, r1
 800446e:	4413      	add	r3, r2
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	73fb      	strb	r3, [r7, #15]
 8004474:	e033      	b.n	80044de <LCD_ShowChar+0xf6>
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
 8004476:	78bb      	ldrb	r3, [r7, #2]
 8004478:	2b18      	cmp	r3, #24
 800447a:	d10b      	bne.n	8004494 <LCD_ShowChar+0xac>
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	7b79      	ldrb	r1, [r7, #13]
 8004480:	483f      	ldr	r0, [pc, #252]	; (8004580 <LCD_ShowChar+0x198>)
 8004482:	4613      	mov	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4403      	add	r3, r0
 800448c:	440b      	add	r3, r1
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	73fb      	strb	r3, [r7, #15]
 8004492:	e024      	b.n	80044de <LCD_ShowChar+0xf6>
		else if(size==32)temp=asc2_3216[num][t];	//调用3216字体
 8004494:	78bb      	ldrb	r3, [r7, #2]
 8004496:	2b20      	cmp	r3, #32
 8004498:	d108      	bne.n	80044ac <LCD_ShowChar+0xc4>
 800449a:	78fa      	ldrb	r2, [r7, #3]
 800449c:	7b7b      	ldrb	r3, [r7, #13]
 800449e:	4939      	ldr	r1, [pc, #228]	; (8004584 <LCD_ShowChar+0x19c>)
 80044a0:	0192      	lsls	r2, r2, #6
 80044a2:	440a      	add	r2, r1
 80044a4:	4413      	add	r3, r2
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	73fb      	strb	r3, [r7, #15]
 80044aa:	e018      	b.n	80044de <LCD_ShowChar+0xf6>
		else if(size==48)temp=asc2_4824[num][t];	//调用4824字体
 80044ac:	78bb      	ldrb	r3, [r7, #2]
 80044ae:	2b30      	cmp	r3, #48	; 0x30
 80044b0:	d10a      	bne.n	80044c8 <LCD_ShowChar+0xe0>
 80044b2:	78fa      	ldrb	r2, [r7, #3]
 80044b4:	7b7b      	ldrb	r3, [r7, #13]
 80044b6:	4934      	ldr	r1, [pc, #208]	; (8004588 <LCD_ShowChar+0x1a0>)
 80044b8:	20a8      	movs	r0, #168	; 0xa8
 80044ba:	fb00 f202 	mul.w	r2, r0, r2
 80044be:	440a      	add	r2, r1
 80044c0:	4413      	add	r3, r2
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	73fb      	strb	r3, [r7, #15]
 80044c6:	e00a      	b.n	80044de <LCD_ShowChar+0xf6>
		else if(size==64)temp=asc2_6432[num][t];	//调用6432字体
 80044c8:	78bb      	ldrb	r3, [r7, #2]
 80044ca:	2b40      	cmp	r3, #64	; 0x40
 80044cc:	d14e      	bne.n	800456c <LCD_ShowChar+0x184>
 80044ce:	78fa      	ldrb	r2, [r7, #3]
 80044d0:	7b7b      	ldrb	r3, [r7, #13]
 80044d2:	492e      	ldr	r1, [pc, #184]	; (800458c <LCD_ShowChar+0x1a4>)
 80044d4:	0212      	lsls	r2, r2, #8
 80044d6:	440a      	add	r2, r1
 80044d8:	4413      	add	r3, r2
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 80044de:	2300      	movs	r3, #0
 80044e0:	73bb      	strb	r3, [r7, #14]
 80044e2:	e035      	b.n	8004550 <LCD_ShowChar+0x168>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 80044e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	da07      	bge.n	80044fc <LCD_ShowChar+0x114>
 80044ec:	4b28      	ldr	r3, [pc, #160]	; (8004590 <LCD_ShowChar+0x1a8>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	88b9      	ldrh	r1, [r7, #4]
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fd fa49 	bl	800198c <LCD_Fast_DrawPoint>
 80044fa:	e00a      	b.n	8004512 <LCD_ShowChar+0x12a>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 80044fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <LCD_ShowChar+0x12a>
 8004504:	4b23      	ldr	r3, [pc, #140]	; (8004594 <LCD_ShowChar+0x1ac>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	88b9      	ldrh	r1, [r7, #4]
 800450a:	88fb      	ldrh	r3, [r7, #6]
 800450c:	4618      	mov	r0, r3
 800450e:	f7fd fa3d 	bl	800198c <LCD_Fast_DrawPoint>
			temp<<=1;
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	73fb      	strb	r3, [r7, #15]
			y++;
 8004518:	88bb      	ldrh	r3, [r7, #4]
 800451a:	3301      	adds	r3, #1
 800451c:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 800451e:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <LCD_ShowChar+0x1b0>)
 8004520:	885b      	ldrh	r3, [r3, #2]
 8004522:	88ba      	ldrh	r2, [r7, #4]
 8004524:	429a      	cmp	r2, r3
 8004526:	d223      	bcs.n	8004570 <LCD_ShowChar+0x188>
			if((y-y0)==size)
 8004528:	88ba      	ldrh	r2, [r7, #4]
 800452a:	897b      	ldrh	r3, [r7, #10]
 800452c:	1ad2      	subs	r2, r2, r3
 800452e:	78bb      	ldrb	r3, [r7, #2]
 8004530:	429a      	cmp	r2, r3
 8004532:	d10a      	bne.n	800454a <LCD_ShowChar+0x162>
			{
				y=y0;
 8004534:	897b      	ldrh	r3, [r7, #10]
 8004536:	80bb      	strh	r3, [r7, #4]
				x++;
 8004538:	88fb      	ldrh	r3, [r7, #6]
 800453a:	3301      	adds	r3, #1
 800453c:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 800453e:	4b16      	ldr	r3, [pc, #88]	; (8004598 <LCD_ShowChar+0x1b0>)
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	429a      	cmp	r2, r3
 8004546:	d307      	bcc.n	8004558 <LCD_ShowChar+0x170>
 8004548:	e013      	b.n	8004572 <LCD_ShowChar+0x18a>
		for(t1=0;t1<8;t1++)
 800454a:	7bbb      	ldrb	r3, [r7, #14]
 800454c:	3301      	adds	r3, #1
 800454e:	73bb      	strb	r3, [r7, #14]
 8004550:	7bbb      	ldrb	r3, [r7, #14]
 8004552:	2b07      	cmp	r3, #7
 8004554:	d9c6      	bls.n	80044e4 <LCD_ShowChar+0xfc>
 8004556:	e000      	b.n	800455a <LCD_ShowChar+0x172>
				break;
 8004558:	bf00      	nop
	for(t=0;t<csize;t++)
 800455a:	7b7b      	ldrb	r3, [r7, #13]
 800455c:	3301      	adds	r3, #1
 800455e:	737b      	strb	r3, [r7, #13]
 8004560:	7b7a      	ldrb	r2, [r7, #13]
 8004562:	7a7b      	ldrb	r3, [r7, #9]
 8004564:	429a      	cmp	r2, r3
 8004566:	f4ff af6b 	bcc.w	8004440 <LCD_ShowChar+0x58>
 800456a:	e002      	b.n	8004572 <LCD_ShowChar+0x18a>
		else return;								//没有的字库
 800456c:	bf00      	nop
 800456e:	e000      	b.n	8004572 <LCD_ShowChar+0x18a>
			if(y>=lcddev.height)return;		//超区域了
 8004570:	bf00      	nop
			}
		}
	}
}
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	bd90      	pop	{r4, r7, pc}
 8004578:	0800f8f0 	.word	0x0800f8f0
 800457c:	0800fd64 	.word	0x0800fd64
 8004580:	08010354 	.word	0x08010354
 8004584:	080110b0 	.word	0x080110b0
 8004588:	08012870 	.word	0x08012870
 800458c:	080166c8 	.word	0x080166c8
 8004590:	20000000 	.word	0x20000000
 8004594:	20000004 	.word	0x20000004
 8004598:	20000310 	.word	0x20000310

0800459c <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{
 800459c:	b590      	push	{r4, r7, lr}
 800459e:	b087      	sub	sp, #28
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	4604      	mov	r4, r0
 80045a4:	4608      	mov	r0, r1
 80045a6:	4611      	mov	r1, r2
 80045a8:	461a      	mov	r2, r3
 80045aa:	4623      	mov	r3, r4
 80045ac:	80fb      	strh	r3, [r7, #6]
 80045ae:	4603      	mov	r3, r0
 80045b0:	80bb      	strh	r3, [r7, #4]
 80045b2:	460b      	mov	r3, r1
 80045b4:	807b      	strh	r3, [r7, #2]
 80045b6:	4613      	mov	r3, r2
 80045b8:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	73fb      	strb	r3, [r7, #15]
	width+=x;
 80045be:	887a      	ldrh	r2, [r7, #2]
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	4413      	add	r3, r2
 80045c4:	807b      	strh	r3, [r7, #2]
	height+=y;
 80045c6:	883a      	ldrh	r2, [r7, #0]
 80045c8:	88bb      	ldrh	r3, [r7, #4]
 80045ca:	4413      	add	r3, r2
 80045cc:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 80045ce:	e024      	b.n	800461a <LCD_ShowString+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 80045d0:	88fa      	ldrh	r2, [r7, #6]
 80045d2:	887b      	ldrh	r3, [r7, #2]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d307      	bcc.n	80045e8 <LCD_ShowString+0x4c>
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	80fb      	strh	r3, [r7, #6]
 80045dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	88bb      	ldrh	r3, [r7, #4]
 80045e4:	4413      	add	r3, r2
 80045e6:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 80045e8:	88ba      	ldrh	r2, [r7, #4]
 80045ea:	883b      	ldrh	r3, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d21d      	bcs.n	800462c <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	781a      	ldrb	r2, [r3, #0]
 80045f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045f8:	88b9      	ldrh	r1, [r7, #4]
 80045fa:	88f8      	ldrh	r0, [r7, #6]
 80045fc:	2400      	movs	r4, #0
 80045fe:	9400      	str	r4, [sp, #0]
 8004600:	f7ff fef2 	bl	80043e8 <LCD_ShowChar>
        x+=size/2;
 8004604:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004608:	085b      	lsrs	r3, r3, #1
 800460a:	b2db      	uxtb	r3, r3
 800460c:	b29a      	uxth	r2, r3
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	4413      	add	r3, r2
 8004612:	80fb      	strh	r3, [r7, #6]
        p++;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	3301      	adds	r3, #1
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b7e      	cmp	r3, #126	; 0x7e
 8004620:	d805      	bhi.n	800462e <LCD_ShowString+0x92>
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b1f      	cmp	r3, #31
 8004628:	d8d2      	bhi.n	80045d0 <LCD_ShowString+0x34>
    }
}
 800462a:	e000      	b.n	800462e <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 800462c:	bf00      	nop
}
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bd90      	pop	{r4, r7, pc}
	...

08004638 <PCA9685_SetBit>:
#include "math.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b088      	sub	sp, #32
 800463c:	af04      	add	r7, sp, #16
 800463e:	4603      	mov	r3, r0
 8004640:	71fb      	strb	r3, [r7, #7]
 8004642:	460b      	mov	r3, r1
 8004644:	71bb      	strb	r3, [r7, #6]
 8004646:	4613      	mov	r3, r2
 8004648:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 800464a:	797b      	ldrb	r3, [r7, #5]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <PCA9685_SetBit+0x1c>
 8004650:	2301      	movs	r3, #1
 8004652:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8004654:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <PCA9685_SetBit+0xb0>)
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	b29a      	uxth	r2, r3
 800465c:	230a      	movs	r3, #10
 800465e:	9302      	str	r3, [sp, #8]
 8004660:	2301      	movs	r3, #1
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	f107 030f 	add.w	r3, r7, #15
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	2301      	movs	r3, #1
 800466c:	2180      	movs	r1, #128	; 0x80
 800466e:	f003 ff17 	bl	80084a0 <HAL_I2C_Mem_Read>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e031      	b.n	80046e0 <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 800467c:	79bb      	ldrb	r3, [r7, #6]
 800467e:	2201      	movs	r2, #1
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	b25b      	sxtb	r3, r3
 8004686:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800468a:	b25b      	sxtb	r3, r3
 800468c:	43db      	mvns	r3, r3
 800468e:	b25a      	sxtb	r2, r3
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	b25b      	sxtb	r3, r3
 8004694:	4013      	ands	r3, r2
 8004696:	b25b      	sxtb	r3, r3
 8004698:	b2db      	uxtb	r3, r3
 800469a:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 800469c:	797b      	ldrb	r3, [r7, #5]
 800469e:	f003 0201 	and.w	r2, r3, #1
 80046a2:	79bb      	ldrb	r3, [r7, #6]
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	b25a      	sxtb	r2, r3
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	b25b      	sxtb	r3, r3
 80046ae:	4313      	orrs	r3, r2
 80046b0:	b25b      	sxtb	r3, r3
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 80046b6:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <PCA9685_SetBit+0xb0>)
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	b29a      	uxth	r2, r3
 80046be:	230a      	movs	r3, #10
 80046c0:	9302      	str	r3, [sp, #8]
 80046c2:	2301      	movs	r3, #1
 80046c4:	9301      	str	r3, [sp, #4]
 80046c6:	f107 030f 	add.w	r3, r7, #15
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	2301      	movs	r3, #1
 80046ce:	2180      	movs	r1, #128	; 0x80
 80046d0:	f003 fdec 	bl	80082ac <HAL_I2C_Mem_Write>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20000320 	.word	0x20000320

080046ec <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 80046f2:	2306      	movs	r3, #6
 80046f4:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 80046f6:	4b09      	ldr	r3, [pc, #36]	; (800471c <PCA9685_SoftwareReset+0x30>)
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	1dfa      	adds	r2, r7, #7
 80046fc:	230a      	movs	r3, #10
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	2301      	movs	r3, #1
 8004702:	2100      	movs	r1, #0
 8004704:	f003 fcd4 	bl	80080b0 <HAL_I2C_Master_Transmit>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	e000      	b.n	8004714 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 8004712:	2301      	movs	r3, #1
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000320 	.word	0x20000320

08004720 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 800472a:	79fb      	ldrb	r3, [r7, #7]
 800472c:	461a      	mov	r2, r3
 800472e:	2104      	movs	r1, #4
 8004730:	2000      	movs	r0, #0
 8004732:	f7ff ff81 	bl	8004638 <PCA9685_SetBit>
 8004736:	4603      	mov	r3, r0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	461a      	mov	r2, r3
 800474e:	2107      	movs	r1, #7
 8004750:	2000      	movs	r0, #0
 8004752:	f7ff ff71 	bl	8004638 <PCA9685_SetBit>
 8004756:	4603      	mov	r3, r0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	4603      	mov	r3, r0
 8004768:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	461a      	mov	r2, r3
 800476e:	2105      	movs	r1, #5
 8004770:	2000      	movs	r0, #0
 8004772:	f7ff ff61 	bl	8004638 <PCA9685_SetBit>
 8004776:	4603      	mov	r3, r0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af04      	add	r7, sp, #16
 8004786:	4603      	mov	r3, r0
 8004788:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 800478a:	88fb      	ldrh	r3, [r7, #6]
 800478c:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8004790:	4293      	cmp	r3, r2
 8004792:	d902      	bls.n	800479a <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8004794:	2303      	movs	r3, #3
 8004796:	72fb      	strb	r3, [r7, #11]
 8004798:	e046      	b.n	8004828 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 800479a:	88fb      	ldrh	r3, [r7, #6]
 800479c:	2b18      	cmp	r3, #24
 800479e:	d802      	bhi.n	80047a6 <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 80047a0:	23ff      	movs	r3, #255	; 0xff
 80047a2:	72fb      	strb	r3, [r7, #11]
 80047a4:	e040      	b.n	8004828 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	ee07 3a90 	vmov	s15, r3
 80047ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b0:	ee17 0a90 	vmov	r0, s15
 80047b4:	f7fb fec8 	bl	8000548 <__aeabi_f2d>
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	4b2a      	ldr	r3, [pc, #168]	; (8004868 <PCA9685_SetPwmFrequency+0xe8>)
 80047be:	f7fb ff1b 	bl	80005f8 <__aeabi_dmul>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	a126      	add	r1, pc, #152	; (adr r1, 8004860 <PCA9685_SetPwmFrequency+0xe0>)
 80047c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047cc:	f7fc f83e 	bl	800084c <__aeabi_ddiv>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	4b23      	ldr	r3, [pc, #140]	; (800486c <PCA9685_SetPwmFrequency+0xec>)
 80047de:	f7fb fd53 	bl	8000288 <__aeabi_dsub>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4610      	mov	r0, r2
 80047e8:	4619      	mov	r1, r3
 80047ea:	f7fc f9fd 	bl	8000be8 <__aeabi_d2f>
 80047ee:	4603      	mov	r3, r0
 80047f0:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7fb fea8 	bl	8000548 <__aeabi_f2d>
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	4b1c      	ldr	r3, [pc, #112]	; (8004870 <PCA9685_SetPwmFrequency+0xf0>)
 80047fe:	f7fb fd45 	bl	800028c <__adddf3>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	ec43 2b17 	vmov	d7, r2, r3
 800480a:	eeb0 0a47 	vmov.f32	s0, s14
 800480e:	eef0 0a67 	vmov.f32	s1, s15
 8004812:	f009 fd15 	bl	800e240 <floor>
 8004816:	ec53 2b10 	vmov	r2, r3, d0
 800481a:	4610      	mov	r0, r2
 800481c:	4619      	mov	r1, r3
 800481e:	f7fc f9c3 	bl	8000ba8 <__aeabi_d2uiz>
 8004822:	4603      	mov	r3, r0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 8004828:	2001      	movs	r0, #1
 800482a:	f7ff ff79 	bl	8004720 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 800482e:	4b11      	ldr	r3, [pc, #68]	; (8004874 <PCA9685_SetPwmFrequency+0xf4>)
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	230a      	movs	r3, #10
 8004834:	9302      	str	r3, [sp, #8]
 8004836:	2301      	movs	r3, #1
 8004838:	9301      	str	r3, [sp, #4]
 800483a:	f107 030b 	add.w	r3, r7, #11
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	2301      	movs	r3, #1
 8004842:	22fe      	movs	r2, #254	; 0xfe
 8004844:	2180      	movs	r1, #128	; 0x80
 8004846:	f003 fd31 	bl	80082ac <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 800484a:	2000      	movs	r0, #0
 800484c:	f7ff ff68 	bl	8004720 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8004850:	2001      	movs	r0, #1
 8004852:	f7ff ff75 	bl	8004740 <PCA9685_RestartMode>
	return PCA9685_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	00000000 	.word	0x00000000
 8004864:	4177d784 	.word	0x4177d784
 8004868:	40b00000 	.word	0x40b00000
 800486c:	3ff00000 	.word	0x3ff00000
 8004870:	3fe00000 	.word	0x3fe00000
 8004874:	20000320 	.word	0x20000320

08004878 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af04      	add	r7, sp, #16
 800487e:	4603      	mov	r3, r0
 8004880:	71fb      	strb	r3, [r7, #7]
 8004882:	460b      	mov	r3, r1
 8004884:	80bb      	strh	r3, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	b2db      	uxtb	r3, r3
 8004890:	3306      	adds	r3, #6
 8004892:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 8004894:	88bb      	ldrh	r3, [r7, #4]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 800489a:	88bb      	ldrh	r3, [r7, #4]
 800489c:	0a1b      	lsrs	r3, r3, #8
 800489e:	b29b      	uxth	r3, r3
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 80048a4:	887b      	ldrh	r3, [r7, #2]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 80048aa:	887b      	ldrh	r3, [r7, #2]
 80048ac:	0a1b      	lsrs	r3, r3, #8
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 80048b4:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <PCA9685_SetPwm+0x70>)
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	230a      	movs	r3, #10
 80048be:	9302      	str	r3, [sp, #8]
 80048c0:	2304      	movs	r3, #4
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	f107 0308 	add.w	r3, r7, #8
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	2301      	movs	r3, #1
 80048cc:	2180      	movs	r1, #128	; 0x80
 80048ce:	f003 fced 	bl	80082ac <HAL_I2C_Mem_Write>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e000      	b.n	80048de <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20000320 	.word	0x20000320

080048ec <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	71fb      	strb	r3, [r7, #7]
 80048f6:	460b      	mov	r3, r1
 80048f8:	80bb      	strh	r3, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 80048fe:	88bb      	ldrh	r3, [r7, #4]
 8004900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004904:	d302      	bcc.n	800490c <PCA9685_SetPin+0x20>
 8004906:	f640 73ff 	movw	r3, #4095	; 0xfff
 800490a:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 800490c:	79bb      	ldrb	r3, [r7, #6]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d025      	beq.n	800495e <PCA9685_SetPin+0x72>
    if (Value == 0) {
 8004912:	88bb      	ldrh	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d108      	bne.n	800492a <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	2200      	movs	r2, #0
 800491c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ffa9 	bl	8004878 <PCA9685_SetPwm>
 8004926:	4603      	mov	r3, r0
 8004928:	e03a      	b.n	80049a0 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 800492a:	88bb      	ldrh	r3, [r7, #4]
 800492c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004930:	4293      	cmp	r3, r2
 8004932:	d108      	bne.n	8004946 <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800493a:	2100      	movs	r1, #0
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff ff9b 	bl	8004878 <PCA9685_SetPwm>
 8004942:	4603      	mov	r3, r0
 8004944:	e02c      	b.n	80049a0 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8004946:	88bb      	ldrh	r3, [r7, #4]
 8004948:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800494c:	330f      	adds	r3, #15
 800494e:	b29a      	uxth	r2, r3
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ff8f 	bl	8004878 <PCA9685_SetPwm>
 800495a:	4603      	mov	r3, r0
 800495c:	e020      	b.n	80049a0 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 800495e:	88bb      	ldrh	r3, [r7, #4]
 8004960:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004964:	4293      	cmp	r3, r2
 8004966:	d108      	bne.n	800497a <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	2200      	movs	r2, #0
 800496c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff ff81 	bl	8004878 <PCA9685_SetPwm>
 8004976:	4603      	mov	r3, r0
 8004978:	e012      	b.n	80049a0 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 800497a:	88bb      	ldrh	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d108      	bne.n	8004992 <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8004980:	79fb      	ldrb	r3, [r7, #7]
 8004982:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004986:	2100      	movs	r1, #0
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff ff75 	bl	8004878 <PCA9685_SetPwm>
 800498e:	4603      	mov	r3, r0
 8004990:	e006      	b.n	80049a0 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 8004992:	88ba      	ldrh	r2, [r7, #4]
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	2100      	movs	r1, #0
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff ff6d 	bl	8004878 <PCA9685_SetPwm>
 800499e:	4603      	mov	r3, r0
    }
  }
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	ed87 0a00 	vstr	s0, [r7]
 80049b4:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 80049b6:	edd7 7a00 	vldr	s15, [r7]
 80049ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c2:	d502      	bpl.n	80049ca <PCA9685_SetServoAngle+0x22>
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 80049ca:	edd7 7a00 	vldr	s15, [r7]
 80049ce:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004a50 <PCA9685_SetServoAngle+0xa8>
 80049d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049da:	dd01      	ble.n	80049e0 <PCA9685_SetServoAngle+0x38>
 80049dc:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <PCA9685_SetServoAngle+0xac>)
 80049de:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 80049e0:	6838      	ldr	r0, [r7, #0]
 80049e2:	f7fb fdb1 	bl	8000548 <__aeabi_f2d>
 80049e6:	a318      	add	r3, pc, #96	; (adr r3, 8004a48 <PCA9685_SetServoAngle+0xa0>)
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f7fb fe04 	bl	80005f8 <__aeabi_dmul>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4610      	mov	r0, r2
 80049f6:	4619      	mov	r1, r3
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	4b16      	ldr	r3, [pc, #88]	; (8004a58 <PCA9685_SetServoAngle+0xb0>)
 80049fe:	f7fb ff25 	bl	800084c <__aeabi_ddiv>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <PCA9685_SetServoAngle+0xb4>)
 8004a10:	f7fb fc3c 	bl	800028c <__adddf3>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	f7fc f8e4 	bl	8000be8 <__aeabi_d2f>
 8004a20:	4603      	mov	r3, r0
 8004a22:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8004a24:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a2c:	ee17 3a90 	vmov	r3, s15
 8004a30:	b299      	uxth	r1, r3
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	2200      	movs	r2, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff ff58 	bl	80048ec <PCA9685_SetPin>
 8004a3c:	4603      	mov	r3, r0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	00000000 	.word	0x00000000
 8004a4c:	40786000 	.word	0x40786000
 8004a50:	43340000 	.word	0x43340000
 8004a54:	43340000 	.word	0x43340000
 8004a58:	40668000 	.word	0x40668000
 8004a5c:	405b8000 	.word	0x405b8000

08004a60 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8004a68:	4a07      	ldr	r2, [pc, #28]	; (8004a88 <PCA9685_Init+0x28>)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 8004a6e:	f7ff fe3d 	bl	80046ec <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 8004a72:	2030      	movs	r0, #48	; 0x30
 8004a74:	f7ff fe84 	bl	8004780 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8004a78:	2001      	movs	r0, #1
 8004a7a:	f7ff fe71 	bl	8004760 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	20000320 	.word	0x20000320

08004a8c <PID_Init>:
/*
 * 使用串级PID算法，外环PID为位置环，其输出为速度期望；内环PID为速度环，其输出为角度期望，直接控制舵机角度
 */

//坐标PID初始化
void PID_Init(PID *pid) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
	printf("PID Init begin\r\n");
 8004a94:	481d      	ldr	r0, [pc, #116]	; (8004b0c <PID_Init+0x80>)
 8004a96:	f007 f943 	bl	800bd20 <puts>
	pid->SetPosi = 40;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2228      	movs	r2, #40	; 0x28
 8004a9e:	801a      	strh	r2, [r3, #0]
	pid->ActualPosi = 0;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	805a      	strh	r2, [r3, #2]
	pid->errorPosi[0] = 0;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	809a      	strh	r2, [r3, #4]
	pid->errorPosi[1] = 0;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	80da      	strh	r2, [r3, #6]
	pid->errorSpeed[0] = 0;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	811a      	strh	r2, [r3, #8]
	pid->errorSpeed[1] = 0;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	815a      	strh	r2, [r3, #10]
	pid->errorSpeed[2] = 0;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	819a      	strh	r2, [r3, #12]
	pid->Speed = 0;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	629a      	str	r2, [r3, #40]	; 0x28
	pid->angle = 90;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a10      	ldr	r2, [pc, #64]	; (8004b10 <PID_Init+0x84>)
 8004ad0:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->integral = 0;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30

	pid->PKp = 15;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a0d      	ldr	r2, [pc, #52]	; (8004b14 <PID_Init+0x88>)
 8004ade:	611a      	str	r2, [r3, #16]
	pid->PKi = 0.5;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8004ae6:	615a      	str	r2, [r3, #20]
	pid->PKd = 50.5;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a0b      	ldr	r2, [pc, #44]	; (8004b18 <PID_Init+0x8c>)
 8004aec:	619a      	str	r2, [r3, #24]
	pid->SKp = 20;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <PID_Init+0x90>)
 8004af2:	61da      	str	r2, [r3, #28]
	pid->SKi = 0.5;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8004afa:	621a      	str	r2, [r3, #32]
	pid->SKd = 35.0;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a08      	ldr	r2, [pc, #32]	; (8004b20 <PID_Init+0x94>)
 8004b00:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	0800f4f0 	.word	0x0800f4f0
 8004b10:	42b40000 	.word	0x42b40000
 8004b14:	41700000 	.word	0x41700000
 8004b18:	424a0000 	.word	0x424a0000
 8004b1c:	41a00000 	.word	0x41a00000
 8004b20:	420c0000 	.word	0x420c0000

08004b24 <PID_Calc>:

//坐标PID调节函数(X轴)
uint16_t PID_Calc(PID *pid, uint16_t Posi, float Speed) {
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004b32:	817b      	strh	r3, [r7, #10]
	/******************************外环位置式PID(位置环)d************************************/

	pid->ActualPosi = Posi;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	897a      	ldrh	r2, [r7, #10]
 8004b38:	805a      	strh	r2, [r3, #2]
	pid->errorPosi[0] = pid->SetPosi - pid->ActualPosi;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	881a      	ldrh	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	885b      	ldrh	r3, [r3, #2]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	b21a      	sxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	809a      	strh	r2, [r3, #4]

	/* 设定闭环死区 */
	if ((pid->errorPosi[0] >= -LOC_DEAD_ZONE)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004b52:	f113 0f03 	cmn.w	r3, #3
 8004b56:	db0e      	blt.n	8004b76 <PID_Calc+0x52>
			&& (pid->errorPosi[0] <= LOC_DEAD_ZONE)) {
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	dc09      	bgt.n	8004b76 <PID_Calc+0x52>
		pid->errorPosi[0] = 0;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	809a      	strh	r2, [r3, #4]
		pid->integral = 0;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	631a      	str	r2, [r3, #48]	; 0x30
		pid->errorPosi[1] = 0;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	80da      	strh	r2, [r3, #6]
	}

	if (pid->errorPosi[0] >= LOCAL_MAX) {
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004b7c:	2bc7      	cmp	r3, #199	; 0xc7
 8004b7e:	dd03      	ble.n	8004b88 <PID_Calc+0x64>
		pid->errorPosi[0] = LOCAL_MAX;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	22c8      	movs	r2, #200	; 0xc8
 8004b84:	809a      	strh	r2, [r3, #4]
 8004b86:	e009      	b.n	8004b9c <PID_Calc+0x78>
	} else if (pid->errorPosi[0] <= -LOCAL_MAX) {
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004b8e:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8004b92:	da03      	bge.n	8004b9c <PID_Calc+0x78>
		pid->errorPosi[0] = -LOCAL_MAX;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f64f 7238 	movw	r2, #65336	; 0xff38
 8004b9a:	809a      	strh	r2, [r3, #4]
	}

	pid->integral += pid->errorPosi[0];
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004ba8:	ee07 3a90 	vmov	s15, r3
 8004bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	//位置式PID算法核心函数
	pid->Speed = pid->PKp * pid->errorPosi[0] + pid->PKi * pid->integral
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	ed93 7a04 	vldr	s14, [r3, #16]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	edd3 6a05 	vldr	s13, [r3, #20]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004be2:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ pid->PKd * (pid->errorPosi[0] - pid->errorPosi[1]);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	edd3 6a06 	vldr	s13, [r3, #24]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	ee07 3a90 	vmov	s15, r3
 8004c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c08:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid->Speed = pid->PKp * pid->errorPosi[0] + pid->PKi * pid->integral
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
//	printf("比例%hu\r\n积分%hu\r\n微分%hu\r\n输出为%hu\r\n", (unsigned short int)pid->err, (unsigned short int)pid->integral,
//			(unsigned short int)(pid->err - pid->err_last), (unsigned short int)pid->ActualPosi);
	pid->errorPosi[1] = pid->errorPosi[0];
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	80da      	strh	r2, [r3, #6]

	/*********************************************************************************/

	/******************************内环增量式PID(速度环)d************************************/

	pid->errorSpeed[0] = pid->Speed - Speed;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004c22:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c2e:	ee17 3a90 	vmov	r3, s15
 8004c32:	b21a      	sxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	811a      	strh	r2, [r3, #8]
	//增量式PID核心算法
	pid->angle += pid->SKp * (pid->errorSpeed[0] - pid->errorSpeed[1])
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	edd3 6a07 	vldr	s13, [r3, #28]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	ee07 3a90 	vmov	s15, r3
 8004c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
			+ pid->SKi * pid->errorSpeed[0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	ed93 6a08 	vldr	s12, [r3, #32]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c6c:	ee07 3a90 	vmov	s15, r3
 8004c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c74:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004c78:	ee76 6aa7 	vadd.f32	s13, s13, s15
			+ pid->SKd
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
					* (pid->errorSpeed[0] - 2 * pid->errorSpeed[1]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	1ad3      	subs	r3, r2, r3
							+ pid->errorSpeed[2]);
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8004c9a:	4413      	add	r3, r2
					* (pid->errorSpeed[0] - 2 * pid->errorSpeed[1]
 8004c9c:	ee07 3a90 	vmov	s15, r3
 8004ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ca4:	ee66 7a27 	vmul.f32	s15, s12, s15
			+ pid->SKd
 8004ca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
	pid->angle += pid->SKp * (pid->errorSpeed[0] - pid->errorSpeed[1])
 8004cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	if (pid->angle >= ANGLE_MAX) {
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004cbc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004d08 <PID_Calc+0x1e4>
 8004cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc8:	db03      	blt.n	8004cd2 <PID_Calc+0x1ae>
		pid->angle = ANGLE_MAX;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4a0f      	ldr	r2, [pc, #60]	; (8004d0c <PID_Calc+0x1e8>)
 8004cce:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cd0:	e00b      	b.n	8004cea <PID_Calc+0x1c6>
	} else if (pid->angle <= ANGLE_MIN) {
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004cd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce0:	d803      	bhi.n	8004cea <PID_Calc+0x1c6>
		pid->angle = ANGLE_MIN;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	return pid->angle;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf4:	ee17 3a90 	vmov	r3, s15
 8004cf8:	b29b      	uxth	r3, r3

	/****************************************************************************************/
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	43340000 	.word	0x43340000
 8004d0c:	43340000 	.word	0x43340000

08004d10 <ChaSetPosi>:

//改变设定值
void ChaSetPosi(PID *pid, uint16_t setPosi) {
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	807b      	strh	r3, [r7, #2]
	pid->SetPosi = setPosi;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	887a      	ldrh	r2, [r7, #2]
 8004d20:	801a      	strh	r2, [r3, #0]
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <PID_Reset>:

void PID_Reset(PID *pid) {
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
	pid->integral = 0;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	631a      	str	r2, [r3, #48]	; 0x30
	pid->Speed = 0;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	629a      	str	r2, [r3, #40]	; 0x28
	pid->errorPosi[0] = 0;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	809a      	strh	r2, [r3, #4]
	pid->errorPosi[1] = 0;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	80da      	strh	r2, [r3, #6]
	pid->errorSpeed[0] = 0;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	811a      	strh	r2, [r3, #8]
	pid->errorSpeed[1] = 0;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	815a      	strh	r2, [r3, #10]
	pid->errorSpeed[2] = 0;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	819a      	strh	r2, [r3, #12]
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <ballSpeed>:

uint8_t Mode[6] = { 0 }; //模式选择缓存区
uint8_t i = 0; //用于存放模式选择缓存区的向量

//计算小球速度
void ballSpeed() {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
	float distanceX, distanceY, distanceIns; //用于存放X，Y方向上的间距
	uint8_t j = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	73fb      	strb	r3, [r7, #15]
	j = (i - 10) ? (i >= 10) : (i - 10 + LEN);  //使用当前帧的坐标和10帧前的坐标计算瞬时速度
 8004d7a:	4b5e      	ldr	r3, [pc, #376]	; (8004ef4 <ballSpeed+0x184>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b0a      	cmp	r3, #10
 8004d80:	d007      	beq.n	8004d92 <ballSpeed+0x22>
 8004d82:	4b5c      	ldr	r3, [pc, #368]	; (8004ef4 <ballSpeed+0x184>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b09      	cmp	r3, #9
 8004d88:	bf8c      	ite	hi
 8004d8a:	2301      	movhi	r3, #1
 8004d8c:	2300      	movls	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	e003      	b.n	8004d9a <ballSpeed+0x2a>
 8004d92:	4b58      	ldr	r3, [pc, #352]	; (8004ef4 <ballSpeed+0x184>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	3316      	adds	r3, #22
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	73fb      	strb	r3, [r7, #15]
	//计算瞬时的X方向、Y方向和总间距
	distanceX = (coordinate_XY[i][0] - coordinate_XY[j][0]) / RESOLUTION;
 8004d9c:	4b55      	ldr	r3, [pc, #340]	; (8004ef4 <ballSpeed+0x184>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	4b55      	ldr	r3, [pc, #340]	; (8004ef8 <ballSpeed+0x188>)
 8004da4:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8004da8:	4619      	mov	r1, r3
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	4a52      	ldr	r2, [pc, #328]	; (8004ef8 <ballSpeed+0x188>)
 8004dae:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8004db2:	1acb      	subs	r3, r1, r3
 8004db4:	4a51      	ldr	r2, [pc, #324]	; (8004efc <ballSpeed+0x18c>)
 8004db6:	fb82 1203 	smull	r1, r2, r2, r3
 8004dba:	1092      	asrs	r2, r2, #2
 8004dbc:	17db      	asrs	r3, r3, #31
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dc8:	edc7 7a02 	vstr	s15, [r7, #8]
	distanceY = (coordinate_XY[i][1] - coordinate_XY[j][1]) / RESOLUTION;
 8004dcc:	4b49      	ldr	r3, [pc, #292]	; (8004ef4 <ballSpeed+0x184>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	4a49      	ldr	r2, [pc, #292]	; (8004ef8 <ballSpeed+0x188>)
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	885b      	ldrh	r3, [r3, #2]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	4a46      	ldr	r2, [pc, #280]	; (8004ef8 <ballSpeed+0x188>)
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	885b      	ldrh	r3, [r3, #2]
 8004de4:	1acb      	subs	r3, r1, r3
 8004de6:	4a45      	ldr	r2, [pc, #276]	; (8004efc <ballSpeed+0x18c>)
 8004de8:	fb82 1203 	smull	r1, r2, r2, r3
 8004dec:	1092      	asrs	r2, r2, #2
 8004dee:	17db      	asrs	r3, r3, #31
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dfa:	edc7 7a01 	vstr	s15, [r7, #4]
	distanceIns = sqrtf(distanceX * distanceX + distanceY * distanceY);
 8004dfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e02:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004e06:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e0a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e12:	eeb0 0a67 	vmov.f32	s0, s15
 8004e16:	f009 fb1b 	bl	800e450 <sqrtf>
 8004e1a:	ed87 0a00 	vstr	s0, [r7]

	//顺便计算出当前位置与目标位置的间距
	distance = sqrt(
			(coordinate_XY[i][0] - SetPosi[0])
 8004e1e:	4b35      	ldr	r3, [pc, #212]	; (8004ef4 <ballSpeed+0x184>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	4b34      	ldr	r3, [pc, #208]	; (8004ef8 <ballSpeed+0x188>)
 8004e26:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	4b34      	ldr	r3, [pc, #208]	; (8004f00 <ballSpeed+0x190>)
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	1ad3      	subs	r3, r2, r3
					* (coordinate_XY[i][0] - SetPosi[0])
 8004e32:	4a30      	ldr	r2, [pc, #192]	; (8004ef4 <ballSpeed+0x184>)
 8004e34:	7812      	ldrb	r2, [r2, #0]
 8004e36:	4611      	mov	r1, r2
 8004e38:	4a2f      	ldr	r2, [pc, #188]	; (8004ef8 <ballSpeed+0x188>)
 8004e3a:	f832 2021 	ldrh.w	r2, [r2, r1, lsl #2]
 8004e3e:	4611      	mov	r1, r2
 8004e40:	4a2f      	ldr	r2, [pc, #188]	; (8004f00 <ballSpeed+0x190>)
 8004e42:	8812      	ldrh	r2, [r2, #0]
 8004e44:	1a8a      	subs	r2, r1, r2
 8004e46:	fb02 f203 	mul.w	r2, r2, r3
					+ (coordinate_XY[i][1] - SetPosi[1])
 8004e4a:	4b2a      	ldr	r3, [pc, #168]	; (8004ef4 <ballSpeed+0x184>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	492a      	ldr	r1, [pc, #168]	; (8004ef8 <ballSpeed+0x188>)
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	885b      	ldrh	r3, [r3, #2]
 8004e56:	4619      	mov	r1, r3
 8004e58:	4b29      	ldr	r3, [pc, #164]	; (8004f00 <ballSpeed+0x190>)
 8004e5a:	885b      	ldrh	r3, [r3, #2]
 8004e5c:	1ac9      	subs	r1, r1, r3
							* (coordinate_XY[i][1] - SetPosi[1]));
 8004e5e:	4b25      	ldr	r3, [pc, #148]	; (8004ef4 <ballSpeed+0x184>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	4825      	ldr	r0, [pc, #148]	; (8004ef8 <ballSpeed+0x188>)
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4403      	add	r3, r0
 8004e68:	885b      	ldrh	r3, [r3, #2]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	4b24      	ldr	r3, [pc, #144]	; (8004f00 <ballSpeed+0x190>)
 8004e6e:	885b      	ldrh	r3, [r3, #2]
 8004e70:	1ac3      	subs	r3, r0, r3
 8004e72:	fb03 f301 	mul.w	r3, r3, r1
					+ (coordinate_XY[i][1] - SetPosi[1])
 8004e76:	4413      	add	r3, r2
	distance = sqrt(
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fb fb53 	bl	8000524 <__aeabi_i2d>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	ec43 2b10 	vmov	d0, r2, r3
 8004e86:	f009 faaf 	bl	800e3e8 <sqrt>
 8004e8a:	ec53 2b10 	vmov	r2, r3, d0
 8004e8e:	4610      	mov	r0, r2
 8004e90:	4619      	mov	r1, r3
 8004e92:	f7fb fea9 	bl	8000be8 <__aeabi_d2f>
 8004e96:	4603      	mov	r3, r0
 8004e98:	4a1a      	ldr	r2, [pc, #104]	; (8004f04 <ballSpeed+0x194>)
 8004e9a:	6013      	str	r3, [r2, #0]
	/*
	 * 计算各方向上的速度
	 * dt = 1 / FRAME * 10 (FRAME为帧率)
	 * speed = distance / dt = distance * FRAME / 10
	 */
	speedX = distanceX * FRAME / 10;
 8004e9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ea0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004f08 <ballSpeed+0x198>
 8004ea4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ea8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004eac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004eb0:	4b16      	ldr	r3, [pc, #88]	; (8004f0c <ballSpeed+0x19c>)
 8004eb2:	edc3 7a00 	vstr	s15, [r3]
	speedY = distanceY * FRAME / 10;
 8004eb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004eba:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8004f08 <ballSpeed+0x198>
 8004ebe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ec2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004ec6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004eca:	4b11      	ldr	r3, [pc, #68]	; (8004f10 <ballSpeed+0x1a0>)
 8004ecc:	edc3 7a00 	vstr	s15, [r3]
	speed = distanceIns * FRAME / 10;
 8004ed0:	edd7 7a00 	vldr	s15, [r7]
 8004ed4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004f08 <ballSpeed+0x198>
 8004ed8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004edc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <ballSpeed+0x1a4>)
 8004ee6:	edc3 7a00 	vstr	s15, [r3]
}
 8004eea:	bf00      	nop
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	200002ae 	.word	0x200002ae
 8004ef8:	20000228 	.word	0x20000228
 8004efc:	66666667 	.word	0x66666667
 8004f00:	20000358 	.word	0x20000358
 8004f04:	20000360 	.word	0x20000360
 8004f08:	42480000 	.word	0x42480000
 8004f0c:	2000035c 	.word	0x2000035c
 8004f10:	20000404 	.word	0x20000404
 8004f14:	20000364 	.word	0x20000364

08004f18 <GetSetPosi>:

//确定9个位置坐标
//长宽均为400
void GetSetPosi(uint16_t *SetPosi, uint8_t number) {
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	70fb      	strb	r3, [r7, #3]
	switch (number) {
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d863      	bhi.n	8004ff4 <GetSetPosi+0xdc>
 8004f2c:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <GetSetPosi+0x1c>)
 8004f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f32:	bf00      	nop
 8004f34:	08004f59 	.word	0x08004f59
 8004f38:	08004f69 	.word	0x08004f69
 8004f3c:	08004f79 	.word	0x08004f79
 8004f40:	08004f8b 	.word	0x08004f8b
 8004f44:	08004f9b 	.word	0x08004f9b
 8004f48:	08004fab 	.word	0x08004fab
 8004f4c:	08004fbd 	.word	0x08004fbd
 8004f50:	08004fcf 	.word	0x08004fcf
 8004f54:	08004fe1 	.word	0x08004fe1
	case 1:
		SetPosi[0] = 80;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2250      	movs	r2, #80	; 0x50
 8004f5c:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 80;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3302      	adds	r3, #2
 8004f62:	2250      	movs	r2, #80	; 0x50
 8004f64:	801a      	strh	r2, [r3, #0]
		break;
 8004f66:	e045      	b.n	8004ff4 <GetSetPosi+0xdc>
	case 2:
		SetPosi[0] = 200;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	22c8      	movs	r2, #200	; 0xc8
 8004f6c:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 80;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3302      	adds	r3, #2
 8004f72:	2250      	movs	r2, #80	; 0x50
 8004f74:	801a      	strh	r2, [r3, #0]
		break;
 8004f76:	e03d      	b.n	8004ff4 <GetSetPosi+0xdc>
	case 3:
		SetPosi[0] = 320;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004f7e:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 80;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3302      	adds	r3, #2
 8004f84:	2250      	movs	r2, #80	; 0x50
 8004f86:	801a      	strh	r2, [r3, #0]
		break;
 8004f88:	e034      	b.n	8004ff4 <GetSetPosi+0xdc>
	case 4:
		SetPosi[0] = 80;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2250      	movs	r2, #80	; 0x50
 8004f8e:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 200;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3302      	adds	r3, #2
 8004f94:	22c8      	movs	r2, #200	; 0xc8
 8004f96:	801a      	strh	r2, [r3, #0]
		break;
 8004f98:	e02c      	b.n	8004ff4 <GetSetPosi+0xdc>
	case 5:
		SetPosi[0] = 200;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	22c8      	movs	r2, #200	; 0xc8
 8004f9e:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 200;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3302      	adds	r3, #2
 8004fa4:	22c8      	movs	r2, #200	; 0xc8
 8004fa6:	801a      	strh	r2, [r3, #0]
		break;
 8004fa8:	e024      	b.n	8004ff4 <GetSetPosi+0xdc>
	case 6:
		SetPosi[0] = 320;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004fb0:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 200;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3302      	adds	r3, #2
 8004fb6:	22c8      	movs	r2, #200	; 0xc8
 8004fb8:	801a      	strh	r2, [r3, #0]
		break;
 8004fba:	e01b      	b.n	8004ff4 <GetSetPosi+0xdc>
	case 7:
		SetPosi[0] = 80;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2250      	movs	r2, #80	; 0x50
 8004fc0:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 320;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3302      	adds	r3, #2
 8004fc6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004fca:	801a      	strh	r2, [r3, #0]
		break;
 8004fcc:	e012      	b.n	8004ff4 <GetSetPosi+0xdc>
	case 8:
		SetPosi[0] = 200;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	22c8      	movs	r2, #200	; 0xc8
 8004fd2:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 320;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3302      	adds	r3, #2
 8004fd8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004fdc:	801a      	strh	r2, [r3, #0]
		break;
 8004fde:	e009      	b.n	8004ff4 <GetSetPosi+0xdc>
	case 9:
		SetPosi[0] = 320;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004fe6:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 320;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3302      	adds	r3, #2
 8004fec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004ff0:	801a      	strh	r2, [r3, #0]
		break;
 8004ff2:	bf00      	nop
	}
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <ShowString>:

//LCD显示函数，isInit=1表示在初始化中调用
void ShowString() {
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	; 0x28
 8005004:	af02      	add	r7, sp, #8
//	LCD_ShowString(30, 100, 400, 32, 32, Buffer);
//	sprintf((char*) Buffer, "KalmanAngleY:%7.2f", MPU6050.KalmanAngleY);
//	LCD_ShowString(30, 150, 400, 32, 32, Buffer);

	//输出实验标题
	LCD_ShowString(42, 30, 400, 48, 48, (uint8_t*) "Rolling Ball");
 8005006:	4bbe      	ldr	r3, [pc, #760]	; (8005300 <ShowString+0x300>)
 8005008:	9301      	str	r3, [sp, #4]
 800500a:	2330      	movs	r3, #48	; 0x30
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	2330      	movs	r3, #48	; 0x30
 8005010:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005014:	211e      	movs	r1, #30
 8005016:	202a      	movs	r0, #42	; 0x2a
 8005018:	f7ff fac0 	bl	800459c <LCD_ShowString>
	LCD_ShowString(40, 90, 400, 48, 48, (uint8_t*) "Control System");
 800501c:	4bb9      	ldr	r3, [pc, #740]	; (8005304 <ShowString+0x304>)
 800501e:	9301      	str	r3, [sp, #4]
 8005020:	2330      	movs	r3, #48	; 0x30
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	2330      	movs	r3, #48	; 0x30
 8005026:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800502a:	215a      	movs	r1, #90	; 0x5a
 800502c:	2028      	movs	r0, #40	; 0x28
 800502e:	f7ff fab5 	bl	800459c <LCD_ShowString>
	//LCD输出舵机当前角度
	sprintf((char*) Buffer, "Angle_X:%6.2f", pid_X.angle);
 8005032:	4bb5      	ldr	r3, [pc, #724]	; (8005308 <ShowString+0x308>)
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	4618      	mov	r0, r3
 8005038:	f7fb fa86 	bl	8000548 <__aeabi_f2d>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4638      	mov	r0, r7
 8005042:	49b2      	ldr	r1, [pc, #712]	; (800530c <ShowString+0x30c>)
 8005044:	f006 fe74 	bl	800bd30 <siprintf>
	LCD_ShowString(30, 150, 400, 32, 32, Buffer);
 8005048:	463b      	mov	r3, r7
 800504a:	9301      	str	r3, [sp, #4]
 800504c:	2320      	movs	r3, #32
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	2320      	movs	r3, #32
 8005052:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005056:	2196      	movs	r1, #150	; 0x96
 8005058:	201e      	movs	r0, #30
 800505a:	f7ff fa9f 	bl	800459c <LCD_ShowString>
	sprintf((char*) Buffer, "Angle_Y:%6.2f", pid_Y.angle);
 800505e:	4bac      	ldr	r3, [pc, #688]	; (8005310 <ShowString+0x310>)
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	4618      	mov	r0, r3
 8005064:	f7fb fa70 	bl	8000548 <__aeabi_f2d>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	4638      	mov	r0, r7
 800506e:	49a9      	ldr	r1, [pc, #676]	; (8005314 <ShowString+0x314>)
 8005070:	f006 fe5e 	bl	800bd30 <siprintf>
	LCD_ShowString(30, 200, 400, 32, 32, Buffer);
 8005074:	463b      	mov	r3, r7
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	2320      	movs	r3, #32
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	2320      	movs	r3, #32
 800507e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005082:	21c8      	movs	r1, #200	; 0xc8
 8005084:	201e      	movs	r0, #30
 8005086:	f7ff fa89 	bl	800459c <LCD_ShowString>

	//LCD输出设定球坐标(包括位置期望和当前位置)
	sprintf((char*) Buffer, "Set_XY   :(%4d, %4d)", SetPosi[0], SetPosi[1]);
 800508a:	4ba3      	ldr	r3, [pc, #652]	; (8005318 <ShowString+0x318>)
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	4ba1      	ldr	r3, [pc, #644]	; (8005318 <ShowString+0x318>)
 8005092:	885b      	ldrh	r3, [r3, #2]
 8005094:	4638      	mov	r0, r7
 8005096:	49a1      	ldr	r1, [pc, #644]	; (800531c <ShowString+0x31c>)
 8005098:	f006 fe4a 	bl	800bd30 <siprintf>
	LCD_ShowString(30, 270, 400, 32, 32, Buffer);
 800509c:	463b      	mov	r3, r7
 800509e:	9301      	str	r3, [sp, #4]
 80050a0:	2320      	movs	r3, #32
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	2320      	movs	r3, #32
 80050a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80050aa:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80050ae:	201e      	movs	r0, #30
 80050b0:	f7ff fa74 	bl	800459c <LCD_ShowString>
	//LCD输出当前球坐标，若球的位置达到要求，则输出黑色文字，否则输出红色文字
	if (distance <= 30) {
 80050b4:	4b9a      	ldr	r3, [pc, #616]	; (8005320 <ShowString+0x320>)
 80050b6:	edd3 7a00 	vldr	s15, [r3]
 80050ba:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80050be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c6:	d804      	bhi.n	80050d2 <ShowString+0xd2>
		POINT_COLOR = RED;
 80050c8:	4b96      	ldr	r3, [pc, #600]	; (8005324 <ShowString+0x324>)
 80050ca:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	e002      	b.n	80050d8 <ShowString+0xd8>
	} else {
		POINT_COLOR = BLACK;
 80050d2:	4b94      	ldr	r3, [pc, #592]	; (8005324 <ShowString+0x324>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
	}
	sprintf((char*) Buffer, "Actual_XY:(%4d, %4d)", coordinate_XY[i][0],
 80050d8:	4b93      	ldr	r3, [pc, #588]	; (8005328 <ShowString+0x328>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	4b93      	ldr	r3, [pc, #588]	; (800532c <ShowString+0x32c>)
 80050e0:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80050e4:	4619      	mov	r1, r3
			coordinate_XY[i][1]);
 80050e6:	4b90      	ldr	r3, [pc, #576]	; (8005328 <ShowString+0x328>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	4a90      	ldr	r2, [pc, #576]	; (800532c <ShowString+0x32c>)
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	885b      	ldrh	r3, [r3, #2]
	sprintf((char*) Buffer, "Actual_XY:(%4d, %4d)", coordinate_XY[i][0],
 80050f2:	4638      	mov	r0, r7
 80050f4:	460a      	mov	r2, r1
 80050f6:	498e      	ldr	r1, [pc, #568]	; (8005330 <ShowString+0x330>)
 80050f8:	f006 fe1a 	bl	800bd30 <siprintf>
	LCD_ShowString(30, 320, 400, 32, 32, Buffer);
 80050fc:	463b      	mov	r3, r7
 80050fe:	9301      	str	r3, [sp, #4]
 8005100:	2320      	movs	r3, #32
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	2320      	movs	r3, #32
 8005106:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800510a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800510e:	201e      	movs	r0, #30
 8005110:	f7ff fa44 	bl	800459c <LCD_ShowString>
	POINT_COLOR = BLACK;
 8005114:	4b83      	ldr	r3, [pc, #524]	; (8005324 <ShowString+0x324>)
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
	//LCD输出间距

	sprintf((char*) Buffer, "Distance :%5.2f", distance);
 800511a:	4b81      	ldr	r3, [pc, #516]	; (8005320 <ShowString+0x320>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f7fb fa12 	bl	8000548 <__aeabi_f2d>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4638      	mov	r0, r7
 800512a:	4982      	ldr	r1, [pc, #520]	; (8005334 <ShowString+0x334>)
 800512c:	f006 fe00 	bl	800bd30 <siprintf>
	LCD_ShowString(30, 370, 400, 32, 32, Buffer);
 8005130:	463b      	mov	r3, r7
 8005132:	9301      	str	r3, [sp, #4]
 8005134:	2320      	movs	r3, #32
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	2320      	movs	r3, #32
 800513a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800513e:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8005142:	201e      	movs	r0, #30
 8005144:	f7ff fa2a 	bl	800459c <LCD_ShowString>

	//LCD输出设定球速度(包括速度期望和当前速度)
	sprintf((char*) Buffer, "Expect_Speed:%7.2f",
			sqrtf(pid_X.Speed * pid_X.Speed + pid_Y.Speed * pid_Y.Speed));
 8005148:	4b6f      	ldr	r3, [pc, #444]	; (8005308 <ShowString+0x308>)
 800514a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800514e:	4b6e      	ldr	r3, [pc, #440]	; (8005308 <ShowString+0x308>)
 8005150:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005154:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005158:	4b6d      	ldr	r3, [pc, #436]	; (8005310 <ShowString+0x310>)
 800515a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800515e:	4b6c      	ldr	r3, [pc, #432]	; (8005310 <ShowString+0x310>)
 8005160:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005164:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800516c:	eeb0 0a67 	vmov.f32	s0, s15
 8005170:	f009 f96e 	bl	800e450 <sqrtf>
 8005174:	ee10 3a10 	vmov	r3, s0
	sprintf((char*) Buffer, "Expect_Speed:%7.2f",
 8005178:	4618      	mov	r0, r3
 800517a:	f7fb f9e5 	bl	8000548 <__aeabi_f2d>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	4638      	mov	r0, r7
 8005184:	496c      	ldr	r1, [pc, #432]	; (8005338 <ShowString+0x338>)
 8005186:	f006 fdd3 	bl	800bd30 <siprintf>
	LCD_ShowString(30, 440, 400, 32, 32, Buffer);
 800518a:	463b      	mov	r3, r7
 800518c:	9301      	str	r3, [sp, #4]
 800518e:	2320      	movs	r3, #32
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	2320      	movs	r3, #32
 8005194:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005198:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800519c:	201e      	movs	r0, #30
 800519e:	f7ff f9fd 	bl	800459c <LCD_ShowString>
	//LCD输出当前球速度，若球的速度达到要求，则输出黑色文字，否则输出红色文字
	if (sqrtf(pid_X.Speed * pid_X.Speed + pid_Y.Speed * pid_Y.Speed) - speed
 80051a2:	4b59      	ldr	r3, [pc, #356]	; (8005308 <ShowString+0x308>)
 80051a4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80051a8:	4b57      	ldr	r3, [pc, #348]	; (8005308 <ShowString+0x308>)
 80051aa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80051ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051b2:	4b57      	ldr	r3, [pc, #348]	; (8005310 <ShowString+0x310>)
 80051b4:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80051b8:	4b55      	ldr	r3, [pc, #340]	; (8005310 <ShowString+0x310>)
 80051ba:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80051be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051c6:	eeb0 0a67 	vmov.f32	s0, s15
 80051ca:	f009 f941 	bl	800e450 <sqrtf>
 80051ce:	eeb0 7a40 	vmov.f32	s14, s0
 80051d2:	4b5a      	ldr	r3, [pc, #360]	; (800533c <ShowString+0x33c>)
 80051d4:	edd3 7a00 	vldr	s15, [r3]
 80051d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e8:	d828      	bhi.n	800523c <ShowString+0x23c>
			<= 1
			&& sqrtf(pid_X.Speed * pid_X.Speed + pid_Y.Speed * pid_Y.Speed)
 80051ea:	4b47      	ldr	r3, [pc, #284]	; (8005308 <ShowString+0x308>)
 80051ec:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80051f0:	4b45      	ldr	r3, [pc, #276]	; (8005308 <ShowString+0x308>)
 80051f2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80051f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051fa:	4b45      	ldr	r3, [pc, #276]	; (8005310 <ShowString+0x310>)
 80051fc:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8005200:	4b43      	ldr	r3, [pc, #268]	; (8005310 <ShowString+0x310>)
 8005202:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005206:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800520a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800520e:	eeb0 0a67 	vmov.f32	s0, s15
 8005212:	f009 f91d 	bl	800e450 <sqrtf>
 8005216:	eeb0 7a40 	vmov.f32	s14, s0
					- speed >= -1) {
 800521a:	4b48      	ldr	r3, [pc, #288]	; (800533c <ShowString+0x33c>)
 800521c:	edd3 7a00 	vldr	s15, [r3]
 8005220:	ee77 7a67 	vsub.f32	s15, s14, s15
			&& sqrtf(pid_X.Speed * pid_X.Speed + pid_Y.Speed * pid_Y.Speed)
 8005224:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800522c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005230:	db04      	blt.n	800523c <ShowString+0x23c>
		POINT_COLOR = RED;
 8005232:	4b3c      	ldr	r3, [pc, #240]	; (8005324 <ShowString+0x324>)
 8005234:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	e002      	b.n	8005242 <ShowString+0x242>
	} else {
		POINT_COLOR = BLACK;
 800523c:	4b39      	ldr	r3, [pc, #228]	; (8005324 <ShowString+0x324>)
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
	}
	sprintf((char*) Buffer, "Actual_Speed:%7.2f", speed);
 8005242:	4b3e      	ldr	r3, [pc, #248]	; (800533c <ShowString+0x33c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f7fb f97e 	bl	8000548 <__aeabi_f2d>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4638      	mov	r0, r7
 8005252:	493b      	ldr	r1, [pc, #236]	; (8005340 <ShowString+0x340>)
 8005254:	f006 fd6c 	bl	800bd30 <siprintf>
	LCD_ShowString(30, 490, 400, 32, 32, Buffer);
 8005258:	463b      	mov	r3, r7
 800525a:	9301      	str	r3, [sp, #4]
 800525c:	2320      	movs	r3, #32
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	2320      	movs	r3, #32
 8005262:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005266:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 800526a:	201e      	movs	r0, #30
 800526c:	f7ff f996 	bl	800459c <LCD_ShowString>
	POINT_COLOR = BLACK;
 8005270:	4b2c      	ldr	r3, [pc, #176]	; (8005324 <ShowString+0x324>)
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]

	//LCD输出耗费时间
	sprintf((char*) Buffer, "Total Time:%5.2f",
	__HAL_TIM_GET_COUNTER(&htim5) * 1.0 / 10000);
 8005276:	4b33      	ldr	r3, [pc, #204]	; (8005344 <ShowString+0x344>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	4618      	mov	r0, r3
 800527e:	f7fb f941 	bl	8000504 <__aeabi_ui2d>
	sprintf((char*) Buffer, "Total Time:%5.2f",
 8005282:	a31d      	add	r3, pc, #116	; (adr r3, 80052f8 <ShowString+0x2f8>)
 8005284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005288:	f7fb fae0 	bl	800084c <__aeabi_ddiv>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4638      	mov	r0, r7
 8005292:	492d      	ldr	r1, [pc, #180]	; (8005348 <ShowString+0x348>)
 8005294:	f006 fd4c 	bl	800bd30 <siprintf>
	LCD_ShowString(30, 560, 400, 32, 32, Buffer);
 8005298:	463b      	mov	r3, r7
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	2320      	movs	r3, #32
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	2320      	movs	r3, #32
 80052a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80052a6:	f44f 710c 	mov.w	r1, #560	; 0x230
 80052aa:	201e      	movs	r0, #30
 80052ac:	f7ff f976 	bl	800459c <LCD_ShowString>
	sprintf((char*) Buffer, "Stable Time:%5.2f",
	__HAL_TIM_GET_COUNTER(&htim2) * 1.0 / 10000);
 80052b0:	4b26      	ldr	r3, [pc, #152]	; (800534c <ShowString+0x34c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fb f924 	bl	8000504 <__aeabi_ui2d>
	sprintf((char*) Buffer, "Stable Time:%5.2f",
 80052bc:	a30e      	add	r3, pc, #56	; (adr r3, 80052f8 <ShowString+0x2f8>)
 80052be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c2:	f7fb fac3 	bl	800084c <__aeabi_ddiv>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4638      	mov	r0, r7
 80052cc:	4920      	ldr	r1, [pc, #128]	; (8005350 <ShowString+0x350>)
 80052ce:	f006 fd2f 	bl	800bd30 <siprintf>
	LCD_ShowString(30, 610, 400, 32, 32, Buffer);
 80052d2:	463b      	mov	r3, r7
 80052d4:	9301      	str	r3, [sp, #4]
 80052d6:	2320      	movs	r3, #32
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	2320      	movs	r3, #32
 80052dc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80052e0:	f240 2162 	movw	r1, #610	; 0x262
 80052e4:	201e      	movs	r0, #30
 80052e6:	f7ff f959 	bl	800459c <LCD_ShowString>

}
 80052ea:	bf00      	nop
 80052ec:	3720      	adds	r7, #32
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	f3af 8000 	nop.w
 80052f8:	00000000 	.word	0x00000000
 80052fc:	40c38800 	.word	0x40c38800
 8005300:	0800f500 	.word	0x0800f500
 8005304:	0800f510 	.word	0x0800f510
 8005308:	20000368 	.word	0x20000368
 800530c:	0800f520 	.word	0x0800f520
 8005310:	20000324 	.word	0x20000324
 8005314:	0800f530 	.word	0x0800f530
 8005318:	20000358 	.word	0x20000358
 800531c:	0800f540 	.word	0x0800f540
 8005320:	20000360 	.word	0x20000360
 8005324:	20000000 	.word	0x20000000
 8005328:	200002ae 	.word	0x200002ae
 800532c:	20000228 	.word	0x20000228
 8005330:	0800f558 	.word	0x0800f558
 8005334:	0800f570 	.word	0x0800f570
 8005338:	0800f580 	.word	0x0800f580
 800533c:	20000364 	.word	0x20000364
 8005340:	0800f594 	.word	0x0800f594
 8005344:	200004ac 	.word	0x200004ac
 8005348:	0800f5a8 	.word	0x0800f5a8
 800534c:	200004f4 	.word	0x200004f4
 8005350:	0800f5bc 	.word	0x0800f5bc

08005354 <ShowMode>:

//LCD输出模式选择相关内容
void ShowMode(uint8_t key, uint8_t i) {
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af02      	add	r7, sp, #8
 800535a:	4603      	mov	r3, r0
 800535c:	460a      	mov	r2, r1
 800535e:	71fb      	strb	r3, [r7, #7]
 8005360:	4613      	mov	r3, r2
 8005362:	71bb      	strb	r3, [r7, #6]
	POINT_COLOR = RED; //输出字符为红色
 8005364:	4bcf      	ldr	r3, [pc, #828]	; (80056a4 <ShowMode+0x350>)
 8005366:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800536a:	601a      	str	r2, [r3, #0]

	if (i == 0xff) {
 800536c:	79bb      	ldrb	r3, [r7, #6]
 800536e:	2bff      	cmp	r3, #255	; 0xff
 8005370:	f040 81ba 	bne.w	80056e8 <ShowMode+0x394>
		switch (key) {
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	3b01      	subs	r3, #1
 8005378:	2b0f      	cmp	r3, #15
 800537a:	f200 82da 	bhi.w	8005932 <ShowMode+0x5de>
 800537e:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <ShowMode+0x30>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	0800544f 	.word	0x0800544f
 8005388:	0800547d 	.word	0x0800547d
 800538c:	080054ab 	.word	0x080054ab
 8005390:	080053c5 	.word	0x080053c5
 8005394:	080054d9 	.word	0x080054d9
 8005398:	08005507 	.word	0x08005507
 800539c:	08005535 	.word	0x08005535
 80053a0:	080053f3 	.word	0x080053f3
 80053a4:	08005563 	.word	0x08005563
 80053a8:	08005591 	.word	0x08005591
 80053ac:	080055bf 	.word	0x080055bf
 80053b0:	08005421 	.word	0x08005421
 80053b4:	0800561b 	.word	0x0800561b
 80053b8:	080055ed 	.word	0x080055ed
 80053bc:	08005649 	.word	0x08005649
 80053c0:	08005677 	.word	0x08005677
		case STABLE:
			LCD_DrawRectangle(340, 590, 455, 642);
 80053c4:	f240 2382 	movw	r3, #642	; 0x282
 80053c8:	f240 12c7 	movw	r2, #455	; 0x1c7
 80053cc:	f240 214e 	movw	r1, #590	; 0x24e
 80053d0:	f44f 70aa 	mov.w	r0, #340	; 0x154
 80053d4:	f7fe ffdc 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "STABLE");
 80053d8:	4bb3      	ldr	r3, [pc, #716]	; (80056a8 <ShowMode+0x354>)
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	2320      	movs	r3, #32
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	2320      	movs	r3, #32
 80053e2:	2282      	movs	r2, #130	; 0x82
 80053e4:	f44f 7116 	mov.w	r1, #600	; 0x258
 80053e8:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80053ec:	f7ff f8d6 	bl	800459c <LCD_ShowString>
			break;
 80053f0:	e29f      	b.n	8005932 <ShowMode+0x5de>
		case MOVE:
			LCD_DrawRectangle(340, 590, 455, 642);
 80053f2:	f240 2382 	movw	r3, #642	; 0x282
 80053f6:	f240 12c7 	movw	r2, #455	; 0x1c7
 80053fa:	f240 214e 	movw	r1, #590	; 0x24e
 80053fe:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8005402:	f7fe ffc5 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "MOVE  ");
 8005406:	4ba9      	ldr	r3, [pc, #676]	; (80056ac <ShowMode+0x358>)
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	2320      	movs	r3, #32
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	2320      	movs	r3, #32
 8005410:	2282      	movs	r2, #130	; 0x82
 8005412:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005416:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800541a:	f7ff f8bf 	bl	800459c <LCD_ShowString>
			break;
 800541e:	e288      	b.n	8005932 <ShowMode+0x5de>
		case ROUND:
			LCD_DrawRectangle(340, 590, 455, 642);
 8005420:	f240 2382 	movw	r3, #642	; 0x282
 8005424:	f240 12c7 	movw	r2, #455	; 0x1c7
 8005428:	f240 214e 	movw	r1, #590	; 0x24e
 800542c:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8005430:	f7fe ffae 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "ROUND ");
 8005434:	4b9e      	ldr	r3, [pc, #632]	; (80056b0 <ShowMode+0x35c>)
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	2320      	movs	r3, #32
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	2320      	movs	r3, #32
 800543e:	2282      	movs	r2, #130	; 0x82
 8005440:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005444:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005448:	f7ff f8a8 	bl	800459c <LCD_ShowString>
			break;
 800544c:	e271      	b.n	8005932 <ShowMode+0x5de>
		case ONE:
			LCD_DrawRectangle(340, 590, 455, 642);
 800544e:	f240 2382 	movw	r3, #642	; 0x282
 8005452:	f240 12c7 	movw	r2, #455	; 0x1c7
 8005456:	f240 214e 	movw	r1, #590	; 0x24e
 800545a:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800545e:	f7fe ff97 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "ONE   ");
 8005462:	4b94      	ldr	r3, [pc, #592]	; (80056b4 <ShowMode+0x360>)
 8005464:	9301      	str	r3, [sp, #4]
 8005466:	2320      	movs	r3, #32
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	2320      	movs	r3, #32
 800546c:	2282      	movs	r2, #130	; 0x82
 800546e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005472:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005476:	f7ff f891 	bl	800459c <LCD_ShowString>
			break;
 800547a:	e25a      	b.n	8005932 <ShowMode+0x5de>
		case TWO:
			LCD_DrawRectangle(340, 590, 455, 642);
 800547c:	f240 2382 	movw	r3, #642	; 0x282
 8005480:	f240 12c7 	movw	r2, #455	; 0x1c7
 8005484:	f240 214e 	movw	r1, #590	; 0x24e
 8005488:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800548c:	f7fe ff80 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "TWO   ");
 8005490:	4b89      	ldr	r3, [pc, #548]	; (80056b8 <ShowMode+0x364>)
 8005492:	9301      	str	r3, [sp, #4]
 8005494:	2320      	movs	r3, #32
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	2320      	movs	r3, #32
 800549a:	2282      	movs	r2, #130	; 0x82
 800549c:	f44f 7116 	mov.w	r1, #600	; 0x258
 80054a0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80054a4:	f7ff f87a 	bl	800459c <LCD_ShowString>
			break;
 80054a8:	e243      	b.n	8005932 <ShowMode+0x5de>
		case THREE:
			LCD_DrawRectangle(340, 590, 455, 642);
 80054aa:	f240 2382 	movw	r3, #642	; 0x282
 80054ae:	f240 12c7 	movw	r2, #455	; 0x1c7
 80054b2:	f240 214e 	movw	r1, #590	; 0x24e
 80054b6:	f44f 70aa 	mov.w	r0, #340	; 0x154
 80054ba:	f7fe ff69 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "THREE ");
 80054be:	4b7f      	ldr	r3, [pc, #508]	; (80056bc <ShowMode+0x368>)
 80054c0:	9301      	str	r3, [sp, #4]
 80054c2:	2320      	movs	r3, #32
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	2320      	movs	r3, #32
 80054c8:	2282      	movs	r2, #130	; 0x82
 80054ca:	f44f 7116 	mov.w	r1, #600	; 0x258
 80054ce:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80054d2:	f7ff f863 	bl	800459c <LCD_ShowString>
			break;
 80054d6:	e22c      	b.n	8005932 <ShowMode+0x5de>
		case FOUR:
			LCD_DrawRectangle(340, 590, 455, 642);
 80054d8:	f240 2382 	movw	r3, #642	; 0x282
 80054dc:	f240 12c7 	movw	r2, #455	; 0x1c7
 80054e0:	f240 214e 	movw	r1, #590	; 0x24e
 80054e4:	f44f 70aa 	mov.w	r0, #340	; 0x154
 80054e8:	f7fe ff52 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "FOUR  ");
 80054ec:	4b74      	ldr	r3, [pc, #464]	; (80056c0 <ShowMode+0x36c>)
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	2320      	movs	r3, #32
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	2320      	movs	r3, #32
 80054f6:	2282      	movs	r2, #130	; 0x82
 80054f8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80054fc:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005500:	f7ff f84c 	bl	800459c <LCD_ShowString>
			break;
 8005504:	e215      	b.n	8005932 <ShowMode+0x5de>
		case FIVE:
			LCD_DrawRectangle(340, 590, 455, 642);
 8005506:	f240 2382 	movw	r3, #642	; 0x282
 800550a:	f240 12c7 	movw	r2, #455	; 0x1c7
 800550e:	f240 214e 	movw	r1, #590	; 0x24e
 8005512:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8005516:	f7fe ff3b 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "FIVE  ");
 800551a:	4b6a      	ldr	r3, [pc, #424]	; (80056c4 <ShowMode+0x370>)
 800551c:	9301      	str	r3, [sp, #4]
 800551e:	2320      	movs	r3, #32
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	2320      	movs	r3, #32
 8005524:	2282      	movs	r2, #130	; 0x82
 8005526:	f44f 7116 	mov.w	r1, #600	; 0x258
 800552a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800552e:	f7ff f835 	bl	800459c <LCD_ShowString>
			break;
 8005532:	e1fe      	b.n	8005932 <ShowMode+0x5de>
		case SIX:
			LCD_DrawRectangle(340, 590, 455, 642);
 8005534:	f240 2382 	movw	r3, #642	; 0x282
 8005538:	f240 12c7 	movw	r2, #455	; 0x1c7
 800553c:	f240 214e 	movw	r1, #590	; 0x24e
 8005540:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8005544:	f7fe ff24 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "SIX   ");
 8005548:	4b5f      	ldr	r3, [pc, #380]	; (80056c8 <ShowMode+0x374>)
 800554a:	9301      	str	r3, [sp, #4]
 800554c:	2320      	movs	r3, #32
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	2320      	movs	r3, #32
 8005552:	2282      	movs	r2, #130	; 0x82
 8005554:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005558:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800555c:	f7ff f81e 	bl	800459c <LCD_ShowString>
			break;
 8005560:	e1e7      	b.n	8005932 <ShowMode+0x5de>
		case SEVEN:
			LCD_DrawRectangle(340, 590, 455, 642);
 8005562:	f240 2382 	movw	r3, #642	; 0x282
 8005566:	f240 12c7 	movw	r2, #455	; 0x1c7
 800556a:	f240 214e 	movw	r1, #590	; 0x24e
 800556e:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8005572:	f7fe ff0d 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "SEVEN ");
 8005576:	4b55      	ldr	r3, [pc, #340]	; (80056cc <ShowMode+0x378>)
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	2320      	movs	r3, #32
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	2320      	movs	r3, #32
 8005580:	2282      	movs	r2, #130	; 0x82
 8005582:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005586:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800558a:	f7ff f807 	bl	800459c <LCD_ShowString>
			break;
 800558e:	e1d0      	b.n	8005932 <ShowMode+0x5de>
		case EIGHT:
			LCD_DrawRectangle(340, 590, 455, 642);
 8005590:	f240 2382 	movw	r3, #642	; 0x282
 8005594:	f240 12c7 	movw	r2, #455	; 0x1c7
 8005598:	f240 214e 	movw	r1, #590	; 0x24e
 800559c:	f44f 70aa 	mov.w	r0, #340	; 0x154
 80055a0:	f7fe fef6 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "EIGHT ");
 80055a4:	4b4a      	ldr	r3, [pc, #296]	; (80056d0 <ShowMode+0x37c>)
 80055a6:	9301      	str	r3, [sp, #4]
 80055a8:	2320      	movs	r3, #32
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	2320      	movs	r3, #32
 80055ae:	2282      	movs	r2, #130	; 0x82
 80055b0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80055b4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80055b8:	f7fe fff0 	bl	800459c <LCD_ShowString>
			break;
 80055bc:	e1b9      	b.n	8005932 <ShowMode+0x5de>
		case NINE:
			LCD_DrawRectangle(340, 590, 455, 642);
 80055be:	f240 2382 	movw	r3, #642	; 0x282
 80055c2:	f240 12c7 	movw	r2, #455	; 0x1c7
 80055c6:	f240 214e 	movw	r1, #590	; 0x24e
 80055ca:	f44f 70aa 	mov.w	r0, #340	; 0x154
 80055ce:	f7fe fedf 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "NINE  ");
 80055d2:	4b40      	ldr	r3, [pc, #256]	; (80056d4 <ShowMode+0x380>)
 80055d4:	9301      	str	r3, [sp, #4]
 80055d6:	2320      	movs	r3, #32
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	2320      	movs	r3, #32
 80055dc:	2282      	movs	r2, #130	; 0x82
 80055de:	f44f 7116 	mov.w	r1, #600	; 0x258
 80055e2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80055e6:	f7fe ffd9 	bl	800459c <LCD_ShowString>
			break;
 80055ea:	e1a2      	b.n	8005932 <ShowMode+0x5de>
		case ZERO:
			LCD_DrawRectangle(340, 590, 455, 642);
 80055ec:	f240 2382 	movw	r3, #642	; 0x282
 80055f0:	f240 12c7 	movw	r2, #455	; 0x1c7
 80055f4:	f240 214e 	movw	r1, #590	; 0x24e
 80055f8:	f44f 70aa 	mov.w	r0, #340	; 0x154
 80055fc:	f7fe fec8 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "ZERO  ");
 8005600:	4b35      	ldr	r3, [pc, #212]	; (80056d8 <ShowMode+0x384>)
 8005602:	9301      	str	r3, [sp, #4]
 8005604:	2320      	movs	r3, #32
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	2320      	movs	r3, #32
 800560a:	2282      	movs	r2, #130	; 0x82
 800560c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005610:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005614:	f7fe ffc2 	bl	800459c <LCD_ShowString>
			break;
 8005618:	e18b      	b.n	8005932 <ShowMode+0x5de>
		case DETER:
			LCD_DrawRectangle(340, 590, 455, 642);
 800561a:	f240 2382 	movw	r3, #642	; 0x282
 800561e:	f240 12c7 	movw	r2, #455	; 0x1c7
 8005622:	f240 214e 	movw	r1, #590	; 0x24e
 8005626:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800562a:	f7fe feb1 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "DETER ");
 800562e:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <ShowMode+0x388>)
 8005630:	9301      	str	r3, [sp, #4]
 8005632:	2320      	movs	r3, #32
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	2320      	movs	r3, #32
 8005638:	2282      	movs	r2, #130	; 0x82
 800563a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800563e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005642:	f7fe ffab 	bl	800459c <LCD_ShowString>
			break;
 8005646:	e174      	b.n	8005932 <ShowMode+0x5de>
		case RESET:
			LCD_DrawRectangle(340, 590, 455, 642);
 8005648:	f240 2382 	movw	r3, #642	; 0x282
 800564c:	f240 12c7 	movw	r2, #455	; 0x1c7
 8005650:	f240 214e 	movw	r1, #590	; 0x24e
 8005654:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8005658:	f7fe fe9a 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "RESET ");
 800565c:	4b20      	ldr	r3, [pc, #128]	; (80056e0 <ShowMode+0x38c>)
 800565e:	9301      	str	r3, [sp, #4]
 8005660:	2320      	movs	r3, #32
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	2320      	movs	r3, #32
 8005666:	2282      	movs	r2, #130	; 0x82
 8005668:	f44f 7116 	mov.w	r1, #600	; 0x258
 800566c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005670:	f7fe ff94 	bl	800459c <LCD_ShowString>
			break;
 8005674:	e15d      	b.n	8005932 <ShowMode+0x5de>
		case CANCEL:
			LCD_DrawRectangle(340, 590, 455, 642);
 8005676:	f240 2382 	movw	r3, #642	; 0x282
 800567a:	f240 12c7 	movw	r2, #455	; 0x1c7
 800567e:	f240 214e 	movw	r1, #590	; 0x24e
 8005682:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8005686:	f7fe fe83 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "CANCEL");
 800568a:	4b16      	ldr	r3, [pc, #88]	; (80056e4 <ShowMode+0x390>)
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	2320      	movs	r3, #32
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	2320      	movs	r3, #32
 8005694:	2282      	movs	r2, #130	; 0x82
 8005696:	f44f 7116 	mov.w	r1, #600	; 0x258
 800569a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800569e:	f7fe ff7d 	bl	800459c <LCD_ShowString>
			break;
 80056a2:	e146      	b.n	8005932 <ShowMode+0x5de>
 80056a4:	20000000 	.word	0x20000000
 80056a8:	0800f5d0 	.word	0x0800f5d0
 80056ac:	0800f5d8 	.word	0x0800f5d8
 80056b0:	0800f5e0 	.word	0x0800f5e0
 80056b4:	0800f5e8 	.word	0x0800f5e8
 80056b8:	0800f5f0 	.word	0x0800f5f0
 80056bc:	0800f5f8 	.word	0x0800f5f8
 80056c0:	0800f600 	.word	0x0800f600
 80056c4:	0800f608 	.word	0x0800f608
 80056c8:	0800f610 	.word	0x0800f610
 80056cc:	0800f618 	.word	0x0800f618
 80056d0:	0800f620 	.word	0x0800f620
 80056d4:	0800f628 	.word	0x0800f628
 80056d8:	0800f630 	.word	0x0800f630
 80056dc:	0800f638 	.word	0x0800f638
 80056e0:	0800f640 	.word	0x0800f640
 80056e4:	0800f648 	.word	0x0800f648
		}
	} else {
		switch (key) {
 80056e8:	79fb      	ldrb	r3, [r7, #7]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	2b0b      	cmp	r3, #11
 80056ee:	f200 8120 	bhi.w	8005932 <ShowMode+0x5de>
 80056f2:	a201      	add	r2, pc, #4	; (adr r2, 80056f8 <ShowMode+0x3a4>)
 80056f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f8:	08005771 	.word	0x08005771
 80056fc:	080057a3 	.word	0x080057a3
 8005700:	080057d5 	.word	0x080057d5
 8005704:	08005729 	.word	0x08005729
 8005708:	08005807 	.word	0x08005807
 800570c:	08005839 	.word	0x08005839
 8005710:	0800586b 	.word	0x0800586b
 8005714:	08005741 	.word	0x08005741
 8005718:	0800589d 	.word	0x0800589d
 800571c:	080058cf 	.word	0x080058cf
 8005720:	08005901 	.word	0x08005901
 8005724:	08005759 	.word	0x08005759
		case STABLE:
			LCD_ShowString(30, 700, 130, 48, 48, (uint8_t*) "STABLE");
 8005728:	4b85      	ldr	r3, [pc, #532]	; (8005940 <ShowMode+0x5ec>)
 800572a:	9301      	str	r3, [sp, #4]
 800572c:	2330      	movs	r3, #48	; 0x30
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	2330      	movs	r3, #48	; 0x30
 8005732:	2282      	movs	r2, #130	; 0x82
 8005734:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005738:	201e      	movs	r0, #30
 800573a:	f7fe ff2f 	bl	800459c <LCD_ShowString>
			break;
 800573e:	e0f8      	b.n	8005932 <ShowMode+0x5de>
		case MOVE:
			LCD_ShowString(30, 700, 130, 48, 48, (uint8_t*) "MOVE  ");
 8005740:	4b80      	ldr	r3, [pc, #512]	; (8005944 <ShowMode+0x5f0>)
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	2330      	movs	r3, #48	; 0x30
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	2330      	movs	r3, #48	; 0x30
 800574a:	2282      	movs	r2, #130	; 0x82
 800574c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005750:	201e      	movs	r0, #30
 8005752:	f7fe ff23 	bl	800459c <LCD_ShowString>
			break;
 8005756:	e0ec      	b.n	8005932 <ShowMode+0x5de>
		case ROUND:
			LCD_ShowString(30, 700, 130, 48, 48, (uint8_t*) "ROUND ");
 8005758:	4b7b      	ldr	r3, [pc, #492]	; (8005948 <ShowMode+0x5f4>)
 800575a:	9301      	str	r3, [sp, #4]
 800575c:	2330      	movs	r3, #48	; 0x30
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	2330      	movs	r3, #48	; 0x30
 8005762:	2282      	movs	r2, #130	; 0x82
 8005764:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005768:	201e      	movs	r0, #30
 800576a:	f7fe ff17 	bl	800459c <LCD_ShowString>
			break;
 800576e:	e0e0      	b.n	8005932 <ShowMode+0x5de>
		case ONE:
			LCD_ShowString(180 + 50 * i, 700, 130, 48, 48, (uint8_t*) "1");
 8005770:	79bb      	ldrb	r3, [r7, #6]
 8005772:	b29b      	uxth	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	0092      	lsls	r2, r2, #2
 8005778:	4413      	add	r3, r2
 800577a:	461a      	mov	r2, r3
 800577c:	0091      	lsls	r1, r2, #2
 800577e:	461a      	mov	r2, r3
 8005780:	460b      	mov	r3, r1
 8005782:	4413      	add	r3, r2
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	b29b      	uxth	r3, r3
 8005788:	33b4      	adds	r3, #180	; 0xb4
 800578a:	b298      	uxth	r0, r3
 800578c:	4b6f      	ldr	r3, [pc, #444]	; (800594c <ShowMode+0x5f8>)
 800578e:	9301      	str	r3, [sp, #4]
 8005790:	2330      	movs	r3, #48	; 0x30
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	2330      	movs	r3, #48	; 0x30
 8005796:	2282      	movs	r2, #130	; 0x82
 8005798:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800579c:	f7fe fefe 	bl	800459c <LCD_ShowString>
			break;
 80057a0:	e0c7      	b.n	8005932 <ShowMode+0x5de>
		case TWO:
			LCD_ShowString(180 + 50 * i, 700, 130, 48, 48, (uint8_t*) "2");
 80057a2:	79bb      	ldrb	r3, [r7, #6]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	461a      	mov	r2, r3
 80057a8:	0092      	lsls	r2, r2, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	461a      	mov	r2, r3
 80057ae:	0091      	lsls	r1, r2, #2
 80057b0:	461a      	mov	r2, r3
 80057b2:	460b      	mov	r3, r1
 80057b4:	4413      	add	r3, r2
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	33b4      	adds	r3, #180	; 0xb4
 80057bc:	b298      	uxth	r0, r3
 80057be:	4b64      	ldr	r3, [pc, #400]	; (8005950 <ShowMode+0x5fc>)
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	2330      	movs	r3, #48	; 0x30
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	2330      	movs	r3, #48	; 0x30
 80057c8:	2282      	movs	r2, #130	; 0x82
 80057ca:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80057ce:	f7fe fee5 	bl	800459c <LCD_ShowString>
			break;
 80057d2:	e0ae      	b.n	8005932 <ShowMode+0x5de>
		case THREE:
			LCD_ShowString(180 + 50 * i, 700, 130, 48, 48, (uint8_t*) "3");
 80057d4:	79bb      	ldrb	r3, [r7, #6]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	461a      	mov	r2, r3
 80057da:	0092      	lsls	r2, r2, #2
 80057dc:	4413      	add	r3, r2
 80057de:	461a      	mov	r2, r3
 80057e0:	0091      	lsls	r1, r2, #2
 80057e2:	461a      	mov	r2, r3
 80057e4:	460b      	mov	r3, r1
 80057e6:	4413      	add	r3, r2
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	33b4      	adds	r3, #180	; 0xb4
 80057ee:	b298      	uxth	r0, r3
 80057f0:	4b58      	ldr	r3, [pc, #352]	; (8005954 <ShowMode+0x600>)
 80057f2:	9301      	str	r3, [sp, #4]
 80057f4:	2330      	movs	r3, #48	; 0x30
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	2330      	movs	r3, #48	; 0x30
 80057fa:	2282      	movs	r2, #130	; 0x82
 80057fc:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005800:	f7fe fecc 	bl	800459c <LCD_ShowString>
			break;
 8005804:	e095      	b.n	8005932 <ShowMode+0x5de>
		case FOUR:
			LCD_ShowString(180 + 50 * i, 700, 130, 48, 48, (uint8_t*) "4");
 8005806:	79bb      	ldrb	r3, [r7, #6]
 8005808:	b29b      	uxth	r3, r3
 800580a:	461a      	mov	r2, r3
 800580c:	0092      	lsls	r2, r2, #2
 800580e:	4413      	add	r3, r2
 8005810:	461a      	mov	r2, r3
 8005812:	0091      	lsls	r1, r2, #2
 8005814:	461a      	mov	r2, r3
 8005816:	460b      	mov	r3, r1
 8005818:	4413      	add	r3, r2
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	b29b      	uxth	r3, r3
 800581e:	33b4      	adds	r3, #180	; 0xb4
 8005820:	b298      	uxth	r0, r3
 8005822:	4b4d      	ldr	r3, [pc, #308]	; (8005958 <ShowMode+0x604>)
 8005824:	9301      	str	r3, [sp, #4]
 8005826:	2330      	movs	r3, #48	; 0x30
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	2330      	movs	r3, #48	; 0x30
 800582c:	2282      	movs	r2, #130	; 0x82
 800582e:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005832:	f7fe feb3 	bl	800459c <LCD_ShowString>
			break;
 8005836:	e07c      	b.n	8005932 <ShowMode+0x5de>
		case FIVE:
			LCD_ShowString(180 + 50 * i, 700, 130, 48, 48, (uint8_t*) "5");
 8005838:	79bb      	ldrb	r3, [r7, #6]
 800583a:	b29b      	uxth	r3, r3
 800583c:	461a      	mov	r2, r3
 800583e:	0092      	lsls	r2, r2, #2
 8005840:	4413      	add	r3, r2
 8005842:	461a      	mov	r2, r3
 8005844:	0091      	lsls	r1, r2, #2
 8005846:	461a      	mov	r2, r3
 8005848:	460b      	mov	r3, r1
 800584a:	4413      	add	r3, r2
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	b29b      	uxth	r3, r3
 8005850:	33b4      	adds	r3, #180	; 0xb4
 8005852:	b298      	uxth	r0, r3
 8005854:	4b41      	ldr	r3, [pc, #260]	; (800595c <ShowMode+0x608>)
 8005856:	9301      	str	r3, [sp, #4]
 8005858:	2330      	movs	r3, #48	; 0x30
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	2330      	movs	r3, #48	; 0x30
 800585e:	2282      	movs	r2, #130	; 0x82
 8005860:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005864:	f7fe fe9a 	bl	800459c <LCD_ShowString>
			break;
 8005868:	e063      	b.n	8005932 <ShowMode+0x5de>
		case SIX:
			LCD_ShowString(180 + 50 * i, 700, 130, 48, 48, (uint8_t*) "6");
 800586a:	79bb      	ldrb	r3, [r7, #6]
 800586c:	b29b      	uxth	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	0092      	lsls	r2, r2, #2
 8005872:	4413      	add	r3, r2
 8005874:	461a      	mov	r2, r3
 8005876:	0091      	lsls	r1, r2, #2
 8005878:	461a      	mov	r2, r3
 800587a:	460b      	mov	r3, r1
 800587c:	4413      	add	r3, r2
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	b29b      	uxth	r3, r3
 8005882:	33b4      	adds	r3, #180	; 0xb4
 8005884:	b298      	uxth	r0, r3
 8005886:	4b36      	ldr	r3, [pc, #216]	; (8005960 <ShowMode+0x60c>)
 8005888:	9301      	str	r3, [sp, #4]
 800588a:	2330      	movs	r3, #48	; 0x30
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	2330      	movs	r3, #48	; 0x30
 8005890:	2282      	movs	r2, #130	; 0x82
 8005892:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005896:	f7fe fe81 	bl	800459c <LCD_ShowString>
			break;
 800589a:	e04a      	b.n	8005932 <ShowMode+0x5de>
		case SEVEN:
			LCD_ShowString(180 + 50 * i, 700, 130, 48, 48, (uint8_t*) "7");
 800589c:	79bb      	ldrb	r3, [r7, #6]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	0092      	lsls	r2, r2, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	461a      	mov	r2, r3
 80058a8:	0091      	lsls	r1, r2, #2
 80058aa:	461a      	mov	r2, r3
 80058ac:	460b      	mov	r3, r1
 80058ae:	4413      	add	r3, r2
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	33b4      	adds	r3, #180	; 0xb4
 80058b6:	b298      	uxth	r0, r3
 80058b8:	4b2a      	ldr	r3, [pc, #168]	; (8005964 <ShowMode+0x610>)
 80058ba:	9301      	str	r3, [sp, #4]
 80058bc:	2330      	movs	r3, #48	; 0x30
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	2330      	movs	r3, #48	; 0x30
 80058c2:	2282      	movs	r2, #130	; 0x82
 80058c4:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80058c8:	f7fe fe68 	bl	800459c <LCD_ShowString>
			break;
 80058cc:	e031      	b.n	8005932 <ShowMode+0x5de>
		case EIGHT:
			LCD_ShowString(180 + 50 * i, 700, 130, 48, 48, (uint8_t*) "8");
 80058ce:	79bb      	ldrb	r3, [r7, #6]
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	461a      	mov	r2, r3
 80058d4:	0092      	lsls	r2, r2, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	461a      	mov	r2, r3
 80058da:	0091      	lsls	r1, r2, #2
 80058dc:	461a      	mov	r2, r3
 80058de:	460b      	mov	r3, r1
 80058e0:	4413      	add	r3, r2
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	33b4      	adds	r3, #180	; 0xb4
 80058e8:	b298      	uxth	r0, r3
 80058ea:	4b1f      	ldr	r3, [pc, #124]	; (8005968 <ShowMode+0x614>)
 80058ec:	9301      	str	r3, [sp, #4]
 80058ee:	2330      	movs	r3, #48	; 0x30
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	2330      	movs	r3, #48	; 0x30
 80058f4:	2282      	movs	r2, #130	; 0x82
 80058f6:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80058fa:	f7fe fe4f 	bl	800459c <LCD_ShowString>
			break;
 80058fe:	e018      	b.n	8005932 <ShowMode+0x5de>
		case NINE:
			LCD_ShowString(180 + 50 * i, 700, 130, 48, 48, (uint8_t*) "9");
 8005900:	79bb      	ldrb	r3, [r7, #6]
 8005902:	b29b      	uxth	r3, r3
 8005904:	461a      	mov	r2, r3
 8005906:	0092      	lsls	r2, r2, #2
 8005908:	4413      	add	r3, r2
 800590a:	461a      	mov	r2, r3
 800590c:	0091      	lsls	r1, r2, #2
 800590e:	461a      	mov	r2, r3
 8005910:	460b      	mov	r3, r1
 8005912:	4413      	add	r3, r2
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	b29b      	uxth	r3, r3
 8005918:	33b4      	adds	r3, #180	; 0xb4
 800591a:	b298      	uxth	r0, r3
 800591c:	4b13      	ldr	r3, [pc, #76]	; (800596c <ShowMode+0x618>)
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	2330      	movs	r3, #48	; 0x30
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	2330      	movs	r3, #48	; 0x30
 8005926:	2282      	movs	r2, #130	; 0x82
 8005928:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800592c:	f7fe fe36 	bl	800459c <LCD_ShowString>
			break;
 8005930:	bf00      	nop
		}
	}
	POINT_COLOR = BLACK; //将字符恢复为黑色
 8005932:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <ShowMode+0x61c>)
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
}
 8005938:	bf00      	nop
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	0800f5d0 	.word	0x0800f5d0
 8005944:	0800f5d8 	.word	0x0800f5d8
 8005948:	0800f5e0 	.word	0x0800f5e0
 800594c:	0800f650 	.word	0x0800f650
 8005950:	0800f654 	.word	0x0800f654
 8005954:	0800f658 	.word	0x0800f658
 8005958:	0800f65c 	.word	0x0800f65c
 800595c:	0800f660 	.word	0x0800f660
 8005960:	0800f664 	.word	0x0800f664
 8005964:	0800f668 	.word	0x0800f668
 8005968:	0800f66c 	.word	0x0800f66c
 800596c:	0800f670 	.word	0x0800f670
 8005970:	20000000 	.word	0x20000000

08005974 <ModeStable>:

//模式1：稳定模式
void ModeStable(void) {
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
	//确定稳定坐标
	GetSetPosi(SetPosi, Mode[1]);
 8005978:	4b22      	ldr	r3, [pc, #136]	; (8005a04 <ModeStable+0x90>)
 800597a:	785b      	ldrb	r3, [r3, #1]
 800597c:	4619      	mov	r1, r3
 800597e:	4822      	ldr	r0, [pc, #136]	; (8005a08 <ModeStable+0x94>)
 8005980:	f7ff faca 	bl	8004f18 <GetSetPosi>
	//将稳定坐标放入PID结构体中
	ChaSetPosi(&pid_X, SetPosi[0]);
 8005984:	4b20      	ldr	r3, [pc, #128]	; (8005a08 <ModeStable+0x94>)
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	4619      	mov	r1, r3
 800598a:	4820      	ldr	r0, [pc, #128]	; (8005a0c <ModeStable+0x98>)
 800598c:	f7ff f9c0 	bl	8004d10 <ChaSetPosi>
	ChaSetPosi(&pid_Y, SetPosi[1]);
 8005990:	4b1d      	ldr	r3, [pc, #116]	; (8005a08 <ModeStable+0x94>)
 8005992:	885b      	ldrh	r3, [r3, #2]
 8005994:	4619      	mov	r1, r3
 8005996:	481e      	ldr	r0, [pc, #120]	; (8005a10 <ModeStable+0x9c>)
 8005998:	f7ff f9ba 	bl	8004d10 <ChaSetPosi>

	//计算小球速度,同时查看间距
	ballSpeed();
 800599c:	f7ff f9e8 	bl	8004d70 <ballSpeed>
	//分别使用pid算法调整X,Y的坐标
	//其中0通道控制X轴舵机,1通道控制Y轴舵机
	PID_Calc(&pid_X, coordinate_XY[i][0], speedX);
 80059a0:	4b1c      	ldr	r3, [pc, #112]	; (8005a14 <ModeStable+0xa0>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	4b1c      	ldr	r3, [pc, #112]	; (8005a18 <ModeStable+0xa4>)
 80059a8:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80059ac:	4a1b      	ldr	r2, [pc, #108]	; (8005a1c <ModeStable+0xa8>)
 80059ae:	edd2 7a00 	vldr	s15, [r2]
 80059b2:	eeb0 0a67 	vmov.f32	s0, s15
 80059b6:	4619      	mov	r1, r3
 80059b8:	4814      	ldr	r0, [pc, #80]	; (8005a0c <ModeStable+0x98>)
 80059ba:	f7ff f8b3 	bl	8004b24 <PID_Calc>
	PID_Calc(&pid_Y, coordinate_XY[i][1], speedY);
 80059be:	4b15      	ldr	r3, [pc, #84]	; (8005a14 <ModeStable+0xa0>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	4a15      	ldr	r2, [pc, #84]	; (8005a18 <ModeStable+0xa4>)
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	885b      	ldrh	r3, [r3, #2]
 80059ca:	4a15      	ldr	r2, [pc, #84]	; (8005a20 <ModeStable+0xac>)
 80059cc:	edd2 7a00 	vldr	s15, [r2]
 80059d0:	eeb0 0a67 	vmov.f32	s0, s15
 80059d4:	4619      	mov	r1, r3
 80059d6:	480e      	ldr	r0, [pc, #56]	; (8005a10 <ModeStable+0x9c>)
 80059d8:	f7ff f8a4 	bl	8004b24 <PID_Calc>
	PCA9685_SetServoAngle(0, pid_X.angle);
 80059dc:	4b0b      	ldr	r3, [pc, #44]	; (8005a0c <ModeStable+0x98>)
 80059de:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80059e2:	eeb0 0a67 	vmov.f32	s0, s15
 80059e6:	2000      	movs	r0, #0
 80059e8:	f7fe ffde 	bl	80049a8 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, pid_Y.angle);
 80059ec:	4b08      	ldr	r3, [pc, #32]	; (8005a10 <ModeStable+0x9c>)
 80059ee:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80059f2:	eeb0 0a67 	vmov.f32	s0, s15
 80059f6:	2001      	movs	r0, #1
 80059f8:	f7fe ffd6 	bl	80049a8 <PCA9685_SetServoAngle>

	//同一使用LCD输出相关信息
	ShowString();
 80059fc:	f7ff fb00 	bl	8005000 <ShowString>
}
 8005a00:	bf00      	nop
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	200002a8 	.word	0x200002a8
 8005a08:	20000358 	.word	0x20000358
 8005a0c:	20000368 	.word	0x20000368
 8005a10:	20000324 	.word	0x20000324
 8005a14:	200002ae 	.word	0x200002ae
 8005a18:	20000228 	.word	0x20000228
 8005a1c:	2000035c 	.word	0x2000035c
 8005a20:	20000404 	.word	0x20000404

08005a24 <ModeMove>:

//模式2：移动模式
void ModeMove(void) {
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
	uint8_t count = 0;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	71fb      	strb	r3, [r7, #7]
	static uint8_t isTim = 0;  //判断是否稳定，是否开始计时，isTim为1即为开始计时
	while (Mode[count] != 0) {
 8005a2e:	e002      	b.n	8005a36 <ModeMove+0x12>
		count++;
 8005a30:	79fb      	ldrb	r3, [r7, #7]
 8005a32:	3301      	adds	r3, #1
 8005a34:	71fb      	strb	r3, [r7, #7]
	while (Mode[count] != 0) {
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	4a6d      	ldr	r2, [pc, #436]	; (8005bf0 <ModeMove+0x1cc>)
 8005a3a:	5cd3      	ldrb	r3, [r2, r3]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f7      	bne.n	8005a30 <ModeMove+0xc>
	}

	for (uint8_t i = 1; i < count;) {
 8005a40:	2301      	movs	r3, #1
 8005a42:	71bb      	strb	r3, [r7, #6]
 8005a44:	e0ca      	b.n	8005bdc <ModeMove+0x1b8>

		//确定目的坐标
		GetSetPosi(SetPosi, Mode[i]);
 8005a46:	79bb      	ldrb	r3, [r7, #6]
 8005a48:	4a69      	ldr	r2, [pc, #420]	; (8005bf0 <ModeMove+0x1cc>)
 8005a4a:	5cd3      	ldrb	r3, [r2, r3]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4869      	ldr	r0, [pc, #420]	; (8005bf4 <ModeMove+0x1d0>)
 8005a50:	f7ff fa62 	bl	8004f18 <GetSetPosi>
		ChaSetPosi(&pid_X, SetPosi[0]);
 8005a54:	4b67      	ldr	r3, [pc, #412]	; (8005bf4 <ModeMove+0x1d0>)
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4867      	ldr	r0, [pc, #412]	; (8005bf8 <ModeMove+0x1d4>)
 8005a5c:	f7ff f958 	bl	8004d10 <ChaSetPosi>
		ChaSetPosi(&pid_Y, SetPosi[1]);
 8005a60:	4b64      	ldr	r3, [pc, #400]	; (8005bf4 <ModeMove+0x1d0>)
 8005a62:	885b      	ldrh	r3, [r3, #2]
 8005a64:	4619      	mov	r1, r3
 8005a66:	4865      	ldr	r0, [pc, #404]	; (8005bfc <ModeMove+0x1d8>)
 8005a68:	f7ff f952 	bl	8004d10 <ChaSetPosi>

		//计算小球速度,同时查看间距
		ballSpeed();
 8005a6c:	f7ff f980 	bl	8004d70 <ballSpeed>
		//i==1时，需要在初始位置稳定2s以上
		if (i == 1) {
 8005a70:	79bb      	ldrb	r3, [r7, #6]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d13e      	bne.n	8005af4 <ModeMove+0xd0>
			if (isTim == 0) { //isTim为1表示未开始计时，需判断是否开始计时
 8005a76:	4b62      	ldr	r3, [pc, #392]	; (8005c00 <ModeMove+0x1dc>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d110      	bne.n	8005aa0 <ModeMove+0x7c>
				if (distance <= 30) {  //若间距小于30，则开始计时
 8005a7e:	4b61      	ldr	r3, [pc, #388]	; (8005c04 <ModeMove+0x1e0>)
 8005a80:	edd3 7a00 	vldr	s15, [r3]
 8005a84:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a90:	d876      	bhi.n	8005b80 <ModeMove+0x15c>
					HAL_TIM_Base_Start(&htim2);
 8005a92:	485d      	ldr	r0, [pc, #372]	; (8005c08 <ModeMove+0x1e4>)
 8005a94:	f004 f810 	bl	8009ab8 <HAL_TIM_Base_Start>
					isTim = 1; //isTim置1表示已开始计时
 8005a98:	4b59      	ldr	r3, [pc, #356]	; (8005c00 <ModeMove+0x1dc>)
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	701a      	strb	r2, [r3, #0]
 8005a9e:	e06f      	b.n	8005b80 <ModeMove+0x15c>
				}
			} else {
				if (distance > 30) {  //若间距大于30，则停止计时
 8005aa0:	4b58      	ldr	r3, [pc, #352]	; (8005c04 <ModeMove+0x1e0>)
 8005aa2:	edd3 7a00 	vldr	s15, [r3]
 8005aa6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab2:	dd0a      	ble.n	8005aca <ModeMove+0xa6>
					isTim = 0;
 8005ab4:	4b52      	ldr	r3, [pc, #328]	; (8005c00 <ModeMove+0x1dc>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop(&htim2);
 8005aba:	4853      	ldr	r0, [pc, #332]	; (8005c08 <ModeMove+0x1e4>)
 8005abc:	f004 f864 	bl	8009b88 <HAL_TIM_Base_Stop>
					__HAL_TIM_SET_COUNTER(&htim2, 0);  //重新将计时器置零，方便下次计时
 8005ac0:	4b51      	ldr	r3, [pc, #324]	; (8005c08 <ModeMove+0x1e4>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	625a      	str	r2, [r3, #36]	; 0x24
 8005ac8:	e05a      	b.n	8005b80 <ModeMove+0x15c>
				} else if (__HAL_TIM_GET_COUNTER(&htim2) >= 30000) { //若间距小于30的情况下持续了3s，则完成稳定任务
 8005aca:	4b4f      	ldr	r3, [pc, #316]	; (8005c08 <ModeMove+0x1e4>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	f247 522f 	movw	r2, #29999	; 0x752f
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d953      	bls.n	8005b80 <ModeMove+0x15c>
					i++;	//i加一，则进入下一环节，即小球移动
 8005ad8:	79bb      	ldrb	r3, [r7, #6]
 8005ada:	3301      	adds	r3, #1
 8005adc:	71bb      	strb	r3, [r7, #6]
					isTim = 0;
 8005ade:	4b48      	ldr	r3, [pc, #288]	; (8005c00 <ModeMove+0x1dc>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop(&htim2);
 8005ae4:	4848      	ldr	r0, [pc, #288]	; (8005c08 <ModeMove+0x1e4>)
 8005ae6:	f004 f84f 	bl	8009b88 <HAL_TIM_Base_Stop>
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8005aea:	4b47      	ldr	r3, [pc, #284]	; (8005c08 <ModeMove+0x1e4>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2200      	movs	r2, #0
 8005af0:	625a      	str	r2, [r3, #36]	; 0x24
 8005af2:	e045      	b.n	8005b80 <ModeMove+0x15c>
				}
			}
		} else if (i > 1 || i < count - 1) { //中间路径只需稍微停留即可，这里停留0.5s
 8005af4:	79bb      	ldrb	r3, [r7, #6]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d804      	bhi.n	8005b04 <ModeMove+0xe0>
 8005afa:	79ba      	ldrb	r2, [r7, #6]
 8005afc:	79fb      	ldrb	r3, [r7, #7]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	429a      	cmp	r2, r3
 8005b02:	da3d      	bge.n	8005b80 <ModeMove+0x15c>
			if (isTim == 0) {  //计时步骤同上
 8005b04:	4b3e      	ldr	r3, [pc, #248]	; (8005c00 <ModeMove+0x1dc>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d110      	bne.n	8005b2e <ModeMove+0x10a>
				if (distance <= 30) {
 8005b0c:	4b3d      	ldr	r3, [pc, #244]	; (8005c04 <ModeMove+0x1e0>)
 8005b0e:	edd3 7a00 	vldr	s15, [r3]
 8005b12:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b1e:	d82f      	bhi.n	8005b80 <ModeMove+0x15c>
					HAL_TIM_Base_Start(&htim2);
 8005b20:	4839      	ldr	r0, [pc, #228]	; (8005c08 <ModeMove+0x1e4>)
 8005b22:	f003 ffc9 	bl	8009ab8 <HAL_TIM_Base_Start>
					isTim = 1;
 8005b26:	4b36      	ldr	r3, [pc, #216]	; (8005c00 <ModeMove+0x1dc>)
 8005b28:	2201      	movs	r2, #1
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	e028      	b.n	8005b80 <ModeMove+0x15c>
				}
			} else {
				if (distance > 30) {
 8005b2e:	4b35      	ldr	r3, [pc, #212]	; (8005c04 <ModeMove+0x1e0>)
 8005b30:	edd3 7a00 	vldr	s15, [r3]
 8005b34:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005b38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b40:	dd0a      	ble.n	8005b58 <ModeMove+0x134>
					isTim = 1;
 8005b42:	4b2f      	ldr	r3, [pc, #188]	; (8005c00 <ModeMove+0x1dc>)
 8005b44:	2201      	movs	r2, #1
 8005b46:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop(&htim2);
 8005b48:	482f      	ldr	r0, [pc, #188]	; (8005c08 <ModeMove+0x1e4>)
 8005b4a:	f004 f81d 	bl	8009b88 <HAL_TIM_Base_Stop>
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8005b4e:	4b2e      	ldr	r3, [pc, #184]	; (8005c08 <ModeMove+0x1e4>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2200      	movs	r2, #0
 8005b54:	625a      	str	r2, [r3, #36]	; 0x24
 8005b56:	e013      	b.n	8005b80 <ModeMove+0x15c>
				} else if (__HAL_TIM_GET_COUNTER(&htim2) >= 5000) {
 8005b58:	4b2b      	ldr	r3, [pc, #172]	; (8005c08 <ModeMove+0x1e4>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	f241 3287 	movw	r2, #4999	; 0x1387
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d90c      	bls.n	8005b80 <ModeMove+0x15c>
					i++;
 8005b66:	79bb      	ldrb	r3, [r7, #6]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	71bb      	strb	r3, [r7, #6]
					isTim = 1;
 8005b6c:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <ModeMove+0x1dc>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop(&htim2);
 8005b72:	4825      	ldr	r0, [pc, #148]	; (8005c08 <ModeMove+0x1e4>)
 8005b74:	f004 f808 	bl	8009b88 <HAL_TIM_Base_Stop>
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8005b78:	4b23      	ldr	r3, [pc, #140]	; (8005c08 <ModeMove+0x1e4>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	625a      	str	r2, [r3, #36]	; 0x24
			}
		}

		//分别使用pid算法调整X,Y的坐标
		//其中0通道控制X轴舵机,1通道控制Y轴舵机
		PID_Calc(&pid_X, coordinate_XY[i][0], speedX);
 8005b80:	79bb      	ldrb	r3, [r7, #6]
 8005b82:	4a22      	ldr	r2, [pc, #136]	; (8005c0c <ModeMove+0x1e8>)
 8005b84:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8005b88:	4a21      	ldr	r2, [pc, #132]	; (8005c10 <ModeMove+0x1ec>)
 8005b8a:	edd2 7a00 	vldr	s15, [r2]
 8005b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b92:	4619      	mov	r1, r3
 8005b94:	4818      	ldr	r0, [pc, #96]	; (8005bf8 <ModeMove+0x1d4>)
 8005b96:	f7fe ffc5 	bl	8004b24 <PID_Calc>
		PID_Calc(&pid_Y, coordinate_XY[i][1], speedY);
 8005b9a:	79bb      	ldrb	r3, [r7, #6]
 8005b9c:	4a1b      	ldr	r2, [pc, #108]	; (8005c0c <ModeMove+0x1e8>)
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	885b      	ldrh	r3, [r3, #2]
 8005ba4:	4a1b      	ldr	r2, [pc, #108]	; (8005c14 <ModeMove+0x1f0>)
 8005ba6:	edd2 7a00 	vldr	s15, [r2]
 8005baa:	eeb0 0a67 	vmov.f32	s0, s15
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4812      	ldr	r0, [pc, #72]	; (8005bfc <ModeMove+0x1d8>)
 8005bb2:	f7fe ffb7 	bl	8004b24 <PID_Calc>
		PCA9685_SetServoAngle(0, pid_X.angle);
 8005bb6:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <ModeMove+0x1d4>)
 8005bb8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	f7fe fef1 	bl	80049a8 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(1, pid_Y.angle);
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <ModeMove+0x1d8>)
 8005bc8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	f7fe fee9 	bl	80049a8 <PCA9685_SetServoAngle>

		ShowString(0);
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	f7ff fa12 	bl	8005000 <ShowString>
	for (uint8_t i = 1; i < count;) {
 8005bdc:	79ba      	ldrb	r2, [r7, #6]
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	f4ff af30 	bcc.w	8005a46 <ModeMove+0x22>
	}
}
 8005be6:	bf00      	nop
 8005be8:	bf00      	nop
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	200002a8 	.word	0x200002a8
 8005bf4:	20000358 	.word	0x20000358
 8005bf8:	20000368 	.word	0x20000368
 8005bfc:	20000324 	.word	0x20000324
 8005c00:	200002af 	.word	0x200002af
 8005c04:	20000360 	.word	0x20000360
 8005c08:	200004f4 	.word	0x200004f4
 8005c0c:	20000228 	.word	0x20000228
 8005c10:	2000035c 	.word	0x2000035c
 8005c14:	20000404 	.word	0x20000404

08005c18 <ModeRound>:

//模式3：绕圈模式
void ModeRound(void) {
 8005c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
	//绕圈模式使用极坐标转为直角坐标
	uint16_t radius = 100;   //半径设置为100
 8005c1e:	2364      	movs	r3, #100	; 0x64
 8005c20:	80bb      	strh	r3, [r7, #4]
	uint8_t zita = 0;      //角度初始位为0
 8005c22:	2300      	movs	r3, #0
 8005c24:	71fb      	strb	r3, [r7, #7]

	while (1) {
		//确定中心坐标
		GetSetPosi(SetPosi, Mode[1]);
 8005c26:	4b4c      	ldr	r3, [pc, #304]	; (8005d58 <ModeRound+0x140>)
 8005c28:	785b      	ldrb	r3, [r3, #1]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	484b      	ldr	r0, [pc, #300]	; (8005d5c <ModeRound+0x144>)
 8005c2e:	f7ff f973 	bl	8004f18 <GetSetPosi>
		//根据中心坐标和相对极坐标，确定其直角坐标
		SetPosi[0] += (uint16_t) (radius * cos(zita));
 8005c32:	4b4a      	ldr	r3, [pc, #296]	; (8005d5c <ModeRound+0x144>)
 8005c34:	881e      	ldrh	r6, [r3, #0]
 8005c36:	88bb      	ldrh	r3, [r7, #4]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fa fc73 	bl	8000524 <__aeabi_i2d>
 8005c3e:	4604      	mov	r4, r0
 8005c40:	460d      	mov	r5, r1
 8005c42:	79fb      	ldrb	r3, [r7, #7]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fa fc5d 	bl	8000504 <__aeabi_ui2d>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	ec43 2b10 	vmov	d0, r2, r3
 8005c52:	f008 fa99 	bl	800e188 <cos>
 8005c56:	ec53 2b10 	vmov	r2, r3, d0
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	f7fa fccb 	bl	80005f8 <__aeabi_dmul>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4610      	mov	r0, r2
 8005c68:	4619      	mov	r1, r3
 8005c6a:	f7fa ff9d 	bl	8000ba8 <__aeabi_d2uiz>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	4433      	add	r3, r6
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	4b39      	ldr	r3, [pc, #228]	; (8005d5c <ModeRound+0x144>)
 8005c78:	801a      	strh	r2, [r3, #0]
		SetPosi[1] += (uint16_t) (radius * sin(zita));
 8005c7a:	4b38      	ldr	r3, [pc, #224]	; (8005d5c <ModeRound+0x144>)
 8005c7c:	885e      	ldrh	r6, [r3, #2]
 8005c7e:	88bb      	ldrh	r3, [r7, #4]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fa fc4f 	bl	8000524 <__aeabi_i2d>
 8005c86:	4604      	mov	r4, r0
 8005c88:	460d      	mov	r5, r1
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fa fc39 	bl	8000504 <__aeabi_ui2d>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	ec43 2b10 	vmov	d0, r2, r3
 8005c9a:	f008 fb51 	bl	800e340 <sin>
 8005c9e:	ec53 2b10 	vmov	r2, r3, d0
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	f7fa fca7 	bl	80005f8 <__aeabi_dmul>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	4610      	mov	r0, r2
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	f7fa ff79 	bl	8000ba8 <__aeabi_d2uiz>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	4433      	add	r3, r6
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	4b27      	ldr	r3, [pc, #156]	; (8005d5c <ModeRound+0x144>)
 8005cc0:	805a      	strh	r2, [r3, #2]

		//将稳定坐标放入PID结构体中
		ChaSetPosi(&pid_X, SetPosi[0]);
 8005cc2:	4b26      	ldr	r3, [pc, #152]	; (8005d5c <ModeRound+0x144>)
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4825      	ldr	r0, [pc, #148]	; (8005d60 <ModeRound+0x148>)
 8005cca:	f7ff f821 	bl	8004d10 <ChaSetPosi>
		ChaSetPosi(&pid_Y, SetPosi[1]);
 8005cce:	4b23      	ldr	r3, [pc, #140]	; (8005d5c <ModeRound+0x144>)
 8005cd0:	885b      	ldrh	r3, [r3, #2]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4823      	ldr	r0, [pc, #140]	; (8005d64 <ModeRound+0x14c>)
 8005cd6:	f7ff f81b 	bl	8004d10 <ChaSetPosi>

		//计算小球速度,同时查看间距
		ballSpeed();
 8005cda:	f7ff f849 	bl	8004d70 <ballSpeed>

		//当当前位置与目标位置间距小于20，目标坐标角度增加10度
		if (distance <= 20) {
 8005cde:	4b22      	ldr	r3, [pc, #136]	; (8005d68 <ModeRound+0x150>)
 8005ce0:	edd3 7a00 	vldr	s15, [r3]
 8005ce4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf0:	d802      	bhi.n	8005cf8 <ModeRound+0xe0>
			zita += 10;
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	330a      	adds	r3, #10
 8005cf6:	71fb      	strb	r3, [r7, #7]
		}

		//分别使用pid算法调整X,Y的坐标
		//其中0通道控制X轴舵机,1通道控制Y轴舵机
		PID_Calc(&pid_X, coordinate_XY[i][0], speedX);
 8005cf8:	4b1c      	ldr	r3, [pc, #112]	; (8005d6c <ModeRound+0x154>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	4b1c      	ldr	r3, [pc, #112]	; (8005d70 <ModeRound+0x158>)
 8005d00:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8005d04:	4a1b      	ldr	r2, [pc, #108]	; (8005d74 <ModeRound+0x15c>)
 8005d06:	edd2 7a00 	vldr	s15, [r2]
 8005d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4813      	ldr	r0, [pc, #76]	; (8005d60 <ModeRound+0x148>)
 8005d12:	f7fe ff07 	bl	8004b24 <PID_Calc>
		PID_Calc(&pid_Y, coordinate_XY[i][1], speedY);
 8005d16:	4b15      	ldr	r3, [pc, #84]	; (8005d6c <ModeRound+0x154>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	4a15      	ldr	r2, [pc, #84]	; (8005d70 <ModeRound+0x158>)
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	885b      	ldrh	r3, [r3, #2]
 8005d22:	4a15      	ldr	r2, [pc, #84]	; (8005d78 <ModeRound+0x160>)
 8005d24:	edd2 7a00 	vldr	s15, [r2]
 8005d28:	eeb0 0a67 	vmov.f32	s0, s15
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	480d      	ldr	r0, [pc, #52]	; (8005d64 <ModeRound+0x14c>)
 8005d30:	f7fe fef8 	bl	8004b24 <PID_Calc>
		PCA9685_SetServoAngle(0, pid_X.angle);
 8005d34:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <ModeRound+0x148>)
 8005d36:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d3e:	2000      	movs	r0, #0
 8005d40:	f7fe fe32 	bl	80049a8 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(1, pid_Y.angle);
 8005d44:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <ModeRound+0x14c>)
 8005d46:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d4e:	2001      	movs	r0, #1
 8005d50:	f7fe fe2a 	bl	80049a8 <PCA9685_SetServoAngle>
		GetSetPosi(SetPosi, Mode[1]);
 8005d54:	e767      	b.n	8005c26 <ModeRound+0xe>
 8005d56:	bf00      	nop
 8005d58:	200002a8 	.word	0x200002a8
 8005d5c:	20000358 	.word	0x20000358
 8005d60:	20000368 	.word	0x20000368
 8005d64:	20000324 	.word	0x20000324
 8005d68:	20000360 	.word	0x20000360
 8005d6c:	200002ae 	.word	0x200002ae
 8005d70:	20000228 	.word	0x20000228
 8005d74:	2000035c 	.word	0x2000035c
 8005d78:	20000404 	.word	0x20000404

08005d7c <SelecMode>:
		}
	}
}

//选择模式,isInit=1表示在初始化中调用
void SelecMode(uint8_t isInit) {
 8005d7c:	b590      	push	{r4, r7, lr}
 8005d7e:	b089      	sub	sp, #36	; 0x24
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	4603      	mov	r3, r0
 8005d84:	71fb      	strb	r3, [r7, #7]
	uint8_t key;
	uint8_t ModeBuffer[6];  //模式缓存区
	for (uint8_t i = 0; i < 6; i++) { //将原本模式缓存区中的信息保存起来
 8005d86:	2300      	movs	r3, #0
 8005d88:	75fb      	strb	r3, [r7, #23]
 8005d8a:	e00f      	b.n	8005dac <SelecMode+0x30>
		ModeBuffer[i] = Mode[i];
 8005d8c:	7dfa      	ldrb	r2, [r7, #23]
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
 8005d90:	499b      	ldr	r1, [pc, #620]	; (8006000 <SelecMode+0x284>)
 8005d92:	5c8a      	ldrb	r2, [r1, r2]
 8005d94:	f107 0118 	add.w	r1, r7, #24
 8005d98:	440b      	add	r3, r1
 8005d9a:	f803 2c0c 	strb.w	r2, [r3, #-12]
		Mode[i] = 0;
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
 8005da0:	4a97      	ldr	r2, [pc, #604]	; (8006000 <SelecMode+0x284>)
 8005da2:	2100      	movs	r1, #0
 8005da4:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 6; i++) { //将原本模式缓存区中的信息保存起来
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
 8005da8:	3301      	adds	r3, #1
 8005daa:	75fb      	strb	r3, [r7, #23]
 8005dac:	7dfb      	ldrb	r3, [r7, #23]
 8005dae:	2b05      	cmp	r3, #5
 8005db0:	d9ec      	bls.n	8005d8c <SelecMode+0x10>
	}

	printf("请选择模式:(模式+格点)\r\n如：从1经过2，3至6 ---------- 移动+1+2+3+6\r\n");
 8005db2:	4894      	ldr	r0, [pc, #592]	; (8006004 <SelecMode+0x288>)
 8005db4:	f005 ffb4 	bl	800bd20 <puts>
	for (uint8_t i = 0; i < 6; i++) {
 8005db8:	2300      	movs	r3, #0
 8005dba:	75bb      	strb	r3, [r7, #22]
 8005dbc:	e118      	b.n	8005ff0 <SelecMode+0x274>
		while ((key = keyboard_scan()) == NOPRES)
 8005dbe:	bf00      	nop
 8005dc0:	f7fb f8de 	bl	8000f80 <keyboard_scan>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	753b      	strb	r3, [r7, #20]
 8005dc8:	7d3b      	ldrb	r3, [r7, #20]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0f8      	beq.n	8005dc0 <SelecMode+0x44>
		/*
		 * 若输入格式不符合要求，则重新输入
		 * 若如何输入，则显示模式缓存区数据
		 * 先输入模式（即稳定、移动和绕圈），后输入数字，最后一位一定为确定键，并开始计时
		 */
		if (i == 5) { //该判断语句的多用是确保最后一定按下确定键
 8005dce:	7dbb      	ldrb	r3, [r7, #22]
 8005dd0:	2b05      	cmp	r3, #5
 8005dd2:	d113      	bne.n	8005dfc <SelecMode+0x80>
			if (key == DETER) {
 8005dd4:	7d3b      	ldrb	r3, [r7, #20]
 8005dd6:	2b0d      	cmp	r3, #13
 8005dd8:	d109      	bne.n	8005dee <SelecMode+0x72>
				HAL_TIM_Base_Start(&htim5); //按下确定键后开始计时
 8005dda:	488b      	ldr	r0, [pc, #556]	; (8006008 <SelecMode+0x28c>)
 8005ddc:	f003 fe6c 	bl	8009ab8 <HAL_TIM_Base_Start>
				PID_Reset(&pid_X); 		   //并重置PID信息
 8005de0:	488a      	ldr	r0, [pc, #552]	; (800600c <SelecMode+0x290>)
 8005de2:	f7fe ffa4 	bl	8004d2e <PID_Reset>
				PID_Reset(&pid_Y);
 8005de6:	488a      	ldr	r0, [pc, #552]	; (8006010 <SelecMode+0x294>)
 8005de8:	f7fe ffa1 	bl	8004d2e <PID_Reset>
				return; 		   //跳出函数，开始控制
 8005dec:	e104      	b.n	8005ff8 <SelecMode+0x27c>
			} else {
				printf("你输入的格式不符合要求，请按下确定键!\r\n");
 8005dee:	4889      	ldr	r0, [pc, #548]	; (8006014 <SelecMode+0x298>)
 8005df0:	f005 ff96 	bl	800bd20 <puts>
				i -= 1; //若输入格式不符合要求则重新输入
 8005df4:	7dbb      	ldrb	r3, [r7, #22]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	75bb      	strb	r3, [r7, #22]
				continue;
 8005dfa:	e0f6      	b.n	8005fea <SelecMode+0x26e>
			}
		} else if (i == 0 && key != STABLE && key != MOVE && key != ROUND) {
 8005dfc:	7dbb      	ldrb	r3, [r7, #22]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10e      	bne.n	8005e20 <SelecMode+0xa4>
 8005e02:	7d3b      	ldrb	r3, [r7, #20]
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d00b      	beq.n	8005e20 <SelecMode+0xa4>
 8005e08:	7d3b      	ldrb	r3, [r7, #20]
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d008      	beq.n	8005e20 <SelecMode+0xa4>
 8005e0e:	7d3b      	ldrb	r3, [r7, #20]
 8005e10:	2b0c      	cmp	r3, #12
 8005e12:	d005      	beq.n	8005e20 <SelecMode+0xa4>
			printf("你输入的格式不符合要求，请输入模式!\r\n");
 8005e14:	4880      	ldr	r0, [pc, #512]	; (8006018 <SelecMode+0x29c>)
 8005e16:	f005 ff83 	bl	800bd20 <puts>
			i = -1; //若输入格式不符合要求则重新输入
 8005e1a:	23ff      	movs	r3, #255	; 0xff
 8005e1c:	75bb      	strb	r3, [r7, #22]
			continue;
 8005e1e:	e0e4      	b.n	8005fea <SelecMode+0x26e>
		} else if (i == 0 && (key == STABLE || key == MOVE || key == ROUND)) {
 8005e20:	7dbb      	ldrb	r3, [r7, #22]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d128      	bne.n	8005e78 <SelecMode+0xfc>
 8005e26:	7d3b      	ldrb	r3, [r7, #20]
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d005      	beq.n	8005e38 <SelecMode+0xbc>
 8005e2c:	7d3b      	ldrb	r3, [r7, #20]
 8005e2e:	2b08      	cmp	r3, #8
 8005e30:	d002      	beq.n	8005e38 <SelecMode+0xbc>
 8005e32:	7d3b      	ldrb	r3, [r7, #20]
 8005e34:	2b0c      	cmp	r3, #12
 8005e36:	d11f      	bne.n	8005e78 <SelecMode+0xfc>
			Mode[i] = key; //若输入符合要求，则将键值存入模式缓存区中
 8005e38:	7dbb      	ldrb	r3, [r7, #22]
 8005e3a:	4971      	ldr	r1, [pc, #452]	; (8006000 <SelecMode+0x284>)
 8005e3c:	7d3a      	ldrb	r2, [r7, #20]
 8005e3e:	54ca      	strb	r2, [r1, r3]
			printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3],
 8005e40:	4b6f      	ldr	r3, [pc, #444]	; (8006000 <SelecMode+0x284>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	4619      	mov	r1, r3
 8005e46:	4b6e      	ldr	r3, [pc, #440]	; (8006000 <SelecMode+0x284>)
 8005e48:	785b      	ldrb	r3, [r3, #1]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	4b6c      	ldr	r3, [pc, #432]	; (8006000 <SelecMode+0x284>)
 8005e4e:	789b      	ldrb	r3, [r3, #2]
 8005e50:	461c      	mov	r4, r3
 8005e52:	4b6b      	ldr	r3, [pc, #428]	; (8006000 <SelecMode+0x284>)
 8005e54:	78db      	ldrb	r3, [r3, #3]
 8005e56:	461a      	mov	r2, r3
					Mode[4]);
 8005e58:	4b69      	ldr	r3, [pc, #420]	; (8006000 <SelecMode+0x284>)
 8005e5a:	791b      	ldrb	r3, [r3, #4]
			printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3],
 8005e5c:	9301      	str	r3, [sp, #4]
 8005e5e:	9200      	str	r2, [sp, #0]
 8005e60:	4623      	mov	r3, r4
 8005e62:	4602      	mov	r2, r0
 8005e64:	486d      	ldr	r0, [pc, #436]	; (800601c <SelecMode+0x2a0>)
 8005e66:	f005 fed5 	bl	800bc14 <iprintf>

			//在LCD中显示按键信息
			ShowMode(key, i);
 8005e6a:	7dba      	ldrb	r2, [r7, #22]
 8005e6c:	7d3b      	ldrb	r3, [r7, #20]
 8005e6e:	4611      	mov	r1, r2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff fa6f 	bl	8005354 <ShowMode>

			continue;
 8005e76:	e0b8      	b.n	8005fea <SelecMode+0x26e>
		} else if (key == DETER) {
 8005e78:	7d3b      	ldrb	r3, [r7, #20]
 8005e7a:	2b0d      	cmp	r3, #13
 8005e7c:	d109      	bne.n	8005e92 <SelecMode+0x116>
			HAL_TIM_Base_Start(&htim5); //按下确定键后开始计时
 8005e7e:	4862      	ldr	r0, [pc, #392]	; (8006008 <SelecMode+0x28c>)
 8005e80:	f003 fe1a 	bl	8009ab8 <HAL_TIM_Base_Start>
			PID_Reset(&pid_X);		   //并重置PID信息
 8005e84:	4861      	ldr	r0, [pc, #388]	; (800600c <SelecMode+0x290>)
 8005e86:	f7fe ff52 	bl	8004d2e <PID_Reset>
			PID_Reset(&pid_Y);
 8005e8a:	4861      	ldr	r0, [pc, #388]	; (8006010 <SelecMode+0x294>)
 8005e8c:	f7fe ff4f 	bl	8004d2e <PID_Reset>
			break;
 8005e90:	e0b2      	b.n	8005ff8 <SelecMode+0x27c>
		} else if (key == RESET) {
 8005e92:	7d3b      	ldrb	r3, [r7, #20]
 8005e94:	2b0f      	cmp	r3, #15
 8005e96:	d11e      	bne.n	8005ed6 <SelecMode+0x15a>
			for (i = 0; i <= 4; i++) { //按下复位键后，将模式缓存区中的信息清零
 8005e98:	2300      	movs	r3, #0
 8005e9a:	75bb      	strb	r3, [r7, #22]
 8005e9c:	e006      	b.n	8005eac <SelecMode+0x130>
				Mode[i] = 0;
 8005e9e:	7dbb      	ldrb	r3, [r7, #22]
 8005ea0:	4a57      	ldr	r2, [pc, #348]	; (8006000 <SelecMode+0x284>)
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i <= 4; i++) { //按下复位键后，将模式缓存区中的信息清零
 8005ea6:	7dbb      	ldrb	r3, [r7, #22]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	75bb      	strb	r3, [r7, #22]
 8005eac:	7dbb      	ldrb	r3, [r7, #22]
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d9f5      	bls.n	8005e9e <SelecMode+0x122>
			}
			LCD_Fill(30, 700, 400, 750, WHITE);
 8005eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	f240 23ee 	movw	r3, #750	; 0x2ee
 8005ebc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005ec0:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005ec4:	201e      	movs	r0, #30
 8005ec6:	f7fe f9a1 	bl	800420c <LCD_Fill>
			i = -1; //i=-1,进入下一个循环后，会自动加一，即从0重新开始
 8005eca:	23ff      	movs	r3, #255	; 0xff
 8005ecc:	75bb      	strb	r3, [r7, #22]
			printf("复位\r\n");
 8005ece:	4854      	ldr	r0, [pc, #336]	; (8006020 <SelecMode+0x2a4>)
 8005ed0:	f005 ff26 	bl	800bd20 <puts>
			continue;
 8005ed4:	e089      	b.n	8005fea <SelecMode+0x26e>
		}

		//判断格式输入是否正确
		if ((key >= ONE && key <= THREE) || (key >= FOUR && key <= SIX)
 8005ed6:	7d3b      	ldrb	r3, [r7, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <SelecMode+0x166>
 8005edc:	7d3b      	ldrb	r3, [r7, #20]
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d90b      	bls.n	8005efa <SelecMode+0x17e>
 8005ee2:	7d3b      	ldrb	r3, [r7, #20]
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d902      	bls.n	8005eee <SelecMode+0x172>
 8005ee8:	7d3b      	ldrb	r3, [r7, #20]
 8005eea:	2b07      	cmp	r3, #7
 8005eec:	d905      	bls.n	8005efa <SelecMode+0x17e>
				|| (key >= SEVEN && key <= NINE)) {
 8005eee:	7d3b      	ldrb	r3, [r7, #20]
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d922      	bls.n	8005f3a <SelecMode+0x1be>
 8005ef4:	7d3b      	ldrb	r3, [r7, #20]
 8005ef6:	2b0b      	cmp	r3, #11
 8005ef8:	d81f      	bhi.n	8005f3a <SelecMode+0x1be>
			Mode[i] = key; //若输入符合要求，则将键值存入模式缓存区中
 8005efa:	7dbb      	ldrb	r3, [r7, #22]
 8005efc:	4940      	ldr	r1, [pc, #256]	; (8006000 <SelecMode+0x284>)
 8005efe:	7d3a      	ldrb	r2, [r7, #20]
 8005f00:	54ca      	strb	r2, [r1, r3]
			printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3],
 8005f02:	4b3f      	ldr	r3, [pc, #252]	; (8006000 <SelecMode+0x284>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	4619      	mov	r1, r3
 8005f08:	4b3d      	ldr	r3, [pc, #244]	; (8006000 <SelecMode+0x284>)
 8005f0a:	785b      	ldrb	r3, [r3, #1]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	4b3c      	ldr	r3, [pc, #240]	; (8006000 <SelecMode+0x284>)
 8005f10:	789b      	ldrb	r3, [r3, #2]
 8005f12:	461c      	mov	r4, r3
 8005f14:	4b3a      	ldr	r3, [pc, #232]	; (8006000 <SelecMode+0x284>)
 8005f16:	78db      	ldrb	r3, [r3, #3]
 8005f18:	461a      	mov	r2, r3
					Mode[4]);
 8005f1a:	4b39      	ldr	r3, [pc, #228]	; (8006000 <SelecMode+0x284>)
 8005f1c:	791b      	ldrb	r3, [r3, #4]
			printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3],
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	9200      	str	r2, [sp, #0]
 8005f22:	4623      	mov	r3, r4
 8005f24:	4602      	mov	r2, r0
 8005f26:	483d      	ldr	r0, [pc, #244]	; (800601c <SelecMode+0x2a0>)
 8005f28:	f005 fe74 	bl	800bc14 <iprintf>

			//在LCD中显示按键信息
			ShowMode(key, i);
 8005f2c:	7dba      	ldrb	r2, [r7, #22]
 8005f2e:	7d3b      	ldrb	r3, [r7, #20]
 8005f30:	4611      	mov	r1, r2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fa0e 	bl	8005354 <ShowMode>

			continue;
 8005f38:	e057      	b.n	8005fea <SelecMode+0x26e>
		} else if (key == DETER) {
 8005f3a:	7d3b      	ldrb	r3, [r7, #20]
 8005f3c:	2b0d      	cmp	r3, #13
 8005f3e:	d109      	bne.n	8005f54 <SelecMode+0x1d8>
			HAL_TIM_Base_Start(&htim5); //按下确定键后开始计时
 8005f40:	4831      	ldr	r0, [pc, #196]	; (8006008 <SelecMode+0x28c>)
 8005f42:	f003 fdb9 	bl	8009ab8 <HAL_TIM_Base_Start>
			PID_Reset(&pid_X);		   //并重置PID信息
 8005f46:	4831      	ldr	r0, [pc, #196]	; (800600c <SelecMode+0x290>)
 8005f48:	f7fe fef1 	bl	8004d2e <PID_Reset>
			PID_Reset(&pid_Y);
 8005f4c:	4830      	ldr	r0, [pc, #192]	; (8006010 <SelecMode+0x294>)
 8005f4e:	f7fe feee 	bl	8004d2e <PID_Reset>
			break;
 8005f52:	e051      	b.n	8005ff8 <SelecMode+0x27c>
		} else if (key == RESET) {
 8005f54:	7d3b      	ldrb	r3, [r7, #20]
 8005f56:	2b0f      	cmp	r3, #15
 8005f58:	d11e      	bne.n	8005f98 <SelecMode+0x21c>
			for (i = 0; i <= 4; i++) {		   //按下复位键后，将模式缓存区中的信息清零
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	75bb      	strb	r3, [r7, #22]
 8005f5e:	e006      	b.n	8005f6e <SelecMode+0x1f2>
				Mode[i] = 0;
 8005f60:	7dbb      	ldrb	r3, [r7, #22]
 8005f62:	4a27      	ldr	r2, [pc, #156]	; (8006000 <SelecMode+0x284>)
 8005f64:	2100      	movs	r1, #0
 8005f66:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i <= 4; i++) {		   //按下复位键后，将模式缓存区中的信息清零
 8005f68:	7dbb      	ldrb	r3, [r7, #22]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	75bb      	strb	r3, [r7, #22]
 8005f6e:	7dbb      	ldrb	r3, [r7, #22]
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d9f5      	bls.n	8005f60 <SelecMode+0x1e4>
			}
			LCD_Fill(30, 700, 400, 750, WHITE);
 8005f74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	f240 23ee 	movw	r3, #750	; 0x2ee
 8005f7e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005f82:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005f86:	201e      	movs	r0, #30
 8005f88:	f7fe f940 	bl	800420c <LCD_Fill>
			i = -1;		   //i=-1,进入下一个循环后，会自动加一，即从0重新开始
 8005f8c:	23ff      	movs	r3, #255	; 0xff
 8005f8e:	75bb      	strb	r3, [r7, #22]
			printf("复位\r\n");
 8005f90:	4823      	ldr	r0, [pc, #140]	; (8006020 <SelecMode+0x2a4>)
 8005f92:	f005 fec5 	bl	800bd20 <puts>
			continue;
 8005f96:	e028      	b.n	8005fea <SelecMode+0x26e>
		}

		//若按下CANCEL键，则取消以上输入，并将模式缓存区的数据恢复
		if (key == CANCEL) {
 8005f98:	7d3b      	ldrb	r3, [r7, #20]
 8005f9a:	2b10      	cmp	r3, #16
 8005f9c:	d11f      	bne.n	8005fde <SelecMode+0x262>
			if (isInit == 0) {
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d115      	bne.n	8005fd0 <SelecMode+0x254>
				for (uint8_t i = 0; i < 6; i++) { //恢复模式缓存区原本的信息
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	757b      	strb	r3, [r7, #21]
 8005fa8:	e00b      	b.n	8005fc2 <SelecMode+0x246>
					Mode[i] = ModeBuffer[i];
 8005faa:	7d7a      	ldrb	r2, [r7, #21]
 8005fac:	7d7b      	ldrb	r3, [r7, #21]
 8005fae:	f107 0118 	add.w	r1, r7, #24
 8005fb2:	440a      	add	r2, r1
 8005fb4:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8005fb8:	4a11      	ldr	r2, [pc, #68]	; (8006000 <SelecMode+0x284>)
 8005fba:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < 6; i++) { //恢复模式缓存区原本的信息
 8005fbc:	7d7b      	ldrb	r3, [r7, #21]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	757b      	strb	r3, [r7, #21]
 8005fc2:	7d7b      	ldrb	r3, [r7, #21]
 8005fc4:	2b05      	cmp	r3, #5
 8005fc6:	d9f0      	bls.n	8005faa <SelecMode+0x22e>
				}
				HAL_TIM_Base_Start(&htim5); //重新开始计时
 8005fc8:	480f      	ldr	r0, [pc, #60]	; (8006008 <SelecMode+0x28c>)
 8005fca:	f003 fd75 	bl	8009ab8 <HAL_TIM_Base_Start>
				return;
 8005fce:	e013      	b.n	8005ff8 <SelecMode+0x27c>
			} else {
				printf("你输入的格式不符合要求，初次设置模式，不能使用取消键!\r\n");
 8005fd0:	4814      	ldr	r0, [pc, #80]	; (8006024 <SelecMode+0x2a8>)
 8005fd2:	f005 fea5 	bl	800bd20 <puts>
				i -= 1; //在初始化选择模式时，不能使用取消键
 8005fd6:	7dbb      	ldrb	r3, [r7, #22]
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	75bb      	strb	r3, [r7, #22]
 8005fdc:	e005      	b.n	8005fea <SelecMode+0x26e>
			}
		} else {
			printf("你输入的格式不符合要求，请输入数字按键!\r\n");
 8005fde:	4812      	ldr	r0, [pc, #72]	; (8006028 <SelecMode+0x2ac>)
 8005fe0:	f005 fe9e 	bl	800bd20 <puts>
			i -= 1;
 8005fe4:	7dbb      	ldrb	r3, [r7, #22]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	75bb      	strb	r3, [r7, #22]
	for (uint8_t i = 0; i < 6; i++) {
 8005fea:	7dbb      	ldrb	r3, [r7, #22]
 8005fec:	3301      	adds	r3, #1
 8005fee:	75bb      	strb	r3, [r7, #22]
 8005ff0:	7dbb      	ldrb	r3, [r7, #22]
 8005ff2:	2b05      	cmp	r3, #5
 8005ff4:	f67f aee3 	bls.w	8005dbe <SelecMode+0x42>
		}
	}
}
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd90      	pop	{r4, r7, pc}
 8005ffe:	bf00      	nop
 8006000:	200002a8 	.word	0x200002a8
 8006004:	0800f674 	.word	0x0800f674
 8006008:	200004ac 	.word	0x200004ac
 800600c:	20000368 	.word	0x20000368
 8006010:	20000324 	.word	0x20000324
 8006014:	0800f6cc 	.word	0x0800f6cc
 8006018:	0800f708 	.word	0x0800f708
 800601c:	0800f740 	.word	0x0800f740
 8006020:	0800f758 	.word	0x0800f758
 8006024:	0800f760 	.word	0x0800f760
 8006028:	0800f7b4 	.word	0x0800f7b4

0800602c <app_main_init>:

//初始化函数
void app_main_init(void) {
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
	//LCD初始化
	TFTLCD_Init();
 8006030:	f7fb feca 	bl	8001dc8 <TFTLCD_Init>
	LCD_Clear(WHITE);
 8006034:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006038:	f7fe f8ba 	bl	80041b0 <LCD_Clear>
	POINT_COLOR = BLACK;
 800603c:	4b10      	ldr	r3, [pc, #64]	; (8006080 <app_main_init+0x54>)
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]
//	//MPU6050初始化,判断MPU6050是否正常连接
//	while (MPU6050_Init(&hi2c1) == 1)
//		;

	//PCA9685初始化,将通道一和通道二(本次需要使用这两个通道)的角度初始化为0
	PCA9685_Init(&hi2c1);
 8006042:	4810      	ldr	r0, [pc, #64]	; (8006084 <app_main_init+0x58>)
 8006044:	f7fe fd0c 	bl	8004a60 <PCA9685_Init>
	PCA9685_SetServoAngle(0, 90);
 8006048:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8006088 <app_main_init+0x5c>
 800604c:	2000      	movs	r0, #0
 800604e:	f7fe fcab 	bl	80049a8 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, 90);
 8006052:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8006088 <app_main_init+0x5c>
 8006056:	2001      	movs	r0, #1
 8006058:	f7fe fca6 	bl	80049a8 <PCA9685_SetServoAngle>

	//显示信息
	ShowString();
 800605c:	f7fe ffd0 	bl	8005000 <ShowString>
	//选择模式
	SelecMode(1);
 8006060:	2001      	movs	r0, #1
 8006062:	f7ff fe8b 	bl	8005d7c <SelecMode>

	//PID初始化, 并设定预设球位置
	PID_Init(&pid_X);
 8006066:	4809      	ldr	r0, [pc, #36]	; (800608c <app_main_init+0x60>)
 8006068:	f7fe fd10 	bl	8004a8c <PID_Init>
	PID_Init(&pid_Y);
 800606c:	4808      	ldr	r0, [pc, #32]	; (8006090 <app_main_init+0x64>)
 800606e:	f7fe fd0d 	bl	8004a8c <PID_Init>

	HAL_Delay(500);   //延时0.5s用于舵机调整角度
 8006072:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006076:	f000 ffad 	bl	8006fd4 <HAL_Delay>
}
 800607a:	bf00      	nop
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000000 	.word	0x20000000
 8006084:	20000458 	.word	0x20000458
 8006088:	42b40000 	.word	0x42b40000
 800608c:	20000368 	.word	0x20000368
 8006090:	20000324 	.word	0x20000324

08006094 <app_main>:

//主程序函数
void app_main(void) {
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0
	if (Mode[0] == STABLE) {
 8006098:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <app_main+0x30>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b04      	cmp	r3, #4
 800609e:	d102      	bne.n	80060a6 <app_main+0x12>
		ModeStable();
 80060a0:	f7ff fc68 	bl	8005974 <ModeStable>
//	usart1_report_imu(MPU6050.Accel_X_RAW, MPU6050.Accel_Y_RAW,
//			MPU6050.Accel_Z_RAW, MPU6050.Gyro_X_RAW, MPU6050.Gyro_Y_RAW,
//			MPU6050.Gyro_Z_RAW, (float) MPU6050.KalmanAngleX * 100,
//			(float) MPU6050.KalmanAngleY * 100, 0);
	//	print("\r\nKalmanAngleX:%.2f\r\nKalmanAngleY:%.2f\r\n", MPU6050.KalmanAngleX, MPU6050.KalmanAngleY);
}
 80060a4:	e00c      	b.n	80060c0 <app_main+0x2c>
	} else if (Mode[0] == MOVE) {
 80060a6:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <app_main+0x30>)
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2b08      	cmp	r3, #8
 80060ac:	d102      	bne.n	80060b4 <app_main+0x20>
		ModeMove();
 80060ae:	f7ff fcb9 	bl	8005a24 <ModeMove>
}
 80060b2:	e005      	b.n	80060c0 <app_main+0x2c>
	} else if (Mode[0] == ROUND) {
 80060b4:	4b03      	ldr	r3, [pc, #12]	; (80060c4 <app_main+0x30>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b0c      	cmp	r3, #12
 80060ba:	d101      	bne.n	80060c0 <app_main+0x2c>
		ModeRound();
 80060bc:	f7ff fdac 	bl	8005c18 <ModeRound>
}
 80060c0:	bf00      	nop
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	200002a8 	.word	0x200002a8

080060c8 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 80060d0:	bf00      	nop
 80060d2:	4b08      	ldr	r3, [pc, #32]	; (80060f4 <__io_putchar+0x2c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0f9      	beq.n	80060d2 <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <__io_putchar+0x2c>)
 80060e4:	605a      	str	r2, [r3, #4]

	//  while ((USART2->SR & 0X40) == 0) {
	//  }; //循环发送,直到发送完毕
	//  USART2->DR = (uint8_t) ch;

	return ch;
 80060e6:	687b      	ldr	r3, [r7, #4]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	40011000 	.word	0x40011000

080060f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80060fe:	2300      	movs	r3, #0
 8006100:	607b      	str	r3, [r7, #4]
 8006102:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <MX_DMA_Init+0x3c>)
 8006104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006106:	4a0b      	ldr	r2, [pc, #44]	; (8006134 <MX_DMA_Init+0x3c>)
 8006108:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800610c:	6313      	str	r3, [r2, #48]	; 0x30
 800610e:	4b09      	ldr	r3, [pc, #36]	; (8006134 <MX_DMA_Init+0x3c>)
 8006110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006116:	607b      	str	r3, [r7, #4]
 8006118:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800611a:	2200      	movs	r2, #0
 800611c:	2100      	movs	r1, #0
 800611e:	203a      	movs	r0, #58	; 0x3a
 8006120:	f001 f857 	bl	80071d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006124:	203a      	movs	r0, #58	; 0x3a
 8006126:	f001 f870 	bl	800720a <HAL_NVIC_EnableIRQ>

}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	40023800 	.word	0x40023800

08006138 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08e      	sub	sp, #56	; 0x38
 800613c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800613e:	f107 031c 	add.w	r3, r7, #28
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	605a      	str	r2, [r3, #4]
 8006148:	609a      	str	r2, [r3, #8]
 800614a:	60da      	str	r2, [r3, #12]
 800614c:	611a      	str	r2, [r3, #16]
 800614e:	615a      	str	r2, [r3, #20]
 8006150:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8006152:	463b      	mov	r3, r7
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	605a      	str	r2, [r3, #4]
 800615a:	609a      	str	r2, [r3, #8]
 800615c:	60da      	str	r2, [r3, #12]
 800615e:	611a      	str	r2, [r3, #16]
 8006160:	615a      	str	r2, [r3, #20]
 8006162:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8006164:	4b2f      	ldr	r3, [pc, #188]	; (8006224 <MX_FSMC_Init+0xec>)
 8006166:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800616a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800616c:	4b2d      	ldr	r3, [pc, #180]	; (8006224 <MX_FSMC_Init+0xec>)
 800616e:	4a2e      	ldr	r2, [pc, #184]	; (8006228 <MX_FSMC_Init+0xf0>)
 8006170:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 8006172:	4b2c      	ldr	r3, [pc, #176]	; (8006224 <MX_FSMC_Init+0xec>)
 8006174:	2206      	movs	r2, #6
 8006176:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8006178:	4b2a      	ldr	r3, [pc, #168]	; (8006224 <MX_FSMC_Init+0xec>)
 800617a:	2200      	movs	r2, #0
 800617c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800617e:	4b29      	ldr	r3, [pc, #164]	; (8006224 <MX_FSMC_Init+0xec>)
 8006180:	2200      	movs	r2, #0
 8006182:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8006184:	4b27      	ldr	r3, [pc, #156]	; (8006224 <MX_FSMC_Init+0xec>)
 8006186:	2210      	movs	r2, #16
 8006188:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800618a:	4b26      	ldr	r3, [pc, #152]	; (8006224 <MX_FSMC_Init+0xec>)
 800618c:	2200      	movs	r2, #0
 800618e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8006190:	4b24      	ldr	r3, [pc, #144]	; (8006224 <MX_FSMC_Init+0xec>)
 8006192:	2200      	movs	r2, #0
 8006194:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8006196:	4b23      	ldr	r3, [pc, #140]	; (8006224 <MX_FSMC_Init+0xec>)
 8006198:	2200      	movs	r2, #0
 800619a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800619c:	4b21      	ldr	r3, [pc, #132]	; (8006224 <MX_FSMC_Init+0xec>)
 800619e:	2200      	movs	r2, #0
 80061a0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80061a2:	4b20      	ldr	r3, [pc, #128]	; (8006224 <MX_FSMC_Init+0xec>)
 80061a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061a8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80061aa:	4b1e      	ldr	r3, [pc, #120]	; (8006224 <MX_FSMC_Init+0xec>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80061b0:	4b1c      	ldr	r3, [pc, #112]	; (8006224 <MX_FSMC_Init+0xec>)
 80061b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061b6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80061b8:	4b1a      	ldr	r3, [pc, #104]	; (8006224 <MX_FSMC_Init+0xec>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80061be:	4b19      	ldr	r3, [pc, #100]	; (8006224 <MX_FSMC_Init+0xec>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80061c4:	4b17      	ldr	r3, [pc, #92]	; (8006224 <MX_FSMC_Init+0xec>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 80061ca:	2301      	movs	r3, #1
 80061cc:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80061ce:	230f      	movs	r3, #15
 80061d0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 15;
 80061d2:	230f      	movs	r3, #15
 80061d4:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 80061d6:	230f      	movs	r3, #15
 80061d8:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80061da:	2310      	movs	r3, #16
 80061dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80061de:	2311      	movs	r3, #17
 80061e0:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80061e2:	2300      	movs	r3, #0
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 1;
 80061e6:	2301      	movs	r3, #1
 80061e8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80061ea:	230f      	movs	r3, #15
 80061ec:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 15;
 80061ee:	230f      	movs	r3, #15
 80061f0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 80061f2:	230f      	movs	r3, #15
 80061f4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80061f6:	2310      	movs	r3, #16
 80061f8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80061fa:	2311      	movs	r3, #17
 80061fc:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80061fe:	2300      	movs	r3, #0
 8006200:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8006202:	463a      	mov	r2, r7
 8006204:	f107 031c 	add.w	r3, r7, #28
 8006208:	4619      	mov	r1, r3
 800620a:	4806      	ldr	r0, [pc, #24]	; (8006224 <MX_FSMC_Init+0xec>)
 800620c:	f003 fbc0 	bl	8009990 <HAL_SRAM_Init>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8006216:	f000 fa43 	bl	80066a0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800621a:	bf00      	nop
 800621c:	3738      	adds	r7, #56	; 0x38
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	20000408 	.word	0x20000408
 8006228:	a0000104 	.word	0xa0000104

0800622c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006232:	1d3b      	adds	r3, r7, #4
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	605a      	str	r2, [r3, #4]
 800623a:	609a      	str	r2, [r3, #8]
 800623c:	60da      	str	r2, [r3, #12]
 800623e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8006240:	4b2c      	ldr	r3, [pc, #176]	; (80062f4 <HAL_FSMC_MspInit+0xc8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d151      	bne.n	80062ec <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8006248:	4b2a      	ldr	r3, [pc, #168]	; (80062f4 <HAL_FSMC_MspInit+0xc8>)
 800624a:	2201      	movs	r2, #1
 800624c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800624e:	2300      	movs	r3, #0
 8006250:	603b      	str	r3, [r7, #0]
 8006252:	4b29      	ldr	r3, [pc, #164]	; (80062f8 <HAL_FSMC_MspInit+0xcc>)
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	4a28      	ldr	r2, [pc, #160]	; (80062f8 <HAL_FSMC_MspInit+0xcc>)
 8006258:	f043 0301 	orr.w	r3, r3, #1
 800625c:	6393      	str	r3, [r2, #56]	; 0x38
 800625e:	4b26      	ldr	r3, [pc, #152]	; (80062f8 <HAL_FSMC_MspInit+0xcc>)
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800626a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800626e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006270:	2302      	movs	r3, #2
 8006272:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006278:	2303      	movs	r3, #3
 800627a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800627c:	230c      	movs	r3, #12
 800627e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006280:	1d3b      	adds	r3, r7, #4
 8006282:	4619      	mov	r1, r3
 8006284:	481d      	ldr	r0, [pc, #116]	; (80062fc <HAL_FSMC_MspInit+0xd0>)
 8006286:	f001 fbdd 	bl	8007a44 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800628a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800628e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006290:	2302      	movs	r3, #2
 8006292:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006298:	2303      	movs	r3, #3
 800629a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800629c:	230c      	movs	r3, #12
 800629e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80062a0:	1d3b      	adds	r3, r7, #4
 80062a2:	4619      	mov	r1, r3
 80062a4:	4816      	ldr	r0, [pc, #88]	; (8006300 <HAL_FSMC_MspInit+0xd4>)
 80062a6:	f001 fbcd 	bl	8007a44 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80062aa:	f24c 7333 	movw	r3, #50995	; 0xc733
 80062ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b0:	2302      	movs	r3, #2
 80062b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062b8:	2303      	movs	r3, #3
 80062ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80062bc:	230c      	movs	r3, #12
 80062be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062c0:	1d3b      	adds	r3, r7, #4
 80062c2:	4619      	mov	r1, r3
 80062c4:	480f      	ldr	r0, [pc, #60]	; (8006304 <HAL_FSMC_MspInit+0xd8>)
 80062c6:	f001 fbbd 	bl	8007a44 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80062ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062d0:	2302      	movs	r3, #2
 80062d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d4:	2300      	movs	r3, #0
 80062d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062d8:	2303      	movs	r3, #3
 80062da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80062dc:	230c      	movs	r3, #12
 80062de:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80062e0:	1d3b      	adds	r3, r7, #4
 80062e2:	4619      	mov	r1, r3
 80062e4:	4808      	ldr	r0, [pc, #32]	; (8006308 <HAL_FSMC_MspInit+0xdc>)
 80062e6:	f001 fbad 	bl	8007a44 <HAL_GPIO_Init>
 80062ea:	e000      	b.n	80062ee <HAL_FSMC_MspInit+0xc2>
    return;
 80062ec:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	200002b0 	.word	0x200002b0
 80062f8:	40023800 	.word	0x40023800
 80062fc:	40021400 	.word	0x40021400
 8006300:	40021000 	.word	0x40021000
 8006304:	40020c00 	.word	0x40020c00
 8006308:	40021800 	.word	0x40021800

0800630c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8006314:	f7ff ff8a 	bl	800622c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8006318:	bf00      	nop
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b08c      	sub	sp, #48	; 0x30
 8006324:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006326:	f107 031c 	add.w	r3, r7, #28
 800632a:	2200      	movs	r2, #0
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	605a      	str	r2, [r3, #4]
 8006330:	609a      	str	r2, [r3, #8]
 8006332:	60da      	str	r2, [r3, #12]
 8006334:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006336:	2300      	movs	r3, #0
 8006338:	61bb      	str	r3, [r7, #24]
 800633a:	4b57      	ldr	r3, [pc, #348]	; (8006498 <MX_GPIO_Init+0x178>)
 800633c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633e:	4a56      	ldr	r2, [pc, #344]	; (8006498 <MX_GPIO_Init+0x178>)
 8006340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006344:	6313      	str	r3, [r2, #48]	; 0x30
 8006346:	4b54      	ldr	r3, [pc, #336]	; (8006498 <MX_GPIO_Init+0x178>)
 8006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634e:	61bb      	str	r3, [r7, #24]
 8006350:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006352:	2300      	movs	r3, #0
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	4b50      	ldr	r3, [pc, #320]	; (8006498 <MX_GPIO_Init+0x178>)
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	4a4f      	ldr	r2, [pc, #316]	; (8006498 <MX_GPIO_Init+0x178>)
 800635c:	f043 0301 	orr.w	r3, r3, #1
 8006360:	6313      	str	r3, [r2, #48]	; 0x30
 8006362:	4b4d      	ldr	r3, [pc, #308]	; (8006498 <MX_GPIO_Init+0x178>)
 8006364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800636e:	2300      	movs	r3, #0
 8006370:	613b      	str	r3, [r7, #16]
 8006372:	4b49      	ldr	r3, [pc, #292]	; (8006498 <MX_GPIO_Init+0x178>)
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	4a48      	ldr	r2, [pc, #288]	; (8006498 <MX_GPIO_Init+0x178>)
 8006378:	f043 0320 	orr.w	r3, r3, #32
 800637c:	6313      	str	r3, [r2, #48]	; 0x30
 800637e:	4b46      	ldr	r3, [pc, #280]	; (8006498 <MX_GPIO_Init+0x178>)
 8006380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	613b      	str	r3, [r7, #16]
 8006388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	4b42      	ldr	r3, [pc, #264]	; (8006498 <MX_GPIO_Init+0x178>)
 8006390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006392:	4a41      	ldr	r2, [pc, #260]	; (8006498 <MX_GPIO_Init+0x178>)
 8006394:	f043 0310 	orr.w	r3, r3, #16
 8006398:	6313      	str	r3, [r2, #48]	; 0x30
 800639a:	4b3f      	ldr	r3, [pc, #252]	; (8006498 <MX_GPIO_Init+0x178>)
 800639c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639e:	f003 0310 	and.w	r3, r3, #16
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80063a6:	2300      	movs	r3, #0
 80063a8:	60bb      	str	r3, [r7, #8]
 80063aa:	4b3b      	ldr	r3, [pc, #236]	; (8006498 <MX_GPIO_Init+0x178>)
 80063ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ae:	4a3a      	ldr	r2, [pc, #232]	; (8006498 <MX_GPIO_Init+0x178>)
 80063b0:	f043 0302 	orr.w	r3, r3, #2
 80063b4:	6313      	str	r3, [r2, #48]	; 0x30
 80063b6:	4b38      	ldr	r3, [pc, #224]	; (8006498 <MX_GPIO_Init+0x178>)
 80063b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	60bb      	str	r3, [r7, #8]
 80063c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80063c2:	2300      	movs	r3, #0
 80063c4:	607b      	str	r3, [r7, #4]
 80063c6:	4b34      	ldr	r3, [pc, #208]	; (8006498 <MX_GPIO_Init+0x178>)
 80063c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ca:	4a33      	ldr	r2, [pc, #204]	; (8006498 <MX_GPIO_Init+0x178>)
 80063cc:	f043 0308 	orr.w	r3, r3, #8
 80063d0:	6313      	str	r3, [r2, #48]	; 0x30
 80063d2:	4b31      	ldr	r3, [pc, #196]	; (8006498 <MX_GPIO_Init+0x178>)
 80063d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	607b      	str	r3, [r7, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80063de:	2300      	movs	r3, #0
 80063e0:	603b      	str	r3, [r7, #0]
 80063e2:	4b2d      	ldr	r3, [pc, #180]	; (8006498 <MX_GPIO_Init+0x178>)
 80063e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e6:	4a2c      	ldr	r2, [pc, #176]	; (8006498 <MX_GPIO_Init+0x178>)
 80063e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ec:	6313      	str	r3, [r2, #48]	; 0x30
 80063ee:	4b2a      	ldr	r3, [pc, #168]	; (8006498 <MX_GPIO_Init+0x178>)
 80063f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80063fa:	2200      	movs	r2, #0
 80063fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006400:	4826      	ldr	r0, [pc, #152]	; (800649c <MX_GPIO_Init+0x17c>)
 8006402:	f001 fcd3 	bl	8007dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin, GPIO_PIN_RESET);
 8006406:	2200      	movs	r2, #0
 8006408:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 800640c:	4824      	ldr	r0, [pc, #144]	; (80064a0 <MX_GPIO_Init+0x180>)
 800640e:	f001 fccd 	bl	8007dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KY_UP_Pin;
 8006412:	2301      	movs	r3, #1
 8006414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006416:	4b23      	ldr	r3, [pc, #140]	; (80064a4 <MX_GPIO_Init+0x184>)
 8006418:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800641a:	2302      	movs	r3, #2
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KY_UP_GPIO_Port, &GPIO_InitStruct);
 800641e:	f107 031c 	add.w	r3, r7, #28
 8006422:	4619      	mov	r1, r3
 8006424:	4820      	ldr	r0, [pc, #128]	; (80064a8 <MX_GPIO_Init+0x188>)
 8006426:	f001 fb0d 	bl	8007a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800642a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800642e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006430:	2301      	movs	r3, #1
 8006432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006434:	2301      	movs	r3, #1
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006438:	2302      	movs	r3, #2
 800643a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800643c:	f107 031c 	add.w	r3, r7, #28
 8006440:	4619      	mov	r1, r3
 8006442:	4816      	ldr	r0, [pc, #88]	; (800649c <MX_GPIO_Init+0x17c>)
 8006444:	f001 fafe 	bl	8007a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = Row4_Pin|Row3_Pin|Row2_Pin|Row1_Pin;
 8006448:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800644c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800644e:	2300      	movs	r3, #0
 8006450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006452:	2301      	movs	r3, #1
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006456:	f107 031c 	add.w	r3, r7, #28
 800645a:	4619      	mov	r1, r3
 800645c:	4810      	ldr	r0, [pc, #64]	; (80064a0 <MX_GPIO_Init+0x180>)
 800645e:	f001 faf1 	bl	8007a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin;
 8006462:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 8006466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006468:	2301      	movs	r3, #1
 800646a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800646c:	2302      	movs	r3, #2
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006470:	2302      	movs	r3, #2
 8006472:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006474:	f107 031c 	add.w	r3, r7, #28
 8006478:	4619      	mov	r1, r3
 800647a:	4809      	ldr	r0, [pc, #36]	; (80064a0 <MX_GPIO_Init+0x180>)
 800647c:	f001 fae2 	bl	8007a44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8006480:	2200      	movs	r2, #0
 8006482:	2101      	movs	r1, #1
 8006484:	2006      	movs	r0, #6
 8006486:	f000 fea4 	bl	80071d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800648a:	2006      	movs	r0, #6
 800648c:	f000 febd 	bl	800720a <HAL_NVIC_EnableIRQ>

}
 8006490:	bf00      	nop
 8006492:	3730      	adds	r7, #48	; 0x30
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	40023800 	.word	0x40023800
 800649c:	40020400 	.word	0x40020400
 80064a0:	40021800 	.word	0x40021800
 80064a4:	10110000 	.word	0x10110000
 80064a8:	40020000 	.word	0x40020000

080064ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80064b0:	4b12      	ldr	r3, [pc, #72]	; (80064fc <MX_I2C1_Init+0x50>)
 80064b2:	4a13      	ldr	r2, [pc, #76]	; (8006500 <MX_I2C1_Init+0x54>)
 80064b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80064b6:	4b11      	ldr	r3, [pc, #68]	; (80064fc <MX_I2C1_Init+0x50>)
 80064b8:	4a12      	ldr	r2, [pc, #72]	; (8006504 <MX_I2C1_Init+0x58>)
 80064ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80064bc:	4b0f      	ldr	r3, [pc, #60]	; (80064fc <MX_I2C1_Init+0x50>)
 80064be:	2200      	movs	r2, #0
 80064c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80064c2:	4b0e      	ldr	r3, [pc, #56]	; (80064fc <MX_I2C1_Init+0x50>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80064c8:	4b0c      	ldr	r3, [pc, #48]	; (80064fc <MX_I2C1_Init+0x50>)
 80064ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80064d0:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <MX_I2C1_Init+0x50>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80064d6:	4b09      	ldr	r3, [pc, #36]	; (80064fc <MX_I2C1_Init+0x50>)
 80064d8:	2200      	movs	r2, #0
 80064da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80064dc:	4b07      	ldr	r3, [pc, #28]	; (80064fc <MX_I2C1_Init+0x50>)
 80064de:	2240      	movs	r2, #64	; 0x40
 80064e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80064e2:	4b06      	ldr	r3, [pc, #24]	; (80064fc <MX_I2C1_Init+0x50>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80064e8:	4804      	ldr	r0, [pc, #16]	; (80064fc <MX_I2C1_Init+0x50>)
 80064ea:	f001 fc9d 	bl	8007e28 <HAL_I2C_Init>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80064f4:	f000 f8d4 	bl	80066a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80064f8:	bf00      	nop
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	20000458 	.word	0x20000458
 8006500:	40005400 	.word	0x40005400
 8006504:	00061a80 	.word	0x00061a80

08006508 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08a      	sub	sp, #40	; 0x28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006510:	f107 0314 	add.w	r3, r7, #20
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	605a      	str	r2, [r3, #4]
 800651a:	609a      	str	r2, [r3, #8]
 800651c:	60da      	str	r2, [r3, #12]
 800651e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a19      	ldr	r2, [pc, #100]	; (800658c <HAL_I2C_MspInit+0x84>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d12b      	bne.n	8006582 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800652a:	2300      	movs	r3, #0
 800652c:	613b      	str	r3, [r7, #16]
 800652e:	4b18      	ldr	r3, [pc, #96]	; (8006590 <HAL_I2C_MspInit+0x88>)
 8006530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006532:	4a17      	ldr	r2, [pc, #92]	; (8006590 <HAL_I2C_MspInit+0x88>)
 8006534:	f043 0302 	orr.w	r3, r3, #2
 8006538:	6313      	str	r3, [r2, #48]	; 0x30
 800653a:	4b15      	ldr	r3, [pc, #84]	; (8006590 <HAL_I2C_MspInit+0x88>)
 800653c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006546:	23c0      	movs	r3, #192	; 0xc0
 8006548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800654a:	2312      	movs	r3, #18
 800654c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800654e:	2301      	movs	r3, #1
 8006550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006552:	2303      	movs	r3, #3
 8006554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006556:	2304      	movs	r3, #4
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800655a:	f107 0314 	add.w	r3, r7, #20
 800655e:	4619      	mov	r1, r3
 8006560:	480c      	ldr	r0, [pc, #48]	; (8006594 <HAL_I2C_MspInit+0x8c>)
 8006562:	f001 fa6f 	bl	8007a44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006566:	2300      	movs	r3, #0
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	4b09      	ldr	r3, [pc, #36]	; (8006590 <HAL_I2C_MspInit+0x88>)
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	4a08      	ldr	r2, [pc, #32]	; (8006590 <HAL_I2C_MspInit+0x88>)
 8006570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006574:	6413      	str	r3, [r2, #64]	; 0x40
 8006576:	4b06      	ldr	r3, [pc, #24]	; (8006590 <HAL_I2C_MspInit+0x88>)
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006582:	bf00      	nop
 8006584:	3728      	adds	r7, #40	; 0x28
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	40005400 	.word	0x40005400
 8006590:	40023800 	.word	0x40023800
 8006594:	40020400 	.word	0x40020400

08006598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800659c:	f000 fca8 	bl	8006ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80065a0:	f000 f814 	bl	80065cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80065a4:	f7ff febc 	bl	8006320 <MX_GPIO_Init>
  MX_DMA_Init();
 80065a8:	f7ff fda6 	bl	80060f8 <MX_DMA_Init>
  MX_FSMC_Init();
 80065ac:	f7ff fdc4 	bl	8006138 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 80065b0:	f000 faf6 	bl	8006ba0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80065b4:	f7ff ff7a 	bl	80064ac <MX_I2C1_Init>
  MX_TIM2_Init();
 80065b8:	f000 fa1a 	bl	80069f0 <MX_TIM2_Init>
  MX_TIM5_Init();
 80065bc:	f000 fa66 	bl	8006a8c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	app_main_init();
 80065c0:	f7ff fd34 	bl	800602c <app_main_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		app_main();
 80065c4:	f7ff fd66 	bl	8006094 <app_main>
 80065c8:	e7fc      	b.n	80065c4 <main+0x2c>
	...

080065cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b094      	sub	sp, #80	; 0x50
 80065d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80065d2:	f107 0320 	add.w	r3, r7, #32
 80065d6:	2230      	movs	r2, #48	; 0x30
 80065d8:	2100      	movs	r1, #0
 80065da:	4618      	mov	r0, r3
 80065dc:	f004 fea8 	bl	800b330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80065e0:	f107 030c 	add.w	r3, r7, #12
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	605a      	str	r2, [r3, #4]
 80065ea:	609a      	str	r2, [r3, #8]
 80065ec:	60da      	str	r2, [r3, #12]
 80065ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80065f0:	2300      	movs	r3, #0
 80065f2:	60bb      	str	r3, [r7, #8]
 80065f4:	4b28      	ldr	r3, [pc, #160]	; (8006698 <SystemClock_Config+0xcc>)
 80065f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f8:	4a27      	ldr	r2, [pc, #156]	; (8006698 <SystemClock_Config+0xcc>)
 80065fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065fe:	6413      	str	r3, [r2, #64]	; 0x40
 8006600:	4b25      	ldr	r3, [pc, #148]	; (8006698 <SystemClock_Config+0xcc>)
 8006602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006608:	60bb      	str	r3, [r7, #8]
 800660a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800660c:	2300      	movs	r3, #0
 800660e:	607b      	str	r3, [r7, #4]
 8006610:	4b22      	ldr	r3, [pc, #136]	; (800669c <SystemClock_Config+0xd0>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a21      	ldr	r2, [pc, #132]	; (800669c <SystemClock_Config+0xd0>)
 8006616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	4b1f      	ldr	r3, [pc, #124]	; (800669c <SystemClock_Config+0xd0>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006624:	607b      	str	r3, [r7, #4]
 8006626:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006628:	2301      	movs	r3, #1
 800662a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800662c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006632:	2302      	movs	r3, #2
 8006634:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006636:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800663a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800663c:	2304      	movs	r3, #4
 800663e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006640:	23a8      	movs	r3, #168	; 0xa8
 8006642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006644:	2302      	movs	r3, #2
 8006646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006648:	2304      	movs	r3, #4
 800664a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800664c:	f107 0320 	add.w	r3, r7, #32
 8006650:	4618      	mov	r0, r3
 8006652:	f002 fd29 	bl	80090a8 <HAL_RCC_OscConfig>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800665c:	f000 f820 	bl	80066a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006660:	230f      	movs	r3, #15
 8006662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006664:	2302      	movs	r3, #2
 8006666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006668:	2300      	movs	r3, #0
 800666a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800666c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006678:	f107 030c 	add.w	r3, r7, #12
 800667c:	2105      	movs	r1, #5
 800667e:	4618      	mov	r0, r3
 8006680:	f002 ff8a 	bl	8009598 <HAL_RCC_ClockConfig>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800668a:	f000 f809 	bl	80066a0 <Error_Handler>
  }
}
 800668e:	bf00      	nop
 8006690:	3750      	adds	r7, #80	; 0x50
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	40023800 	.word	0x40023800
 800669c:	40007000 	.word	0x40007000

080066a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80066a0:	b480      	push	{r7}
 80066a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80066a4:	b672      	cpsid	i
}
 80066a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80066a8:	e7fe      	b.n	80066a8 <Error_Handler+0x8>
	...

080066ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066b2:	2300      	movs	r3, #0
 80066b4:	607b      	str	r3, [r7, #4]
 80066b6:	4b10      	ldr	r3, [pc, #64]	; (80066f8 <HAL_MspInit+0x4c>)
 80066b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ba:	4a0f      	ldr	r2, [pc, #60]	; (80066f8 <HAL_MspInit+0x4c>)
 80066bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066c0:	6453      	str	r3, [r2, #68]	; 0x44
 80066c2:	4b0d      	ldr	r3, [pc, #52]	; (80066f8 <HAL_MspInit+0x4c>)
 80066c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ca:	607b      	str	r3, [r7, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80066ce:	2300      	movs	r3, #0
 80066d0:	603b      	str	r3, [r7, #0]
 80066d2:	4b09      	ldr	r3, [pc, #36]	; (80066f8 <HAL_MspInit+0x4c>)
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	4a08      	ldr	r2, [pc, #32]	; (80066f8 <HAL_MspInit+0x4c>)
 80066d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066dc:	6413      	str	r3, [r2, #64]	; 0x40
 80066de:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <HAL_MspInit+0x4c>)
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	40023800 	.word	0x40023800

080066fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80066fc:	b480      	push	{r7}
 80066fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8006700:	e7fe      	b.n	8006700 <NMI_Handler+0x4>

08006702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006702:	b480      	push	{r7}
 8006704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006706:	e7fe      	b.n	8006706 <HardFault_Handler+0x4>

08006708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800670c:	e7fe      	b.n	800670c <MemManage_Handler+0x4>

0800670e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800670e:	b480      	push	{r7}
 8006710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006712:	e7fe      	b.n	8006712 <BusFault_Handler+0x4>

08006714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006718:	e7fe      	b.n	8006718 <UsageFault_Handler+0x4>

0800671a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800671a:	b480      	push	{r7}
 800671c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800671e:	bf00      	nop
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006728:	b480      	push	{r7}
 800672a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800672c:	bf00      	nop
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006736:	b480      	push	{r7}
 8006738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800673a:	bf00      	nop
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006748:	f000 fc24 	bl	8006f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800674c:	bf00      	nop
 800674e:	bd80      	pop	{r7, pc}

08006750 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006750:	b590      	push	{r4, r7, lr}
 8006752:	b083      	sub	sp, #12
 8006754:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8006756:	2001      	movs	r0, #1
 8006758:	f001 fb42 	bl	8007de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	HAL_Delay(20);
 800675c:	2014      	movs	r0, #20
 800675e:	f000 fc39 	bl	8006fd4 <HAL_Delay>
	if (KY_UP == GPIO_PIN_SET) {
 8006762:	2101      	movs	r1, #1
 8006764:	4820      	ldr	r0, [pc, #128]	; (80067e8 <EXTI0_IRQHandler+0x98>)
 8006766:	f001 fb09 	bl	8007d7c <HAL_GPIO_ReadPin>
 800676a:	4603      	mov	r3, r0
 800676c:	2b01      	cmp	r3, #1
 800676e:	d137      	bne.n	80067e0 <EXTI0_IRQHandler+0x90>
		printf("KY_UP按键按下。。。。。\r\n");
 8006770:	481e      	ldr	r0, [pc, #120]	; (80067ec <EXTI0_IRQHandler+0x9c>)
 8006772:	f005 fad5 	bl	800bd20 <puts>
		HAL_TIM_Base_Stop(&htim5);
 8006776:	481e      	ldr	r0, [pc, #120]	; (80067f0 <EXTI0_IRQHandler+0xa0>)
 8006778:	f003 fa06 	bl	8009b88 <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 800677c:	4b1c      	ldr	r3, [pc, #112]	; (80067f0 <EXTI0_IRQHandler+0xa0>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2200      	movs	r2, #0
 8006782:	625a      	str	r2, [r3, #36]	; 0x24
		LCD_Fill(30, 700, 400, 750, WHITE);
 8006784:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	f240 23ee 	movw	r3, #750	; 0x2ee
 800678e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006792:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8006796:	201e      	movs	r0, #30
 8006798:	f7fd fd38 	bl	800420c <LCD_Fill>
		//让舵机角度再次回到初始值
		PCA9685_SetServoAngle(0, 90);
 800679c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80067f4 <EXTI0_IRQHandler+0xa4>
 80067a0:	2000      	movs	r0, #0
 80067a2:	f7fe f901 	bl	80049a8 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(1, 90);
 80067a6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80067f4 <EXTI0_IRQHandler+0xa4>
 80067aa:	2001      	movs	r0, #1
 80067ac:	f7fe f8fc 	bl	80049a8 <PCA9685_SetServoAngle>

		//使用矩形键盘设置模式
		SelecMode(0);
 80067b0:	2000      	movs	r0, #0
 80067b2:	f7ff fae3 	bl	8005d7c <SelecMode>
		printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3], Mode[4]);
 80067b6:	4b10      	ldr	r3, [pc, #64]	; (80067f8 <EXTI0_IRQHandler+0xa8>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	4619      	mov	r1, r3
 80067bc:	4b0e      	ldr	r3, [pc, #56]	; (80067f8 <EXTI0_IRQHandler+0xa8>)
 80067be:	785b      	ldrb	r3, [r3, #1]
 80067c0:	4618      	mov	r0, r3
 80067c2:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <EXTI0_IRQHandler+0xa8>)
 80067c4:	789b      	ldrb	r3, [r3, #2]
 80067c6:	461c      	mov	r4, r3
 80067c8:	4b0b      	ldr	r3, [pc, #44]	; (80067f8 <EXTI0_IRQHandler+0xa8>)
 80067ca:	78db      	ldrb	r3, [r3, #3]
 80067cc:	461a      	mov	r2, r3
 80067ce:	4b0a      	ldr	r3, [pc, #40]	; (80067f8 <EXTI0_IRQHandler+0xa8>)
 80067d0:	791b      	ldrb	r3, [r3, #4]
 80067d2:	9301      	str	r3, [sp, #4]
 80067d4:	9200      	str	r2, [sp, #0]
 80067d6:	4623      	mov	r3, r4
 80067d8:	4602      	mov	r2, r0
 80067da:	4808      	ldr	r0, [pc, #32]	; (80067fc <EXTI0_IRQHandler+0xac>)
 80067dc:	f005 fa1a 	bl	800bc14 <iprintf>
	}
  /* USER CODE END EXTI0_IRQn 1 */
}
 80067e0:	bf00      	nop
 80067e2:	3704      	adds	r7, #4
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd90      	pop	{r4, r7, pc}
 80067e8:	40020000 	.word	0x40020000
 80067ec:	0800f7f0 	.word	0x0800f7f0
 80067f0:	200004ac 	.word	0x200004ac
 80067f4:	42b40000 	.word	0x42b40000
 80067f8:	200002a8 	.word	0x200002a8
 80067fc:	0800f814 	.word	0x0800f814

08006800 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006804:	4802      	ldr	r0, [pc, #8]	; (8006810 <TIM2_IRQHandler+0x10>)
 8006806:	f003 f9e6 	bl	8009bd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800680a:	bf00      	nop
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	200004f4 	.word	0x200004f4

08006814 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006818:	4803      	ldr	r0, [pc, #12]	; (8006828 <USART1_IRQHandler+0x14>)
 800681a:	f003 fe7d 	bl	800a518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	// 新添加的函数，用来处理串口空闲中断
	USER_UART_IRQHandler(&huart1);
 800681e:	4802      	ldr	r0, [pc, #8]	; (8006828 <USART1_IRQHandler+0x14>)
 8006820:	f000 fb10 	bl	8006e44 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8006824:	bf00      	nop
 8006826:	bd80      	pop	{r7, pc}
 8006828:	2000059c 	.word	0x2000059c

0800682c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006830:	4802      	ldr	r0, [pc, #8]	; (800683c <DMA2_Stream2_IRQHandler+0x10>)
 8006832:	f000 fe9d 	bl	8007570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006836:	bf00      	nop
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	2000053c 	.word	0x2000053c

08006840 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006840:	b480      	push	{r7}
 8006842:	af00      	add	r7, sp, #0
	return 1;
 8006844:	2301      	movs	r3, #1
}
 8006846:	4618      	mov	r0, r3
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <_kill>:

int _kill(int pid, int sig)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800685a:	f004 fd3f 	bl	800b2dc <__errno>
 800685e:	4603      	mov	r3, r0
 8006860:	2216      	movs	r2, #22
 8006862:	601a      	str	r2, [r3, #0]
	return -1;
 8006864:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006868:	4618      	mov	r0, r3
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <_exit>:

void _exit (int status)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006878:	f04f 31ff 	mov.w	r1, #4294967295
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7ff ffe7 	bl	8006850 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006882:	e7fe      	b.n	8006882 <_exit+0x12>

08006884 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006890:	2300      	movs	r3, #0
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	e00a      	b.n	80068ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006896:	f3af 8000 	nop.w
 800689a:	4601      	mov	r1, r0
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	60ba      	str	r2, [r7, #8]
 80068a2:	b2ca      	uxtb	r2, r1
 80068a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	3301      	adds	r3, #1
 80068aa:	617b      	str	r3, [r7, #20]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	dbf0      	blt.n	8006896 <_read+0x12>
	}

return len;
 80068b4:	687b      	ldr	r3, [r7, #4]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b086      	sub	sp, #24
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	60f8      	str	r0, [r7, #12]
 80068c6:	60b9      	str	r1, [r7, #8]
 80068c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	e009      	b.n	80068e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	60ba      	str	r2, [r7, #8]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff fbf5 	bl	80060c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	3301      	adds	r3, #1
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	dbf1      	blt.n	80068d0 <_write+0x12>
	}
	return len;
 80068ec:	687b      	ldr	r3, [r7, #4]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <_close>:

int _close(int file)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
	return -1;
 80068fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006902:	4618      	mov	r0, r3
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800691e:	605a      	str	r2, [r3, #4]
	return 0;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <_isatty>:

int _isatty(int file)
{
 800692e:	b480      	push	{r7}
 8006930:	b083      	sub	sp, #12
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
	return 1;
 8006936:	2301      	movs	r3, #1
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
	return 0;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
	...

08006960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006968:	4a14      	ldr	r2, [pc, #80]	; (80069bc <_sbrk+0x5c>)
 800696a:	4b15      	ldr	r3, [pc, #84]	; (80069c0 <_sbrk+0x60>)
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006974:	4b13      	ldr	r3, [pc, #76]	; (80069c4 <_sbrk+0x64>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d102      	bne.n	8006982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800697c:	4b11      	ldr	r3, [pc, #68]	; (80069c4 <_sbrk+0x64>)
 800697e:	4a12      	ldr	r2, [pc, #72]	; (80069c8 <_sbrk+0x68>)
 8006980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006982:	4b10      	ldr	r3, [pc, #64]	; (80069c4 <_sbrk+0x64>)
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4413      	add	r3, r2
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	429a      	cmp	r2, r3
 800698e:	d207      	bcs.n	80069a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006990:	f004 fca4 	bl	800b2dc <__errno>
 8006994:	4603      	mov	r3, r0
 8006996:	220c      	movs	r2, #12
 8006998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800699a:	f04f 33ff 	mov.w	r3, #4294967295
 800699e:	e009      	b.n	80069b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80069a0:	4b08      	ldr	r3, [pc, #32]	; (80069c4 <_sbrk+0x64>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80069a6:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <_sbrk+0x64>)
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4413      	add	r3, r2
 80069ae:	4a05      	ldr	r2, [pc, #20]	; (80069c4 <_sbrk+0x64>)
 80069b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80069b2:	68fb      	ldr	r3, [r7, #12]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	20020000 	.word	0x20020000
 80069c0:	00000400 	.word	0x00000400
 80069c4:	200002b4 	.word	0x200002b4
 80069c8:	200005f8 	.word	0x200005f8

080069cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80069d0:	4b06      	ldr	r3, [pc, #24]	; (80069ec <SystemInit+0x20>)
 80069d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d6:	4a05      	ldr	r2, [pc, #20]	; (80069ec <SystemInit+0x20>)
 80069d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80069e0:	bf00      	nop
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	e000ed00 	.word	0xe000ed00

080069f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80069f6:	f107 0308 	add.w	r3, r7, #8
 80069fa:	2200      	movs	r2, #0
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	605a      	str	r2, [r3, #4]
 8006a00:	609a      	str	r2, [r3, #8]
 8006a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a04:	463b      	mov	r3, r7
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006a0c:	4b1e      	ldr	r3, [pc, #120]	; (8006a88 <MX_TIM2_Init+0x98>)
 8006a0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006a12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8006a14:	4b1c      	ldr	r3, [pc, #112]	; (8006a88 <MX_TIM2_Init+0x98>)
 8006a16:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8006a1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a1c:	4b1a      	ldr	r3, [pc, #104]	; (8006a88 <MX_TIM2_Init+0x98>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8006a22:	4b19      	ldr	r3, [pc, #100]	; (8006a88 <MX_TIM2_Init+0x98>)
 8006a24:	f04f 32ff 	mov.w	r2, #4294967295
 8006a28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a2a:	4b17      	ldr	r3, [pc, #92]	; (8006a88 <MX_TIM2_Init+0x98>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a30:	4b15      	ldr	r3, [pc, #84]	; (8006a88 <MX_TIM2_Init+0x98>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006a36:	4814      	ldr	r0, [pc, #80]	; (8006a88 <MX_TIM2_Init+0x98>)
 8006a38:	f002 ffee 	bl	8009a18 <HAL_TIM_Base_Init>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006a42:	f7ff fe2d 	bl	80066a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006a4c:	f107 0308 	add.w	r3, r7, #8
 8006a50:	4619      	mov	r1, r3
 8006a52:	480d      	ldr	r0, [pc, #52]	; (8006a88 <MX_TIM2_Init+0x98>)
 8006a54:	f003 f9c7 	bl	8009de6 <HAL_TIM_ConfigClockSource>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006a5e:	f7ff fe1f 	bl	80066a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a62:	2300      	movs	r3, #0
 8006a64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a66:	2300      	movs	r3, #0
 8006a68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006a6a:	463b      	mov	r3, r7
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4806      	ldr	r0, [pc, #24]	; (8006a88 <MX_TIM2_Init+0x98>)
 8006a70:	f003 fbea 	bl	800a248 <HAL_TIMEx_MasterConfigSynchronization>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006a7a:	f7ff fe11 	bl	80066a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006a7e:	bf00      	nop
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	200004f4 	.word	0x200004f4

08006a8c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006a92:	f107 0308 	add.w	r3, r7, #8
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	605a      	str	r2, [r3, #4]
 8006a9c:	609a      	str	r2, [r3, #8]
 8006a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006aa0:	463b      	mov	r3, r7
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8006aa8:	4b1d      	ldr	r3, [pc, #116]	; (8006b20 <MX_TIM5_Init+0x94>)
 8006aaa:	4a1e      	ldr	r2, [pc, #120]	; (8006b24 <MX_TIM5_Init+0x98>)
 8006aac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400-1;
 8006aae:	4b1c      	ldr	r3, [pc, #112]	; (8006b20 <MX_TIM5_Init+0x94>)
 8006ab0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8006ab4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ab6:	4b1a      	ldr	r3, [pc, #104]	; (8006b20 <MX_TIM5_Init+0x94>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8006abc:	4b18      	ldr	r3, [pc, #96]	; (8006b20 <MX_TIM5_Init+0x94>)
 8006abe:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ac4:	4b16      	ldr	r3, [pc, #88]	; (8006b20 <MX_TIM5_Init+0x94>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006aca:	4b15      	ldr	r3, [pc, #84]	; (8006b20 <MX_TIM5_Init+0x94>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8006ad0:	4813      	ldr	r0, [pc, #76]	; (8006b20 <MX_TIM5_Init+0x94>)
 8006ad2:	f002 ffa1 	bl	8009a18 <HAL_TIM_Base_Init>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8006adc:	f7ff fde0 	bl	80066a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ae4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8006ae6:	f107 0308 	add.w	r3, r7, #8
 8006aea:	4619      	mov	r1, r3
 8006aec:	480c      	ldr	r0, [pc, #48]	; (8006b20 <MX_TIM5_Init+0x94>)
 8006aee:	f003 f97a 	bl	8009de6 <HAL_TIM_ConfigClockSource>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8006af8:	f7ff fdd2 	bl	80066a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006afc:	2300      	movs	r3, #0
 8006afe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b00:	2300      	movs	r3, #0
 8006b02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006b04:	463b      	mov	r3, r7
 8006b06:	4619      	mov	r1, r3
 8006b08:	4805      	ldr	r0, [pc, #20]	; (8006b20 <MX_TIM5_Init+0x94>)
 8006b0a:	f003 fb9d 	bl	800a248 <HAL_TIMEx_MasterConfigSynchronization>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8006b14:	f7ff fdc4 	bl	80066a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8006b18:	bf00      	nop
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	200004ac 	.word	0x200004ac
 8006b24:	40000c00 	.word	0x40000c00

08006b28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b38:	d116      	bne.n	8006b68 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
 8006b3e:	4b16      	ldr	r3, [pc, #88]	; (8006b98 <HAL_TIM_Base_MspInit+0x70>)
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	4a15      	ldr	r2, [pc, #84]	; (8006b98 <HAL_TIM_Base_MspInit+0x70>)
 8006b44:	f043 0301 	orr.w	r3, r3, #1
 8006b48:	6413      	str	r3, [r2, #64]	; 0x40
 8006b4a:	4b13      	ldr	r3, [pc, #76]	; (8006b98 <HAL_TIM_Base_MspInit+0x70>)
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006b56:	2200      	movs	r2, #0
 8006b58:	2100      	movs	r1, #0
 8006b5a:	201c      	movs	r0, #28
 8006b5c:	f000 fb39 	bl	80071d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006b60:	201c      	movs	r0, #28
 8006b62:	f000 fb52 	bl	800720a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8006b66:	e012      	b.n	8006b8e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a0b      	ldr	r2, [pc, #44]	; (8006b9c <HAL_TIM_Base_MspInit+0x74>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d10d      	bne.n	8006b8e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006b72:	2300      	movs	r3, #0
 8006b74:	60bb      	str	r3, [r7, #8]
 8006b76:	4b08      	ldr	r3, [pc, #32]	; (8006b98 <HAL_TIM_Base_MspInit+0x70>)
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	4a07      	ldr	r2, [pc, #28]	; (8006b98 <HAL_TIM_Base_MspInit+0x70>)
 8006b7c:	f043 0308 	orr.w	r3, r3, #8
 8006b80:	6413      	str	r3, [r2, #64]	; 0x40
 8006b82:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <HAL_TIM_Base_MspInit+0x70>)
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	60bb      	str	r3, [r7, #8]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
}
 8006b8e:	bf00      	nop
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	40023800 	.word	0x40023800
 8006b9c:	40000c00 	.word	0x40000c00

08006ba0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006ba4:	4b17      	ldr	r3, [pc, #92]	; (8006c04 <MX_USART1_UART_Init+0x64>)
 8006ba6:	4a18      	ldr	r2, [pc, #96]	; (8006c08 <MX_USART1_UART_Init+0x68>)
 8006ba8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006baa:	4b16      	ldr	r3, [pc, #88]	; (8006c04 <MX_USART1_UART_Init+0x64>)
 8006bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006bb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006bb2:	4b14      	ldr	r3, [pc, #80]	; (8006c04 <MX_USART1_UART_Init+0x64>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006bb8:	4b12      	ldr	r3, [pc, #72]	; (8006c04 <MX_USART1_UART_Init+0x64>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006bbe:	4b11      	ldr	r3, [pc, #68]	; (8006c04 <MX_USART1_UART_Init+0x64>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006bc4:	4b0f      	ldr	r3, [pc, #60]	; (8006c04 <MX_USART1_UART_Init+0x64>)
 8006bc6:	220c      	movs	r2, #12
 8006bc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006bca:	4b0e      	ldr	r3, [pc, #56]	; (8006c04 <MX_USART1_UART_Init+0x64>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006bd0:	4b0c      	ldr	r3, [pc, #48]	; (8006c04 <MX_USART1_UART_Init+0x64>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006bd6:	480b      	ldr	r0, [pc, #44]	; (8006c04 <MX_USART1_UART_Init+0x64>)
 8006bd8:	f003 fbc6 	bl	800a368 <HAL_UART_Init>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006be2:	f7ff fd5d 	bl	80066a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);  // 使能串口空闲中断
 8006be6:	4b07      	ldr	r3, [pc, #28]	; (8006c04 <MX_USART1_UART_Init+0x64>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	4b05      	ldr	r3, [pc, #20]	; (8006c04 <MX_USART1_UART_Init+0x64>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f042 0210 	orr.w	r2, r2, #16
 8006bf4:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(&huart1, (uint8_t*) receive_buff, 8); //设置DMA传输，将串口1的数据搬运到recvive_buff中，每次8个字节
 8006bf6:	2208      	movs	r2, #8
 8006bf8:	4904      	ldr	r1, [pc, #16]	; (8006c0c <MX_USART1_UART_Init+0x6c>)
 8006bfa:	4802      	ldr	r0, [pc, #8]	; (8006c04 <MX_USART1_UART_Init+0x64>)
 8006bfc:	f003 fc01 	bl	800a402 <HAL_UART_Receive_DMA>
  /* USER CODE END USART1_Init 2 */

}
 8006c00:	bf00      	nop
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	2000059c 	.word	0x2000059c
 8006c08:	40011000 	.word	0x40011000
 8006c0c:	20000208 	.word	0x20000208

08006c10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08a      	sub	sp, #40	; 0x28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c18:	f107 0314 	add.w	r3, r7, #20
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	605a      	str	r2, [r3, #4]
 8006c22:	609a      	str	r2, [r3, #8]
 8006c24:	60da      	str	r2, [r3, #12]
 8006c26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a35      	ldr	r2, [pc, #212]	; (8006d04 <HAL_UART_MspInit+0xf4>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d164      	bne.n	8006cfc <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006c32:	2300      	movs	r3, #0
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	4b34      	ldr	r3, [pc, #208]	; (8006d08 <HAL_UART_MspInit+0xf8>)
 8006c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3a:	4a33      	ldr	r2, [pc, #204]	; (8006d08 <HAL_UART_MspInit+0xf8>)
 8006c3c:	f043 0310 	orr.w	r3, r3, #16
 8006c40:	6453      	str	r3, [r2, #68]	; 0x44
 8006c42:	4b31      	ldr	r3, [pc, #196]	; (8006d08 <HAL_UART_MspInit+0xf8>)
 8006c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c46:	f003 0310 	and.w	r3, r3, #16
 8006c4a:	613b      	str	r3, [r7, #16]
 8006c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	4b2d      	ldr	r3, [pc, #180]	; (8006d08 <HAL_UART_MspInit+0xf8>)
 8006c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c56:	4a2c      	ldr	r2, [pc, #176]	; (8006d08 <HAL_UART_MspInit+0xf8>)
 8006c58:	f043 0301 	orr.w	r3, r3, #1
 8006c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c5e:	4b2a      	ldr	r3, [pc, #168]	; (8006d08 <HAL_UART_MspInit+0xf8>)
 8006c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006c6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c70:	2302      	movs	r3, #2
 8006c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c74:	2300      	movs	r3, #0
 8006c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006c7c:	2307      	movs	r3, #7
 8006c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c80:	f107 0314 	add.w	r3, r7, #20
 8006c84:	4619      	mov	r1, r3
 8006c86:	4821      	ldr	r0, [pc, #132]	; (8006d0c <HAL_UART_MspInit+0xfc>)
 8006c88:	f000 fedc 	bl	8007a44 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006c8c:	4b20      	ldr	r3, [pc, #128]	; (8006d10 <HAL_UART_MspInit+0x100>)
 8006c8e:	4a21      	ldr	r2, [pc, #132]	; (8006d14 <HAL_UART_MspInit+0x104>)
 8006c90:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006c92:	4b1f      	ldr	r3, [pc, #124]	; (8006d10 <HAL_UART_MspInit+0x100>)
 8006c94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006c98:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c9a:	4b1d      	ldr	r3, [pc, #116]	; (8006d10 <HAL_UART_MspInit+0x100>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ca0:	4b1b      	ldr	r3, [pc, #108]	; (8006d10 <HAL_UART_MspInit+0x100>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006ca6:	4b1a      	ldr	r3, [pc, #104]	; (8006d10 <HAL_UART_MspInit+0x100>)
 8006ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006cae:	4b18      	ldr	r3, [pc, #96]	; (8006d10 <HAL_UART_MspInit+0x100>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006cb4:	4b16      	ldr	r3, [pc, #88]	; (8006d10 <HAL_UART_MspInit+0x100>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006cba:	4b15      	ldr	r3, [pc, #84]	; (8006d10 <HAL_UART_MspInit+0x100>)
 8006cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cc0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006cc2:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <HAL_UART_MspInit+0x100>)
 8006cc4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006cc8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006cca:	4b11      	ldr	r3, [pc, #68]	; (8006d10 <HAL_UART_MspInit+0x100>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006cd0:	480f      	ldr	r0, [pc, #60]	; (8006d10 <HAL_UART_MspInit+0x100>)
 8006cd2:	f000 fab5 	bl	8007240 <HAL_DMA_Init>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8006cdc:	f7ff fce0 	bl	80066a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a0b      	ldr	r2, [pc, #44]	; (8006d10 <HAL_UART_MspInit+0x100>)
 8006ce4:	639a      	str	r2, [r3, #56]	; 0x38
 8006ce6:	4a0a      	ldr	r2, [pc, #40]	; (8006d10 <HAL_UART_MspInit+0x100>)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8006cec:	2200      	movs	r2, #0
 8006cee:	2101      	movs	r1, #1
 8006cf0:	2025      	movs	r0, #37	; 0x25
 8006cf2:	f000 fa6e 	bl	80071d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006cf6:	2025      	movs	r0, #37	; 0x25
 8006cf8:	f000 fa87 	bl	800720a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006cfc:	bf00      	nop
 8006cfe:	3728      	adds	r7, #40	; 0x28
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	40011000 	.word	0x40011000
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	40020000 	.word	0x40020000
 8006d10:	2000053c 	.word	0x2000053c
 8006d14:	40026440 	.word	0x40026440

08006d18 <USAR_UART_IDLECallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void USAR_UART_IDLECallback(UART_HandleTypeDef *huart) {
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
	// 停止本次DMA传输
	HAL_UART_DMAStop(&huart1);
 8006d20:	483c      	ldr	r0, [pc, #240]	; (8006e14 <USAR_UART_IDLECallback+0xfc>)
 8006d22:	f003 fb9e 	bl	800a462 <HAL_UART_DMAStop>

	// 计算接收到的数据长度
	uint8_t data_length = BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8006d26:	4b3c      	ldr	r3, [pc, #240]	; (8006e18 <USAR_UART_IDLECallback+0x100>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	f1c3 0320 	rsb	r3, r3, #32
 8006d32:	73fb      	strb	r3, [r7, #15]

	coordinate_XY[i][0] = receive_buff[0] + (receive_buff[1] << 8);
 8006d34:	4b39      	ldr	r3, [pc, #228]	; (8006e1c <USAR_UART_IDLECallback+0x104>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	4b38      	ldr	r3, [pc, #224]	; (8006e1c <USAR_UART_IDLECallback+0x104>)
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	021b      	lsls	r3, r3, #8
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	4936      	ldr	r1, [pc, #216]	; (8006e20 <USAR_UART_IDLECallback+0x108>)
 8006d46:	7809      	ldrb	r1, [r1, #0]
 8006d48:	4413      	add	r3, r2
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	4b35      	ldr	r3, [pc, #212]	; (8006e24 <USAR_UART_IDLECallback+0x10c>)
 8006d4e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
	coordinate_XY[i][1] = receive_buff[2] + (receive_buff[3] << 8);
 8006d52:	4b32      	ldr	r3, [pc, #200]	; (8006e1c <USAR_UART_IDLECallback+0x104>)
 8006d54:	789b      	ldrb	r3, [r3, #2]
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	4b30      	ldr	r3, [pc, #192]	; (8006e1c <USAR_UART_IDLECallback+0x104>)
 8006d5a:	78db      	ldrb	r3, [r3, #3]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	021b      	lsls	r3, r3, #8
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	492f      	ldr	r1, [pc, #188]	; (8006e20 <USAR_UART_IDLECallback+0x108>)
 8006d64:	7809      	ldrb	r1, [r1, #0]
 8006d66:	4608      	mov	r0, r1
 8006d68:	4413      	add	r3, r2
 8006d6a:	b299      	uxth	r1, r3
 8006d6c:	4a2d      	ldr	r2, [pc, #180]	; (8006e24 <USAR_UART_IDLECallback+0x10c>)
 8006d6e:	0083      	lsls	r3, r0, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	460a      	mov	r2, r1
 8006d74:	805a      	strh	r2, [r3, #2]

	printf("coordinate_X = %x\r\n", coordinate_XY[i][0]);
 8006d76:	4b2a      	ldr	r3, [pc, #168]	; (8006e20 <USAR_UART_IDLECallback+0x108>)
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	4b29      	ldr	r3, [pc, #164]	; (8006e24 <USAR_UART_IDLECallback+0x10c>)
 8006d7e:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8006d82:	4619      	mov	r1, r3
 8006d84:	4828      	ldr	r0, [pc, #160]	; (8006e28 <USAR_UART_IDLECallback+0x110>)
 8006d86:	f004 ff45 	bl	800bc14 <iprintf>
	printf("coordinate_Y = %x\r\n", coordinate_XY[i][1]);
 8006d8a:	4b25      	ldr	r3, [pc, #148]	; (8006e20 <USAR_UART_IDLECallback+0x108>)
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	4a25      	ldr	r2, [pc, #148]	; (8006e24 <USAR_UART_IDLECallback+0x10c>)
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	885b      	ldrh	r3, [r3, #2]
 8006d96:	4619      	mov	r1, r3
 8006d98:	4824      	ldr	r0, [pc, #144]	; (8006e2c <USAR_UART_IDLECallback+0x114>)
 8006d9a:	f004 ff3b 	bl	800bc14 <iprintf>
	i++;
 8006d9e:	4b20      	ldr	r3, [pc, #128]	; (8006e20 <USAR_UART_IDLECallback+0x108>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	3301      	adds	r3, #1
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	4b1e      	ldr	r3, [pc, #120]	; (8006e20 <USAR_UART_IDLECallback+0x108>)
 8006da8:	701a      	strb	r2, [r3, #0]
	if (i >= 31) {
 8006daa:	4b1d      	ldr	r3, [pc, #116]	; (8006e20 <USAR_UART_IDLECallback+0x108>)
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b1e      	cmp	r3, #30
 8006db0:	d902      	bls.n	8006db8 <USAR_UART_IDLECallback+0xa0>
		i = 0;
 8006db2:	4b1b      	ldr	r3, [pc, #108]	; (8006e20 <USAR_UART_IDLECallback+0x108>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	701a      	strb	r2, [r3, #0]
	}
	// 测试函数：将接收到的数据打印出去
	printf("Receive Data(length = %d): \r\n", data_length);
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	481c      	ldr	r0, [pc, #112]	; (8006e30 <USAR_UART_IDLECallback+0x118>)
 8006dbe:	f004 ff29 	bl	800bc14 <iprintf>
	printf("receive_buff[0] = %x\r\n", receive_buff[0]);
 8006dc2:	4b16      	ldr	r3, [pc, #88]	; (8006e1c <USAR_UART_IDLECallback+0x104>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	481a      	ldr	r0, [pc, #104]	; (8006e34 <USAR_UART_IDLECallback+0x11c>)
 8006dca:	f004 ff23 	bl	800bc14 <iprintf>
	printf("receive_buff[1] = %x\r\n", receive_buff[1]);
 8006dce:	4b13      	ldr	r3, [pc, #76]	; (8006e1c <USAR_UART_IDLECallback+0x104>)
 8006dd0:	785b      	ldrb	r3, [r3, #1]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	4818      	ldr	r0, [pc, #96]	; (8006e38 <USAR_UART_IDLECallback+0x120>)
 8006dd6:	f004 ff1d 	bl	800bc14 <iprintf>
	printf("receive_buff[2] = %x\r\n", receive_buff[2]);
 8006dda:	4b10      	ldr	r3, [pc, #64]	; (8006e1c <USAR_UART_IDLECallback+0x104>)
 8006ddc:	789b      	ldrb	r3, [r3, #2]
 8006dde:	4619      	mov	r1, r3
 8006de0:	4816      	ldr	r0, [pc, #88]	; (8006e3c <USAR_UART_IDLECallback+0x124>)
 8006de2:	f004 ff17 	bl	800bc14 <iprintf>
	printf("receive_buff[3] = %x\r\n", receive_buff[3]);
 8006de6:	4b0d      	ldr	r3, [pc, #52]	; (8006e1c <USAR_UART_IDLECallback+0x104>)
 8006de8:	78db      	ldrb	r3, [r3, #3]
 8006dea:	4619      	mov	r1, r3
 8006dec:	4814      	ldr	r0, [pc, #80]	; (8006e40 <USAR_UART_IDLECallback+0x128>)
 8006dee:	f004 ff11 	bl	800bc14 <iprintf>

	// 清零接收缓冲区
	memset(receive_buff, 0, data_length);
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	461a      	mov	r2, r3
 8006df6:	2100      	movs	r1, #0
 8006df8:	4808      	ldr	r0, [pc, #32]	; (8006e1c <USAR_UART_IDLECallback+0x104>)
 8006dfa:	f004 fa99 	bl	800b330 <memset>
	data_length = 0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	73fb      	strb	r3, [r7, #15]

	// 重启开始DMA传输 每次255字节数据
	HAL_UART_Receive_DMA(&huart1, (uint8_t*) receive_buff, 32);
 8006e02:	2220      	movs	r2, #32
 8006e04:	4905      	ldr	r1, [pc, #20]	; (8006e1c <USAR_UART_IDLECallback+0x104>)
 8006e06:	4803      	ldr	r0, [pc, #12]	; (8006e14 <USAR_UART_IDLECallback+0xfc>)
 8006e08:	f003 fafb 	bl	800a402 <HAL_UART_Receive_DMA>
}
 8006e0c:	bf00      	nop
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	2000059c 	.word	0x2000059c
 8006e18:	2000053c 	.word	0x2000053c
 8006e1c:	20000208 	.word	0x20000208
 8006e20:	200002ae 	.word	0x200002ae
 8006e24:	20000228 	.word	0x20000228
 8006e28:	0800f82c 	.word	0x0800f82c
 8006e2c:	0800f840 	.word	0x0800f840
 8006e30:	0800f854 	.word	0x0800f854
 8006e34:	0800f874 	.word	0x0800f874
 8006e38:	0800f88c 	.word	0x0800f88c
 8006e3c:	0800f8a4 	.word	0x0800f8a4
 8006e40:	0800f8bc 	.word	0x0800f8bc

08006e44 <USER_UART_IRQHandler>:

void USER_UART_IRQHandler(UART_HandleTypeDef *huart) {	// 判断是否是串口1
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
//	printf("\r\n进入中断函数.....\r\n");
	if (USART1 == huart->Instance) {	// 判断是否是空闲中断
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a0f      	ldr	r2, [pc, #60]	; (8006e90 <USER_UART_IRQHandler+0x4c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d117      	bne.n	8006e86 <USER_UART_IRQHandler+0x42>
		if (RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {// 清除空闲中断标志（否则会一直不断进入中断）
 8006e56:	4b0f      	ldr	r3, [pc, #60]	; (8006e94 <USER_UART_IRQHandler+0x50>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0310 	and.w	r3, r3, #16
 8006e60:	2b10      	cmp	r3, #16
 8006e62:	d110      	bne.n	8006e86 <USER_UART_IRQHandler+0x42>
			__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8006e64:	2300      	movs	r3, #0
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	4b0a      	ldr	r3, [pc, #40]	; (8006e94 <USER_UART_IRQHandler+0x50>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	4b08      	ldr	r3, [pc, #32]	; (8006e94 <USER_UART_IRQHandler+0x50>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	68fb      	ldr	r3, [r7, #12]
			printf("UART1 Idle IQR Detected\r\n");
 8006e7a:	4807      	ldr	r0, [pc, #28]	; (8006e98 <USER_UART_IRQHandler+0x54>)
 8006e7c:	f004 ff50 	bl	800bd20 <puts>
			// 调用中断处理函数
			USAR_UART_IDLECallback(huart);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7ff ff49 	bl	8006d18 <USAR_UART_IDLECallback>
		}
	}
}
 8006e86:	bf00      	nop
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	40011000 	.word	0x40011000
 8006e94:	2000059c 	.word	0x2000059c
 8006e98:	0800f8d4 	.word	0x0800f8d4

08006e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ed4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006ea0:	480d      	ldr	r0, [pc, #52]	; (8006ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006ea2:	490e      	ldr	r1, [pc, #56]	; (8006edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006ea4:	4a0e      	ldr	r2, [pc, #56]	; (8006ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ea8:	e002      	b.n	8006eb0 <LoopCopyDataInit>

08006eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006eae:	3304      	adds	r3, #4

08006eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006eb4:	d3f9      	bcc.n	8006eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006eb6:	4a0b      	ldr	r2, [pc, #44]	; (8006ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006eb8:	4c0b      	ldr	r4, [pc, #44]	; (8006ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ebc:	e001      	b.n	8006ec2 <LoopFillZerobss>

08006ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ec0:	3204      	adds	r2, #4

08006ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ec4:	d3fb      	bcc.n	8006ebe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006ec6:	f7ff fd81 	bl	80069cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006eca:	f004 fa0d 	bl	800b2e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006ece:	f7ff fb63 	bl	8006598 <main>
  bx  lr    
 8006ed2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006ed4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006edc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8006ee0:	0801cbb8 	.word	0x0801cbb8
  ldr r2, =_sbss
 8006ee4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8006ee8:	200005f4 	.word	0x200005f4

08006eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006eec:	e7fe      	b.n	8006eec <ADC_IRQHandler>
	...

08006ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006ef4:	4b0e      	ldr	r3, [pc, #56]	; (8006f30 <HAL_Init+0x40>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a0d      	ldr	r2, [pc, #52]	; (8006f30 <HAL_Init+0x40>)
 8006efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006f00:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <HAL_Init+0x40>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a0a      	ldr	r2, [pc, #40]	; (8006f30 <HAL_Init+0x40>)
 8006f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006f0c:	4b08      	ldr	r3, [pc, #32]	; (8006f30 <HAL_Init+0x40>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a07      	ldr	r2, [pc, #28]	; (8006f30 <HAL_Init+0x40>)
 8006f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f18:	2003      	movs	r0, #3
 8006f1a:	f000 f94f 	bl	80071bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006f1e:	2000      	movs	r0, #0
 8006f20:	f000 f808 	bl	8006f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006f24:	f7ff fbc2 	bl	80066ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	40023c00 	.word	0x40023c00

08006f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006f3c:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <HAL_InitTick+0x54>)
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <HAL_InitTick+0x58>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	4619      	mov	r1, r3
 8006f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 f967 	bl	8007226 <HAL_SYSTICK_Config>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e00e      	b.n	8006f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b0f      	cmp	r3, #15
 8006f66:	d80a      	bhi.n	8006f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f68:	2200      	movs	r2, #0
 8006f6a:	6879      	ldr	r1, [r7, #4]
 8006f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f70:	f000 f92f 	bl	80071d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006f74:	4a06      	ldr	r2, [pc, #24]	; (8006f90 <HAL_InitTick+0x5c>)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e000      	b.n	8006f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	20000008 	.word	0x20000008
 8006f8c:	20000010 	.word	0x20000010
 8006f90:	2000000c 	.word	0x2000000c

08006f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f98:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <HAL_IncTick+0x20>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <HAL_IncTick+0x24>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	4a04      	ldr	r2, [pc, #16]	; (8006fb8 <HAL_IncTick+0x24>)
 8006fa6:	6013      	str	r3, [r2, #0]
}
 8006fa8:	bf00      	nop
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	20000010 	.word	0x20000010
 8006fb8:	200005e0 	.word	0x200005e0

08006fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8006fc0:	4b03      	ldr	r3, [pc, #12]	; (8006fd0 <HAL_GetTick+0x14>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	200005e0 	.word	0x200005e0

08006fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006fdc:	f7ff ffee 	bl	8006fbc <HAL_GetTick>
 8006fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fec:	d005      	beq.n	8006ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006fee:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <HAL_Delay+0x44>)
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006ffa:	bf00      	nop
 8006ffc:	f7ff ffde 	bl	8006fbc <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	429a      	cmp	r2, r3
 800700a:	d8f7      	bhi.n	8006ffc <HAL_Delay+0x28>
  {
  }
}
 800700c:	bf00      	nop
 800700e:	bf00      	nop
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	20000010 	.word	0x20000010

0800701c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f003 0307 	and.w	r3, r3, #7
 800702a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800702c:	4b0c      	ldr	r3, [pc, #48]	; (8007060 <__NVIC_SetPriorityGrouping+0x44>)
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007038:	4013      	ands	r3, r2
 800703a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800704c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800704e:	4a04      	ldr	r2, [pc, #16]	; (8007060 <__NVIC_SetPriorityGrouping+0x44>)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	60d3      	str	r3, [r2, #12]
}
 8007054:	bf00      	nop
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	e000ed00 	.word	0xe000ed00

08007064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007064:	b480      	push	{r7}
 8007066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007068:	4b04      	ldr	r3, [pc, #16]	; (800707c <__NVIC_GetPriorityGrouping+0x18>)
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	0a1b      	lsrs	r3, r3, #8
 800706e:	f003 0307 	and.w	r3, r3, #7
}
 8007072:	4618      	mov	r0, r3
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	e000ed00 	.word	0xe000ed00

08007080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	4603      	mov	r3, r0
 8007088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800708a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800708e:	2b00      	cmp	r3, #0
 8007090:	db0b      	blt.n	80070aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007092:	79fb      	ldrb	r3, [r7, #7]
 8007094:	f003 021f 	and.w	r2, r3, #31
 8007098:	4907      	ldr	r1, [pc, #28]	; (80070b8 <__NVIC_EnableIRQ+0x38>)
 800709a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	2001      	movs	r0, #1
 80070a2:	fa00 f202 	lsl.w	r2, r0, r2
 80070a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	e000e100 	.word	0xe000e100

080070bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	6039      	str	r1, [r7, #0]
 80070c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	db0a      	blt.n	80070e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	490c      	ldr	r1, [pc, #48]	; (8007108 <__NVIC_SetPriority+0x4c>)
 80070d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070da:	0112      	lsls	r2, r2, #4
 80070dc:	b2d2      	uxtb	r2, r2
 80070de:	440b      	add	r3, r1
 80070e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80070e4:	e00a      	b.n	80070fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	4908      	ldr	r1, [pc, #32]	; (800710c <__NVIC_SetPriority+0x50>)
 80070ec:	79fb      	ldrb	r3, [r7, #7]
 80070ee:	f003 030f 	and.w	r3, r3, #15
 80070f2:	3b04      	subs	r3, #4
 80070f4:	0112      	lsls	r2, r2, #4
 80070f6:	b2d2      	uxtb	r2, r2
 80070f8:	440b      	add	r3, r1
 80070fa:	761a      	strb	r2, [r3, #24]
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	e000e100 	.word	0xe000e100
 800710c:	e000ed00 	.word	0xe000ed00

08007110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007110:	b480      	push	{r7}
 8007112:	b089      	sub	sp, #36	; 0x24
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	f1c3 0307 	rsb	r3, r3, #7
 800712a:	2b04      	cmp	r3, #4
 800712c:	bf28      	it	cs
 800712e:	2304      	movcs	r3, #4
 8007130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	3304      	adds	r3, #4
 8007136:	2b06      	cmp	r3, #6
 8007138:	d902      	bls.n	8007140 <NVIC_EncodePriority+0x30>
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	3b03      	subs	r3, #3
 800713e:	e000      	b.n	8007142 <NVIC_EncodePriority+0x32>
 8007140:	2300      	movs	r3, #0
 8007142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007144:	f04f 32ff 	mov.w	r2, #4294967295
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	fa02 f303 	lsl.w	r3, r2, r3
 800714e:	43da      	mvns	r2, r3
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	401a      	ands	r2, r3
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007158:	f04f 31ff 	mov.w	r1, #4294967295
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	fa01 f303 	lsl.w	r3, r1, r3
 8007162:	43d9      	mvns	r1, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007168:	4313      	orrs	r3, r2
         );
}
 800716a:	4618      	mov	r0, r3
 800716c:	3724      	adds	r7, #36	; 0x24
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
	...

08007178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3b01      	subs	r3, #1
 8007184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007188:	d301      	bcc.n	800718e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800718a:	2301      	movs	r3, #1
 800718c:	e00f      	b.n	80071ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800718e:	4a0a      	ldr	r2, [pc, #40]	; (80071b8 <SysTick_Config+0x40>)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3b01      	subs	r3, #1
 8007194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007196:	210f      	movs	r1, #15
 8007198:	f04f 30ff 	mov.w	r0, #4294967295
 800719c:	f7ff ff8e 	bl	80070bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <SysTick_Config+0x40>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071a6:	4b04      	ldr	r3, [pc, #16]	; (80071b8 <SysTick_Config+0x40>)
 80071a8:	2207      	movs	r2, #7
 80071aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	e000e010 	.word	0xe000e010

080071bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff ff29 	bl	800701c <__NVIC_SetPriorityGrouping>
}
 80071ca:	bf00      	nop
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b086      	sub	sp, #24
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	4603      	mov	r3, r0
 80071da:	60b9      	str	r1, [r7, #8]
 80071dc:	607a      	str	r2, [r7, #4]
 80071de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80071e4:	f7ff ff3e 	bl	8007064 <__NVIC_GetPriorityGrouping>
 80071e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	68b9      	ldr	r1, [r7, #8]
 80071ee:	6978      	ldr	r0, [r7, #20]
 80071f0:	f7ff ff8e 	bl	8007110 <NVIC_EncodePriority>
 80071f4:	4602      	mov	r2, r0
 80071f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071fa:	4611      	mov	r1, r2
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff ff5d 	bl	80070bc <__NVIC_SetPriority>
}
 8007202:	bf00      	nop
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b082      	sub	sp, #8
 800720e:	af00      	add	r7, sp, #0
 8007210:	4603      	mov	r3, r0
 8007212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007218:	4618      	mov	r0, r3
 800721a:	f7ff ff31 	bl	8007080 <__NVIC_EnableIRQ>
}
 800721e:	bf00      	nop
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b082      	sub	sp, #8
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7ff ffa2 	bl	8007178 <SysTick_Config>
 8007234:	4603      	mov	r3, r0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
	...

08007240 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800724c:	f7ff feb6 	bl	8006fbc <HAL_GetTick>
 8007250:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e099      	b.n	8007390 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2202      	movs	r2, #2
 8007268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0201 	bic.w	r2, r2, #1
 800727a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800727c:	e00f      	b.n	800729e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800727e:	f7ff fe9d 	bl	8006fbc <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	2b05      	cmp	r3, #5
 800728a:	d908      	bls.n	800729e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2220      	movs	r2, #32
 8007290:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2203      	movs	r2, #3
 8007296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e078      	b.n	8007390 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1e8      	bne.n	800727e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	4b38      	ldr	r3, [pc, #224]	; (8007398 <HAL_DMA_Init+0x158>)
 80072b8:	4013      	ands	r3, r2
 80072ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d107      	bne.n	8007308 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007300:	4313      	orrs	r3, r2
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	4313      	orrs	r3, r2
 8007306:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f023 0307 	bic.w	r3, r3, #7
 800731e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	4313      	orrs	r3, r2
 8007328:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	2b04      	cmp	r3, #4
 8007330:	d117      	bne.n	8007362 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	4313      	orrs	r3, r2
 800733a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00e      	beq.n	8007362 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fb01 	bl	800794c <DMA_CheckFifoParam>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d008      	beq.n	8007362 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2240      	movs	r2, #64	; 0x40
 8007354:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800735e:	2301      	movs	r3, #1
 8007360:	e016      	b.n	8007390 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fab8 	bl	80078e0 <DMA_CalcBaseAndBitshift>
 8007370:	4603      	mov	r3, r0
 8007372:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007378:	223f      	movs	r2, #63	; 0x3f
 800737a:	409a      	lsls	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	f010803f 	.word	0xf010803f

0800739c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
 80073a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d101      	bne.n	80073c2 <HAL_DMA_Start_IT+0x26>
 80073be:	2302      	movs	r3, #2
 80073c0:	e040      	b.n	8007444 <HAL_DMA_Start_IT+0xa8>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d12f      	bne.n	8007436 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2202      	movs	r2, #2
 80073da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	68b9      	ldr	r1, [r7, #8]
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 fa4a 	bl	8007884 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f4:	223f      	movs	r2, #63	; 0x3f
 80073f6:	409a      	lsls	r2, r3
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0216 	orr.w	r2, r2, #22
 800740a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007410:	2b00      	cmp	r3, #0
 8007412:	d007      	beq.n	8007424 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0208 	orr.w	r2, r2, #8
 8007422:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0201 	orr.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	e005      	b.n	8007442 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800743e:	2302      	movs	r3, #2
 8007440:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007442:	7dfb      	ldrb	r3, [r7, #23]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3718      	adds	r7, #24
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007458:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800745a:	f7ff fdaf 	bl	8006fbc <HAL_GetTick>
 800745e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b02      	cmp	r3, #2
 800746a:	d008      	beq.n	800747e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2280      	movs	r2, #128	; 0x80
 8007470:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e052      	b.n	8007524 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0216 	bic.w	r2, r2, #22
 800748c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	695a      	ldr	r2, [r3, #20]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800749c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d103      	bne.n	80074ae <HAL_DMA_Abort+0x62>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d007      	beq.n	80074be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 0208 	bic.w	r2, r2, #8
 80074bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f022 0201 	bic.w	r2, r2, #1
 80074cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80074ce:	e013      	b.n	80074f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80074d0:	f7ff fd74 	bl	8006fbc <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b05      	cmp	r3, #5
 80074dc:	d90c      	bls.n	80074f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2220      	movs	r2, #32
 80074e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2203      	movs	r2, #3
 80074f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e015      	b.n	8007524 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e4      	bne.n	80074d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800750a:	223f      	movs	r2, #63	; 0x3f
 800750c:	409a      	lsls	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b02      	cmp	r3, #2
 800753e:	d004      	beq.n	800754a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2280      	movs	r2, #128	; 0x80
 8007544:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e00c      	b.n	8007564 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2205      	movs	r2, #5
 800754e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f022 0201 	bic.w	r2, r2, #1
 8007560:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007578:	2300      	movs	r3, #0
 800757a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800757c:	4b92      	ldr	r3, [pc, #584]	; (80077c8 <HAL_DMA_IRQHandler+0x258>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a92      	ldr	r2, [pc, #584]	; (80077cc <HAL_DMA_IRQHandler+0x25c>)
 8007582:	fba2 2303 	umull	r2, r3, r2, r3
 8007586:	0a9b      	lsrs	r3, r3, #10
 8007588:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800758e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800759a:	2208      	movs	r2, #8
 800759c:	409a      	lsls	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4013      	ands	r3, r2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d01a      	beq.n	80075dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d013      	beq.n	80075dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 0204 	bic.w	r2, r2, #4
 80075c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c8:	2208      	movs	r2, #8
 80075ca:	409a      	lsls	r2, r3
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d4:	f043 0201 	orr.w	r2, r3, #1
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075e0:	2201      	movs	r2, #1
 80075e2:	409a      	lsls	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4013      	ands	r3, r2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d012      	beq.n	8007612 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00b      	beq.n	8007612 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075fe:	2201      	movs	r2, #1
 8007600:	409a      	lsls	r2, r3
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800760a:	f043 0202 	orr.w	r2, r3, #2
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007616:	2204      	movs	r2, #4
 8007618:	409a      	lsls	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	4013      	ands	r3, r2
 800761e:	2b00      	cmp	r3, #0
 8007620:	d012      	beq.n	8007648 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00b      	beq.n	8007648 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007634:	2204      	movs	r2, #4
 8007636:	409a      	lsls	r2, r3
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007640:	f043 0204 	orr.w	r2, r3, #4
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800764c:	2210      	movs	r2, #16
 800764e:	409a      	lsls	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4013      	ands	r3, r2
 8007654:	2b00      	cmp	r3, #0
 8007656:	d043      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0308 	and.w	r3, r3, #8
 8007662:	2b00      	cmp	r3, #0
 8007664:	d03c      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800766a:	2210      	movs	r2, #16
 800766c:	409a      	lsls	r2, r3
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d018      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d108      	bne.n	80076a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	2b00      	cmp	r3, #0
 8007694:	d024      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	4798      	blx	r3
 800769e:	e01f      	b.n	80076e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01b      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	4798      	blx	r3
 80076b0:	e016      	b.n	80076e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d107      	bne.n	80076d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 0208 	bic.w	r2, r2, #8
 80076ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076e4:	2220      	movs	r2, #32
 80076e6:	409a      	lsls	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4013      	ands	r3, r2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 808e 	beq.w	800780e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0310 	and.w	r3, r3, #16
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 8086 	beq.w	800780e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007706:	2220      	movs	r2, #32
 8007708:	409a      	lsls	r2, r3
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b05      	cmp	r3, #5
 8007718:	d136      	bne.n	8007788 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f022 0216 	bic.w	r2, r2, #22
 8007728:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	695a      	ldr	r2, [r3, #20]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007738:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	2b00      	cmp	r3, #0
 8007740:	d103      	bne.n	800774a <HAL_DMA_IRQHandler+0x1da>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007746:	2b00      	cmp	r3, #0
 8007748:	d007      	beq.n	800775a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0208 	bic.w	r2, r2, #8
 8007758:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800775e:	223f      	movs	r2, #63	; 0x3f
 8007760:	409a      	lsls	r2, r3
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800777a:	2b00      	cmp	r3, #0
 800777c:	d07d      	beq.n	800787a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	4798      	blx	r3
        }
        return;
 8007786:	e078      	b.n	800787a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d01c      	beq.n	80077d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d108      	bne.n	80077b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d030      	beq.n	800780e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	4798      	blx	r3
 80077b4:	e02b      	b.n	800780e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d027      	beq.n	800780e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	4798      	blx	r3
 80077c6:	e022      	b.n	800780e <HAL_DMA_IRQHandler+0x29e>
 80077c8:	20000008 	.word	0x20000008
 80077cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10f      	bne.n	80077fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 0210 	bic.w	r2, r2, #16
 80077ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007812:	2b00      	cmp	r3, #0
 8007814:	d032      	beq.n	800787c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d022      	beq.n	8007868 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2205      	movs	r2, #5
 8007826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0201 	bic.w	r2, r2, #1
 8007838:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	3301      	adds	r3, #1
 800783e:	60bb      	str	r3, [r7, #8]
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	429a      	cmp	r2, r3
 8007844:	d307      	bcc.n	8007856 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1f2      	bne.n	800783a <HAL_DMA_IRQHandler+0x2ca>
 8007854:	e000      	b.n	8007858 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007856:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800786c:	2b00      	cmp	r3, #0
 800786e:	d005      	beq.n	800787c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	4798      	blx	r3
 8007878:	e000      	b.n	800787c <HAL_DMA_IRQHandler+0x30c>
        return;
 800787a:	bf00      	nop
    }
  }
}
 800787c:	3718      	adds	r7, #24
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop

08007884 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
 8007890:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	2b40      	cmp	r3, #64	; 0x40
 80078b0:	d108      	bne.n	80078c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80078c2:	e007      	b.n	80078d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	60da      	str	r2, [r3, #12]
}
 80078d4:	bf00      	nop
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	3b10      	subs	r3, #16
 80078f0:	4a14      	ldr	r2, [pc, #80]	; (8007944 <DMA_CalcBaseAndBitshift+0x64>)
 80078f2:	fba2 2303 	umull	r2, r3, r2, r3
 80078f6:	091b      	lsrs	r3, r3, #4
 80078f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80078fa:	4a13      	ldr	r2, [pc, #76]	; (8007948 <DMA_CalcBaseAndBitshift+0x68>)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4413      	add	r3, r2
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b03      	cmp	r3, #3
 800790c:	d909      	bls.n	8007922 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007916:	f023 0303 	bic.w	r3, r3, #3
 800791a:	1d1a      	adds	r2, r3, #4
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	659a      	str	r2, [r3, #88]	; 0x58
 8007920:	e007      	b.n	8007932 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800792a:	f023 0303 	bic.w	r3, r3, #3
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007936:	4618      	mov	r0, r3
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	aaaaaaab 	.word	0xaaaaaaab
 8007948:	0801c5e0 	.word	0x0801c5e0

0800794c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d11f      	bne.n	80079a6 <DMA_CheckFifoParam+0x5a>
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b03      	cmp	r3, #3
 800796a:	d856      	bhi.n	8007a1a <DMA_CheckFifoParam+0xce>
 800796c:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <DMA_CheckFifoParam+0x28>)
 800796e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007972:	bf00      	nop
 8007974:	08007985 	.word	0x08007985
 8007978:	08007997 	.word	0x08007997
 800797c:	08007985 	.word	0x08007985
 8007980:	08007a1b 	.word	0x08007a1b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d046      	beq.n	8007a1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007994:	e043      	b.n	8007a1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800799e:	d140      	bne.n	8007a22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079a4:	e03d      	b.n	8007a22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ae:	d121      	bne.n	80079f4 <DMA_CheckFifoParam+0xa8>
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d837      	bhi.n	8007a26 <DMA_CheckFifoParam+0xda>
 80079b6:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <DMA_CheckFifoParam+0x70>)
 80079b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079bc:	080079cd 	.word	0x080079cd
 80079c0:	080079d3 	.word	0x080079d3
 80079c4:	080079cd 	.word	0x080079cd
 80079c8:	080079e5 	.word	0x080079e5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	73fb      	strb	r3, [r7, #15]
      break;
 80079d0:	e030      	b.n	8007a34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d025      	beq.n	8007a2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079e2:	e022      	b.n	8007a2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079ec:	d11f      	bne.n	8007a2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80079f2:	e01c      	b.n	8007a2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d903      	bls.n	8007a02 <DMA_CheckFifoParam+0xb6>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	d003      	beq.n	8007a08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007a00:	e018      	b.n	8007a34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	73fb      	strb	r3, [r7, #15]
      break;
 8007a06:	e015      	b.n	8007a34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00e      	beq.n	8007a32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	73fb      	strb	r3, [r7, #15]
      break;
 8007a18:	e00b      	b.n	8007a32 <DMA_CheckFifoParam+0xe6>
      break;
 8007a1a:	bf00      	nop
 8007a1c:	e00a      	b.n	8007a34 <DMA_CheckFifoParam+0xe8>
      break;
 8007a1e:	bf00      	nop
 8007a20:	e008      	b.n	8007a34 <DMA_CheckFifoParam+0xe8>
      break;
 8007a22:	bf00      	nop
 8007a24:	e006      	b.n	8007a34 <DMA_CheckFifoParam+0xe8>
      break;
 8007a26:	bf00      	nop
 8007a28:	e004      	b.n	8007a34 <DMA_CheckFifoParam+0xe8>
      break;
 8007a2a:	bf00      	nop
 8007a2c:	e002      	b.n	8007a34 <DMA_CheckFifoParam+0xe8>
      break;   
 8007a2e:	bf00      	nop
 8007a30:	e000      	b.n	8007a34 <DMA_CheckFifoParam+0xe8>
      break;
 8007a32:	bf00      	nop
    }
  } 
  
  return status; 
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop

08007a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b089      	sub	sp, #36	; 0x24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	61fb      	str	r3, [r7, #28]
 8007a5e:	e16b      	b.n	8007d38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007a60:	2201      	movs	r2, #1
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	fa02 f303 	lsl.w	r3, r2, r3
 8007a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	4013      	ands	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	f040 815a 	bne.w	8007d32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f003 0303 	and.w	r3, r3, #3
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d005      	beq.n	8007a96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d130      	bne.n	8007af8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	005b      	lsls	r3, r3, #1
 8007aa0:	2203      	movs	r2, #3
 8007aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa6:	43db      	mvns	r3, r3
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007acc:	2201      	movs	r2, #1
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad4:	43db      	mvns	r3, r3
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	091b      	lsrs	r3, r3, #4
 8007ae2:	f003 0201 	and.w	r2, r3, #1
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f003 0303 	and.w	r3, r3, #3
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d017      	beq.n	8007b34 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	005b      	lsls	r3, r3, #1
 8007b0e:	2203      	movs	r2, #3
 8007b10:	fa02 f303 	lsl.w	r3, r2, r3
 8007b14:	43db      	mvns	r3, r3
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	4013      	ands	r3, r2
 8007b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	689a      	ldr	r2, [r3, #8]
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	fa02 f303 	lsl.w	r3, r2, r3
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f003 0303 	and.w	r3, r3, #3
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d123      	bne.n	8007b88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	08da      	lsrs	r2, r3, #3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3208      	adds	r2, #8
 8007b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	f003 0307 	and.w	r3, r3, #7
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	220f      	movs	r2, #15
 8007b58:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5c:	43db      	mvns	r3, r3
 8007b5e:	69ba      	ldr	r2, [r7, #24]
 8007b60:	4013      	ands	r3, r2
 8007b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	691a      	ldr	r2, [r3, #16]
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	f003 0307 	and.w	r3, r3, #7
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	fa02 f303 	lsl.w	r3, r2, r3
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	08da      	lsrs	r2, r3, #3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	3208      	adds	r2, #8
 8007b82:	69b9      	ldr	r1, [r7, #24]
 8007b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	005b      	lsls	r3, r3, #1
 8007b92:	2203      	movs	r2, #3
 8007b94:	fa02 f303 	lsl.w	r3, r2, r3
 8007b98:	43db      	mvns	r3, r3
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f003 0203 	and.w	r2, r3, #3
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 80b4 	beq.w	8007d32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
 8007bce:	4b60      	ldr	r3, [pc, #384]	; (8007d50 <HAL_GPIO_Init+0x30c>)
 8007bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd2:	4a5f      	ldr	r2, [pc, #380]	; (8007d50 <HAL_GPIO_Init+0x30c>)
 8007bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8007bda:	4b5d      	ldr	r3, [pc, #372]	; (8007d50 <HAL_GPIO_Init+0x30c>)
 8007bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007be6:	4a5b      	ldr	r2, [pc, #364]	; (8007d54 <HAL_GPIO_Init+0x310>)
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	089b      	lsrs	r3, r3, #2
 8007bec:	3302      	adds	r3, #2
 8007bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	f003 0303 	and.w	r3, r3, #3
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	220f      	movs	r2, #15
 8007bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007c02:	43db      	mvns	r3, r3
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	4013      	ands	r3, r2
 8007c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a52      	ldr	r2, [pc, #328]	; (8007d58 <HAL_GPIO_Init+0x314>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d02b      	beq.n	8007c6a <HAL_GPIO_Init+0x226>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a51      	ldr	r2, [pc, #324]	; (8007d5c <HAL_GPIO_Init+0x318>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d025      	beq.n	8007c66 <HAL_GPIO_Init+0x222>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a50      	ldr	r2, [pc, #320]	; (8007d60 <HAL_GPIO_Init+0x31c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d01f      	beq.n	8007c62 <HAL_GPIO_Init+0x21e>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a4f      	ldr	r2, [pc, #316]	; (8007d64 <HAL_GPIO_Init+0x320>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d019      	beq.n	8007c5e <HAL_GPIO_Init+0x21a>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a4e      	ldr	r2, [pc, #312]	; (8007d68 <HAL_GPIO_Init+0x324>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d013      	beq.n	8007c5a <HAL_GPIO_Init+0x216>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a4d      	ldr	r2, [pc, #308]	; (8007d6c <HAL_GPIO_Init+0x328>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d00d      	beq.n	8007c56 <HAL_GPIO_Init+0x212>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a4c      	ldr	r2, [pc, #304]	; (8007d70 <HAL_GPIO_Init+0x32c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d007      	beq.n	8007c52 <HAL_GPIO_Init+0x20e>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a4b      	ldr	r2, [pc, #300]	; (8007d74 <HAL_GPIO_Init+0x330>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d101      	bne.n	8007c4e <HAL_GPIO_Init+0x20a>
 8007c4a:	2307      	movs	r3, #7
 8007c4c:	e00e      	b.n	8007c6c <HAL_GPIO_Init+0x228>
 8007c4e:	2308      	movs	r3, #8
 8007c50:	e00c      	b.n	8007c6c <HAL_GPIO_Init+0x228>
 8007c52:	2306      	movs	r3, #6
 8007c54:	e00a      	b.n	8007c6c <HAL_GPIO_Init+0x228>
 8007c56:	2305      	movs	r3, #5
 8007c58:	e008      	b.n	8007c6c <HAL_GPIO_Init+0x228>
 8007c5a:	2304      	movs	r3, #4
 8007c5c:	e006      	b.n	8007c6c <HAL_GPIO_Init+0x228>
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e004      	b.n	8007c6c <HAL_GPIO_Init+0x228>
 8007c62:	2302      	movs	r3, #2
 8007c64:	e002      	b.n	8007c6c <HAL_GPIO_Init+0x228>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e000      	b.n	8007c6c <HAL_GPIO_Init+0x228>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	69fa      	ldr	r2, [r7, #28]
 8007c6e:	f002 0203 	and.w	r2, r2, #3
 8007c72:	0092      	lsls	r2, r2, #2
 8007c74:	4093      	lsls	r3, r2
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c7c:	4935      	ldr	r1, [pc, #212]	; (8007d54 <HAL_GPIO_Init+0x310>)
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	089b      	lsrs	r3, r3, #2
 8007c82:	3302      	adds	r3, #2
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c8a:	4b3b      	ldr	r3, [pc, #236]	; (8007d78 <HAL_GPIO_Init+0x334>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	43db      	mvns	r3, r3
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	4013      	ands	r3, r2
 8007c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007ca6:	69ba      	ldr	r2, [r7, #24]
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007cae:	4a32      	ldr	r2, [pc, #200]	; (8007d78 <HAL_GPIO_Init+0x334>)
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007cb4:	4b30      	ldr	r3, [pc, #192]	; (8007d78 <HAL_GPIO_Init+0x334>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	43db      	mvns	r3, r3
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007cd8:	4a27      	ldr	r2, [pc, #156]	; (8007d78 <HAL_GPIO_Init+0x334>)
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007cde:	4b26      	ldr	r3, [pc, #152]	; (8007d78 <HAL_GPIO_Init+0x334>)
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	43db      	mvns	r3, r3
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	4013      	ands	r3, r2
 8007cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007d02:	4a1d      	ldr	r2, [pc, #116]	; (8007d78 <HAL_GPIO_Init+0x334>)
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007d08:	4b1b      	ldr	r3, [pc, #108]	; (8007d78 <HAL_GPIO_Init+0x334>)
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	43db      	mvns	r3, r3
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	4013      	ands	r3, r2
 8007d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d003      	beq.n	8007d2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007d2c:	4a12      	ldr	r2, [pc, #72]	; (8007d78 <HAL_GPIO_Init+0x334>)
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	3301      	adds	r3, #1
 8007d36:	61fb      	str	r3, [r7, #28]
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	2b0f      	cmp	r3, #15
 8007d3c:	f67f ae90 	bls.w	8007a60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007d40:	bf00      	nop
 8007d42:	bf00      	nop
 8007d44:	3724      	adds	r7, #36	; 0x24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	40023800 	.word	0x40023800
 8007d54:	40013800 	.word	0x40013800
 8007d58:	40020000 	.word	0x40020000
 8007d5c:	40020400 	.word	0x40020400
 8007d60:	40020800 	.word	0x40020800
 8007d64:	40020c00 	.word	0x40020c00
 8007d68:	40021000 	.word	0x40021000
 8007d6c:	40021400 	.word	0x40021400
 8007d70:	40021800 	.word	0x40021800
 8007d74:	40021c00 	.word	0x40021c00
 8007d78:	40013c00 	.word	0x40013c00

08007d7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	691a      	ldr	r2, [r3, #16]
 8007d8c:	887b      	ldrh	r3, [r7, #2]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d94:	2301      	movs	r3, #1
 8007d96:	73fb      	strb	r3, [r7, #15]
 8007d98:	e001      	b.n	8007d9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	807b      	strh	r3, [r7, #2]
 8007db8:	4613      	mov	r3, r2
 8007dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007dbc:	787b      	ldrb	r3, [r7, #1]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007dc2:	887a      	ldrh	r2, [r7, #2]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007dc8:	e003      	b.n	8007dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007dca:	887b      	ldrh	r3, [r7, #2]
 8007dcc:	041a      	lsls	r2, r3, #16
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	619a      	str	r2, [r3, #24]
}
 8007dd2:	bf00      	nop
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
	...

08007de0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	4603      	mov	r3, r0
 8007de8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007dea:	4b08      	ldr	r3, [pc, #32]	; (8007e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007dec:	695a      	ldr	r2, [r3, #20]
 8007dee:	88fb      	ldrh	r3, [r7, #6]
 8007df0:	4013      	ands	r3, r2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d006      	beq.n	8007e04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007df6:	4a05      	ldr	r2, [pc, #20]	; (8007e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007df8:	88fb      	ldrh	r3, [r7, #6]
 8007dfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007dfc:	88fb      	ldrh	r3, [r7, #6]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 f806 	bl	8007e10 <HAL_GPIO_EXTI_Callback>
  }
}
 8007e04:	bf00      	nop
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	40013c00 	.word	0x40013c00

08007e10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4603      	mov	r3, r0
 8007e18:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
	...

08007e28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e12b      	b.n	8008092 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d106      	bne.n	8007e54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7fe fb5a 	bl	8006508 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2224      	movs	r2, #36	; 0x24
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 0201 	bic.w	r2, r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007e8c:	f001 fd58 	bl	8009940 <HAL_RCC_GetPCLK1Freq>
 8007e90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	4a81      	ldr	r2, [pc, #516]	; (800809c <HAL_I2C_Init+0x274>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d807      	bhi.n	8007eac <HAL_I2C_Init+0x84>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4a80      	ldr	r2, [pc, #512]	; (80080a0 <HAL_I2C_Init+0x278>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	bf94      	ite	ls
 8007ea4:	2301      	movls	r3, #1
 8007ea6:	2300      	movhi	r3, #0
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	e006      	b.n	8007eba <HAL_I2C_Init+0x92>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4a7d      	ldr	r2, [pc, #500]	; (80080a4 <HAL_I2C_Init+0x27c>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	bf94      	ite	ls
 8007eb4:	2301      	movls	r3, #1
 8007eb6:	2300      	movhi	r3, #0
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d001      	beq.n	8007ec2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e0e7      	b.n	8008092 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	4a78      	ldr	r2, [pc, #480]	; (80080a8 <HAL_I2C_Init+0x280>)
 8007ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eca:	0c9b      	lsrs	r3, r3, #18
 8007ecc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6a1b      	ldr	r3, [r3, #32]
 8007ee8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	4a6a      	ldr	r2, [pc, #424]	; (800809c <HAL_I2C_Init+0x274>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d802      	bhi.n	8007efc <HAL_I2C_Init+0xd4>
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	e009      	b.n	8007f10 <HAL_I2C_Init+0xe8>
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007f02:	fb02 f303 	mul.w	r3, r2, r3
 8007f06:	4a69      	ldr	r2, [pc, #420]	; (80080ac <HAL_I2C_Init+0x284>)
 8007f08:	fba2 2303 	umull	r2, r3, r2, r3
 8007f0c:	099b      	lsrs	r3, r3, #6
 8007f0e:	3301      	adds	r3, #1
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	6812      	ldr	r2, [r2, #0]
 8007f14:	430b      	orrs	r3, r1
 8007f16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007f22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	495c      	ldr	r1, [pc, #368]	; (800809c <HAL_I2C_Init+0x274>)
 8007f2c:	428b      	cmp	r3, r1
 8007f2e:	d819      	bhi.n	8007f64 <HAL_I2C_Init+0x13c>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	1e59      	subs	r1, r3, #1
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	005b      	lsls	r3, r3, #1
 8007f3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f3e:	1c59      	adds	r1, r3, #1
 8007f40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007f44:	400b      	ands	r3, r1
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00a      	beq.n	8007f60 <HAL_I2C_Init+0x138>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	1e59      	subs	r1, r3, #1
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	005b      	lsls	r3, r3, #1
 8007f54:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f58:	3301      	adds	r3, #1
 8007f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f5e:	e051      	b.n	8008004 <HAL_I2C_Init+0x1dc>
 8007f60:	2304      	movs	r3, #4
 8007f62:	e04f      	b.n	8008004 <HAL_I2C_Init+0x1dc>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d111      	bne.n	8007f90 <HAL_I2C_Init+0x168>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	1e58      	subs	r0, r3, #1
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6859      	ldr	r1, [r3, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	005b      	lsls	r3, r3, #1
 8007f78:	440b      	add	r3, r1
 8007f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f7e:	3301      	adds	r3, #1
 8007f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	bf0c      	ite	eq
 8007f88:	2301      	moveq	r3, #1
 8007f8a:	2300      	movne	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	e012      	b.n	8007fb6 <HAL_I2C_Init+0x18e>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	1e58      	subs	r0, r3, #1
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6859      	ldr	r1, [r3, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	440b      	add	r3, r1
 8007f9e:	0099      	lsls	r1, r3, #2
 8007fa0:	440b      	add	r3, r1
 8007fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	bf0c      	ite	eq
 8007fb0:	2301      	moveq	r3, #1
 8007fb2:	2300      	movne	r3, #0
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <HAL_I2C_Init+0x196>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e022      	b.n	8008004 <HAL_I2C_Init+0x1dc>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10e      	bne.n	8007fe4 <HAL_I2C_Init+0x1bc>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	1e58      	subs	r0, r3, #1
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6859      	ldr	r1, [r3, #4]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	005b      	lsls	r3, r3, #1
 8007fd2:	440b      	add	r3, r1
 8007fd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8007fd8:	3301      	adds	r3, #1
 8007fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe2:	e00f      	b.n	8008004 <HAL_I2C_Init+0x1dc>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	1e58      	subs	r0, r3, #1
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6859      	ldr	r1, [r3, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	0099      	lsls	r1, r3, #2
 8007ff4:	440b      	add	r3, r1
 8007ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008000:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008004:	6879      	ldr	r1, [r7, #4]
 8008006:	6809      	ldr	r1, [r1, #0]
 8008008:	4313      	orrs	r3, r2
 800800a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	69da      	ldr	r2, [r3, #28]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	431a      	orrs	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008032:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	6911      	ldr	r1, [r2, #16]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	68d2      	ldr	r2, [r2, #12]
 800803e:	4311      	orrs	r1, r2
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	6812      	ldr	r2, [r2, #0]
 8008044:	430b      	orrs	r3, r1
 8008046:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	695a      	ldr	r2, [r3, #20]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	431a      	orrs	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	430a      	orrs	r2, r1
 8008062:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f042 0201 	orr.w	r2, r2, #1
 8008072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2220      	movs	r2, #32
 800807e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	000186a0 	.word	0x000186a0
 80080a0:	001e847f 	.word	0x001e847f
 80080a4:	003d08ff 	.word	0x003d08ff
 80080a8:	431bde83 	.word	0x431bde83
 80080ac:	10624dd3 	.word	0x10624dd3

080080b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b088      	sub	sp, #32
 80080b4:	af02      	add	r7, sp, #8
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	607a      	str	r2, [r7, #4]
 80080ba:	461a      	mov	r2, r3
 80080bc:	460b      	mov	r3, r1
 80080be:	817b      	strh	r3, [r7, #10]
 80080c0:	4613      	mov	r3, r2
 80080c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80080c4:	f7fe ff7a 	bl	8006fbc <HAL_GetTick>
 80080c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b20      	cmp	r3, #32
 80080d4:	f040 80e0 	bne.w	8008298 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	2319      	movs	r3, #25
 80080de:	2201      	movs	r2, #1
 80080e0:	4970      	ldr	r1, [pc, #448]	; (80082a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 fe02 	bl	8008cec <I2C_WaitOnFlagUntilTimeout>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80080ee:	2302      	movs	r3, #2
 80080f0:	e0d3      	b.n	800829a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d101      	bne.n	8008100 <HAL_I2C_Master_Transmit+0x50>
 80080fc:	2302      	movs	r3, #2
 80080fe:	e0cc      	b.n	800829a <HAL_I2C_Master_Transmit+0x1ea>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b01      	cmp	r3, #1
 8008114:	d007      	beq.n	8008126 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f042 0201 	orr.w	r2, r2, #1
 8008124:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008134:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2221      	movs	r2, #33	; 0x21
 800813a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2210      	movs	r2, #16
 8008142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	893a      	ldrh	r2, [r7, #8]
 8008156:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800815c:	b29a      	uxth	r2, r3
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	4a50      	ldr	r2, [pc, #320]	; (80082a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8008166:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008168:	8979      	ldrh	r1, [r7, #10]
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	6a3a      	ldr	r2, [r7, #32]
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 fbbc 	bl	80088ec <I2C_MasterRequestWrite>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e08d      	b.n	800829a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800817e:	2300      	movs	r3, #0
 8008180:	613b      	str	r3, [r7, #16]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	613b      	str	r3, [r7, #16]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	613b      	str	r3, [r7, #16]
 8008192:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008194:	e066      	b.n	8008264 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	6a39      	ldr	r1, [r7, #32]
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 fe7c 	bl	8008e98 <I2C_WaitOnTXEFlagUntilTimeout>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00d      	beq.n	80081c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081aa:	2b04      	cmp	r3, #4
 80081ac:	d107      	bne.n	80081be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e06b      	b.n	800829a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c6:	781a      	ldrb	r2, [r3, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	1c5a      	adds	r2, r3, #1
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081dc:	b29b      	uxth	r3, r3
 80081de:	3b01      	subs	r3, #1
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ea:	3b01      	subs	r3, #1
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	695b      	ldr	r3, [r3, #20]
 80081f8:	f003 0304 	and.w	r3, r3, #4
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	d11b      	bne.n	8008238 <HAL_I2C_Master_Transmit+0x188>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008204:	2b00      	cmp	r3, #0
 8008206:	d017      	beq.n	8008238 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820c:	781a      	ldrb	r2, [r3, #0]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	1c5a      	adds	r2, r3, #1
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008222:	b29b      	uxth	r3, r3
 8008224:	3b01      	subs	r3, #1
 8008226:	b29a      	uxth	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008230:	3b01      	subs	r3, #1
 8008232:	b29a      	uxth	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	6a39      	ldr	r1, [r7, #32]
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f000 fe6c 	bl	8008f1a <I2C_WaitOnBTFFlagUntilTimeout>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00d      	beq.n	8008264 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	2b04      	cmp	r3, #4
 800824e:	d107      	bne.n	8008260 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800825e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e01a      	b.n	800829a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008268:	2b00      	cmp	r3, #0
 800826a:	d194      	bne.n	8008196 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800827a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2220      	movs	r2, #32
 8008280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	e000      	b.n	800829a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008298:	2302      	movs	r3, #2
  }
}
 800829a:	4618      	mov	r0, r3
 800829c:	3718      	adds	r7, #24
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	00100002 	.word	0x00100002
 80082a8:	ffff0000 	.word	0xffff0000

080082ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b088      	sub	sp, #32
 80082b0:	af02      	add	r7, sp, #8
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	4608      	mov	r0, r1
 80082b6:	4611      	mov	r1, r2
 80082b8:	461a      	mov	r2, r3
 80082ba:	4603      	mov	r3, r0
 80082bc:	817b      	strh	r3, [r7, #10]
 80082be:	460b      	mov	r3, r1
 80082c0:	813b      	strh	r3, [r7, #8]
 80082c2:	4613      	mov	r3, r2
 80082c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80082c6:	f7fe fe79 	bl	8006fbc <HAL_GetTick>
 80082ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b20      	cmp	r3, #32
 80082d6:	f040 80d9 	bne.w	800848c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	2319      	movs	r3, #25
 80082e0:	2201      	movs	r2, #1
 80082e2:	496d      	ldr	r1, [pc, #436]	; (8008498 <HAL_I2C_Mem_Write+0x1ec>)
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 fd01 	bl	8008cec <I2C_WaitOnFlagUntilTimeout>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80082f0:	2302      	movs	r3, #2
 80082f2:	e0cc      	b.n	800848e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d101      	bne.n	8008302 <HAL_I2C_Mem_Write+0x56>
 80082fe:	2302      	movs	r3, #2
 8008300:	e0c5      	b.n	800848e <HAL_I2C_Mem_Write+0x1e2>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b01      	cmp	r3, #1
 8008316:	d007      	beq.n	8008328 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f042 0201 	orr.w	r2, r2, #1
 8008326:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008336:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2221      	movs	r2, #33	; 0x21
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2240      	movs	r2, #64	; 0x40
 8008344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6a3a      	ldr	r2, [r7, #32]
 8008352:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008358:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800835e:	b29a      	uxth	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4a4d      	ldr	r2, [pc, #308]	; (800849c <HAL_I2C_Mem_Write+0x1f0>)
 8008368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800836a:	88f8      	ldrh	r0, [r7, #6]
 800836c:	893a      	ldrh	r2, [r7, #8]
 800836e:	8979      	ldrh	r1, [r7, #10]
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	9301      	str	r3, [sp, #4]
 8008374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	4603      	mov	r3, r0
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 fb38 	bl	80089f0 <I2C_RequestMemoryWrite>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d052      	beq.n	800842c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e081      	b.n	800848e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 fd82 	bl	8008e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00d      	beq.n	80083b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839e:	2b04      	cmp	r3, #4
 80083a0:	d107      	bne.n	80083b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e06b      	b.n	800848e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ba:	781a      	ldrb	r2, [r3, #0]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d0:	3b01      	subs	r3, #1
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083dc:	b29b      	uxth	r3, r3
 80083de:	3b01      	subs	r3, #1
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	f003 0304 	and.w	r3, r3, #4
 80083f0:	2b04      	cmp	r3, #4
 80083f2:	d11b      	bne.n	800842c <HAL_I2C_Mem_Write+0x180>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d017      	beq.n	800842c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008400:	781a      	ldrb	r2, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008416:	3b01      	subs	r3, #1
 8008418:	b29a      	uxth	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008422:	b29b      	uxth	r3, r3
 8008424:	3b01      	subs	r3, #1
 8008426:	b29a      	uxth	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1aa      	bne.n	800838a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f000 fd6e 	bl	8008f1a <I2C_WaitOnBTFFlagUntilTimeout>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00d      	beq.n	8008460 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008448:	2b04      	cmp	r3, #4
 800844a:	d107      	bne.n	800845c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800845a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e016      	b.n	800848e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800846e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2220      	movs	r2, #32
 8008474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008488:	2300      	movs	r3, #0
 800848a:	e000      	b.n	800848e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800848c:	2302      	movs	r3, #2
  }
}
 800848e:	4618      	mov	r0, r3
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	00100002 	.word	0x00100002
 800849c:	ffff0000 	.word	0xffff0000

080084a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08c      	sub	sp, #48	; 0x30
 80084a4:	af02      	add	r7, sp, #8
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	4608      	mov	r0, r1
 80084aa:	4611      	mov	r1, r2
 80084ac:	461a      	mov	r2, r3
 80084ae:	4603      	mov	r3, r0
 80084b0:	817b      	strh	r3, [r7, #10]
 80084b2:	460b      	mov	r3, r1
 80084b4:	813b      	strh	r3, [r7, #8]
 80084b6:	4613      	mov	r3, r2
 80084b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80084ba:	f7fe fd7f 	bl	8006fbc <HAL_GetTick>
 80084be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	2b20      	cmp	r3, #32
 80084ca:	f040 8208 	bne.w	80088de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	2319      	movs	r3, #25
 80084d4:	2201      	movs	r2, #1
 80084d6:	497b      	ldr	r1, [pc, #492]	; (80086c4 <HAL_I2C_Mem_Read+0x224>)
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 fc07 	bl	8008cec <I2C_WaitOnFlagUntilTimeout>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80084e4:	2302      	movs	r3, #2
 80084e6:	e1fb      	b.n	80088e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d101      	bne.n	80084f6 <HAL_I2C_Mem_Read+0x56>
 80084f2:	2302      	movs	r3, #2
 80084f4:	e1f4      	b.n	80088e0 <HAL_I2C_Mem_Read+0x440>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b01      	cmp	r3, #1
 800850a:	d007      	beq.n	800851c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f042 0201 	orr.w	r2, r2, #1
 800851a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800852a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2222      	movs	r2, #34	; 0x22
 8008530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2240      	movs	r2, #64	; 0x40
 8008538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800854c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008552:	b29a      	uxth	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4a5b      	ldr	r2, [pc, #364]	; (80086c8 <HAL_I2C_Mem_Read+0x228>)
 800855c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800855e:	88f8      	ldrh	r0, [r7, #6]
 8008560:	893a      	ldrh	r2, [r7, #8]
 8008562:	8979      	ldrh	r1, [r7, #10]
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008566:	9301      	str	r3, [sp, #4]
 8008568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	4603      	mov	r3, r0
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f000 fad4 	bl	8008b1c <I2C_RequestMemoryRead>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e1b0      	b.n	80088e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008582:	2b00      	cmp	r3, #0
 8008584:	d113      	bne.n	80085ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008586:	2300      	movs	r3, #0
 8008588:	623b      	str	r3, [r7, #32]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	623b      	str	r3, [r7, #32]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	623b      	str	r3, [r7, #32]
 800859a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085aa:	601a      	str	r2, [r3, #0]
 80085ac:	e184      	b.n	80088b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d11b      	bne.n	80085ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085c6:	2300      	movs	r3, #0
 80085c8:	61fb      	str	r3, [r7, #28]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	695b      	ldr	r3, [r3, #20]
 80085d0:	61fb      	str	r3, [r7, #28]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	61fb      	str	r3, [r7, #28]
 80085da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	e164      	b.n	80088b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d11b      	bne.n	800862e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008604:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008614:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008616:	2300      	movs	r3, #0
 8008618:	61bb      	str	r3, [r7, #24]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	61bb      	str	r3, [r7, #24]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	61bb      	str	r3, [r7, #24]
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	e144      	b.n	80088b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800862e:	2300      	movs	r3, #0
 8008630:	617b      	str	r3, [r7, #20]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	617b      	str	r3, [r7, #20]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	617b      	str	r3, [r7, #20]
 8008642:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008644:	e138      	b.n	80088b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800864a:	2b03      	cmp	r3, #3
 800864c:	f200 80f1 	bhi.w	8008832 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008654:	2b01      	cmp	r3, #1
 8008656:	d123      	bne.n	80086a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 fc9d 	bl	8008f9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e139      	b.n	80088e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	691a      	ldr	r2, [r3, #16]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008676:	b2d2      	uxtb	r2, r2
 8008678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867e:	1c5a      	adds	r2, r3, #1
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008688:	3b01      	subs	r3, #1
 800868a:	b29a      	uxth	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008694:	b29b      	uxth	r3, r3
 8008696:	3b01      	subs	r3, #1
 8008698:	b29a      	uxth	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800869e:	e10b      	b.n	80088b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d14e      	bne.n	8008746 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ae:	2200      	movs	r2, #0
 80086b0:	4906      	ldr	r1, [pc, #24]	; (80086cc <HAL_I2C_Mem_Read+0x22c>)
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 fb1a 	bl	8008cec <I2C_WaitOnFlagUntilTimeout>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d008      	beq.n	80086d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e10e      	b.n	80088e0 <HAL_I2C_Mem_Read+0x440>
 80086c2:	bf00      	nop
 80086c4:	00100002 	.word	0x00100002
 80086c8:	ffff0000 	.word	0xffff0000
 80086cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	691a      	ldr	r2, [r3, #16]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ea:	b2d2      	uxtb	r2, r2
 80086ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086fc:	3b01      	subs	r3, #1
 80086fe:	b29a      	uxth	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008708:	b29b      	uxth	r3, r3
 800870a:	3b01      	subs	r3, #1
 800870c:	b29a      	uxth	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	691a      	ldr	r2, [r3, #16]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	b2d2      	uxtb	r2, r2
 800871e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800872e:	3b01      	subs	r3, #1
 8008730:	b29a      	uxth	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800873a:	b29b      	uxth	r3, r3
 800873c:	3b01      	subs	r3, #1
 800873e:	b29a      	uxth	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008744:	e0b8      	b.n	80088b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874c:	2200      	movs	r2, #0
 800874e:	4966      	ldr	r1, [pc, #408]	; (80088e8 <HAL_I2C_Mem_Read+0x448>)
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 facb 	bl	8008cec <I2C_WaitOnFlagUntilTimeout>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d001      	beq.n	8008760 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	e0bf      	b.n	80088e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800876e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	691a      	ldr	r2, [r3, #16]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877a:	b2d2      	uxtb	r2, r2
 800877c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008782:	1c5a      	adds	r2, r3, #1
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800878c:	3b01      	subs	r3, #1
 800878e:	b29a      	uxth	r2, r3
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008798:	b29b      	uxth	r3, r3
 800879a:	3b01      	subs	r3, #1
 800879c:	b29a      	uxth	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a8:	2200      	movs	r2, #0
 80087aa:	494f      	ldr	r1, [pc, #316]	; (80088e8 <HAL_I2C_Mem_Read+0x448>)
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 fa9d 	bl	8008cec <I2C_WaitOnFlagUntilTimeout>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e091      	b.n	80088e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	691a      	ldr	r2, [r3, #16]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d6:	b2d2      	uxtb	r2, r2
 80087d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087de:	1c5a      	adds	r2, r3, #1
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087e8:	3b01      	subs	r3, #1
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	3b01      	subs	r3, #1
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	691a      	ldr	r2, [r3, #16]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	b2d2      	uxtb	r2, r2
 800880a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008810:	1c5a      	adds	r2, r3, #1
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800881a:	3b01      	subs	r3, #1
 800881c:	b29a      	uxth	r2, r3
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008826:	b29b      	uxth	r3, r3
 8008828:	3b01      	subs	r3, #1
 800882a:	b29a      	uxth	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008830:	e042      	b.n	80088b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008834:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f000 fbb0 	bl	8008f9c <I2C_WaitOnRXNEFlagUntilTimeout>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e04c      	b.n	80088e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	691a      	ldr	r2, [r3, #16]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	b2d2      	uxtb	r2, r2
 8008852:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	1c5a      	adds	r2, r3, #1
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008862:	3b01      	subs	r3, #1
 8008864:	b29a      	uxth	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800886e:	b29b      	uxth	r3, r3
 8008870:	3b01      	subs	r3, #1
 8008872:	b29a      	uxth	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	f003 0304 	and.w	r3, r3, #4
 8008882:	2b04      	cmp	r3, #4
 8008884:	d118      	bne.n	80088b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	691a      	ldr	r2, [r3, #16]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	b2d2      	uxtb	r2, r2
 8008892:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	1c5a      	adds	r2, r3, #1
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088a2:	3b01      	subs	r3, #1
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	3b01      	subs	r3, #1
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f47f aec2 	bne.w	8008646 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	e000      	b.n	80088e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80088de:	2302      	movs	r3, #2
  }
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3728      	adds	r7, #40	; 0x28
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	00010004 	.word	0x00010004

080088ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b088      	sub	sp, #32
 80088f0:	af02      	add	r7, sp, #8
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	607a      	str	r2, [r7, #4]
 80088f6:	603b      	str	r3, [r7, #0]
 80088f8:	460b      	mov	r3, r1
 80088fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008900:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2b08      	cmp	r3, #8
 8008906:	d006      	beq.n	8008916 <I2C_MasterRequestWrite+0x2a>
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d003      	beq.n	8008916 <I2C_MasterRequestWrite+0x2a>
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008914:	d108      	bne.n	8008928 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008924:	601a      	str	r2, [r3, #0]
 8008926:	e00b      	b.n	8008940 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892c:	2b12      	cmp	r3, #18
 800892e:	d107      	bne.n	8008940 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800893e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 f9cd 	bl	8008cec <I2C_WaitOnFlagUntilTimeout>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00d      	beq.n	8008974 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008966:	d103      	bne.n	8008970 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800896e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e035      	b.n	80089e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800897c:	d108      	bne.n	8008990 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800897e:	897b      	ldrh	r3, [r7, #10]
 8008980:	b2db      	uxtb	r3, r3
 8008982:	461a      	mov	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800898c:	611a      	str	r2, [r3, #16]
 800898e:	e01b      	b.n	80089c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008990:	897b      	ldrh	r3, [r7, #10]
 8008992:	11db      	asrs	r3, r3, #7
 8008994:	b2db      	uxtb	r3, r3
 8008996:	f003 0306 	and.w	r3, r3, #6
 800899a:	b2db      	uxtb	r3, r3
 800899c:	f063 030f 	orn	r3, r3, #15
 80089a0:	b2da      	uxtb	r2, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	490e      	ldr	r1, [pc, #56]	; (80089e8 <I2C_MasterRequestWrite+0xfc>)
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f000 f9f3 	bl	8008d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e010      	b.n	80089e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80089be:	897b      	ldrh	r3, [r7, #10]
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	4907      	ldr	r1, [pc, #28]	; (80089ec <I2C_MasterRequestWrite+0x100>)
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 f9e3 	bl	8008d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d001      	beq.n	80089de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e000      	b.n	80089e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3718      	adds	r7, #24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	00010008 	.word	0x00010008
 80089ec:	00010002 	.word	0x00010002

080089f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b088      	sub	sp, #32
 80089f4:	af02      	add	r7, sp, #8
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	4608      	mov	r0, r1
 80089fa:	4611      	mov	r1, r2
 80089fc:	461a      	mov	r2, r3
 80089fe:	4603      	mov	r3, r0
 8008a00:	817b      	strh	r3, [r7, #10]
 8008a02:	460b      	mov	r3, r1
 8008a04:	813b      	strh	r3, [r7, #8]
 8008a06:	4613      	mov	r3, r2
 8008a08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 f960 	bl	8008cec <I2C_WaitOnFlagUntilTimeout>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00d      	beq.n	8008a4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a40:	d103      	bne.n	8008a4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e05f      	b.n	8008b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a4e:	897b      	ldrh	r3, [r7, #10]
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	461a      	mov	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	6a3a      	ldr	r2, [r7, #32]
 8008a62:	492d      	ldr	r1, [pc, #180]	; (8008b18 <I2C_RequestMemoryWrite+0x128>)
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 f998 	bl	8008d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e04c      	b.n	8008b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a74:	2300      	movs	r3, #0
 8008a76:	617b      	str	r3, [r7, #20]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	617b      	str	r3, [r7, #20]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	617b      	str	r3, [r7, #20]
 8008a88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a8c:	6a39      	ldr	r1, [r7, #32]
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 fa02 	bl	8008e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00d      	beq.n	8008ab6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	d107      	bne.n	8008ab2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ab0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e02b      	b.n	8008b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ab6:	88fb      	ldrh	r3, [r7, #6]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d105      	bne.n	8008ac8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008abc:	893b      	ldrh	r3, [r7, #8]
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	611a      	str	r2, [r3, #16]
 8008ac6:	e021      	b.n	8008b0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008ac8:	893b      	ldrh	r3, [r7, #8]
 8008aca:	0a1b      	lsrs	r3, r3, #8
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad8:	6a39      	ldr	r1, [r7, #32]
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f000 f9dc 	bl	8008e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00d      	beq.n	8008b02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	d107      	bne.n	8008afe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008afc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e005      	b.n	8008b0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b02:	893b      	ldrh	r3, [r7, #8]
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	00010002 	.word	0x00010002

08008b1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b088      	sub	sp, #32
 8008b20:	af02      	add	r7, sp, #8
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	4608      	mov	r0, r1
 8008b26:	4611      	mov	r1, r2
 8008b28:	461a      	mov	r2, r3
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	817b      	strh	r3, [r7, #10]
 8008b2e:	460b      	mov	r3, r1
 8008b30:	813b      	strh	r3, [r7, #8]
 8008b32:	4613      	mov	r3, r2
 8008b34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	6a3b      	ldr	r3, [r7, #32]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 f8c2 	bl	8008cec <I2C_WaitOnFlagUntilTimeout>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00d      	beq.n	8008b8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b7c:	d103      	bne.n	8008b86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e0aa      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b8a:	897b      	ldrh	r3, [r7, #10]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	461a      	mov	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008b98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	6a3a      	ldr	r2, [r7, #32]
 8008b9e:	4952      	ldr	r1, [pc, #328]	; (8008ce8 <I2C_RequestMemoryRead+0x1cc>)
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 f8fa 	bl	8008d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e097      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	617b      	str	r3, [r7, #20]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	617b      	str	r3, [r7, #20]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	617b      	str	r3, [r7, #20]
 8008bc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc8:	6a39      	ldr	r1, [r7, #32]
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f000 f964 	bl	8008e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00d      	beq.n	8008bf2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bda:	2b04      	cmp	r3, #4
 8008bdc:	d107      	bne.n	8008bee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e076      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008bf2:	88fb      	ldrh	r3, [r7, #6]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d105      	bne.n	8008c04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008bf8:	893b      	ldrh	r3, [r7, #8]
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	611a      	str	r2, [r3, #16]
 8008c02:	e021      	b.n	8008c48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008c04:	893b      	ldrh	r3, [r7, #8]
 8008c06:	0a1b      	lsrs	r3, r3, #8
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c14:	6a39      	ldr	r1, [r7, #32]
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f000 f93e 	bl	8008e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00d      	beq.n	8008c3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c26:	2b04      	cmp	r3, #4
 8008c28:	d107      	bne.n	8008c3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e050      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c3e:	893b      	ldrh	r3, [r7, #8]
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4a:	6a39      	ldr	r1, [r7, #32]
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f000 f923 	bl	8008e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00d      	beq.n	8008c74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5c:	2b04      	cmp	r3, #4
 8008c5e:	d107      	bne.n	8008c70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e035      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 f82b 	bl	8008cec <I2C_WaitOnFlagUntilTimeout>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00d      	beq.n	8008cb8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008caa:	d103      	bne.n	8008cb4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e013      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008cb8:	897b      	ldrh	r3, [r7, #10]
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	f043 0301 	orr.w	r3, r3, #1
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	6a3a      	ldr	r2, [r7, #32]
 8008ccc:	4906      	ldr	r1, [pc, #24]	; (8008ce8 <I2C_RequestMemoryRead+0x1cc>)
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f000 f863 	bl	8008d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e000      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3718      	adds	r7, #24
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	00010002 	.word	0x00010002

08008cec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	603b      	str	r3, [r7, #0]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cfc:	e025      	b.n	8008d4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d04:	d021      	beq.n	8008d4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d06:	f7fe f959 	bl	8006fbc <HAL_GetTick>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d302      	bcc.n	8008d1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d116      	bne.n	8008d4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2220      	movs	r2, #32
 8008d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d36:	f043 0220 	orr.w	r2, r3, #32
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e023      	b.n	8008d92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	0c1b      	lsrs	r3, r3, #16
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d10d      	bne.n	8008d70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	43da      	mvns	r2, r3
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	4013      	ands	r3, r2
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	bf0c      	ite	eq
 8008d66:	2301      	moveq	r3, #1
 8008d68:	2300      	movne	r3, #0
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	e00c      	b.n	8008d8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	43da      	mvns	r2, r3
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bf0c      	ite	eq
 8008d82:	2301      	moveq	r3, #1
 8008d84:	2300      	movne	r3, #0
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	461a      	mov	r2, r3
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d0b6      	beq.n	8008cfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b084      	sub	sp, #16
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	607a      	str	r2, [r7, #4]
 8008da6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008da8:	e051      	b.n	8008e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008db8:	d123      	bne.n	8008e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dc8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008dd2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2220      	movs	r2, #32
 8008dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dee:	f043 0204 	orr.w	r2, r3, #4
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e046      	b.n	8008e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e08:	d021      	beq.n	8008e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e0a:	f7fe f8d7 	bl	8006fbc <HAL_GetTick>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d302      	bcc.n	8008e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d116      	bne.n	8008e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2220      	movs	r2, #32
 8008e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3a:	f043 0220 	orr.w	r2, r3, #32
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e020      	b.n	8008e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	0c1b      	lsrs	r3, r3, #16
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d10c      	bne.n	8008e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	43da      	mvns	r2, r3
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	4013      	ands	r3, r2
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	bf14      	ite	ne
 8008e6a:	2301      	movne	r3, #1
 8008e6c:	2300      	moveq	r3, #0
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	e00b      	b.n	8008e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	43da      	mvns	r2, r3
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	bf14      	ite	ne
 8008e84:	2301      	movne	r3, #1
 8008e86:	2300      	moveq	r3, #0
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d18d      	bne.n	8008daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ea4:	e02d      	b.n	8008f02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 f8ce 	bl	8009048 <I2C_IsAcknowledgeFailed>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e02d      	b.n	8008f12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebc:	d021      	beq.n	8008f02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ebe:	f7fe f87d 	bl	8006fbc <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d302      	bcc.n	8008ed4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d116      	bne.n	8008f02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2220      	movs	r2, #32
 8008ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eee:	f043 0220 	orr.w	r2, r3, #32
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e007      	b.n	8008f12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f0c:	2b80      	cmp	r3, #128	; 0x80
 8008f0e:	d1ca      	bne.n	8008ea6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	60f8      	str	r0, [r7, #12]
 8008f22:	60b9      	str	r1, [r7, #8]
 8008f24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f26:	e02d      	b.n	8008f84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f000 f88d 	bl	8009048 <I2C_IsAcknowledgeFailed>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e02d      	b.n	8008f94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3e:	d021      	beq.n	8008f84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f40:	f7fe f83c 	bl	8006fbc <HAL_GetTick>
 8008f44:	4602      	mov	r2, r0
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d302      	bcc.n	8008f56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d116      	bne.n	8008f84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2220      	movs	r2, #32
 8008f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f70:	f043 0220 	orr.w	r2, r3, #32
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e007      	b.n	8008f94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	f003 0304 	and.w	r3, r3, #4
 8008f8e:	2b04      	cmp	r3, #4
 8008f90:	d1ca      	bne.n	8008f28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008fa8:	e042      	b.n	8009030 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	f003 0310 	and.w	r3, r3, #16
 8008fb4:	2b10      	cmp	r3, #16
 8008fb6:	d119      	bne.n	8008fec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f06f 0210 	mvn.w	r2, #16
 8008fc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2220      	movs	r2, #32
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e029      	b.n	8009040 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fec:	f7fd ffe6 	bl	8006fbc <HAL_GetTick>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d302      	bcc.n	8009002 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d116      	bne.n	8009030 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2220      	movs	r2, #32
 800900c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901c:	f043 0220 	orr.w	r2, r3, #32
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e007      	b.n	8009040 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800903a:	2b40      	cmp	r3, #64	; 0x40
 800903c:	d1b5      	bne.n	8008faa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800905a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800905e:	d11b      	bne.n	8009098 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009068:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2220      	movs	r2, #32
 8009074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009084:	f043 0204 	orr.w	r2, r3, #4
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e000      	b.n	800909a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
	...

080090a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d101      	bne.n	80090ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e264      	b.n	8009584 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d075      	beq.n	80091b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80090c6:	4ba3      	ldr	r3, [pc, #652]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f003 030c 	and.w	r3, r3, #12
 80090ce:	2b04      	cmp	r3, #4
 80090d0:	d00c      	beq.n	80090ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80090d2:	4ba0      	ldr	r3, [pc, #640]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80090da:	2b08      	cmp	r3, #8
 80090dc:	d112      	bne.n	8009104 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80090de:	4b9d      	ldr	r3, [pc, #628]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090ea:	d10b      	bne.n	8009104 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090ec:	4b99      	ldr	r3, [pc, #612]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d05b      	beq.n	80091b0 <HAL_RCC_OscConfig+0x108>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d157      	bne.n	80091b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e23f      	b.n	8009584 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800910c:	d106      	bne.n	800911c <HAL_RCC_OscConfig+0x74>
 800910e:	4b91      	ldr	r3, [pc, #580]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a90      	ldr	r2, [pc, #576]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 8009114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009118:	6013      	str	r3, [r2, #0]
 800911a:	e01d      	b.n	8009158 <HAL_RCC_OscConfig+0xb0>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009124:	d10c      	bne.n	8009140 <HAL_RCC_OscConfig+0x98>
 8009126:	4b8b      	ldr	r3, [pc, #556]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a8a      	ldr	r2, [pc, #552]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 800912c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009130:	6013      	str	r3, [r2, #0]
 8009132:	4b88      	ldr	r3, [pc, #544]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a87      	ldr	r2, [pc, #540]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 8009138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800913c:	6013      	str	r3, [r2, #0]
 800913e:	e00b      	b.n	8009158 <HAL_RCC_OscConfig+0xb0>
 8009140:	4b84      	ldr	r3, [pc, #528]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a83      	ldr	r2, [pc, #524]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 8009146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800914a:	6013      	str	r3, [r2, #0]
 800914c:	4b81      	ldr	r3, [pc, #516]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a80      	ldr	r2, [pc, #512]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 8009152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d013      	beq.n	8009188 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009160:	f7fd ff2c 	bl	8006fbc <HAL_GetTick>
 8009164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009166:	e008      	b.n	800917a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009168:	f7fd ff28 	bl	8006fbc <HAL_GetTick>
 800916c:	4602      	mov	r2, r0
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	2b64      	cmp	r3, #100	; 0x64
 8009174:	d901      	bls.n	800917a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009176:	2303      	movs	r3, #3
 8009178:	e204      	b.n	8009584 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800917a:	4b76      	ldr	r3, [pc, #472]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d0f0      	beq.n	8009168 <HAL_RCC_OscConfig+0xc0>
 8009186:	e014      	b.n	80091b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009188:	f7fd ff18 	bl	8006fbc <HAL_GetTick>
 800918c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800918e:	e008      	b.n	80091a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009190:	f7fd ff14 	bl	8006fbc <HAL_GetTick>
 8009194:	4602      	mov	r2, r0
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	2b64      	cmp	r3, #100	; 0x64
 800919c:	d901      	bls.n	80091a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e1f0      	b.n	8009584 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091a2:	4b6c      	ldr	r3, [pc, #432]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1f0      	bne.n	8009190 <HAL_RCC_OscConfig+0xe8>
 80091ae:	e000      	b.n	80091b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 0302 	and.w	r3, r3, #2
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d063      	beq.n	8009286 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80091be:	4b65      	ldr	r3, [pc, #404]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	f003 030c 	and.w	r3, r3, #12
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00b      	beq.n	80091e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80091ca:	4b62      	ldr	r3, [pc, #392]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80091d2:	2b08      	cmp	r3, #8
 80091d4:	d11c      	bne.n	8009210 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80091d6:	4b5f      	ldr	r3, [pc, #380]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d116      	bne.n	8009210 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80091e2:	4b5c      	ldr	r3, [pc, #368]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 0302 	and.w	r3, r3, #2
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d005      	beq.n	80091fa <HAL_RCC_OscConfig+0x152>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d001      	beq.n	80091fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e1c4      	b.n	8009584 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091fa:	4b56      	ldr	r3, [pc, #344]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	00db      	lsls	r3, r3, #3
 8009208:	4952      	ldr	r1, [pc, #328]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 800920a:	4313      	orrs	r3, r2
 800920c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800920e:	e03a      	b.n	8009286 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d020      	beq.n	800925a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009218:	4b4f      	ldr	r3, [pc, #316]	; (8009358 <HAL_RCC_OscConfig+0x2b0>)
 800921a:	2201      	movs	r2, #1
 800921c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800921e:	f7fd fecd 	bl	8006fbc <HAL_GetTick>
 8009222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009224:	e008      	b.n	8009238 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009226:	f7fd fec9 	bl	8006fbc <HAL_GetTick>
 800922a:	4602      	mov	r2, r0
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	2b02      	cmp	r3, #2
 8009232:	d901      	bls.n	8009238 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009234:	2303      	movs	r3, #3
 8009236:	e1a5      	b.n	8009584 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009238:	4b46      	ldr	r3, [pc, #280]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 0302 	and.w	r3, r3, #2
 8009240:	2b00      	cmp	r3, #0
 8009242:	d0f0      	beq.n	8009226 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009244:	4b43      	ldr	r3, [pc, #268]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	00db      	lsls	r3, r3, #3
 8009252:	4940      	ldr	r1, [pc, #256]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 8009254:	4313      	orrs	r3, r2
 8009256:	600b      	str	r3, [r1, #0]
 8009258:	e015      	b.n	8009286 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800925a:	4b3f      	ldr	r3, [pc, #252]	; (8009358 <HAL_RCC_OscConfig+0x2b0>)
 800925c:	2200      	movs	r2, #0
 800925e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009260:	f7fd feac 	bl	8006fbc <HAL_GetTick>
 8009264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009266:	e008      	b.n	800927a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009268:	f7fd fea8 	bl	8006fbc <HAL_GetTick>
 800926c:	4602      	mov	r2, r0
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	2b02      	cmp	r3, #2
 8009274:	d901      	bls.n	800927a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009276:	2303      	movs	r3, #3
 8009278:	e184      	b.n	8009584 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800927a:	4b36      	ldr	r3, [pc, #216]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 0302 	and.w	r3, r3, #2
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1f0      	bne.n	8009268 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0308 	and.w	r3, r3, #8
 800928e:	2b00      	cmp	r3, #0
 8009290:	d030      	beq.n	80092f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d016      	beq.n	80092c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800929a:	4b30      	ldr	r3, [pc, #192]	; (800935c <HAL_RCC_OscConfig+0x2b4>)
 800929c:	2201      	movs	r2, #1
 800929e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092a0:	f7fd fe8c 	bl	8006fbc <HAL_GetTick>
 80092a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092a6:	e008      	b.n	80092ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80092a8:	f7fd fe88 	bl	8006fbc <HAL_GetTick>
 80092ac:	4602      	mov	r2, r0
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d901      	bls.n	80092ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80092b6:	2303      	movs	r3, #3
 80092b8:	e164      	b.n	8009584 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092ba:	4b26      	ldr	r3, [pc, #152]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 80092bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092be:	f003 0302 	and.w	r3, r3, #2
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d0f0      	beq.n	80092a8 <HAL_RCC_OscConfig+0x200>
 80092c6:	e015      	b.n	80092f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092c8:	4b24      	ldr	r3, [pc, #144]	; (800935c <HAL_RCC_OscConfig+0x2b4>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80092ce:	f7fd fe75 	bl	8006fbc <HAL_GetTick>
 80092d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80092d4:	e008      	b.n	80092e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80092d6:	f7fd fe71 	bl	8006fbc <HAL_GetTick>
 80092da:	4602      	mov	r2, r0
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d901      	bls.n	80092e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e14d      	b.n	8009584 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80092e8:	4b1a      	ldr	r3, [pc, #104]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 80092ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092ec:	f003 0302 	and.w	r3, r3, #2
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1f0      	bne.n	80092d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0304 	and.w	r3, r3, #4
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 80a0 	beq.w	8009442 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009302:	2300      	movs	r3, #0
 8009304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009306:	4b13      	ldr	r3, [pc, #76]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 8009308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800930e:	2b00      	cmp	r3, #0
 8009310:	d10f      	bne.n	8009332 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009312:	2300      	movs	r3, #0
 8009314:	60bb      	str	r3, [r7, #8]
 8009316:	4b0f      	ldr	r3, [pc, #60]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 8009318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931a:	4a0e      	ldr	r2, [pc, #56]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 800931c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009320:	6413      	str	r3, [r2, #64]	; 0x40
 8009322:	4b0c      	ldr	r3, [pc, #48]	; (8009354 <HAL_RCC_OscConfig+0x2ac>)
 8009324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800932a:	60bb      	str	r3, [r7, #8]
 800932c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800932e:	2301      	movs	r3, #1
 8009330:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009332:	4b0b      	ldr	r3, [pc, #44]	; (8009360 <HAL_RCC_OscConfig+0x2b8>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800933a:	2b00      	cmp	r3, #0
 800933c:	d121      	bne.n	8009382 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800933e:	4b08      	ldr	r3, [pc, #32]	; (8009360 <HAL_RCC_OscConfig+0x2b8>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a07      	ldr	r2, [pc, #28]	; (8009360 <HAL_RCC_OscConfig+0x2b8>)
 8009344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800934a:	f7fd fe37 	bl	8006fbc <HAL_GetTick>
 800934e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009350:	e011      	b.n	8009376 <HAL_RCC_OscConfig+0x2ce>
 8009352:	bf00      	nop
 8009354:	40023800 	.word	0x40023800
 8009358:	42470000 	.word	0x42470000
 800935c:	42470e80 	.word	0x42470e80
 8009360:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009364:	f7fd fe2a 	bl	8006fbc <HAL_GetTick>
 8009368:	4602      	mov	r2, r0
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	2b02      	cmp	r3, #2
 8009370:	d901      	bls.n	8009376 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009372:	2303      	movs	r3, #3
 8009374:	e106      	b.n	8009584 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009376:	4b85      	ldr	r3, [pc, #532]	; (800958c <HAL_RCC_OscConfig+0x4e4>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800937e:	2b00      	cmp	r3, #0
 8009380:	d0f0      	beq.n	8009364 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d106      	bne.n	8009398 <HAL_RCC_OscConfig+0x2f0>
 800938a:	4b81      	ldr	r3, [pc, #516]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 800938c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800938e:	4a80      	ldr	r2, [pc, #512]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 8009390:	f043 0301 	orr.w	r3, r3, #1
 8009394:	6713      	str	r3, [r2, #112]	; 0x70
 8009396:	e01c      	b.n	80093d2 <HAL_RCC_OscConfig+0x32a>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	2b05      	cmp	r3, #5
 800939e:	d10c      	bne.n	80093ba <HAL_RCC_OscConfig+0x312>
 80093a0:	4b7b      	ldr	r3, [pc, #492]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 80093a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a4:	4a7a      	ldr	r2, [pc, #488]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 80093a6:	f043 0304 	orr.w	r3, r3, #4
 80093aa:	6713      	str	r3, [r2, #112]	; 0x70
 80093ac:	4b78      	ldr	r3, [pc, #480]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 80093ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b0:	4a77      	ldr	r2, [pc, #476]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 80093b2:	f043 0301 	orr.w	r3, r3, #1
 80093b6:	6713      	str	r3, [r2, #112]	; 0x70
 80093b8:	e00b      	b.n	80093d2 <HAL_RCC_OscConfig+0x32a>
 80093ba:	4b75      	ldr	r3, [pc, #468]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 80093bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093be:	4a74      	ldr	r2, [pc, #464]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 80093c0:	f023 0301 	bic.w	r3, r3, #1
 80093c4:	6713      	str	r3, [r2, #112]	; 0x70
 80093c6:	4b72      	ldr	r3, [pc, #456]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 80093c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ca:	4a71      	ldr	r2, [pc, #452]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 80093cc:	f023 0304 	bic.w	r3, r3, #4
 80093d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d015      	beq.n	8009406 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093da:	f7fd fdef 	bl	8006fbc <HAL_GetTick>
 80093de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093e0:	e00a      	b.n	80093f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093e2:	f7fd fdeb 	bl	8006fbc <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d901      	bls.n	80093f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e0c5      	b.n	8009584 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093f8:	4b65      	ldr	r3, [pc, #404]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 80093fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fc:	f003 0302 	and.w	r3, r3, #2
 8009400:	2b00      	cmp	r3, #0
 8009402:	d0ee      	beq.n	80093e2 <HAL_RCC_OscConfig+0x33a>
 8009404:	e014      	b.n	8009430 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009406:	f7fd fdd9 	bl	8006fbc <HAL_GetTick>
 800940a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800940c:	e00a      	b.n	8009424 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800940e:	f7fd fdd5 	bl	8006fbc <HAL_GetTick>
 8009412:	4602      	mov	r2, r0
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	f241 3288 	movw	r2, #5000	; 0x1388
 800941c:	4293      	cmp	r3, r2
 800941e:	d901      	bls.n	8009424 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	e0af      	b.n	8009584 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009424:	4b5a      	ldr	r3, [pc, #360]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 8009426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009428:	f003 0302 	and.w	r3, r3, #2
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1ee      	bne.n	800940e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009430:	7dfb      	ldrb	r3, [r7, #23]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d105      	bne.n	8009442 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009436:	4b56      	ldr	r3, [pc, #344]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 8009438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943a:	4a55      	ldr	r2, [pc, #340]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 800943c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009440:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 809b 	beq.w	8009582 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800944c:	4b50      	ldr	r3, [pc, #320]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f003 030c 	and.w	r3, r3, #12
 8009454:	2b08      	cmp	r3, #8
 8009456:	d05c      	beq.n	8009512 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	2b02      	cmp	r3, #2
 800945e:	d141      	bne.n	80094e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009460:	4b4c      	ldr	r3, [pc, #304]	; (8009594 <HAL_RCC_OscConfig+0x4ec>)
 8009462:	2200      	movs	r2, #0
 8009464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009466:	f7fd fda9 	bl	8006fbc <HAL_GetTick>
 800946a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800946c:	e008      	b.n	8009480 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800946e:	f7fd fda5 	bl	8006fbc <HAL_GetTick>
 8009472:	4602      	mov	r2, r0
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	2b02      	cmp	r3, #2
 800947a:	d901      	bls.n	8009480 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800947c:	2303      	movs	r3, #3
 800947e:	e081      	b.n	8009584 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009480:	4b43      	ldr	r3, [pc, #268]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1f0      	bne.n	800946e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	69da      	ldr	r2, [r3, #28]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a1b      	ldr	r3, [r3, #32]
 8009494:	431a      	orrs	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949a:	019b      	lsls	r3, r3, #6
 800949c:	431a      	orrs	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a2:	085b      	lsrs	r3, r3, #1
 80094a4:	3b01      	subs	r3, #1
 80094a6:	041b      	lsls	r3, r3, #16
 80094a8:	431a      	orrs	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ae:	061b      	lsls	r3, r3, #24
 80094b0:	4937      	ldr	r1, [pc, #220]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 80094b2:	4313      	orrs	r3, r2
 80094b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094b6:	4b37      	ldr	r3, [pc, #220]	; (8009594 <HAL_RCC_OscConfig+0x4ec>)
 80094b8:	2201      	movs	r2, #1
 80094ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094bc:	f7fd fd7e 	bl	8006fbc <HAL_GetTick>
 80094c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094c2:	e008      	b.n	80094d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094c4:	f7fd fd7a 	bl	8006fbc <HAL_GetTick>
 80094c8:	4602      	mov	r2, r0
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	1ad3      	subs	r3, r2, r3
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d901      	bls.n	80094d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80094d2:	2303      	movs	r3, #3
 80094d4:	e056      	b.n	8009584 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094d6:	4b2e      	ldr	r3, [pc, #184]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d0f0      	beq.n	80094c4 <HAL_RCC_OscConfig+0x41c>
 80094e2:	e04e      	b.n	8009582 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094e4:	4b2b      	ldr	r3, [pc, #172]	; (8009594 <HAL_RCC_OscConfig+0x4ec>)
 80094e6:	2200      	movs	r2, #0
 80094e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094ea:	f7fd fd67 	bl	8006fbc <HAL_GetTick>
 80094ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094f0:	e008      	b.n	8009504 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094f2:	f7fd fd63 	bl	8006fbc <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d901      	bls.n	8009504 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	e03f      	b.n	8009584 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009504:	4b22      	ldr	r3, [pc, #136]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1f0      	bne.n	80094f2 <HAL_RCC_OscConfig+0x44a>
 8009510:	e037      	b.n	8009582 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d101      	bne.n	800951e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e032      	b.n	8009584 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800951e:	4b1c      	ldr	r3, [pc, #112]	; (8009590 <HAL_RCC_OscConfig+0x4e8>)
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d028      	beq.n	800957e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009536:	429a      	cmp	r2, r3
 8009538:	d121      	bne.n	800957e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009544:	429a      	cmp	r2, r3
 8009546:	d11a      	bne.n	800957e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800954e:	4013      	ands	r3, r2
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009554:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009556:	4293      	cmp	r3, r2
 8009558:	d111      	bne.n	800957e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009564:	085b      	lsrs	r3, r3, #1
 8009566:	3b01      	subs	r3, #1
 8009568:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800956a:	429a      	cmp	r2, r3
 800956c:	d107      	bne.n	800957e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009578:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800957a:	429a      	cmp	r2, r3
 800957c:	d001      	beq.n	8009582 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e000      	b.n	8009584 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3718      	adds	r7, #24
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	40007000 	.word	0x40007000
 8009590:	40023800 	.word	0x40023800
 8009594:	42470060 	.word	0x42470060

08009598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d101      	bne.n	80095ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e0cc      	b.n	8009746 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80095ac:	4b68      	ldr	r3, [pc, #416]	; (8009750 <HAL_RCC_ClockConfig+0x1b8>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0307 	and.w	r3, r3, #7
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d90c      	bls.n	80095d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095ba:	4b65      	ldr	r3, [pc, #404]	; (8009750 <HAL_RCC_ClockConfig+0x1b8>)
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	b2d2      	uxtb	r2, r2
 80095c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095c2:	4b63      	ldr	r3, [pc, #396]	; (8009750 <HAL_RCC_ClockConfig+0x1b8>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 0307 	and.w	r3, r3, #7
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d001      	beq.n	80095d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e0b8      	b.n	8009746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 0302 	and.w	r3, r3, #2
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d020      	beq.n	8009622 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 0304 	and.w	r3, r3, #4
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d005      	beq.n	80095f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80095ec:	4b59      	ldr	r3, [pc, #356]	; (8009754 <HAL_RCC_ClockConfig+0x1bc>)
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	4a58      	ldr	r2, [pc, #352]	; (8009754 <HAL_RCC_ClockConfig+0x1bc>)
 80095f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80095f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 0308 	and.w	r3, r3, #8
 8009600:	2b00      	cmp	r3, #0
 8009602:	d005      	beq.n	8009610 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009604:	4b53      	ldr	r3, [pc, #332]	; (8009754 <HAL_RCC_ClockConfig+0x1bc>)
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	4a52      	ldr	r2, [pc, #328]	; (8009754 <HAL_RCC_ClockConfig+0x1bc>)
 800960a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800960e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009610:	4b50      	ldr	r3, [pc, #320]	; (8009754 <HAL_RCC_ClockConfig+0x1bc>)
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	494d      	ldr	r1, [pc, #308]	; (8009754 <HAL_RCC_ClockConfig+0x1bc>)
 800961e:	4313      	orrs	r3, r2
 8009620:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 0301 	and.w	r3, r3, #1
 800962a:	2b00      	cmp	r3, #0
 800962c:	d044      	beq.n	80096b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d107      	bne.n	8009646 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009636:	4b47      	ldr	r3, [pc, #284]	; (8009754 <HAL_RCC_ClockConfig+0x1bc>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800963e:	2b00      	cmp	r3, #0
 8009640:	d119      	bne.n	8009676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e07f      	b.n	8009746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	2b02      	cmp	r3, #2
 800964c:	d003      	beq.n	8009656 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009652:	2b03      	cmp	r3, #3
 8009654:	d107      	bne.n	8009666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009656:	4b3f      	ldr	r3, [pc, #252]	; (8009754 <HAL_RCC_ClockConfig+0x1bc>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800965e:	2b00      	cmp	r3, #0
 8009660:	d109      	bne.n	8009676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e06f      	b.n	8009746 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009666:	4b3b      	ldr	r3, [pc, #236]	; (8009754 <HAL_RCC_ClockConfig+0x1bc>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 0302 	and.w	r3, r3, #2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d101      	bne.n	8009676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e067      	b.n	8009746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009676:	4b37      	ldr	r3, [pc, #220]	; (8009754 <HAL_RCC_ClockConfig+0x1bc>)
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	f023 0203 	bic.w	r2, r3, #3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	4934      	ldr	r1, [pc, #208]	; (8009754 <HAL_RCC_ClockConfig+0x1bc>)
 8009684:	4313      	orrs	r3, r2
 8009686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009688:	f7fd fc98 	bl	8006fbc <HAL_GetTick>
 800968c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800968e:	e00a      	b.n	80096a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009690:	f7fd fc94 	bl	8006fbc <HAL_GetTick>
 8009694:	4602      	mov	r2, r0
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	f241 3288 	movw	r2, #5000	; 0x1388
 800969e:	4293      	cmp	r3, r2
 80096a0:	d901      	bls.n	80096a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e04f      	b.n	8009746 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096a6:	4b2b      	ldr	r3, [pc, #172]	; (8009754 <HAL_RCC_ClockConfig+0x1bc>)
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f003 020c 	and.w	r2, r3, #12
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d1eb      	bne.n	8009690 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80096b8:	4b25      	ldr	r3, [pc, #148]	; (8009750 <HAL_RCC_ClockConfig+0x1b8>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 0307 	and.w	r3, r3, #7
 80096c0:	683a      	ldr	r2, [r7, #0]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d20c      	bcs.n	80096e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096c6:	4b22      	ldr	r3, [pc, #136]	; (8009750 <HAL_RCC_ClockConfig+0x1b8>)
 80096c8:	683a      	ldr	r2, [r7, #0]
 80096ca:	b2d2      	uxtb	r2, r2
 80096cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80096ce:	4b20      	ldr	r3, [pc, #128]	; (8009750 <HAL_RCC_ClockConfig+0x1b8>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 0307 	and.w	r3, r3, #7
 80096d6:	683a      	ldr	r2, [r7, #0]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d001      	beq.n	80096e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e032      	b.n	8009746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 0304 	and.w	r3, r3, #4
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d008      	beq.n	80096fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80096ec:	4b19      	ldr	r3, [pc, #100]	; (8009754 <HAL_RCC_ClockConfig+0x1bc>)
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	4916      	ldr	r1, [pc, #88]	; (8009754 <HAL_RCC_ClockConfig+0x1bc>)
 80096fa:	4313      	orrs	r3, r2
 80096fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0308 	and.w	r3, r3, #8
 8009706:	2b00      	cmp	r3, #0
 8009708:	d009      	beq.n	800971e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800970a:	4b12      	ldr	r3, [pc, #72]	; (8009754 <HAL_RCC_ClockConfig+0x1bc>)
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	00db      	lsls	r3, r3, #3
 8009718:	490e      	ldr	r1, [pc, #56]	; (8009754 <HAL_RCC_ClockConfig+0x1bc>)
 800971a:	4313      	orrs	r3, r2
 800971c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800971e:	f000 f821 	bl	8009764 <HAL_RCC_GetSysClockFreq>
 8009722:	4602      	mov	r2, r0
 8009724:	4b0b      	ldr	r3, [pc, #44]	; (8009754 <HAL_RCC_ClockConfig+0x1bc>)
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	091b      	lsrs	r3, r3, #4
 800972a:	f003 030f 	and.w	r3, r3, #15
 800972e:	490a      	ldr	r1, [pc, #40]	; (8009758 <HAL_RCC_ClockConfig+0x1c0>)
 8009730:	5ccb      	ldrb	r3, [r1, r3]
 8009732:	fa22 f303 	lsr.w	r3, r2, r3
 8009736:	4a09      	ldr	r2, [pc, #36]	; (800975c <HAL_RCC_ClockConfig+0x1c4>)
 8009738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800973a:	4b09      	ldr	r3, [pc, #36]	; (8009760 <HAL_RCC_ClockConfig+0x1c8>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4618      	mov	r0, r3
 8009740:	f7fd fbf8 	bl	8006f34 <HAL_InitTick>

  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	40023c00 	.word	0x40023c00
 8009754:	40023800 	.word	0x40023800
 8009758:	0801c5c8 	.word	0x0801c5c8
 800975c:	20000008 	.word	0x20000008
 8009760:	2000000c 	.word	0x2000000c

08009764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009764:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009768:	b084      	sub	sp, #16
 800976a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800976c:	2300      	movs	r3, #0
 800976e:	607b      	str	r3, [r7, #4]
 8009770:	2300      	movs	r3, #0
 8009772:	60fb      	str	r3, [r7, #12]
 8009774:	2300      	movs	r3, #0
 8009776:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009778:	2300      	movs	r3, #0
 800977a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800977c:	4b67      	ldr	r3, [pc, #412]	; (800991c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f003 030c 	and.w	r3, r3, #12
 8009784:	2b08      	cmp	r3, #8
 8009786:	d00d      	beq.n	80097a4 <HAL_RCC_GetSysClockFreq+0x40>
 8009788:	2b08      	cmp	r3, #8
 800978a:	f200 80bd 	bhi.w	8009908 <HAL_RCC_GetSysClockFreq+0x1a4>
 800978e:	2b00      	cmp	r3, #0
 8009790:	d002      	beq.n	8009798 <HAL_RCC_GetSysClockFreq+0x34>
 8009792:	2b04      	cmp	r3, #4
 8009794:	d003      	beq.n	800979e <HAL_RCC_GetSysClockFreq+0x3a>
 8009796:	e0b7      	b.n	8009908 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009798:	4b61      	ldr	r3, [pc, #388]	; (8009920 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800979a:	60bb      	str	r3, [r7, #8]
       break;
 800979c:	e0b7      	b.n	800990e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800979e:	4b61      	ldr	r3, [pc, #388]	; (8009924 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80097a0:	60bb      	str	r3, [r7, #8]
      break;
 80097a2:	e0b4      	b.n	800990e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80097a4:	4b5d      	ldr	r3, [pc, #372]	; (800991c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80097ae:	4b5b      	ldr	r3, [pc, #364]	; (800991c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d04d      	beq.n	8009856 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097ba:	4b58      	ldr	r3, [pc, #352]	; (800991c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	099b      	lsrs	r3, r3, #6
 80097c0:	461a      	mov	r2, r3
 80097c2:	f04f 0300 	mov.w	r3, #0
 80097c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80097ca:	f04f 0100 	mov.w	r1, #0
 80097ce:	ea02 0800 	and.w	r8, r2, r0
 80097d2:	ea03 0901 	and.w	r9, r3, r1
 80097d6:	4640      	mov	r0, r8
 80097d8:	4649      	mov	r1, r9
 80097da:	f04f 0200 	mov.w	r2, #0
 80097de:	f04f 0300 	mov.w	r3, #0
 80097e2:	014b      	lsls	r3, r1, #5
 80097e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80097e8:	0142      	lsls	r2, r0, #5
 80097ea:	4610      	mov	r0, r2
 80097ec:	4619      	mov	r1, r3
 80097ee:	ebb0 0008 	subs.w	r0, r0, r8
 80097f2:	eb61 0109 	sbc.w	r1, r1, r9
 80097f6:	f04f 0200 	mov.w	r2, #0
 80097fa:	f04f 0300 	mov.w	r3, #0
 80097fe:	018b      	lsls	r3, r1, #6
 8009800:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009804:	0182      	lsls	r2, r0, #6
 8009806:	1a12      	subs	r2, r2, r0
 8009808:	eb63 0301 	sbc.w	r3, r3, r1
 800980c:	f04f 0000 	mov.w	r0, #0
 8009810:	f04f 0100 	mov.w	r1, #0
 8009814:	00d9      	lsls	r1, r3, #3
 8009816:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800981a:	00d0      	lsls	r0, r2, #3
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	eb12 0208 	adds.w	r2, r2, r8
 8009824:	eb43 0309 	adc.w	r3, r3, r9
 8009828:	f04f 0000 	mov.w	r0, #0
 800982c:	f04f 0100 	mov.w	r1, #0
 8009830:	0259      	lsls	r1, r3, #9
 8009832:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009836:	0250      	lsls	r0, r2, #9
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	4610      	mov	r0, r2
 800983e:	4619      	mov	r1, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	461a      	mov	r2, r3
 8009844:	f04f 0300 	mov.w	r3, #0
 8009848:	f7f7 fa1e 	bl	8000c88 <__aeabi_uldivmod>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	4613      	mov	r3, r2
 8009852:	60fb      	str	r3, [r7, #12]
 8009854:	e04a      	b.n	80098ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009856:	4b31      	ldr	r3, [pc, #196]	; (800991c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	099b      	lsrs	r3, r3, #6
 800985c:	461a      	mov	r2, r3
 800985e:	f04f 0300 	mov.w	r3, #0
 8009862:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009866:	f04f 0100 	mov.w	r1, #0
 800986a:	ea02 0400 	and.w	r4, r2, r0
 800986e:	ea03 0501 	and.w	r5, r3, r1
 8009872:	4620      	mov	r0, r4
 8009874:	4629      	mov	r1, r5
 8009876:	f04f 0200 	mov.w	r2, #0
 800987a:	f04f 0300 	mov.w	r3, #0
 800987e:	014b      	lsls	r3, r1, #5
 8009880:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009884:	0142      	lsls	r2, r0, #5
 8009886:	4610      	mov	r0, r2
 8009888:	4619      	mov	r1, r3
 800988a:	1b00      	subs	r0, r0, r4
 800988c:	eb61 0105 	sbc.w	r1, r1, r5
 8009890:	f04f 0200 	mov.w	r2, #0
 8009894:	f04f 0300 	mov.w	r3, #0
 8009898:	018b      	lsls	r3, r1, #6
 800989a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800989e:	0182      	lsls	r2, r0, #6
 80098a0:	1a12      	subs	r2, r2, r0
 80098a2:	eb63 0301 	sbc.w	r3, r3, r1
 80098a6:	f04f 0000 	mov.w	r0, #0
 80098aa:	f04f 0100 	mov.w	r1, #0
 80098ae:	00d9      	lsls	r1, r3, #3
 80098b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80098b4:	00d0      	lsls	r0, r2, #3
 80098b6:	4602      	mov	r2, r0
 80098b8:	460b      	mov	r3, r1
 80098ba:	1912      	adds	r2, r2, r4
 80098bc:	eb45 0303 	adc.w	r3, r5, r3
 80098c0:	f04f 0000 	mov.w	r0, #0
 80098c4:	f04f 0100 	mov.w	r1, #0
 80098c8:	0299      	lsls	r1, r3, #10
 80098ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80098ce:	0290      	lsls	r0, r2, #10
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	4610      	mov	r0, r2
 80098d6:	4619      	mov	r1, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	461a      	mov	r2, r3
 80098dc:	f04f 0300 	mov.w	r3, #0
 80098e0:	f7f7 f9d2 	bl	8000c88 <__aeabi_uldivmod>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	4613      	mov	r3, r2
 80098ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80098ec:	4b0b      	ldr	r3, [pc, #44]	; (800991c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	0c1b      	lsrs	r3, r3, #16
 80098f2:	f003 0303 	and.w	r3, r3, #3
 80098f6:	3301      	adds	r3, #1
 80098f8:	005b      	lsls	r3, r3, #1
 80098fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	fbb2 f3f3 	udiv	r3, r2, r3
 8009904:	60bb      	str	r3, [r7, #8]
      break;
 8009906:	e002      	b.n	800990e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009908:	4b05      	ldr	r3, [pc, #20]	; (8009920 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800990a:	60bb      	str	r3, [r7, #8]
      break;
 800990c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800990e:	68bb      	ldr	r3, [r7, #8]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800991a:	bf00      	nop
 800991c:	40023800 	.word	0x40023800
 8009920:	00f42400 	.word	0x00f42400
 8009924:	007a1200 	.word	0x007a1200

08009928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009928:	b480      	push	{r7}
 800992a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800992c:	4b03      	ldr	r3, [pc, #12]	; (800993c <HAL_RCC_GetHCLKFreq+0x14>)
 800992e:	681b      	ldr	r3, [r3, #0]
}
 8009930:	4618      	mov	r0, r3
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	20000008 	.word	0x20000008

08009940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009944:	f7ff fff0 	bl	8009928 <HAL_RCC_GetHCLKFreq>
 8009948:	4602      	mov	r2, r0
 800994a:	4b05      	ldr	r3, [pc, #20]	; (8009960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	0a9b      	lsrs	r3, r3, #10
 8009950:	f003 0307 	and.w	r3, r3, #7
 8009954:	4903      	ldr	r1, [pc, #12]	; (8009964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009956:	5ccb      	ldrb	r3, [r1, r3]
 8009958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800995c:	4618      	mov	r0, r3
 800995e:	bd80      	pop	{r7, pc}
 8009960:	40023800 	.word	0x40023800
 8009964:	0801c5d8 	.word	0x0801c5d8

08009968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800996c:	f7ff ffdc 	bl	8009928 <HAL_RCC_GetHCLKFreq>
 8009970:	4602      	mov	r2, r0
 8009972:	4b05      	ldr	r3, [pc, #20]	; (8009988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	0b5b      	lsrs	r3, r3, #13
 8009978:	f003 0307 	and.w	r3, r3, #7
 800997c:	4903      	ldr	r1, [pc, #12]	; (800998c <HAL_RCC_GetPCLK2Freq+0x24>)
 800997e:	5ccb      	ldrb	r3, [r1, r3]
 8009980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009984:	4618      	mov	r0, r3
 8009986:	bd80      	pop	{r7, pc}
 8009988:	40023800 	.word	0x40023800
 800998c:	0801c5d8 	.word	0x0801c5d8

08009990 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d101      	bne.n	80099a6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e034      	b.n	8009a10 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d106      	bne.n	80099c0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f7fc fca6 	bl	800630c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	3308      	adds	r3, #8
 80099c8:	4619      	mov	r1, r3
 80099ca:	4610      	mov	r0, r2
 80099cc:	f001 fbb6 	bl	800b13c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6818      	ldr	r0, [r3, #0]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	461a      	mov	r2, r3
 80099da:	68b9      	ldr	r1, [r7, #8]
 80099dc:	f001 fc00 	bl	800b1e0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6858      	ldr	r0, [r3, #4]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	689a      	ldr	r2, [r3, #8]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ec:	6879      	ldr	r1, [r7, #4]
 80099ee:	f001 fc35 	bl	800b25c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	6892      	ldr	r2, [r2, #8]
 80099fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	6892      	ldr	r2, [r2, #8]
 8009a06:	f041 0101 	orr.w	r1, r1, #1
 8009a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d101      	bne.n	8009a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e041      	b.n	8009aae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d106      	bne.n	8009a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7fd f872 	bl	8006b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2202      	movs	r2, #2
 8009a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	3304      	adds	r3, #4
 8009a54:	4619      	mov	r1, r3
 8009a56:	4610      	mov	r0, r2
 8009a58:	f000 fabc 	bl	8009fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3708      	adds	r7, #8
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
	...

08009ab8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d001      	beq.n	8009ad0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	e046      	b.n	8009b5e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a23      	ldr	r2, [pc, #140]	; (8009b6c <HAL_TIM_Base_Start+0xb4>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d022      	beq.n	8009b28 <HAL_TIM_Base_Start+0x70>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aea:	d01d      	beq.n	8009b28 <HAL_TIM_Base_Start+0x70>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a1f      	ldr	r2, [pc, #124]	; (8009b70 <HAL_TIM_Base_Start+0xb8>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d018      	beq.n	8009b28 <HAL_TIM_Base_Start+0x70>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a1e      	ldr	r2, [pc, #120]	; (8009b74 <HAL_TIM_Base_Start+0xbc>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d013      	beq.n	8009b28 <HAL_TIM_Base_Start+0x70>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a1c      	ldr	r2, [pc, #112]	; (8009b78 <HAL_TIM_Base_Start+0xc0>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d00e      	beq.n	8009b28 <HAL_TIM_Base_Start+0x70>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a1b      	ldr	r2, [pc, #108]	; (8009b7c <HAL_TIM_Base_Start+0xc4>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d009      	beq.n	8009b28 <HAL_TIM_Base_Start+0x70>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a19      	ldr	r2, [pc, #100]	; (8009b80 <HAL_TIM_Base_Start+0xc8>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d004      	beq.n	8009b28 <HAL_TIM_Base_Start+0x70>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a18      	ldr	r2, [pc, #96]	; (8009b84 <HAL_TIM_Base_Start+0xcc>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d111      	bne.n	8009b4c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f003 0307 	and.w	r3, r3, #7
 8009b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2b06      	cmp	r3, #6
 8009b38:	d010      	beq.n	8009b5c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f042 0201 	orr.w	r2, r2, #1
 8009b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b4a:	e007      	b.n	8009b5c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f042 0201 	orr.w	r2, r2, #1
 8009b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	40010000 	.word	0x40010000
 8009b70:	40000400 	.word	0x40000400
 8009b74:	40000800 	.word	0x40000800
 8009b78:	40000c00 	.word	0x40000c00
 8009b7c:	40010400 	.word	0x40010400
 8009b80:	40014000 	.word	0x40014000
 8009b84:	40001800 	.word	0x40001800

08009b88 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6a1a      	ldr	r2, [r3, #32]
 8009b96:	f241 1311 	movw	r3, #4369	; 0x1111
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10f      	bne.n	8009bc0 <HAL_TIM_Base_Stop+0x38>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6a1a      	ldr	r2, [r3, #32]
 8009ba6:	f240 4344 	movw	r3, #1092	; 0x444
 8009baa:	4013      	ands	r3, r2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d107      	bne.n	8009bc0 <HAL_TIM_Base_Stop+0x38>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f022 0201 	bic.w	r2, r2, #1
 8009bbe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	370c      	adds	r7, #12
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr

08009bd6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b082      	sub	sp, #8
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d122      	bne.n	8009c32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	f003 0302 	and.w	r3, r3, #2
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d11b      	bne.n	8009c32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f06f 0202 	mvn.w	r2, #2
 8009c02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	699b      	ldr	r3, [r3, #24]
 8009c10:	f003 0303 	and.w	r3, r3, #3
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d003      	beq.n	8009c20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f9bc 	bl	8009f96 <HAL_TIM_IC_CaptureCallback>
 8009c1e:	e005      	b.n	8009c2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f9ae 	bl	8009f82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f9bf 	bl	8009faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	f003 0304 	and.w	r3, r3, #4
 8009c3c:	2b04      	cmp	r3, #4
 8009c3e:	d122      	bne.n	8009c86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	f003 0304 	and.w	r3, r3, #4
 8009c4a:	2b04      	cmp	r3, #4
 8009c4c:	d11b      	bne.n	8009c86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f06f 0204 	mvn.w	r2, #4
 8009c56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	699b      	ldr	r3, [r3, #24]
 8009c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d003      	beq.n	8009c74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f992 	bl	8009f96 <HAL_TIM_IC_CaptureCallback>
 8009c72:	e005      	b.n	8009c80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f984 	bl	8009f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f995 	bl	8009faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	f003 0308 	and.w	r3, r3, #8
 8009c90:	2b08      	cmp	r3, #8
 8009c92:	d122      	bne.n	8009cda <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	f003 0308 	and.w	r3, r3, #8
 8009c9e:	2b08      	cmp	r3, #8
 8009ca0:	d11b      	bne.n	8009cda <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f06f 0208 	mvn.w	r2, #8
 8009caa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2204      	movs	r2, #4
 8009cb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	69db      	ldr	r3, [r3, #28]
 8009cb8:	f003 0303 	and.w	r3, r3, #3
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d003      	beq.n	8009cc8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f968 	bl	8009f96 <HAL_TIM_IC_CaptureCallback>
 8009cc6:	e005      	b.n	8009cd4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f95a 	bl	8009f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f96b 	bl	8009faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	f003 0310 	and.w	r3, r3, #16
 8009ce4:	2b10      	cmp	r3, #16
 8009ce6:	d122      	bne.n	8009d2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	f003 0310 	and.w	r3, r3, #16
 8009cf2:	2b10      	cmp	r3, #16
 8009cf4:	d11b      	bne.n	8009d2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f06f 0210 	mvn.w	r2, #16
 8009cfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2208      	movs	r2, #8
 8009d04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	69db      	ldr	r3, [r3, #28]
 8009d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d003      	beq.n	8009d1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 f93e 	bl	8009f96 <HAL_TIM_IC_CaptureCallback>
 8009d1a:	e005      	b.n	8009d28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 f930 	bl	8009f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f941 	bl	8009faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d10e      	bne.n	8009d5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	f003 0301 	and.w	r3, r3, #1
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d107      	bne.n	8009d5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f06f 0201 	mvn.w	r2, #1
 8009d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f90a 	bl	8009f6e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d64:	2b80      	cmp	r3, #128	; 0x80
 8009d66:	d10e      	bne.n	8009d86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d72:	2b80      	cmp	r3, #128	; 0x80
 8009d74:	d107      	bne.n	8009d86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fae7 	bl	800a354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d90:	2b40      	cmp	r3, #64	; 0x40
 8009d92:	d10e      	bne.n	8009db2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d9e:	2b40      	cmp	r3, #64	; 0x40
 8009da0:	d107      	bne.n	8009db2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f906 	bl	8009fbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	f003 0320 	and.w	r3, r3, #32
 8009dbc:	2b20      	cmp	r3, #32
 8009dbe:	d10e      	bne.n	8009dde <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	f003 0320 	and.w	r3, r3, #32
 8009dca:	2b20      	cmp	r3, #32
 8009dcc:	d107      	bne.n	8009dde <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f06f 0220 	mvn.w	r2, #32
 8009dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fab1 	bl	800a340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009dde:	bf00      	nop
 8009de0:	3708      	adds	r7, #8
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b084      	sub	sp, #16
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d101      	bne.n	8009dfe <HAL_TIM_ConfigClockSource+0x18>
 8009dfa:	2302      	movs	r3, #2
 8009dfc:	e0b3      	b.n	8009f66 <HAL_TIM_ConfigClockSource+0x180>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2202      	movs	r2, #2
 8009e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009e1c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e24:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e36:	d03e      	beq.n	8009eb6 <HAL_TIM_ConfigClockSource+0xd0>
 8009e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e3c:	f200 8087 	bhi.w	8009f4e <HAL_TIM_ConfigClockSource+0x168>
 8009e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e44:	f000 8085 	beq.w	8009f52 <HAL_TIM_ConfigClockSource+0x16c>
 8009e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e4c:	d87f      	bhi.n	8009f4e <HAL_TIM_ConfigClockSource+0x168>
 8009e4e:	2b70      	cmp	r3, #112	; 0x70
 8009e50:	d01a      	beq.n	8009e88 <HAL_TIM_ConfigClockSource+0xa2>
 8009e52:	2b70      	cmp	r3, #112	; 0x70
 8009e54:	d87b      	bhi.n	8009f4e <HAL_TIM_ConfigClockSource+0x168>
 8009e56:	2b60      	cmp	r3, #96	; 0x60
 8009e58:	d050      	beq.n	8009efc <HAL_TIM_ConfigClockSource+0x116>
 8009e5a:	2b60      	cmp	r3, #96	; 0x60
 8009e5c:	d877      	bhi.n	8009f4e <HAL_TIM_ConfigClockSource+0x168>
 8009e5e:	2b50      	cmp	r3, #80	; 0x50
 8009e60:	d03c      	beq.n	8009edc <HAL_TIM_ConfigClockSource+0xf6>
 8009e62:	2b50      	cmp	r3, #80	; 0x50
 8009e64:	d873      	bhi.n	8009f4e <HAL_TIM_ConfigClockSource+0x168>
 8009e66:	2b40      	cmp	r3, #64	; 0x40
 8009e68:	d058      	beq.n	8009f1c <HAL_TIM_ConfigClockSource+0x136>
 8009e6a:	2b40      	cmp	r3, #64	; 0x40
 8009e6c:	d86f      	bhi.n	8009f4e <HAL_TIM_ConfigClockSource+0x168>
 8009e6e:	2b30      	cmp	r3, #48	; 0x30
 8009e70:	d064      	beq.n	8009f3c <HAL_TIM_ConfigClockSource+0x156>
 8009e72:	2b30      	cmp	r3, #48	; 0x30
 8009e74:	d86b      	bhi.n	8009f4e <HAL_TIM_ConfigClockSource+0x168>
 8009e76:	2b20      	cmp	r3, #32
 8009e78:	d060      	beq.n	8009f3c <HAL_TIM_ConfigClockSource+0x156>
 8009e7a:	2b20      	cmp	r3, #32
 8009e7c:	d867      	bhi.n	8009f4e <HAL_TIM_ConfigClockSource+0x168>
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d05c      	beq.n	8009f3c <HAL_TIM_ConfigClockSource+0x156>
 8009e82:	2b10      	cmp	r3, #16
 8009e84:	d05a      	beq.n	8009f3c <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009e86:	e062      	b.n	8009f4e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6818      	ldr	r0, [r3, #0]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	6899      	ldr	r1, [r3, #8]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	685a      	ldr	r2, [r3, #4]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	f000 f9b6 	bl	800a208 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009eaa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	609a      	str	r2, [r3, #8]
      break;
 8009eb4:	e04e      	b.n	8009f54 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6818      	ldr	r0, [r3, #0]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	6899      	ldr	r1, [r3, #8]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	685a      	ldr	r2, [r3, #4]
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	f000 f99f 	bl	800a208 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	689a      	ldr	r2, [r3, #8]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ed8:	609a      	str	r2, [r3, #8]
      break;
 8009eda:	e03b      	b.n	8009f54 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6818      	ldr	r0, [r3, #0]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	6859      	ldr	r1, [r3, #4]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	461a      	mov	r2, r3
 8009eea:	f000 f913 	bl	800a114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2150      	movs	r1, #80	; 0x50
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f000 f96c 	bl	800a1d2 <TIM_ITRx_SetConfig>
      break;
 8009efa:	e02b      	b.n	8009f54 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	6859      	ldr	r1, [r3, #4]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	f000 f932 	bl	800a172 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2160      	movs	r1, #96	; 0x60
 8009f14:	4618      	mov	r0, r3
 8009f16:	f000 f95c 	bl	800a1d2 <TIM_ITRx_SetConfig>
      break;
 8009f1a:	e01b      	b.n	8009f54 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6818      	ldr	r0, [r3, #0]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	6859      	ldr	r1, [r3, #4]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	f000 f8f3 	bl	800a114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2140      	movs	r1, #64	; 0x40
 8009f34:	4618      	mov	r0, r3
 8009f36:	f000 f94c 	bl	800a1d2 <TIM_ITRx_SetConfig>
      break;
 8009f3a:	e00b      	b.n	8009f54 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4619      	mov	r1, r3
 8009f46:	4610      	mov	r0, r2
 8009f48:	f000 f943 	bl	800a1d2 <TIM_ITRx_SetConfig>
        break;
 8009f4c:	e002      	b.n	8009f54 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009f4e:	bf00      	nop
 8009f50:	e000      	b.n	8009f54 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009f52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f6e:	b480      	push	{r7}
 8009f70:	b083      	sub	sp, #12
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009f76:	bf00      	nop
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr

08009f82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f82:	b480      	push	{r7}
 8009f84:	b083      	sub	sp, #12
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f8a:	bf00      	nop
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f96:	b480      	push	{r7}
 8009f98:	b083      	sub	sp, #12
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f9e:	bf00      	nop
 8009fa0:	370c      	adds	r7, #12
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009faa:	b480      	push	{r7}
 8009fac:	b083      	sub	sp, #12
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009fb2:	bf00      	nop
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr

08009fbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fbe:	b480      	push	{r7}
 8009fc0:	b083      	sub	sp, #12
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fc6:	bf00      	nop
 8009fc8:	370c      	adds	r7, #12
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
	...

08009fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a40      	ldr	r2, [pc, #256]	; (800a0e8 <TIM_Base_SetConfig+0x114>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d013      	beq.n	800a014 <TIM_Base_SetConfig+0x40>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ff2:	d00f      	beq.n	800a014 <TIM_Base_SetConfig+0x40>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a3d      	ldr	r2, [pc, #244]	; (800a0ec <TIM_Base_SetConfig+0x118>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d00b      	beq.n	800a014 <TIM_Base_SetConfig+0x40>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a3c      	ldr	r2, [pc, #240]	; (800a0f0 <TIM_Base_SetConfig+0x11c>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d007      	beq.n	800a014 <TIM_Base_SetConfig+0x40>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a3b      	ldr	r2, [pc, #236]	; (800a0f4 <TIM_Base_SetConfig+0x120>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d003      	beq.n	800a014 <TIM_Base_SetConfig+0x40>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a3a      	ldr	r2, [pc, #232]	; (800a0f8 <TIM_Base_SetConfig+0x124>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d108      	bne.n	800a026 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a01a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	4313      	orrs	r3, r2
 800a024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a2f      	ldr	r2, [pc, #188]	; (800a0e8 <TIM_Base_SetConfig+0x114>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d02b      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a034:	d027      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a2c      	ldr	r2, [pc, #176]	; (800a0ec <TIM_Base_SetConfig+0x118>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d023      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a2b      	ldr	r2, [pc, #172]	; (800a0f0 <TIM_Base_SetConfig+0x11c>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d01f      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a2a      	ldr	r2, [pc, #168]	; (800a0f4 <TIM_Base_SetConfig+0x120>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d01b      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a29      	ldr	r2, [pc, #164]	; (800a0f8 <TIM_Base_SetConfig+0x124>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d017      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a28      	ldr	r2, [pc, #160]	; (800a0fc <TIM_Base_SetConfig+0x128>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d013      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a27      	ldr	r2, [pc, #156]	; (800a100 <TIM_Base_SetConfig+0x12c>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d00f      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a26      	ldr	r2, [pc, #152]	; (800a104 <TIM_Base_SetConfig+0x130>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d00b      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a25      	ldr	r2, [pc, #148]	; (800a108 <TIM_Base_SetConfig+0x134>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d007      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a24      	ldr	r2, [pc, #144]	; (800a10c <TIM_Base_SetConfig+0x138>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d003      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a23      	ldr	r2, [pc, #140]	; (800a110 <TIM_Base_SetConfig+0x13c>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d108      	bne.n	800a098 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a08c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	4313      	orrs	r3, r2
 800a096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	689a      	ldr	r2, [r3, #8]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a0a      	ldr	r2, [pc, #40]	; (800a0e8 <TIM_Base_SetConfig+0x114>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d003      	beq.n	800a0cc <TIM_Base_SetConfig+0xf8>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a0c      	ldr	r2, [pc, #48]	; (800a0f8 <TIM_Base_SetConfig+0x124>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d103      	bne.n	800a0d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	691a      	ldr	r2, [r3, #16]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	615a      	str	r2, [r3, #20]
}
 800a0da:	bf00      	nop
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	40010000 	.word	0x40010000
 800a0ec:	40000400 	.word	0x40000400
 800a0f0:	40000800 	.word	0x40000800
 800a0f4:	40000c00 	.word	0x40000c00
 800a0f8:	40010400 	.word	0x40010400
 800a0fc:	40014000 	.word	0x40014000
 800a100:	40014400 	.word	0x40014400
 800a104:	40014800 	.word	0x40014800
 800a108:	40001800 	.word	0x40001800
 800a10c:	40001c00 	.word	0x40001c00
 800a110:	40002000 	.word	0x40002000

0800a114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a114:	b480      	push	{r7}
 800a116:	b087      	sub	sp, #28
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6a1b      	ldr	r3, [r3, #32]
 800a124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6a1b      	ldr	r3, [r3, #32]
 800a12a:	f023 0201 	bic.w	r2, r3, #1
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	699b      	ldr	r3, [r3, #24]
 800a136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a13e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	011b      	lsls	r3, r3, #4
 800a144:	693a      	ldr	r2, [r7, #16]
 800a146:	4313      	orrs	r3, r2
 800a148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	f023 030a 	bic.w	r3, r3, #10
 800a150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	4313      	orrs	r3, r2
 800a158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	621a      	str	r2, [r3, #32]
}
 800a166:	bf00      	nop
 800a168:	371c      	adds	r7, #28
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a172:	b480      	push	{r7}
 800a174:	b087      	sub	sp, #28
 800a176:	af00      	add	r7, sp, #0
 800a178:	60f8      	str	r0, [r7, #12]
 800a17a:	60b9      	str	r1, [r7, #8]
 800a17c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6a1b      	ldr	r3, [r3, #32]
 800a182:	f023 0210 	bic.w	r2, r3, #16
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a19c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	031b      	lsls	r3, r3, #12
 800a1a2:	697a      	ldr	r2, [r7, #20]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a1ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	011b      	lsls	r3, r3, #4
 800a1b4:	693a      	ldr	r2, [r7, #16]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	693a      	ldr	r2, [r7, #16]
 800a1c4:	621a      	str	r2, [r3, #32]
}
 800a1c6:	bf00      	nop
 800a1c8:	371c      	adds	r7, #28
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr

0800a1d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b085      	sub	sp, #20
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	f043 0307 	orr.w	r3, r3, #7
 800a1f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	609a      	str	r2, [r3, #8]
}
 800a1fc:	bf00      	nop
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a208:	b480      	push	{r7}
 800a20a:	b087      	sub	sp, #28
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	607a      	str	r2, [r7, #4]
 800a214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	021a      	lsls	r2, r3, #8
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	431a      	orrs	r2, r3
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	4313      	orrs	r3, r2
 800a230:	697a      	ldr	r2, [r7, #20]
 800a232:	4313      	orrs	r3, r2
 800a234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	697a      	ldr	r2, [r7, #20]
 800a23a:	609a      	str	r2, [r3, #8]
}
 800a23c:	bf00      	nop
 800a23e:	371c      	adds	r7, #28
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d101      	bne.n	800a260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a25c:	2302      	movs	r3, #2
 800a25e:	e05a      	b.n	800a316 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2202      	movs	r2, #2
 800a26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	4313      	orrs	r3, r2
 800a290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a21      	ldr	r2, [pc, #132]	; (800a324 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d022      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ac:	d01d      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a1d      	ldr	r2, [pc, #116]	; (800a328 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d018      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a1b      	ldr	r2, [pc, #108]	; (800a32c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d013      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a1a      	ldr	r2, [pc, #104]	; (800a330 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d00e      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a18      	ldr	r2, [pc, #96]	; (800a334 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d009      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a17      	ldr	r2, [pc, #92]	; (800a338 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d004      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a15      	ldr	r2, [pc, #84]	; (800a33c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d10c      	bne.n	800a304 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	40010000 	.word	0x40010000
 800a328:	40000400 	.word	0x40000400
 800a32c:	40000800 	.word	0x40000800
 800a330:	40000c00 	.word	0x40000c00
 800a334:	40010400 	.word	0x40010400
 800a338:	40014000 	.word	0x40014000
 800a33c:	40001800 	.word	0x40001800

0800a340 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a35c:	bf00      	nop
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d101      	bne.n	800a37a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e03f      	b.n	800a3fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a380:	b2db      	uxtb	r3, r3
 800a382:	2b00      	cmp	r3, #0
 800a384:	d106      	bne.n	800a394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7fc fc3e 	bl	8006c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2224      	movs	r2, #36	; 0x24
 800a398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68da      	ldr	r2, [r3, #12]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a3aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fcfd 	bl	800adac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	691a      	ldr	r2, [r3, #16]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a3c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	695a      	ldr	r2, [r3, #20]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a3d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68da      	ldr	r2, [r3, #12]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a3e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2220      	movs	r2, #32
 800a3ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2220      	movs	r2, #32
 800a3f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b084      	sub	sp, #16
 800a406:	af00      	add	r7, sp, #0
 800a408:	60f8      	str	r0, [r7, #12]
 800a40a:	60b9      	str	r1, [r7, #8]
 800a40c:	4613      	mov	r3, r2
 800a40e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a416:	b2db      	uxtb	r3, r3
 800a418:	2b20      	cmp	r3, #32
 800a41a:	d11d      	bne.n	800a458 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d002      	beq.n	800a428 <HAL_UART_Receive_DMA+0x26>
 800a422:	88fb      	ldrh	r3, [r7, #6]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d101      	bne.n	800a42c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	e016      	b.n	800a45a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a432:	2b01      	cmp	r3, #1
 800a434:	d101      	bne.n	800a43a <HAL_UART_Receive_DMA+0x38>
 800a436:	2302      	movs	r3, #2
 800a438:	e00f      	b.n	800a45a <HAL_UART_Receive_DMA+0x58>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2201      	movs	r2, #1
 800a43e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2200      	movs	r2, #0
 800a446:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800a448:	88fb      	ldrh	r3, [r7, #6]
 800a44a:	461a      	mov	r2, r3
 800a44c:	68b9      	ldr	r1, [r7, #8]
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f000 faf2 	bl	800aa38 <UART_Start_Receive_DMA>
 800a454:	4603      	mov	r3, r0
 800a456:	e000      	b.n	800a45a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a458:	2302      	movs	r3, #2
  }
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b084      	sub	sp, #16
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a46a:	2300      	movs	r3, #0
 800a46c:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	695b      	ldr	r3, [r3, #20]
 800a474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a478:	2b80      	cmp	r3, #128	; 0x80
 800a47a:	bf0c      	ite	eq
 800a47c:	2301      	moveq	r3, #1
 800a47e:	2300      	movne	r3, #0
 800a480:	b2db      	uxtb	r3, r3
 800a482:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	2b21      	cmp	r3, #33	; 0x21
 800a48e:	d116      	bne.n	800a4be <HAL_UART_DMAStop+0x5c>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d013      	beq.n	800a4be <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	695a      	ldr	r2, [r3, #20]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4a4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d004      	beq.n	800a4b8 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fc ffca 	bl	800744c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fb21 	bl	800ab00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	695b      	ldr	r3, [r3, #20]
 800a4c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4c8:	2b40      	cmp	r3, #64	; 0x40
 800a4ca:	bf0c      	ite	eq
 800a4cc:	2301      	moveq	r3, #1
 800a4ce:	2300      	movne	r3, #0
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	2b22      	cmp	r3, #34	; 0x22
 800a4de:	d116      	bne.n	800a50e <HAL_UART_DMAStop+0xac>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d013      	beq.n	800a50e <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	695a      	ldr	r2, [r3, #20]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4f4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d004      	beq.n	800a508 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a502:	4618      	mov	r0, r3
 800a504:	f7fc ffa2 	bl	800744c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 fb0f 	bl	800ab2c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b08a      	sub	sp, #40	; 0x28
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	695b      	ldr	r3, [r3, #20]
 800a536:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800a538:	2300      	movs	r3, #0
 800a53a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800a53c:	2300      	movs	r3, #0
 800a53e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a542:	f003 030f 	and.w	r3, r3, #15
 800a546:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10d      	bne.n	800a56a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a550:	f003 0320 	and.w	r3, r3, #32
 800a554:	2b00      	cmp	r3, #0
 800a556:	d008      	beq.n	800a56a <HAL_UART_IRQHandler+0x52>
 800a558:	6a3b      	ldr	r3, [r7, #32]
 800a55a:	f003 0320 	and.w	r3, r3, #32
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d003      	beq.n	800a56a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fb8b 	bl	800ac7e <UART_Receive_IT>
      return;
 800a568:	e17c      	b.n	800a864 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 80b1 	beq.w	800a6d4 <HAL_UART_IRQHandler+0x1bc>
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	f003 0301 	and.w	r3, r3, #1
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d105      	bne.n	800a588 <HAL_UART_IRQHandler+0x70>
 800a57c:	6a3b      	ldr	r3, [r7, #32]
 800a57e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a582:	2b00      	cmp	r3, #0
 800a584:	f000 80a6 	beq.w	800a6d4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00a      	beq.n	800a5a8 <HAL_UART_IRQHandler+0x90>
 800a592:	6a3b      	ldr	r3, [r7, #32]
 800a594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d005      	beq.n	800a5a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a0:	f043 0201 	orr.w	r2, r3, #1
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5aa:	f003 0304 	and.w	r3, r3, #4
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00a      	beq.n	800a5c8 <HAL_UART_IRQHandler+0xb0>
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	f003 0301 	and.w	r3, r3, #1
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d005      	beq.n	800a5c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c0:	f043 0202 	orr.w	r2, r3, #2
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ca:	f003 0302 	and.w	r3, r3, #2
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00a      	beq.n	800a5e8 <HAL_UART_IRQHandler+0xd0>
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	f003 0301 	and.w	r3, r3, #1
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d005      	beq.n	800a5e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e0:	f043 0204 	orr.w	r2, r3, #4
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	f003 0308 	and.w	r3, r3, #8
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00f      	beq.n	800a612 <HAL_UART_IRQHandler+0xfa>
 800a5f2:	6a3b      	ldr	r3, [r7, #32]
 800a5f4:	f003 0320 	and.w	r3, r3, #32
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d104      	bne.n	800a606 <HAL_UART_IRQHandler+0xee>
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	f003 0301 	and.w	r3, r3, #1
 800a602:	2b00      	cmp	r3, #0
 800a604:	d005      	beq.n	800a612 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60a:	f043 0208 	orr.w	r2, r3, #8
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a616:	2b00      	cmp	r3, #0
 800a618:	f000 811f 	beq.w	800a85a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	f003 0320 	and.w	r3, r3, #32
 800a622:	2b00      	cmp	r3, #0
 800a624:	d007      	beq.n	800a636 <HAL_UART_IRQHandler+0x11e>
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	f003 0320 	and.w	r3, r3, #32
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d002      	beq.n	800a636 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fb24 	bl	800ac7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	695b      	ldr	r3, [r3, #20]
 800a63c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a640:	2b40      	cmp	r3, #64	; 0x40
 800a642:	bf0c      	ite	eq
 800a644:	2301      	moveq	r3, #1
 800a646:	2300      	movne	r3, #0
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a650:	f003 0308 	and.w	r3, r3, #8
 800a654:	2b00      	cmp	r3, #0
 800a656:	d102      	bne.n	800a65e <HAL_UART_IRQHandler+0x146>
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d031      	beq.n	800a6c2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fa64 	bl	800ab2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	695b      	ldr	r3, [r3, #20]
 800a66a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a66e:	2b40      	cmp	r3, #64	; 0x40
 800a670:	d123      	bne.n	800a6ba <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	695a      	ldr	r2, [r3, #20]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a680:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a686:	2b00      	cmp	r3, #0
 800a688:	d013      	beq.n	800a6b2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a68e:	4a77      	ldr	r2, [pc, #476]	; (800a86c <HAL_UART_IRQHandler+0x354>)
 800a690:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a696:	4618      	mov	r0, r3
 800a698:	f7fc ff48 	bl	800752c <HAL_DMA_Abort_IT>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d016      	beq.n	800a6d0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6b0:	e00e      	b.n	800a6d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f8fa 	bl	800a8ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6b8:	e00a      	b.n	800a6d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f8f6 	bl	800a8ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c0:	e006      	b.n	800a6d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 f8f2 	bl	800a8ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a6ce:	e0c4      	b.n	800a85a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6d0:	bf00      	nop
    return;
 800a6d2:	e0c2      	b.n	800a85a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	f040 80a2 	bne.w	800a822 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e0:	f003 0310 	and.w	r3, r3, #16
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f000 809c 	beq.w	800a822 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a6ea:	6a3b      	ldr	r3, [r7, #32]
 800a6ec:	f003 0310 	and.w	r3, r3, #16
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 8096 	beq.w	800a822 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	60fb      	str	r3, [r7, #12]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	60fb      	str	r3, [r7, #12]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	60fb      	str	r3, [r7, #12]
 800a70a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a716:	2b40      	cmp	r3, #64	; 0x40
 800a718:	d14f      	bne.n	800a7ba <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800a724:	8a3b      	ldrh	r3, [r7, #16]
 800a726:	2b00      	cmp	r3, #0
 800a728:	f000 8099 	beq.w	800a85e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a730:	8a3a      	ldrh	r2, [r7, #16]
 800a732:	429a      	cmp	r2, r3
 800a734:	f080 8093 	bcs.w	800a85e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	8a3a      	ldrh	r2, [r7, #16]
 800a73c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a742:	69db      	ldr	r3, [r3, #28]
 800a744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a748:	d02b      	beq.n	800a7a2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68da      	ldr	r2, [r3, #12]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a758:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	695a      	ldr	r2, [r3, #20]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f022 0201 	bic.w	r2, r2, #1
 800a768:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	695a      	ldr	r2, [r3, #20]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a778:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2220      	movs	r2, #32
 800a77e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68da      	ldr	r2, [r3, #12]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f022 0210 	bic.w	r2, r2, #16
 800a796:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7fc fe55 	bl	800744c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 f884 	bl	800a8c0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a7b8:	e051      	b.n	800a85e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d047      	beq.n	800a862 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800a7d2:	8a7b      	ldrh	r3, [r7, #18]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d044      	beq.n	800a862 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	68da      	ldr	r2, [r3, #12]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a7e6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	695a      	ldr	r2, [r3, #20]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f022 0201 	bic.w	r2, r2, #1
 800a7f6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2220      	movs	r2, #32
 800a7fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68da      	ldr	r2, [r3, #12]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f022 0210 	bic.w	r2, r2, #16
 800a814:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a816:	8a7b      	ldrh	r3, [r7, #18]
 800a818:	4619      	mov	r1, r3
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 f850 	bl	800a8c0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a820:	e01f      	b.n	800a862 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d008      	beq.n	800a83e <HAL_UART_IRQHandler+0x326>
 800a82c:	6a3b      	ldr	r3, [r7, #32]
 800a82e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a832:	2b00      	cmp	r3, #0
 800a834:	d003      	beq.n	800a83e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 f9b9 	bl	800abae <UART_Transmit_IT>
    return;
 800a83c:	e012      	b.n	800a864 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00d      	beq.n	800a864 <HAL_UART_IRQHandler+0x34c>
 800a848:	6a3b      	ldr	r3, [r7, #32]
 800a84a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d008      	beq.n	800a864 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f9fb 	bl	800ac4e <UART_EndTransmit_IT>
    return;
 800a858:	e004      	b.n	800a864 <HAL_UART_IRQHandler+0x34c>
    return;
 800a85a:	bf00      	nop
 800a85c:	e002      	b.n	800a864 <HAL_UART_IRQHandler+0x34c>
      return;
 800a85e:	bf00      	nop
 800a860:	e000      	b.n	800a864 <HAL_UART_IRQHandler+0x34c>
      return;
 800a862:	bf00      	nop
  }
}
 800a864:	3728      	adds	r7, #40	; 0x28
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	0800ab87 	.word	0x0800ab87

0800a870 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a878:	bf00      	nop
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a88c:	bf00      	nop
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a8b4:	bf00      	nop
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a8cc:	bf00      	nop
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d12a      	bne.n	800a94a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	68da      	ldr	r2, [r3, #12]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a908:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	695a      	ldr	r2, [r3, #20]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f022 0201 	bic.w	r2, r2, #1
 800a918:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	695a      	ldr	r2, [r3, #20]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a928:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2220      	movs	r2, #32
 800a92e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a936:	2b01      	cmp	r3, #1
 800a938:	d107      	bne.n	800a94a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68da      	ldr	r2, [r3, #12]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f022 0210 	bic.w	r2, r2, #16
 800a948:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d106      	bne.n	800a960 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a956:	4619      	mov	r1, r3
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f7ff ffb1 	bl	800a8c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a95e:	e002      	b.n	800a966 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f7ff ff8f 	bl	800a884 <HAL_UART_RxCpltCallback>
}
 800a966:	bf00      	nop
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b084      	sub	sp, #16
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a980:	2b01      	cmp	r3, #1
 800a982:	d108      	bne.n	800a996 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a988:	085b      	lsrs	r3, r3, #1
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	4619      	mov	r1, r3
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f7ff ff96 	bl	800a8c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a994:	e002      	b.n	800a99c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f7ff ff7e 	bl	800a898 <HAL_UART_RxHalfCpltCallback>
}
 800a99c:	bf00      	nop
 800a99e:	3710      	adds	r7, #16
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9c0:	2b80      	cmp	r3, #128	; 0x80
 800a9c2:	bf0c      	ite	eq
 800a9c4:	2301      	moveq	r3, #1
 800a9c6:	2300      	movne	r3, #0
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	2b21      	cmp	r3, #33	; 0x21
 800a9d6:	d108      	bne.n	800a9ea <UART_DMAError+0x46>
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d005      	beq.n	800a9ea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a9e4:	68b8      	ldr	r0, [r7, #8]
 800a9e6:	f000 f88b 	bl	800ab00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	695b      	ldr	r3, [r3, #20]
 800a9f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9f4:	2b40      	cmp	r3, #64	; 0x40
 800a9f6:	bf0c      	ite	eq
 800a9f8:	2301      	moveq	r3, #1
 800a9fa:	2300      	movne	r3, #0
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	2b22      	cmp	r3, #34	; 0x22
 800aa0a:	d108      	bne.n	800aa1e <UART_DMAError+0x7a>
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d005      	beq.n	800aa1e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	2200      	movs	r2, #0
 800aa16:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800aa18:	68b8      	ldr	r0, [r7, #8]
 800aa1a:	f000 f887 	bl	800ab2c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa22:	f043 0210 	orr.w	r2, r3, #16
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa2a:	68b8      	ldr	r0, [r7, #8]
 800aa2c:	f7ff ff3e 	bl	800a8ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa30:	bf00      	nop
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	4613      	mov	r3, r2
 800aa44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800aa46:	68ba      	ldr	r2, [r7, #8]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	88fa      	ldrh	r2, [r7, #6]
 800aa50:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2200      	movs	r2, #0
 800aa56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2222      	movs	r2, #34	; 0x22
 800aa5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa64:	4a23      	ldr	r2, [pc, #140]	; (800aaf4 <UART_Start_Receive_DMA+0xbc>)
 800aa66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6c:	4a22      	ldr	r2, [pc, #136]	; (800aaf8 <UART_Start_Receive_DMA+0xc0>)
 800aa6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa74:	4a21      	ldr	r2, [pc, #132]	; (800aafc <UART_Start_Receive_DMA+0xc4>)
 800aa76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800aa80:	f107 0308 	add.w	r3, r7, #8
 800aa84:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	3304      	adds	r3, #4
 800aa90:	4619      	mov	r1, r3
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	88fb      	ldrh	r3, [r7, #6]
 800aa98:	f7fc fc80 	bl	800739c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	613b      	str	r3, [r7, #16]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	613b      	str	r3, [r7, #16]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	613b      	str	r3, [r7, #16]
 800aab0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68da      	ldr	r2, [r3, #12]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aac8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	695a      	ldr	r2, [r3, #20]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f042 0201 	orr.w	r2, r2, #1
 800aad8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	695a      	ldr	r2, [r3, #20]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aae8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3718      	adds	r7, #24
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	0800a8d9 	.word	0x0800a8d9
 800aaf8:	0800a96f 	.word	0x0800a96f
 800aafc:	0800a9a5 	.word	0x0800a9a5

0800ab00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	68da      	ldr	r2, [r3, #12]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ab16:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2220      	movs	r2, #32
 800ab1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ab20:	bf00      	nop
 800ab22:	370c      	adds	r7, #12
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68da      	ldr	r2, [r3, #12]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ab42:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	695a      	ldr	r2, [r3, #20]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f022 0201 	bic.w	r2, r2, #1
 800ab52:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d107      	bne.n	800ab6c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68da      	ldr	r2, [r3, #12]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f022 0210 	bic.w	r2, r2, #16
 800ab6a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2220      	movs	r2, #32
 800ab70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ab7a:	bf00      	nop
 800ab7c:	370c      	adds	r7, #12
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr

0800ab86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b084      	sub	sp, #16
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2200      	movs	r2, #0
 800ab98:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f7ff fe83 	bl	800a8ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aba6:	bf00      	nop
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800abae:	b480      	push	{r7}
 800abb0:	b085      	sub	sp, #20
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	2b21      	cmp	r3, #33	; 0x21
 800abc0:	d13e      	bne.n	800ac40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abca:	d114      	bne.n	800abf6 <UART_Transmit_IT+0x48>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	691b      	ldr	r3, [r3, #16]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d110      	bne.n	800abf6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a1b      	ldr	r3, [r3, #32]
 800abd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	881b      	ldrh	r3, [r3, #0]
 800abde:	461a      	mov	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abe8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	1c9a      	adds	r2, r3, #2
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	621a      	str	r2, [r3, #32]
 800abf4:	e008      	b.n	800ac08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a1b      	ldr	r3, [r3, #32]
 800abfa:	1c59      	adds	r1, r3, #1
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	6211      	str	r1, [r2, #32]
 800ac00:	781a      	ldrb	r2, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	4619      	mov	r1, r3
 800ac16:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10f      	bne.n	800ac3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	68da      	ldr	r2, [r3, #12]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68da      	ldr	r2, [r3, #12]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	e000      	b.n	800ac42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ac40:	2302      	movs	r3, #2
  }
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3714      	adds	r7, #20
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b082      	sub	sp, #8
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	68da      	ldr	r2, [r3, #12]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2220      	movs	r2, #32
 800ac6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f7ff fdfe 	bl	800a870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b084      	sub	sp, #16
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	2b22      	cmp	r3, #34	; 0x22
 800ac90:	f040 8087 	bne.w	800ada2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac9c:	d117      	bne.n	800acce <UART_Receive_IT+0x50>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d113      	bne.n	800acce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800aca6:	2300      	movs	r3, #0
 800aca8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acae:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acbc:	b29a      	uxth	r2, r3
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc6:	1c9a      	adds	r2, r3, #2
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	629a      	str	r2, [r3, #40]	; 0x28
 800accc:	e026      	b.n	800ad1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800acd4:	2300      	movs	r3, #0
 800acd6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ace0:	d007      	beq.n	800acf2 <UART_Receive_IT+0x74>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d10a      	bne.n	800ad00 <UART_Receive_IT+0x82>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d106      	bne.n	800ad00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	b2da      	uxtb	r2, r3
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	701a      	strb	r2, [r3, #0]
 800acfe:	e008      	b.n	800ad12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad0c:	b2da      	uxtb	r2, r3
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad16:	1c5a      	adds	r2, r3, #1
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	3b01      	subs	r3, #1
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	4619      	mov	r1, r3
 800ad2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d136      	bne.n	800ad9e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	68da      	ldr	r2, [r3, #12]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f022 0220 	bic.w	r2, r2, #32
 800ad3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68da      	ldr	r2, [r3, #12]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ad4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	695a      	ldr	r2, [r3, #20]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f022 0201 	bic.w	r2, r2, #1
 800ad5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2220      	movs	r2, #32
 800ad64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d10e      	bne.n	800ad8e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	68da      	ldr	r2, [r3, #12]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f022 0210 	bic.w	r2, r2, #16
 800ad7e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad84:	4619      	mov	r1, r3
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f7ff fd9a 	bl	800a8c0 <HAL_UARTEx_RxEventCallback>
 800ad8c:	e002      	b.n	800ad94 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f7ff fd78 	bl	800a884 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e002      	b.n	800ada4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	e000      	b.n	800ada4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800ada2:	2302      	movs	r3, #2
  }
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3710      	adds	r7, #16
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800adac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb0:	b09f      	sub	sp, #124	; 0x7c
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800adb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800adc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adc2:	68d9      	ldr	r1, [r3, #12]
 800adc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	ea40 0301 	orr.w	r3, r0, r1
 800adcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800adce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800add0:	689a      	ldr	r2, [r3, #8]
 800add2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	431a      	orrs	r2, r3
 800add8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adda:	695b      	ldr	r3, [r3, #20]
 800addc:	431a      	orrs	r2, r3
 800adde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ade0:	69db      	ldr	r3, [r3, #28]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ade6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800adf0:	f021 010c 	bic.w	r1, r1, #12
 800adf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800adfa:	430b      	orrs	r3, r1
 800adfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800adfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	695b      	ldr	r3, [r3, #20]
 800ae04:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ae08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae0a:	6999      	ldr	r1, [r3, #24]
 800ae0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	ea40 0301 	orr.w	r3, r0, r1
 800ae14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ae16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	4bc5      	ldr	r3, [pc, #788]	; (800b130 <UART_SetConfig+0x384>)
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d004      	beq.n	800ae2a <UART_SetConfig+0x7e>
 800ae20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	4bc3      	ldr	r3, [pc, #780]	; (800b134 <UART_SetConfig+0x388>)
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d103      	bne.n	800ae32 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ae2a:	f7fe fd9d 	bl	8009968 <HAL_RCC_GetPCLK2Freq>
 800ae2e:	6778      	str	r0, [r7, #116]	; 0x74
 800ae30:	e002      	b.n	800ae38 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ae32:	f7fe fd85 	bl	8009940 <HAL_RCC_GetPCLK1Freq>
 800ae36:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae3a:	69db      	ldr	r3, [r3, #28]
 800ae3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae40:	f040 80b6 	bne.w	800afb0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ae44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae46:	461c      	mov	r4, r3
 800ae48:	f04f 0500 	mov.w	r5, #0
 800ae4c:	4622      	mov	r2, r4
 800ae4e:	462b      	mov	r3, r5
 800ae50:	1891      	adds	r1, r2, r2
 800ae52:	6439      	str	r1, [r7, #64]	; 0x40
 800ae54:	415b      	adcs	r3, r3
 800ae56:	647b      	str	r3, [r7, #68]	; 0x44
 800ae58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ae5c:	1912      	adds	r2, r2, r4
 800ae5e:	eb45 0303 	adc.w	r3, r5, r3
 800ae62:	f04f 0000 	mov.w	r0, #0
 800ae66:	f04f 0100 	mov.w	r1, #0
 800ae6a:	00d9      	lsls	r1, r3, #3
 800ae6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ae70:	00d0      	lsls	r0, r2, #3
 800ae72:	4602      	mov	r2, r0
 800ae74:	460b      	mov	r3, r1
 800ae76:	1911      	adds	r1, r2, r4
 800ae78:	6639      	str	r1, [r7, #96]	; 0x60
 800ae7a:	416b      	adcs	r3, r5
 800ae7c:	667b      	str	r3, [r7, #100]	; 0x64
 800ae7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	461a      	mov	r2, r3
 800ae84:	f04f 0300 	mov.w	r3, #0
 800ae88:	1891      	adds	r1, r2, r2
 800ae8a:	63b9      	str	r1, [r7, #56]	; 0x38
 800ae8c:	415b      	adcs	r3, r3
 800ae8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ae94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ae98:	f7f5 fef6 	bl	8000c88 <__aeabi_uldivmod>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	460b      	mov	r3, r1
 800aea0:	4ba5      	ldr	r3, [pc, #660]	; (800b138 <UART_SetConfig+0x38c>)
 800aea2:	fba3 2302 	umull	r2, r3, r3, r2
 800aea6:	095b      	lsrs	r3, r3, #5
 800aea8:	011e      	lsls	r6, r3, #4
 800aeaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aeac:	461c      	mov	r4, r3
 800aeae:	f04f 0500 	mov.w	r5, #0
 800aeb2:	4622      	mov	r2, r4
 800aeb4:	462b      	mov	r3, r5
 800aeb6:	1891      	adds	r1, r2, r2
 800aeb8:	6339      	str	r1, [r7, #48]	; 0x30
 800aeba:	415b      	adcs	r3, r3
 800aebc:	637b      	str	r3, [r7, #52]	; 0x34
 800aebe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800aec2:	1912      	adds	r2, r2, r4
 800aec4:	eb45 0303 	adc.w	r3, r5, r3
 800aec8:	f04f 0000 	mov.w	r0, #0
 800aecc:	f04f 0100 	mov.w	r1, #0
 800aed0:	00d9      	lsls	r1, r3, #3
 800aed2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aed6:	00d0      	lsls	r0, r2, #3
 800aed8:	4602      	mov	r2, r0
 800aeda:	460b      	mov	r3, r1
 800aedc:	1911      	adds	r1, r2, r4
 800aede:	65b9      	str	r1, [r7, #88]	; 0x58
 800aee0:	416b      	adcs	r3, r5
 800aee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	461a      	mov	r2, r3
 800aeea:	f04f 0300 	mov.w	r3, #0
 800aeee:	1891      	adds	r1, r2, r2
 800aef0:	62b9      	str	r1, [r7, #40]	; 0x28
 800aef2:	415b      	adcs	r3, r3
 800aef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aef6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aefa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800aefe:	f7f5 fec3 	bl	8000c88 <__aeabi_uldivmod>
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	4b8c      	ldr	r3, [pc, #560]	; (800b138 <UART_SetConfig+0x38c>)
 800af08:	fba3 1302 	umull	r1, r3, r3, r2
 800af0c:	095b      	lsrs	r3, r3, #5
 800af0e:	2164      	movs	r1, #100	; 0x64
 800af10:	fb01 f303 	mul.w	r3, r1, r3
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	00db      	lsls	r3, r3, #3
 800af18:	3332      	adds	r3, #50	; 0x32
 800af1a:	4a87      	ldr	r2, [pc, #540]	; (800b138 <UART_SetConfig+0x38c>)
 800af1c:	fba2 2303 	umull	r2, r3, r2, r3
 800af20:	095b      	lsrs	r3, r3, #5
 800af22:	005b      	lsls	r3, r3, #1
 800af24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800af28:	441e      	add	r6, r3
 800af2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af2c:	4618      	mov	r0, r3
 800af2e:	f04f 0100 	mov.w	r1, #0
 800af32:	4602      	mov	r2, r0
 800af34:	460b      	mov	r3, r1
 800af36:	1894      	adds	r4, r2, r2
 800af38:	623c      	str	r4, [r7, #32]
 800af3a:	415b      	adcs	r3, r3
 800af3c:	627b      	str	r3, [r7, #36]	; 0x24
 800af3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800af42:	1812      	adds	r2, r2, r0
 800af44:	eb41 0303 	adc.w	r3, r1, r3
 800af48:	f04f 0400 	mov.w	r4, #0
 800af4c:	f04f 0500 	mov.w	r5, #0
 800af50:	00dd      	lsls	r5, r3, #3
 800af52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800af56:	00d4      	lsls	r4, r2, #3
 800af58:	4622      	mov	r2, r4
 800af5a:	462b      	mov	r3, r5
 800af5c:	1814      	adds	r4, r2, r0
 800af5e:	653c      	str	r4, [r7, #80]	; 0x50
 800af60:	414b      	adcs	r3, r1
 800af62:	657b      	str	r3, [r7, #84]	; 0x54
 800af64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	461a      	mov	r2, r3
 800af6a:	f04f 0300 	mov.w	r3, #0
 800af6e:	1891      	adds	r1, r2, r2
 800af70:	61b9      	str	r1, [r7, #24]
 800af72:	415b      	adcs	r3, r3
 800af74:	61fb      	str	r3, [r7, #28]
 800af76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800af7e:	f7f5 fe83 	bl	8000c88 <__aeabi_uldivmod>
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
 800af86:	4b6c      	ldr	r3, [pc, #432]	; (800b138 <UART_SetConfig+0x38c>)
 800af88:	fba3 1302 	umull	r1, r3, r3, r2
 800af8c:	095b      	lsrs	r3, r3, #5
 800af8e:	2164      	movs	r1, #100	; 0x64
 800af90:	fb01 f303 	mul.w	r3, r1, r3
 800af94:	1ad3      	subs	r3, r2, r3
 800af96:	00db      	lsls	r3, r3, #3
 800af98:	3332      	adds	r3, #50	; 0x32
 800af9a:	4a67      	ldr	r2, [pc, #412]	; (800b138 <UART_SetConfig+0x38c>)
 800af9c:	fba2 2303 	umull	r2, r3, r2, r3
 800afa0:	095b      	lsrs	r3, r3, #5
 800afa2:	f003 0207 	and.w	r2, r3, #7
 800afa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4432      	add	r2, r6
 800afac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800afae:	e0b9      	b.n	800b124 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800afb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afb2:	461c      	mov	r4, r3
 800afb4:	f04f 0500 	mov.w	r5, #0
 800afb8:	4622      	mov	r2, r4
 800afba:	462b      	mov	r3, r5
 800afbc:	1891      	adds	r1, r2, r2
 800afbe:	6139      	str	r1, [r7, #16]
 800afc0:	415b      	adcs	r3, r3
 800afc2:	617b      	str	r3, [r7, #20]
 800afc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800afc8:	1912      	adds	r2, r2, r4
 800afca:	eb45 0303 	adc.w	r3, r5, r3
 800afce:	f04f 0000 	mov.w	r0, #0
 800afd2:	f04f 0100 	mov.w	r1, #0
 800afd6:	00d9      	lsls	r1, r3, #3
 800afd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800afdc:	00d0      	lsls	r0, r2, #3
 800afde:	4602      	mov	r2, r0
 800afe0:	460b      	mov	r3, r1
 800afe2:	eb12 0804 	adds.w	r8, r2, r4
 800afe6:	eb43 0905 	adc.w	r9, r3, r5
 800afea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	4618      	mov	r0, r3
 800aff0:	f04f 0100 	mov.w	r1, #0
 800aff4:	f04f 0200 	mov.w	r2, #0
 800aff8:	f04f 0300 	mov.w	r3, #0
 800affc:	008b      	lsls	r3, r1, #2
 800affe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b002:	0082      	lsls	r2, r0, #2
 800b004:	4640      	mov	r0, r8
 800b006:	4649      	mov	r1, r9
 800b008:	f7f5 fe3e 	bl	8000c88 <__aeabi_uldivmod>
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	4b49      	ldr	r3, [pc, #292]	; (800b138 <UART_SetConfig+0x38c>)
 800b012:	fba3 2302 	umull	r2, r3, r3, r2
 800b016:	095b      	lsrs	r3, r3, #5
 800b018:	011e      	lsls	r6, r3, #4
 800b01a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b01c:	4618      	mov	r0, r3
 800b01e:	f04f 0100 	mov.w	r1, #0
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	1894      	adds	r4, r2, r2
 800b028:	60bc      	str	r4, [r7, #8]
 800b02a:	415b      	adcs	r3, r3
 800b02c:	60fb      	str	r3, [r7, #12]
 800b02e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b032:	1812      	adds	r2, r2, r0
 800b034:	eb41 0303 	adc.w	r3, r1, r3
 800b038:	f04f 0400 	mov.w	r4, #0
 800b03c:	f04f 0500 	mov.w	r5, #0
 800b040:	00dd      	lsls	r5, r3, #3
 800b042:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b046:	00d4      	lsls	r4, r2, #3
 800b048:	4622      	mov	r2, r4
 800b04a:	462b      	mov	r3, r5
 800b04c:	1814      	adds	r4, r2, r0
 800b04e:	64bc      	str	r4, [r7, #72]	; 0x48
 800b050:	414b      	adcs	r3, r1
 800b052:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	4618      	mov	r0, r3
 800b05a:	f04f 0100 	mov.w	r1, #0
 800b05e:	f04f 0200 	mov.w	r2, #0
 800b062:	f04f 0300 	mov.w	r3, #0
 800b066:	008b      	lsls	r3, r1, #2
 800b068:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b06c:	0082      	lsls	r2, r0, #2
 800b06e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b072:	f7f5 fe09 	bl	8000c88 <__aeabi_uldivmod>
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	4b2f      	ldr	r3, [pc, #188]	; (800b138 <UART_SetConfig+0x38c>)
 800b07c:	fba3 1302 	umull	r1, r3, r3, r2
 800b080:	095b      	lsrs	r3, r3, #5
 800b082:	2164      	movs	r1, #100	; 0x64
 800b084:	fb01 f303 	mul.w	r3, r1, r3
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	011b      	lsls	r3, r3, #4
 800b08c:	3332      	adds	r3, #50	; 0x32
 800b08e:	4a2a      	ldr	r2, [pc, #168]	; (800b138 <UART_SetConfig+0x38c>)
 800b090:	fba2 2303 	umull	r2, r3, r2, r3
 800b094:	095b      	lsrs	r3, r3, #5
 800b096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b09a:	441e      	add	r6, r3
 800b09c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f04f 0100 	mov.w	r1, #0
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	1894      	adds	r4, r2, r2
 800b0aa:	603c      	str	r4, [r7, #0]
 800b0ac:	415b      	adcs	r3, r3
 800b0ae:	607b      	str	r3, [r7, #4]
 800b0b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0b4:	1812      	adds	r2, r2, r0
 800b0b6:	eb41 0303 	adc.w	r3, r1, r3
 800b0ba:	f04f 0400 	mov.w	r4, #0
 800b0be:	f04f 0500 	mov.w	r5, #0
 800b0c2:	00dd      	lsls	r5, r3, #3
 800b0c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b0c8:	00d4      	lsls	r4, r2, #3
 800b0ca:	4622      	mov	r2, r4
 800b0cc:	462b      	mov	r3, r5
 800b0ce:	eb12 0a00 	adds.w	sl, r2, r0
 800b0d2:	eb43 0b01 	adc.w	fp, r3, r1
 800b0d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f04f 0100 	mov.w	r1, #0
 800b0e0:	f04f 0200 	mov.w	r2, #0
 800b0e4:	f04f 0300 	mov.w	r3, #0
 800b0e8:	008b      	lsls	r3, r1, #2
 800b0ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b0ee:	0082      	lsls	r2, r0, #2
 800b0f0:	4650      	mov	r0, sl
 800b0f2:	4659      	mov	r1, fp
 800b0f4:	f7f5 fdc8 	bl	8000c88 <__aeabi_uldivmod>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	4b0e      	ldr	r3, [pc, #56]	; (800b138 <UART_SetConfig+0x38c>)
 800b0fe:	fba3 1302 	umull	r1, r3, r3, r2
 800b102:	095b      	lsrs	r3, r3, #5
 800b104:	2164      	movs	r1, #100	; 0x64
 800b106:	fb01 f303 	mul.w	r3, r1, r3
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	011b      	lsls	r3, r3, #4
 800b10e:	3332      	adds	r3, #50	; 0x32
 800b110:	4a09      	ldr	r2, [pc, #36]	; (800b138 <UART_SetConfig+0x38c>)
 800b112:	fba2 2303 	umull	r2, r3, r2, r3
 800b116:	095b      	lsrs	r3, r3, #5
 800b118:	f003 020f 	and.w	r2, r3, #15
 800b11c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4432      	add	r2, r6
 800b122:	609a      	str	r2, [r3, #8]
}
 800b124:	bf00      	nop
 800b126:	377c      	adds	r7, #124	; 0x7c
 800b128:	46bd      	mov	sp, r7
 800b12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12e:	bf00      	nop
 800b130:	40011000 	.word	0x40011000
 800b134:	40011400 	.word	0x40011400
 800b138:	51eb851f 	.word	0x51eb851f

0800b13c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800b146:	2300      	movs	r3, #0
 800b148:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b154:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	4b20      	ldr	r3, [pc, #128]	; (800b1dc <FSMC_NORSRAM_Init+0xa0>)
 800b15a:	4013      	ands	r3, r2
 800b15c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b166:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800b16c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800b172:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800b178:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800b17e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800b184:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800b18a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800b190:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800b196:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800b19c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800b1a2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800b1a8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	2b08      	cmp	r3, #8
 800b1b6:	d103      	bne.n	800b1c0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1be:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	68f9      	ldr	r1, [r7, #12]
 800b1c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3714      	adds	r7, #20
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	fff00080 	.word	0xfff00080

0800b1e0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b087      	sub	sp, #28
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	1c5a      	adds	r2, r3, #1
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1fa:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b202:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b20e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800b216:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800b21e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	691b      	ldr	r3, [r3, #16]
 800b224:	3b01      	subs	r3, #1
 800b226:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b228:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	695b      	ldr	r3, [r3, #20]
 800b22e:	3b02      	subs	r3, #2
 800b230:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800b232:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b238:	4313      	orrs	r3, r2
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	4313      	orrs	r3, r2
 800b23e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	1c5a      	adds	r2, r3, #1
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6979      	ldr	r1, [r7, #20]
 800b248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800b24c:	2300      	movs	r3, #0
}
 800b24e:	4618      	mov	r0, r3
 800b250:	371c      	adds	r7, #28
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr
	...

0800b25c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b087      	sub	sp, #28
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
 800b268:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800b26a:	2300      	movs	r3, #0
 800b26c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b274:	d122      	bne.n	800b2bc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b27e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800b280:	697a      	ldr	r2, [r7, #20]
 800b282:	4b15      	ldr	r3, [pc, #84]	; (800b2d8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800b284:	4013      	ands	r3, r2
 800b286:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b292:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800b29a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800b2a2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b2a8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b2aa:	697a      	ldr	r2, [r7, #20]
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	6979      	ldr	r1, [r7, #20]
 800b2b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b2ba:	e005      	b.n	800b2c8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b2c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	371c      	adds	r7, #28
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	cff00000 	.word	0xcff00000

0800b2dc <__errno>:
 800b2dc:	4b01      	ldr	r3, [pc, #4]	; (800b2e4 <__errno+0x8>)
 800b2de:	6818      	ldr	r0, [r3, #0]
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	20000014 	.word	0x20000014

0800b2e8 <__libc_init_array>:
 800b2e8:	b570      	push	{r4, r5, r6, lr}
 800b2ea:	4d0d      	ldr	r5, [pc, #52]	; (800b320 <__libc_init_array+0x38>)
 800b2ec:	4c0d      	ldr	r4, [pc, #52]	; (800b324 <__libc_init_array+0x3c>)
 800b2ee:	1b64      	subs	r4, r4, r5
 800b2f0:	10a4      	asrs	r4, r4, #2
 800b2f2:	2600      	movs	r6, #0
 800b2f4:	42a6      	cmp	r6, r4
 800b2f6:	d109      	bne.n	800b30c <__libc_init_array+0x24>
 800b2f8:	4d0b      	ldr	r5, [pc, #44]	; (800b328 <__libc_init_array+0x40>)
 800b2fa:	4c0c      	ldr	r4, [pc, #48]	; (800b32c <__libc_init_array+0x44>)
 800b2fc:	f004 f8e2 	bl	800f4c4 <_init>
 800b300:	1b64      	subs	r4, r4, r5
 800b302:	10a4      	asrs	r4, r4, #2
 800b304:	2600      	movs	r6, #0
 800b306:	42a6      	cmp	r6, r4
 800b308:	d105      	bne.n	800b316 <__libc_init_array+0x2e>
 800b30a:	bd70      	pop	{r4, r5, r6, pc}
 800b30c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b310:	4798      	blx	r3
 800b312:	3601      	adds	r6, #1
 800b314:	e7ee      	b.n	800b2f4 <__libc_init_array+0xc>
 800b316:	f855 3b04 	ldr.w	r3, [r5], #4
 800b31a:	4798      	blx	r3
 800b31c:	3601      	adds	r6, #1
 800b31e:	e7f2      	b.n	800b306 <__libc_init_array+0x1e>
 800b320:	0801cbb0 	.word	0x0801cbb0
 800b324:	0801cbb0 	.word	0x0801cbb0
 800b328:	0801cbb0 	.word	0x0801cbb0
 800b32c:	0801cbb4 	.word	0x0801cbb4

0800b330 <memset>:
 800b330:	4402      	add	r2, r0
 800b332:	4603      	mov	r3, r0
 800b334:	4293      	cmp	r3, r2
 800b336:	d100      	bne.n	800b33a <memset+0xa>
 800b338:	4770      	bx	lr
 800b33a:	f803 1b01 	strb.w	r1, [r3], #1
 800b33e:	e7f9      	b.n	800b334 <memset+0x4>

0800b340 <__cvt>:
 800b340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b344:	ec55 4b10 	vmov	r4, r5, d0
 800b348:	2d00      	cmp	r5, #0
 800b34a:	460e      	mov	r6, r1
 800b34c:	4619      	mov	r1, r3
 800b34e:	462b      	mov	r3, r5
 800b350:	bfbb      	ittet	lt
 800b352:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b356:	461d      	movlt	r5, r3
 800b358:	2300      	movge	r3, #0
 800b35a:	232d      	movlt	r3, #45	; 0x2d
 800b35c:	700b      	strb	r3, [r1, #0]
 800b35e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b360:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b364:	4691      	mov	r9, r2
 800b366:	f023 0820 	bic.w	r8, r3, #32
 800b36a:	bfbc      	itt	lt
 800b36c:	4622      	movlt	r2, r4
 800b36e:	4614      	movlt	r4, r2
 800b370:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b374:	d005      	beq.n	800b382 <__cvt+0x42>
 800b376:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b37a:	d100      	bne.n	800b37e <__cvt+0x3e>
 800b37c:	3601      	adds	r6, #1
 800b37e:	2102      	movs	r1, #2
 800b380:	e000      	b.n	800b384 <__cvt+0x44>
 800b382:	2103      	movs	r1, #3
 800b384:	ab03      	add	r3, sp, #12
 800b386:	9301      	str	r3, [sp, #4]
 800b388:	ab02      	add	r3, sp, #8
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	ec45 4b10 	vmov	d0, r4, r5
 800b390:	4653      	mov	r3, sl
 800b392:	4632      	mov	r2, r6
 800b394:	f000 fe38 	bl	800c008 <_dtoa_r>
 800b398:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b39c:	4607      	mov	r7, r0
 800b39e:	d102      	bne.n	800b3a6 <__cvt+0x66>
 800b3a0:	f019 0f01 	tst.w	r9, #1
 800b3a4:	d022      	beq.n	800b3ec <__cvt+0xac>
 800b3a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b3aa:	eb07 0906 	add.w	r9, r7, r6
 800b3ae:	d110      	bne.n	800b3d2 <__cvt+0x92>
 800b3b0:	783b      	ldrb	r3, [r7, #0]
 800b3b2:	2b30      	cmp	r3, #48	; 0x30
 800b3b4:	d10a      	bne.n	800b3cc <__cvt+0x8c>
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	4629      	mov	r1, r5
 800b3be:	f7f5 fb83 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3c2:	b918      	cbnz	r0, 800b3cc <__cvt+0x8c>
 800b3c4:	f1c6 0601 	rsb	r6, r6, #1
 800b3c8:	f8ca 6000 	str.w	r6, [sl]
 800b3cc:	f8da 3000 	ldr.w	r3, [sl]
 800b3d0:	4499      	add	r9, r3
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	4629      	mov	r1, r5
 800b3da:	f7f5 fb75 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3de:	b108      	cbz	r0, 800b3e4 <__cvt+0xa4>
 800b3e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b3e4:	2230      	movs	r2, #48	; 0x30
 800b3e6:	9b03      	ldr	r3, [sp, #12]
 800b3e8:	454b      	cmp	r3, r9
 800b3ea:	d307      	bcc.n	800b3fc <__cvt+0xbc>
 800b3ec:	9b03      	ldr	r3, [sp, #12]
 800b3ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3f0:	1bdb      	subs	r3, r3, r7
 800b3f2:	4638      	mov	r0, r7
 800b3f4:	6013      	str	r3, [r2, #0]
 800b3f6:	b004      	add	sp, #16
 800b3f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3fc:	1c59      	adds	r1, r3, #1
 800b3fe:	9103      	str	r1, [sp, #12]
 800b400:	701a      	strb	r2, [r3, #0]
 800b402:	e7f0      	b.n	800b3e6 <__cvt+0xa6>

0800b404 <__exponent>:
 800b404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b406:	4603      	mov	r3, r0
 800b408:	2900      	cmp	r1, #0
 800b40a:	bfb8      	it	lt
 800b40c:	4249      	neglt	r1, r1
 800b40e:	f803 2b02 	strb.w	r2, [r3], #2
 800b412:	bfb4      	ite	lt
 800b414:	222d      	movlt	r2, #45	; 0x2d
 800b416:	222b      	movge	r2, #43	; 0x2b
 800b418:	2909      	cmp	r1, #9
 800b41a:	7042      	strb	r2, [r0, #1]
 800b41c:	dd2a      	ble.n	800b474 <__exponent+0x70>
 800b41e:	f10d 0407 	add.w	r4, sp, #7
 800b422:	46a4      	mov	ip, r4
 800b424:	270a      	movs	r7, #10
 800b426:	46a6      	mov	lr, r4
 800b428:	460a      	mov	r2, r1
 800b42a:	fb91 f6f7 	sdiv	r6, r1, r7
 800b42e:	fb07 1516 	mls	r5, r7, r6, r1
 800b432:	3530      	adds	r5, #48	; 0x30
 800b434:	2a63      	cmp	r2, #99	; 0x63
 800b436:	f104 34ff 	add.w	r4, r4, #4294967295
 800b43a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b43e:	4631      	mov	r1, r6
 800b440:	dcf1      	bgt.n	800b426 <__exponent+0x22>
 800b442:	3130      	adds	r1, #48	; 0x30
 800b444:	f1ae 0502 	sub.w	r5, lr, #2
 800b448:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b44c:	1c44      	adds	r4, r0, #1
 800b44e:	4629      	mov	r1, r5
 800b450:	4561      	cmp	r1, ip
 800b452:	d30a      	bcc.n	800b46a <__exponent+0x66>
 800b454:	f10d 0209 	add.w	r2, sp, #9
 800b458:	eba2 020e 	sub.w	r2, r2, lr
 800b45c:	4565      	cmp	r5, ip
 800b45e:	bf88      	it	hi
 800b460:	2200      	movhi	r2, #0
 800b462:	4413      	add	r3, r2
 800b464:	1a18      	subs	r0, r3, r0
 800b466:	b003      	add	sp, #12
 800b468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b46a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b46e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b472:	e7ed      	b.n	800b450 <__exponent+0x4c>
 800b474:	2330      	movs	r3, #48	; 0x30
 800b476:	3130      	adds	r1, #48	; 0x30
 800b478:	7083      	strb	r3, [r0, #2]
 800b47a:	70c1      	strb	r1, [r0, #3]
 800b47c:	1d03      	adds	r3, r0, #4
 800b47e:	e7f1      	b.n	800b464 <__exponent+0x60>

0800b480 <_printf_float>:
 800b480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b484:	ed2d 8b02 	vpush	{d8}
 800b488:	b08d      	sub	sp, #52	; 0x34
 800b48a:	460c      	mov	r4, r1
 800b48c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b490:	4616      	mov	r6, r2
 800b492:	461f      	mov	r7, r3
 800b494:	4605      	mov	r5, r0
 800b496:	f001 fd5b 	bl	800cf50 <_localeconv_r>
 800b49a:	f8d0 a000 	ldr.w	sl, [r0]
 800b49e:	4650      	mov	r0, sl
 800b4a0:	f7f4 fe96 	bl	80001d0 <strlen>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	9305      	str	r3, [sp, #20]
 800b4ac:	f8d8 3000 	ldr.w	r3, [r8]
 800b4b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b4b4:	3307      	adds	r3, #7
 800b4b6:	f023 0307 	bic.w	r3, r3, #7
 800b4ba:	f103 0208 	add.w	r2, r3, #8
 800b4be:	f8c8 2000 	str.w	r2, [r8]
 800b4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b4ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b4ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b4d2:	9307      	str	r3, [sp, #28]
 800b4d4:	f8cd 8018 	str.w	r8, [sp, #24]
 800b4d8:	ee08 0a10 	vmov	s16, r0
 800b4dc:	4b9f      	ldr	r3, [pc, #636]	; (800b75c <_printf_float+0x2dc>)
 800b4de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b4e6:	f7f5 fb21 	bl	8000b2c <__aeabi_dcmpun>
 800b4ea:	bb88      	cbnz	r0, 800b550 <_printf_float+0xd0>
 800b4ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4f0:	4b9a      	ldr	r3, [pc, #616]	; (800b75c <_printf_float+0x2dc>)
 800b4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f6:	f7f5 fafb 	bl	8000af0 <__aeabi_dcmple>
 800b4fa:	bb48      	cbnz	r0, 800b550 <_printf_float+0xd0>
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	2300      	movs	r3, #0
 800b500:	4640      	mov	r0, r8
 800b502:	4649      	mov	r1, r9
 800b504:	f7f5 faea 	bl	8000adc <__aeabi_dcmplt>
 800b508:	b110      	cbz	r0, 800b510 <_printf_float+0x90>
 800b50a:	232d      	movs	r3, #45	; 0x2d
 800b50c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b510:	4b93      	ldr	r3, [pc, #588]	; (800b760 <_printf_float+0x2e0>)
 800b512:	4894      	ldr	r0, [pc, #592]	; (800b764 <_printf_float+0x2e4>)
 800b514:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b518:	bf94      	ite	ls
 800b51a:	4698      	movls	r8, r3
 800b51c:	4680      	movhi	r8, r0
 800b51e:	2303      	movs	r3, #3
 800b520:	6123      	str	r3, [r4, #16]
 800b522:	9b05      	ldr	r3, [sp, #20]
 800b524:	f023 0204 	bic.w	r2, r3, #4
 800b528:	6022      	str	r2, [r4, #0]
 800b52a:	f04f 0900 	mov.w	r9, #0
 800b52e:	9700      	str	r7, [sp, #0]
 800b530:	4633      	mov	r3, r6
 800b532:	aa0b      	add	r2, sp, #44	; 0x2c
 800b534:	4621      	mov	r1, r4
 800b536:	4628      	mov	r0, r5
 800b538:	f000 f9d8 	bl	800b8ec <_printf_common>
 800b53c:	3001      	adds	r0, #1
 800b53e:	f040 8090 	bne.w	800b662 <_printf_float+0x1e2>
 800b542:	f04f 30ff 	mov.w	r0, #4294967295
 800b546:	b00d      	add	sp, #52	; 0x34
 800b548:	ecbd 8b02 	vpop	{d8}
 800b54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b550:	4642      	mov	r2, r8
 800b552:	464b      	mov	r3, r9
 800b554:	4640      	mov	r0, r8
 800b556:	4649      	mov	r1, r9
 800b558:	f7f5 fae8 	bl	8000b2c <__aeabi_dcmpun>
 800b55c:	b140      	cbz	r0, 800b570 <_printf_float+0xf0>
 800b55e:	464b      	mov	r3, r9
 800b560:	2b00      	cmp	r3, #0
 800b562:	bfbc      	itt	lt
 800b564:	232d      	movlt	r3, #45	; 0x2d
 800b566:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b56a:	487f      	ldr	r0, [pc, #508]	; (800b768 <_printf_float+0x2e8>)
 800b56c:	4b7f      	ldr	r3, [pc, #508]	; (800b76c <_printf_float+0x2ec>)
 800b56e:	e7d1      	b.n	800b514 <_printf_float+0x94>
 800b570:	6863      	ldr	r3, [r4, #4]
 800b572:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b576:	9206      	str	r2, [sp, #24]
 800b578:	1c5a      	adds	r2, r3, #1
 800b57a:	d13f      	bne.n	800b5fc <_printf_float+0x17c>
 800b57c:	2306      	movs	r3, #6
 800b57e:	6063      	str	r3, [r4, #4]
 800b580:	9b05      	ldr	r3, [sp, #20]
 800b582:	6861      	ldr	r1, [r4, #4]
 800b584:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b588:	2300      	movs	r3, #0
 800b58a:	9303      	str	r3, [sp, #12]
 800b58c:	ab0a      	add	r3, sp, #40	; 0x28
 800b58e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b592:	ab09      	add	r3, sp, #36	; 0x24
 800b594:	ec49 8b10 	vmov	d0, r8, r9
 800b598:	9300      	str	r3, [sp, #0]
 800b59a:	6022      	str	r2, [r4, #0]
 800b59c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	f7ff fecd 	bl	800b340 <__cvt>
 800b5a6:	9b06      	ldr	r3, [sp, #24]
 800b5a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5aa:	2b47      	cmp	r3, #71	; 0x47
 800b5ac:	4680      	mov	r8, r0
 800b5ae:	d108      	bne.n	800b5c2 <_printf_float+0x142>
 800b5b0:	1cc8      	adds	r0, r1, #3
 800b5b2:	db02      	blt.n	800b5ba <_printf_float+0x13a>
 800b5b4:	6863      	ldr	r3, [r4, #4]
 800b5b6:	4299      	cmp	r1, r3
 800b5b8:	dd41      	ble.n	800b63e <_printf_float+0x1be>
 800b5ba:	f1ab 0b02 	sub.w	fp, fp, #2
 800b5be:	fa5f fb8b 	uxtb.w	fp, fp
 800b5c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b5c6:	d820      	bhi.n	800b60a <_printf_float+0x18a>
 800b5c8:	3901      	subs	r1, #1
 800b5ca:	465a      	mov	r2, fp
 800b5cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b5d0:	9109      	str	r1, [sp, #36]	; 0x24
 800b5d2:	f7ff ff17 	bl	800b404 <__exponent>
 800b5d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5d8:	1813      	adds	r3, r2, r0
 800b5da:	2a01      	cmp	r2, #1
 800b5dc:	4681      	mov	r9, r0
 800b5de:	6123      	str	r3, [r4, #16]
 800b5e0:	dc02      	bgt.n	800b5e8 <_printf_float+0x168>
 800b5e2:	6822      	ldr	r2, [r4, #0]
 800b5e4:	07d2      	lsls	r2, r2, #31
 800b5e6:	d501      	bpl.n	800b5ec <_printf_float+0x16c>
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	6123      	str	r3, [r4, #16]
 800b5ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d09c      	beq.n	800b52e <_printf_float+0xae>
 800b5f4:	232d      	movs	r3, #45	; 0x2d
 800b5f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5fa:	e798      	b.n	800b52e <_printf_float+0xae>
 800b5fc:	9a06      	ldr	r2, [sp, #24]
 800b5fe:	2a47      	cmp	r2, #71	; 0x47
 800b600:	d1be      	bne.n	800b580 <_printf_float+0x100>
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1bc      	bne.n	800b580 <_printf_float+0x100>
 800b606:	2301      	movs	r3, #1
 800b608:	e7b9      	b.n	800b57e <_printf_float+0xfe>
 800b60a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b60e:	d118      	bne.n	800b642 <_printf_float+0x1c2>
 800b610:	2900      	cmp	r1, #0
 800b612:	6863      	ldr	r3, [r4, #4]
 800b614:	dd0b      	ble.n	800b62e <_printf_float+0x1ae>
 800b616:	6121      	str	r1, [r4, #16]
 800b618:	b913      	cbnz	r3, 800b620 <_printf_float+0x1a0>
 800b61a:	6822      	ldr	r2, [r4, #0]
 800b61c:	07d0      	lsls	r0, r2, #31
 800b61e:	d502      	bpl.n	800b626 <_printf_float+0x1a6>
 800b620:	3301      	adds	r3, #1
 800b622:	440b      	add	r3, r1
 800b624:	6123      	str	r3, [r4, #16]
 800b626:	65a1      	str	r1, [r4, #88]	; 0x58
 800b628:	f04f 0900 	mov.w	r9, #0
 800b62c:	e7de      	b.n	800b5ec <_printf_float+0x16c>
 800b62e:	b913      	cbnz	r3, 800b636 <_printf_float+0x1b6>
 800b630:	6822      	ldr	r2, [r4, #0]
 800b632:	07d2      	lsls	r2, r2, #31
 800b634:	d501      	bpl.n	800b63a <_printf_float+0x1ba>
 800b636:	3302      	adds	r3, #2
 800b638:	e7f4      	b.n	800b624 <_printf_float+0x1a4>
 800b63a:	2301      	movs	r3, #1
 800b63c:	e7f2      	b.n	800b624 <_printf_float+0x1a4>
 800b63e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b644:	4299      	cmp	r1, r3
 800b646:	db05      	blt.n	800b654 <_printf_float+0x1d4>
 800b648:	6823      	ldr	r3, [r4, #0]
 800b64a:	6121      	str	r1, [r4, #16]
 800b64c:	07d8      	lsls	r0, r3, #31
 800b64e:	d5ea      	bpl.n	800b626 <_printf_float+0x1a6>
 800b650:	1c4b      	adds	r3, r1, #1
 800b652:	e7e7      	b.n	800b624 <_printf_float+0x1a4>
 800b654:	2900      	cmp	r1, #0
 800b656:	bfd4      	ite	le
 800b658:	f1c1 0202 	rsble	r2, r1, #2
 800b65c:	2201      	movgt	r2, #1
 800b65e:	4413      	add	r3, r2
 800b660:	e7e0      	b.n	800b624 <_printf_float+0x1a4>
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	055a      	lsls	r2, r3, #21
 800b666:	d407      	bmi.n	800b678 <_printf_float+0x1f8>
 800b668:	6923      	ldr	r3, [r4, #16]
 800b66a:	4642      	mov	r2, r8
 800b66c:	4631      	mov	r1, r6
 800b66e:	4628      	mov	r0, r5
 800b670:	47b8      	blx	r7
 800b672:	3001      	adds	r0, #1
 800b674:	d12c      	bne.n	800b6d0 <_printf_float+0x250>
 800b676:	e764      	b.n	800b542 <_printf_float+0xc2>
 800b678:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b67c:	f240 80e0 	bls.w	800b840 <_printf_float+0x3c0>
 800b680:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b684:	2200      	movs	r2, #0
 800b686:	2300      	movs	r3, #0
 800b688:	f7f5 fa1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b68c:	2800      	cmp	r0, #0
 800b68e:	d034      	beq.n	800b6fa <_printf_float+0x27a>
 800b690:	4a37      	ldr	r2, [pc, #220]	; (800b770 <_printf_float+0x2f0>)
 800b692:	2301      	movs	r3, #1
 800b694:	4631      	mov	r1, r6
 800b696:	4628      	mov	r0, r5
 800b698:	47b8      	blx	r7
 800b69a:	3001      	adds	r0, #1
 800b69c:	f43f af51 	beq.w	800b542 <_printf_float+0xc2>
 800b6a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	db02      	blt.n	800b6ae <_printf_float+0x22e>
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	07d8      	lsls	r0, r3, #31
 800b6ac:	d510      	bpl.n	800b6d0 <_printf_float+0x250>
 800b6ae:	ee18 3a10 	vmov	r3, s16
 800b6b2:	4652      	mov	r2, sl
 800b6b4:	4631      	mov	r1, r6
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	47b8      	blx	r7
 800b6ba:	3001      	adds	r0, #1
 800b6bc:	f43f af41 	beq.w	800b542 <_printf_float+0xc2>
 800b6c0:	f04f 0800 	mov.w	r8, #0
 800b6c4:	f104 091a 	add.w	r9, r4, #26
 800b6c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ca:	3b01      	subs	r3, #1
 800b6cc:	4543      	cmp	r3, r8
 800b6ce:	dc09      	bgt.n	800b6e4 <_printf_float+0x264>
 800b6d0:	6823      	ldr	r3, [r4, #0]
 800b6d2:	079b      	lsls	r3, r3, #30
 800b6d4:	f100 8105 	bmi.w	800b8e2 <_printf_float+0x462>
 800b6d8:	68e0      	ldr	r0, [r4, #12]
 800b6da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6dc:	4298      	cmp	r0, r3
 800b6de:	bfb8      	it	lt
 800b6e0:	4618      	movlt	r0, r3
 800b6e2:	e730      	b.n	800b546 <_printf_float+0xc6>
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	464a      	mov	r2, r9
 800b6e8:	4631      	mov	r1, r6
 800b6ea:	4628      	mov	r0, r5
 800b6ec:	47b8      	blx	r7
 800b6ee:	3001      	adds	r0, #1
 800b6f0:	f43f af27 	beq.w	800b542 <_printf_float+0xc2>
 800b6f4:	f108 0801 	add.w	r8, r8, #1
 800b6f8:	e7e6      	b.n	800b6c8 <_printf_float+0x248>
 800b6fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	dc39      	bgt.n	800b774 <_printf_float+0x2f4>
 800b700:	4a1b      	ldr	r2, [pc, #108]	; (800b770 <_printf_float+0x2f0>)
 800b702:	2301      	movs	r3, #1
 800b704:	4631      	mov	r1, r6
 800b706:	4628      	mov	r0, r5
 800b708:	47b8      	blx	r7
 800b70a:	3001      	adds	r0, #1
 800b70c:	f43f af19 	beq.w	800b542 <_printf_float+0xc2>
 800b710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b714:	4313      	orrs	r3, r2
 800b716:	d102      	bne.n	800b71e <_printf_float+0x29e>
 800b718:	6823      	ldr	r3, [r4, #0]
 800b71a:	07d9      	lsls	r1, r3, #31
 800b71c:	d5d8      	bpl.n	800b6d0 <_printf_float+0x250>
 800b71e:	ee18 3a10 	vmov	r3, s16
 800b722:	4652      	mov	r2, sl
 800b724:	4631      	mov	r1, r6
 800b726:	4628      	mov	r0, r5
 800b728:	47b8      	blx	r7
 800b72a:	3001      	adds	r0, #1
 800b72c:	f43f af09 	beq.w	800b542 <_printf_float+0xc2>
 800b730:	f04f 0900 	mov.w	r9, #0
 800b734:	f104 0a1a 	add.w	sl, r4, #26
 800b738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b73a:	425b      	negs	r3, r3
 800b73c:	454b      	cmp	r3, r9
 800b73e:	dc01      	bgt.n	800b744 <_printf_float+0x2c4>
 800b740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b742:	e792      	b.n	800b66a <_printf_float+0x1ea>
 800b744:	2301      	movs	r3, #1
 800b746:	4652      	mov	r2, sl
 800b748:	4631      	mov	r1, r6
 800b74a:	4628      	mov	r0, r5
 800b74c:	47b8      	blx	r7
 800b74e:	3001      	adds	r0, #1
 800b750:	f43f aef7 	beq.w	800b542 <_printf_float+0xc2>
 800b754:	f109 0901 	add.w	r9, r9, #1
 800b758:	e7ee      	b.n	800b738 <_printf_float+0x2b8>
 800b75a:	bf00      	nop
 800b75c:	7fefffff 	.word	0x7fefffff
 800b760:	0801c5ec 	.word	0x0801c5ec
 800b764:	0801c5f0 	.word	0x0801c5f0
 800b768:	0801c5f8 	.word	0x0801c5f8
 800b76c:	0801c5f4 	.word	0x0801c5f4
 800b770:	0801c5fc 	.word	0x0801c5fc
 800b774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b776:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b778:	429a      	cmp	r2, r3
 800b77a:	bfa8      	it	ge
 800b77c:	461a      	movge	r2, r3
 800b77e:	2a00      	cmp	r2, #0
 800b780:	4691      	mov	r9, r2
 800b782:	dc37      	bgt.n	800b7f4 <_printf_float+0x374>
 800b784:	f04f 0b00 	mov.w	fp, #0
 800b788:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b78c:	f104 021a 	add.w	r2, r4, #26
 800b790:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b792:	9305      	str	r3, [sp, #20]
 800b794:	eba3 0309 	sub.w	r3, r3, r9
 800b798:	455b      	cmp	r3, fp
 800b79a:	dc33      	bgt.n	800b804 <_printf_float+0x384>
 800b79c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	db3b      	blt.n	800b81c <_printf_float+0x39c>
 800b7a4:	6823      	ldr	r3, [r4, #0]
 800b7a6:	07da      	lsls	r2, r3, #31
 800b7a8:	d438      	bmi.n	800b81c <_printf_float+0x39c>
 800b7aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7ac:	9b05      	ldr	r3, [sp, #20]
 800b7ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	eba2 0901 	sub.w	r9, r2, r1
 800b7b6:	4599      	cmp	r9, r3
 800b7b8:	bfa8      	it	ge
 800b7ba:	4699      	movge	r9, r3
 800b7bc:	f1b9 0f00 	cmp.w	r9, #0
 800b7c0:	dc35      	bgt.n	800b82e <_printf_float+0x3ae>
 800b7c2:	f04f 0800 	mov.w	r8, #0
 800b7c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7ca:	f104 0a1a 	add.w	sl, r4, #26
 800b7ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7d2:	1a9b      	subs	r3, r3, r2
 800b7d4:	eba3 0309 	sub.w	r3, r3, r9
 800b7d8:	4543      	cmp	r3, r8
 800b7da:	f77f af79 	ble.w	800b6d0 <_printf_float+0x250>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	4652      	mov	r2, sl
 800b7e2:	4631      	mov	r1, r6
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	47b8      	blx	r7
 800b7e8:	3001      	adds	r0, #1
 800b7ea:	f43f aeaa 	beq.w	800b542 <_printf_float+0xc2>
 800b7ee:	f108 0801 	add.w	r8, r8, #1
 800b7f2:	e7ec      	b.n	800b7ce <_printf_float+0x34e>
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	4631      	mov	r1, r6
 800b7f8:	4642      	mov	r2, r8
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	47b8      	blx	r7
 800b7fe:	3001      	adds	r0, #1
 800b800:	d1c0      	bne.n	800b784 <_printf_float+0x304>
 800b802:	e69e      	b.n	800b542 <_printf_float+0xc2>
 800b804:	2301      	movs	r3, #1
 800b806:	4631      	mov	r1, r6
 800b808:	4628      	mov	r0, r5
 800b80a:	9205      	str	r2, [sp, #20]
 800b80c:	47b8      	blx	r7
 800b80e:	3001      	adds	r0, #1
 800b810:	f43f ae97 	beq.w	800b542 <_printf_float+0xc2>
 800b814:	9a05      	ldr	r2, [sp, #20]
 800b816:	f10b 0b01 	add.w	fp, fp, #1
 800b81a:	e7b9      	b.n	800b790 <_printf_float+0x310>
 800b81c:	ee18 3a10 	vmov	r3, s16
 800b820:	4652      	mov	r2, sl
 800b822:	4631      	mov	r1, r6
 800b824:	4628      	mov	r0, r5
 800b826:	47b8      	blx	r7
 800b828:	3001      	adds	r0, #1
 800b82a:	d1be      	bne.n	800b7aa <_printf_float+0x32a>
 800b82c:	e689      	b.n	800b542 <_printf_float+0xc2>
 800b82e:	9a05      	ldr	r2, [sp, #20]
 800b830:	464b      	mov	r3, r9
 800b832:	4442      	add	r2, r8
 800b834:	4631      	mov	r1, r6
 800b836:	4628      	mov	r0, r5
 800b838:	47b8      	blx	r7
 800b83a:	3001      	adds	r0, #1
 800b83c:	d1c1      	bne.n	800b7c2 <_printf_float+0x342>
 800b83e:	e680      	b.n	800b542 <_printf_float+0xc2>
 800b840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b842:	2a01      	cmp	r2, #1
 800b844:	dc01      	bgt.n	800b84a <_printf_float+0x3ca>
 800b846:	07db      	lsls	r3, r3, #31
 800b848:	d538      	bpl.n	800b8bc <_printf_float+0x43c>
 800b84a:	2301      	movs	r3, #1
 800b84c:	4642      	mov	r2, r8
 800b84e:	4631      	mov	r1, r6
 800b850:	4628      	mov	r0, r5
 800b852:	47b8      	blx	r7
 800b854:	3001      	adds	r0, #1
 800b856:	f43f ae74 	beq.w	800b542 <_printf_float+0xc2>
 800b85a:	ee18 3a10 	vmov	r3, s16
 800b85e:	4652      	mov	r2, sl
 800b860:	4631      	mov	r1, r6
 800b862:	4628      	mov	r0, r5
 800b864:	47b8      	blx	r7
 800b866:	3001      	adds	r0, #1
 800b868:	f43f ae6b 	beq.w	800b542 <_printf_float+0xc2>
 800b86c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b870:	2200      	movs	r2, #0
 800b872:	2300      	movs	r3, #0
 800b874:	f7f5 f928 	bl	8000ac8 <__aeabi_dcmpeq>
 800b878:	b9d8      	cbnz	r0, 800b8b2 <_printf_float+0x432>
 800b87a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b87c:	f108 0201 	add.w	r2, r8, #1
 800b880:	3b01      	subs	r3, #1
 800b882:	4631      	mov	r1, r6
 800b884:	4628      	mov	r0, r5
 800b886:	47b8      	blx	r7
 800b888:	3001      	adds	r0, #1
 800b88a:	d10e      	bne.n	800b8aa <_printf_float+0x42a>
 800b88c:	e659      	b.n	800b542 <_printf_float+0xc2>
 800b88e:	2301      	movs	r3, #1
 800b890:	4652      	mov	r2, sl
 800b892:	4631      	mov	r1, r6
 800b894:	4628      	mov	r0, r5
 800b896:	47b8      	blx	r7
 800b898:	3001      	adds	r0, #1
 800b89a:	f43f ae52 	beq.w	800b542 <_printf_float+0xc2>
 800b89e:	f108 0801 	add.w	r8, r8, #1
 800b8a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8a4:	3b01      	subs	r3, #1
 800b8a6:	4543      	cmp	r3, r8
 800b8a8:	dcf1      	bgt.n	800b88e <_printf_float+0x40e>
 800b8aa:	464b      	mov	r3, r9
 800b8ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b8b0:	e6dc      	b.n	800b66c <_printf_float+0x1ec>
 800b8b2:	f04f 0800 	mov.w	r8, #0
 800b8b6:	f104 0a1a 	add.w	sl, r4, #26
 800b8ba:	e7f2      	b.n	800b8a2 <_printf_float+0x422>
 800b8bc:	2301      	movs	r3, #1
 800b8be:	4642      	mov	r2, r8
 800b8c0:	e7df      	b.n	800b882 <_printf_float+0x402>
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	464a      	mov	r2, r9
 800b8c6:	4631      	mov	r1, r6
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	47b8      	blx	r7
 800b8cc:	3001      	adds	r0, #1
 800b8ce:	f43f ae38 	beq.w	800b542 <_printf_float+0xc2>
 800b8d2:	f108 0801 	add.w	r8, r8, #1
 800b8d6:	68e3      	ldr	r3, [r4, #12]
 800b8d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8da:	1a5b      	subs	r3, r3, r1
 800b8dc:	4543      	cmp	r3, r8
 800b8de:	dcf0      	bgt.n	800b8c2 <_printf_float+0x442>
 800b8e0:	e6fa      	b.n	800b6d8 <_printf_float+0x258>
 800b8e2:	f04f 0800 	mov.w	r8, #0
 800b8e6:	f104 0919 	add.w	r9, r4, #25
 800b8ea:	e7f4      	b.n	800b8d6 <_printf_float+0x456>

0800b8ec <_printf_common>:
 800b8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f0:	4616      	mov	r6, r2
 800b8f2:	4699      	mov	r9, r3
 800b8f4:	688a      	ldr	r2, [r1, #8]
 800b8f6:	690b      	ldr	r3, [r1, #16]
 800b8f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	bfb8      	it	lt
 800b900:	4613      	movlt	r3, r2
 800b902:	6033      	str	r3, [r6, #0]
 800b904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b908:	4607      	mov	r7, r0
 800b90a:	460c      	mov	r4, r1
 800b90c:	b10a      	cbz	r2, 800b912 <_printf_common+0x26>
 800b90e:	3301      	adds	r3, #1
 800b910:	6033      	str	r3, [r6, #0]
 800b912:	6823      	ldr	r3, [r4, #0]
 800b914:	0699      	lsls	r1, r3, #26
 800b916:	bf42      	ittt	mi
 800b918:	6833      	ldrmi	r3, [r6, #0]
 800b91a:	3302      	addmi	r3, #2
 800b91c:	6033      	strmi	r3, [r6, #0]
 800b91e:	6825      	ldr	r5, [r4, #0]
 800b920:	f015 0506 	ands.w	r5, r5, #6
 800b924:	d106      	bne.n	800b934 <_printf_common+0x48>
 800b926:	f104 0a19 	add.w	sl, r4, #25
 800b92a:	68e3      	ldr	r3, [r4, #12]
 800b92c:	6832      	ldr	r2, [r6, #0]
 800b92e:	1a9b      	subs	r3, r3, r2
 800b930:	42ab      	cmp	r3, r5
 800b932:	dc26      	bgt.n	800b982 <_printf_common+0x96>
 800b934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b938:	1e13      	subs	r3, r2, #0
 800b93a:	6822      	ldr	r2, [r4, #0]
 800b93c:	bf18      	it	ne
 800b93e:	2301      	movne	r3, #1
 800b940:	0692      	lsls	r2, r2, #26
 800b942:	d42b      	bmi.n	800b99c <_printf_common+0xb0>
 800b944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b948:	4649      	mov	r1, r9
 800b94a:	4638      	mov	r0, r7
 800b94c:	47c0      	blx	r8
 800b94e:	3001      	adds	r0, #1
 800b950:	d01e      	beq.n	800b990 <_printf_common+0xa4>
 800b952:	6823      	ldr	r3, [r4, #0]
 800b954:	68e5      	ldr	r5, [r4, #12]
 800b956:	6832      	ldr	r2, [r6, #0]
 800b958:	f003 0306 	and.w	r3, r3, #6
 800b95c:	2b04      	cmp	r3, #4
 800b95e:	bf08      	it	eq
 800b960:	1aad      	subeq	r5, r5, r2
 800b962:	68a3      	ldr	r3, [r4, #8]
 800b964:	6922      	ldr	r2, [r4, #16]
 800b966:	bf0c      	ite	eq
 800b968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b96c:	2500      	movne	r5, #0
 800b96e:	4293      	cmp	r3, r2
 800b970:	bfc4      	itt	gt
 800b972:	1a9b      	subgt	r3, r3, r2
 800b974:	18ed      	addgt	r5, r5, r3
 800b976:	2600      	movs	r6, #0
 800b978:	341a      	adds	r4, #26
 800b97a:	42b5      	cmp	r5, r6
 800b97c:	d11a      	bne.n	800b9b4 <_printf_common+0xc8>
 800b97e:	2000      	movs	r0, #0
 800b980:	e008      	b.n	800b994 <_printf_common+0xa8>
 800b982:	2301      	movs	r3, #1
 800b984:	4652      	mov	r2, sl
 800b986:	4649      	mov	r1, r9
 800b988:	4638      	mov	r0, r7
 800b98a:	47c0      	blx	r8
 800b98c:	3001      	adds	r0, #1
 800b98e:	d103      	bne.n	800b998 <_printf_common+0xac>
 800b990:	f04f 30ff 	mov.w	r0, #4294967295
 800b994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b998:	3501      	adds	r5, #1
 800b99a:	e7c6      	b.n	800b92a <_printf_common+0x3e>
 800b99c:	18e1      	adds	r1, r4, r3
 800b99e:	1c5a      	adds	r2, r3, #1
 800b9a0:	2030      	movs	r0, #48	; 0x30
 800b9a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b9a6:	4422      	add	r2, r4
 800b9a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b9ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b9b0:	3302      	adds	r3, #2
 800b9b2:	e7c7      	b.n	800b944 <_printf_common+0x58>
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	4622      	mov	r2, r4
 800b9b8:	4649      	mov	r1, r9
 800b9ba:	4638      	mov	r0, r7
 800b9bc:	47c0      	blx	r8
 800b9be:	3001      	adds	r0, #1
 800b9c0:	d0e6      	beq.n	800b990 <_printf_common+0xa4>
 800b9c2:	3601      	adds	r6, #1
 800b9c4:	e7d9      	b.n	800b97a <_printf_common+0x8e>
	...

0800b9c8 <_printf_i>:
 800b9c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	4691      	mov	r9, r2
 800b9d0:	7e27      	ldrb	r7, [r4, #24]
 800b9d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b9d4:	2f78      	cmp	r7, #120	; 0x78
 800b9d6:	4680      	mov	r8, r0
 800b9d8:	469a      	mov	sl, r3
 800b9da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b9de:	d807      	bhi.n	800b9f0 <_printf_i+0x28>
 800b9e0:	2f62      	cmp	r7, #98	; 0x62
 800b9e2:	d80a      	bhi.n	800b9fa <_printf_i+0x32>
 800b9e4:	2f00      	cmp	r7, #0
 800b9e6:	f000 80d8 	beq.w	800bb9a <_printf_i+0x1d2>
 800b9ea:	2f58      	cmp	r7, #88	; 0x58
 800b9ec:	f000 80a3 	beq.w	800bb36 <_printf_i+0x16e>
 800b9f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b9f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b9f8:	e03a      	b.n	800ba70 <_printf_i+0xa8>
 800b9fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b9fe:	2b15      	cmp	r3, #21
 800ba00:	d8f6      	bhi.n	800b9f0 <_printf_i+0x28>
 800ba02:	a001      	add	r0, pc, #4	; (adr r0, 800ba08 <_printf_i+0x40>)
 800ba04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ba08:	0800ba61 	.word	0x0800ba61
 800ba0c:	0800ba75 	.word	0x0800ba75
 800ba10:	0800b9f1 	.word	0x0800b9f1
 800ba14:	0800b9f1 	.word	0x0800b9f1
 800ba18:	0800b9f1 	.word	0x0800b9f1
 800ba1c:	0800b9f1 	.word	0x0800b9f1
 800ba20:	0800ba75 	.word	0x0800ba75
 800ba24:	0800b9f1 	.word	0x0800b9f1
 800ba28:	0800b9f1 	.word	0x0800b9f1
 800ba2c:	0800b9f1 	.word	0x0800b9f1
 800ba30:	0800b9f1 	.word	0x0800b9f1
 800ba34:	0800bb81 	.word	0x0800bb81
 800ba38:	0800baa5 	.word	0x0800baa5
 800ba3c:	0800bb63 	.word	0x0800bb63
 800ba40:	0800b9f1 	.word	0x0800b9f1
 800ba44:	0800b9f1 	.word	0x0800b9f1
 800ba48:	0800bba3 	.word	0x0800bba3
 800ba4c:	0800b9f1 	.word	0x0800b9f1
 800ba50:	0800baa5 	.word	0x0800baa5
 800ba54:	0800b9f1 	.word	0x0800b9f1
 800ba58:	0800b9f1 	.word	0x0800b9f1
 800ba5c:	0800bb6b 	.word	0x0800bb6b
 800ba60:	680b      	ldr	r3, [r1, #0]
 800ba62:	1d1a      	adds	r2, r3, #4
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	600a      	str	r2, [r1, #0]
 800ba68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ba6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba70:	2301      	movs	r3, #1
 800ba72:	e0a3      	b.n	800bbbc <_printf_i+0x1f4>
 800ba74:	6825      	ldr	r5, [r4, #0]
 800ba76:	6808      	ldr	r0, [r1, #0]
 800ba78:	062e      	lsls	r6, r5, #24
 800ba7a:	f100 0304 	add.w	r3, r0, #4
 800ba7e:	d50a      	bpl.n	800ba96 <_printf_i+0xce>
 800ba80:	6805      	ldr	r5, [r0, #0]
 800ba82:	600b      	str	r3, [r1, #0]
 800ba84:	2d00      	cmp	r5, #0
 800ba86:	da03      	bge.n	800ba90 <_printf_i+0xc8>
 800ba88:	232d      	movs	r3, #45	; 0x2d
 800ba8a:	426d      	negs	r5, r5
 800ba8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba90:	485e      	ldr	r0, [pc, #376]	; (800bc0c <_printf_i+0x244>)
 800ba92:	230a      	movs	r3, #10
 800ba94:	e019      	b.n	800baca <_printf_i+0x102>
 800ba96:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ba9a:	6805      	ldr	r5, [r0, #0]
 800ba9c:	600b      	str	r3, [r1, #0]
 800ba9e:	bf18      	it	ne
 800baa0:	b22d      	sxthne	r5, r5
 800baa2:	e7ef      	b.n	800ba84 <_printf_i+0xbc>
 800baa4:	680b      	ldr	r3, [r1, #0]
 800baa6:	6825      	ldr	r5, [r4, #0]
 800baa8:	1d18      	adds	r0, r3, #4
 800baaa:	6008      	str	r0, [r1, #0]
 800baac:	0628      	lsls	r0, r5, #24
 800baae:	d501      	bpl.n	800bab4 <_printf_i+0xec>
 800bab0:	681d      	ldr	r5, [r3, #0]
 800bab2:	e002      	b.n	800baba <_printf_i+0xf2>
 800bab4:	0669      	lsls	r1, r5, #25
 800bab6:	d5fb      	bpl.n	800bab0 <_printf_i+0xe8>
 800bab8:	881d      	ldrh	r5, [r3, #0]
 800baba:	4854      	ldr	r0, [pc, #336]	; (800bc0c <_printf_i+0x244>)
 800babc:	2f6f      	cmp	r7, #111	; 0x6f
 800babe:	bf0c      	ite	eq
 800bac0:	2308      	moveq	r3, #8
 800bac2:	230a      	movne	r3, #10
 800bac4:	2100      	movs	r1, #0
 800bac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800baca:	6866      	ldr	r6, [r4, #4]
 800bacc:	60a6      	str	r6, [r4, #8]
 800bace:	2e00      	cmp	r6, #0
 800bad0:	bfa2      	ittt	ge
 800bad2:	6821      	ldrge	r1, [r4, #0]
 800bad4:	f021 0104 	bicge.w	r1, r1, #4
 800bad8:	6021      	strge	r1, [r4, #0]
 800bada:	b90d      	cbnz	r5, 800bae0 <_printf_i+0x118>
 800badc:	2e00      	cmp	r6, #0
 800bade:	d04d      	beq.n	800bb7c <_printf_i+0x1b4>
 800bae0:	4616      	mov	r6, r2
 800bae2:	fbb5 f1f3 	udiv	r1, r5, r3
 800bae6:	fb03 5711 	mls	r7, r3, r1, r5
 800baea:	5dc7      	ldrb	r7, [r0, r7]
 800baec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800baf0:	462f      	mov	r7, r5
 800baf2:	42bb      	cmp	r3, r7
 800baf4:	460d      	mov	r5, r1
 800baf6:	d9f4      	bls.n	800bae2 <_printf_i+0x11a>
 800baf8:	2b08      	cmp	r3, #8
 800bafa:	d10b      	bne.n	800bb14 <_printf_i+0x14c>
 800bafc:	6823      	ldr	r3, [r4, #0]
 800bafe:	07df      	lsls	r7, r3, #31
 800bb00:	d508      	bpl.n	800bb14 <_printf_i+0x14c>
 800bb02:	6923      	ldr	r3, [r4, #16]
 800bb04:	6861      	ldr	r1, [r4, #4]
 800bb06:	4299      	cmp	r1, r3
 800bb08:	bfde      	ittt	le
 800bb0a:	2330      	movle	r3, #48	; 0x30
 800bb0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb10:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb14:	1b92      	subs	r2, r2, r6
 800bb16:	6122      	str	r2, [r4, #16]
 800bb18:	f8cd a000 	str.w	sl, [sp]
 800bb1c:	464b      	mov	r3, r9
 800bb1e:	aa03      	add	r2, sp, #12
 800bb20:	4621      	mov	r1, r4
 800bb22:	4640      	mov	r0, r8
 800bb24:	f7ff fee2 	bl	800b8ec <_printf_common>
 800bb28:	3001      	adds	r0, #1
 800bb2a:	d14c      	bne.n	800bbc6 <_printf_i+0x1fe>
 800bb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb30:	b004      	add	sp, #16
 800bb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb36:	4835      	ldr	r0, [pc, #212]	; (800bc0c <_printf_i+0x244>)
 800bb38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bb3c:	6823      	ldr	r3, [r4, #0]
 800bb3e:	680e      	ldr	r6, [r1, #0]
 800bb40:	061f      	lsls	r7, r3, #24
 800bb42:	f856 5b04 	ldr.w	r5, [r6], #4
 800bb46:	600e      	str	r6, [r1, #0]
 800bb48:	d514      	bpl.n	800bb74 <_printf_i+0x1ac>
 800bb4a:	07d9      	lsls	r1, r3, #31
 800bb4c:	bf44      	itt	mi
 800bb4e:	f043 0320 	orrmi.w	r3, r3, #32
 800bb52:	6023      	strmi	r3, [r4, #0]
 800bb54:	b91d      	cbnz	r5, 800bb5e <_printf_i+0x196>
 800bb56:	6823      	ldr	r3, [r4, #0]
 800bb58:	f023 0320 	bic.w	r3, r3, #32
 800bb5c:	6023      	str	r3, [r4, #0]
 800bb5e:	2310      	movs	r3, #16
 800bb60:	e7b0      	b.n	800bac4 <_printf_i+0xfc>
 800bb62:	6823      	ldr	r3, [r4, #0]
 800bb64:	f043 0320 	orr.w	r3, r3, #32
 800bb68:	6023      	str	r3, [r4, #0]
 800bb6a:	2378      	movs	r3, #120	; 0x78
 800bb6c:	4828      	ldr	r0, [pc, #160]	; (800bc10 <_printf_i+0x248>)
 800bb6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb72:	e7e3      	b.n	800bb3c <_printf_i+0x174>
 800bb74:	065e      	lsls	r6, r3, #25
 800bb76:	bf48      	it	mi
 800bb78:	b2ad      	uxthmi	r5, r5
 800bb7a:	e7e6      	b.n	800bb4a <_printf_i+0x182>
 800bb7c:	4616      	mov	r6, r2
 800bb7e:	e7bb      	b.n	800baf8 <_printf_i+0x130>
 800bb80:	680b      	ldr	r3, [r1, #0]
 800bb82:	6826      	ldr	r6, [r4, #0]
 800bb84:	6960      	ldr	r0, [r4, #20]
 800bb86:	1d1d      	adds	r5, r3, #4
 800bb88:	600d      	str	r5, [r1, #0]
 800bb8a:	0635      	lsls	r5, r6, #24
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	d501      	bpl.n	800bb94 <_printf_i+0x1cc>
 800bb90:	6018      	str	r0, [r3, #0]
 800bb92:	e002      	b.n	800bb9a <_printf_i+0x1d2>
 800bb94:	0671      	lsls	r1, r6, #25
 800bb96:	d5fb      	bpl.n	800bb90 <_printf_i+0x1c8>
 800bb98:	8018      	strh	r0, [r3, #0]
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	6123      	str	r3, [r4, #16]
 800bb9e:	4616      	mov	r6, r2
 800bba0:	e7ba      	b.n	800bb18 <_printf_i+0x150>
 800bba2:	680b      	ldr	r3, [r1, #0]
 800bba4:	1d1a      	adds	r2, r3, #4
 800bba6:	600a      	str	r2, [r1, #0]
 800bba8:	681e      	ldr	r6, [r3, #0]
 800bbaa:	6862      	ldr	r2, [r4, #4]
 800bbac:	2100      	movs	r1, #0
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f7f4 fb16 	bl	80001e0 <memchr>
 800bbb4:	b108      	cbz	r0, 800bbba <_printf_i+0x1f2>
 800bbb6:	1b80      	subs	r0, r0, r6
 800bbb8:	6060      	str	r0, [r4, #4]
 800bbba:	6863      	ldr	r3, [r4, #4]
 800bbbc:	6123      	str	r3, [r4, #16]
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbc4:	e7a8      	b.n	800bb18 <_printf_i+0x150>
 800bbc6:	6923      	ldr	r3, [r4, #16]
 800bbc8:	4632      	mov	r2, r6
 800bbca:	4649      	mov	r1, r9
 800bbcc:	4640      	mov	r0, r8
 800bbce:	47d0      	blx	sl
 800bbd0:	3001      	adds	r0, #1
 800bbd2:	d0ab      	beq.n	800bb2c <_printf_i+0x164>
 800bbd4:	6823      	ldr	r3, [r4, #0]
 800bbd6:	079b      	lsls	r3, r3, #30
 800bbd8:	d413      	bmi.n	800bc02 <_printf_i+0x23a>
 800bbda:	68e0      	ldr	r0, [r4, #12]
 800bbdc:	9b03      	ldr	r3, [sp, #12]
 800bbde:	4298      	cmp	r0, r3
 800bbe0:	bfb8      	it	lt
 800bbe2:	4618      	movlt	r0, r3
 800bbe4:	e7a4      	b.n	800bb30 <_printf_i+0x168>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	4632      	mov	r2, r6
 800bbea:	4649      	mov	r1, r9
 800bbec:	4640      	mov	r0, r8
 800bbee:	47d0      	blx	sl
 800bbf0:	3001      	adds	r0, #1
 800bbf2:	d09b      	beq.n	800bb2c <_printf_i+0x164>
 800bbf4:	3501      	adds	r5, #1
 800bbf6:	68e3      	ldr	r3, [r4, #12]
 800bbf8:	9903      	ldr	r1, [sp, #12]
 800bbfa:	1a5b      	subs	r3, r3, r1
 800bbfc:	42ab      	cmp	r3, r5
 800bbfe:	dcf2      	bgt.n	800bbe6 <_printf_i+0x21e>
 800bc00:	e7eb      	b.n	800bbda <_printf_i+0x212>
 800bc02:	2500      	movs	r5, #0
 800bc04:	f104 0619 	add.w	r6, r4, #25
 800bc08:	e7f5      	b.n	800bbf6 <_printf_i+0x22e>
 800bc0a:	bf00      	nop
 800bc0c:	0801c5fe 	.word	0x0801c5fe
 800bc10:	0801c60f 	.word	0x0801c60f

0800bc14 <iprintf>:
 800bc14:	b40f      	push	{r0, r1, r2, r3}
 800bc16:	4b0a      	ldr	r3, [pc, #40]	; (800bc40 <iprintf+0x2c>)
 800bc18:	b513      	push	{r0, r1, r4, lr}
 800bc1a:	681c      	ldr	r4, [r3, #0]
 800bc1c:	b124      	cbz	r4, 800bc28 <iprintf+0x14>
 800bc1e:	69a3      	ldr	r3, [r4, #24]
 800bc20:	b913      	cbnz	r3, 800bc28 <iprintf+0x14>
 800bc22:	4620      	mov	r0, r4
 800bc24:	f001 f8f6 	bl	800ce14 <__sinit>
 800bc28:	ab05      	add	r3, sp, #20
 800bc2a:	9a04      	ldr	r2, [sp, #16]
 800bc2c:	68a1      	ldr	r1, [r4, #8]
 800bc2e:	9301      	str	r3, [sp, #4]
 800bc30:	4620      	mov	r0, r4
 800bc32:	f001 ffcd 	bl	800dbd0 <_vfiprintf_r>
 800bc36:	b002      	add	sp, #8
 800bc38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc3c:	b004      	add	sp, #16
 800bc3e:	4770      	bx	lr
 800bc40:	20000014 	.word	0x20000014

0800bc44 <_puts_r>:
 800bc44:	b570      	push	{r4, r5, r6, lr}
 800bc46:	460e      	mov	r6, r1
 800bc48:	4605      	mov	r5, r0
 800bc4a:	b118      	cbz	r0, 800bc54 <_puts_r+0x10>
 800bc4c:	6983      	ldr	r3, [r0, #24]
 800bc4e:	b90b      	cbnz	r3, 800bc54 <_puts_r+0x10>
 800bc50:	f001 f8e0 	bl	800ce14 <__sinit>
 800bc54:	69ab      	ldr	r3, [r5, #24]
 800bc56:	68ac      	ldr	r4, [r5, #8]
 800bc58:	b913      	cbnz	r3, 800bc60 <_puts_r+0x1c>
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	f001 f8da 	bl	800ce14 <__sinit>
 800bc60:	4b2c      	ldr	r3, [pc, #176]	; (800bd14 <_puts_r+0xd0>)
 800bc62:	429c      	cmp	r4, r3
 800bc64:	d120      	bne.n	800bca8 <_puts_r+0x64>
 800bc66:	686c      	ldr	r4, [r5, #4]
 800bc68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc6a:	07db      	lsls	r3, r3, #31
 800bc6c:	d405      	bmi.n	800bc7a <_puts_r+0x36>
 800bc6e:	89a3      	ldrh	r3, [r4, #12]
 800bc70:	0598      	lsls	r0, r3, #22
 800bc72:	d402      	bmi.n	800bc7a <_puts_r+0x36>
 800bc74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc76:	f001 f970 	bl	800cf5a <__retarget_lock_acquire_recursive>
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	0719      	lsls	r1, r3, #28
 800bc7e:	d51d      	bpl.n	800bcbc <_puts_r+0x78>
 800bc80:	6923      	ldr	r3, [r4, #16]
 800bc82:	b1db      	cbz	r3, 800bcbc <_puts_r+0x78>
 800bc84:	3e01      	subs	r6, #1
 800bc86:	68a3      	ldr	r3, [r4, #8]
 800bc88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	60a3      	str	r3, [r4, #8]
 800bc90:	bb39      	cbnz	r1, 800bce2 <_puts_r+0x9e>
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	da38      	bge.n	800bd08 <_puts_r+0xc4>
 800bc96:	4622      	mov	r2, r4
 800bc98:	210a      	movs	r1, #10
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	f000 f868 	bl	800bd70 <__swbuf_r>
 800bca0:	3001      	adds	r0, #1
 800bca2:	d011      	beq.n	800bcc8 <_puts_r+0x84>
 800bca4:	250a      	movs	r5, #10
 800bca6:	e011      	b.n	800bccc <_puts_r+0x88>
 800bca8:	4b1b      	ldr	r3, [pc, #108]	; (800bd18 <_puts_r+0xd4>)
 800bcaa:	429c      	cmp	r4, r3
 800bcac:	d101      	bne.n	800bcb2 <_puts_r+0x6e>
 800bcae:	68ac      	ldr	r4, [r5, #8]
 800bcb0:	e7da      	b.n	800bc68 <_puts_r+0x24>
 800bcb2:	4b1a      	ldr	r3, [pc, #104]	; (800bd1c <_puts_r+0xd8>)
 800bcb4:	429c      	cmp	r4, r3
 800bcb6:	bf08      	it	eq
 800bcb8:	68ec      	ldreq	r4, [r5, #12]
 800bcba:	e7d5      	b.n	800bc68 <_puts_r+0x24>
 800bcbc:	4621      	mov	r1, r4
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	f000 f8a8 	bl	800be14 <__swsetup_r>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d0dd      	beq.n	800bc84 <_puts_r+0x40>
 800bcc8:	f04f 35ff 	mov.w	r5, #4294967295
 800bccc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcce:	07da      	lsls	r2, r3, #31
 800bcd0:	d405      	bmi.n	800bcde <_puts_r+0x9a>
 800bcd2:	89a3      	ldrh	r3, [r4, #12]
 800bcd4:	059b      	lsls	r3, r3, #22
 800bcd6:	d402      	bmi.n	800bcde <_puts_r+0x9a>
 800bcd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcda:	f001 f93f 	bl	800cf5c <__retarget_lock_release_recursive>
 800bcde:	4628      	mov	r0, r5
 800bce0:	bd70      	pop	{r4, r5, r6, pc}
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	da04      	bge.n	800bcf0 <_puts_r+0xac>
 800bce6:	69a2      	ldr	r2, [r4, #24]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	dc06      	bgt.n	800bcfa <_puts_r+0xb6>
 800bcec:	290a      	cmp	r1, #10
 800bcee:	d004      	beq.n	800bcfa <_puts_r+0xb6>
 800bcf0:	6823      	ldr	r3, [r4, #0]
 800bcf2:	1c5a      	adds	r2, r3, #1
 800bcf4:	6022      	str	r2, [r4, #0]
 800bcf6:	7019      	strb	r1, [r3, #0]
 800bcf8:	e7c5      	b.n	800bc86 <_puts_r+0x42>
 800bcfa:	4622      	mov	r2, r4
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	f000 f837 	bl	800bd70 <__swbuf_r>
 800bd02:	3001      	adds	r0, #1
 800bd04:	d1bf      	bne.n	800bc86 <_puts_r+0x42>
 800bd06:	e7df      	b.n	800bcc8 <_puts_r+0x84>
 800bd08:	6823      	ldr	r3, [r4, #0]
 800bd0a:	250a      	movs	r5, #10
 800bd0c:	1c5a      	adds	r2, r3, #1
 800bd0e:	6022      	str	r2, [r4, #0]
 800bd10:	701d      	strb	r5, [r3, #0]
 800bd12:	e7db      	b.n	800bccc <_puts_r+0x88>
 800bd14:	0801c6d4 	.word	0x0801c6d4
 800bd18:	0801c6f4 	.word	0x0801c6f4
 800bd1c:	0801c6b4 	.word	0x0801c6b4

0800bd20 <puts>:
 800bd20:	4b02      	ldr	r3, [pc, #8]	; (800bd2c <puts+0xc>)
 800bd22:	4601      	mov	r1, r0
 800bd24:	6818      	ldr	r0, [r3, #0]
 800bd26:	f7ff bf8d 	b.w	800bc44 <_puts_r>
 800bd2a:	bf00      	nop
 800bd2c:	20000014 	.word	0x20000014

0800bd30 <siprintf>:
 800bd30:	b40e      	push	{r1, r2, r3}
 800bd32:	b500      	push	{lr}
 800bd34:	b09c      	sub	sp, #112	; 0x70
 800bd36:	ab1d      	add	r3, sp, #116	; 0x74
 800bd38:	9002      	str	r0, [sp, #8]
 800bd3a:	9006      	str	r0, [sp, #24]
 800bd3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd40:	4809      	ldr	r0, [pc, #36]	; (800bd68 <siprintf+0x38>)
 800bd42:	9107      	str	r1, [sp, #28]
 800bd44:	9104      	str	r1, [sp, #16]
 800bd46:	4909      	ldr	r1, [pc, #36]	; (800bd6c <siprintf+0x3c>)
 800bd48:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd4c:	9105      	str	r1, [sp, #20]
 800bd4e:	6800      	ldr	r0, [r0, #0]
 800bd50:	9301      	str	r3, [sp, #4]
 800bd52:	a902      	add	r1, sp, #8
 800bd54:	f001 fe12 	bl	800d97c <_svfiprintf_r>
 800bd58:	9b02      	ldr	r3, [sp, #8]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	701a      	strb	r2, [r3, #0]
 800bd5e:	b01c      	add	sp, #112	; 0x70
 800bd60:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd64:	b003      	add	sp, #12
 800bd66:	4770      	bx	lr
 800bd68:	20000014 	.word	0x20000014
 800bd6c:	ffff0208 	.word	0xffff0208

0800bd70 <__swbuf_r>:
 800bd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd72:	460e      	mov	r6, r1
 800bd74:	4614      	mov	r4, r2
 800bd76:	4605      	mov	r5, r0
 800bd78:	b118      	cbz	r0, 800bd82 <__swbuf_r+0x12>
 800bd7a:	6983      	ldr	r3, [r0, #24]
 800bd7c:	b90b      	cbnz	r3, 800bd82 <__swbuf_r+0x12>
 800bd7e:	f001 f849 	bl	800ce14 <__sinit>
 800bd82:	4b21      	ldr	r3, [pc, #132]	; (800be08 <__swbuf_r+0x98>)
 800bd84:	429c      	cmp	r4, r3
 800bd86:	d12b      	bne.n	800bde0 <__swbuf_r+0x70>
 800bd88:	686c      	ldr	r4, [r5, #4]
 800bd8a:	69a3      	ldr	r3, [r4, #24]
 800bd8c:	60a3      	str	r3, [r4, #8]
 800bd8e:	89a3      	ldrh	r3, [r4, #12]
 800bd90:	071a      	lsls	r2, r3, #28
 800bd92:	d52f      	bpl.n	800bdf4 <__swbuf_r+0x84>
 800bd94:	6923      	ldr	r3, [r4, #16]
 800bd96:	b36b      	cbz	r3, 800bdf4 <__swbuf_r+0x84>
 800bd98:	6923      	ldr	r3, [r4, #16]
 800bd9a:	6820      	ldr	r0, [r4, #0]
 800bd9c:	1ac0      	subs	r0, r0, r3
 800bd9e:	6963      	ldr	r3, [r4, #20]
 800bda0:	b2f6      	uxtb	r6, r6
 800bda2:	4283      	cmp	r3, r0
 800bda4:	4637      	mov	r7, r6
 800bda6:	dc04      	bgt.n	800bdb2 <__swbuf_r+0x42>
 800bda8:	4621      	mov	r1, r4
 800bdaa:	4628      	mov	r0, r5
 800bdac:	f000 ff9e 	bl	800ccec <_fflush_r>
 800bdb0:	bb30      	cbnz	r0, 800be00 <__swbuf_r+0x90>
 800bdb2:	68a3      	ldr	r3, [r4, #8]
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	60a3      	str	r3, [r4, #8]
 800bdb8:	6823      	ldr	r3, [r4, #0]
 800bdba:	1c5a      	adds	r2, r3, #1
 800bdbc:	6022      	str	r2, [r4, #0]
 800bdbe:	701e      	strb	r6, [r3, #0]
 800bdc0:	6963      	ldr	r3, [r4, #20]
 800bdc2:	3001      	adds	r0, #1
 800bdc4:	4283      	cmp	r3, r0
 800bdc6:	d004      	beq.n	800bdd2 <__swbuf_r+0x62>
 800bdc8:	89a3      	ldrh	r3, [r4, #12]
 800bdca:	07db      	lsls	r3, r3, #31
 800bdcc:	d506      	bpl.n	800bddc <__swbuf_r+0x6c>
 800bdce:	2e0a      	cmp	r6, #10
 800bdd0:	d104      	bne.n	800bddc <__swbuf_r+0x6c>
 800bdd2:	4621      	mov	r1, r4
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	f000 ff89 	bl	800ccec <_fflush_r>
 800bdda:	b988      	cbnz	r0, 800be00 <__swbuf_r+0x90>
 800bddc:	4638      	mov	r0, r7
 800bdde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bde0:	4b0a      	ldr	r3, [pc, #40]	; (800be0c <__swbuf_r+0x9c>)
 800bde2:	429c      	cmp	r4, r3
 800bde4:	d101      	bne.n	800bdea <__swbuf_r+0x7a>
 800bde6:	68ac      	ldr	r4, [r5, #8]
 800bde8:	e7cf      	b.n	800bd8a <__swbuf_r+0x1a>
 800bdea:	4b09      	ldr	r3, [pc, #36]	; (800be10 <__swbuf_r+0xa0>)
 800bdec:	429c      	cmp	r4, r3
 800bdee:	bf08      	it	eq
 800bdf0:	68ec      	ldreq	r4, [r5, #12]
 800bdf2:	e7ca      	b.n	800bd8a <__swbuf_r+0x1a>
 800bdf4:	4621      	mov	r1, r4
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	f000 f80c 	bl	800be14 <__swsetup_r>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d0cb      	beq.n	800bd98 <__swbuf_r+0x28>
 800be00:	f04f 37ff 	mov.w	r7, #4294967295
 800be04:	e7ea      	b.n	800bddc <__swbuf_r+0x6c>
 800be06:	bf00      	nop
 800be08:	0801c6d4 	.word	0x0801c6d4
 800be0c:	0801c6f4 	.word	0x0801c6f4
 800be10:	0801c6b4 	.word	0x0801c6b4

0800be14 <__swsetup_r>:
 800be14:	4b32      	ldr	r3, [pc, #200]	; (800bee0 <__swsetup_r+0xcc>)
 800be16:	b570      	push	{r4, r5, r6, lr}
 800be18:	681d      	ldr	r5, [r3, #0]
 800be1a:	4606      	mov	r6, r0
 800be1c:	460c      	mov	r4, r1
 800be1e:	b125      	cbz	r5, 800be2a <__swsetup_r+0x16>
 800be20:	69ab      	ldr	r3, [r5, #24]
 800be22:	b913      	cbnz	r3, 800be2a <__swsetup_r+0x16>
 800be24:	4628      	mov	r0, r5
 800be26:	f000 fff5 	bl	800ce14 <__sinit>
 800be2a:	4b2e      	ldr	r3, [pc, #184]	; (800bee4 <__swsetup_r+0xd0>)
 800be2c:	429c      	cmp	r4, r3
 800be2e:	d10f      	bne.n	800be50 <__swsetup_r+0x3c>
 800be30:	686c      	ldr	r4, [r5, #4]
 800be32:	89a3      	ldrh	r3, [r4, #12]
 800be34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be38:	0719      	lsls	r1, r3, #28
 800be3a:	d42c      	bmi.n	800be96 <__swsetup_r+0x82>
 800be3c:	06dd      	lsls	r5, r3, #27
 800be3e:	d411      	bmi.n	800be64 <__swsetup_r+0x50>
 800be40:	2309      	movs	r3, #9
 800be42:	6033      	str	r3, [r6, #0]
 800be44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be48:	81a3      	strh	r3, [r4, #12]
 800be4a:	f04f 30ff 	mov.w	r0, #4294967295
 800be4e:	e03e      	b.n	800bece <__swsetup_r+0xba>
 800be50:	4b25      	ldr	r3, [pc, #148]	; (800bee8 <__swsetup_r+0xd4>)
 800be52:	429c      	cmp	r4, r3
 800be54:	d101      	bne.n	800be5a <__swsetup_r+0x46>
 800be56:	68ac      	ldr	r4, [r5, #8]
 800be58:	e7eb      	b.n	800be32 <__swsetup_r+0x1e>
 800be5a:	4b24      	ldr	r3, [pc, #144]	; (800beec <__swsetup_r+0xd8>)
 800be5c:	429c      	cmp	r4, r3
 800be5e:	bf08      	it	eq
 800be60:	68ec      	ldreq	r4, [r5, #12]
 800be62:	e7e6      	b.n	800be32 <__swsetup_r+0x1e>
 800be64:	0758      	lsls	r0, r3, #29
 800be66:	d512      	bpl.n	800be8e <__swsetup_r+0x7a>
 800be68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be6a:	b141      	cbz	r1, 800be7e <__swsetup_r+0x6a>
 800be6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be70:	4299      	cmp	r1, r3
 800be72:	d002      	beq.n	800be7a <__swsetup_r+0x66>
 800be74:	4630      	mov	r0, r6
 800be76:	f001 fc7b 	bl	800d770 <_free_r>
 800be7a:	2300      	movs	r3, #0
 800be7c:	6363      	str	r3, [r4, #52]	; 0x34
 800be7e:	89a3      	ldrh	r3, [r4, #12]
 800be80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be84:	81a3      	strh	r3, [r4, #12]
 800be86:	2300      	movs	r3, #0
 800be88:	6063      	str	r3, [r4, #4]
 800be8a:	6923      	ldr	r3, [r4, #16]
 800be8c:	6023      	str	r3, [r4, #0]
 800be8e:	89a3      	ldrh	r3, [r4, #12]
 800be90:	f043 0308 	orr.w	r3, r3, #8
 800be94:	81a3      	strh	r3, [r4, #12]
 800be96:	6923      	ldr	r3, [r4, #16]
 800be98:	b94b      	cbnz	r3, 800beae <__swsetup_r+0x9a>
 800be9a:	89a3      	ldrh	r3, [r4, #12]
 800be9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bea4:	d003      	beq.n	800beae <__swsetup_r+0x9a>
 800bea6:	4621      	mov	r1, r4
 800bea8:	4630      	mov	r0, r6
 800beaa:	f001 f87d 	bl	800cfa8 <__smakebuf_r>
 800beae:	89a0      	ldrh	r0, [r4, #12]
 800beb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800beb4:	f010 0301 	ands.w	r3, r0, #1
 800beb8:	d00a      	beq.n	800bed0 <__swsetup_r+0xbc>
 800beba:	2300      	movs	r3, #0
 800bebc:	60a3      	str	r3, [r4, #8]
 800bebe:	6963      	ldr	r3, [r4, #20]
 800bec0:	425b      	negs	r3, r3
 800bec2:	61a3      	str	r3, [r4, #24]
 800bec4:	6923      	ldr	r3, [r4, #16]
 800bec6:	b943      	cbnz	r3, 800beda <__swsetup_r+0xc6>
 800bec8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800becc:	d1ba      	bne.n	800be44 <__swsetup_r+0x30>
 800bece:	bd70      	pop	{r4, r5, r6, pc}
 800bed0:	0781      	lsls	r1, r0, #30
 800bed2:	bf58      	it	pl
 800bed4:	6963      	ldrpl	r3, [r4, #20]
 800bed6:	60a3      	str	r3, [r4, #8]
 800bed8:	e7f4      	b.n	800bec4 <__swsetup_r+0xb0>
 800beda:	2000      	movs	r0, #0
 800bedc:	e7f7      	b.n	800bece <__swsetup_r+0xba>
 800bede:	bf00      	nop
 800bee0:	20000014 	.word	0x20000014
 800bee4:	0801c6d4 	.word	0x0801c6d4
 800bee8:	0801c6f4 	.word	0x0801c6f4
 800beec:	0801c6b4 	.word	0x0801c6b4

0800bef0 <quorem>:
 800bef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef4:	6903      	ldr	r3, [r0, #16]
 800bef6:	690c      	ldr	r4, [r1, #16]
 800bef8:	42a3      	cmp	r3, r4
 800befa:	4607      	mov	r7, r0
 800befc:	f2c0 8081 	blt.w	800c002 <quorem+0x112>
 800bf00:	3c01      	subs	r4, #1
 800bf02:	f101 0814 	add.w	r8, r1, #20
 800bf06:	f100 0514 	add.w	r5, r0, #20
 800bf0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bf20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf24:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf28:	d331      	bcc.n	800bf8e <quorem+0x9e>
 800bf2a:	f04f 0e00 	mov.w	lr, #0
 800bf2e:	4640      	mov	r0, r8
 800bf30:	46ac      	mov	ip, r5
 800bf32:	46f2      	mov	sl, lr
 800bf34:	f850 2b04 	ldr.w	r2, [r0], #4
 800bf38:	b293      	uxth	r3, r2
 800bf3a:	fb06 e303 	mla	r3, r6, r3, lr
 800bf3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	ebaa 0303 	sub.w	r3, sl, r3
 800bf48:	0c12      	lsrs	r2, r2, #16
 800bf4a:	f8dc a000 	ldr.w	sl, [ip]
 800bf4e:	fb06 e202 	mla	r2, r6, r2, lr
 800bf52:	fa13 f38a 	uxtah	r3, r3, sl
 800bf56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bf5a:	fa1f fa82 	uxth.w	sl, r2
 800bf5e:	f8dc 2000 	ldr.w	r2, [ip]
 800bf62:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bf66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf70:	4581      	cmp	r9, r0
 800bf72:	f84c 3b04 	str.w	r3, [ip], #4
 800bf76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bf7a:	d2db      	bcs.n	800bf34 <quorem+0x44>
 800bf7c:	f855 300b 	ldr.w	r3, [r5, fp]
 800bf80:	b92b      	cbnz	r3, 800bf8e <quorem+0x9e>
 800bf82:	9b01      	ldr	r3, [sp, #4]
 800bf84:	3b04      	subs	r3, #4
 800bf86:	429d      	cmp	r5, r3
 800bf88:	461a      	mov	r2, r3
 800bf8a:	d32e      	bcc.n	800bfea <quorem+0xfa>
 800bf8c:	613c      	str	r4, [r7, #16]
 800bf8e:	4638      	mov	r0, r7
 800bf90:	f001 fade 	bl	800d550 <__mcmp>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	db24      	blt.n	800bfe2 <quorem+0xf2>
 800bf98:	3601      	adds	r6, #1
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	f04f 0c00 	mov.w	ip, #0
 800bfa0:	f858 2b04 	ldr.w	r2, [r8], #4
 800bfa4:	f8d0 e000 	ldr.w	lr, [r0]
 800bfa8:	b293      	uxth	r3, r2
 800bfaa:	ebac 0303 	sub.w	r3, ip, r3
 800bfae:	0c12      	lsrs	r2, r2, #16
 800bfb0:	fa13 f38e 	uxtah	r3, r3, lr
 800bfb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bfb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfc2:	45c1      	cmp	r9, r8
 800bfc4:	f840 3b04 	str.w	r3, [r0], #4
 800bfc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bfcc:	d2e8      	bcs.n	800bfa0 <quorem+0xb0>
 800bfce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfd6:	b922      	cbnz	r2, 800bfe2 <quorem+0xf2>
 800bfd8:	3b04      	subs	r3, #4
 800bfda:	429d      	cmp	r5, r3
 800bfdc:	461a      	mov	r2, r3
 800bfde:	d30a      	bcc.n	800bff6 <quorem+0x106>
 800bfe0:	613c      	str	r4, [r7, #16]
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	b003      	add	sp, #12
 800bfe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfea:	6812      	ldr	r2, [r2, #0]
 800bfec:	3b04      	subs	r3, #4
 800bfee:	2a00      	cmp	r2, #0
 800bff0:	d1cc      	bne.n	800bf8c <quorem+0x9c>
 800bff2:	3c01      	subs	r4, #1
 800bff4:	e7c7      	b.n	800bf86 <quorem+0x96>
 800bff6:	6812      	ldr	r2, [r2, #0]
 800bff8:	3b04      	subs	r3, #4
 800bffa:	2a00      	cmp	r2, #0
 800bffc:	d1f0      	bne.n	800bfe0 <quorem+0xf0>
 800bffe:	3c01      	subs	r4, #1
 800c000:	e7eb      	b.n	800bfda <quorem+0xea>
 800c002:	2000      	movs	r0, #0
 800c004:	e7ee      	b.n	800bfe4 <quorem+0xf4>
	...

0800c008 <_dtoa_r>:
 800c008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c00c:	ed2d 8b02 	vpush	{d8}
 800c010:	ec57 6b10 	vmov	r6, r7, d0
 800c014:	b095      	sub	sp, #84	; 0x54
 800c016:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c018:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c01c:	9105      	str	r1, [sp, #20]
 800c01e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c022:	4604      	mov	r4, r0
 800c024:	9209      	str	r2, [sp, #36]	; 0x24
 800c026:	930f      	str	r3, [sp, #60]	; 0x3c
 800c028:	b975      	cbnz	r5, 800c048 <_dtoa_r+0x40>
 800c02a:	2010      	movs	r0, #16
 800c02c:	f000 fffc 	bl	800d028 <malloc>
 800c030:	4602      	mov	r2, r0
 800c032:	6260      	str	r0, [r4, #36]	; 0x24
 800c034:	b920      	cbnz	r0, 800c040 <_dtoa_r+0x38>
 800c036:	4bb2      	ldr	r3, [pc, #712]	; (800c300 <_dtoa_r+0x2f8>)
 800c038:	21ea      	movs	r1, #234	; 0xea
 800c03a:	48b2      	ldr	r0, [pc, #712]	; (800c304 <_dtoa_r+0x2fc>)
 800c03c:	f001 ff5e 	bl	800defc <__assert_func>
 800c040:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c044:	6005      	str	r5, [r0, #0]
 800c046:	60c5      	str	r5, [r0, #12]
 800c048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c04a:	6819      	ldr	r1, [r3, #0]
 800c04c:	b151      	cbz	r1, 800c064 <_dtoa_r+0x5c>
 800c04e:	685a      	ldr	r2, [r3, #4]
 800c050:	604a      	str	r2, [r1, #4]
 800c052:	2301      	movs	r3, #1
 800c054:	4093      	lsls	r3, r2
 800c056:	608b      	str	r3, [r1, #8]
 800c058:	4620      	mov	r0, r4
 800c05a:	f001 f83b 	bl	800d0d4 <_Bfree>
 800c05e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c060:	2200      	movs	r2, #0
 800c062:	601a      	str	r2, [r3, #0]
 800c064:	1e3b      	subs	r3, r7, #0
 800c066:	bfb9      	ittee	lt
 800c068:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c06c:	9303      	strlt	r3, [sp, #12]
 800c06e:	2300      	movge	r3, #0
 800c070:	f8c8 3000 	strge.w	r3, [r8]
 800c074:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c078:	4ba3      	ldr	r3, [pc, #652]	; (800c308 <_dtoa_r+0x300>)
 800c07a:	bfbc      	itt	lt
 800c07c:	2201      	movlt	r2, #1
 800c07e:	f8c8 2000 	strlt.w	r2, [r8]
 800c082:	ea33 0309 	bics.w	r3, r3, r9
 800c086:	d11b      	bne.n	800c0c0 <_dtoa_r+0xb8>
 800c088:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c08a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c08e:	6013      	str	r3, [r2, #0]
 800c090:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c094:	4333      	orrs	r3, r6
 800c096:	f000 857a 	beq.w	800cb8e <_dtoa_r+0xb86>
 800c09a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c09c:	b963      	cbnz	r3, 800c0b8 <_dtoa_r+0xb0>
 800c09e:	4b9b      	ldr	r3, [pc, #620]	; (800c30c <_dtoa_r+0x304>)
 800c0a0:	e024      	b.n	800c0ec <_dtoa_r+0xe4>
 800c0a2:	4b9b      	ldr	r3, [pc, #620]	; (800c310 <_dtoa_r+0x308>)
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	3308      	adds	r3, #8
 800c0a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c0aa:	6013      	str	r3, [r2, #0]
 800c0ac:	9800      	ldr	r0, [sp, #0]
 800c0ae:	b015      	add	sp, #84	; 0x54
 800c0b0:	ecbd 8b02 	vpop	{d8}
 800c0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b8:	4b94      	ldr	r3, [pc, #592]	; (800c30c <_dtoa_r+0x304>)
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	3303      	adds	r3, #3
 800c0be:	e7f3      	b.n	800c0a8 <_dtoa_r+0xa0>
 800c0c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	ec51 0b17 	vmov	r0, r1, d7
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c0d0:	f7f4 fcfa 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0d4:	4680      	mov	r8, r0
 800c0d6:	b158      	cbz	r0, 800c0f0 <_dtoa_r+0xe8>
 800c0d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c0da:	2301      	movs	r3, #1
 800c0dc:	6013      	str	r3, [r2, #0]
 800c0de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f000 8551 	beq.w	800cb88 <_dtoa_r+0xb80>
 800c0e6:	488b      	ldr	r0, [pc, #556]	; (800c314 <_dtoa_r+0x30c>)
 800c0e8:	6018      	str	r0, [r3, #0]
 800c0ea:	1e43      	subs	r3, r0, #1
 800c0ec:	9300      	str	r3, [sp, #0]
 800c0ee:	e7dd      	b.n	800c0ac <_dtoa_r+0xa4>
 800c0f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c0f4:	aa12      	add	r2, sp, #72	; 0x48
 800c0f6:	a913      	add	r1, sp, #76	; 0x4c
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f001 facd 	bl	800d698 <__d2b>
 800c0fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c102:	4683      	mov	fp, r0
 800c104:	2d00      	cmp	r5, #0
 800c106:	d07c      	beq.n	800c202 <_dtoa_r+0x1fa>
 800c108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c10a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c10e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c112:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c116:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c11a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c11e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c122:	4b7d      	ldr	r3, [pc, #500]	; (800c318 <_dtoa_r+0x310>)
 800c124:	2200      	movs	r2, #0
 800c126:	4630      	mov	r0, r6
 800c128:	4639      	mov	r1, r7
 800c12a:	f7f4 f8ad 	bl	8000288 <__aeabi_dsub>
 800c12e:	a36e      	add	r3, pc, #440	; (adr r3, 800c2e8 <_dtoa_r+0x2e0>)
 800c130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c134:	f7f4 fa60 	bl	80005f8 <__aeabi_dmul>
 800c138:	a36d      	add	r3, pc, #436	; (adr r3, 800c2f0 <_dtoa_r+0x2e8>)
 800c13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13e:	f7f4 f8a5 	bl	800028c <__adddf3>
 800c142:	4606      	mov	r6, r0
 800c144:	4628      	mov	r0, r5
 800c146:	460f      	mov	r7, r1
 800c148:	f7f4 f9ec 	bl	8000524 <__aeabi_i2d>
 800c14c:	a36a      	add	r3, pc, #424	; (adr r3, 800c2f8 <_dtoa_r+0x2f0>)
 800c14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c152:	f7f4 fa51 	bl	80005f8 <__aeabi_dmul>
 800c156:	4602      	mov	r2, r0
 800c158:	460b      	mov	r3, r1
 800c15a:	4630      	mov	r0, r6
 800c15c:	4639      	mov	r1, r7
 800c15e:	f7f4 f895 	bl	800028c <__adddf3>
 800c162:	4606      	mov	r6, r0
 800c164:	460f      	mov	r7, r1
 800c166:	f7f4 fcf7 	bl	8000b58 <__aeabi_d2iz>
 800c16a:	2200      	movs	r2, #0
 800c16c:	4682      	mov	sl, r0
 800c16e:	2300      	movs	r3, #0
 800c170:	4630      	mov	r0, r6
 800c172:	4639      	mov	r1, r7
 800c174:	f7f4 fcb2 	bl	8000adc <__aeabi_dcmplt>
 800c178:	b148      	cbz	r0, 800c18e <_dtoa_r+0x186>
 800c17a:	4650      	mov	r0, sl
 800c17c:	f7f4 f9d2 	bl	8000524 <__aeabi_i2d>
 800c180:	4632      	mov	r2, r6
 800c182:	463b      	mov	r3, r7
 800c184:	f7f4 fca0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c188:	b908      	cbnz	r0, 800c18e <_dtoa_r+0x186>
 800c18a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c18e:	f1ba 0f16 	cmp.w	sl, #22
 800c192:	d854      	bhi.n	800c23e <_dtoa_r+0x236>
 800c194:	4b61      	ldr	r3, [pc, #388]	; (800c31c <_dtoa_r+0x314>)
 800c196:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c1a2:	f7f4 fc9b 	bl	8000adc <__aeabi_dcmplt>
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	d04b      	beq.n	800c242 <_dtoa_r+0x23a>
 800c1aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	930e      	str	r3, [sp, #56]	; 0x38
 800c1b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c1b4:	1b5d      	subs	r5, r3, r5
 800c1b6:	1e6b      	subs	r3, r5, #1
 800c1b8:	9304      	str	r3, [sp, #16]
 800c1ba:	bf43      	ittte	mi
 800c1bc:	2300      	movmi	r3, #0
 800c1be:	f1c5 0801 	rsbmi	r8, r5, #1
 800c1c2:	9304      	strmi	r3, [sp, #16]
 800c1c4:	f04f 0800 	movpl.w	r8, #0
 800c1c8:	f1ba 0f00 	cmp.w	sl, #0
 800c1cc:	db3b      	blt.n	800c246 <_dtoa_r+0x23e>
 800c1ce:	9b04      	ldr	r3, [sp, #16]
 800c1d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c1d4:	4453      	add	r3, sl
 800c1d6:	9304      	str	r3, [sp, #16]
 800c1d8:	2300      	movs	r3, #0
 800c1da:	9306      	str	r3, [sp, #24]
 800c1dc:	9b05      	ldr	r3, [sp, #20]
 800c1de:	2b09      	cmp	r3, #9
 800c1e0:	d869      	bhi.n	800c2b6 <_dtoa_r+0x2ae>
 800c1e2:	2b05      	cmp	r3, #5
 800c1e4:	bfc4      	itt	gt
 800c1e6:	3b04      	subgt	r3, #4
 800c1e8:	9305      	strgt	r3, [sp, #20]
 800c1ea:	9b05      	ldr	r3, [sp, #20]
 800c1ec:	f1a3 0302 	sub.w	r3, r3, #2
 800c1f0:	bfcc      	ite	gt
 800c1f2:	2500      	movgt	r5, #0
 800c1f4:	2501      	movle	r5, #1
 800c1f6:	2b03      	cmp	r3, #3
 800c1f8:	d869      	bhi.n	800c2ce <_dtoa_r+0x2c6>
 800c1fa:	e8df f003 	tbb	[pc, r3]
 800c1fe:	4e2c      	.short	0x4e2c
 800c200:	5a4c      	.short	0x5a4c
 800c202:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c206:	441d      	add	r5, r3
 800c208:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c20c:	2b20      	cmp	r3, #32
 800c20e:	bfc1      	itttt	gt
 800c210:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c214:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c218:	fa09 f303 	lslgt.w	r3, r9, r3
 800c21c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c220:	bfda      	itte	le
 800c222:	f1c3 0320 	rsble	r3, r3, #32
 800c226:	fa06 f003 	lslle.w	r0, r6, r3
 800c22a:	4318      	orrgt	r0, r3
 800c22c:	f7f4 f96a 	bl	8000504 <__aeabi_ui2d>
 800c230:	2301      	movs	r3, #1
 800c232:	4606      	mov	r6, r0
 800c234:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c238:	3d01      	subs	r5, #1
 800c23a:	9310      	str	r3, [sp, #64]	; 0x40
 800c23c:	e771      	b.n	800c122 <_dtoa_r+0x11a>
 800c23e:	2301      	movs	r3, #1
 800c240:	e7b6      	b.n	800c1b0 <_dtoa_r+0x1a8>
 800c242:	900e      	str	r0, [sp, #56]	; 0x38
 800c244:	e7b5      	b.n	800c1b2 <_dtoa_r+0x1aa>
 800c246:	f1ca 0300 	rsb	r3, sl, #0
 800c24a:	9306      	str	r3, [sp, #24]
 800c24c:	2300      	movs	r3, #0
 800c24e:	eba8 080a 	sub.w	r8, r8, sl
 800c252:	930d      	str	r3, [sp, #52]	; 0x34
 800c254:	e7c2      	b.n	800c1dc <_dtoa_r+0x1d4>
 800c256:	2300      	movs	r3, #0
 800c258:	9308      	str	r3, [sp, #32]
 800c25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	dc39      	bgt.n	800c2d4 <_dtoa_r+0x2cc>
 800c260:	f04f 0901 	mov.w	r9, #1
 800c264:	f8cd 9004 	str.w	r9, [sp, #4]
 800c268:	464b      	mov	r3, r9
 800c26a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c26e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c270:	2200      	movs	r2, #0
 800c272:	6042      	str	r2, [r0, #4]
 800c274:	2204      	movs	r2, #4
 800c276:	f102 0614 	add.w	r6, r2, #20
 800c27a:	429e      	cmp	r6, r3
 800c27c:	6841      	ldr	r1, [r0, #4]
 800c27e:	d92f      	bls.n	800c2e0 <_dtoa_r+0x2d8>
 800c280:	4620      	mov	r0, r4
 800c282:	f000 fee7 	bl	800d054 <_Balloc>
 800c286:	9000      	str	r0, [sp, #0]
 800c288:	2800      	cmp	r0, #0
 800c28a:	d14b      	bne.n	800c324 <_dtoa_r+0x31c>
 800c28c:	4b24      	ldr	r3, [pc, #144]	; (800c320 <_dtoa_r+0x318>)
 800c28e:	4602      	mov	r2, r0
 800c290:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c294:	e6d1      	b.n	800c03a <_dtoa_r+0x32>
 800c296:	2301      	movs	r3, #1
 800c298:	e7de      	b.n	800c258 <_dtoa_r+0x250>
 800c29a:	2300      	movs	r3, #0
 800c29c:	9308      	str	r3, [sp, #32]
 800c29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2a0:	eb0a 0903 	add.w	r9, sl, r3
 800c2a4:	f109 0301 	add.w	r3, r9, #1
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	9301      	str	r3, [sp, #4]
 800c2ac:	bfb8      	it	lt
 800c2ae:	2301      	movlt	r3, #1
 800c2b0:	e7dd      	b.n	800c26e <_dtoa_r+0x266>
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	e7f2      	b.n	800c29c <_dtoa_r+0x294>
 800c2b6:	2501      	movs	r5, #1
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	9305      	str	r3, [sp, #20]
 800c2bc:	9508      	str	r5, [sp, #32]
 800c2be:	f04f 39ff 	mov.w	r9, #4294967295
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800c2c8:	2312      	movs	r3, #18
 800c2ca:	9209      	str	r2, [sp, #36]	; 0x24
 800c2cc:	e7cf      	b.n	800c26e <_dtoa_r+0x266>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	9308      	str	r3, [sp, #32]
 800c2d2:	e7f4      	b.n	800c2be <_dtoa_r+0x2b6>
 800c2d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c2d8:	f8cd 9004 	str.w	r9, [sp, #4]
 800c2dc:	464b      	mov	r3, r9
 800c2de:	e7c6      	b.n	800c26e <_dtoa_r+0x266>
 800c2e0:	3101      	adds	r1, #1
 800c2e2:	6041      	str	r1, [r0, #4]
 800c2e4:	0052      	lsls	r2, r2, #1
 800c2e6:	e7c6      	b.n	800c276 <_dtoa_r+0x26e>
 800c2e8:	636f4361 	.word	0x636f4361
 800c2ec:	3fd287a7 	.word	0x3fd287a7
 800c2f0:	8b60c8b3 	.word	0x8b60c8b3
 800c2f4:	3fc68a28 	.word	0x3fc68a28
 800c2f8:	509f79fb 	.word	0x509f79fb
 800c2fc:	3fd34413 	.word	0x3fd34413
 800c300:	0801c62d 	.word	0x0801c62d
 800c304:	0801c644 	.word	0x0801c644
 800c308:	7ff00000 	.word	0x7ff00000
 800c30c:	0801c629 	.word	0x0801c629
 800c310:	0801c620 	.word	0x0801c620
 800c314:	0801c5fd 	.word	0x0801c5fd
 800c318:	3ff80000 	.word	0x3ff80000
 800c31c:	0801c7a0 	.word	0x0801c7a0
 800c320:	0801c6a3 	.word	0x0801c6a3
 800c324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c326:	9a00      	ldr	r2, [sp, #0]
 800c328:	601a      	str	r2, [r3, #0]
 800c32a:	9b01      	ldr	r3, [sp, #4]
 800c32c:	2b0e      	cmp	r3, #14
 800c32e:	f200 80ad 	bhi.w	800c48c <_dtoa_r+0x484>
 800c332:	2d00      	cmp	r5, #0
 800c334:	f000 80aa 	beq.w	800c48c <_dtoa_r+0x484>
 800c338:	f1ba 0f00 	cmp.w	sl, #0
 800c33c:	dd36      	ble.n	800c3ac <_dtoa_r+0x3a4>
 800c33e:	4ac3      	ldr	r2, [pc, #780]	; (800c64c <_dtoa_r+0x644>)
 800c340:	f00a 030f 	and.w	r3, sl, #15
 800c344:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c348:	ed93 7b00 	vldr	d7, [r3]
 800c34c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c350:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c354:	eeb0 8a47 	vmov.f32	s16, s14
 800c358:	eef0 8a67 	vmov.f32	s17, s15
 800c35c:	d016      	beq.n	800c38c <_dtoa_r+0x384>
 800c35e:	4bbc      	ldr	r3, [pc, #752]	; (800c650 <_dtoa_r+0x648>)
 800c360:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c364:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c368:	f7f4 fa70 	bl	800084c <__aeabi_ddiv>
 800c36c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c370:	f007 070f 	and.w	r7, r7, #15
 800c374:	2503      	movs	r5, #3
 800c376:	4eb6      	ldr	r6, [pc, #728]	; (800c650 <_dtoa_r+0x648>)
 800c378:	b957      	cbnz	r7, 800c390 <_dtoa_r+0x388>
 800c37a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c37e:	ec53 2b18 	vmov	r2, r3, d8
 800c382:	f7f4 fa63 	bl	800084c <__aeabi_ddiv>
 800c386:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c38a:	e029      	b.n	800c3e0 <_dtoa_r+0x3d8>
 800c38c:	2502      	movs	r5, #2
 800c38e:	e7f2      	b.n	800c376 <_dtoa_r+0x36e>
 800c390:	07f9      	lsls	r1, r7, #31
 800c392:	d508      	bpl.n	800c3a6 <_dtoa_r+0x39e>
 800c394:	ec51 0b18 	vmov	r0, r1, d8
 800c398:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c39c:	f7f4 f92c 	bl	80005f8 <__aeabi_dmul>
 800c3a0:	ec41 0b18 	vmov	d8, r0, r1
 800c3a4:	3501      	adds	r5, #1
 800c3a6:	107f      	asrs	r7, r7, #1
 800c3a8:	3608      	adds	r6, #8
 800c3aa:	e7e5      	b.n	800c378 <_dtoa_r+0x370>
 800c3ac:	f000 80a6 	beq.w	800c4fc <_dtoa_r+0x4f4>
 800c3b0:	f1ca 0600 	rsb	r6, sl, #0
 800c3b4:	4ba5      	ldr	r3, [pc, #660]	; (800c64c <_dtoa_r+0x644>)
 800c3b6:	4fa6      	ldr	r7, [pc, #664]	; (800c650 <_dtoa_r+0x648>)
 800c3b8:	f006 020f 	and.w	r2, r6, #15
 800c3bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c3c8:	f7f4 f916 	bl	80005f8 <__aeabi_dmul>
 800c3cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3d0:	1136      	asrs	r6, r6, #4
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	2502      	movs	r5, #2
 800c3d6:	2e00      	cmp	r6, #0
 800c3d8:	f040 8085 	bne.w	800c4e6 <_dtoa_r+0x4de>
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1d2      	bne.n	800c386 <_dtoa_r+0x37e>
 800c3e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f000 808c 	beq.w	800c500 <_dtoa_r+0x4f8>
 800c3e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c3ec:	4b99      	ldr	r3, [pc, #612]	; (800c654 <_dtoa_r+0x64c>)
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	4630      	mov	r0, r6
 800c3f2:	4639      	mov	r1, r7
 800c3f4:	f7f4 fb72 	bl	8000adc <__aeabi_dcmplt>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	f000 8081 	beq.w	800c500 <_dtoa_r+0x4f8>
 800c3fe:	9b01      	ldr	r3, [sp, #4]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d07d      	beq.n	800c500 <_dtoa_r+0x4f8>
 800c404:	f1b9 0f00 	cmp.w	r9, #0
 800c408:	dd3c      	ble.n	800c484 <_dtoa_r+0x47c>
 800c40a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c40e:	9307      	str	r3, [sp, #28]
 800c410:	2200      	movs	r2, #0
 800c412:	4b91      	ldr	r3, [pc, #580]	; (800c658 <_dtoa_r+0x650>)
 800c414:	4630      	mov	r0, r6
 800c416:	4639      	mov	r1, r7
 800c418:	f7f4 f8ee 	bl	80005f8 <__aeabi_dmul>
 800c41c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c420:	3501      	adds	r5, #1
 800c422:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c426:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c42a:	4628      	mov	r0, r5
 800c42c:	f7f4 f87a 	bl	8000524 <__aeabi_i2d>
 800c430:	4632      	mov	r2, r6
 800c432:	463b      	mov	r3, r7
 800c434:	f7f4 f8e0 	bl	80005f8 <__aeabi_dmul>
 800c438:	4b88      	ldr	r3, [pc, #544]	; (800c65c <_dtoa_r+0x654>)
 800c43a:	2200      	movs	r2, #0
 800c43c:	f7f3 ff26 	bl	800028c <__adddf3>
 800c440:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c448:	9303      	str	r3, [sp, #12]
 800c44a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d15c      	bne.n	800c50a <_dtoa_r+0x502>
 800c450:	4b83      	ldr	r3, [pc, #524]	; (800c660 <_dtoa_r+0x658>)
 800c452:	2200      	movs	r2, #0
 800c454:	4630      	mov	r0, r6
 800c456:	4639      	mov	r1, r7
 800c458:	f7f3 ff16 	bl	8000288 <__aeabi_dsub>
 800c45c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c460:	4606      	mov	r6, r0
 800c462:	460f      	mov	r7, r1
 800c464:	f7f4 fb58 	bl	8000b18 <__aeabi_dcmpgt>
 800c468:	2800      	cmp	r0, #0
 800c46a:	f040 8296 	bne.w	800c99a <_dtoa_r+0x992>
 800c46e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c472:	4630      	mov	r0, r6
 800c474:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c478:	4639      	mov	r1, r7
 800c47a:	f7f4 fb2f 	bl	8000adc <__aeabi_dcmplt>
 800c47e:	2800      	cmp	r0, #0
 800c480:	f040 8288 	bne.w	800c994 <_dtoa_r+0x98c>
 800c484:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c488:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c48c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c48e:	2b00      	cmp	r3, #0
 800c490:	f2c0 8158 	blt.w	800c744 <_dtoa_r+0x73c>
 800c494:	f1ba 0f0e 	cmp.w	sl, #14
 800c498:	f300 8154 	bgt.w	800c744 <_dtoa_r+0x73c>
 800c49c:	4b6b      	ldr	r3, [pc, #428]	; (800c64c <_dtoa_r+0x644>)
 800c49e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c4a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	f280 80e3 	bge.w	800c674 <_dtoa_r+0x66c>
 800c4ae:	9b01      	ldr	r3, [sp, #4]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f300 80df 	bgt.w	800c674 <_dtoa_r+0x66c>
 800c4b6:	f040 826d 	bne.w	800c994 <_dtoa_r+0x98c>
 800c4ba:	4b69      	ldr	r3, [pc, #420]	; (800c660 <_dtoa_r+0x658>)
 800c4bc:	2200      	movs	r2, #0
 800c4be:	4640      	mov	r0, r8
 800c4c0:	4649      	mov	r1, r9
 800c4c2:	f7f4 f899 	bl	80005f8 <__aeabi_dmul>
 800c4c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4ca:	f7f4 fb1b 	bl	8000b04 <__aeabi_dcmpge>
 800c4ce:	9e01      	ldr	r6, [sp, #4]
 800c4d0:	4637      	mov	r7, r6
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	f040 8243 	bne.w	800c95e <_dtoa_r+0x956>
 800c4d8:	9d00      	ldr	r5, [sp, #0]
 800c4da:	2331      	movs	r3, #49	; 0x31
 800c4dc:	f805 3b01 	strb.w	r3, [r5], #1
 800c4e0:	f10a 0a01 	add.w	sl, sl, #1
 800c4e4:	e23f      	b.n	800c966 <_dtoa_r+0x95e>
 800c4e6:	07f2      	lsls	r2, r6, #31
 800c4e8:	d505      	bpl.n	800c4f6 <_dtoa_r+0x4ee>
 800c4ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4ee:	f7f4 f883 	bl	80005f8 <__aeabi_dmul>
 800c4f2:	3501      	adds	r5, #1
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	1076      	asrs	r6, r6, #1
 800c4f8:	3708      	adds	r7, #8
 800c4fa:	e76c      	b.n	800c3d6 <_dtoa_r+0x3ce>
 800c4fc:	2502      	movs	r5, #2
 800c4fe:	e76f      	b.n	800c3e0 <_dtoa_r+0x3d8>
 800c500:	9b01      	ldr	r3, [sp, #4]
 800c502:	f8cd a01c 	str.w	sl, [sp, #28]
 800c506:	930c      	str	r3, [sp, #48]	; 0x30
 800c508:	e78d      	b.n	800c426 <_dtoa_r+0x41e>
 800c50a:	9900      	ldr	r1, [sp, #0]
 800c50c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c50e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c510:	4b4e      	ldr	r3, [pc, #312]	; (800c64c <_dtoa_r+0x644>)
 800c512:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c516:	4401      	add	r1, r0
 800c518:	9102      	str	r1, [sp, #8]
 800c51a:	9908      	ldr	r1, [sp, #32]
 800c51c:	eeb0 8a47 	vmov.f32	s16, s14
 800c520:	eef0 8a67 	vmov.f32	s17, s15
 800c524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c528:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c52c:	2900      	cmp	r1, #0
 800c52e:	d045      	beq.n	800c5bc <_dtoa_r+0x5b4>
 800c530:	494c      	ldr	r1, [pc, #304]	; (800c664 <_dtoa_r+0x65c>)
 800c532:	2000      	movs	r0, #0
 800c534:	f7f4 f98a 	bl	800084c <__aeabi_ddiv>
 800c538:	ec53 2b18 	vmov	r2, r3, d8
 800c53c:	f7f3 fea4 	bl	8000288 <__aeabi_dsub>
 800c540:	9d00      	ldr	r5, [sp, #0]
 800c542:	ec41 0b18 	vmov	d8, r0, r1
 800c546:	4639      	mov	r1, r7
 800c548:	4630      	mov	r0, r6
 800c54a:	f7f4 fb05 	bl	8000b58 <__aeabi_d2iz>
 800c54e:	900c      	str	r0, [sp, #48]	; 0x30
 800c550:	f7f3 ffe8 	bl	8000524 <__aeabi_i2d>
 800c554:	4602      	mov	r2, r0
 800c556:	460b      	mov	r3, r1
 800c558:	4630      	mov	r0, r6
 800c55a:	4639      	mov	r1, r7
 800c55c:	f7f3 fe94 	bl	8000288 <__aeabi_dsub>
 800c560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c562:	3330      	adds	r3, #48	; 0x30
 800c564:	f805 3b01 	strb.w	r3, [r5], #1
 800c568:	ec53 2b18 	vmov	r2, r3, d8
 800c56c:	4606      	mov	r6, r0
 800c56e:	460f      	mov	r7, r1
 800c570:	f7f4 fab4 	bl	8000adc <__aeabi_dcmplt>
 800c574:	2800      	cmp	r0, #0
 800c576:	d165      	bne.n	800c644 <_dtoa_r+0x63c>
 800c578:	4632      	mov	r2, r6
 800c57a:	463b      	mov	r3, r7
 800c57c:	4935      	ldr	r1, [pc, #212]	; (800c654 <_dtoa_r+0x64c>)
 800c57e:	2000      	movs	r0, #0
 800c580:	f7f3 fe82 	bl	8000288 <__aeabi_dsub>
 800c584:	ec53 2b18 	vmov	r2, r3, d8
 800c588:	f7f4 faa8 	bl	8000adc <__aeabi_dcmplt>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	f040 80b9 	bne.w	800c704 <_dtoa_r+0x6fc>
 800c592:	9b02      	ldr	r3, [sp, #8]
 800c594:	429d      	cmp	r5, r3
 800c596:	f43f af75 	beq.w	800c484 <_dtoa_r+0x47c>
 800c59a:	4b2f      	ldr	r3, [pc, #188]	; (800c658 <_dtoa_r+0x650>)
 800c59c:	ec51 0b18 	vmov	r0, r1, d8
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f7f4 f829 	bl	80005f8 <__aeabi_dmul>
 800c5a6:	4b2c      	ldr	r3, [pc, #176]	; (800c658 <_dtoa_r+0x650>)
 800c5a8:	ec41 0b18 	vmov	d8, r0, r1
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	4639      	mov	r1, r7
 800c5b2:	f7f4 f821 	bl	80005f8 <__aeabi_dmul>
 800c5b6:	4606      	mov	r6, r0
 800c5b8:	460f      	mov	r7, r1
 800c5ba:	e7c4      	b.n	800c546 <_dtoa_r+0x53e>
 800c5bc:	ec51 0b17 	vmov	r0, r1, d7
 800c5c0:	f7f4 f81a 	bl	80005f8 <__aeabi_dmul>
 800c5c4:	9b02      	ldr	r3, [sp, #8]
 800c5c6:	9d00      	ldr	r5, [sp, #0]
 800c5c8:	930c      	str	r3, [sp, #48]	; 0x30
 800c5ca:	ec41 0b18 	vmov	d8, r0, r1
 800c5ce:	4639      	mov	r1, r7
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	f7f4 fac1 	bl	8000b58 <__aeabi_d2iz>
 800c5d6:	9011      	str	r0, [sp, #68]	; 0x44
 800c5d8:	f7f3 ffa4 	bl	8000524 <__aeabi_i2d>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	460b      	mov	r3, r1
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	4639      	mov	r1, r7
 800c5e4:	f7f3 fe50 	bl	8000288 <__aeabi_dsub>
 800c5e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5ea:	3330      	adds	r3, #48	; 0x30
 800c5ec:	f805 3b01 	strb.w	r3, [r5], #1
 800c5f0:	9b02      	ldr	r3, [sp, #8]
 800c5f2:	429d      	cmp	r5, r3
 800c5f4:	4606      	mov	r6, r0
 800c5f6:	460f      	mov	r7, r1
 800c5f8:	f04f 0200 	mov.w	r2, #0
 800c5fc:	d134      	bne.n	800c668 <_dtoa_r+0x660>
 800c5fe:	4b19      	ldr	r3, [pc, #100]	; (800c664 <_dtoa_r+0x65c>)
 800c600:	ec51 0b18 	vmov	r0, r1, d8
 800c604:	f7f3 fe42 	bl	800028c <__adddf3>
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	4630      	mov	r0, r6
 800c60e:	4639      	mov	r1, r7
 800c610:	f7f4 fa82 	bl	8000b18 <__aeabi_dcmpgt>
 800c614:	2800      	cmp	r0, #0
 800c616:	d175      	bne.n	800c704 <_dtoa_r+0x6fc>
 800c618:	ec53 2b18 	vmov	r2, r3, d8
 800c61c:	4911      	ldr	r1, [pc, #68]	; (800c664 <_dtoa_r+0x65c>)
 800c61e:	2000      	movs	r0, #0
 800c620:	f7f3 fe32 	bl	8000288 <__aeabi_dsub>
 800c624:	4602      	mov	r2, r0
 800c626:	460b      	mov	r3, r1
 800c628:	4630      	mov	r0, r6
 800c62a:	4639      	mov	r1, r7
 800c62c:	f7f4 fa56 	bl	8000adc <__aeabi_dcmplt>
 800c630:	2800      	cmp	r0, #0
 800c632:	f43f af27 	beq.w	800c484 <_dtoa_r+0x47c>
 800c636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c638:	1e6b      	subs	r3, r5, #1
 800c63a:	930c      	str	r3, [sp, #48]	; 0x30
 800c63c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c640:	2b30      	cmp	r3, #48	; 0x30
 800c642:	d0f8      	beq.n	800c636 <_dtoa_r+0x62e>
 800c644:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c648:	e04a      	b.n	800c6e0 <_dtoa_r+0x6d8>
 800c64a:	bf00      	nop
 800c64c:	0801c7a0 	.word	0x0801c7a0
 800c650:	0801c778 	.word	0x0801c778
 800c654:	3ff00000 	.word	0x3ff00000
 800c658:	40240000 	.word	0x40240000
 800c65c:	401c0000 	.word	0x401c0000
 800c660:	40140000 	.word	0x40140000
 800c664:	3fe00000 	.word	0x3fe00000
 800c668:	4baf      	ldr	r3, [pc, #700]	; (800c928 <_dtoa_r+0x920>)
 800c66a:	f7f3 ffc5 	bl	80005f8 <__aeabi_dmul>
 800c66e:	4606      	mov	r6, r0
 800c670:	460f      	mov	r7, r1
 800c672:	e7ac      	b.n	800c5ce <_dtoa_r+0x5c6>
 800c674:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c678:	9d00      	ldr	r5, [sp, #0]
 800c67a:	4642      	mov	r2, r8
 800c67c:	464b      	mov	r3, r9
 800c67e:	4630      	mov	r0, r6
 800c680:	4639      	mov	r1, r7
 800c682:	f7f4 f8e3 	bl	800084c <__aeabi_ddiv>
 800c686:	f7f4 fa67 	bl	8000b58 <__aeabi_d2iz>
 800c68a:	9002      	str	r0, [sp, #8]
 800c68c:	f7f3 ff4a 	bl	8000524 <__aeabi_i2d>
 800c690:	4642      	mov	r2, r8
 800c692:	464b      	mov	r3, r9
 800c694:	f7f3 ffb0 	bl	80005f8 <__aeabi_dmul>
 800c698:	4602      	mov	r2, r0
 800c69a:	460b      	mov	r3, r1
 800c69c:	4630      	mov	r0, r6
 800c69e:	4639      	mov	r1, r7
 800c6a0:	f7f3 fdf2 	bl	8000288 <__aeabi_dsub>
 800c6a4:	9e02      	ldr	r6, [sp, #8]
 800c6a6:	9f01      	ldr	r7, [sp, #4]
 800c6a8:	3630      	adds	r6, #48	; 0x30
 800c6aa:	f805 6b01 	strb.w	r6, [r5], #1
 800c6ae:	9e00      	ldr	r6, [sp, #0]
 800c6b0:	1bae      	subs	r6, r5, r6
 800c6b2:	42b7      	cmp	r7, r6
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	d137      	bne.n	800c72a <_dtoa_r+0x722>
 800c6ba:	f7f3 fde7 	bl	800028c <__adddf3>
 800c6be:	4642      	mov	r2, r8
 800c6c0:	464b      	mov	r3, r9
 800c6c2:	4606      	mov	r6, r0
 800c6c4:	460f      	mov	r7, r1
 800c6c6:	f7f4 fa27 	bl	8000b18 <__aeabi_dcmpgt>
 800c6ca:	b9c8      	cbnz	r0, 800c700 <_dtoa_r+0x6f8>
 800c6cc:	4642      	mov	r2, r8
 800c6ce:	464b      	mov	r3, r9
 800c6d0:	4630      	mov	r0, r6
 800c6d2:	4639      	mov	r1, r7
 800c6d4:	f7f4 f9f8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6d8:	b110      	cbz	r0, 800c6e0 <_dtoa_r+0x6d8>
 800c6da:	9b02      	ldr	r3, [sp, #8]
 800c6dc:	07d9      	lsls	r1, r3, #31
 800c6de:	d40f      	bmi.n	800c700 <_dtoa_r+0x6f8>
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	4659      	mov	r1, fp
 800c6e4:	f000 fcf6 	bl	800d0d4 <_Bfree>
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	702b      	strb	r3, [r5, #0]
 800c6ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6ee:	f10a 0001 	add.w	r0, sl, #1
 800c6f2:	6018      	str	r0, [r3, #0]
 800c6f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f43f acd8 	beq.w	800c0ac <_dtoa_r+0xa4>
 800c6fc:	601d      	str	r5, [r3, #0]
 800c6fe:	e4d5      	b.n	800c0ac <_dtoa_r+0xa4>
 800c700:	f8cd a01c 	str.w	sl, [sp, #28]
 800c704:	462b      	mov	r3, r5
 800c706:	461d      	mov	r5, r3
 800c708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c70c:	2a39      	cmp	r2, #57	; 0x39
 800c70e:	d108      	bne.n	800c722 <_dtoa_r+0x71a>
 800c710:	9a00      	ldr	r2, [sp, #0]
 800c712:	429a      	cmp	r2, r3
 800c714:	d1f7      	bne.n	800c706 <_dtoa_r+0x6fe>
 800c716:	9a07      	ldr	r2, [sp, #28]
 800c718:	9900      	ldr	r1, [sp, #0]
 800c71a:	3201      	adds	r2, #1
 800c71c:	9207      	str	r2, [sp, #28]
 800c71e:	2230      	movs	r2, #48	; 0x30
 800c720:	700a      	strb	r2, [r1, #0]
 800c722:	781a      	ldrb	r2, [r3, #0]
 800c724:	3201      	adds	r2, #1
 800c726:	701a      	strb	r2, [r3, #0]
 800c728:	e78c      	b.n	800c644 <_dtoa_r+0x63c>
 800c72a:	4b7f      	ldr	r3, [pc, #508]	; (800c928 <_dtoa_r+0x920>)
 800c72c:	2200      	movs	r2, #0
 800c72e:	f7f3 ff63 	bl	80005f8 <__aeabi_dmul>
 800c732:	2200      	movs	r2, #0
 800c734:	2300      	movs	r3, #0
 800c736:	4606      	mov	r6, r0
 800c738:	460f      	mov	r7, r1
 800c73a:	f7f4 f9c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800c73e:	2800      	cmp	r0, #0
 800c740:	d09b      	beq.n	800c67a <_dtoa_r+0x672>
 800c742:	e7cd      	b.n	800c6e0 <_dtoa_r+0x6d8>
 800c744:	9a08      	ldr	r2, [sp, #32]
 800c746:	2a00      	cmp	r2, #0
 800c748:	f000 80c4 	beq.w	800c8d4 <_dtoa_r+0x8cc>
 800c74c:	9a05      	ldr	r2, [sp, #20]
 800c74e:	2a01      	cmp	r2, #1
 800c750:	f300 80a8 	bgt.w	800c8a4 <_dtoa_r+0x89c>
 800c754:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c756:	2a00      	cmp	r2, #0
 800c758:	f000 80a0 	beq.w	800c89c <_dtoa_r+0x894>
 800c75c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c760:	9e06      	ldr	r6, [sp, #24]
 800c762:	4645      	mov	r5, r8
 800c764:	9a04      	ldr	r2, [sp, #16]
 800c766:	2101      	movs	r1, #1
 800c768:	441a      	add	r2, r3
 800c76a:	4620      	mov	r0, r4
 800c76c:	4498      	add	r8, r3
 800c76e:	9204      	str	r2, [sp, #16]
 800c770:	f000 fd6c 	bl	800d24c <__i2b>
 800c774:	4607      	mov	r7, r0
 800c776:	2d00      	cmp	r5, #0
 800c778:	dd0b      	ble.n	800c792 <_dtoa_r+0x78a>
 800c77a:	9b04      	ldr	r3, [sp, #16]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	dd08      	ble.n	800c792 <_dtoa_r+0x78a>
 800c780:	42ab      	cmp	r3, r5
 800c782:	9a04      	ldr	r2, [sp, #16]
 800c784:	bfa8      	it	ge
 800c786:	462b      	movge	r3, r5
 800c788:	eba8 0803 	sub.w	r8, r8, r3
 800c78c:	1aed      	subs	r5, r5, r3
 800c78e:	1ad3      	subs	r3, r2, r3
 800c790:	9304      	str	r3, [sp, #16]
 800c792:	9b06      	ldr	r3, [sp, #24]
 800c794:	b1fb      	cbz	r3, 800c7d6 <_dtoa_r+0x7ce>
 800c796:	9b08      	ldr	r3, [sp, #32]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	f000 809f 	beq.w	800c8dc <_dtoa_r+0x8d4>
 800c79e:	2e00      	cmp	r6, #0
 800c7a0:	dd11      	ble.n	800c7c6 <_dtoa_r+0x7be>
 800c7a2:	4639      	mov	r1, r7
 800c7a4:	4632      	mov	r2, r6
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f000 fe0c 	bl	800d3c4 <__pow5mult>
 800c7ac:	465a      	mov	r2, fp
 800c7ae:	4601      	mov	r1, r0
 800c7b0:	4607      	mov	r7, r0
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f000 fd60 	bl	800d278 <__multiply>
 800c7b8:	4659      	mov	r1, fp
 800c7ba:	9007      	str	r0, [sp, #28]
 800c7bc:	4620      	mov	r0, r4
 800c7be:	f000 fc89 	bl	800d0d4 <_Bfree>
 800c7c2:	9b07      	ldr	r3, [sp, #28]
 800c7c4:	469b      	mov	fp, r3
 800c7c6:	9b06      	ldr	r3, [sp, #24]
 800c7c8:	1b9a      	subs	r2, r3, r6
 800c7ca:	d004      	beq.n	800c7d6 <_dtoa_r+0x7ce>
 800c7cc:	4659      	mov	r1, fp
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	f000 fdf8 	bl	800d3c4 <__pow5mult>
 800c7d4:	4683      	mov	fp, r0
 800c7d6:	2101      	movs	r1, #1
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f000 fd37 	bl	800d24c <__i2b>
 800c7de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	4606      	mov	r6, r0
 800c7e4:	dd7c      	ble.n	800c8e0 <_dtoa_r+0x8d8>
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	4601      	mov	r1, r0
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f000 fdea 	bl	800d3c4 <__pow5mult>
 800c7f0:	9b05      	ldr	r3, [sp, #20]
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	4606      	mov	r6, r0
 800c7f6:	dd76      	ble.n	800c8e6 <_dtoa_r+0x8de>
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	9306      	str	r3, [sp, #24]
 800c7fc:	6933      	ldr	r3, [r6, #16]
 800c7fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c802:	6918      	ldr	r0, [r3, #16]
 800c804:	f000 fcd2 	bl	800d1ac <__hi0bits>
 800c808:	f1c0 0020 	rsb	r0, r0, #32
 800c80c:	9b04      	ldr	r3, [sp, #16]
 800c80e:	4418      	add	r0, r3
 800c810:	f010 001f 	ands.w	r0, r0, #31
 800c814:	f000 8086 	beq.w	800c924 <_dtoa_r+0x91c>
 800c818:	f1c0 0320 	rsb	r3, r0, #32
 800c81c:	2b04      	cmp	r3, #4
 800c81e:	dd7f      	ble.n	800c920 <_dtoa_r+0x918>
 800c820:	f1c0 001c 	rsb	r0, r0, #28
 800c824:	9b04      	ldr	r3, [sp, #16]
 800c826:	4403      	add	r3, r0
 800c828:	4480      	add	r8, r0
 800c82a:	4405      	add	r5, r0
 800c82c:	9304      	str	r3, [sp, #16]
 800c82e:	f1b8 0f00 	cmp.w	r8, #0
 800c832:	dd05      	ble.n	800c840 <_dtoa_r+0x838>
 800c834:	4659      	mov	r1, fp
 800c836:	4642      	mov	r2, r8
 800c838:	4620      	mov	r0, r4
 800c83a:	f000 fe1d 	bl	800d478 <__lshift>
 800c83e:	4683      	mov	fp, r0
 800c840:	9b04      	ldr	r3, [sp, #16]
 800c842:	2b00      	cmp	r3, #0
 800c844:	dd05      	ble.n	800c852 <_dtoa_r+0x84a>
 800c846:	4631      	mov	r1, r6
 800c848:	461a      	mov	r2, r3
 800c84a:	4620      	mov	r0, r4
 800c84c:	f000 fe14 	bl	800d478 <__lshift>
 800c850:	4606      	mov	r6, r0
 800c852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c854:	2b00      	cmp	r3, #0
 800c856:	d069      	beq.n	800c92c <_dtoa_r+0x924>
 800c858:	4631      	mov	r1, r6
 800c85a:	4658      	mov	r0, fp
 800c85c:	f000 fe78 	bl	800d550 <__mcmp>
 800c860:	2800      	cmp	r0, #0
 800c862:	da63      	bge.n	800c92c <_dtoa_r+0x924>
 800c864:	2300      	movs	r3, #0
 800c866:	4659      	mov	r1, fp
 800c868:	220a      	movs	r2, #10
 800c86a:	4620      	mov	r0, r4
 800c86c:	f000 fc54 	bl	800d118 <__multadd>
 800c870:	9b08      	ldr	r3, [sp, #32]
 800c872:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c876:	4683      	mov	fp, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f000 818f 	beq.w	800cb9c <_dtoa_r+0xb94>
 800c87e:	4639      	mov	r1, r7
 800c880:	2300      	movs	r3, #0
 800c882:	220a      	movs	r2, #10
 800c884:	4620      	mov	r0, r4
 800c886:	f000 fc47 	bl	800d118 <__multadd>
 800c88a:	f1b9 0f00 	cmp.w	r9, #0
 800c88e:	4607      	mov	r7, r0
 800c890:	f300 808e 	bgt.w	800c9b0 <_dtoa_r+0x9a8>
 800c894:	9b05      	ldr	r3, [sp, #20]
 800c896:	2b02      	cmp	r3, #2
 800c898:	dc50      	bgt.n	800c93c <_dtoa_r+0x934>
 800c89a:	e089      	b.n	800c9b0 <_dtoa_r+0x9a8>
 800c89c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c89e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c8a2:	e75d      	b.n	800c760 <_dtoa_r+0x758>
 800c8a4:	9b01      	ldr	r3, [sp, #4]
 800c8a6:	1e5e      	subs	r6, r3, #1
 800c8a8:	9b06      	ldr	r3, [sp, #24]
 800c8aa:	42b3      	cmp	r3, r6
 800c8ac:	bfbf      	itttt	lt
 800c8ae:	9b06      	ldrlt	r3, [sp, #24]
 800c8b0:	9606      	strlt	r6, [sp, #24]
 800c8b2:	1af2      	sublt	r2, r6, r3
 800c8b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c8b6:	bfb6      	itet	lt
 800c8b8:	189b      	addlt	r3, r3, r2
 800c8ba:	1b9e      	subge	r6, r3, r6
 800c8bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c8be:	9b01      	ldr	r3, [sp, #4]
 800c8c0:	bfb8      	it	lt
 800c8c2:	2600      	movlt	r6, #0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	bfb5      	itete	lt
 800c8c8:	eba8 0503 	sublt.w	r5, r8, r3
 800c8cc:	9b01      	ldrge	r3, [sp, #4]
 800c8ce:	2300      	movlt	r3, #0
 800c8d0:	4645      	movge	r5, r8
 800c8d2:	e747      	b.n	800c764 <_dtoa_r+0x75c>
 800c8d4:	9e06      	ldr	r6, [sp, #24]
 800c8d6:	9f08      	ldr	r7, [sp, #32]
 800c8d8:	4645      	mov	r5, r8
 800c8da:	e74c      	b.n	800c776 <_dtoa_r+0x76e>
 800c8dc:	9a06      	ldr	r2, [sp, #24]
 800c8de:	e775      	b.n	800c7cc <_dtoa_r+0x7c4>
 800c8e0:	9b05      	ldr	r3, [sp, #20]
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	dc18      	bgt.n	800c918 <_dtoa_r+0x910>
 800c8e6:	9b02      	ldr	r3, [sp, #8]
 800c8e8:	b9b3      	cbnz	r3, 800c918 <_dtoa_r+0x910>
 800c8ea:	9b03      	ldr	r3, [sp, #12]
 800c8ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8f0:	b9a3      	cbnz	r3, 800c91c <_dtoa_r+0x914>
 800c8f2:	9b03      	ldr	r3, [sp, #12]
 800c8f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8f8:	0d1b      	lsrs	r3, r3, #20
 800c8fa:	051b      	lsls	r3, r3, #20
 800c8fc:	b12b      	cbz	r3, 800c90a <_dtoa_r+0x902>
 800c8fe:	9b04      	ldr	r3, [sp, #16]
 800c900:	3301      	adds	r3, #1
 800c902:	9304      	str	r3, [sp, #16]
 800c904:	f108 0801 	add.w	r8, r8, #1
 800c908:	2301      	movs	r3, #1
 800c90a:	9306      	str	r3, [sp, #24]
 800c90c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f47f af74 	bne.w	800c7fc <_dtoa_r+0x7f4>
 800c914:	2001      	movs	r0, #1
 800c916:	e779      	b.n	800c80c <_dtoa_r+0x804>
 800c918:	2300      	movs	r3, #0
 800c91a:	e7f6      	b.n	800c90a <_dtoa_r+0x902>
 800c91c:	9b02      	ldr	r3, [sp, #8]
 800c91e:	e7f4      	b.n	800c90a <_dtoa_r+0x902>
 800c920:	d085      	beq.n	800c82e <_dtoa_r+0x826>
 800c922:	4618      	mov	r0, r3
 800c924:	301c      	adds	r0, #28
 800c926:	e77d      	b.n	800c824 <_dtoa_r+0x81c>
 800c928:	40240000 	.word	0x40240000
 800c92c:	9b01      	ldr	r3, [sp, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	dc38      	bgt.n	800c9a4 <_dtoa_r+0x99c>
 800c932:	9b05      	ldr	r3, [sp, #20]
 800c934:	2b02      	cmp	r3, #2
 800c936:	dd35      	ble.n	800c9a4 <_dtoa_r+0x99c>
 800c938:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c93c:	f1b9 0f00 	cmp.w	r9, #0
 800c940:	d10d      	bne.n	800c95e <_dtoa_r+0x956>
 800c942:	4631      	mov	r1, r6
 800c944:	464b      	mov	r3, r9
 800c946:	2205      	movs	r2, #5
 800c948:	4620      	mov	r0, r4
 800c94a:	f000 fbe5 	bl	800d118 <__multadd>
 800c94e:	4601      	mov	r1, r0
 800c950:	4606      	mov	r6, r0
 800c952:	4658      	mov	r0, fp
 800c954:	f000 fdfc 	bl	800d550 <__mcmp>
 800c958:	2800      	cmp	r0, #0
 800c95a:	f73f adbd 	bgt.w	800c4d8 <_dtoa_r+0x4d0>
 800c95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c960:	9d00      	ldr	r5, [sp, #0]
 800c962:	ea6f 0a03 	mvn.w	sl, r3
 800c966:	f04f 0800 	mov.w	r8, #0
 800c96a:	4631      	mov	r1, r6
 800c96c:	4620      	mov	r0, r4
 800c96e:	f000 fbb1 	bl	800d0d4 <_Bfree>
 800c972:	2f00      	cmp	r7, #0
 800c974:	f43f aeb4 	beq.w	800c6e0 <_dtoa_r+0x6d8>
 800c978:	f1b8 0f00 	cmp.w	r8, #0
 800c97c:	d005      	beq.n	800c98a <_dtoa_r+0x982>
 800c97e:	45b8      	cmp	r8, r7
 800c980:	d003      	beq.n	800c98a <_dtoa_r+0x982>
 800c982:	4641      	mov	r1, r8
 800c984:	4620      	mov	r0, r4
 800c986:	f000 fba5 	bl	800d0d4 <_Bfree>
 800c98a:	4639      	mov	r1, r7
 800c98c:	4620      	mov	r0, r4
 800c98e:	f000 fba1 	bl	800d0d4 <_Bfree>
 800c992:	e6a5      	b.n	800c6e0 <_dtoa_r+0x6d8>
 800c994:	2600      	movs	r6, #0
 800c996:	4637      	mov	r7, r6
 800c998:	e7e1      	b.n	800c95e <_dtoa_r+0x956>
 800c99a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c99c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c9a0:	4637      	mov	r7, r6
 800c9a2:	e599      	b.n	800c4d8 <_dtoa_r+0x4d0>
 800c9a4:	9b08      	ldr	r3, [sp, #32]
 800c9a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	f000 80fd 	beq.w	800cbaa <_dtoa_r+0xba2>
 800c9b0:	2d00      	cmp	r5, #0
 800c9b2:	dd05      	ble.n	800c9c0 <_dtoa_r+0x9b8>
 800c9b4:	4639      	mov	r1, r7
 800c9b6:	462a      	mov	r2, r5
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	f000 fd5d 	bl	800d478 <__lshift>
 800c9be:	4607      	mov	r7, r0
 800c9c0:	9b06      	ldr	r3, [sp, #24]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d05c      	beq.n	800ca80 <_dtoa_r+0xa78>
 800c9c6:	6879      	ldr	r1, [r7, #4]
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	f000 fb43 	bl	800d054 <_Balloc>
 800c9ce:	4605      	mov	r5, r0
 800c9d0:	b928      	cbnz	r0, 800c9de <_dtoa_r+0x9d6>
 800c9d2:	4b80      	ldr	r3, [pc, #512]	; (800cbd4 <_dtoa_r+0xbcc>)
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c9da:	f7ff bb2e 	b.w	800c03a <_dtoa_r+0x32>
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	3202      	adds	r2, #2
 800c9e2:	0092      	lsls	r2, r2, #2
 800c9e4:	f107 010c 	add.w	r1, r7, #12
 800c9e8:	300c      	adds	r0, #12
 800c9ea:	f000 fb25 	bl	800d038 <memcpy>
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	f000 fd40 	bl	800d478 <__lshift>
 800c9f8:	9b00      	ldr	r3, [sp, #0]
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	9301      	str	r3, [sp, #4]
 800c9fe:	9b00      	ldr	r3, [sp, #0]
 800ca00:	444b      	add	r3, r9
 800ca02:	9307      	str	r3, [sp, #28]
 800ca04:	9b02      	ldr	r3, [sp, #8]
 800ca06:	f003 0301 	and.w	r3, r3, #1
 800ca0a:	46b8      	mov	r8, r7
 800ca0c:	9306      	str	r3, [sp, #24]
 800ca0e:	4607      	mov	r7, r0
 800ca10:	9b01      	ldr	r3, [sp, #4]
 800ca12:	4631      	mov	r1, r6
 800ca14:	3b01      	subs	r3, #1
 800ca16:	4658      	mov	r0, fp
 800ca18:	9302      	str	r3, [sp, #8]
 800ca1a:	f7ff fa69 	bl	800bef0 <quorem>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	3330      	adds	r3, #48	; 0x30
 800ca22:	9004      	str	r0, [sp, #16]
 800ca24:	4641      	mov	r1, r8
 800ca26:	4658      	mov	r0, fp
 800ca28:	9308      	str	r3, [sp, #32]
 800ca2a:	f000 fd91 	bl	800d550 <__mcmp>
 800ca2e:	463a      	mov	r2, r7
 800ca30:	4681      	mov	r9, r0
 800ca32:	4631      	mov	r1, r6
 800ca34:	4620      	mov	r0, r4
 800ca36:	f000 fda7 	bl	800d588 <__mdiff>
 800ca3a:	68c2      	ldr	r2, [r0, #12]
 800ca3c:	9b08      	ldr	r3, [sp, #32]
 800ca3e:	4605      	mov	r5, r0
 800ca40:	bb02      	cbnz	r2, 800ca84 <_dtoa_r+0xa7c>
 800ca42:	4601      	mov	r1, r0
 800ca44:	4658      	mov	r0, fp
 800ca46:	f000 fd83 	bl	800d550 <__mcmp>
 800ca4a:	9b08      	ldr	r3, [sp, #32]
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	4629      	mov	r1, r5
 800ca50:	4620      	mov	r0, r4
 800ca52:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ca56:	f000 fb3d 	bl	800d0d4 <_Bfree>
 800ca5a:	9b05      	ldr	r3, [sp, #20]
 800ca5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca5e:	9d01      	ldr	r5, [sp, #4]
 800ca60:	ea43 0102 	orr.w	r1, r3, r2
 800ca64:	9b06      	ldr	r3, [sp, #24]
 800ca66:	430b      	orrs	r3, r1
 800ca68:	9b08      	ldr	r3, [sp, #32]
 800ca6a:	d10d      	bne.n	800ca88 <_dtoa_r+0xa80>
 800ca6c:	2b39      	cmp	r3, #57	; 0x39
 800ca6e:	d029      	beq.n	800cac4 <_dtoa_r+0xabc>
 800ca70:	f1b9 0f00 	cmp.w	r9, #0
 800ca74:	dd01      	ble.n	800ca7a <_dtoa_r+0xa72>
 800ca76:	9b04      	ldr	r3, [sp, #16]
 800ca78:	3331      	adds	r3, #49	; 0x31
 800ca7a:	9a02      	ldr	r2, [sp, #8]
 800ca7c:	7013      	strb	r3, [r2, #0]
 800ca7e:	e774      	b.n	800c96a <_dtoa_r+0x962>
 800ca80:	4638      	mov	r0, r7
 800ca82:	e7b9      	b.n	800c9f8 <_dtoa_r+0x9f0>
 800ca84:	2201      	movs	r2, #1
 800ca86:	e7e2      	b.n	800ca4e <_dtoa_r+0xa46>
 800ca88:	f1b9 0f00 	cmp.w	r9, #0
 800ca8c:	db06      	blt.n	800ca9c <_dtoa_r+0xa94>
 800ca8e:	9905      	ldr	r1, [sp, #20]
 800ca90:	ea41 0909 	orr.w	r9, r1, r9
 800ca94:	9906      	ldr	r1, [sp, #24]
 800ca96:	ea59 0101 	orrs.w	r1, r9, r1
 800ca9a:	d120      	bne.n	800cade <_dtoa_r+0xad6>
 800ca9c:	2a00      	cmp	r2, #0
 800ca9e:	ddec      	ble.n	800ca7a <_dtoa_r+0xa72>
 800caa0:	4659      	mov	r1, fp
 800caa2:	2201      	movs	r2, #1
 800caa4:	4620      	mov	r0, r4
 800caa6:	9301      	str	r3, [sp, #4]
 800caa8:	f000 fce6 	bl	800d478 <__lshift>
 800caac:	4631      	mov	r1, r6
 800caae:	4683      	mov	fp, r0
 800cab0:	f000 fd4e 	bl	800d550 <__mcmp>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	9b01      	ldr	r3, [sp, #4]
 800cab8:	dc02      	bgt.n	800cac0 <_dtoa_r+0xab8>
 800caba:	d1de      	bne.n	800ca7a <_dtoa_r+0xa72>
 800cabc:	07da      	lsls	r2, r3, #31
 800cabe:	d5dc      	bpl.n	800ca7a <_dtoa_r+0xa72>
 800cac0:	2b39      	cmp	r3, #57	; 0x39
 800cac2:	d1d8      	bne.n	800ca76 <_dtoa_r+0xa6e>
 800cac4:	9a02      	ldr	r2, [sp, #8]
 800cac6:	2339      	movs	r3, #57	; 0x39
 800cac8:	7013      	strb	r3, [r2, #0]
 800caca:	462b      	mov	r3, r5
 800cacc:	461d      	mov	r5, r3
 800cace:	3b01      	subs	r3, #1
 800cad0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cad4:	2a39      	cmp	r2, #57	; 0x39
 800cad6:	d050      	beq.n	800cb7a <_dtoa_r+0xb72>
 800cad8:	3201      	adds	r2, #1
 800cada:	701a      	strb	r2, [r3, #0]
 800cadc:	e745      	b.n	800c96a <_dtoa_r+0x962>
 800cade:	2a00      	cmp	r2, #0
 800cae0:	dd03      	ble.n	800caea <_dtoa_r+0xae2>
 800cae2:	2b39      	cmp	r3, #57	; 0x39
 800cae4:	d0ee      	beq.n	800cac4 <_dtoa_r+0xabc>
 800cae6:	3301      	adds	r3, #1
 800cae8:	e7c7      	b.n	800ca7a <_dtoa_r+0xa72>
 800caea:	9a01      	ldr	r2, [sp, #4]
 800caec:	9907      	ldr	r1, [sp, #28]
 800caee:	f802 3c01 	strb.w	r3, [r2, #-1]
 800caf2:	428a      	cmp	r2, r1
 800caf4:	d02a      	beq.n	800cb4c <_dtoa_r+0xb44>
 800caf6:	4659      	mov	r1, fp
 800caf8:	2300      	movs	r3, #0
 800cafa:	220a      	movs	r2, #10
 800cafc:	4620      	mov	r0, r4
 800cafe:	f000 fb0b 	bl	800d118 <__multadd>
 800cb02:	45b8      	cmp	r8, r7
 800cb04:	4683      	mov	fp, r0
 800cb06:	f04f 0300 	mov.w	r3, #0
 800cb0a:	f04f 020a 	mov.w	r2, #10
 800cb0e:	4641      	mov	r1, r8
 800cb10:	4620      	mov	r0, r4
 800cb12:	d107      	bne.n	800cb24 <_dtoa_r+0xb1c>
 800cb14:	f000 fb00 	bl	800d118 <__multadd>
 800cb18:	4680      	mov	r8, r0
 800cb1a:	4607      	mov	r7, r0
 800cb1c:	9b01      	ldr	r3, [sp, #4]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	9301      	str	r3, [sp, #4]
 800cb22:	e775      	b.n	800ca10 <_dtoa_r+0xa08>
 800cb24:	f000 faf8 	bl	800d118 <__multadd>
 800cb28:	4639      	mov	r1, r7
 800cb2a:	4680      	mov	r8, r0
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	220a      	movs	r2, #10
 800cb30:	4620      	mov	r0, r4
 800cb32:	f000 faf1 	bl	800d118 <__multadd>
 800cb36:	4607      	mov	r7, r0
 800cb38:	e7f0      	b.n	800cb1c <_dtoa_r+0xb14>
 800cb3a:	f1b9 0f00 	cmp.w	r9, #0
 800cb3e:	9a00      	ldr	r2, [sp, #0]
 800cb40:	bfcc      	ite	gt
 800cb42:	464d      	movgt	r5, r9
 800cb44:	2501      	movle	r5, #1
 800cb46:	4415      	add	r5, r2
 800cb48:	f04f 0800 	mov.w	r8, #0
 800cb4c:	4659      	mov	r1, fp
 800cb4e:	2201      	movs	r2, #1
 800cb50:	4620      	mov	r0, r4
 800cb52:	9301      	str	r3, [sp, #4]
 800cb54:	f000 fc90 	bl	800d478 <__lshift>
 800cb58:	4631      	mov	r1, r6
 800cb5a:	4683      	mov	fp, r0
 800cb5c:	f000 fcf8 	bl	800d550 <__mcmp>
 800cb60:	2800      	cmp	r0, #0
 800cb62:	dcb2      	bgt.n	800caca <_dtoa_r+0xac2>
 800cb64:	d102      	bne.n	800cb6c <_dtoa_r+0xb64>
 800cb66:	9b01      	ldr	r3, [sp, #4]
 800cb68:	07db      	lsls	r3, r3, #31
 800cb6a:	d4ae      	bmi.n	800caca <_dtoa_r+0xac2>
 800cb6c:	462b      	mov	r3, r5
 800cb6e:	461d      	mov	r5, r3
 800cb70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb74:	2a30      	cmp	r2, #48	; 0x30
 800cb76:	d0fa      	beq.n	800cb6e <_dtoa_r+0xb66>
 800cb78:	e6f7      	b.n	800c96a <_dtoa_r+0x962>
 800cb7a:	9a00      	ldr	r2, [sp, #0]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d1a5      	bne.n	800cacc <_dtoa_r+0xac4>
 800cb80:	f10a 0a01 	add.w	sl, sl, #1
 800cb84:	2331      	movs	r3, #49	; 0x31
 800cb86:	e779      	b.n	800ca7c <_dtoa_r+0xa74>
 800cb88:	4b13      	ldr	r3, [pc, #76]	; (800cbd8 <_dtoa_r+0xbd0>)
 800cb8a:	f7ff baaf 	b.w	800c0ec <_dtoa_r+0xe4>
 800cb8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	f47f aa86 	bne.w	800c0a2 <_dtoa_r+0x9a>
 800cb96:	4b11      	ldr	r3, [pc, #68]	; (800cbdc <_dtoa_r+0xbd4>)
 800cb98:	f7ff baa8 	b.w	800c0ec <_dtoa_r+0xe4>
 800cb9c:	f1b9 0f00 	cmp.w	r9, #0
 800cba0:	dc03      	bgt.n	800cbaa <_dtoa_r+0xba2>
 800cba2:	9b05      	ldr	r3, [sp, #20]
 800cba4:	2b02      	cmp	r3, #2
 800cba6:	f73f aec9 	bgt.w	800c93c <_dtoa_r+0x934>
 800cbaa:	9d00      	ldr	r5, [sp, #0]
 800cbac:	4631      	mov	r1, r6
 800cbae:	4658      	mov	r0, fp
 800cbb0:	f7ff f99e 	bl	800bef0 <quorem>
 800cbb4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cbb8:	f805 3b01 	strb.w	r3, [r5], #1
 800cbbc:	9a00      	ldr	r2, [sp, #0]
 800cbbe:	1aaa      	subs	r2, r5, r2
 800cbc0:	4591      	cmp	r9, r2
 800cbc2:	ddba      	ble.n	800cb3a <_dtoa_r+0xb32>
 800cbc4:	4659      	mov	r1, fp
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	220a      	movs	r2, #10
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f000 faa4 	bl	800d118 <__multadd>
 800cbd0:	4683      	mov	fp, r0
 800cbd2:	e7eb      	b.n	800cbac <_dtoa_r+0xba4>
 800cbd4:	0801c6a3 	.word	0x0801c6a3
 800cbd8:	0801c5fc 	.word	0x0801c5fc
 800cbdc:	0801c620 	.word	0x0801c620

0800cbe0 <__sflush_r>:
 800cbe0:	898a      	ldrh	r2, [r1, #12]
 800cbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe6:	4605      	mov	r5, r0
 800cbe8:	0710      	lsls	r0, r2, #28
 800cbea:	460c      	mov	r4, r1
 800cbec:	d458      	bmi.n	800cca0 <__sflush_r+0xc0>
 800cbee:	684b      	ldr	r3, [r1, #4]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	dc05      	bgt.n	800cc00 <__sflush_r+0x20>
 800cbf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	dc02      	bgt.n	800cc00 <__sflush_r+0x20>
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc02:	2e00      	cmp	r6, #0
 800cc04:	d0f9      	beq.n	800cbfa <__sflush_r+0x1a>
 800cc06:	2300      	movs	r3, #0
 800cc08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc0c:	682f      	ldr	r7, [r5, #0]
 800cc0e:	602b      	str	r3, [r5, #0]
 800cc10:	d032      	beq.n	800cc78 <__sflush_r+0x98>
 800cc12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	075a      	lsls	r2, r3, #29
 800cc18:	d505      	bpl.n	800cc26 <__sflush_r+0x46>
 800cc1a:	6863      	ldr	r3, [r4, #4]
 800cc1c:	1ac0      	subs	r0, r0, r3
 800cc1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc20:	b10b      	cbz	r3, 800cc26 <__sflush_r+0x46>
 800cc22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc24:	1ac0      	subs	r0, r0, r3
 800cc26:	2300      	movs	r3, #0
 800cc28:	4602      	mov	r2, r0
 800cc2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc2c:	6a21      	ldr	r1, [r4, #32]
 800cc2e:	4628      	mov	r0, r5
 800cc30:	47b0      	blx	r6
 800cc32:	1c43      	adds	r3, r0, #1
 800cc34:	89a3      	ldrh	r3, [r4, #12]
 800cc36:	d106      	bne.n	800cc46 <__sflush_r+0x66>
 800cc38:	6829      	ldr	r1, [r5, #0]
 800cc3a:	291d      	cmp	r1, #29
 800cc3c:	d82c      	bhi.n	800cc98 <__sflush_r+0xb8>
 800cc3e:	4a2a      	ldr	r2, [pc, #168]	; (800cce8 <__sflush_r+0x108>)
 800cc40:	40ca      	lsrs	r2, r1
 800cc42:	07d6      	lsls	r6, r2, #31
 800cc44:	d528      	bpl.n	800cc98 <__sflush_r+0xb8>
 800cc46:	2200      	movs	r2, #0
 800cc48:	6062      	str	r2, [r4, #4]
 800cc4a:	04d9      	lsls	r1, r3, #19
 800cc4c:	6922      	ldr	r2, [r4, #16]
 800cc4e:	6022      	str	r2, [r4, #0]
 800cc50:	d504      	bpl.n	800cc5c <__sflush_r+0x7c>
 800cc52:	1c42      	adds	r2, r0, #1
 800cc54:	d101      	bne.n	800cc5a <__sflush_r+0x7a>
 800cc56:	682b      	ldr	r3, [r5, #0]
 800cc58:	b903      	cbnz	r3, 800cc5c <__sflush_r+0x7c>
 800cc5a:	6560      	str	r0, [r4, #84]	; 0x54
 800cc5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc5e:	602f      	str	r7, [r5, #0]
 800cc60:	2900      	cmp	r1, #0
 800cc62:	d0ca      	beq.n	800cbfa <__sflush_r+0x1a>
 800cc64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc68:	4299      	cmp	r1, r3
 800cc6a:	d002      	beq.n	800cc72 <__sflush_r+0x92>
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	f000 fd7f 	bl	800d770 <_free_r>
 800cc72:	2000      	movs	r0, #0
 800cc74:	6360      	str	r0, [r4, #52]	; 0x34
 800cc76:	e7c1      	b.n	800cbfc <__sflush_r+0x1c>
 800cc78:	6a21      	ldr	r1, [r4, #32]
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	47b0      	blx	r6
 800cc80:	1c41      	adds	r1, r0, #1
 800cc82:	d1c7      	bne.n	800cc14 <__sflush_r+0x34>
 800cc84:	682b      	ldr	r3, [r5, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d0c4      	beq.n	800cc14 <__sflush_r+0x34>
 800cc8a:	2b1d      	cmp	r3, #29
 800cc8c:	d001      	beq.n	800cc92 <__sflush_r+0xb2>
 800cc8e:	2b16      	cmp	r3, #22
 800cc90:	d101      	bne.n	800cc96 <__sflush_r+0xb6>
 800cc92:	602f      	str	r7, [r5, #0]
 800cc94:	e7b1      	b.n	800cbfa <__sflush_r+0x1a>
 800cc96:	89a3      	ldrh	r3, [r4, #12]
 800cc98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc9c:	81a3      	strh	r3, [r4, #12]
 800cc9e:	e7ad      	b.n	800cbfc <__sflush_r+0x1c>
 800cca0:	690f      	ldr	r7, [r1, #16]
 800cca2:	2f00      	cmp	r7, #0
 800cca4:	d0a9      	beq.n	800cbfa <__sflush_r+0x1a>
 800cca6:	0793      	lsls	r3, r2, #30
 800cca8:	680e      	ldr	r6, [r1, #0]
 800ccaa:	bf08      	it	eq
 800ccac:	694b      	ldreq	r3, [r1, #20]
 800ccae:	600f      	str	r7, [r1, #0]
 800ccb0:	bf18      	it	ne
 800ccb2:	2300      	movne	r3, #0
 800ccb4:	eba6 0807 	sub.w	r8, r6, r7
 800ccb8:	608b      	str	r3, [r1, #8]
 800ccba:	f1b8 0f00 	cmp.w	r8, #0
 800ccbe:	dd9c      	ble.n	800cbfa <__sflush_r+0x1a>
 800ccc0:	6a21      	ldr	r1, [r4, #32]
 800ccc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccc4:	4643      	mov	r3, r8
 800ccc6:	463a      	mov	r2, r7
 800ccc8:	4628      	mov	r0, r5
 800ccca:	47b0      	blx	r6
 800cccc:	2800      	cmp	r0, #0
 800ccce:	dc06      	bgt.n	800ccde <__sflush_r+0xfe>
 800ccd0:	89a3      	ldrh	r3, [r4, #12]
 800ccd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccd6:	81a3      	strh	r3, [r4, #12]
 800ccd8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccdc:	e78e      	b.n	800cbfc <__sflush_r+0x1c>
 800ccde:	4407      	add	r7, r0
 800cce0:	eba8 0800 	sub.w	r8, r8, r0
 800cce4:	e7e9      	b.n	800ccba <__sflush_r+0xda>
 800cce6:	bf00      	nop
 800cce8:	20400001 	.word	0x20400001

0800ccec <_fflush_r>:
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	690b      	ldr	r3, [r1, #16]
 800ccf0:	4605      	mov	r5, r0
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	b913      	cbnz	r3, 800ccfc <_fflush_r+0x10>
 800ccf6:	2500      	movs	r5, #0
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	bd38      	pop	{r3, r4, r5, pc}
 800ccfc:	b118      	cbz	r0, 800cd06 <_fflush_r+0x1a>
 800ccfe:	6983      	ldr	r3, [r0, #24]
 800cd00:	b90b      	cbnz	r3, 800cd06 <_fflush_r+0x1a>
 800cd02:	f000 f887 	bl	800ce14 <__sinit>
 800cd06:	4b14      	ldr	r3, [pc, #80]	; (800cd58 <_fflush_r+0x6c>)
 800cd08:	429c      	cmp	r4, r3
 800cd0a:	d11b      	bne.n	800cd44 <_fflush_r+0x58>
 800cd0c:	686c      	ldr	r4, [r5, #4]
 800cd0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d0ef      	beq.n	800ccf6 <_fflush_r+0xa>
 800cd16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd18:	07d0      	lsls	r0, r2, #31
 800cd1a:	d404      	bmi.n	800cd26 <_fflush_r+0x3a>
 800cd1c:	0599      	lsls	r1, r3, #22
 800cd1e:	d402      	bmi.n	800cd26 <_fflush_r+0x3a>
 800cd20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd22:	f000 f91a 	bl	800cf5a <__retarget_lock_acquire_recursive>
 800cd26:	4628      	mov	r0, r5
 800cd28:	4621      	mov	r1, r4
 800cd2a:	f7ff ff59 	bl	800cbe0 <__sflush_r>
 800cd2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd30:	07da      	lsls	r2, r3, #31
 800cd32:	4605      	mov	r5, r0
 800cd34:	d4e0      	bmi.n	800ccf8 <_fflush_r+0xc>
 800cd36:	89a3      	ldrh	r3, [r4, #12]
 800cd38:	059b      	lsls	r3, r3, #22
 800cd3a:	d4dd      	bmi.n	800ccf8 <_fflush_r+0xc>
 800cd3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd3e:	f000 f90d 	bl	800cf5c <__retarget_lock_release_recursive>
 800cd42:	e7d9      	b.n	800ccf8 <_fflush_r+0xc>
 800cd44:	4b05      	ldr	r3, [pc, #20]	; (800cd5c <_fflush_r+0x70>)
 800cd46:	429c      	cmp	r4, r3
 800cd48:	d101      	bne.n	800cd4e <_fflush_r+0x62>
 800cd4a:	68ac      	ldr	r4, [r5, #8]
 800cd4c:	e7df      	b.n	800cd0e <_fflush_r+0x22>
 800cd4e:	4b04      	ldr	r3, [pc, #16]	; (800cd60 <_fflush_r+0x74>)
 800cd50:	429c      	cmp	r4, r3
 800cd52:	bf08      	it	eq
 800cd54:	68ec      	ldreq	r4, [r5, #12]
 800cd56:	e7da      	b.n	800cd0e <_fflush_r+0x22>
 800cd58:	0801c6d4 	.word	0x0801c6d4
 800cd5c:	0801c6f4 	.word	0x0801c6f4
 800cd60:	0801c6b4 	.word	0x0801c6b4

0800cd64 <std>:
 800cd64:	2300      	movs	r3, #0
 800cd66:	b510      	push	{r4, lr}
 800cd68:	4604      	mov	r4, r0
 800cd6a:	e9c0 3300 	strd	r3, r3, [r0]
 800cd6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd72:	6083      	str	r3, [r0, #8]
 800cd74:	8181      	strh	r1, [r0, #12]
 800cd76:	6643      	str	r3, [r0, #100]	; 0x64
 800cd78:	81c2      	strh	r2, [r0, #14]
 800cd7a:	6183      	str	r3, [r0, #24]
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	2208      	movs	r2, #8
 800cd80:	305c      	adds	r0, #92	; 0x5c
 800cd82:	f7fe fad5 	bl	800b330 <memset>
 800cd86:	4b05      	ldr	r3, [pc, #20]	; (800cd9c <std+0x38>)
 800cd88:	6263      	str	r3, [r4, #36]	; 0x24
 800cd8a:	4b05      	ldr	r3, [pc, #20]	; (800cda0 <std+0x3c>)
 800cd8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd8e:	4b05      	ldr	r3, [pc, #20]	; (800cda4 <std+0x40>)
 800cd90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd92:	4b05      	ldr	r3, [pc, #20]	; (800cda8 <std+0x44>)
 800cd94:	6224      	str	r4, [r4, #32]
 800cd96:	6323      	str	r3, [r4, #48]	; 0x30
 800cd98:	bd10      	pop	{r4, pc}
 800cd9a:	bf00      	nop
 800cd9c:	0800de51 	.word	0x0800de51
 800cda0:	0800de73 	.word	0x0800de73
 800cda4:	0800deab 	.word	0x0800deab
 800cda8:	0800decf 	.word	0x0800decf

0800cdac <_cleanup_r>:
 800cdac:	4901      	ldr	r1, [pc, #4]	; (800cdb4 <_cleanup_r+0x8>)
 800cdae:	f000 b8af 	b.w	800cf10 <_fwalk_reent>
 800cdb2:	bf00      	nop
 800cdb4:	0800cced 	.word	0x0800cced

0800cdb8 <__sfmoreglue>:
 800cdb8:	b570      	push	{r4, r5, r6, lr}
 800cdba:	1e4a      	subs	r2, r1, #1
 800cdbc:	2568      	movs	r5, #104	; 0x68
 800cdbe:	4355      	muls	r5, r2
 800cdc0:	460e      	mov	r6, r1
 800cdc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cdc6:	f000 fd23 	bl	800d810 <_malloc_r>
 800cdca:	4604      	mov	r4, r0
 800cdcc:	b140      	cbz	r0, 800cde0 <__sfmoreglue+0x28>
 800cdce:	2100      	movs	r1, #0
 800cdd0:	e9c0 1600 	strd	r1, r6, [r0]
 800cdd4:	300c      	adds	r0, #12
 800cdd6:	60a0      	str	r0, [r4, #8]
 800cdd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cddc:	f7fe faa8 	bl	800b330 <memset>
 800cde0:	4620      	mov	r0, r4
 800cde2:	bd70      	pop	{r4, r5, r6, pc}

0800cde4 <__sfp_lock_acquire>:
 800cde4:	4801      	ldr	r0, [pc, #4]	; (800cdec <__sfp_lock_acquire+0x8>)
 800cde6:	f000 b8b8 	b.w	800cf5a <__retarget_lock_acquire_recursive>
 800cdea:	bf00      	nop
 800cdec:	200005ec 	.word	0x200005ec

0800cdf0 <__sfp_lock_release>:
 800cdf0:	4801      	ldr	r0, [pc, #4]	; (800cdf8 <__sfp_lock_release+0x8>)
 800cdf2:	f000 b8b3 	b.w	800cf5c <__retarget_lock_release_recursive>
 800cdf6:	bf00      	nop
 800cdf8:	200005ec 	.word	0x200005ec

0800cdfc <__sinit_lock_acquire>:
 800cdfc:	4801      	ldr	r0, [pc, #4]	; (800ce04 <__sinit_lock_acquire+0x8>)
 800cdfe:	f000 b8ac 	b.w	800cf5a <__retarget_lock_acquire_recursive>
 800ce02:	bf00      	nop
 800ce04:	200005e7 	.word	0x200005e7

0800ce08 <__sinit_lock_release>:
 800ce08:	4801      	ldr	r0, [pc, #4]	; (800ce10 <__sinit_lock_release+0x8>)
 800ce0a:	f000 b8a7 	b.w	800cf5c <__retarget_lock_release_recursive>
 800ce0e:	bf00      	nop
 800ce10:	200005e7 	.word	0x200005e7

0800ce14 <__sinit>:
 800ce14:	b510      	push	{r4, lr}
 800ce16:	4604      	mov	r4, r0
 800ce18:	f7ff fff0 	bl	800cdfc <__sinit_lock_acquire>
 800ce1c:	69a3      	ldr	r3, [r4, #24]
 800ce1e:	b11b      	cbz	r3, 800ce28 <__sinit+0x14>
 800ce20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce24:	f7ff bff0 	b.w	800ce08 <__sinit_lock_release>
 800ce28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce2c:	6523      	str	r3, [r4, #80]	; 0x50
 800ce2e:	4b13      	ldr	r3, [pc, #76]	; (800ce7c <__sinit+0x68>)
 800ce30:	4a13      	ldr	r2, [pc, #76]	; (800ce80 <__sinit+0x6c>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce36:	42a3      	cmp	r3, r4
 800ce38:	bf04      	itt	eq
 800ce3a:	2301      	moveq	r3, #1
 800ce3c:	61a3      	streq	r3, [r4, #24]
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f000 f820 	bl	800ce84 <__sfp>
 800ce44:	6060      	str	r0, [r4, #4]
 800ce46:	4620      	mov	r0, r4
 800ce48:	f000 f81c 	bl	800ce84 <__sfp>
 800ce4c:	60a0      	str	r0, [r4, #8]
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f000 f818 	bl	800ce84 <__sfp>
 800ce54:	2200      	movs	r2, #0
 800ce56:	60e0      	str	r0, [r4, #12]
 800ce58:	2104      	movs	r1, #4
 800ce5a:	6860      	ldr	r0, [r4, #4]
 800ce5c:	f7ff ff82 	bl	800cd64 <std>
 800ce60:	68a0      	ldr	r0, [r4, #8]
 800ce62:	2201      	movs	r2, #1
 800ce64:	2109      	movs	r1, #9
 800ce66:	f7ff ff7d 	bl	800cd64 <std>
 800ce6a:	68e0      	ldr	r0, [r4, #12]
 800ce6c:	2202      	movs	r2, #2
 800ce6e:	2112      	movs	r1, #18
 800ce70:	f7ff ff78 	bl	800cd64 <std>
 800ce74:	2301      	movs	r3, #1
 800ce76:	61a3      	str	r3, [r4, #24]
 800ce78:	e7d2      	b.n	800ce20 <__sinit+0xc>
 800ce7a:	bf00      	nop
 800ce7c:	0801c5e8 	.word	0x0801c5e8
 800ce80:	0800cdad 	.word	0x0800cdad

0800ce84 <__sfp>:
 800ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce86:	4607      	mov	r7, r0
 800ce88:	f7ff ffac 	bl	800cde4 <__sfp_lock_acquire>
 800ce8c:	4b1e      	ldr	r3, [pc, #120]	; (800cf08 <__sfp+0x84>)
 800ce8e:	681e      	ldr	r6, [r3, #0]
 800ce90:	69b3      	ldr	r3, [r6, #24]
 800ce92:	b913      	cbnz	r3, 800ce9a <__sfp+0x16>
 800ce94:	4630      	mov	r0, r6
 800ce96:	f7ff ffbd 	bl	800ce14 <__sinit>
 800ce9a:	3648      	adds	r6, #72	; 0x48
 800ce9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cea0:	3b01      	subs	r3, #1
 800cea2:	d503      	bpl.n	800ceac <__sfp+0x28>
 800cea4:	6833      	ldr	r3, [r6, #0]
 800cea6:	b30b      	cbz	r3, 800ceec <__sfp+0x68>
 800cea8:	6836      	ldr	r6, [r6, #0]
 800ceaa:	e7f7      	b.n	800ce9c <__sfp+0x18>
 800ceac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ceb0:	b9d5      	cbnz	r5, 800cee8 <__sfp+0x64>
 800ceb2:	4b16      	ldr	r3, [pc, #88]	; (800cf0c <__sfp+0x88>)
 800ceb4:	60e3      	str	r3, [r4, #12]
 800ceb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ceba:	6665      	str	r5, [r4, #100]	; 0x64
 800cebc:	f000 f84c 	bl	800cf58 <__retarget_lock_init_recursive>
 800cec0:	f7ff ff96 	bl	800cdf0 <__sfp_lock_release>
 800cec4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cec8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cecc:	6025      	str	r5, [r4, #0]
 800cece:	61a5      	str	r5, [r4, #24]
 800ced0:	2208      	movs	r2, #8
 800ced2:	4629      	mov	r1, r5
 800ced4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ced8:	f7fe fa2a 	bl	800b330 <memset>
 800cedc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cee0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cee4:	4620      	mov	r0, r4
 800cee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cee8:	3468      	adds	r4, #104	; 0x68
 800ceea:	e7d9      	b.n	800cea0 <__sfp+0x1c>
 800ceec:	2104      	movs	r1, #4
 800ceee:	4638      	mov	r0, r7
 800cef0:	f7ff ff62 	bl	800cdb8 <__sfmoreglue>
 800cef4:	4604      	mov	r4, r0
 800cef6:	6030      	str	r0, [r6, #0]
 800cef8:	2800      	cmp	r0, #0
 800cefa:	d1d5      	bne.n	800cea8 <__sfp+0x24>
 800cefc:	f7ff ff78 	bl	800cdf0 <__sfp_lock_release>
 800cf00:	230c      	movs	r3, #12
 800cf02:	603b      	str	r3, [r7, #0]
 800cf04:	e7ee      	b.n	800cee4 <__sfp+0x60>
 800cf06:	bf00      	nop
 800cf08:	0801c5e8 	.word	0x0801c5e8
 800cf0c:	ffff0001 	.word	0xffff0001

0800cf10 <_fwalk_reent>:
 800cf10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf14:	4606      	mov	r6, r0
 800cf16:	4688      	mov	r8, r1
 800cf18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf1c:	2700      	movs	r7, #0
 800cf1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf22:	f1b9 0901 	subs.w	r9, r9, #1
 800cf26:	d505      	bpl.n	800cf34 <_fwalk_reent+0x24>
 800cf28:	6824      	ldr	r4, [r4, #0]
 800cf2a:	2c00      	cmp	r4, #0
 800cf2c:	d1f7      	bne.n	800cf1e <_fwalk_reent+0xe>
 800cf2e:	4638      	mov	r0, r7
 800cf30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf34:	89ab      	ldrh	r3, [r5, #12]
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	d907      	bls.n	800cf4a <_fwalk_reent+0x3a>
 800cf3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	d003      	beq.n	800cf4a <_fwalk_reent+0x3a>
 800cf42:	4629      	mov	r1, r5
 800cf44:	4630      	mov	r0, r6
 800cf46:	47c0      	blx	r8
 800cf48:	4307      	orrs	r7, r0
 800cf4a:	3568      	adds	r5, #104	; 0x68
 800cf4c:	e7e9      	b.n	800cf22 <_fwalk_reent+0x12>
	...

0800cf50 <_localeconv_r>:
 800cf50:	4800      	ldr	r0, [pc, #0]	; (800cf54 <_localeconv_r+0x4>)
 800cf52:	4770      	bx	lr
 800cf54:	20000168 	.word	0x20000168

0800cf58 <__retarget_lock_init_recursive>:
 800cf58:	4770      	bx	lr

0800cf5a <__retarget_lock_acquire_recursive>:
 800cf5a:	4770      	bx	lr

0800cf5c <__retarget_lock_release_recursive>:
 800cf5c:	4770      	bx	lr

0800cf5e <__swhatbuf_r>:
 800cf5e:	b570      	push	{r4, r5, r6, lr}
 800cf60:	460e      	mov	r6, r1
 800cf62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf66:	2900      	cmp	r1, #0
 800cf68:	b096      	sub	sp, #88	; 0x58
 800cf6a:	4614      	mov	r4, r2
 800cf6c:	461d      	mov	r5, r3
 800cf6e:	da07      	bge.n	800cf80 <__swhatbuf_r+0x22>
 800cf70:	2300      	movs	r3, #0
 800cf72:	602b      	str	r3, [r5, #0]
 800cf74:	89b3      	ldrh	r3, [r6, #12]
 800cf76:	061a      	lsls	r2, r3, #24
 800cf78:	d410      	bmi.n	800cf9c <__swhatbuf_r+0x3e>
 800cf7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf7e:	e00e      	b.n	800cf9e <__swhatbuf_r+0x40>
 800cf80:	466a      	mov	r2, sp
 800cf82:	f000 fffb 	bl	800df7c <_fstat_r>
 800cf86:	2800      	cmp	r0, #0
 800cf88:	dbf2      	blt.n	800cf70 <__swhatbuf_r+0x12>
 800cf8a:	9a01      	ldr	r2, [sp, #4]
 800cf8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cf90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cf94:	425a      	negs	r2, r3
 800cf96:	415a      	adcs	r2, r3
 800cf98:	602a      	str	r2, [r5, #0]
 800cf9a:	e7ee      	b.n	800cf7a <__swhatbuf_r+0x1c>
 800cf9c:	2340      	movs	r3, #64	; 0x40
 800cf9e:	2000      	movs	r0, #0
 800cfa0:	6023      	str	r3, [r4, #0]
 800cfa2:	b016      	add	sp, #88	; 0x58
 800cfa4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cfa8 <__smakebuf_r>:
 800cfa8:	898b      	ldrh	r3, [r1, #12]
 800cfaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfac:	079d      	lsls	r5, r3, #30
 800cfae:	4606      	mov	r6, r0
 800cfb0:	460c      	mov	r4, r1
 800cfb2:	d507      	bpl.n	800cfc4 <__smakebuf_r+0x1c>
 800cfb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cfb8:	6023      	str	r3, [r4, #0]
 800cfba:	6123      	str	r3, [r4, #16]
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	6163      	str	r3, [r4, #20]
 800cfc0:	b002      	add	sp, #8
 800cfc2:	bd70      	pop	{r4, r5, r6, pc}
 800cfc4:	ab01      	add	r3, sp, #4
 800cfc6:	466a      	mov	r2, sp
 800cfc8:	f7ff ffc9 	bl	800cf5e <__swhatbuf_r>
 800cfcc:	9900      	ldr	r1, [sp, #0]
 800cfce:	4605      	mov	r5, r0
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	f000 fc1d 	bl	800d810 <_malloc_r>
 800cfd6:	b948      	cbnz	r0, 800cfec <__smakebuf_r+0x44>
 800cfd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfdc:	059a      	lsls	r2, r3, #22
 800cfde:	d4ef      	bmi.n	800cfc0 <__smakebuf_r+0x18>
 800cfe0:	f023 0303 	bic.w	r3, r3, #3
 800cfe4:	f043 0302 	orr.w	r3, r3, #2
 800cfe8:	81a3      	strh	r3, [r4, #12]
 800cfea:	e7e3      	b.n	800cfb4 <__smakebuf_r+0xc>
 800cfec:	4b0d      	ldr	r3, [pc, #52]	; (800d024 <__smakebuf_r+0x7c>)
 800cfee:	62b3      	str	r3, [r6, #40]	; 0x28
 800cff0:	89a3      	ldrh	r3, [r4, #12]
 800cff2:	6020      	str	r0, [r4, #0]
 800cff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cff8:	81a3      	strh	r3, [r4, #12]
 800cffa:	9b00      	ldr	r3, [sp, #0]
 800cffc:	6163      	str	r3, [r4, #20]
 800cffe:	9b01      	ldr	r3, [sp, #4]
 800d000:	6120      	str	r0, [r4, #16]
 800d002:	b15b      	cbz	r3, 800d01c <__smakebuf_r+0x74>
 800d004:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d008:	4630      	mov	r0, r6
 800d00a:	f000 ffc9 	bl	800dfa0 <_isatty_r>
 800d00e:	b128      	cbz	r0, 800d01c <__smakebuf_r+0x74>
 800d010:	89a3      	ldrh	r3, [r4, #12]
 800d012:	f023 0303 	bic.w	r3, r3, #3
 800d016:	f043 0301 	orr.w	r3, r3, #1
 800d01a:	81a3      	strh	r3, [r4, #12]
 800d01c:	89a0      	ldrh	r0, [r4, #12]
 800d01e:	4305      	orrs	r5, r0
 800d020:	81a5      	strh	r5, [r4, #12]
 800d022:	e7cd      	b.n	800cfc0 <__smakebuf_r+0x18>
 800d024:	0800cdad 	.word	0x0800cdad

0800d028 <malloc>:
 800d028:	4b02      	ldr	r3, [pc, #8]	; (800d034 <malloc+0xc>)
 800d02a:	4601      	mov	r1, r0
 800d02c:	6818      	ldr	r0, [r3, #0]
 800d02e:	f000 bbef 	b.w	800d810 <_malloc_r>
 800d032:	bf00      	nop
 800d034:	20000014 	.word	0x20000014

0800d038 <memcpy>:
 800d038:	440a      	add	r2, r1
 800d03a:	4291      	cmp	r1, r2
 800d03c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d040:	d100      	bne.n	800d044 <memcpy+0xc>
 800d042:	4770      	bx	lr
 800d044:	b510      	push	{r4, lr}
 800d046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d04a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d04e:	4291      	cmp	r1, r2
 800d050:	d1f9      	bne.n	800d046 <memcpy+0xe>
 800d052:	bd10      	pop	{r4, pc}

0800d054 <_Balloc>:
 800d054:	b570      	push	{r4, r5, r6, lr}
 800d056:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d058:	4604      	mov	r4, r0
 800d05a:	460d      	mov	r5, r1
 800d05c:	b976      	cbnz	r6, 800d07c <_Balloc+0x28>
 800d05e:	2010      	movs	r0, #16
 800d060:	f7ff ffe2 	bl	800d028 <malloc>
 800d064:	4602      	mov	r2, r0
 800d066:	6260      	str	r0, [r4, #36]	; 0x24
 800d068:	b920      	cbnz	r0, 800d074 <_Balloc+0x20>
 800d06a:	4b18      	ldr	r3, [pc, #96]	; (800d0cc <_Balloc+0x78>)
 800d06c:	4818      	ldr	r0, [pc, #96]	; (800d0d0 <_Balloc+0x7c>)
 800d06e:	2166      	movs	r1, #102	; 0x66
 800d070:	f000 ff44 	bl	800defc <__assert_func>
 800d074:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d078:	6006      	str	r6, [r0, #0]
 800d07a:	60c6      	str	r6, [r0, #12]
 800d07c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d07e:	68f3      	ldr	r3, [r6, #12]
 800d080:	b183      	cbz	r3, 800d0a4 <_Balloc+0x50>
 800d082:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d084:	68db      	ldr	r3, [r3, #12]
 800d086:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d08a:	b9b8      	cbnz	r0, 800d0bc <_Balloc+0x68>
 800d08c:	2101      	movs	r1, #1
 800d08e:	fa01 f605 	lsl.w	r6, r1, r5
 800d092:	1d72      	adds	r2, r6, #5
 800d094:	0092      	lsls	r2, r2, #2
 800d096:	4620      	mov	r0, r4
 800d098:	f000 fb5a 	bl	800d750 <_calloc_r>
 800d09c:	b160      	cbz	r0, 800d0b8 <_Balloc+0x64>
 800d09e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d0a2:	e00e      	b.n	800d0c2 <_Balloc+0x6e>
 800d0a4:	2221      	movs	r2, #33	; 0x21
 800d0a6:	2104      	movs	r1, #4
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f000 fb51 	bl	800d750 <_calloc_r>
 800d0ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0b0:	60f0      	str	r0, [r6, #12]
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1e4      	bne.n	800d082 <_Balloc+0x2e>
 800d0b8:	2000      	movs	r0, #0
 800d0ba:	bd70      	pop	{r4, r5, r6, pc}
 800d0bc:	6802      	ldr	r2, [r0, #0]
 800d0be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d0c8:	e7f7      	b.n	800d0ba <_Balloc+0x66>
 800d0ca:	bf00      	nop
 800d0cc:	0801c62d 	.word	0x0801c62d
 800d0d0:	0801c714 	.word	0x0801c714

0800d0d4 <_Bfree>:
 800d0d4:	b570      	push	{r4, r5, r6, lr}
 800d0d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d0d8:	4605      	mov	r5, r0
 800d0da:	460c      	mov	r4, r1
 800d0dc:	b976      	cbnz	r6, 800d0fc <_Bfree+0x28>
 800d0de:	2010      	movs	r0, #16
 800d0e0:	f7ff ffa2 	bl	800d028 <malloc>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	6268      	str	r0, [r5, #36]	; 0x24
 800d0e8:	b920      	cbnz	r0, 800d0f4 <_Bfree+0x20>
 800d0ea:	4b09      	ldr	r3, [pc, #36]	; (800d110 <_Bfree+0x3c>)
 800d0ec:	4809      	ldr	r0, [pc, #36]	; (800d114 <_Bfree+0x40>)
 800d0ee:	218a      	movs	r1, #138	; 0x8a
 800d0f0:	f000 ff04 	bl	800defc <__assert_func>
 800d0f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0f8:	6006      	str	r6, [r0, #0]
 800d0fa:	60c6      	str	r6, [r0, #12]
 800d0fc:	b13c      	cbz	r4, 800d10e <_Bfree+0x3a>
 800d0fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d100:	6862      	ldr	r2, [r4, #4]
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d108:	6021      	str	r1, [r4, #0]
 800d10a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d10e:	bd70      	pop	{r4, r5, r6, pc}
 800d110:	0801c62d 	.word	0x0801c62d
 800d114:	0801c714 	.word	0x0801c714

0800d118 <__multadd>:
 800d118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d11c:	690e      	ldr	r6, [r1, #16]
 800d11e:	4607      	mov	r7, r0
 800d120:	4698      	mov	r8, r3
 800d122:	460c      	mov	r4, r1
 800d124:	f101 0014 	add.w	r0, r1, #20
 800d128:	2300      	movs	r3, #0
 800d12a:	6805      	ldr	r5, [r0, #0]
 800d12c:	b2a9      	uxth	r1, r5
 800d12e:	fb02 8101 	mla	r1, r2, r1, r8
 800d132:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d136:	0c2d      	lsrs	r5, r5, #16
 800d138:	fb02 c505 	mla	r5, r2, r5, ip
 800d13c:	b289      	uxth	r1, r1
 800d13e:	3301      	adds	r3, #1
 800d140:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d144:	429e      	cmp	r6, r3
 800d146:	f840 1b04 	str.w	r1, [r0], #4
 800d14a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d14e:	dcec      	bgt.n	800d12a <__multadd+0x12>
 800d150:	f1b8 0f00 	cmp.w	r8, #0
 800d154:	d022      	beq.n	800d19c <__multadd+0x84>
 800d156:	68a3      	ldr	r3, [r4, #8]
 800d158:	42b3      	cmp	r3, r6
 800d15a:	dc19      	bgt.n	800d190 <__multadd+0x78>
 800d15c:	6861      	ldr	r1, [r4, #4]
 800d15e:	4638      	mov	r0, r7
 800d160:	3101      	adds	r1, #1
 800d162:	f7ff ff77 	bl	800d054 <_Balloc>
 800d166:	4605      	mov	r5, r0
 800d168:	b928      	cbnz	r0, 800d176 <__multadd+0x5e>
 800d16a:	4602      	mov	r2, r0
 800d16c:	4b0d      	ldr	r3, [pc, #52]	; (800d1a4 <__multadd+0x8c>)
 800d16e:	480e      	ldr	r0, [pc, #56]	; (800d1a8 <__multadd+0x90>)
 800d170:	21b5      	movs	r1, #181	; 0xb5
 800d172:	f000 fec3 	bl	800defc <__assert_func>
 800d176:	6922      	ldr	r2, [r4, #16]
 800d178:	3202      	adds	r2, #2
 800d17a:	f104 010c 	add.w	r1, r4, #12
 800d17e:	0092      	lsls	r2, r2, #2
 800d180:	300c      	adds	r0, #12
 800d182:	f7ff ff59 	bl	800d038 <memcpy>
 800d186:	4621      	mov	r1, r4
 800d188:	4638      	mov	r0, r7
 800d18a:	f7ff ffa3 	bl	800d0d4 <_Bfree>
 800d18e:	462c      	mov	r4, r5
 800d190:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d194:	3601      	adds	r6, #1
 800d196:	f8c3 8014 	str.w	r8, [r3, #20]
 800d19a:	6126      	str	r6, [r4, #16]
 800d19c:	4620      	mov	r0, r4
 800d19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1a2:	bf00      	nop
 800d1a4:	0801c6a3 	.word	0x0801c6a3
 800d1a8:	0801c714 	.word	0x0801c714

0800d1ac <__hi0bits>:
 800d1ac:	0c03      	lsrs	r3, r0, #16
 800d1ae:	041b      	lsls	r3, r3, #16
 800d1b0:	b9d3      	cbnz	r3, 800d1e8 <__hi0bits+0x3c>
 800d1b2:	0400      	lsls	r0, r0, #16
 800d1b4:	2310      	movs	r3, #16
 800d1b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d1ba:	bf04      	itt	eq
 800d1bc:	0200      	lsleq	r0, r0, #8
 800d1be:	3308      	addeq	r3, #8
 800d1c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d1c4:	bf04      	itt	eq
 800d1c6:	0100      	lsleq	r0, r0, #4
 800d1c8:	3304      	addeq	r3, #4
 800d1ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d1ce:	bf04      	itt	eq
 800d1d0:	0080      	lsleq	r0, r0, #2
 800d1d2:	3302      	addeq	r3, #2
 800d1d4:	2800      	cmp	r0, #0
 800d1d6:	db05      	blt.n	800d1e4 <__hi0bits+0x38>
 800d1d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d1dc:	f103 0301 	add.w	r3, r3, #1
 800d1e0:	bf08      	it	eq
 800d1e2:	2320      	moveq	r3, #32
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	4770      	bx	lr
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	e7e4      	b.n	800d1b6 <__hi0bits+0xa>

0800d1ec <__lo0bits>:
 800d1ec:	6803      	ldr	r3, [r0, #0]
 800d1ee:	f013 0207 	ands.w	r2, r3, #7
 800d1f2:	4601      	mov	r1, r0
 800d1f4:	d00b      	beq.n	800d20e <__lo0bits+0x22>
 800d1f6:	07da      	lsls	r2, r3, #31
 800d1f8:	d424      	bmi.n	800d244 <__lo0bits+0x58>
 800d1fa:	0798      	lsls	r0, r3, #30
 800d1fc:	bf49      	itett	mi
 800d1fe:	085b      	lsrmi	r3, r3, #1
 800d200:	089b      	lsrpl	r3, r3, #2
 800d202:	2001      	movmi	r0, #1
 800d204:	600b      	strmi	r3, [r1, #0]
 800d206:	bf5c      	itt	pl
 800d208:	600b      	strpl	r3, [r1, #0]
 800d20a:	2002      	movpl	r0, #2
 800d20c:	4770      	bx	lr
 800d20e:	b298      	uxth	r0, r3
 800d210:	b9b0      	cbnz	r0, 800d240 <__lo0bits+0x54>
 800d212:	0c1b      	lsrs	r3, r3, #16
 800d214:	2010      	movs	r0, #16
 800d216:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d21a:	bf04      	itt	eq
 800d21c:	0a1b      	lsreq	r3, r3, #8
 800d21e:	3008      	addeq	r0, #8
 800d220:	071a      	lsls	r2, r3, #28
 800d222:	bf04      	itt	eq
 800d224:	091b      	lsreq	r3, r3, #4
 800d226:	3004      	addeq	r0, #4
 800d228:	079a      	lsls	r2, r3, #30
 800d22a:	bf04      	itt	eq
 800d22c:	089b      	lsreq	r3, r3, #2
 800d22e:	3002      	addeq	r0, #2
 800d230:	07da      	lsls	r2, r3, #31
 800d232:	d403      	bmi.n	800d23c <__lo0bits+0x50>
 800d234:	085b      	lsrs	r3, r3, #1
 800d236:	f100 0001 	add.w	r0, r0, #1
 800d23a:	d005      	beq.n	800d248 <__lo0bits+0x5c>
 800d23c:	600b      	str	r3, [r1, #0]
 800d23e:	4770      	bx	lr
 800d240:	4610      	mov	r0, r2
 800d242:	e7e8      	b.n	800d216 <__lo0bits+0x2a>
 800d244:	2000      	movs	r0, #0
 800d246:	4770      	bx	lr
 800d248:	2020      	movs	r0, #32
 800d24a:	4770      	bx	lr

0800d24c <__i2b>:
 800d24c:	b510      	push	{r4, lr}
 800d24e:	460c      	mov	r4, r1
 800d250:	2101      	movs	r1, #1
 800d252:	f7ff feff 	bl	800d054 <_Balloc>
 800d256:	4602      	mov	r2, r0
 800d258:	b928      	cbnz	r0, 800d266 <__i2b+0x1a>
 800d25a:	4b05      	ldr	r3, [pc, #20]	; (800d270 <__i2b+0x24>)
 800d25c:	4805      	ldr	r0, [pc, #20]	; (800d274 <__i2b+0x28>)
 800d25e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d262:	f000 fe4b 	bl	800defc <__assert_func>
 800d266:	2301      	movs	r3, #1
 800d268:	6144      	str	r4, [r0, #20]
 800d26a:	6103      	str	r3, [r0, #16]
 800d26c:	bd10      	pop	{r4, pc}
 800d26e:	bf00      	nop
 800d270:	0801c6a3 	.word	0x0801c6a3
 800d274:	0801c714 	.word	0x0801c714

0800d278 <__multiply>:
 800d278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d27c:	4614      	mov	r4, r2
 800d27e:	690a      	ldr	r2, [r1, #16]
 800d280:	6923      	ldr	r3, [r4, #16]
 800d282:	429a      	cmp	r2, r3
 800d284:	bfb8      	it	lt
 800d286:	460b      	movlt	r3, r1
 800d288:	460d      	mov	r5, r1
 800d28a:	bfbc      	itt	lt
 800d28c:	4625      	movlt	r5, r4
 800d28e:	461c      	movlt	r4, r3
 800d290:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d294:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d298:	68ab      	ldr	r3, [r5, #8]
 800d29a:	6869      	ldr	r1, [r5, #4]
 800d29c:	eb0a 0709 	add.w	r7, sl, r9
 800d2a0:	42bb      	cmp	r3, r7
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	bfb8      	it	lt
 800d2a6:	3101      	addlt	r1, #1
 800d2a8:	f7ff fed4 	bl	800d054 <_Balloc>
 800d2ac:	b930      	cbnz	r0, 800d2bc <__multiply+0x44>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	4b42      	ldr	r3, [pc, #264]	; (800d3bc <__multiply+0x144>)
 800d2b2:	4843      	ldr	r0, [pc, #268]	; (800d3c0 <__multiply+0x148>)
 800d2b4:	f240 115d 	movw	r1, #349	; 0x15d
 800d2b8:	f000 fe20 	bl	800defc <__assert_func>
 800d2bc:	f100 0614 	add.w	r6, r0, #20
 800d2c0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d2c4:	4633      	mov	r3, r6
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	4543      	cmp	r3, r8
 800d2ca:	d31e      	bcc.n	800d30a <__multiply+0x92>
 800d2cc:	f105 0c14 	add.w	ip, r5, #20
 800d2d0:	f104 0314 	add.w	r3, r4, #20
 800d2d4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d2d8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d2dc:	9202      	str	r2, [sp, #8]
 800d2de:	ebac 0205 	sub.w	r2, ip, r5
 800d2e2:	3a15      	subs	r2, #21
 800d2e4:	f022 0203 	bic.w	r2, r2, #3
 800d2e8:	3204      	adds	r2, #4
 800d2ea:	f105 0115 	add.w	r1, r5, #21
 800d2ee:	458c      	cmp	ip, r1
 800d2f0:	bf38      	it	cc
 800d2f2:	2204      	movcc	r2, #4
 800d2f4:	9201      	str	r2, [sp, #4]
 800d2f6:	9a02      	ldr	r2, [sp, #8]
 800d2f8:	9303      	str	r3, [sp, #12]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d808      	bhi.n	800d310 <__multiply+0x98>
 800d2fe:	2f00      	cmp	r7, #0
 800d300:	dc55      	bgt.n	800d3ae <__multiply+0x136>
 800d302:	6107      	str	r7, [r0, #16]
 800d304:	b005      	add	sp, #20
 800d306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d30a:	f843 2b04 	str.w	r2, [r3], #4
 800d30e:	e7db      	b.n	800d2c8 <__multiply+0x50>
 800d310:	f8b3 a000 	ldrh.w	sl, [r3]
 800d314:	f1ba 0f00 	cmp.w	sl, #0
 800d318:	d020      	beq.n	800d35c <__multiply+0xe4>
 800d31a:	f105 0e14 	add.w	lr, r5, #20
 800d31e:	46b1      	mov	r9, r6
 800d320:	2200      	movs	r2, #0
 800d322:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d326:	f8d9 b000 	ldr.w	fp, [r9]
 800d32a:	b2a1      	uxth	r1, r4
 800d32c:	fa1f fb8b 	uxth.w	fp, fp
 800d330:	fb0a b101 	mla	r1, sl, r1, fp
 800d334:	4411      	add	r1, r2
 800d336:	f8d9 2000 	ldr.w	r2, [r9]
 800d33a:	0c24      	lsrs	r4, r4, #16
 800d33c:	0c12      	lsrs	r2, r2, #16
 800d33e:	fb0a 2404 	mla	r4, sl, r4, r2
 800d342:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d346:	b289      	uxth	r1, r1
 800d348:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d34c:	45f4      	cmp	ip, lr
 800d34e:	f849 1b04 	str.w	r1, [r9], #4
 800d352:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d356:	d8e4      	bhi.n	800d322 <__multiply+0xaa>
 800d358:	9901      	ldr	r1, [sp, #4]
 800d35a:	5072      	str	r2, [r6, r1]
 800d35c:	9a03      	ldr	r2, [sp, #12]
 800d35e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d362:	3304      	adds	r3, #4
 800d364:	f1b9 0f00 	cmp.w	r9, #0
 800d368:	d01f      	beq.n	800d3aa <__multiply+0x132>
 800d36a:	6834      	ldr	r4, [r6, #0]
 800d36c:	f105 0114 	add.w	r1, r5, #20
 800d370:	46b6      	mov	lr, r6
 800d372:	f04f 0a00 	mov.w	sl, #0
 800d376:	880a      	ldrh	r2, [r1, #0]
 800d378:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d37c:	fb09 b202 	mla	r2, r9, r2, fp
 800d380:	4492      	add	sl, r2
 800d382:	b2a4      	uxth	r4, r4
 800d384:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d388:	f84e 4b04 	str.w	r4, [lr], #4
 800d38c:	f851 4b04 	ldr.w	r4, [r1], #4
 800d390:	f8be 2000 	ldrh.w	r2, [lr]
 800d394:	0c24      	lsrs	r4, r4, #16
 800d396:	fb09 2404 	mla	r4, r9, r4, r2
 800d39a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d39e:	458c      	cmp	ip, r1
 800d3a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d3a4:	d8e7      	bhi.n	800d376 <__multiply+0xfe>
 800d3a6:	9a01      	ldr	r2, [sp, #4]
 800d3a8:	50b4      	str	r4, [r6, r2]
 800d3aa:	3604      	adds	r6, #4
 800d3ac:	e7a3      	b.n	800d2f6 <__multiply+0x7e>
 800d3ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d1a5      	bne.n	800d302 <__multiply+0x8a>
 800d3b6:	3f01      	subs	r7, #1
 800d3b8:	e7a1      	b.n	800d2fe <__multiply+0x86>
 800d3ba:	bf00      	nop
 800d3bc:	0801c6a3 	.word	0x0801c6a3
 800d3c0:	0801c714 	.word	0x0801c714

0800d3c4 <__pow5mult>:
 800d3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3c8:	4615      	mov	r5, r2
 800d3ca:	f012 0203 	ands.w	r2, r2, #3
 800d3ce:	4606      	mov	r6, r0
 800d3d0:	460f      	mov	r7, r1
 800d3d2:	d007      	beq.n	800d3e4 <__pow5mult+0x20>
 800d3d4:	4c25      	ldr	r4, [pc, #148]	; (800d46c <__pow5mult+0xa8>)
 800d3d6:	3a01      	subs	r2, #1
 800d3d8:	2300      	movs	r3, #0
 800d3da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3de:	f7ff fe9b 	bl	800d118 <__multadd>
 800d3e2:	4607      	mov	r7, r0
 800d3e4:	10ad      	asrs	r5, r5, #2
 800d3e6:	d03d      	beq.n	800d464 <__pow5mult+0xa0>
 800d3e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d3ea:	b97c      	cbnz	r4, 800d40c <__pow5mult+0x48>
 800d3ec:	2010      	movs	r0, #16
 800d3ee:	f7ff fe1b 	bl	800d028 <malloc>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	6270      	str	r0, [r6, #36]	; 0x24
 800d3f6:	b928      	cbnz	r0, 800d404 <__pow5mult+0x40>
 800d3f8:	4b1d      	ldr	r3, [pc, #116]	; (800d470 <__pow5mult+0xac>)
 800d3fa:	481e      	ldr	r0, [pc, #120]	; (800d474 <__pow5mult+0xb0>)
 800d3fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d400:	f000 fd7c 	bl	800defc <__assert_func>
 800d404:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d408:	6004      	str	r4, [r0, #0]
 800d40a:	60c4      	str	r4, [r0, #12]
 800d40c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d410:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d414:	b94c      	cbnz	r4, 800d42a <__pow5mult+0x66>
 800d416:	f240 2171 	movw	r1, #625	; 0x271
 800d41a:	4630      	mov	r0, r6
 800d41c:	f7ff ff16 	bl	800d24c <__i2b>
 800d420:	2300      	movs	r3, #0
 800d422:	f8c8 0008 	str.w	r0, [r8, #8]
 800d426:	4604      	mov	r4, r0
 800d428:	6003      	str	r3, [r0, #0]
 800d42a:	f04f 0900 	mov.w	r9, #0
 800d42e:	07eb      	lsls	r3, r5, #31
 800d430:	d50a      	bpl.n	800d448 <__pow5mult+0x84>
 800d432:	4639      	mov	r1, r7
 800d434:	4622      	mov	r2, r4
 800d436:	4630      	mov	r0, r6
 800d438:	f7ff ff1e 	bl	800d278 <__multiply>
 800d43c:	4639      	mov	r1, r7
 800d43e:	4680      	mov	r8, r0
 800d440:	4630      	mov	r0, r6
 800d442:	f7ff fe47 	bl	800d0d4 <_Bfree>
 800d446:	4647      	mov	r7, r8
 800d448:	106d      	asrs	r5, r5, #1
 800d44a:	d00b      	beq.n	800d464 <__pow5mult+0xa0>
 800d44c:	6820      	ldr	r0, [r4, #0]
 800d44e:	b938      	cbnz	r0, 800d460 <__pow5mult+0x9c>
 800d450:	4622      	mov	r2, r4
 800d452:	4621      	mov	r1, r4
 800d454:	4630      	mov	r0, r6
 800d456:	f7ff ff0f 	bl	800d278 <__multiply>
 800d45a:	6020      	str	r0, [r4, #0]
 800d45c:	f8c0 9000 	str.w	r9, [r0]
 800d460:	4604      	mov	r4, r0
 800d462:	e7e4      	b.n	800d42e <__pow5mult+0x6a>
 800d464:	4638      	mov	r0, r7
 800d466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d46a:	bf00      	nop
 800d46c:	0801c868 	.word	0x0801c868
 800d470:	0801c62d 	.word	0x0801c62d
 800d474:	0801c714 	.word	0x0801c714

0800d478 <__lshift>:
 800d478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d47c:	460c      	mov	r4, r1
 800d47e:	6849      	ldr	r1, [r1, #4]
 800d480:	6923      	ldr	r3, [r4, #16]
 800d482:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d486:	68a3      	ldr	r3, [r4, #8]
 800d488:	4607      	mov	r7, r0
 800d48a:	4691      	mov	r9, r2
 800d48c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d490:	f108 0601 	add.w	r6, r8, #1
 800d494:	42b3      	cmp	r3, r6
 800d496:	db0b      	blt.n	800d4b0 <__lshift+0x38>
 800d498:	4638      	mov	r0, r7
 800d49a:	f7ff fddb 	bl	800d054 <_Balloc>
 800d49e:	4605      	mov	r5, r0
 800d4a0:	b948      	cbnz	r0, 800d4b6 <__lshift+0x3e>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	4b28      	ldr	r3, [pc, #160]	; (800d548 <__lshift+0xd0>)
 800d4a6:	4829      	ldr	r0, [pc, #164]	; (800d54c <__lshift+0xd4>)
 800d4a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d4ac:	f000 fd26 	bl	800defc <__assert_func>
 800d4b0:	3101      	adds	r1, #1
 800d4b2:	005b      	lsls	r3, r3, #1
 800d4b4:	e7ee      	b.n	800d494 <__lshift+0x1c>
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	f100 0114 	add.w	r1, r0, #20
 800d4bc:	f100 0210 	add.w	r2, r0, #16
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	4553      	cmp	r3, sl
 800d4c4:	db33      	blt.n	800d52e <__lshift+0xb6>
 800d4c6:	6920      	ldr	r0, [r4, #16]
 800d4c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d4cc:	f104 0314 	add.w	r3, r4, #20
 800d4d0:	f019 091f 	ands.w	r9, r9, #31
 800d4d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d4dc:	d02b      	beq.n	800d536 <__lshift+0xbe>
 800d4de:	f1c9 0e20 	rsb	lr, r9, #32
 800d4e2:	468a      	mov	sl, r1
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	6818      	ldr	r0, [r3, #0]
 800d4e8:	fa00 f009 	lsl.w	r0, r0, r9
 800d4ec:	4302      	orrs	r2, r0
 800d4ee:	f84a 2b04 	str.w	r2, [sl], #4
 800d4f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4f6:	459c      	cmp	ip, r3
 800d4f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d4fc:	d8f3      	bhi.n	800d4e6 <__lshift+0x6e>
 800d4fe:	ebac 0304 	sub.w	r3, ip, r4
 800d502:	3b15      	subs	r3, #21
 800d504:	f023 0303 	bic.w	r3, r3, #3
 800d508:	3304      	adds	r3, #4
 800d50a:	f104 0015 	add.w	r0, r4, #21
 800d50e:	4584      	cmp	ip, r0
 800d510:	bf38      	it	cc
 800d512:	2304      	movcc	r3, #4
 800d514:	50ca      	str	r2, [r1, r3]
 800d516:	b10a      	cbz	r2, 800d51c <__lshift+0xa4>
 800d518:	f108 0602 	add.w	r6, r8, #2
 800d51c:	3e01      	subs	r6, #1
 800d51e:	4638      	mov	r0, r7
 800d520:	612e      	str	r6, [r5, #16]
 800d522:	4621      	mov	r1, r4
 800d524:	f7ff fdd6 	bl	800d0d4 <_Bfree>
 800d528:	4628      	mov	r0, r5
 800d52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d52e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d532:	3301      	adds	r3, #1
 800d534:	e7c5      	b.n	800d4c2 <__lshift+0x4a>
 800d536:	3904      	subs	r1, #4
 800d538:	f853 2b04 	ldr.w	r2, [r3], #4
 800d53c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d540:	459c      	cmp	ip, r3
 800d542:	d8f9      	bhi.n	800d538 <__lshift+0xc0>
 800d544:	e7ea      	b.n	800d51c <__lshift+0xa4>
 800d546:	bf00      	nop
 800d548:	0801c6a3 	.word	0x0801c6a3
 800d54c:	0801c714 	.word	0x0801c714

0800d550 <__mcmp>:
 800d550:	b530      	push	{r4, r5, lr}
 800d552:	6902      	ldr	r2, [r0, #16]
 800d554:	690c      	ldr	r4, [r1, #16]
 800d556:	1b12      	subs	r2, r2, r4
 800d558:	d10e      	bne.n	800d578 <__mcmp+0x28>
 800d55a:	f100 0314 	add.w	r3, r0, #20
 800d55e:	3114      	adds	r1, #20
 800d560:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d564:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d568:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d56c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d570:	42a5      	cmp	r5, r4
 800d572:	d003      	beq.n	800d57c <__mcmp+0x2c>
 800d574:	d305      	bcc.n	800d582 <__mcmp+0x32>
 800d576:	2201      	movs	r2, #1
 800d578:	4610      	mov	r0, r2
 800d57a:	bd30      	pop	{r4, r5, pc}
 800d57c:	4283      	cmp	r3, r0
 800d57e:	d3f3      	bcc.n	800d568 <__mcmp+0x18>
 800d580:	e7fa      	b.n	800d578 <__mcmp+0x28>
 800d582:	f04f 32ff 	mov.w	r2, #4294967295
 800d586:	e7f7      	b.n	800d578 <__mcmp+0x28>

0800d588 <__mdiff>:
 800d588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d58c:	460c      	mov	r4, r1
 800d58e:	4606      	mov	r6, r0
 800d590:	4611      	mov	r1, r2
 800d592:	4620      	mov	r0, r4
 800d594:	4617      	mov	r7, r2
 800d596:	f7ff ffdb 	bl	800d550 <__mcmp>
 800d59a:	1e05      	subs	r5, r0, #0
 800d59c:	d110      	bne.n	800d5c0 <__mdiff+0x38>
 800d59e:	4629      	mov	r1, r5
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	f7ff fd57 	bl	800d054 <_Balloc>
 800d5a6:	b930      	cbnz	r0, 800d5b6 <__mdiff+0x2e>
 800d5a8:	4b39      	ldr	r3, [pc, #228]	; (800d690 <__mdiff+0x108>)
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	f240 2132 	movw	r1, #562	; 0x232
 800d5b0:	4838      	ldr	r0, [pc, #224]	; (800d694 <__mdiff+0x10c>)
 800d5b2:	f000 fca3 	bl	800defc <__assert_func>
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d5bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c0:	bfa4      	itt	ge
 800d5c2:	463b      	movge	r3, r7
 800d5c4:	4627      	movge	r7, r4
 800d5c6:	4630      	mov	r0, r6
 800d5c8:	6879      	ldr	r1, [r7, #4]
 800d5ca:	bfa6      	itte	ge
 800d5cc:	461c      	movge	r4, r3
 800d5ce:	2500      	movge	r5, #0
 800d5d0:	2501      	movlt	r5, #1
 800d5d2:	f7ff fd3f 	bl	800d054 <_Balloc>
 800d5d6:	b920      	cbnz	r0, 800d5e2 <__mdiff+0x5a>
 800d5d8:	4b2d      	ldr	r3, [pc, #180]	; (800d690 <__mdiff+0x108>)
 800d5da:	4602      	mov	r2, r0
 800d5dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d5e0:	e7e6      	b.n	800d5b0 <__mdiff+0x28>
 800d5e2:	693e      	ldr	r6, [r7, #16]
 800d5e4:	60c5      	str	r5, [r0, #12]
 800d5e6:	6925      	ldr	r5, [r4, #16]
 800d5e8:	f107 0114 	add.w	r1, r7, #20
 800d5ec:	f104 0914 	add.w	r9, r4, #20
 800d5f0:	f100 0e14 	add.w	lr, r0, #20
 800d5f4:	f107 0210 	add.w	r2, r7, #16
 800d5f8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d5fc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d600:	46f2      	mov	sl, lr
 800d602:	2700      	movs	r7, #0
 800d604:	f859 3b04 	ldr.w	r3, [r9], #4
 800d608:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d60c:	fa1f f883 	uxth.w	r8, r3
 800d610:	fa17 f78b 	uxtah	r7, r7, fp
 800d614:	0c1b      	lsrs	r3, r3, #16
 800d616:	eba7 0808 	sub.w	r8, r7, r8
 800d61a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d61e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d622:	fa1f f888 	uxth.w	r8, r8
 800d626:	141f      	asrs	r7, r3, #16
 800d628:	454d      	cmp	r5, r9
 800d62a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d62e:	f84a 3b04 	str.w	r3, [sl], #4
 800d632:	d8e7      	bhi.n	800d604 <__mdiff+0x7c>
 800d634:	1b2b      	subs	r3, r5, r4
 800d636:	3b15      	subs	r3, #21
 800d638:	f023 0303 	bic.w	r3, r3, #3
 800d63c:	3304      	adds	r3, #4
 800d63e:	3415      	adds	r4, #21
 800d640:	42a5      	cmp	r5, r4
 800d642:	bf38      	it	cc
 800d644:	2304      	movcc	r3, #4
 800d646:	4419      	add	r1, r3
 800d648:	4473      	add	r3, lr
 800d64a:	469e      	mov	lr, r3
 800d64c:	460d      	mov	r5, r1
 800d64e:	4565      	cmp	r5, ip
 800d650:	d30e      	bcc.n	800d670 <__mdiff+0xe8>
 800d652:	f10c 0203 	add.w	r2, ip, #3
 800d656:	1a52      	subs	r2, r2, r1
 800d658:	f022 0203 	bic.w	r2, r2, #3
 800d65c:	3903      	subs	r1, #3
 800d65e:	458c      	cmp	ip, r1
 800d660:	bf38      	it	cc
 800d662:	2200      	movcc	r2, #0
 800d664:	441a      	add	r2, r3
 800d666:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d66a:	b17b      	cbz	r3, 800d68c <__mdiff+0x104>
 800d66c:	6106      	str	r6, [r0, #16]
 800d66e:	e7a5      	b.n	800d5bc <__mdiff+0x34>
 800d670:	f855 8b04 	ldr.w	r8, [r5], #4
 800d674:	fa17 f488 	uxtah	r4, r7, r8
 800d678:	1422      	asrs	r2, r4, #16
 800d67a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d67e:	b2a4      	uxth	r4, r4
 800d680:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d684:	f84e 4b04 	str.w	r4, [lr], #4
 800d688:	1417      	asrs	r7, r2, #16
 800d68a:	e7e0      	b.n	800d64e <__mdiff+0xc6>
 800d68c:	3e01      	subs	r6, #1
 800d68e:	e7ea      	b.n	800d666 <__mdiff+0xde>
 800d690:	0801c6a3 	.word	0x0801c6a3
 800d694:	0801c714 	.word	0x0801c714

0800d698 <__d2b>:
 800d698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d69c:	4689      	mov	r9, r1
 800d69e:	2101      	movs	r1, #1
 800d6a0:	ec57 6b10 	vmov	r6, r7, d0
 800d6a4:	4690      	mov	r8, r2
 800d6a6:	f7ff fcd5 	bl	800d054 <_Balloc>
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	b930      	cbnz	r0, 800d6bc <__d2b+0x24>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	4b25      	ldr	r3, [pc, #148]	; (800d748 <__d2b+0xb0>)
 800d6b2:	4826      	ldr	r0, [pc, #152]	; (800d74c <__d2b+0xb4>)
 800d6b4:	f240 310a 	movw	r1, #778	; 0x30a
 800d6b8:	f000 fc20 	bl	800defc <__assert_func>
 800d6bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d6c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d6c4:	bb35      	cbnz	r5, 800d714 <__d2b+0x7c>
 800d6c6:	2e00      	cmp	r6, #0
 800d6c8:	9301      	str	r3, [sp, #4]
 800d6ca:	d028      	beq.n	800d71e <__d2b+0x86>
 800d6cc:	4668      	mov	r0, sp
 800d6ce:	9600      	str	r6, [sp, #0]
 800d6d0:	f7ff fd8c 	bl	800d1ec <__lo0bits>
 800d6d4:	9900      	ldr	r1, [sp, #0]
 800d6d6:	b300      	cbz	r0, 800d71a <__d2b+0x82>
 800d6d8:	9a01      	ldr	r2, [sp, #4]
 800d6da:	f1c0 0320 	rsb	r3, r0, #32
 800d6de:	fa02 f303 	lsl.w	r3, r2, r3
 800d6e2:	430b      	orrs	r3, r1
 800d6e4:	40c2      	lsrs	r2, r0
 800d6e6:	6163      	str	r3, [r4, #20]
 800d6e8:	9201      	str	r2, [sp, #4]
 800d6ea:	9b01      	ldr	r3, [sp, #4]
 800d6ec:	61a3      	str	r3, [r4, #24]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	bf14      	ite	ne
 800d6f2:	2202      	movne	r2, #2
 800d6f4:	2201      	moveq	r2, #1
 800d6f6:	6122      	str	r2, [r4, #16]
 800d6f8:	b1d5      	cbz	r5, 800d730 <__d2b+0x98>
 800d6fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d6fe:	4405      	add	r5, r0
 800d700:	f8c9 5000 	str.w	r5, [r9]
 800d704:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d708:	f8c8 0000 	str.w	r0, [r8]
 800d70c:	4620      	mov	r0, r4
 800d70e:	b003      	add	sp, #12
 800d710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d718:	e7d5      	b.n	800d6c6 <__d2b+0x2e>
 800d71a:	6161      	str	r1, [r4, #20]
 800d71c:	e7e5      	b.n	800d6ea <__d2b+0x52>
 800d71e:	a801      	add	r0, sp, #4
 800d720:	f7ff fd64 	bl	800d1ec <__lo0bits>
 800d724:	9b01      	ldr	r3, [sp, #4]
 800d726:	6163      	str	r3, [r4, #20]
 800d728:	2201      	movs	r2, #1
 800d72a:	6122      	str	r2, [r4, #16]
 800d72c:	3020      	adds	r0, #32
 800d72e:	e7e3      	b.n	800d6f8 <__d2b+0x60>
 800d730:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d734:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d738:	f8c9 0000 	str.w	r0, [r9]
 800d73c:	6918      	ldr	r0, [r3, #16]
 800d73e:	f7ff fd35 	bl	800d1ac <__hi0bits>
 800d742:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d746:	e7df      	b.n	800d708 <__d2b+0x70>
 800d748:	0801c6a3 	.word	0x0801c6a3
 800d74c:	0801c714 	.word	0x0801c714

0800d750 <_calloc_r>:
 800d750:	b513      	push	{r0, r1, r4, lr}
 800d752:	434a      	muls	r2, r1
 800d754:	4611      	mov	r1, r2
 800d756:	9201      	str	r2, [sp, #4]
 800d758:	f000 f85a 	bl	800d810 <_malloc_r>
 800d75c:	4604      	mov	r4, r0
 800d75e:	b118      	cbz	r0, 800d768 <_calloc_r+0x18>
 800d760:	9a01      	ldr	r2, [sp, #4]
 800d762:	2100      	movs	r1, #0
 800d764:	f7fd fde4 	bl	800b330 <memset>
 800d768:	4620      	mov	r0, r4
 800d76a:	b002      	add	sp, #8
 800d76c:	bd10      	pop	{r4, pc}
	...

0800d770 <_free_r>:
 800d770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d772:	2900      	cmp	r1, #0
 800d774:	d048      	beq.n	800d808 <_free_r+0x98>
 800d776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d77a:	9001      	str	r0, [sp, #4]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f1a1 0404 	sub.w	r4, r1, #4
 800d782:	bfb8      	it	lt
 800d784:	18e4      	addlt	r4, r4, r3
 800d786:	f000 fc59 	bl	800e03c <__malloc_lock>
 800d78a:	4a20      	ldr	r2, [pc, #128]	; (800d80c <_free_r+0x9c>)
 800d78c:	9801      	ldr	r0, [sp, #4]
 800d78e:	6813      	ldr	r3, [r2, #0]
 800d790:	4615      	mov	r5, r2
 800d792:	b933      	cbnz	r3, 800d7a2 <_free_r+0x32>
 800d794:	6063      	str	r3, [r4, #4]
 800d796:	6014      	str	r4, [r2, #0]
 800d798:	b003      	add	sp, #12
 800d79a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d79e:	f000 bc53 	b.w	800e048 <__malloc_unlock>
 800d7a2:	42a3      	cmp	r3, r4
 800d7a4:	d90b      	bls.n	800d7be <_free_r+0x4e>
 800d7a6:	6821      	ldr	r1, [r4, #0]
 800d7a8:	1862      	adds	r2, r4, r1
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	bf04      	itt	eq
 800d7ae:	681a      	ldreq	r2, [r3, #0]
 800d7b0:	685b      	ldreq	r3, [r3, #4]
 800d7b2:	6063      	str	r3, [r4, #4]
 800d7b4:	bf04      	itt	eq
 800d7b6:	1852      	addeq	r2, r2, r1
 800d7b8:	6022      	streq	r2, [r4, #0]
 800d7ba:	602c      	str	r4, [r5, #0]
 800d7bc:	e7ec      	b.n	800d798 <_free_r+0x28>
 800d7be:	461a      	mov	r2, r3
 800d7c0:	685b      	ldr	r3, [r3, #4]
 800d7c2:	b10b      	cbz	r3, 800d7c8 <_free_r+0x58>
 800d7c4:	42a3      	cmp	r3, r4
 800d7c6:	d9fa      	bls.n	800d7be <_free_r+0x4e>
 800d7c8:	6811      	ldr	r1, [r2, #0]
 800d7ca:	1855      	adds	r5, r2, r1
 800d7cc:	42a5      	cmp	r5, r4
 800d7ce:	d10b      	bne.n	800d7e8 <_free_r+0x78>
 800d7d0:	6824      	ldr	r4, [r4, #0]
 800d7d2:	4421      	add	r1, r4
 800d7d4:	1854      	adds	r4, r2, r1
 800d7d6:	42a3      	cmp	r3, r4
 800d7d8:	6011      	str	r1, [r2, #0]
 800d7da:	d1dd      	bne.n	800d798 <_free_r+0x28>
 800d7dc:	681c      	ldr	r4, [r3, #0]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	6053      	str	r3, [r2, #4]
 800d7e2:	4421      	add	r1, r4
 800d7e4:	6011      	str	r1, [r2, #0]
 800d7e6:	e7d7      	b.n	800d798 <_free_r+0x28>
 800d7e8:	d902      	bls.n	800d7f0 <_free_r+0x80>
 800d7ea:	230c      	movs	r3, #12
 800d7ec:	6003      	str	r3, [r0, #0]
 800d7ee:	e7d3      	b.n	800d798 <_free_r+0x28>
 800d7f0:	6825      	ldr	r5, [r4, #0]
 800d7f2:	1961      	adds	r1, r4, r5
 800d7f4:	428b      	cmp	r3, r1
 800d7f6:	bf04      	itt	eq
 800d7f8:	6819      	ldreq	r1, [r3, #0]
 800d7fa:	685b      	ldreq	r3, [r3, #4]
 800d7fc:	6063      	str	r3, [r4, #4]
 800d7fe:	bf04      	itt	eq
 800d800:	1949      	addeq	r1, r1, r5
 800d802:	6021      	streq	r1, [r4, #0]
 800d804:	6054      	str	r4, [r2, #4]
 800d806:	e7c7      	b.n	800d798 <_free_r+0x28>
 800d808:	b003      	add	sp, #12
 800d80a:	bd30      	pop	{r4, r5, pc}
 800d80c:	200002b8 	.word	0x200002b8

0800d810 <_malloc_r>:
 800d810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d812:	1ccd      	adds	r5, r1, #3
 800d814:	f025 0503 	bic.w	r5, r5, #3
 800d818:	3508      	adds	r5, #8
 800d81a:	2d0c      	cmp	r5, #12
 800d81c:	bf38      	it	cc
 800d81e:	250c      	movcc	r5, #12
 800d820:	2d00      	cmp	r5, #0
 800d822:	4606      	mov	r6, r0
 800d824:	db01      	blt.n	800d82a <_malloc_r+0x1a>
 800d826:	42a9      	cmp	r1, r5
 800d828:	d903      	bls.n	800d832 <_malloc_r+0x22>
 800d82a:	230c      	movs	r3, #12
 800d82c:	6033      	str	r3, [r6, #0]
 800d82e:	2000      	movs	r0, #0
 800d830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d832:	f000 fc03 	bl	800e03c <__malloc_lock>
 800d836:	4921      	ldr	r1, [pc, #132]	; (800d8bc <_malloc_r+0xac>)
 800d838:	680a      	ldr	r2, [r1, #0]
 800d83a:	4614      	mov	r4, r2
 800d83c:	b99c      	cbnz	r4, 800d866 <_malloc_r+0x56>
 800d83e:	4f20      	ldr	r7, [pc, #128]	; (800d8c0 <_malloc_r+0xb0>)
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	b923      	cbnz	r3, 800d84e <_malloc_r+0x3e>
 800d844:	4621      	mov	r1, r4
 800d846:	4630      	mov	r0, r6
 800d848:	f000 faf2 	bl	800de30 <_sbrk_r>
 800d84c:	6038      	str	r0, [r7, #0]
 800d84e:	4629      	mov	r1, r5
 800d850:	4630      	mov	r0, r6
 800d852:	f000 faed 	bl	800de30 <_sbrk_r>
 800d856:	1c43      	adds	r3, r0, #1
 800d858:	d123      	bne.n	800d8a2 <_malloc_r+0x92>
 800d85a:	230c      	movs	r3, #12
 800d85c:	6033      	str	r3, [r6, #0]
 800d85e:	4630      	mov	r0, r6
 800d860:	f000 fbf2 	bl	800e048 <__malloc_unlock>
 800d864:	e7e3      	b.n	800d82e <_malloc_r+0x1e>
 800d866:	6823      	ldr	r3, [r4, #0]
 800d868:	1b5b      	subs	r3, r3, r5
 800d86a:	d417      	bmi.n	800d89c <_malloc_r+0x8c>
 800d86c:	2b0b      	cmp	r3, #11
 800d86e:	d903      	bls.n	800d878 <_malloc_r+0x68>
 800d870:	6023      	str	r3, [r4, #0]
 800d872:	441c      	add	r4, r3
 800d874:	6025      	str	r5, [r4, #0]
 800d876:	e004      	b.n	800d882 <_malloc_r+0x72>
 800d878:	6863      	ldr	r3, [r4, #4]
 800d87a:	42a2      	cmp	r2, r4
 800d87c:	bf0c      	ite	eq
 800d87e:	600b      	streq	r3, [r1, #0]
 800d880:	6053      	strne	r3, [r2, #4]
 800d882:	4630      	mov	r0, r6
 800d884:	f000 fbe0 	bl	800e048 <__malloc_unlock>
 800d888:	f104 000b 	add.w	r0, r4, #11
 800d88c:	1d23      	adds	r3, r4, #4
 800d88e:	f020 0007 	bic.w	r0, r0, #7
 800d892:	1ac2      	subs	r2, r0, r3
 800d894:	d0cc      	beq.n	800d830 <_malloc_r+0x20>
 800d896:	1a1b      	subs	r3, r3, r0
 800d898:	50a3      	str	r3, [r4, r2]
 800d89a:	e7c9      	b.n	800d830 <_malloc_r+0x20>
 800d89c:	4622      	mov	r2, r4
 800d89e:	6864      	ldr	r4, [r4, #4]
 800d8a0:	e7cc      	b.n	800d83c <_malloc_r+0x2c>
 800d8a2:	1cc4      	adds	r4, r0, #3
 800d8a4:	f024 0403 	bic.w	r4, r4, #3
 800d8a8:	42a0      	cmp	r0, r4
 800d8aa:	d0e3      	beq.n	800d874 <_malloc_r+0x64>
 800d8ac:	1a21      	subs	r1, r4, r0
 800d8ae:	4630      	mov	r0, r6
 800d8b0:	f000 fabe 	bl	800de30 <_sbrk_r>
 800d8b4:	3001      	adds	r0, #1
 800d8b6:	d1dd      	bne.n	800d874 <_malloc_r+0x64>
 800d8b8:	e7cf      	b.n	800d85a <_malloc_r+0x4a>
 800d8ba:	bf00      	nop
 800d8bc:	200002b8 	.word	0x200002b8
 800d8c0:	200002bc 	.word	0x200002bc

0800d8c4 <__ssputs_r>:
 800d8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c8:	688e      	ldr	r6, [r1, #8]
 800d8ca:	429e      	cmp	r6, r3
 800d8cc:	4682      	mov	sl, r0
 800d8ce:	460c      	mov	r4, r1
 800d8d0:	4690      	mov	r8, r2
 800d8d2:	461f      	mov	r7, r3
 800d8d4:	d838      	bhi.n	800d948 <__ssputs_r+0x84>
 800d8d6:	898a      	ldrh	r2, [r1, #12]
 800d8d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d8dc:	d032      	beq.n	800d944 <__ssputs_r+0x80>
 800d8de:	6825      	ldr	r5, [r4, #0]
 800d8e0:	6909      	ldr	r1, [r1, #16]
 800d8e2:	eba5 0901 	sub.w	r9, r5, r1
 800d8e6:	6965      	ldr	r5, [r4, #20]
 800d8e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	444b      	add	r3, r9
 800d8f4:	106d      	asrs	r5, r5, #1
 800d8f6:	429d      	cmp	r5, r3
 800d8f8:	bf38      	it	cc
 800d8fa:	461d      	movcc	r5, r3
 800d8fc:	0553      	lsls	r3, r2, #21
 800d8fe:	d531      	bpl.n	800d964 <__ssputs_r+0xa0>
 800d900:	4629      	mov	r1, r5
 800d902:	f7ff ff85 	bl	800d810 <_malloc_r>
 800d906:	4606      	mov	r6, r0
 800d908:	b950      	cbnz	r0, 800d920 <__ssputs_r+0x5c>
 800d90a:	230c      	movs	r3, #12
 800d90c:	f8ca 3000 	str.w	r3, [sl]
 800d910:	89a3      	ldrh	r3, [r4, #12]
 800d912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d916:	81a3      	strh	r3, [r4, #12]
 800d918:	f04f 30ff 	mov.w	r0, #4294967295
 800d91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d920:	6921      	ldr	r1, [r4, #16]
 800d922:	464a      	mov	r2, r9
 800d924:	f7ff fb88 	bl	800d038 <memcpy>
 800d928:	89a3      	ldrh	r3, [r4, #12]
 800d92a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d92e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d932:	81a3      	strh	r3, [r4, #12]
 800d934:	6126      	str	r6, [r4, #16]
 800d936:	6165      	str	r5, [r4, #20]
 800d938:	444e      	add	r6, r9
 800d93a:	eba5 0509 	sub.w	r5, r5, r9
 800d93e:	6026      	str	r6, [r4, #0]
 800d940:	60a5      	str	r5, [r4, #8]
 800d942:	463e      	mov	r6, r7
 800d944:	42be      	cmp	r6, r7
 800d946:	d900      	bls.n	800d94a <__ssputs_r+0x86>
 800d948:	463e      	mov	r6, r7
 800d94a:	4632      	mov	r2, r6
 800d94c:	6820      	ldr	r0, [r4, #0]
 800d94e:	4641      	mov	r1, r8
 800d950:	f000 fb5a 	bl	800e008 <memmove>
 800d954:	68a3      	ldr	r3, [r4, #8]
 800d956:	6822      	ldr	r2, [r4, #0]
 800d958:	1b9b      	subs	r3, r3, r6
 800d95a:	4432      	add	r2, r6
 800d95c:	60a3      	str	r3, [r4, #8]
 800d95e:	6022      	str	r2, [r4, #0]
 800d960:	2000      	movs	r0, #0
 800d962:	e7db      	b.n	800d91c <__ssputs_r+0x58>
 800d964:	462a      	mov	r2, r5
 800d966:	f000 fb75 	bl	800e054 <_realloc_r>
 800d96a:	4606      	mov	r6, r0
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d1e1      	bne.n	800d934 <__ssputs_r+0x70>
 800d970:	6921      	ldr	r1, [r4, #16]
 800d972:	4650      	mov	r0, sl
 800d974:	f7ff fefc 	bl	800d770 <_free_r>
 800d978:	e7c7      	b.n	800d90a <__ssputs_r+0x46>
	...

0800d97c <_svfiprintf_r>:
 800d97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d980:	4698      	mov	r8, r3
 800d982:	898b      	ldrh	r3, [r1, #12]
 800d984:	061b      	lsls	r3, r3, #24
 800d986:	b09d      	sub	sp, #116	; 0x74
 800d988:	4607      	mov	r7, r0
 800d98a:	460d      	mov	r5, r1
 800d98c:	4614      	mov	r4, r2
 800d98e:	d50e      	bpl.n	800d9ae <_svfiprintf_r+0x32>
 800d990:	690b      	ldr	r3, [r1, #16]
 800d992:	b963      	cbnz	r3, 800d9ae <_svfiprintf_r+0x32>
 800d994:	2140      	movs	r1, #64	; 0x40
 800d996:	f7ff ff3b 	bl	800d810 <_malloc_r>
 800d99a:	6028      	str	r0, [r5, #0]
 800d99c:	6128      	str	r0, [r5, #16]
 800d99e:	b920      	cbnz	r0, 800d9aa <_svfiprintf_r+0x2e>
 800d9a0:	230c      	movs	r3, #12
 800d9a2:	603b      	str	r3, [r7, #0]
 800d9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d9a8:	e0d1      	b.n	800db4e <_svfiprintf_r+0x1d2>
 800d9aa:	2340      	movs	r3, #64	; 0x40
 800d9ac:	616b      	str	r3, [r5, #20]
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	9309      	str	r3, [sp, #36]	; 0x24
 800d9b2:	2320      	movs	r3, #32
 800d9b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d9b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9bc:	2330      	movs	r3, #48	; 0x30
 800d9be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800db68 <_svfiprintf_r+0x1ec>
 800d9c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d9c6:	f04f 0901 	mov.w	r9, #1
 800d9ca:	4623      	mov	r3, r4
 800d9cc:	469a      	mov	sl, r3
 800d9ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9d2:	b10a      	cbz	r2, 800d9d8 <_svfiprintf_r+0x5c>
 800d9d4:	2a25      	cmp	r2, #37	; 0x25
 800d9d6:	d1f9      	bne.n	800d9cc <_svfiprintf_r+0x50>
 800d9d8:	ebba 0b04 	subs.w	fp, sl, r4
 800d9dc:	d00b      	beq.n	800d9f6 <_svfiprintf_r+0x7a>
 800d9de:	465b      	mov	r3, fp
 800d9e0:	4622      	mov	r2, r4
 800d9e2:	4629      	mov	r1, r5
 800d9e4:	4638      	mov	r0, r7
 800d9e6:	f7ff ff6d 	bl	800d8c4 <__ssputs_r>
 800d9ea:	3001      	adds	r0, #1
 800d9ec:	f000 80aa 	beq.w	800db44 <_svfiprintf_r+0x1c8>
 800d9f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9f2:	445a      	add	r2, fp
 800d9f4:	9209      	str	r2, [sp, #36]	; 0x24
 800d9f6:	f89a 3000 	ldrb.w	r3, [sl]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	f000 80a2 	beq.w	800db44 <_svfiprintf_r+0x1c8>
 800da00:	2300      	movs	r3, #0
 800da02:	f04f 32ff 	mov.w	r2, #4294967295
 800da06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da0a:	f10a 0a01 	add.w	sl, sl, #1
 800da0e:	9304      	str	r3, [sp, #16]
 800da10:	9307      	str	r3, [sp, #28]
 800da12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da16:	931a      	str	r3, [sp, #104]	; 0x68
 800da18:	4654      	mov	r4, sl
 800da1a:	2205      	movs	r2, #5
 800da1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da20:	4851      	ldr	r0, [pc, #324]	; (800db68 <_svfiprintf_r+0x1ec>)
 800da22:	f7f2 fbdd 	bl	80001e0 <memchr>
 800da26:	9a04      	ldr	r2, [sp, #16]
 800da28:	b9d8      	cbnz	r0, 800da62 <_svfiprintf_r+0xe6>
 800da2a:	06d0      	lsls	r0, r2, #27
 800da2c:	bf44      	itt	mi
 800da2e:	2320      	movmi	r3, #32
 800da30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da34:	0711      	lsls	r1, r2, #28
 800da36:	bf44      	itt	mi
 800da38:	232b      	movmi	r3, #43	; 0x2b
 800da3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da3e:	f89a 3000 	ldrb.w	r3, [sl]
 800da42:	2b2a      	cmp	r3, #42	; 0x2a
 800da44:	d015      	beq.n	800da72 <_svfiprintf_r+0xf6>
 800da46:	9a07      	ldr	r2, [sp, #28]
 800da48:	4654      	mov	r4, sl
 800da4a:	2000      	movs	r0, #0
 800da4c:	f04f 0c0a 	mov.w	ip, #10
 800da50:	4621      	mov	r1, r4
 800da52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da56:	3b30      	subs	r3, #48	; 0x30
 800da58:	2b09      	cmp	r3, #9
 800da5a:	d94e      	bls.n	800dafa <_svfiprintf_r+0x17e>
 800da5c:	b1b0      	cbz	r0, 800da8c <_svfiprintf_r+0x110>
 800da5e:	9207      	str	r2, [sp, #28]
 800da60:	e014      	b.n	800da8c <_svfiprintf_r+0x110>
 800da62:	eba0 0308 	sub.w	r3, r0, r8
 800da66:	fa09 f303 	lsl.w	r3, r9, r3
 800da6a:	4313      	orrs	r3, r2
 800da6c:	9304      	str	r3, [sp, #16]
 800da6e:	46a2      	mov	sl, r4
 800da70:	e7d2      	b.n	800da18 <_svfiprintf_r+0x9c>
 800da72:	9b03      	ldr	r3, [sp, #12]
 800da74:	1d19      	adds	r1, r3, #4
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	9103      	str	r1, [sp, #12]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	bfbb      	ittet	lt
 800da7e:	425b      	neglt	r3, r3
 800da80:	f042 0202 	orrlt.w	r2, r2, #2
 800da84:	9307      	strge	r3, [sp, #28]
 800da86:	9307      	strlt	r3, [sp, #28]
 800da88:	bfb8      	it	lt
 800da8a:	9204      	strlt	r2, [sp, #16]
 800da8c:	7823      	ldrb	r3, [r4, #0]
 800da8e:	2b2e      	cmp	r3, #46	; 0x2e
 800da90:	d10c      	bne.n	800daac <_svfiprintf_r+0x130>
 800da92:	7863      	ldrb	r3, [r4, #1]
 800da94:	2b2a      	cmp	r3, #42	; 0x2a
 800da96:	d135      	bne.n	800db04 <_svfiprintf_r+0x188>
 800da98:	9b03      	ldr	r3, [sp, #12]
 800da9a:	1d1a      	adds	r2, r3, #4
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	9203      	str	r2, [sp, #12]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	bfb8      	it	lt
 800daa4:	f04f 33ff 	movlt.w	r3, #4294967295
 800daa8:	3402      	adds	r4, #2
 800daaa:	9305      	str	r3, [sp, #20]
 800daac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800db78 <_svfiprintf_r+0x1fc>
 800dab0:	7821      	ldrb	r1, [r4, #0]
 800dab2:	2203      	movs	r2, #3
 800dab4:	4650      	mov	r0, sl
 800dab6:	f7f2 fb93 	bl	80001e0 <memchr>
 800daba:	b140      	cbz	r0, 800dace <_svfiprintf_r+0x152>
 800dabc:	2340      	movs	r3, #64	; 0x40
 800dabe:	eba0 000a 	sub.w	r0, r0, sl
 800dac2:	fa03 f000 	lsl.w	r0, r3, r0
 800dac6:	9b04      	ldr	r3, [sp, #16]
 800dac8:	4303      	orrs	r3, r0
 800daca:	3401      	adds	r4, #1
 800dacc:	9304      	str	r3, [sp, #16]
 800dace:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dad2:	4826      	ldr	r0, [pc, #152]	; (800db6c <_svfiprintf_r+0x1f0>)
 800dad4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dad8:	2206      	movs	r2, #6
 800dada:	f7f2 fb81 	bl	80001e0 <memchr>
 800dade:	2800      	cmp	r0, #0
 800dae0:	d038      	beq.n	800db54 <_svfiprintf_r+0x1d8>
 800dae2:	4b23      	ldr	r3, [pc, #140]	; (800db70 <_svfiprintf_r+0x1f4>)
 800dae4:	bb1b      	cbnz	r3, 800db2e <_svfiprintf_r+0x1b2>
 800dae6:	9b03      	ldr	r3, [sp, #12]
 800dae8:	3307      	adds	r3, #7
 800daea:	f023 0307 	bic.w	r3, r3, #7
 800daee:	3308      	adds	r3, #8
 800daf0:	9303      	str	r3, [sp, #12]
 800daf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daf4:	4433      	add	r3, r6
 800daf6:	9309      	str	r3, [sp, #36]	; 0x24
 800daf8:	e767      	b.n	800d9ca <_svfiprintf_r+0x4e>
 800dafa:	fb0c 3202 	mla	r2, ip, r2, r3
 800dafe:	460c      	mov	r4, r1
 800db00:	2001      	movs	r0, #1
 800db02:	e7a5      	b.n	800da50 <_svfiprintf_r+0xd4>
 800db04:	2300      	movs	r3, #0
 800db06:	3401      	adds	r4, #1
 800db08:	9305      	str	r3, [sp, #20]
 800db0a:	4619      	mov	r1, r3
 800db0c:	f04f 0c0a 	mov.w	ip, #10
 800db10:	4620      	mov	r0, r4
 800db12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db16:	3a30      	subs	r2, #48	; 0x30
 800db18:	2a09      	cmp	r2, #9
 800db1a:	d903      	bls.n	800db24 <_svfiprintf_r+0x1a8>
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d0c5      	beq.n	800daac <_svfiprintf_r+0x130>
 800db20:	9105      	str	r1, [sp, #20]
 800db22:	e7c3      	b.n	800daac <_svfiprintf_r+0x130>
 800db24:	fb0c 2101 	mla	r1, ip, r1, r2
 800db28:	4604      	mov	r4, r0
 800db2a:	2301      	movs	r3, #1
 800db2c:	e7f0      	b.n	800db10 <_svfiprintf_r+0x194>
 800db2e:	ab03      	add	r3, sp, #12
 800db30:	9300      	str	r3, [sp, #0]
 800db32:	462a      	mov	r2, r5
 800db34:	4b0f      	ldr	r3, [pc, #60]	; (800db74 <_svfiprintf_r+0x1f8>)
 800db36:	a904      	add	r1, sp, #16
 800db38:	4638      	mov	r0, r7
 800db3a:	f7fd fca1 	bl	800b480 <_printf_float>
 800db3e:	1c42      	adds	r2, r0, #1
 800db40:	4606      	mov	r6, r0
 800db42:	d1d6      	bne.n	800daf2 <_svfiprintf_r+0x176>
 800db44:	89ab      	ldrh	r3, [r5, #12]
 800db46:	065b      	lsls	r3, r3, #25
 800db48:	f53f af2c 	bmi.w	800d9a4 <_svfiprintf_r+0x28>
 800db4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db4e:	b01d      	add	sp, #116	; 0x74
 800db50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db54:	ab03      	add	r3, sp, #12
 800db56:	9300      	str	r3, [sp, #0]
 800db58:	462a      	mov	r2, r5
 800db5a:	4b06      	ldr	r3, [pc, #24]	; (800db74 <_svfiprintf_r+0x1f8>)
 800db5c:	a904      	add	r1, sp, #16
 800db5e:	4638      	mov	r0, r7
 800db60:	f7fd ff32 	bl	800b9c8 <_printf_i>
 800db64:	e7eb      	b.n	800db3e <_svfiprintf_r+0x1c2>
 800db66:	bf00      	nop
 800db68:	0801c874 	.word	0x0801c874
 800db6c:	0801c87e 	.word	0x0801c87e
 800db70:	0800b481 	.word	0x0800b481
 800db74:	0800d8c5 	.word	0x0800d8c5
 800db78:	0801c87a 	.word	0x0801c87a

0800db7c <__sfputc_r>:
 800db7c:	6893      	ldr	r3, [r2, #8]
 800db7e:	3b01      	subs	r3, #1
 800db80:	2b00      	cmp	r3, #0
 800db82:	b410      	push	{r4}
 800db84:	6093      	str	r3, [r2, #8]
 800db86:	da08      	bge.n	800db9a <__sfputc_r+0x1e>
 800db88:	6994      	ldr	r4, [r2, #24]
 800db8a:	42a3      	cmp	r3, r4
 800db8c:	db01      	blt.n	800db92 <__sfputc_r+0x16>
 800db8e:	290a      	cmp	r1, #10
 800db90:	d103      	bne.n	800db9a <__sfputc_r+0x1e>
 800db92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db96:	f7fe b8eb 	b.w	800bd70 <__swbuf_r>
 800db9a:	6813      	ldr	r3, [r2, #0]
 800db9c:	1c58      	adds	r0, r3, #1
 800db9e:	6010      	str	r0, [r2, #0]
 800dba0:	7019      	strb	r1, [r3, #0]
 800dba2:	4608      	mov	r0, r1
 800dba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dba8:	4770      	bx	lr

0800dbaa <__sfputs_r>:
 800dbaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbac:	4606      	mov	r6, r0
 800dbae:	460f      	mov	r7, r1
 800dbb0:	4614      	mov	r4, r2
 800dbb2:	18d5      	adds	r5, r2, r3
 800dbb4:	42ac      	cmp	r4, r5
 800dbb6:	d101      	bne.n	800dbbc <__sfputs_r+0x12>
 800dbb8:	2000      	movs	r0, #0
 800dbba:	e007      	b.n	800dbcc <__sfputs_r+0x22>
 800dbbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbc0:	463a      	mov	r2, r7
 800dbc2:	4630      	mov	r0, r6
 800dbc4:	f7ff ffda 	bl	800db7c <__sfputc_r>
 800dbc8:	1c43      	adds	r3, r0, #1
 800dbca:	d1f3      	bne.n	800dbb4 <__sfputs_r+0xa>
 800dbcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dbd0 <_vfiprintf_r>:
 800dbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd4:	460d      	mov	r5, r1
 800dbd6:	b09d      	sub	sp, #116	; 0x74
 800dbd8:	4614      	mov	r4, r2
 800dbda:	4698      	mov	r8, r3
 800dbdc:	4606      	mov	r6, r0
 800dbde:	b118      	cbz	r0, 800dbe8 <_vfiprintf_r+0x18>
 800dbe0:	6983      	ldr	r3, [r0, #24]
 800dbe2:	b90b      	cbnz	r3, 800dbe8 <_vfiprintf_r+0x18>
 800dbe4:	f7ff f916 	bl	800ce14 <__sinit>
 800dbe8:	4b89      	ldr	r3, [pc, #548]	; (800de10 <_vfiprintf_r+0x240>)
 800dbea:	429d      	cmp	r5, r3
 800dbec:	d11b      	bne.n	800dc26 <_vfiprintf_r+0x56>
 800dbee:	6875      	ldr	r5, [r6, #4]
 800dbf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbf2:	07d9      	lsls	r1, r3, #31
 800dbf4:	d405      	bmi.n	800dc02 <_vfiprintf_r+0x32>
 800dbf6:	89ab      	ldrh	r3, [r5, #12]
 800dbf8:	059a      	lsls	r2, r3, #22
 800dbfa:	d402      	bmi.n	800dc02 <_vfiprintf_r+0x32>
 800dbfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbfe:	f7ff f9ac 	bl	800cf5a <__retarget_lock_acquire_recursive>
 800dc02:	89ab      	ldrh	r3, [r5, #12]
 800dc04:	071b      	lsls	r3, r3, #28
 800dc06:	d501      	bpl.n	800dc0c <_vfiprintf_r+0x3c>
 800dc08:	692b      	ldr	r3, [r5, #16]
 800dc0a:	b9eb      	cbnz	r3, 800dc48 <_vfiprintf_r+0x78>
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	4630      	mov	r0, r6
 800dc10:	f7fe f900 	bl	800be14 <__swsetup_r>
 800dc14:	b1c0      	cbz	r0, 800dc48 <_vfiprintf_r+0x78>
 800dc16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc18:	07dc      	lsls	r4, r3, #31
 800dc1a:	d50e      	bpl.n	800dc3a <_vfiprintf_r+0x6a>
 800dc1c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc20:	b01d      	add	sp, #116	; 0x74
 800dc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc26:	4b7b      	ldr	r3, [pc, #492]	; (800de14 <_vfiprintf_r+0x244>)
 800dc28:	429d      	cmp	r5, r3
 800dc2a:	d101      	bne.n	800dc30 <_vfiprintf_r+0x60>
 800dc2c:	68b5      	ldr	r5, [r6, #8]
 800dc2e:	e7df      	b.n	800dbf0 <_vfiprintf_r+0x20>
 800dc30:	4b79      	ldr	r3, [pc, #484]	; (800de18 <_vfiprintf_r+0x248>)
 800dc32:	429d      	cmp	r5, r3
 800dc34:	bf08      	it	eq
 800dc36:	68f5      	ldreq	r5, [r6, #12]
 800dc38:	e7da      	b.n	800dbf0 <_vfiprintf_r+0x20>
 800dc3a:	89ab      	ldrh	r3, [r5, #12]
 800dc3c:	0598      	lsls	r0, r3, #22
 800dc3e:	d4ed      	bmi.n	800dc1c <_vfiprintf_r+0x4c>
 800dc40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc42:	f7ff f98b 	bl	800cf5c <__retarget_lock_release_recursive>
 800dc46:	e7e9      	b.n	800dc1c <_vfiprintf_r+0x4c>
 800dc48:	2300      	movs	r3, #0
 800dc4a:	9309      	str	r3, [sp, #36]	; 0x24
 800dc4c:	2320      	movs	r3, #32
 800dc4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc52:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc56:	2330      	movs	r3, #48	; 0x30
 800dc58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800de1c <_vfiprintf_r+0x24c>
 800dc5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc60:	f04f 0901 	mov.w	r9, #1
 800dc64:	4623      	mov	r3, r4
 800dc66:	469a      	mov	sl, r3
 800dc68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc6c:	b10a      	cbz	r2, 800dc72 <_vfiprintf_r+0xa2>
 800dc6e:	2a25      	cmp	r2, #37	; 0x25
 800dc70:	d1f9      	bne.n	800dc66 <_vfiprintf_r+0x96>
 800dc72:	ebba 0b04 	subs.w	fp, sl, r4
 800dc76:	d00b      	beq.n	800dc90 <_vfiprintf_r+0xc0>
 800dc78:	465b      	mov	r3, fp
 800dc7a:	4622      	mov	r2, r4
 800dc7c:	4629      	mov	r1, r5
 800dc7e:	4630      	mov	r0, r6
 800dc80:	f7ff ff93 	bl	800dbaa <__sfputs_r>
 800dc84:	3001      	adds	r0, #1
 800dc86:	f000 80aa 	beq.w	800ddde <_vfiprintf_r+0x20e>
 800dc8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc8c:	445a      	add	r2, fp
 800dc8e:	9209      	str	r2, [sp, #36]	; 0x24
 800dc90:	f89a 3000 	ldrb.w	r3, [sl]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	f000 80a2 	beq.w	800ddde <_vfiprintf_r+0x20e>
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	f04f 32ff 	mov.w	r2, #4294967295
 800dca0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dca4:	f10a 0a01 	add.w	sl, sl, #1
 800dca8:	9304      	str	r3, [sp, #16]
 800dcaa:	9307      	str	r3, [sp, #28]
 800dcac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcb0:	931a      	str	r3, [sp, #104]	; 0x68
 800dcb2:	4654      	mov	r4, sl
 800dcb4:	2205      	movs	r2, #5
 800dcb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcba:	4858      	ldr	r0, [pc, #352]	; (800de1c <_vfiprintf_r+0x24c>)
 800dcbc:	f7f2 fa90 	bl	80001e0 <memchr>
 800dcc0:	9a04      	ldr	r2, [sp, #16]
 800dcc2:	b9d8      	cbnz	r0, 800dcfc <_vfiprintf_r+0x12c>
 800dcc4:	06d1      	lsls	r1, r2, #27
 800dcc6:	bf44      	itt	mi
 800dcc8:	2320      	movmi	r3, #32
 800dcca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcce:	0713      	lsls	r3, r2, #28
 800dcd0:	bf44      	itt	mi
 800dcd2:	232b      	movmi	r3, #43	; 0x2b
 800dcd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcd8:	f89a 3000 	ldrb.w	r3, [sl]
 800dcdc:	2b2a      	cmp	r3, #42	; 0x2a
 800dcde:	d015      	beq.n	800dd0c <_vfiprintf_r+0x13c>
 800dce0:	9a07      	ldr	r2, [sp, #28]
 800dce2:	4654      	mov	r4, sl
 800dce4:	2000      	movs	r0, #0
 800dce6:	f04f 0c0a 	mov.w	ip, #10
 800dcea:	4621      	mov	r1, r4
 800dcec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcf0:	3b30      	subs	r3, #48	; 0x30
 800dcf2:	2b09      	cmp	r3, #9
 800dcf4:	d94e      	bls.n	800dd94 <_vfiprintf_r+0x1c4>
 800dcf6:	b1b0      	cbz	r0, 800dd26 <_vfiprintf_r+0x156>
 800dcf8:	9207      	str	r2, [sp, #28]
 800dcfa:	e014      	b.n	800dd26 <_vfiprintf_r+0x156>
 800dcfc:	eba0 0308 	sub.w	r3, r0, r8
 800dd00:	fa09 f303 	lsl.w	r3, r9, r3
 800dd04:	4313      	orrs	r3, r2
 800dd06:	9304      	str	r3, [sp, #16]
 800dd08:	46a2      	mov	sl, r4
 800dd0a:	e7d2      	b.n	800dcb2 <_vfiprintf_r+0xe2>
 800dd0c:	9b03      	ldr	r3, [sp, #12]
 800dd0e:	1d19      	adds	r1, r3, #4
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	9103      	str	r1, [sp, #12]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	bfbb      	ittet	lt
 800dd18:	425b      	neglt	r3, r3
 800dd1a:	f042 0202 	orrlt.w	r2, r2, #2
 800dd1e:	9307      	strge	r3, [sp, #28]
 800dd20:	9307      	strlt	r3, [sp, #28]
 800dd22:	bfb8      	it	lt
 800dd24:	9204      	strlt	r2, [sp, #16]
 800dd26:	7823      	ldrb	r3, [r4, #0]
 800dd28:	2b2e      	cmp	r3, #46	; 0x2e
 800dd2a:	d10c      	bne.n	800dd46 <_vfiprintf_r+0x176>
 800dd2c:	7863      	ldrb	r3, [r4, #1]
 800dd2e:	2b2a      	cmp	r3, #42	; 0x2a
 800dd30:	d135      	bne.n	800dd9e <_vfiprintf_r+0x1ce>
 800dd32:	9b03      	ldr	r3, [sp, #12]
 800dd34:	1d1a      	adds	r2, r3, #4
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	9203      	str	r2, [sp, #12]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	bfb8      	it	lt
 800dd3e:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd42:	3402      	adds	r4, #2
 800dd44:	9305      	str	r3, [sp, #20]
 800dd46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800de2c <_vfiprintf_r+0x25c>
 800dd4a:	7821      	ldrb	r1, [r4, #0]
 800dd4c:	2203      	movs	r2, #3
 800dd4e:	4650      	mov	r0, sl
 800dd50:	f7f2 fa46 	bl	80001e0 <memchr>
 800dd54:	b140      	cbz	r0, 800dd68 <_vfiprintf_r+0x198>
 800dd56:	2340      	movs	r3, #64	; 0x40
 800dd58:	eba0 000a 	sub.w	r0, r0, sl
 800dd5c:	fa03 f000 	lsl.w	r0, r3, r0
 800dd60:	9b04      	ldr	r3, [sp, #16]
 800dd62:	4303      	orrs	r3, r0
 800dd64:	3401      	adds	r4, #1
 800dd66:	9304      	str	r3, [sp, #16]
 800dd68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd6c:	482c      	ldr	r0, [pc, #176]	; (800de20 <_vfiprintf_r+0x250>)
 800dd6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd72:	2206      	movs	r2, #6
 800dd74:	f7f2 fa34 	bl	80001e0 <memchr>
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	d03f      	beq.n	800ddfc <_vfiprintf_r+0x22c>
 800dd7c:	4b29      	ldr	r3, [pc, #164]	; (800de24 <_vfiprintf_r+0x254>)
 800dd7e:	bb1b      	cbnz	r3, 800ddc8 <_vfiprintf_r+0x1f8>
 800dd80:	9b03      	ldr	r3, [sp, #12]
 800dd82:	3307      	adds	r3, #7
 800dd84:	f023 0307 	bic.w	r3, r3, #7
 800dd88:	3308      	adds	r3, #8
 800dd8a:	9303      	str	r3, [sp, #12]
 800dd8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd8e:	443b      	add	r3, r7
 800dd90:	9309      	str	r3, [sp, #36]	; 0x24
 800dd92:	e767      	b.n	800dc64 <_vfiprintf_r+0x94>
 800dd94:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd98:	460c      	mov	r4, r1
 800dd9a:	2001      	movs	r0, #1
 800dd9c:	e7a5      	b.n	800dcea <_vfiprintf_r+0x11a>
 800dd9e:	2300      	movs	r3, #0
 800dda0:	3401      	adds	r4, #1
 800dda2:	9305      	str	r3, [sp, #20]
 800dda4:	4619      	mov	r1, r3
 800dda6:	f04f 0c0a 	mov.w	ip, #10
 800ddaa:	4620      	mov	r0, r4
 800ddac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddb0:	3a30      	subs	r2, #48	; 0x30
 800ddb2:	2a09      	cmp	r2, #9
 800ddb4:	d903      	bls.n	800ddbe <_vfiprintf_r+0x1ee>
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d0c5      	beq.n	800dd46 <_vfiprintf_r+0x176>
 800ddba:	9105      	str	r1, [sp, #20]
 800ddbc:	e7c3      	b.n	800dd46 <_vfiprintf_r+0x176>
 800ddbe:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	e7f0      	b.n	800ddaa <_vfiprintf_r+0x1da>
 800ddc8:	ab03      	add	r3, sp, #12
 800ddca:	9300      	str	r3, [sp, #0]
 800ddcc:	462a      	mov	r2, r5
 800ddce:	4b16      	ldr	r3, [pc, #88]	; (800de28 <_vfiprintf_r+0x258>)
 800ddd0:	a904      	add	r1, sp, #16
 800ddd2:	4630      	mov	r0, r6
 800ddd4:	f7fd fb54 	bl	800b480 <_printf_float>
 800ddd8:	4607      	mov	r7, r0
 800ddda:	1c78      	adds	r0, r7, #1
 800dddc:	d1d6      	bne.n	800dd8c <_vfiprintf_r+0x1bc>
 800ddde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dde0:	07d9      	lsls	r1, r3, #31
 800dde2:	d405      	bmi.n	800ddf0 <_vfiprintf_r+0x220>
 800dde4:	89ab      	ldrh	r3, [r5, #12]
 800dde6:	059a      	lsls	r2, r3, #22
 800dde8:	d402      	bmi.n	800ddf0 <_vfiprintf_r+0x220>
 800ddea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddec:	f7ff f8b6 	bl	800cf5c <__retarget_lock_release_recursive>
 800ddf0:	89ab      	ldrh	r3, [r5, #12]
 800ddf2:	065b      	lsls	r3, r3, #25
 800ddf4:	f53f af12 	bmi.w	800dc1c <_vfiprintf_r+0x4c>
 800ddf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddfa:	e711      	b.n	800dc20 <_vfiprintf_r+0x50>
 800ddfc:	ab03      	add	r3, sp, #12
 800ddfe:	9300      	str	r3, [sp, #0]
 800de00:	462a      	mov	r2, r5
 800de02:	4b09      	ldr	r3, [pc, #36]	; (800de28 <_vfiprintf_r+0x258>)
 800de04:	a904      	add	r1, sp, #16
 800de06:	4630      	mov	r0, r6
 800de08:	f7fd fdde 	bl	800b9c8 <_printf_i>
 800de0c:	e7e4      	b.n	800ddd8 <_vfiprintf_r+0x208>
 800de0e:	bf00      	nop
 800de10:	0801c6d4 	.word	0x0801c6d4
 800de14:	0801c6f4 	.word	0x0801c6f4
 800de18:	0801c6b4 	.word	0x0801c6b4
 800de1c:	0801c874 	.word	0x0801c874
 800de20:	0801c87e 	.word	0x0801c87e
 800de24:	0800b481 	.word	0x0800b481
 800de28:	0800dbab 	.word	0x0800dbab
 800de2c:	0801c87a 	.word	0x0801c87a

0800de30 <_sbrk_r>:
 800de30:	b538      	push	{r3, r4, r5, lr}
 800de32:	4d06      	ldr	r5, [pc, #24]	; (800de4c <_sbrk_r+0x1c>)
 800de34:	2300      	movs	r3, #0
 800de36:	4604      	mov	r4, r0
 800de38:	4608      	mov	r0, r1
 800de3a:	602b      	str	r3, [r5, #0]
 800de3c:	f7f8 fd90 	bl	8006960 <_sbrk>
 800de40:	1c43      	adds	r3, r0, #1
 800de42:	d102      	bne.n	800de4a <_sbrk_r+0x1a>
 800de44:	682b      	ldr	r3, [r5, #0]
 800de46:	b103      	cbz	r3, 800de4a <_sbrk_r+0x1a>
 800de48:	6023      	str	r3, [r4, #0]
 800de4a:	bd38      	pop	{r3, r4, r5, pc}
 800de4c:	200005f0 	.word	0x200005f0

0800de50 <__sread>:
 800de50:	b510      	push	{r4, lr}
 800de52:	460c      	mov	r4, r1
 800de54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de58:	f000 f922 	bl	800e0a0 <_read_r>
 800de5c:	2800      	cmp	r0, #0
 800de5e:	bfab      	itete	ge
 800de60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800de62:	89a3      	ldrhlt	r3, [r4, #12]
 800de64:	181b      	addge	r3, r3, r0
 800de66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800de6a:	bfac      	ite	ge
 800de6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800de6e:	81a3      	strhlt	r3, [r4, #12]
 800de70:	bd10      	pop	{r4, pc}

0800de72 <__swrite>:
 800de72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de76:	461f      	mov	r7, r3
 800de78:	898b      	ldrh	r3, [r1, #12]
 800de7a:	05db      	lsls	r3, r3, #23
 800de7c:	4605      	mov	r5, r0
 800de7e:	460c      	mov	r4, r1
 800de80:	4616      	mov	r6, r2
 800de82:	d505      	bpl.n	800de90 <__swrite+0x1e>
 800de84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de88:	2302      	movs	r3, #2
 800de8a:	2200      	movs	r2, #0
 800de8c:	f000 f898 	bl	800dfc0 <_lseek_r>
 800de90:	89a3      	ldrh	r3, [r4, #12]
 800de92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de9a:	81a3      	strh	r3, [r4, #12]
 800de9c:	4632      	mov	r2, r6
 800de9e:	463b      	mov	r3, r7
 800dea0:	4628      	mov	r0, r5
 800dea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dea6:	f000 b817 	b.w	800ded8 <_write_r>

0800deaa <__sseek>:
 800deaa:	b510      	push	{r4, lr}
 800deac:	460c      	mov	r4, r1
 800deae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deb2:	f000 f885 	bl	800dfc0 <_lseek_r>
 800deb6:	1c43      	adds	r3, r0, #1
 800deb8:	89a3      	ldrh	r3, [r4, #12]
 800deba:	bf15      	itete	ne
 800debc:	6560      	strne	r0, [r4, #84]	; 0x54
 800debe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dec2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dec6:	81a3      	strheq	r3, [r4, #12]
 800dec8:	bf18      	it	ne
 800deca:	81a3      	strhne	r3, [r4, #12]
 800decc:	bd10      	pop	{r4, pc}

0800dece <__sclose>:
 800dece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ded2:	f000 b831 	b.w	800df38 <_close_r>
	...

0800ded8 <_write_r>:
 800ded8:	b538      	push	{r3, r4, r5, lr}
 800deda:	4d07      	ldr	r5, [pc, #28]	; (800def8 <_write_r+0x20>)
 800dedc:	4604      	mov	r4, r0
 800dede:	4608      	mov	r0, r1
 800dee0:	4611      	mov	r1, r2
 800dee2:	2200      	movs	r2, #0
 800dee4:	602a      	str	r2, [r5, #0]
 800dee6:	461a      	mov	r2, r3
 800dee8:	f7f8 fce9 	bl	80068be <_write>
 800deec:	1c43      	adds	r3, r0, #1
 800deee:	d102      	bne.n	800def6 <_write_r+0x1e>
 800def0:	682b      	ldr	r3, [r5, #0]
 800def2:	b103      	cbz	r3, 800def6 <_write_r+0x1e>
 800def4:	6023      	str	r3, [r4, #0]
 800def6:	bd38      	pop	{r3, r4, r5, pc}
 800def8:	200005f0 	.word	0x200005f0

0800defc <__assert_func>:
 800defc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800defe:	4614      	mov	r4, r2
 800df00:	461a      	mov	r2, r3
 800df02:	4b09      	ldr	r3, [pc, #36]	; (800df28 <__assert_func+0x2c>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4605      	mov	r5, r0
 800df08:	68d8      	ldr	r0, [r3, #12]
 800df0a:	b14c      	cbz	r4, 800df20 <__assert_func+0x24>
 800df0c:	4b07      	ldr	r3, [pc, #28]	; (800df2c <__assert_func+0x30>)
 800df0e:	9100      	str	r1, [sp, #0]
 800df10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df14:	4906      	ldr	r1, [pc, #24]	; (800df30 <__assert_func+0x34>)
 800df16:	462b      	mov	r3, r5
 800df18:	f000 f81e 	bl	800df58 <fiprintf>
 800df1c:	f000 f8df 	bl	800e0de <abort>
 800df20:	4b04      	ldr	r3, [pc, #16]	; (800df34 <__assert_func+0x38>)
 800df22:	461c      	mov	r4, r3
 800df24:	e7f3      	b.n	800df0e <__assert_func+0x12>
 800df26:	bf00      	nop
 800df28:	20000014 	.word	0x20000014
 800df2c:	0801c885 	.word	0x0801c885
 800df30:	0801c892 	.word	0x0801c892
 800df34:	0801c8c0 	.word	0x0801c8c0

0800df38 <_close_r>:
 800df38:	b538      	push	{r3, r4, r5, lr}
 800df3a:	4d06      	ldr	r5, [pc, #24]	; (800df54 <_close_r+0x1c>)
 800df3c:	2300      	movs	r3, #0
 800df3e:	4604      	mov	r4, r0
 800df40:	4608      	mov	r0, r1
 800df42:	602b      	str	r3, [r5, #0]
 800df44:	f7f8 fcd7 	bl	80068f6 <_close>
 800df48:	1c43      	adds	r3, r0, #1
 800df4a:	d102      	bne.n	800df52 <_close_r+0x1a>
 800df4c:	682b      	ldr	r3, [r5, #0]
 800df4e:	b103      	cbz	r3, 800df52 <_close_r+0x1a>
 800df50:	6023      	str	r3, [r4, #0]
 800df52:	bd38      	pop	{r3, r4, r5, pc}
 800df54:	200005f0 	.word	0x200005f0

0800df58 <fiprintf>:
 800df58:	b40e      	push	{r1, r2, r3}
 800df5a:	b503      	push	{r0, r1, lr}
 800df5c:	4601      	mov	r1, r0
 800df5e:	ab03      	add	r3, sp, #12
 800df60:	4805      	ldr	r0, [pc, #20]	; (800df78 <fiprintf+0x20>)
 800df62:	f853 2b04 	ldr.w	r2, [r3], #4
 800df66:	6800      	ldr	r0, [r0, #0]
 800df68:	9301      	str	r3, [sp, #4]
 800df6a:	f7ff fe31 	bl	800dbd0 <_vfiprintf_r>
 800df6e:	b002      	add	sp, #8
 800df70:	f85d eb04 	ldr.w	lr, [sp], #4
 800df74:	b003      	add	sp, #12
 800df76:	4770      	bx	lr
 800df78:	20000014 	.word	0x20000014

0800df7c <_fstat_r>:
 800df7c:	b538      	push	{r3, r4, r5, lr}
 800df7e:	4d07      	ldr	r5, [pc, #28]	; (800df9c <_fstat_r+0x20>)
 800df80:	2300      	movs	r3, #0
 800df82:	4604      	mov	r4, r0
 800df84:	4608      	mov	r0, r1
 800df86:	4611      	mov	r1, r2
 800df88:	602b      	str	r3, [r5, #0]
 800df8a:	f7f8 fcc0 	bl	800690e <_fstat>
 800df8e:	1c43      	adds	r3, r0, #1
 800df90:	d102      	bne.n	800df98 <_fstat_r+0x1c>
 800df92:	682b      	ldr	r3, [r5, #0]
 800df94:	b103      	cbz	r3, 800df98 <_fstat_r+0x1c>
 800df96:	6023      	str	r3, [r4, #0]
 800df98:	bd38      	pop	{r3, r4, r5, pc}
 800df9a:	bf00      	nop
 800df9c:	200005f0 	.word	0x200005f0

0800dfa0 <_isatty_r>:
 800dfa0:	b538      	push	{r3, r4, r5, lr}
 800dfa2:	4d06      	ldr	r5, [pc, #24]	; (800dfbc <_isatty_r+0x1c>)
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	4608      	mov	r0, r1
 800dfaa:	602b      	str	r3, [r5, #0]
 800dfac:	f7f8 fcbf 	bl	800692e <_isatty>
 800dfb0:	1c43      	adds	r3, r0, #1
 800dfb2:	d102      	bne.n	800dfba <_isatty_r+0x1a>
 800dfb4:	682b      	ldr	r3, [r5, #0]
 800dfb6:	b103      	cbz	r3, 800dfba <_isatty_r+0x1a>
 800dfb8:	6023      	str	r3, [r4, #0]
 800dfba:	bd38      	pop	{r3, r4, r5, pc}
 800dfbc:	200005f0 	.word	0x200005f0

0800dfc0 <_lseek_r>:
 800dfc0:	b538      	push	{r3, r4, r5, lr}
 800dfc2:	4d07      	ldr	r5, [pc, #28]	; (800dfe0 <_lseek_r+0x20>)
 800dfc4:	4604      	mov	r4, r0
 800dfc6:	4608      	mov	r0, r1
 800dfc8:	4611      	mov	r1, r2
 800dfca:	2200      	movs	r2, #0
 800dfcc:	602a      	str	r2, [r5, #0]
 800dfce:	461a      	mov	r2, r3
 800dfd0:	f7f8 fcb8 	bl	8006944 <_lseek>
 800dfd4:	1c43      	adds	r3, r0, #1
 800dfd6:	d102      	bne.n	800dfde <_lseek_r+0x1e>
 800dfd8:	682b      	ldr	r3, [r5, #0]
 800dfda:	b103      	cbz	r3, 800dfde <_lseek_r+0x1e>
 800dfdc:	6023      	str	r3, [r4, #0]
 800dfde:	bd38      	pop	{r3, r4, r5, pc}
 800dfe0:	200005f0 	.word	0x200005f0

0800dfe4 <__ascii_mbtowc>:
 800dfe4:	b082      	sub	sp, #8
 800dfe6:	b901      	cbnz	r1, 800dfea <__ascii_mbtowc+0x6>
 800dfe8:	a901      	add	r1, sp, #4
 800dfea:	b142      	cbz	r2, 800dffe <__ascii_mbtowc+0x1a>
 800dfec:	b14b      	cbz	r3, 800e002 <__ascii_mbtowc+0x1e>
 800dfee:	7813      	ldrb	r3, [r2, #0]
 800dff0:	600b      	str	r3, [r1, #0]
 800dff2:	7812      	ldrb	r2, [r2, #0]
 800dff4:	1e10      	subs	r0, r2, #0
 800dff6:	bf18      	it	ne
 800dff8:	2001      	movne	r0, #1
 800dffa:	b002      	add	sp, #8
 800dffc:	4770      	bx	lr
 800dffe:	4610      	mov	r0, r2
 800e000:	e7fb      	b.n	800dffa <__ascii_mbtowc+0x16>
 800e002:	f06f 0001 	mvn.w	r0, #1
 800e006:	e7f8      	b.n	800dffa <__ascii_mbtowc+0x16>

0800e008 <memmove>:
 800e008:	4288      	cmp	r0, r1
 800e00a:	b510      	push	{r4, lr}
 800e00c:	eb01 0402 	add.w	r4, r1, r2
 800e010:	d902      	bls.n	800e018 <memmove+0x10>
 800e012:	4284      	cmp	r4, r0
 800e014:	4623      	mov	r3, r4
 800e016:	d807      	bhi.n	800e028 <memmove+0x20>
 800e018:	1e43      	subs	r3, r0, #1
 800e01a:	42a1      	cmp	r1, r4
 800e01c:	d008      	beq.n	800e030 <memmove+0x28>
 800e01e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e022:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e026:	e7f8      	b.n	800e01a <memmove+0x12>
 800e028:	4402      	add	r2, r0
 800e02a:	4601      	mov	r1, r0
 800e02c:	428a      	cmp	r2, r1
 800e02e:	d100      	bne.n	800e032 <memmove+0x2a>
 800e030:	bd10      	pop	{r4, pc}
 800e032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e036:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e03a:	e7f7      	b.n	800e02c <memmove+0x24>

0800e03c <__malloc_lock>:
 800e03c:	4801      	ldr	r0, [pc, #4]	; (800e044 <__malloc_lock+0x8>)
 800e03e:	f7fe bf8c 	b.w	800cf5a <__retarget_lock_acquire_recursive>
 800e042:	bf00      	nop
 800e044:	200005e8 	.word	0x200005e8

0800e048 <__malloc_unlock>:
 800e048:	4801      	ldr	r0, [pc, #4]	; (800e050 <__malloc_unlock+0x8>)
 800e04a:	f7fe bf87 	b.w	800cf5c <__retarget_lock_release_recursive>
 800e04e:	bf00      	nop
 800e050:	200005e8 	.word	0x200005e8

0800e054 <_realloc_r>:
 800e054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e056:	4607      	mov	r7, r0
 800e058:	4614      	mov	r4, r2
 800e05a:	460e      	mov	r6, r1
 800e05c:	b921      	cbnz	r1, 800e068 <_realloc_r+0x14>
 800e05e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e062:	4611      	mov	r1, r2
 800e064:	f7ff bbd4 	b.w	800d810 <_malloc_r>
 800e068:	b922      	cbnz	r2, 800e074 <_realloc_r+0x20>
 800e06a:	f7ff fb81 	bl	800d770 <_free_r>
 800e06e:	4625      	mov	r5, r4
 800e070:	4628      	mov	r0, r5
 800e072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e074:	f000 f83a 	bl	800e0ec <_malloc_usable_size_r>
 800e078:	42a0      	cmp	r0, r4
 800e07a:	d20f      	bcs.n	800e09c <_realloc_r+0x48>
 800e07c:	4621      	mov	r1, r4
 800e07e:	4638      	mov	r0, r7
 800e080:	f7ff fbc6 	bl	800d810 <_malloc_r>
 800e084:	4605      	mov	r5, r0
 800e086:	2800      	cmp	r0, #0
 800e088:	d0f2      	beq.n	800e070 <_realloc_r+0x1c>
 800e08a:	4631      	mov	r1, r6
 800e08c:	4622      	mov	r2, r4
 800e08e:	f7fe ffd3 	bl	800d038 <memcpy>
 800e092:	4631      	mov	r1, r6
 800e094:	4638      	mov	r0, r7
 800e096:	f7ff fb6b 	bl	800d770 <_free_r>
 800e09a:	e7e9      	b.n	800e070 <_realloc_r+0x1c>
 800e09c:	4635      	mov	r5, r6
 800e09e:	e7e7      	b.n	800e070 <_realloc_r+0x1c>

0800e0a0 <_read_r>:
 800e0a0:	b538      	push	{r3, r4, r5, lr}
 800e0a2:	4d07      	ldr	r5, [pc, #28]	; (800e0c0 <_read_r+0x20>)
 800e0a4:	4604      	mov	r4, r0
 800e0a6:	4608      	mov	r0, r1
 800e0a8:	4611      	mov	r1, r2
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	602a      	str	r2, [r5, #0]
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	f7f8 fbe8 	bl	8006884 <_read>
 800e0b4:	1c43      	adds	r3, r0, #1
 800e0b6:	d102      	bne.n	800e0be <_read_r+0x1e>
 800e0b8:	682b      	ldr	r3, [r5, #0]
 800e0ba:	b103      	cbz	r3, 800e0be <_read_r+0x1e>
 800e0bc:	6023      	str	r3, [r4, #0]
 800e0be:	bd38      	pop	{r3, r4, r5, pc}
 800e0c0:	200005f0 	.word	0x200005f0

0800e0c4 <__ascii_wctomb>:
 800e0c4:	b149      	cbz	r1, 800e0da <__ascii_wctomb+0x16>
 800e0c6:	2aff      	cmp	r2, #255	; 0xff
 800e0c8:	bf85      	ittet	hi
 800e0ca:	238a      	movhi	r3, #138	; 0x8a
 800e0cc:	6003      	strhi	r3, [r0, #0]
 800e0ce:	700a      	strbls	r2, [r1, #0]
 800e0d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800e0d4:	bf98      	it	ls
 800e0d6:	2001      	movls	r0, #1
 800e0d8:	4770      	bx	lr
 800e0da:	4608      	mov	r0, r1
 800e0dc:	4770      	bx	lr

0800e0de <abort>:
 800e0de:	b508      	push	{r3, lr}
 800e0e0:	2006      	movs	r0, #6
 800e0e2:	f000 f833 	bl	800e14c <raise>
 800e0e6:	2001      	movs	r0, #1
 800e0e8:	f7f8 fbc2 	bl	8006870 <_exit>

0800e0ec <_malloc_usable_size_r>:
 800e0ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0f0:	1f18      	subs	r0, r3, #4
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	bfbc      	itt	lt
 800e0f6:	580b      	ldrlt	r3, [r1, r0]
 800e0f8:	18c0      	addlt	r0, r0, r3
 800e0fa:	4770      	bx	lr

0800e0fc <_raise_r>:
 800e0fc:	291f      	cmp	r1, #31
 800e0fe:	b538      	push	{r3, r4, r5, lr}
 800e100:	4604      	mov	r4, r0
 800e102:	460d      	mov	r5, r1
 800e104:	d904      	bls.n	800e110 <_raise_r+0x14>
 800e106:	2316      	movs	r3, #22
 800e108:	6003      	str	r3, [r0, #0]
 800e10a:	f04f 30ff 	mov.w	r0, #4294967295
 800e10e:	bd38      	pop	{r3, r4, r5, pc}
 800e110:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e112:	b112      	cbz	r2, 800e11a <_raise_r+0x1e>
 800e114:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e118:	b94b      	cbnz	r3, 800e12e <_raise_r+0x32>
 800e11a:	4620      	mov	r0, r4
 800e11c:	f000 f830 	bl	800e180 <_getpid_r>
 800e120:	462a      	mov	r2, r5
 800e122:	4601      	mov	r1, r0
 800e124:	4620      	mov	r0, r4
 800e126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e12a:	f000 b817 	b.w	800e15c <_kill_r>
 800e12e:	2b01      	cmp	r3, #1
 800e130:	d00a      	beq.n	800e148 <_raise_r+0x4c>
 800e132:	1c59      	adds	r1, r3, #1
 800e134:	d103      	bne.n	800e13e <_raise_r+0x42>
 800e136:	2316      	movs	r3, #22
 800e138:	6003      	str	r3, [r0, #0]
 800e13a:	2001      	movs	r0, #1
 800e13c:	e7e7      	b.n	800e10e <_raise_r+0x12>
 800e13e:	2400      	movs	r4, #0
 800e140:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e144:	4628      	mov	r0, r5
 800e146:	4798      	blx	r3
 800e148:	2000      	movs	r0, #0
 800e14a:	e7e0      	b.n	800e10e <_raise_r+0x12>

0800e14c <raise>:
 800e14c:	4b02      	ldr	r3, [pc, #8]	; (800e158 <raise+0xc>)
 800e14e:	4601      	mov	r1, r0
 800e150:	6818      	ldr	r0, [r3, #0]
 800e152:	f7ff bfd3 	b.w	800e0fc <_raise_r>
 800e156:	bf00      	nop
 800e158:	20000014 	.word	0x20000014

0800e15c <_kill_r>:
 800e15c:	b538      	push	{r3, r4, r5, lr}
 800e15e:	4d07      	ldr	r5, [pc, #28]	; (800e17c <_kill_r+0x20>)
 800e160:	2300      	movs	r3, #0
 800e162:	4604      	mov	r4, r0
 800e164:	4608      	mov	r0, r1
 800e166:	4611      	mov	r1, r2
 800e168:	602b      	str	r3, [r5, #0]
 800e16a:	f7f8 fb71 	bl	8006850 <_kill>
 800e16e:	1c43      	adds	r3, r0, #1
 800e170:	d102      	bne.n	800e178 <_kill_r+0x1c>
 800e172:	682b      	ldr	r3, [r5, #0]
 800e174:	b103      	cbz	r3, 800e178 <_kill_r+0x1c>
 800e176:	6023      	str	r3, [r4, #0]
 800e178:	bd38      	pop	{r3, r4, r5, pc}
 800e17a:	bf00      	nop
 800e17c:	200005f0 	.word	0x200005f0

0800e180 <_getpid_r>:
 800e180:	f7f8 bb5e 	b.w	8006840 <_getpid>
 800e184:	0000      	movs	r0, r0
	...

0800e188 <cos>:
 800e188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e18a:	ec53 2b10 	vmov	r2, r3, d0
 800e18e:	4824      	ldr	r0, [pc, #144]	; (800e220 <cos+0x98>)
 800e190:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e194:	4281      	cmp	r1, r0
 800e196:	dc06      	bgt.n	800e1a6 <cos+0x1e>
 800e198:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800e218 <cos+0x90>
 800e19c:	f000 fc44 	bl	800ea28 <__kernel_cos>
 800e1a0:	ec51 0b10 	vmov	r0, r1, d0
 800e1a4:	e007      	b.n	800e1b6 <cos+0x2e>
 800e1a6:	481f      	ldr	r0, [pc, #124]	; (800e224 <cos+0x9c>)
 800e1a8:	4281      	cmp	r1, r0
 800e1aa:	dd09      	ble.n	800e1c0 <cos+0x38>
 800e1ac:	ee10 0a10 	vmov	r0, s0
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	f7f2 f869 	bl	8000288 <__aeabi_dsub>
 800e1b6:	ec41 0b10 	vmov	d0, r0, r1
 800e1ba:	b005      	add	sp, #20
 800e1bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800e1c0:	4668      	mov	r0, sp
 800e1c2:	f000 f96d 	bl	800e4a0 <__ieee754_rem_pio2>
 800e1c6:	f000 0003 	and.w	r0, r0, #3
 800e1ca:	2801      	cmp	r0, #1
 800e1cc:	d007      	beq.n	800e1de <cos+0x56>
 800e1ce:	2802      	cmp	r0, #2
 800e1d0:	d012      	beq.n	800e1f8 <cos+0x70>
 800e1d2:	b9c0      	cbnz	r0, 800e206 <cos+0x7e>
 800e1d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e1d8:	ed9d 0b00 	vldr	d0, [sp]
 800e1dc:	e7de      	b.n	800e19c <cos+0x14>
 800e1de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e1e2:	ed9d 0b00 	vldr	d0, [sp]
 800e1e6:	f001 f827 	bl	800f238 <__kernel_sin>
 800e1ea:	ec53 2b10 	vmov	r2, r3, d0
 800e1ee:	ee10 0a10 	vmov	r0, s0
 800e1f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e1f6:	e7de      	b.n	800e1b6 <cos+0x2e>
 800e1f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e1fc:	ed9d 0b00 	vldr	d0, [sp]
 800e200:	f000 fc12 	bl	800ea28 <__kernel_cos>
 800e204:	e7f1      	b.n	800e1ea <cos+0x62>
 800e206:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e20a:	ed9d 0b00 	vldr	d0, [sp]
 800e20e:	2001      	movs	r0, #1
 800e210:	f001 f812 	bl	800f238 <__kernel_sin>
 800e214:	e7c4      	b.n	800e1a0 <cos+0x18>
 800e216:	bf00      	nop
	...
 800e220:	3fe921fb 	.word	0x3fe921fb
 800e224:	7fefffff 	.word	0x7fefffff

0800e228 <fabs>:
 800e228:	ec51 0b10 	vmov	r0, r1, d0
 800e22c:	ee10 2a10 	vmov	r2, s0
 800e230:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e234:	ec43 2b10 	vmov	d0, r2, r3
 800e238:	4770      	bx	lr
 800e23a:	0000      	movs	r0, r0
 800e23c:	0000      	movs	r0, r0
	...

0800e240 <floor>:
 800e240:	ec51 0b10 	vmov	r0, r1, d0
 800e244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e248:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e24c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e250:	2e13      	cmp	r6, #19
 800e252:	ee10 5a10 	vmov	r5, s0
 800e256:	ee10 8a10 	vmov	r8, s0
 800e25a:	460c      	mov	r4, r1
 800e25c:	dc32      	bgt.n	800e2c4 <floor+0x84>
 800e25e:	2e00      	cmp	r6, #0
 800e260:	da14      	bge.n	800e28c <floor+0x4c>
 800e262:	a333      	add	r3, pc, #204	; (adr r3, 800e330 <floor+0xf0>)
 800e264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e268:	f7f2 f810 	bl	800028c <__adddf3>
 800e26c:	2200      	movs	r2, #0
 800e26e:	2300      	movs	r3, #0
 800e270:	f7f2 fc52 	bl	8000b18 <__aeabi_dcmpgt>
 800e274:	b138      	cbz	r0, 800e286 <floor+0x46>
 800e276:	2c00      	cmp	r4, #0
 800e278:	da57      	bge.n	800e32a <floor+0xea>
 800e27a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e27e:	431d      	orrs	r5, r3
 800e280:	d001      	beq.n	800e286 <floor+0x46>
 800e282:	4c2d      	ldr	r4, [pc, #180]	; (800e338 <floor+0xf8>)
 800e284:	2500      	movs	r5, #0
 800e286:	4621      	mov	r1, r4
 800e288:	4628      	mov	r0, r5
 800e28a:	e025      	b.n	800e2d8 <floor+0x98>
 800e28c:	4f2b      	ldr	r7, [pc, #172]	; (800e33c <floor+0xfc>)
 800e28e:	4137      	asrs	r7, r6
 800e290:	ea01 0307 	and.w	r3, r1, r7
 800e294:	4303      	orrs	r3, r0
 800e296:	d01f      	beq.n	800e2d8 <floor+0x98>
 800e298:	a325      	add	r3, pc, #148	; (adr r3, 800e330 <floor+0xf0>)
 800e29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29e:	f7f1 fff5 	bl	800028c <__adddf3>
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	f7f2 fc37 	bl	8000b18 <__aeabi_dcmpgt>
 800e2aa:	2800      	cmp	r0, #0
 800e2ac:	d0eb      	beq.n	800e286 <floor+0x46>
 800e2ae:	2c00      	cmp	r4, #0
 800e2b0:	bfbe      	ittt	lt
 800e2b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e2b6:	fa43 f606 	asrlt.w	r6, r3, r6
 800e2ba:	19a4      	addlt	r4, r4, r6
 800e2bc:	ea24 0407 	bic.w	r4, r4, r7
 800e2c0:	2500      	movs	r5, #0
 800e2c2:	e7e0      	b.n	800e286 <floor+0x46>
 800e2c4:	2e33      	cmp	r6, #51	; 0x33
 800e2c6:	dd0b      	ble.n	800e2e0 <floor+0xa0>
 800e2c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e2cc:	d104      	bne.n	800e2d8 <floor+0x98>
 800e2ce:	ee10 2a10 	vmov	r2, s0
 800e2d2:	460b      	mov	r3, r1
 800e2d4:	f7f1 ffda 	bl	800028c <__adddf3>
 800e2d8:	ec41 0b10 	vmov	d0, r0, r1
 800e2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e2e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2e8:	fa23 f707 	lsr.w	r7, r3, r7
 800e2ec:	4207      	tst	r7, r0
 800e2ee:	d0f3      	beq.n	800e2d8 <floor+0x98>
 800e2f0:	a30f      	add	r3, pc, #60	; (adr r3, 800e330 <floor+0xf0>)
 800e2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f6:	f7f1 ffc9 	bl	800028c <__adddf3>
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	f7f2 fc0b 	bl	8000b18 <__aeabi_dcmpgt>
 800e302:	2800      	cmp	r0, #0
 800e304:	d0bf      	beq.n	800e286 <floor+0x46>
 800e306:	2c00      	cmp	r4, #0
 800e308:	da02      	bge.n	800e310 <floor+0xd0>
 800e30a:	2e14      	cmp	r6, #20
 800e30c:	d103      	bne.n	800e316 <floor+0xd6>
 800e30e:	3401      	adds	r4, #1
 800e310:	ea25 0507 	bic.w	r5, r5, r7
 800e314:	e7b7      	b.n	800e286 <floor+0x46>
 800e316:	2301      	movs	r3, #1
 800e318:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e31c:	fa03 f606 	lsl.w	r6, r3, r6
 800e320:	4435      	add	r5, r6
 800e322:	4545      	cmp	r5, r8
 800e324:	bf38      	it	cc
 800e326:	18e4      	addcc	r4, r4, r3
 800e328:	e7f2      	b.n	800e310 <floor+0xd0>
 800e32a:	2500      	movs	r5, #0
 800e32c:	462c      	mov	r4, r5
 800e32e:	e7aa      	b.n	800e286 <floor+0x46>
 800e330:	8800759c 	.word	0x8800759c
 800e334:	7e37e43c 	.word	0x7e37e43c
 800e338:	bff00000 	.word	0xbff00000
 800e33c:	000fffff 	.word	0x000fffff

0800e340 <sin>:
 800e340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e342:	ec53 2b10 	vmov	r2, r3, d0
 800e346:	4826      	ldr	r0, [pc, #152]	; (800e3e0 <sin+0xa0>)
 800e348:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e34c:	4281      	cmp	r1, r0
 800e34e:	dc07      	bgt.n	800e360 <sin+0x20>
 800e350:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800e3d8 <sin+0x98>
 800e354:	2000      	movs	r0, #0
 800e356:	f000 ff6f 	bl	800f238 <__kernel_sin>
 800e35a:	ec51 0b10 	vmov	r0, r1, d0
 800e35e:	e007      	b.n	800e370 <sin+0x30>
 800e360:	4820      	ldr	r0, [pc, #128]	; (800e3e4 <sin+0xa4>)
 800e362:	4281      	cmp	r1, r0
 800e364:	dd09      	ble.n	800e37a <sin+0x3a>
 800e366:	ee10 0a10 	vmov	r0, s0
 800e36a:	4619      	mov	r1, r3
 800e36c:	f7f1 ff8c 	bl	8000288 <__aeabi_dsub>
 800e370:	ec41 0b10 	vmov	d0, r0, r1
 800e374:	b005      	add	sp, #20
 800e376:	f85d fb04 	ldr.w	pc, [sp], #4
 800e37a:	4668      	mov	r0, sp
 800e37c:	f000 f890 	bl	800e4a0 <__ieee754_rem_pio2>
 800e380:	f000 0003 	and.w	r0, r0, #3
 800e384:	2801      	cmp	r0, #1
 800e386:	d008      	beq.n	800e39a <sin+0x5a>
 800e388:	2802      	cmp	r0, #2
 800e38a:	d00d      	beq.n	800e3a8 <sin+0x68>
 800e38c:	b9d0      	cbnz	r0, 800e3c4 <sin+0x84>
 800e38e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e392:	ed9d 0b00 	vldr	d0, [sp]
 800e396:	2001      	movs	r0, #1
 800e398:	e7dd      	b.n	800e356 <sin+0x16>
 800e39a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e39e:	ed9d 0b00 	vldr	d0, [sp]
 800e3a2:	f000 fb41 	bl	800ea28 <__kernel_cos>
 800e3a6:	e7d8      	b.n	800e35a <sin+0x1a>
 800e3a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e3ac:	ed9d 0b00 	vldr	d0, [sp]
 800e3b0:	2001      	movs	r0, #1
 800e3b2:	f000 ff41 	bl	800f238 <__kernel_sin>
 800e3b6:	ec53 2b10 	vmov	r2, r3, d0
 800e3ba:	ee10 0a10 	vmov	r0, s0
 800e3be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e3c2:	e7d5      	b.n	800e370 <sin+0x30>
 800e3c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e3c8:	ed9d 0b00 	vldr	d0, [sp]
 800e3cc:	f000 fb2c 	bl	800ea28 <__kernel_cos>
 800e3d0:	e7f1      	b.n	800e3b6 <sin+0x76>
 800e3d2:	bf00      	nop
 800e3d4:	f3af 8000 	nop.w
	...
 800e3e0:	3fe921fb 	.word	0x3fe921fb
 800e3e4:	7fefffff 	.word	0x7fefffff

0800e3e8 <sqrt>:
 800e3e8:	b538      	push	{r3, r4, r5, lr}
 800e3ea:	ed2d 8b02 	vpush	{d8}
 800e3ee:	ec55 4b10 	vmov	r4, r5, d0
 800e3f2:	f000 fa5f 	bl	800e8b4 <__ieee754_sqrt>
 800e3f6:	4b15      	ldr	r3, [pc, #84]	; (800e44c <sqrt+0x64>)
 800e3f8:	eeb0 8a40 	vmov.f32	s16, s0
 800e3fc:	eef0 8a60 	vmov.f32	s17, s1
 800e400:	f993 3000 	ldrsb.w	r3, [r3]
 800e404:	3301      	adds	r3, #1
 800e406:	d019      	beq.n	800e43c <sqrt+0x54>
 800e408:	4622      	mov	r2, r4
 800e40a:	462b      	mov	r3, r5
 800e40c:	4620      	mov	r0, r4
 800e40e:	4629      	mov	r1, r5
 800e410:	f7f2 fb8c 	bl	8000b2c <__aeabi_dcmpun>
 800e414:	b990      	cbnz	r0, 800e43c <sqrt+0x54>
 800e416:	2200      	movs	r2, #0
 800e418:	2300      	movs	r3, #0
 800e41a:	4620      	mov	r0, r4
 800e41c:	4629      	mov	r1, r5
 800e41e:	f7f2 fb5d 	bl	8000adc <__aeabi_dcmplt>
 800e422:	b158      	cbz	r0, 800e43c <sqrt+0x54>
 800e424:	f7fc ff5a 	bl	800b2dc <__errno>
 800e428:	2321      	movs	r3, #33	; 0x21
 800e42a:	6003      	str	r3, [r0, #0]
 800e42c:	2200      	movs	r2, #0
 800e42e:	2300      	movs	r3, #0
 800e430:	4610      	mov	r0, r2
 800e432:	4619      	mov	r1, r3
 800e434:	f7f2 fa0a 	bl	800084c <__aeabi_ddiv>
 800e438:	ec41 0b18 	vmov	d8, r0, r1
 800e43c:	eeb0 0a48 	vmov.f32	s0, s16
 800e440:	eef0 0a68 	vmov.f32	s1, s17
 800e444:	ecbd 8b02 	vpop	{d8}
 800e448:	bd38      	pop	{r3, r4, r5, pc}
 800e44a:	bf00      	nop
 800e44c:	200001e4 	.word	0x200001e4

0800e450 <sqrtf>:
 800e450:	b508      	push	{r3, lr}
 800e452:	ed2d 8b02 	vpush	{d8}
 800e456:	eeb0 8a40 	vmov.f32	s16, s0
 800e45a:	f000 fadf 	bl	800ea1c <__ieee754_sqrtf>
 800e45e:	4b0d      	ldr	r3, [pc, #52]	; (800e494 <sqrtf+0x44>)
 800e460:	f993 3000 	ldrsb.w	r3, [r3]
 800e464:	3301      	adds	r3, #1
 800e466:	d011      	beq.n	800e48c <sqrtf+0x3c>
 800e468:	eeb4 8a48 	vcmp.f32	s16, s16
 800e46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e470:	d60c      	bvs.n	800e48c <sqrtf+0x3c>
 800e472:	eddf 8a09 	vldr	s17, [pc, #36]	; 800e498 <sqrtf+0x48>
 800e476:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e47e:	d505      	bpl.n	800e48c <sqrtf+0x3c>
 800e480:	f7fc ff2c 	bl	800b2dc <__errno>
 800e484:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e488:	2321      	movs	r3, #33	; 0x21
 800e48a:	6003      	str	r3, [r0, #0]
 800e48c:	ecbd 8b02 	vpop	{d8}
 800e490:	bd08      	pop	{r3, pc}
 800e492:	bf00      	nop
 800e494:	200001e4 	.word	0x200001e4
	...

0800e4a0 <__ieee754_rem_pio2>:
 800e4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a4:	ed2d 8b02 	vpush	{d8}
 800e4a8:	ec55 4b10 	vmov	r4, r5, d0
 800e4ac:	4bca      	ldr	r3, [pc, #808]	; (800e7d8 <__ieee754_rem_pio2+0x338>)
 800e4ae:	b08b      	sub	sp, #44	; 0x2c
 800e4b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e4b4:	4598      	cmp	r8, r3
 800e4b6:	4682      	mov	sl, r0
 800e4b8:	9502      	str	r5, [sp, #8]
 800e4ba:	dc08      	bgt.n	800e4ce <__ieee754_rem_pio2+0x2e>
 800e4bc:	2200      	movs	r2, #0
 800e4be:	2300      	movs	r3, #0
 800e4c0:	ed80 0b00 	vstr	d0, [r0]
 800e4c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e4c8:	f04f 0b00 	mov.w	fp, #0
 800e4cc:	e028      	b.n	800e520 <__ieee754_rem_pio2+0x80>
 800e4ce:	4bc3      	ldr	r3, [pc, #780]	; (800e7dc <__ieee754_rem_pio2+0x33c>)
 800e4d0:	4598      	cmp	r8, r3
 800e4d2:	dc78      	bgt.n	800e5c6 <__ieee754_rem_pio2+0x126>
 800e4d4:	9b02      	ldr	r3, [sp, #8]
 800e4d6:	4ec2      	ldr	r6, [pc, #776]	; (800e7e0 <__ieee754_rem_pio2+0x340>)
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	ee10 0a10 	vmov	r0, s0
 800e4de:	a3b0      	add	r3, pc, #704	; (adr r3, 800e7a0 <__ieee754_rem_pio2+0x300>)
 800e4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e4:	4629      	mov	r1, r5
 800e4e6:	dd39      	ble.n	800e55c <__ieee754_rem_pio2+0xbc>
 800e4e8:	f7f1 fece 	bl	8000288 <__aeabi_dsub>
 800e4ec:	45b0      	cmp	r8, r6
 800e4ee:	4604      	mov	r4, r0
 800e4f0:	460d      	mov	r5, r1
 800e4f2:	d01b      	beq.n	800e52c <__ieee754_rem_pio2+0x8c>
 800e4f4:	a3ac      	add	r3, pc, #688	; (adr r3, 800e7a8 <__ieee754_rem_pio2+0x308>)
 800e4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fa:	f7f1 fec5 	bl	8000288 <__aeabi_dsub>
 800e4fe:	4602      	mov	r2, r0
 800e500:	460b      	mov	r3, r1
 800e502:	e9ca 2300 	strd	r2, r3, [sl]
 800e506:	4620      	mov	r0, r4
 800e508:	4629      	mov	r1, r5
 800e50a:	f7f1 febd 	bl	8000288 <__aeabi_dsub>
 800e50e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e7a8 <__ieee754_rem_pio2+0x308>)
 800e510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e514:	f7f1 feb8 	bl	8000288 <__aeabi_dsub>
 800e518:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e51c:	f04f 0b01 	mov.w	fp, #1
 800e520:	4658      	mov	r0, fp
 800e522:	b00b      	add	sp, #44	; 0x2c
 800e524:	ecbd 8b02 	vpop	{d8}
 800e528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e52c:	a3a0      	add	r3, pc, #640	; (adr r3, 800e7b0 <__ieee754_rem_pio2+0x310>)
 800e52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e532:	f7f1 fea9 	bl	8000288 <__aeabi_dsub>
 800e536:	a3a0      	add	r3, pc, #640	; (adr r3, 800e7b8 <__ieee754_rem_pio2+0x318>)
 800e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53c:	4604      	mov	r4, r0
 800e53e:	460d      	mov	r5, r1
 800e540:	f7f1 fea2 	bl	8000288 <__aeabi_dsub>
 800e544:	4602      	mov	r2, r0
 800e546:	460b      	mov	r3, r1
 800e548:	e9ca 2300 	strd	r2, r3, [sl]
 800e54c:	4620      	mov	r0, r4
 800e54e:	4629      	mov	r1, r5
 800e550:	f7f1 fe9a 	bl	8000288 <__aeabi_dsub>
 800e554:	a398      	add	r3, pc, #608	; (adr r3, 800e7b8 <__ieee754_rem_pio2+0x318>)
 800e556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55a:	e7db      	b.n	800e514 <__ieee754_rem_pio2+0x74>
 800e55c:	f7f1 fe96 	bl	800028c <__adddf3>
 800e560:	45b0      	cmp	r8, r6
 800e562:	4604      	mov	r4, r0
 800e564:	460d      	mov	r5, r1
 800e566:	d016      	beq.n	800e596 <__ieee754_rem_pio2+0xf6>
 800e568:	a38f      	add	r3, pc, #572	; (adr r3, 800e7a8 <__ieee754_rem_pio2+0x308>)
 800e56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56e:	f7f1 fe8d 	bl	800028c <__adddf3>
 800e572:	4602      	mov	r2, r0
 800e574:	460b      	mov	r3, r1
 800e576:	e9ca 2300 	strd	r2, r3, [sl]
 800e57a:	4620      	mov	r0, r4
 800e57c:	4629      	mov	r1, r5
 800e57e:	f7f1 fe83 	bl	8000288 <__aeabi_dsub>
 800e582:	a389      	add	r3, pc, #548	; (adr r3, 800e7a8 <__ieee754_rem_pio2+0x308>)
 800e584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e588:	f7f1 fe80 	bl	800028c <__adddf3>
 800e58c:	f04f 3bff 	mov.w	fp, #4294967295
 800e590:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e594:	e7c4      	b.n	800e520 <__ieee754_rem_pio2+0x80>
 800e596:	a386      	add	r3, pc, #536	; (adr r3, 800e7b0 <__ieee754_rem_pio2+0x310>)
 800e598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59c:	f7f1 fe76 	bl	800028c <__adddf3>
 800e5a0:	a385      	add	r3, pc, #532	; (adr r3, 800e7b8 <__ieee754_rem_pio2+0x318>)
 800e5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a6:	4604      	mov	r4, r0
 800e5a8:	460d      	mov	r5, r1
 800e5aa:	f7f1 fe6f 	bl	800028c <__adddf3>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	e9ca 2300 	strd	r2, r3, [sl]
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	4629      	mov	r1, r5
 800e5ba:	f7f1 fe65 	bl	8000288 <__aeabi_dsub>
 800e5be:	a37e      	add	r3, pc, #504	; (adr r3, 800e7b8 <__ieee754_rem_pio2+0x318>)
 800e5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c4:	e7e0      	b.n	800e588 <__ieee754_rem_pio2+0xe8>
 800e5c6:	4b87      	ldr	r3, [pc, #540]	; (800e7e4 <__ieee754_rem_pio2+0x344>)
 800e5c8:	4598      	cmp	r8, r3
 800e5ca:	f300 80d9 	bgt.w	800e780 <__ieee754_rem_pio2+0x2e0>
 800e5ce:	f7ff fe2b 	bl	800e228 <fabs>
 800e5d2:	ec55 4b10 	vmov	r4, r5, d0
 800e5d6:	ee10 0a10 	vmov	r0, s0
 800e5da:	a379      	add	r3, pc, #484	; (adr r3, 800e7c0 <__ieee754_rem_pio2+0x320>)
 800e5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e0:	4629      	mov	r1, r5
 800e5e2:	f7f2 f809 	bl	80005f8 <__aeabi_dmul>
 800e5e6:	4b80      	ldr	r3, [pc, #512]	; (800e7e8 <__ieee754_rem_pio2+0x348>)
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	f7f1 fe4f 	bl	800028c <__adddf3>
 800e5ee:	f7f2 fab3 	bl	8000b58 <__aeabi_d2iz>
 800e5f2:	4683      	mov	fp, r0
 800e5f4:	f7f1 ff96 	bl	8000524 <__aeabi_i2d>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	ec43 2b18 	vmov	d8, r2, r3
 800e600:	a367      	add	r3, pc, #412	; (adr r3, 800e7a0 <__ieee754_rem_pio2+0x300>)
 800e602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e606:	f7f1 fff7 	bl	80005f8 <__aeabi_dmul>
 800e60a:	4602      	mov	r2, r0
 800e60c:	460b      	mov	r3, r1
 800e60e:	4620      	mov	r0, r4
 800e610:	4629      	mov	r1, r5
 800e612:	f7f1 fe39 	bl	8000288 <__aeabi_dsub>
 800e616:	a364      	add	r3, pc, #400	; (adr r3, 800e7a8 <__ieee754_rem_pio2+0x308>)
 800e618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61c:	4606      	mov	r6, r0
 800e61e:	460f      	mov	r7, r1
 800e620:	ec51 0b18 	vmov	r0, r1, d8
 800e624:	f7f1 ffe8 	bl	80005f8 <__aeabi_dmul>
 800e628:	f1bb 0f1f 	cmp.w	fp, #31
 800e62c:	4604      	mov	r4, r0
 800e62e:	460d      	mov	r5, r1
 800e630:	dc0d      	bgt.n	800e64e <__ieee754_rem_pio2+0x1ae>
 800e632:	4b6e      	ldr	r3, [pc, #440]	; (800e7ec <__ieee754_rem_pio2+0x34c>)
 800e634:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e63c:	4543      	cmp	r3, r8
 800e63e:	d006      	beq.n	800e64e <__ieee754_rem_pio2+0x1ae>
 800e640:	4622      	mov	r2, r4
 800e642:	462b      	mov	r3, r5
 800e644:	4630      	mov	r0, r6
 800e646:	4639      	mov	r1, r7
 800e648:	f7f1 fe1e 	bl	8000288 <__aeabi_dsub>
 800e64c:	e00f      	b.n	800e66e <__ieee754_rem_pio2+0x1ce>
 800e64e:	462b      	mov	r3, r5
 800e650:	4622      	mov	r2, r4
 800e652:	4630      	mov	r0, r6
 800e654:	4639      	mov	r1, r7
 800e656:	f7f1 fe17 	bl	8000288 <__aeabi_dsub>
 800e65a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e65e:	9303      	str	r3, [sp, #12]
 800e660:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e664:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e668:	f1b8 0f10 	cmp.w	r8, #16
 800e66c:	dc02      	bgt.n	800e674 <__ieee754_rem_pio2+0x1d4>
 800e66e:	e9ca 0100 	strd	r0, r1, [sl]
 800e672:	e039      	b.n	800e6e8 <__ieee754_rem_pio2+0x248>
 800e674:	a34e      	add	r3, pc, #312	; (adr r3, 800e7b0 <__ieee754_rem_pio2+0x310>)
 800e676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e67a:	ec51 0b18 	vmov	r0, r1, d8
 800e67e:	f7f1 ffbb 	bl	80005f8 <__aeabi_dmul>
 800e682:	4604      	mov	r4, r0
 800e684:	460d      	mov	r5, r1
 800e686:	4602      	mov	r2, r0
 800e688:	460b      	mov	r3, r1
 800e68a:	4630      	mov	r0, r6
 800e68c:	4639      	mov	r1, r7
 800e68e:	f7f1 fdfb 	bl	8000288 <__aeabi_dsub>
 800e692:	4602      	mov	r2, r0
 800e694:	460b      	mov	r3, r1
 800e696:	4680      	mov	r8, r0
 800e698:	4689      	mov	r9, r1
 800e69a:	4630      	mov	r0, r6
 800e69c:	4639      	mov	r1, r7
 800e69e:	f7f1 fdf3 	bl	8000288 <__aeabi_dsub>
 800e6a2:	4622      	mov	r2, r4
 800e6a4:	462b      	mov	r3, r5
 800e6a6:	f7f1 fdef 	bl	8000288 <__aeabi_dsub>
 800e6aa:	a343      	add	r3, pc, #268	; (adr r3, 800e7b8 <__ieee754_rem_pio2+0x318>)
 800e6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	460d      	mov	r5, r1
 800e6b4:	ec51 0b18 	vmov	r0, r1, d8
 800e6b8:	f7f1 ff9e 	bl	80005f8 <__aeabi_dmul>
 800e6bc:	4622      	mov	r2, r4
 800e6be:	462b      	mov	r3, r5
 800e6c0:	f7f1 fde2 	bl	8000288 <__aeabi_dsub>
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	4604      	mov	r4, r0
 800e6ca:	460d      	mov	r5, r1
 800e6cc:	4640      	mov	r0, r8
 800e6ce:	4649      	mov	r1, r9
 800e6d0:	f7f1 fdda 	bl	8000288 <__aeabi_dsub>
 800e6d4:	9a03      	ldr	r2, [sp, #12]
 800e6d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e6da:	1ad3      	subs	r3, r2, r3
 800e6dc:	2b31      	cmp	r3, #49	; 0x31
 800e6de:	dc24      	bgt.n	800e72a <__ieee754_rem_pio2+0x28a>
 800e6e0:	e9ca 0100 	strd	r0, r1, [sl]
 800e6e4:	4646      	mov	r6, r8
 800e6e6:	464f      	mov	r7, r9
 800e6e8:	e9da 8900 	ldrd	r8, r9, [sl]
 800e6ec:	4630      	mov	r0, r6
 800e6ee:	4642      	mov	r2, r8
 800e6f0:	464b      	mov	r3, r9
 800e6f2:	4639      	mov	r1, r7
 800e6f4:	f7f1 fdc8 	bl	8000288 <__aeabi_dsub>
 800e6f8:	462b      	mov	r3, r5
 800e6fa:	4622      	mov	r2, r4
 800e6fc:	f7f1 fdc4 	bl	8000288 <__aeabi_dsub>
 800e700:	9b02      	ldr	r3, [sp, #8]
 800e702:	2b00      	cmp	r3, #0
 800e704:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e708:	f6bf af0a 	bge.w	800e520 <__ieee754_rem_pio2+0x80>
 800e70c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e710:	f8ca 3004 	str.w	r3, [sl, #4]
 800e714:	f8ca 8000 	str.w	r8, [sl]
 800e718:	f8ca 0008 	str.w	r0, [sl, #8]
 800e71c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e720:	f8ca 300c 	str.w	r3, [sl, #12]
 800e724:	f1cb 0b00 	rsb	fp, fp, #0
 800e728:	e6fa      	b.n	800e520 <__ieee754_rem_pio2+0x80>
 800e72a:	a327      	add	r3, pc, #156	; (adr r3, 800e7c8 <__ieee754_rem_pio2+0x328>)
 800e72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e730:	ec51 0b18 	vmov	r0, r1, d8
 800e734:	f7f1 ff60 	bl	80005f8 <__aeabi_dmul>
 800e738:	4604      	mov	r4, r0
 800e73a:	460d      	mov	r5, r1
 800e73c:	4602      	mov	r2, r0
 800e73e:	460b      	mov	r3, r1
 800e740:	4640      	mov	r0, r8
 800e742:	4649      	mov	r1, r9
 800e744:	f7f1 fda0 	bl	8000288 <__aeabi_dsub>
 800e748:	4602      	mov	r2, r0
 800e74a:	460b      	mov	r3, r1
 800e74c:	4606      	mov	r6, r0
 800e74e:	460f      	mov	r7, r1
 800e750:	4640      	mov	r0, r8
 800e752:	4649      	mov	r1, r9
 800e754:	f7f1 fd98 	bl	8000288 <__aeabi_dsub>
 800e758:	4622      	mov	r2, r4
 800e75a:	462b      	mov	r3, r5
 800e75c:	f7f1 fd94 	bl	8000288 <__aeabi_dsub>
 800e760:	a31b      	add	r3, pc, #108	; (adr r3, 800e7d0 <__ieee754_rem_pio2+0x330>)
 800e762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e766:	4604      	mov	r4, r0
 800e768:	460d      	mov	r5, r1
 800e76a:	ec51 0b18 	vmov	r0, r1, d8
 800e76e:	f7f1 ff43 	bl	80005f8 <__aeabi_dmul>
 800e772:	4622      	mov	r2, r4
 800e774:	462b      	mov	r3, r5
 800e776:	f7f1 fd87 	bl	8000288 <__aeabi_dsub>
 800e77a:	4604      	mov	r4, r0
 800e77c:	460d      	mov	r5, r1
 800e77e:	e75f      	b.n	800e640 <__ieee754_rem_pio2+0x1a0>
 800e780:	4b1b      	ldr	r3, [pc, #108]	; (800e7f0 <__ieee754_rem_pio2+0x350>)
 800e782:	4598      	cmp	r8, r3
 800e784:	dd36      	ble.n	800e7f4 <__ieee754_rem_pio2+0x354>
 800e786:	ee10 2a10 	vmov	r2, s0
 800e78a:	462b      	mov	r3, r5
 800e78c:	4620      	mov	r0, r4
 800e78e:	4629      	mov	r1, r5
 800e790:	f7f1 fd7a 	bl	8000288 <__aeabi_dsub>
 800e794:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e798:	e9ca 0100 	strd	r0, r1, [sl]
 800e79c:	e694      	b.n	800e4c8 <__ieee754_rem_pio2+0x28>
 800e79e:	bf00      	nop
 800e7a0:	54400000 	.word	0x54400000
 800e7a4:	3ff921fb 	.word	0x3ff921fb
 800e7a8:	1a626331 	.word	0x1a626331
 800e7ac:	3dd0b461 	.word	0x3dd0b461
 800e7b0:	1a600000 	.word	0x1a600000
 800e7b4:	3dd0b461 	.word	0x3dd0b461
 800e7b8:	2e037073 	.word	0x2e037073
 800e7bc:	3ba3198a 	.word	0x3ba3198a
 800e7c0:	6dc9c883 	.word	0x6dc9c883
 800e7c4:	3fe45f30 	.word	0x3fe45f30
 800e7c8:	2e000000 	.word	0x2e000000
 800e7cc:	3ba3198a 	.word	0x3ba3198a
 800e7d0:	252049c1 	.word	0x252049c1
 800e7d4:	397b839a 	.word	0x397b839a
 800e7d8:	3fe921fb 	.word	0x3fe921fb
 800e7dc:	4002d97b 	.word	0x4002d97b
 800e7e0:	3ff921fb 	.word	0x3ff921fb
 800e7e4:	413921fb 	.word	0x413921fb
 800e7e8:	3fe00000 	.word	0x3fe00000
 800e7ec:	0801c9cc 	.word	0x0801c9cc
 800e7f0:	7fefffff 	.word	0x7fefffff
 800e7f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e7f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e7fc:	ee10 0a10 	vmov	r0, s0
 800e800:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e804:	ee10 6a10 	vmov	r6, s0
 800e808:	460f      	mov	r7, r1
 800e80a:	f7f2 f9a5 	bl	8000b58 <__aeabi_d2iz>
 800e80e:	f7f1 fe89 	bl	8000524 <__aeabi_i2d>
 800e812:	4602      	mov	r2, r0
 800e814:	460b      	mov	r3, r1
 800e816:	4630      	mov	r0, r6
 800e818:	4639      	mov	r1, r7
 800e81a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e81e:	f7f1 fd33 	bl	8000288 <__aeabi_dsub>
 800e822:	4b22      	ldr	r3, [pc, #136]	; (800e8ac <__ieee754_rem_pio2+0x40c>)
 800e824:	2200      	movs	r2, #0
 800e826:	f7f1 fee7 	bl	80005f8 <__aeabi_dmul>
 800e82a:	460f      	mov	r7, r1
 800e82c:	4606      	mov	r6, r0
 800e82e:	f7f2 f993 	bl	8000b58 <__aeabi_d2iz>
 800e832:	f7f1 fe77 	bl	8000524 <__aeabi_i2d>
 800e836:	4602      	mov	r2, r0
 800e838:	460b      	mov	r3, r1
 800e83a:	4630      	mov	r0, r6
 800e83c:	4639      	mov	r1, r7
 800e83e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e842:	f7f1 fd21 	bl	8000288 <__aeabi_dsub>
 800e846:	4b19      	ldr	r3, [pc, #100]	; (800e8ac <__ieee754_rem_pio2+0x40c>)
 800e848:	2200      	movs	r2, #0
 800e84a:	f7f1 fed5 	bl	80005f8 <__aeabi_dmul>
 800e84e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e852:	ad04      	add	r5, sp, #16
 800e854:	f04f 0803 	mov.w	r8, #3
 800e858:	46a9      	mov	r9, r5
 800e85a:	2600      	movs	r6, #0
 800e85c:	2700      	movs	r7, #0
 800e85e:	4632      	mov	r2, r6
 800e860:	463b      	mov	r3, r7
 800e862:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e866:	46c3      	mov	fp, r8
 800e868:	3d08      	subs	r5, #8
 800e86a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e86e:	f7f2 f92b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e872:	2800      	cmp	r0, #0
 800e874:	d1f3      	bne.n	800e85e <__ieee754_rem_pio2+0x3be>
 800e876:	4b0e      	ldr	r3, [pc, #56]	; (800e8b0 <__ieee754_rem_pio2+0x410>)
 800e878:	9301      	str	r3, [sp, #4]
 800e87a:	2302      	movs	r3, #2
 800e87c:	9300      	str	r3, [sp, #0]
 800e87e:	4622      	mov	r2, r4
 800e880:	465b      	mov	r3, fp
 800e882:	4651      	mov	r1, sl
 800e884:	4648      	mov	r0, r9
 800e886:	f000 f997 	bl	800ebb8 <__kernel_rem_pio2>
 800e88a:	9b02      	ldr	r3, [sp, #8]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	4683      	mov	fp, r0
 800e890:	f6bf ae46 	bge.w	800e520 <__ieee754_rem_pio2+0x80>
 800e894:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e898:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e89c:	f8ca 3004 	str.w	r3, [sl, #4]
 800e8a0:	f8da 300c 	ldr.w	r3, [sl, #12]
 800e8a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e8a8:	e73a      	b.n	800e720 <__ieee754_rem_pio2+0x280>
 800e8aa:	bf00      	nop
 800e8ac:	41700000 	.word	0x41700000
 800e8b0:	0801ca4c 	.word	0x0801ca4c

0800e8b4 <__ieee754_sqrt>:
 800e8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b8:	ec55 4b10 	vmov	r4, r5, d0
 800e8bc:	4e56      	ldr	r6, [pc, #344]	; (800ea18 <__ieee754_sqrt+0x164>)
 800e8be:	43ae      	bics	r6, r5
 800e8c0:	ee10 0a10 	vmov	r0, s0
 800e8c4:	ee10 3a10 	vmov	r3, s0
 800e8c8:	4629      	mov	r1, r5
 800e8ca:	462a      	mov	r2, r5
 800e8cc:	d110      	bne.n	800e8f0 <__ieee754_sqrt+0x3c>
 800e8ce:	ee10 2a10 	vmov	r2, s0
 800e8d2:	462b      	mov	r3, r5
 800e8d4:	f7f1 fe90 	bl	80005f8 <__aeabi_dmul>
 800e8d8:	4602      	mov	r2, r0
 800e8da:	460b      	mov	r3, r1
 800e8dc:	4620      	mov	r0, r4
 800e8de:	4629      	mov	r1, r5
 800e8e0:	f7f1 fcd4 	bl	800028c <__adddf3>
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	460d      	mov	r5, r1
 800e8e8:	ec45 4b10 	vmov	d0, r4, r5
 800e8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8f0:	2d00      	cmp	r5, #0
 800e8f2:	dc10      	bgt.n	800e916 <__ieee754_sqrt+0x62>
 800e8f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e8f8:	4330      	orrs	r0, r6
 800e8fa:	d0f5      	beq.n	800e8e8 <__ieee754_sqrt+0x34>
 800e8fc:	b15d      	cbz	r5, 800e916 <__ieee754_sqrt+0x62>
 800e8fe:	ee10 2a10 	vmov	r2, s0
 800e902:	462b      	mov	r3, r5
 800e904:	ee10 0a10 	vmov	r0, s0
 800e908:	f7f1 fcbe 	bl	8000288 <__aeabi_dsub>
 800e90c:	4602      	mov	r2, r0
 800e90e:	460b      	mov	r3, r1
 800e910:	f7f1 ff9c 	bl	800084c <__aeabi_ddiv>
 800e914:	e7e6      	b.n	800e8e4 <__ieee754_sqrt+0x30>
 800e916:	1509      	asrs	r1, r1, #20
 800e918:	d076      	beq.n	800ea08 <__ieee754_sqrt+0x154>
 800e91a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e91e:	07ce      	lsls	r6, r1, #31
 800e920:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800e924:	bf5e      	ittt	pl
 800e926:	0fda      	lsrpl	r2, r3, #31
 800e928:	005b      	lslpl	r3, r3, #1
 800e92a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800e92e:	0fda      	lsrs	r2, r3, #31
 800e930:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800e934:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800e938:	2000      	movs	r0, #0
 800e93a:	106d      	asrs	r5, r5, #1
 800e93c:	005b      	lsls	r3, r3, #1
 800e93e:	f04f 0e16 	mov.w	lr, #22
 800e942:	4684      	mov	ip, r0
 800e944:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e948:	eb0c 0401 	add.w	r4, ip, r1
 800e94c:	4294      	cmp	r4, r2
 800e94e:	bfde      	ittt	le
 800e950:	1b12      	suble	r2, r2, r4
 800e952:	eb04 0c01 	addle.w	ip, r4, r1
 800e956:	1840      	addle	r0, r0, r1
 800e958:	0052      	lsls	r2, r2, #1
 800e95a:	f1be 0e01 	subs.w	lr, lr, #1
 800e95e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e962:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e966:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e96a:	d1ed      	bne.n	800e948 <__ieee754_sqrt+0x94>
 800e96c:	4671      	mov	r1, lr
 800e96e:	2720      	movs	r7, #32
 800e970:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e974:	4562      	cmp	r2, ip
 800e976:	eb04 060e 	add.w	r6, r4, lr
 800e97a:	dc02      	bgt.n	800e982 <__ieee754_sqrt+0xce>
 800e97c:	d113      	bne.n	800e9a6 <__ieee754_sqrt+0xf2>
 800e97e:	429e      	cmp	r6, r3
 800e980:	d811      	bhi.n	800e9a6 <__ieee754_sqrt+0xf2>
 800e982:	2e00      	cmp	r6, #0
 800e984:	eb06 0e04 	add.w	lr, r6, r4
 800e988:	da43      	bge.n	800ea12 <__ieee754_sqrt+0x15e>
 800e98a:	f1be 0f00 	cmp.w	lr, #0
 800e98e:	db40      	blt.n	800ea12 <__ieee754_sqrt+0x15e>
 800e990:	f10c 0801 	add.w	r8, ip, #1
 800e994:	eba2 020c 	sub.w	r2, r2, ip
 800e998:	429e      	cmp	r6, r3
 800e99a:	bf88      	it	hi
 800e99c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e9a0:	1b9b      	subs	r3, r3, r6
 800e9a2:	4421      	add	r1, r4
 800e9a4:	46c4      	mov	ip, r8
 800e9a6:	0052      	lsls	r2, r2, #1
 800e9a8:	3f01      	subs	r7, #1
 800e9aa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e9ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e9b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e9b6:	d1dd      	bne.n	800e974 <__ieee754_sqrt+0xc0>
 800e9b8:	4313      	orrs	r3, r2
 800e9ba:	d006      	beq.n	800e9ca <__ieee754_sqrt+0x116>
 800e9bc:	1c4c      	adds	r4, r1, #1
 800e9be:	bf13      	iteet	ne
 800e9c0:	3101      	addne	r1, #1
 800e9c2:	3001      	addeq	r0, #1
 800e9c4:	4639      	moveq	r1, r7
 800e9c6:	f021 0101 	bicne.w	r1, r1, #1
 800e9ca:	1043      	asrs	r3, r0, #1
 800e9cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e9d0:	0849      	lsrs	r1, r1, #1
 800e9d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e9d6:	07c2      	lsls	r2, r0, #31
 800e9d8:	bf48      	it	mi
 800e9da:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e9de:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800e9e2:	460c      	mov	r4, r1
 800e9e4:	463d      	mov	r5, r7
 800e9e6:	e77f      	b.n	800e8e8 <__ieee754_sqrt+0x34>
 800e9e8:	0ada      	lsrs	r2, r3, #11
 800e9ea:	3815      	subs	r0, #21
 800e9ec:	055b      	lsls	r3, r3, #21
 800e9ee:	2a00      	cmp	r2, #0
 800e9f0:	d0fa      	beq.n	800e9e8 <__ieee754_sqrt+0x134>
 800e9f2:	02d7      	lsls	r7, r2, #11
 800e9f4:	d50a      	bpl.n	800ea0c <__ieee754_sqrt+0x158>
 800e9f6:	f1c1 0420 	rsb	r4, r1, #32
 800e9fa:	fa23 f404 	lsr.w	r4, r3, r4
 800e9fe:	1e4d      	subs	r5, r1, #1
 800ea00:	408b      	lsls	r3, r1
 800ea02:	4322      	orrs	r2, r4
 800ea04:	1b41      	subs	r1, r0, r5
 800ea06:	e788      	b.n	800e91a <__ieee754_sqrt+0x66>
 800ea08:	4608      	mov	r0, r1
 800ea0a:	e7f0      	b.n	800e9ee <__ieee754_sqrt+0x13a>
 800ea0c:	0052      	lsls	r2, r2, #1
 800ea0e:	3101      	adds	r1, #1
 800ea10:	e7ef      	b.n	800e9f2 <__ieee754_sqrt+0x13e>
 800ea12:	46e0      	mov	r8, ip
 800ea14:	e7be      	b.n	800e994 <__ieee754_sqrt+0xe0>
 800ea16:	bf00      	nop
 800ea18:	7ff00000 	.word	0x7ff00000

0800ea1c <__ieee754_sqrtf>:
 800ea1c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ea20:	4770      	bx	lr
 800ea22:	0000      	movs	r0, r0
 800ea24:	0000      	movs	r0, r0
	...

0800ea28 <__kernel_cos>:
 800ea28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea2c:	ec57 6b10 	vmov	r6, r7, d0
 800ea30:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ea34:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ea38:	ed8d 1b00 	vstr	d1, [sp]
 800ea3c:	da07      	bge.n	800ea4e <__kernel_cos+0x26>
 800ea3e:	ee10 0a10 	vmov	r0, s0
 800ea42:	4639      	mov	r1, r7
 800ea44:	f7f2 f888 	bl	8000b58 <__aeabi_d2iz>
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	f000 8088 	beq.w	800eb5e <__kernel_cos+0x136>
 800ea4e:	4632      	mov	r2, r6
 800ea50:	463b      	mov	r3, r7
 800ea52:	4630      	mov	r0, r6
 800ea54:	4639      	mov	r1, r7
 800ea56:	f7f1 fdcf 	bl	80005f8 <__aeabi_dmul>
 800ea5a:	4b51      	ldr	r3, [pc, #324]	; (800eba0 <__kernel_cos+0x178>)
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	4604      	mov	r4, r0
 800ea60:	460d      	mov	r5, r1
 800ea62:	f7f1 fdc9 	bl	80005f8 <__aeabi_dmul>
 800ea66:	a340      	add	r3, pc, #256	; (adr r3, 800eb68 <__kernel_cos+0x140>)
 800ea68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6c:	4682      	mov	sl, r0
 800ea6e:	468b      	mov	fp, r1
 800ea70:	4620      	mov	r0, r4
 800ea72:	4629      	mov	r1, r5
 800ea74:	f7f1 fdc0 	bl	80005f8 <__aeabi_dmul>
 800ea78:	a33d      	add	r3, pc, #244	; (adr r3, 800eb70 <__kernel_cos+0x148>)
 800ea7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea7e:	f7f1 fc05 	bl	800028c <__adddf3>
 800ea82:	4622      	mov	r2, r4
 800ea84:	462b      	mov	r3, r5
 800ea86:	f7f1 fdb7 	bl	80005f8 <__aeabi_dmul>
 800ea8a:	a33b      	add	r3, pc, #236	; (adr r3, 800eb78 <__kernel_cos+0x150>)
 800ea8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea90:	f7f1 fbfa 	bl	8000288 <__aeabi_dsub>
 800ea94:	4622      	mov	r2, r4
 800ea96:	462b      	mov	r3, r5
 800ea98:	f7f1 fdae 	bl	80005f8 <__aeabi_dmul>
 800ea9c:	a338      	add	r3, pc, #224	; (adr r3, 800eb80 <__kernel_cos+0x158>)
 800ea9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa2:	f7f1 fbf3 	bl	800028c <__adddf3>
 800eaa6:	4622      	mov	r2, r4
 800eaa8:	462b      	mov	r3, r5
 800eaaa:	f7f1 fda5 	bl	80005f8 <__aeabi_dmul>
 800eaae:	a336      	add	r3, pc, #216	; (adr r3, 800eb88 <__kernel_cos+0x160>)
 800eab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab4:	f7f1 fbe8 	bl	8000288 <__aeabi_dsub>
 800eab8:	4622      	mov	r2, r4
 800eaba:	462b      	mov	r3, r5
 800eabc:	f7f1 fd9c 	bl	80005f8 <__aeabi_dmul>
 800eac0:	a333      	add	r3, pc, #204	; (adr r3, 800eb90 <__kernel_cos+0x168>)
 800eac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac6:	f7f1 fbe1 	bl	800028c <__adddf3>
 800eaca:	4622      	mov	r2, r4
 800eacc:	462b      	mov	r3, r5
 800eace:	f7f1 fd93 	bl	80005f8 <__aeabi_dmul>
 800ead2:	4622      	mov	r2, r4
 800ead4:	462b      	mov	r3, r5
 800ead6:	f7f1 fd8f 	bl	80005f8 <__aeabi_dmul>
 800eada:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eade:	4604      	mov	r4, r0
 800eae0:	460d      	mov	r5, r1
 800eae2:	4630      	mov	r0, r6
 800eae4:	4639      	mov	r1, r7
 800eae6:	f7f1 fd87 	bl	80005f8 <__aeabi_dmul>
 800eaea:	460b      	mov	r3, r1
 800eaec:	4602      	mov	r2, r0
 800eaee:	4629      	mov	r1, r5
 800eaf0:	4620      	mov	r0, r4
 800eaf2:	f7f1 fbc9 	bl	8000288 <__aeabi_dsub>
 800eaf6:	4b2b      	ldr	r3, [pc, #172]	; (800eba4 <__kernel_cos+0x17c>)
 800eaf8:	4598      	cmp	r8, r3
 800eafa:	4606      	mov	r6, r0
 800eafc:	460f      	mov	r7, r1
 800eafe:	dc10      	bgt.n	800eb22 <__kernel_cos+0xfa>
 800eb00:	4602      	mov	r2, r0
 800eb02:	460b      	mov	r3, r1
 800eb04:	4650      	mov	r0, sl
 800eb06:	4659      	mov	r1, fp
 800eb08:	f7f1 fbbe 	bl	8000288 <__aeabi_dsub>
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	4926      	ldr	r1, [pc, #152]	; (800eba8 <__kernel_cos+0x180>)
 800eb10:	4602      	mov	r2, r0
 800eb12:	2000      	movs	r0, #0
 800eb14:	f7f1 fbb8 	bl	8000288 <__aeabi_dsub>
 800eb18:	ec41 0b10 	vmov	d0, r0, r1
 800eb1c:	b003      	add	sp, #12
 800eb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb22:	4b22      	ldr	r3, [pc, #136]	; (800ebac <__kernel_cos+0x184>)
 800eb24:	4920      	ldr	r1, [pc, #128]	; (800eba8 <__kernel_cos+0x180>)
 800eb26:	4598      	cmp	r8, r3
 800eb28:	bfcc      	ite	gt
 800eb2a:	4d21      	ldrgt	r5, [pc, #132]	; (800ebb0 <__kernel_cos+0x188>)
 800eb2c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800eb30:	2400      	movs	r4, #0
 800eb32:	4622      	mov	r2, r4
 800eb34:	462b      	mov	r3, r5
 800eb36:	2000      	movs	r0, #0
 800eb38:	f7f1 fba6 	bl	8000288 <__aeabi_dsub>
 800eb3c:	4622      	mov	r2, r4
 800eb3e:	4680      	mov	r8, r0
 800eb40:	4689      	mov	r9, r1
 800eb42:	462b      	mov	r3, r5
 800eb44:	4650      	mov	r0, sl
 800eb46:	4659      	mov	r1, fp
 800eb48:	f7f1 fb9e 	bl	8000288 <__aeabi_dsub>
 800eb4c:	4632      	mov	r2, r6
 800eb4e:	463b      	mov	r3, r7
 800eb50:	f7f1 fb9a 	bl	8000288 <__aeabi_dsub>
 800eb54:	4602      	mov	r2, r0
 800eb56:	460b      	mov	r3, r1
 800eb58:	4640      	mov	r0, r8
 800eb5a:	4649      	mov	r1, r9
 800eb5c:	e7da      	b.n	800eb14 <__kernel_cos+0xec>
 800eb5e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800eb98 <__kernel_cos+0x170>
 800eb62:	e7db      	b.n	800eb1c <__kernel_cos+0xf4>
 800eb64:	f3af 8000 	nop.w
 800eb68:	be8838d4 	.word	0xbe8838d4
 800eb6c:	bda8fae9 	.word	0xbda8fae9
 800eb70:	bdb4b1c4 	.word	0xbdb4b1c4
 800eb74:	3e21ee9e 	.word	0x3e21ee9e
 800eb78:	809c52ad 	.word	0x809c52ad
 800eb7c:	3e927e4f 	.word	0x3e927e4f
 800eb80:	19cb1590 	.word	0x19cb1590
 800eb84:	3efa01a0 	.word	0x3efa01a0
 800eb88:	16c15177 	.word	0x16c15177
 800eb8c:	3f56c16c 	.word	0x3f56c16c
 800eb90:	5555554c 	.word	0x5555554c
 800eb94:	3fa55555 	.word	0x3fa55555
 800eb98:	00000000 	.word	0x00000000
 800eb9c:	3ff00000 	.word	0x3ff00000
 800eba0:	3fe00000 	.word	0x3fe00000
 800eba4:	3fd33332 	.word	0x3fd33332
 800eba8:	3ff00000 	.word	0x3ff00000
 800ebac:	3fe90000 	.word	0x3fe90000
 800ebb0:	3fd20000 	.word	0x3fd20000
 800ebb4:	00000000 	.word	0x00000000

0800ebb8 <__kernel_rem_pio2>:
 800ebb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebbc:	ed2d 8b02 	vpush	{d8}
 800ebc0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ebc4:	f112 0f14 	cmn.w	r2, #20
 800ebc8:	9308      	str	r3, [sp, #32]
 800ebca:	9101      	str	r1, [sp, #4]
 800ebcc:	4bc6      	ldr	r3, [pc, #792]	; (800eee8 <__kernel_rem_pio2+0x330>)
 800ebce:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ebd0:	9009      	str	r0, [sp, #36]	; 0x24
 800ebd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ebd6:	9304      	str	r3, [sp, #16]
 800ebd8:	9b08      	ldr	r3, [sp, #32]
 800ebda:	f103 33ff 	add.w	r3, r3, #4294967295
 800ebde:	bfa8      	it	ge
 800ebe0:	1ed4      	subge	r4, r2, #3
 800ebe2:	9306      	str	r3, [sp, #24]
 800ebe4:	bfb2      	itee	lt
 800ebe6:	2400      	movlt	r4, #0
 800ebe8:	2318      	movge	r3, #24
 800ebea:	fb94 f4f3 	sdivge	r4, r4, r3
 800ebee:	f06f 0317 	mvn.w	r3, #23
 800ebf2:	fb04 3303 	mla	r3, r4, r3, r3
 800ebf6:	eb03 0a02 	add.w	sl, r3, r2
 800ebfa:	9b04      	ldr	r3, [sp, #16]
 800ebfc:	9a06      	ldr	r2, [sp, #24]
 800ebfe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800eed8 <__kernel_rem_pio2+0x320>
 800ec02:	eb03 0802 	add.w	r8, r3, r2
 800ec06:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ec08:	1aa7      	subs	r7, r4, r2
 800ec0a:	ae20      	add	r6, sp, #128	; 0x80
 800ec0c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ec10:	2500      	movs	r5, #0
 800ec12:	4545      	cmp	r5, r8
 800ec14:	dd18      	ble.n	800ec48 <__kernel_rem_pio2+0x90>
 800ec16:	9b08      	ldr	r3, [sp, #32]
 800ec18:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ec1c:	aa20      	add	r2, sp, #128	; 0x80
 800ec1e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800eed8 <__kernel_rem_pio2+0x320>
 800ec22:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ec26:	f1c3 0301 	rsb	r3, r3, #1
 800ec2a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ec2e:	9307      	str	r3, [sp, #28]
 800ec30:	9b07      	ldr	r3, [sp, #28]
 800ec32:	9a04      	ldr	r2, [sp, #16]
 800ec34:	4443      	add	r3, r8
 800ec36:	429a      	cmp	r2, r3
 800ec38:	db2f      	blt.n	800ec9a <__kernel_rem_pio2+0xe2>
 800ec3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ec3e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ec42:	462f      	mov	r7, r5
 800ec44:	2600      	movs	r6, #0
 800ec46:	e01b      	b.n	800ec80 <__kernel_rem_pio2+0xc8>
 800ec48:	42ef      	cmn	r7, r5
 800ec4a:	d407      	bmi.n	800ec5c <__kernel_rem_pio2+0xa4>
 800ec4c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ec50:	f7f1 fc68 	bl	8000524 <__aeabi_i2d>
 800ec54:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ec58:	3501      	adds	r5, #1
 800ec5a:	e7da      	b.n	800ec12 <__kernel_rem_pio2+0x5a>
 800ec5c:	ec51 0b18 	vmov	r0, r1, d8
 800ec60:	e7f8      	b.n	800ec54 <__kernel_rem_pio2+0x9c>
 800ec62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec66:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ec6a:	f7f1 fcc5 	bl	80005f8 <__aeabi_dmul>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	460b      	mov	r3, r1
 800ec72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec76:	f7f1 fb09 	bl	800028c <__adddf3>
 800ec7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec7e:	3601      	adds	r6, #1
 800ec80:	9b06      	ldr	r3, [sp, #24]
 800ec82:	429e      	cmp	r6, r3
 800ec84:	f1a7 0708 	sub.w	r7, r7, #8
 800ec88:	ddeb      	ble.n	800ec62 <__kernel_rem_pio2+0xaa>
 800ec8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec8e:	3508      	adds	r5, #8
 800ec90:	ecab 7b02 	vstmia	fp!, {d7}
 800ec94:	f108 0801 	add.w	r8, r8, #1
 800ec98:	e7ca      	b.n	800ec30 <__kernel_rem_pio2+0x78>
 800ec9a:	9b04      	ldr	r3, [sp, #16]
 800ec9c:	aa0c      	add	r2, sp, #48	; 0x30
 800ec9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eca2:	930b      	str	r3, [sp, #44]	; 0x2c
 800eca4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800eca6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ecaa:	9c04      	ldr	r4, [sp, #16]
 800ecac:	930a      	str	r3, [sp, #40]	; 0x28
 800ecae:	ab98      	add	r3, sp, #608	; 0x260
 800ecb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ecb4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ecb8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800ecbc:	f8cd b008 	str.w	fp, [sp, #8]
 800ecc0:	4625      	mov	r5, r4
 800ecc2:	2d00      	cmp	r5, #0
 800ecc4:	dc78      	bgt.n	800edb8 <__kernel_rem_pio2+0x200>
 800ecc6:	ec47 6b10 	vmov	d0, r6, r7
 800ecca:	4650      	mov	r0, sl
 800eccc:	f000 fb74 	bl	800f3b8 <scalbn>
 800ecd0:	ec57 6b10 	vmov	r6, r7, d0
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ecda:	ee10 0a10 	vmov	r0, s0
 800ecde:	4639      	mov	r1, r7
 800ece0:	f7f1 fc8a 	bl	80005f8 <__aeabi_dmul>
 800ece4:	ec41 0b10 	vmov	d0, r0, r1
 800ece8:	f7ff faaa 	bl	800e240 <floor>
 800ecec:	4b7f      	ldr	r3, [pc, #508]	; (800eeec <__kernel_rem_pio2+0x334>)
 800ecee:	ec51 0b10 	vmov	r0, r1, d0
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	f7f1 fc80 	bl	80005f8 <__aeabi_dmul>
 800ecf8:	4602      	mov	r2, r0
 800ecfa:	460b      	mov	r3, r1
 800ecfc:	4630      	mov	r0, r6
 800ecfe:	4639      	mov	r1, r7
 800ed00:	f7f1 fac2 	bl	8000288 <__aeabi_dsub>
 800ed04:	460f      	mov	r7, r1
 800ed06:	4606      	mov	r6, r0
 800ed08:	f7f1 ff26 	bl	8000b58 <__aeabi_d2iz>
 800ed0c:	9007      	str	r0, [sp, #28]
 800ed0e:	f7f1 fc09 	bl	8000524 <__aeabi_i2d>
 800ed12:	4602      	mov	r2, r0
 800ed14:	460b      	mov	r3, r1
 800ed16:	4630      	mov	r0, r6
 800ed18:	4639      	mov	r1, r7
 800ed1a:	f7f1 fab5 	bl	8000288 <__aeabi_dsub>
 800ed1e:	f1ba 0f00 	cmp.w	sl, #0
 800ed22:	4606      	mov	r6, r0
 800ed24:	460f      	mov	r7, r1
 800ed26:	dd70      	ble.n	800ee0a <__kernel_rem_pio2+0x252>
 800ed28:	1e62      	subs	r2, r4, #1
 800ed2a:	ab0c      	add	r3, sp, #48	; 0x30
 800ed2c:	9d07      	ldr	r5, [sp, #28]
 800ed2e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ed32:	f1ca 0118 	rsb	r1, sl, #24
 800ed36:	fa40 f301 	asr.w	r3, r0, r1
 800ed3a:	441d      	add	r5, r3
 800ed3c:	408b      	lsls	r3, r1
 800ed3e:	1ac0      	subs	r0, r0, r3
 800ed40:	ab0c      	add	r3, sp, #48	; 0x30
 800ed42:	9507      	str	r5, [sp, #28]
 800ed44:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ed48:	f1ca 0317 	rsb	r3, sl, #23
 800ed4c:	fa40 f303 	asr.w	r3, r0, r3
 800ed50:	9302      	str	r3, [sp, #8]
 800ed52:	9b02      	ldr	r3, [sp, #8]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	dd66      	ble.n	800ee26 <__kernel_rem_pio2+0x26e>
 800ed58:	9b07      	ldr	r3, [sp, #28]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	9307      	str	r3, [sp, #28]
 800ed60:	4615      	mov	r5, r2
 800ed62:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ed66:	4294      	cmp	r4, r2
 800ed68:	f300 8099 	bgt.w	800ee9e <__kernel_rem_pio2+0x2e6>
 800ed6c:	f1ba 0f00 	cmp.w	sl, #0
 800ed70:	dd07      	ble.n	800ed82 <__kernel_rem_pio2+0x1ca>
 800ed72:	f1ba 0f01 	cmp.w	sl, #1
 800ed76:	f000 80a5 	beq.w	800eec4 <__kernel_rem_pio2+0x30c>
 800ed7a:	f1ba 0f02 	cmp.w	sl, #2
 800ed7e:	f000 80c1 	beq.w	800ef04 <__kernel_rem_pio2+0x34c>
 800ed82:	9b02      	ldr	r3, [sp, #8]
 800ed84:	2b02      	cmp	r3, #2
 800ed86:	d14e      	bne.n	800ee26 <__kernel_rem_pio2+0x26e>
 800ed88:	4632      	mov	r2, r6
 800ed8a:	463b      	mov	r3, r7
 800ed8c:	4958      	ldr	r1, [pc, #352]	; (800eef0 <__kernel_rem_pio2+0x338>)
 800ed8e:	2000      	movs	r0, #0
 800ed90:	f7f1 fa7a 	bl	8000288 <__aeabi_dsub>
 800ed94:	4606      	mov	r6, r0
 800ed96:	460f      	mov	r7, r1
 800ed98:	2d00      	cmp	r5, #0
 800ed9a:	d044      	beq.n	800ee26 <__kernel_rem_pio2+0x26e>
 800ed9c:	4650      	mov	r0, sl
 800ed9e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800eee0 <__kernel_rem_pio2+0x328>
 800eda2:	f000 fb09 	bl	800f3b8 <scalbn>
 800eda6:	4630      	mov	r0, r6
 800eda8:	4639      	mov	r1, r7
 800edaa:	ec53 2b10 	vmov	r2, r3, d0
 800edae:	f7f1 fa6b 	bl	8000288 <__aeabi_dsub>
 800edb2:	4606      	mov	r6, r0
 800edb4:	460f      	mov	r7, r1
 800edb6:	e036      	b.n	800ee26 <__kernel_rem_pio2+0x26e>
 800edb8:	4b4e      	ldr	r3, [pc, #312]	; (800eef4 <__kernel_rem_pio2+0x33c>)
 800edba:	2200      	movs	r2, #0
 800edbc:	4630      	mov	r0, r6
 800edbe:	4639      	mov	r1, r7
 800edc0:	f7f1 fc1a 	bl	80005f8 <__aeabi_dmul>
 800edc4:	f7f1 fec8 	bl	8000b58 <__aeabi_d2iz>
 800edc8:	f7f1 fbac 	bl	8000524 <__aeabi_i2d>
 800edcc:	4b4a      	ldr	r3, [pc, #296]	; (800eef8 <__kernel_rem_pio2+0x340>)
 800edce:	2200      	movs	r2, #0
 800edd0:	4680      	mov	r8, r0
 800edd2:	4689      	mov	r9, r1
 800edd4:	f7f1 fc10 	bl	80005f8 <__aeabi_dmul>
 800edd8:	4602      	mov	r2, r0
 800edda:	460b      	mov	r3, r1
 800eddc:	4630      	mov	r0, r6
 800edde:	4639      	mov	r1, r7
 800ede0:	f7f1 fa52 	bl	8000288 <__aeabi_dsub>
 800ede4:	f7f1 feb8 	bl	8000b58 <__aeabi_d2iz>
 800ede8:	9b02      	ldr	r3, [sp, #8]
 800edea:	f843 0b04 	str.w	r0, [r3], #4
 800edee:	3d01      	subs	r5, #1
 800edf0:	9302      	str	r3, [sp, #8]
 800edf2:	ab70      	add	r3, sp, #448	; 0x1c0
 800edf4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800edf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edfc:	4640      	mov	r0, r8
 800edfe:	4649      	mov	r1, r9
 800ee00:	f7f1 fa44 	bl	800028c <__adddf3>
 800ee04:	4606      	mov	r6, r0
 800ee06:	460f      	mov	r7, r1
 800ee08:	e75b      	b.n	800ecc2 <__kernel_rem_pio2+0x10a>
 800ee0a:	d105      	bne.n	800ee18 <__kernel_rem_pio2+0x260>
 800ee0c:	1e63      	subs	r3, r4, #1
 800ee0e:	aa0c      	add	r2, sp, #48	; 0x30
 800ee10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ee14:	15c3      	asrs	r3, r0, #23
 800ee16:	e79b      	b.n	800ed50 <__kernel_rem_pio2+0x198>
 800ee18:	4b38      	ldr	r3, [pc, #224]	; (800eefc <__kernel_rem_pio2+0x344>)
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	f7f1 fe72 	bl	8000b04 <__aeabi_dcmpge>
 800ee20:	2800      	cmp	r0, #0
 800ee22:	d139      	bne.n	800ee98 <__kernel_rem_pio2+0x2e0>
 800ee24:	9002      	str	r0, [sp, #8]
 800ee26:	2200      	movs	r2, #0
 800ee28:	2300      	movs	r3, #0
 800ee2a:	4630      	mov	r0, r6
 800ee2c:	4639      	mov	r1, r7
 800ee2e:	f7f1 fe4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee32:	2800      	cmp	r0, #0
 800ee34:	f000 80b4 	beq.w	800efa0 <__kernel_rem_pio2+0x3e8>
 800ee38:	f104 3bff 	add.w	fp, r4, #4294967295
 800ee3c:	465b      	mov	r3, fp
 800ee3e:	2200      	movs	r2, #0
 800ee40:	9904      	ldr	r1, [sp, #16]
 800ee42:	428b      	cmp	r3, r1
 800ee44:	da65      	bge.n	800ef12 <__kernel_rem_pio2+0x35a>
 800ee46:	2a00      	cmp	r2, #0
 800ee48:	d07b      	beq.n	800ef42 <__kernel_rem_pio2+0x38a>
 800ee4a:	ab0c      	add	r3, sp, #48	; 0x30
 800ee4c:	f1aa 0a18 	sub.w	sl, sl, #24
 800ee50:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	f000 80a0 	beq.w	800ef9a <__kernel_rem_pio2+0x3e2>
 800ee5a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800eee0 <__kernel_rem_pio2+0x328>
 800ee5e:	4650      	mov	r0, sl
 800ee60:	f000 faaa 	bl	800f3b8 <scalbn>
 800ee64:	4f23      	ldr	r7, [pc, #140]	; (800eef4 <__kernel_rem_pio2+0x33c>)
 800ee66:	ec55 4b10 	vmov	r4, r5, d0
 800ee6a:	46d8      	mov	r8, fp
 800ee6c:	2600      	movs	r6, #0
 800ee6e:	f1b8 0f00 	cmp.w	r8, #0
 800ee72:	f280 80cf 	bge.w	800f014 <__kernel_rem_pio2+0x45c>
 800ee76:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800eed8 <__kernel_rem_pio2+0x320>
 800ee7a:	465f      	mov	r7, fp
 800ee7c:	f04f 0800 	mov.w	r8, #0
 800ee80:	2f00      	cmp	r7, #0
 800ee82:	f2c0 80fd 	blt.w	800f080 <__kernel_rem_pio2+0x4c8>
 800ee86:	ab70      	add	r3, sp, #448	; 0x1c0
 800ee88:	f8df a074 	ldr.w	sl, [pc, #116]	; 800ef00 <__kernel_rem_pio2+0x348>
 800ee8c:	ec55 4b18 	vmov	r4, r5, d8
 800ee90:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800ee94:	2600      	movs	r6, #0
 800ee96:	e0e5      	b.n	800f064 <__kernel_rem_pio2+0x4ac>
 800ee98:	2302      	movs	r3, #2
 800ee9a:	9302      	str	r3, [sp, #8]
 800ee9c:	e75c      	b.n	800ed58 <__kernel_rem_pio2+0x1a0>
 800ee9e:	f8db 3000 	ldr.w	r3, [fp]
 800eea2:	b955      	cbnz	r5, 800eeba <__kernel_rem_pio2+0x302>
 800eea4:	b123      	cbz	r3, 800eeb0 <__kernel_rem_pio2+0x2f8>
 800eea6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800eeaa:	f8cb 3000 	str.w	r3, [fp]
 800eeae:	2301      	movs	r3, #1
 800eeb0:	3201      	adds	r2, #1
 800eeb2:	f10b 0b04 	add.w	fp, fp, #4
 800eeb6:	461d      	mov	r5, r3
 800eeb8:	e755      	b.n	800ed66 <__kernel_rem_pio2+0x1ae>
 800eeba:	1acb      	subs	r3, r1, r3
 800eebc:	f8cb 3000 	str.w	r3, [fp]
 800eec0:	462b      	mov	r3, r5
 800eec2:	e7f5      	b.n	800eeb0 <__kernel_rem_pio2+0x2f8>
 800eec4:	1e62      	subs	r2, r4, #1
 800eec6:	ab0c      	add	r3, sp, #48	; 0x30
 800eec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eecc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800eed0:	a90c      	add	r1, sp, #48	; 0x30
 800eed2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800eed6:	e754      	b.n	800ed82 <__kernel_rem_pio2+0x1ca>
	...
 800eee4:	3ff00000 	.word	0x3ff00000
 800eee8:	0801cb98 	.word	0x0801cb98
 800eeec:	40200000 	.word	0x40200000
 800eef0:	3ff00000 	.word	0x3ff00000
 800eef4:	3e700000 	.word	0x3e700000
 800eef8:	41700000 	.word	0x41700000
 800eefc:	3fe00000 	.word	0x3fe00000
 800ef00:	0801cb58 	.word	0x0801cb58
 800ef04:	1e62      	subs	r2, r4, #1
 800ef06:	ab0c      	add	r3, sp, #48	; 0x30
 800ef08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef0c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ef10:	e7de      	b.n	800eed0 <__kernel_rem_pio2+0x318>
 800ef12:	a90c      	add	r1, sp, #48	; 0x30
 800ef14:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ef18:	3b01      	subs	r3, #1
 800ef1a:	430a      	orrs	r2, r1
 800ef1c:	e790      	b.n	800ee40 <__kernel_rem_pio2+0x288>
 800ef1e:	3301      	adds	r3, #1
 800ef20:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ef24:	2900      	cmp	r1, #0
 800ef26:	d0fa      	beq.n	800ef1e <__kernel_rem_pio2+0x366>
 800ef28:	9a08      	ldr	r2, [sp, #32]
 800ef2a:	18e3      	adds	r3, r4, r3
 800ef2c:	18a6      	adds	r6, r4, r2
 800ef2e:	aa20      	add	r2, sp, #128	; 0x80
 800ef30:	1c65      	adds	r5, r4, #1
 800ef32:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ef36:	9302      	str	r3, [sp, #8]
 800ef38:	9b02      	ldr	r3, [sp, #8]
 800ef3a:	42ab      	cmp	r3, r5
 800ef3c:	da04      	bge.n	800ef48 <__kernel_rem_pio2+0x390>
 800ef3e:	461c      	mov	r4, r3
 800ef40:	e6b5      	b.n	800ecae <__kernel_rem_pio2+0xf6>
 800ef42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ef44:	2301      	movs	r3, #1
 800ef46:	e7eb      	b.n	800ef20 <__kernel_rem_pio2+0x368>
 800ef48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ef4e:	f7f1 fae9 	bl	8000524 <__aeabi_i2d>
 800ef52:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ef56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef58:	46b3      	mov	fp, r6
 800ef5a:	461c      	mov	r4, r3
 800ef5c:	2700      	movs	r7, #0
 800ef5e:	f04f 0800 	mov.w	r8, #0
 800ef62:	f04f 0900 	mov.w	r9, #0
 800ef66:	9b06      	ldr	r3, [sp, #24]
 800ef68:	429f      	cmp	r7, r3
 800ef6a:	dd06      	ble.n	800ef7a <__kernel_rem_pio2+0x3c2>
 800ef6c:	ab70      	add	r3, sp, #448	; 0x1c0
 800ef6e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ef72:	e9c3 8900 	strd	r8, r9, [r3]
 800ef76:	3501      	adds	r5, #1
 800ef78:	e7de      	b.n	800ef38 <__kernel_rem_pio2+0x380>
 800ef7a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ef7e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ef82:	f7f1 fb39 	bl	80005f8 <__aeabi_dmul>
 800ef86:	4602      	mov	r2, r0
 800ef88:	460b      	mov	r3, r1
 800ef8a:	4640      	mov	r0, r8
 800ef8c:	4649      	mov	r1, r9
 800ef8e:	f7f1 f97d 	bl	800028c <__adddf3>
 800ef92:	3701      	adds	r7, #1
 800ef94:	4680      	mov	r8, r0
 800ef96:	4689      	mov	r9, r1
 800ef98:	e7e5      	b.n	800ef66 <__kernel_rem_pio2+0x3ae>
 800ef9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ef9e:	e754      	b.n	800ee4a <__kernel_rem_pio2+0x292>
 800efa0:	ec47 6b10 	vmov	d0, r6, r7
 800efa4:	f1ca 0000 	rsb	r0, sl, #0
 800efa8:	f000 fa06 	bl	800f3b8 <scalbn>
 800efac:	ec57 6b10 	vmov	r6, r7, d0
 800efb0:	4b9f      	ldr	r3, [pc, #636]	; (800f230 <__kernel_rem_pio2+0x678>)
 800efb2:	ee10 0a10 	vmov	r0, s0
 800efb6:	2200      	movs	r2, #0
 800efb8:	4639      	mov	r1, r7
 800efba:	f7f1 fda3 	bl	8000b04 <__aeabi_dcmpge>
 800efbe:	b300      	cbz	r0, 800f002 <__kernel_rem_pio2+0x44a>
 800efc0:	4b9c      	ldr	r3, [pc, #624]	; (800f234 <__kernel_rem_pio2+0x67c>)
 800efc2:	2200      	movs	r2, #0
 800efc4:	4630      	mov	r0, r6
 800efc6:	4639      	mov	r1, r7
 800efc8:	f7f1 fb16 	bl	80005f8 <__aeabi_dmul>
 800efcc:	f7f1 fdc4 	bl	8000b58 <__aeabi_d2iz>
 800efd0:	4605      	mov	r5, r0
 800efd2:	f7f1 faa7 	bl	8000524 <__aeabi_i2d>
 800efd6:	4b96      	ldr	r3, [pc, #600]	; (800f230 <__kernel_rem_pio2+0x678>)
 800efd8:	2200      	movs	r2, #0
 800efda:	f7f1 fb0d 	bl	80005f8 <__aeabi_dmul>
 800efde:	460b      	mov	r3, r1
 800efe0:	4602      	mov	r2, r0
 800efe2:	4639      	mov	r1, r7
 800efe4:	4630      	mov	r0, r6
 800efe6:	f7f1 f94f 	bl	8000288 <__aeabi_dsub>
 800efea:	f7f1 fdb5 	bl	8000b58 <__aeabi_d2iz>
 800efee:	f104 0b01 	add.w	fp, r4, #1
 800eff2:	ab0c      	add	r3, sp, #48	; 0x30
 800eff4:	f10a 0a18 	add.w	sl, sl, #24
 800eff8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800effc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800f000:	e72b      	b.n	800ee5a <__kernel_rem_pio2+0x2a2>
 800f002:	4630      	mov	r0, r6
 800f004:	4639      	mov	r1, r7
 800f006:	f7f1 fda7 	bl	8000b58 <__aeabi_d2iz>
 800f00a:	ab0c      	add	r3, sp, #48	; 0x30
 800f00c:	46a3      	mov	fp, r4
 800f00e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f012:	e722      	b.n	800ee5a <__kernel_rem_pio2+0x2a2>
 800f014:	ab70      	add	r3, sp, #448	; 0x1c0
 800f016:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800f01a:	ab0c      	add	r3, sp, #48	; 0x30
 800f01c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f020:	f7f1 fa80 	bl	8000524 <__aeabi_i2d>
 800f024:	4622      	mov	r2, r4
 800f026:	462b      	mov	r3, r5
 800f028:	f7f1 fae6 	bl	80005f8 <__aeabi_dmul>
 800f02c:	4632      	mov	r2, r6
 800f02e:	e9c9 0100 	strd	r0, r1, [r9]
 800f032:	463b      	mov	r3, r7
 800f034:	4620      	mov	r0, r4
 800f036:	4629      	mov	r1, r5
 800f038:	f7f1 fade 	bl	80005f8 <__aeabi_dmul>
 800f03c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f040:	4604      	mov	r4, r0
 800f042:	460d      	mov	r5, r1
 800f044:	e713      	b.n	800ee6e <__kernel_rem_pio2+0x2b6>
 800f046:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f04a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f04e:	f7f1 fad3 	bl	80005f8 <__aeabi_dmul>
 800f052:	4602      	mov	r2, r0
 800f054:	460b      	mov	r3, r1
 800f056:	4620      	mov	r0, r4
 800f058:	4629      	mov	r1, r5
 800f05a:	f7f1 f917 	bl	800028c <__adddf3>
 800f05e:	3601      	adds	r6, #1
 800f060:	4604      	mov	r4, r0
 800f062:	460d      	mov	r5, r1
 800f064:	9b04      	ldr	r3, [sp, #16]
 800f066:	429e      	cmp	r6, r3
 800f068:	dc01      	bgt.n	800f06e <__kernel_rem_pio2+0x4b6>
 800f06a:	45b0      	cmp	r8, r6
 800f06c:	daeb      	bge.n	800f046 <__kernel_rem_pio2+0x48e>
 800f06e:	ab48      	add	r3, sp, #288	; 0x120
 800f070:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f074:	e9c3 4500 	strd	r4, r5, [r3]
 800f078:	3f01      	subs	r7, #1
 800f07a:	f108 0801 	add.w	r8, r8, #1
 800f07e:	e6ff      	b.n	800ee80 <__kernel_rem_pio2+0x2c8>
 800f080:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f082:	2b02      	cmp	r3, #2
 800f084:	dc0b      	bgt.n	800f09e <__kernel_rem_pio2+0x4e6>
 800f086:	2b00      	cmp	r3, #0
 800f088:	dc6e      	bgt.n	800f168 <__kernel_rem_pio2+0x5b0>
 800f08a:	d045      	beq.n	800f118 <__kernel_rem_pio2+0x560>
 800f08c:	9b07      	ldr	r3, [sp, #28]
 800f08e:	f003 0007 	and.w	r0, r3, #7
 800f092:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f096:	ecbd 8b02 	vpop	{d8}
 800f09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f09e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f0a0:	2b03      	cmp	r3, #3
 800f0a2:	d1f3      	bne.n	800f08c <__kernel_rem_pio2+0x4d4>
 800f0a4:	ab48      	add	r3, sp, #288	; 0x120
 800f0a6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800f0aa:	46d0      	mov	r8, sl
 800f0ac:	46d9      	mov	r9, fp
 800f0ae:	f1b9 0f00 	cmp.w	r9, #0
 800f0b2:	f1a8 0808 	sub.w	r8, r8, #8
 800f0b6:	dc64      	bgt.n	800f182 <__kernel_rem_pio2+0x5ca>
 800f0b8:	465c      	mov	r4, fp
 800f0ba:	2c01      	cmp	r4, #1
 800f0bc:	f1aa 0a08 	sub.w	sl, sl, #8
 800f0c0:	dc7e      	bgt.n	800f1c0 <__kernel_rem_pio2+0x608>
 800f0c2:	2000      	movs	r0, #0
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	f1bb 0f01 	cmp.w	fp, #1
 800f0ca:	f300 8097 	bgt.w	800f1fc <__kernel_rem_pio2+0x644>
 800f0ce:	9b02      	ldr	r3, [sp, #8]
 800f0d0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800f0d4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	f040 8099 	bne.w	800f210 <__kernel_rem_pio2+0x658>
 800f0de:	9b01      	ldr	r3, [sp, #4]
 800f0e0:	e9c3 5600 	strd	r5, r6, [r3]
 800f0e4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f0e8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f0ec:	e7ce      	b.n	800f08c <__kernel_rem_pio2+0x4d4>
 800f0ee:	ab48      	add	r3, sp, #288	; 0x120
 800f0f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f8:	f7f1 f8c8 	bl	800028c <__adddf3>
 800f0fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f100:	f1bb 0f00 	cmp.w	fp, #0
 800f104:	daf3      	bge.n	800f0ee <__kernel_rem_pio2+0x536>
 800f106:	9b02      	ldr	r3, [sp, #8]
 800f108:	b113      	cbz	r3, 800f110 <__kernel_rem_pio2+0x558>
 800f10a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f10e:	4619      	mov	r1, r3
 800f110:	9b01      	ldr	r3, [sp, #4]
 800f112:	e9c3 0100 	strd	r0, r1, [r3]
 800f116:	e7b9      	b.n	800f08c <__kernel_rem_pio2+0x4d4>
 800f118:	2000      	movs	r0, #0
 800f11a:	2100      	movs	r1, #0
 800f11c:	e7f0      	b.n	800f100 <__kernel_rem_pio2+0x548>
 800f11e:	ab48      	add	r3, sp, #288	; 0x120
 800f120:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f128:	f7f1 f8b0 	bl	800028c <__adddf3>
 800f12c:	3c01      	subs	r4, #1
 800f12e:	2c00      	cmp	r4, #0
 800f130:	daf5      	bge.n	800f11e <__kernel_rem_pio2+0x566>
 800f132:	9b02      	ldr	r3, [sp, #8]
 800f134:	b1e3      	cbz	r3, 800f170 <__kernel_rem_pio2+0x5b8>
 800f136:	4602      	mov	r2, r0
 800f138:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f13c:	9c01      	ldr	r4, [sp, #4]
 800f13e:	e9c4 2300 	strd	r2, r3, [r4]
 800f142:	4602      	mov	r2, r0
 800f144:	460b      	mov	r3, r1
 800f146:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f14a:	f7f1 f89d 	bl	8000288 <__aeabi_dsub>
 800f14e:	ad4a      	add	r5, sp, #296	; 0x128
 800f150:	2401      	movs	r4, #1
 800f152:	45a3      	cmp	fp, r4
 800f154:	da0f      	bge.n	800f176 <__kernel_rem_pio2+0x5be>
 800f156:	9b02      	ldr	r3, [sp, #8]
 800f158:	b113      	cbz	r3, 800f160 <__kernel_rem_pio2+0x5a8>
 800f15a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f15e:	4619      	mov	r1, r3
 800f160:	9b01      	ldr	r3, [sp, #4]
 800f162:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f166:	e791      	b.n	800f08c <__kernel_rem_pio2+0x4d4>
 800f168:	465c      	mov	r4, fp
 800f16a:	2000      	movs	r0, #0
 800f16c:	2100      	movs	r1, #0
 800f16e:	e7de      	b.n	800f12e <__kernel_rem_pio2+0x576>
 800f170:	4602      	mov	r2, r0
 800f172:	460b      	mov	r3, r1
 800f174:	e7e2      	b.n	800f13c <__kernel_rem_pio2+0x584>
 800f176:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f17a:	f7f1 f887 	bl	800028c <__adddf3>
 800f17e:	3401      	adds	r4, #1
 800f180:	e7e7      	b.n	800f152 <__kernel_rem_pio2+0x59a>
 800f182:	e9d8 4500 	ldrd	r4, r5, [r8]
 800f186:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800f18a:	4620      	mov	r0, r4
 800f18c:	4632      	mov	r2, r6
 800f18e:	463b      	mov	r3, r7
 800f190:	4629      	mov	r1, r5
 800f192:	f7f1 f87b 	bl	800028c <__adddf3>
 800f196:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f19a:	4602      	mov	r2, r0
 800f19c:	460b      	mov	r3, r1
 800f19e:	4620      	mov	r0, r4
 800f1a0:	4629      	mov	r1, r5
 800f1a2:	f7f1 f871 	bl	8000288 <__aeabi_dsub>
 800f1a6:	4632      	mov	r2, r6
 800f1a8:	463b      	mov	r3, r7
 800f1aa:	f7f1 f86f 	bl	800028c <__adddf3>
 800f1ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f1b2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800f1b6:	ed88 7b00 	vstr	d7, [r8]
 800f1ba:	f109 39ff 	add.w	r9, r9, #4294967295
 800f1be:	e776      	b.n	800f0ae <__kernel_rem_pio2+0x4f6>
 800f1c0:	e9da 8900 	ldrd	r8, r9, [sl]
 800f1c4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f1c8:	4640      	mov	r0, r8
 800f1ca:	4632      	mov	r2, r6
 800f1cc:	463b      	mov	r3, r7
 800f1ce:	4649      	mov	r1, r9
 800f1d0:	f7f1 f85c 	bl	800028c <__adddf3>
 800f1d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f1d8:	4602      	mov	r2, r0
 800f1da:	460b      	mov	r3, r1
 800f1dc:	4640      	mov	r0, r8
 800f1de:	4649      	mov	r1, r9
 800f1e0:	f7f1 f852 	bl	8000288 <__aeabi_dsub>
 800f1e4:	4632      	mov	r2, r6
 800f1e6:	463b      	mov	r3, r7
 800f1e8:	f7f1 f850 	bl	800028c <__adddf3>
 800f1ec:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f1f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f1f4:	ed8a 7b00 	vstr	d7, [sl]
 800f1f8:	3c01      	subs	r4, #1
 800f1fa:	e75e      	b.n	800f0ba <__kernel_rem_pio2+0x502>
 800f1fc:	ab48      	add	r3, sp, #288	; 0x120
 800f1fe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f206:	f7f1 f841 	bl	800028c <__adddf3>
 800f20a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f20e:	e75a      	b.n	800f0c6 <__kernel_rem_pio2+0x50e>
 800f210:	9b01      	ldr	r3, [sp, #4]
 800f212:	9a01      	ldr	r2, [sp, #4]
 800f214:	601d      	str	r5, [r3, #0]
 800f216:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f21a:	605c      	str	r4, [r3, #4]
 800f21c:	609f      	str	r7, [r3, #8]
 800f21e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f222:	60d3      	str	r3, [r2, #12]
 800f224:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f228:	6110      	str	r0, [r2, #16]
 800f22a:	6153      	str	r3, [r2, #20]
 800f22c:	e72e      	b.n	800f08c <__kernel_rem_pio2+0x4d4>
 800f22e:	bf00      	nop
 800f230:	41700000 	.word	0x41700000
 800f234:	3e700000 	.word	0x3e700000

0800f238 <__kernel_sin>:
 800f238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f23c:	ed2d 8b04 	vpush	{d8-d9}
 800f240:	eeb0 8a41 	vmov.f32	s16, s2
 800f244:	eef0 8a61 	vmov.f32	s17, s3
 800f248:	ec55 4b10 	vmov	r4, r5, d0
 800f24c:	b083      	sub	sp, #12
 800f24e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f252:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f256:	9001      	str	r0, [sp, #4]
 800f258:	da06      	bge.n	800f268 <__kernel_sin+0x30>
 800f25a:	ee10 0a10 	vmov	r0, s0
 800f25e:	4629      	mov	r1, r5
 800f260:	f7f1 fc7a 	bl	8000b58 <__aeabi_d2iz>
 800f264:	2800      	cmp	r0, #0
 800f266:	d051      	beq.n	800f30c <__kernel_sin+0xd4>
 800f268:	4622      	mov	r2, r4
 800f26a:	462b      	mov	r3, r5
 800f26c:	4620      	mov	r0, r4
 800f26e:	4629      	mov	r1, r5
 800f270:	f7f1 f9c2 	bl	80005f8 <__aeabi_dmul>
 800f274:	4682      	mov	sl, r0
 800f276:	468b      	mov	fp, r1
 800f278:	4602      	mov	r2, r0
 800f27a:	460b      	mov	r3, r1
 800f27c:	4620      	mov	r0, r4
 800f27e:	4629      	mov	r1, r5
 800f280:	f7f1 f9ba 	bl	80005f8 <__aeabi_dmul>
 800f284:	a341      	add	r3, pc, #260	; (adr r3, 800f38c <__kernel_sin+0x154>)
 800f286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28a:	4680      	mov	r8, r0
 800f28c:	4689      	mov	r9, r1
 800f28e:	4650      	mov	r0, sl
 800f290:	4659      	mov	r1, fp
 800f292:	f7f1 f9b1 	bl	80005f8 <__aeabi_dmul>
 800f296:	a33f      	add	r3, pc, #252	; (adr r3, 800f394 <__kernel_sin+0x15c>)
 800f298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29c:	f7f0 fff4 	bl	8000288 <__aeabi_dsub>
 800f2a0:	4652      	mov	r2, sl
 800f2a2:	465b      	mov	r3, fp
 800f2a4:	f7f1 f9a8 	bl	80005f8 <__aeabi_dmul>
 800f2a8:	a33c      	add	r3, pc, #240	; (adr r3, 800f39c <__kernel_sin+0x164>)
 800f2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ae:	f7f0 ffed 	bl	800028c <__adddf3>
 800f2b2:	4652      	mov	r2, sl
 800f2b4:	465b      	mov	r3, fp
 800f2b6:	f7f1 f99f 	bl	80005f8 <__aeabi_dmul>
 800f2ba:	a33a      	add	r3, pc, #232	; (adr r3, 800f3a4 <__kernel_sin+0x16c>)
 800f2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c0:	f7f0 ffe2 	bl	8000288 <__aeabi_dsub>
 800f2c4:	4652      	mov	r2, sl
 800f2c6:	465b      	mov	r3, fp
 800f2c8:	f7f1 f996 	bl	80005f8 <__aeabi_dmul>
 800f2cc:	a337      	add	r3, pc, #220	; (adr r3, 800f3ac <__kernel_sin+0x174>)
 800f2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d2:	f7f0 ffdb 	bl	800028c <__adddf3>
 800f2d6:	9b01      	ldr	r3, [sp, #4]
 800f2d8:	4606      	mov	r6, r0
 800f2da:	460f      	mov	r7, r1
 800f2dc:	b9eb      	cbnz	r3, 800f31a <__kernel_sin+0xe2>
 800f2de:	4602      	mov	r2, r0
 800f2e0:	460b      	mov	r3, r1
 800f2e2:	4650      	mov	r0, sl
 800f2e4:	4659      	mov	r1, fp
 800f2e6:	f7f1 f987 	bl	80005f8 <__aeabi_dmul>
 800f2ea:	a325      	add	r3, pc, #148	; (adr r3, 800f380 <__kernel_sin+0x148>)
 800f2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f0:	f7f0 ffca 	bl	8000288 <__aeabi_dsub>
 800f2f4:	4642      	mov	r2, r8
 800f2f6:	464b      	mov	r3, r9
 800f2f8:	f7f1 f97e 	bl	80005f8 <__aeabi_dmul>
 800f2fc:	4602      	mov	r2, r0
 800f2fe:	460b      	mov	r3, r1
 800f300:	4620      	mov	r0, r4
 800f302:	4629      	mov	r1, r5
 800f304:	f7f0 ffc2 	bl	800028c <__adddf3>
 800f308:	4604      	mov	r4, r0
 800f30a:	460d      	mov	r5, r1
 800f30c:	ec45 4b10 	vmov	d0, r4, r5
 800f310:	b003      	add	sp, #12
 800f312:	ecbd 8b04 	vpop	{d8-d9}
 800f316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f31a:	4b1b      	ldr	r3, [pc, #108]	; (800f388 <__kernel_sin+0x150>)
 800f31c:	ec51 0b18 	vmov	r0, r1, d8
 800f320:	2200      	movs	r2, #0
 800f322:	f7f1 f969 	bl	80005f8 <__aeabi_dmul>
 800f326:	4632      	mov	r2, r6
 800f328:	ec41 0b19 	vmov	d9, r0, r1
 800f32c:	463b      	mov	r3, r7
 800f32e:	4640      	mov	r0, r8
 800f330:	4649      	mov	r1, r9
 800f332:	f7f1 f961 	bl	80005f8 <__aeabi_dmul>
 800f336:	4602      	mov	r2, r0
 800f338:	460b      	mov	r3, r1
 800f33a:	ec51 0b19 	vmov	r0, r1, d9
 800f33e:	f7f0 ffa3 	bl	8000288 <__aeabi_dsub>
 800f342:	4652      	mov	r2, sl
 800f344:	465b      	mov	r3, fp
 800f346:	f7f1 f957 	bl	80005f8 <__aeabi_dmul>
 800f34a:	ec53 2b18 	vmov	r2, r3, d8
 800f34e:	f7f0 ff9b 	bl	8000288 <__aeabi_dsub>
 800f352:	a30b      	add	r3, pc, #44	; (adr r3, 800f380 <__kernel_sin+0x148>)
 800f354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f358:	4606      	mov	r6, r0
 800f35a:	460f      	mov	r7, r1
 800f35c:	4640      	mov	r0, r8
 800f35e:	4649      	mov	r1, r9
 800f360:	f7f1 f94a 	bl	80005f8 <__aeabi_dmul>
 800f364:	4602      	mov	r2, r0
 800f366:	460b      	mov	r3, r1
 800f368:	4630      	mov	r0, r6
 800f36a:	4639      	mov	r1, r7
 800f36c:	f7f0 ff8e 	bl	800028c <__adddf3>
 800f370:	4602      	mov	r2, r0
 800f372:	460b      	mov	r3, r1
 800f374:	4620      	mov	r0, r4
 800f376:	4629      	mov	r1, r5
 800f378:	f7f0 ff86 	bl	8000288 <__aeabi_dsub>
 800f37c:	e7c4      	b.n	800f308 <__kernel_sin+0xd0>
 800f37e:	bf00      	nop
 800f380:	55555549 	.word	0x55555549
 800f384:	3fc55555 	.word	0x3fc55555
 800f388:	3fe00000 	.word	0x3fe00000
 800f38c:	5acfd57c 	.word	0x5acfd57c
 800f390:	3de5d93a 	.word	0x3de5d93a
 800f394:	8a2b9ceb 	.word	0x8a2b9ceb
 800f398:	3e5ae5e6 	.word	0x3e5ae5e6
 800f39c:	57b1fe7d 	.word	0x57b1fe7d
 800f3a0:	3ec71de3 	.word	0x3ec71de3
 800f3a4:	19c161d5 	.word	0x19c161d5
 800f3a8:	3f2a01a0 	.word	0x3f2a01a0
 800f3ac:	1110f8a6 	.word	0x1110f8a6
 800f3b0:	3f811111 	.word	0x3f811111
 800f3b4:	00000000 	.word	0x00000000

0800f3b8 <scalbn>:
 800f3b8:	b570      	push	{r4, r5, r6, lr}
 800f3ba:	ec55 4b10 	vmov	r4, r5, d0
 800f3be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f3c2:	4606      	mov	r6, r0
 800f3c4:	462b      	mov	r3, r5
 800f3c6:	b99a      	cbnz	r2, 800f3f0 <scalbn+0x38>
 800f3c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f3cc:	4323      	orrs	r3, r4
 800f3ce:	d036      	beq.n	800f43e <scalbn+0x86>
 800f3d0:	4b39      	ldr	r3, [pc, #228]	; (800f4b8 <scalbn+0x100>)
 800f3d2:	4629      	mov	r1, r5
 800f3d4:	ee10 0a10 	vmov	r0, s0
 800f3d8:	2200      	movs	r2, #0
 800f3da:	f7f1 f90d 	bl	80005f8 <__aeabi_dmul>
 800f3de:	4b37      	ldr	r3, [pc, #220]	; (800f4bc <scalbn+0x104>)
 800f3e0:	429e      	cmp	r6, r3
 800f3e2:	4604      	mov	r4, r0
 800f3e4:	460d      	mov	r5, r1
 800f3e6:	da10      	bge.n	800f40a <scalbn+0x52>
 800f3e8:	a32b      	add	r3, pc, #172	; (adr r3, 800f498 <scalbn+0xe0>)
 800f3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ee:	e03a      	b.n	800f466 <scalbn+0xae>
 800f3f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f3f4:	428a      	cmp	r2, r1
 800f3f6:	d10c      	bne.n	800f412 <scalbn+0x5a>
 800f3f8:	ee10 2a10 	vmov	r2, s0
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	4629      	mov	r1, r5
 800f400:	f7f0 ff44 	bl	800028c <__adddf3>
 800f404:	4604      	mov	r4, r0
 800f406:	460d      	mov	r5, r1
 800f408:	e019      	b.n	800f43e <scalbn+0x86>
 800f40a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f40e:	460b      	mov	r3, r1
 800f410:	3a36      	subs	r2, #54	; 0x36
 800f412:	4432      	add	r2, r6
 800f414:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f418:	428a      	cmp	r2, r1
 800f41a:	dd08      	ble.n	800f42e <scalbn+0x76>
 800f41c:	2d00      	cmp	r5, #0
 800f41e:	a120      	add	r1, pc, #128	; (adr r1, 800f4a0 <scalbn+0xe8>)
 800f420:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f424:	da1c      	bge.n	800f460 <scalbn+0xa8>
 800f426:	a120      	add	r1, pc, #128	; (adr r1, 800f4a8 <scalbn+0xf0>)
 800f428:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f42c:	e018      	b.n	800f460 <scalbn+0xa8>
 800f42e:	2a00      	cmp	r2, #0
 800f430:	dd08      	ble.n	800f444 <scalbn+0x8c>
 800f432:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f436:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f43a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f43e:	ec45 4b10 	vmov	d0, r4, r5
 800f442:	bd70      	pop	{r4, r5, r6, pc}
 800f444:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f448:	da19      	bge.n	800f47e <scalbn+0xc6>
 800f44a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f44e:	429e      	cmp	r6, r3
 800f450:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f454:	dd0a      	ble.n	800f46c <scalbn+0xb4>
 800f456:	a112      	add	r1, pc, #72	; (adr r1, 800f4a0 <scalbn+0xe8>)
 800f458:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d1e2      	bne.n	800f426 <scalbn+0x6e>
 800f460:	a30f      	add	r3, pc, #60	; (adr r3, 800f4a0 <scalbn+0xe8>)
 800f462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f466:	f7f1 f8c7 	bl	80005f8 <__aeabi_dmul>
 800f46a:	e7cb      	b.n	800f404 <scalbn+0x4c>
 800f46c:	a10a      	add	r1, pc, #40	; (adr r1, 800f498 <scalbn+0xe0>)
 800f46e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d0b8      	beq.n	800f3e8 <scalbn+0x30>
 800f476:	a10e      	add	r1, pc, #56	; (adr r1, 800f4b0 <scalbn+0xf8>)
 800f478:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f47c:	e7b4      	b.n	800f3e8 <scalbn+0x30>
 800f47e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f482:	3236      	adds	r2, #54	; 0x36
 800f484:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f488:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f48c:	4620      	mov	r0, r4
 800f48e:	4b0c      	ldr	r3, [pc, #48]	; (800f4c0 <scalbn+0x108>)
 800f490:	2200      	movs	r2, #0
 800f492:	e7e8      	b.n	800f466 <scalbn+0xae>
 800f494:	f3af 8000 	nop.w
 800f498:	c2f8f359 	.word	0xc2f8f359
 800f49c:	01a56e1f 	.word	0x01a56e1f
 800f4a0:	8800759c 	.word	0x8800759c
 800f4a4:	7e37e43c 	.word	0x7e37e43c
 800f4a8:	8800759c 	.word	0x8800759c
 800f4ac:	fe37e43c 	.word	0xfe37e43c
 800f4b0:	c2f8f359 	.word	0xc2f8f359
 800f4b4:	81a56e1f 	.word	0x81a56e1f
 800f4b8:	43500000 	.word	0x43500000
 800f4bc:	ffff3cb0 	.word	0xffff3cb0
 800f4c0:	3c900000 	.word	0x3c900000

0800f4c4 <_init>:
 800f4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4c6:	bf00      	nop
 800f4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4ca:	bc08      	pop	{r3}
 800f4cc:	469e      	mov	lr, r3
 800f4ce:	4770      	bx	lr

0800f4d0 <_fini>:
 800f4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4d2:	bf00      	nop
 800f4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4d6:	bc08      	pop	{r3}
 800f4d8:	469e      	mov	lr, r3
 800f4da:	4770      	bx	lr
