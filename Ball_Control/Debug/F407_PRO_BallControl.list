
F407_PRO_BallControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d38c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d314  0800d520  0800d520  0001d520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a834  0801a834  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a834  0801a834  0002a834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a83c  0801a83c  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a83c  0801a83c  0002a83c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a840  0801a840  0002a840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0801a844  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  200001e8  0801aa2c  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  0801aa2c  000305b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0c7  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c28  00000000  00000000  0004c2df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0004ff08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  00051300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002561a  00000000  00000000  000525a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a379  00000000  00000000  00077bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d358d  00000000  00000000  00091f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001654c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000657c  00000000  00000000  00165514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d504 	.word	0x0800d504

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800d504 	.word	0x0800d504

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <keyboard_scan>:
 *      Author: Francis
 */

#include "keyboard.h"

uint8_t keyboard_scan(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	uint8_t i, keynum = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	71bb      	strb	r3, [r7, #6]
	static uint8_t lastnum = 0;
	if (Row1_INPUT_Read == GPIO_PIN_RESET) {			//当有按键按下
 8000f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8e:	48b8      	ldr	r0, [pc, #736]	; (8001270 <keyboard_scan+0x2f0>)
 8000f90:	f006 f808 	bl	8006fa4 <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d167      	bne.n	800106a <keyboard_scan+0xea>
		HAL_Delay(20);
 8000f9a:	2014      	movs	r0, #20
 8000f9c:	f005 f92e 	bl	80061fc <HAL_Delay>
		if (Row1_INPUT_Read == GPIO_PIN_RESET) { //消抖
 8000fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa4:	48b2      	ldr	r0, [pc, #712]	; (8001270 <keyboard_scan+0x2f0>)
 8000fa6:	f005 fffd 	bl	8006fa4 <HAL_GPIO_ReadPin>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f040 81c7 	bne.w	8001340 <keyboard_scan+0x3c0>
			for (i = 1; i <= 4; i++) {
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	e054      	b.n	8001062 <keyboard_scan+0xe2>
				if (i == 1)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d105      	bne.n	8000fca <keyboard_scan+0x4a>
					Column1_OUT_High;		//逐个拉低每列的IO
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2108      	movs	r1, #8
 8000fc2:	48ab      	ldr	r0, [pc, #684]	; (8001270 <keyboard_scan+0x2f0>)
 8000fc4:	f006 f806 	bl	8006fd4 <HAL_GPIO_WritePin>
 8000fc8:	e01a      	b.n	8001000 <keyboard_scan+0x80>
				else if (i == 2)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d105      	bne.n	8000fdc <keyboard_scan+0x5c>
					Column2_OUT_High;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2120      	movs	r1, #32
 8000fd4:	48a6      	ldr	r0, [pc, #664]	; (8001270 <keyboard_scan+0x2f0>)
 8000fd6:	f005 fffd 	bl	8006fd4 <HAL_GPIO_WritePin>
 8000fda:	e011      	b.n	8001000 <keyboard_scan+0x80>
				else if (i == 3)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d105      	bne.n	8000fee <keyboard_scan+0x6e>
					Column3_OUT_High;
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2180      	movs	r1, #128	; 0x80
 8000fe6:	48a2      	ldr	r0, [pc, #648]	; (8001270 <keyboard_scan+0x2f0>)
 8000fe8:	f005 fff4 	bl	8006fd4 <HAL_GPIO_WritePin>
 8000fec:	e008      	b.n	8001000 <keyboard_scan+0x80>
				else if (i == 4)
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d105      	bne.n	8001000 <keyboard_scan+0x80>
					Column4_OUT_High;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffa:	489d      	ldr	r0, [pc, #628]	; (8001270 <keyboard_scan+0x2f0>)
 8000ffc:	f005 ffea 	bl	8006fd4 <HAL_GPIO_WritePin>

				if (Row1_INPUT_Read == GPIO_PIN_SET) //如果检测到行IO电平跟着变化，则判断为该按键按下
 8001000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001004:	489a      	ldr	r0, [pc, #616]	; (8001270 <keyboard_scan+0x2f0>)
 8001006:	f005 ffcd 	bl	8006fa4 <HAL_GPIO_ReadPin>
 800100a:	4603      	mov	r3, r0
 800100c:	2b01      	cmp	r3, #1
 800100e:	d101      	bne.n	8001014 <keyboard_scan+0x94>
					keynum = i;
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	71bb      	strb	r3, [r7, #6]

				if (i == 1)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d105      	bne.n	8001026 <keyboard_scan+0xa6>
					Column1_OUT_Low;
 800101a:	2200      	movs	r2, #0
 800101c:	2108      	movs	r1, #8
 800101e:	4894      	ldr	r0, [pc, #592]	; (8001270 <keyboard_scan+0x2f0>)
 8001020:	f005 ffd8 	bl	8006fd4 <HAL_GPIO_WritePin>
 8001024:	e01a      	b.n	800105c <keyboard_scan+0xdc>
				else if (i == 2)
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d105      	bne.n	8001038 <keyboard_scan+0xb8>
					Column2_OUT_Low;
 800102c:	2200      	movs	r2, #0
 800102e:	2120      	movs	r1, #32
 8001030:	488f      	ldr	r0, [pc, #572]	; (8001270 <keyboard_scan+0x2f0>)
 8001032:	f005 ffcf 	bl	8006fd4 <HAL_GPIO_WritePin>
 8001036:	e011      	b.n	800105c <keyboard_scan+0xdc>
				else if (i == 3)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b03      	cmp	r3, #3
 800103c:	d105      	bne.n	800104a <keyboard_scan+0xca>
					Column3_OUT_Low;	//每次列IO电平操作之后记得复原
 800103e:	2200      	movs	r2, #0
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	488b      	ldr	r0, [pc, #556]	; (8001270 <keyboard_scan+0x2f0>)
 8001044:	f005 ffc6 	bl	8006fd4 <HAL_GPIO_WritePin>
 8001048:	e008      	b.n	800105c <keyboard_scan+0xdc>
				else if (i == 4)
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b04      	cmp	r3, #4
 800104e:	d105      	bne.n	800105c <keyboard_scan+0xdc>
					Column4_OUT_Low;
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001056:	4886      	ldr	r0, [pc, #536]	; (8001270 <keyboard_scan+0x2f0>)
 8001058:	f005 ffbc 	bl	8006fd4 <HAL_GPIO_WritePin>
			for (i = 1; i <= 4; i++) {
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	3301      	adds	r3, #1
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b04      	cmp	r3, #4
 8001066:	d9a7      	bls.n	8000fb8 <keyboard_scan+0x38>
 8001068:	e16a      	b.n	8001340 <keyboard_scan+0x3c0>
			}
		}
	} else if (Row2_INPUT_Read == GPIO_PIN_RESET) {
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	4880      	ldr	r0, [pc, #512]	; (8001270 <keyboard_scan+0x2f0>)
 800106e:	f005 ff99 	bl	8006fa4 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d166      	bne.n	8001146 <keyboard_scan+0x1c6>
		HAL_Delay(20);
 8001078:	2014      	movs	r0, #20
 800107a:	f005 f8bf 	bl	80061fc <HAL_Delay>
		if (Row2_INPUT_Read == GPIO_PIN_RESET) { //消抖
 800107e:	2140      	movs	r1, #64	; 0x40
 8001080:	487b      	ldr	r0, [pc, #492]	; (8001270 <keyboard_scan+0x2f0>)
 8001082:	f005 ff8f 	bl	8006fa4 <HAL_GPIO_ReadPin>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	f040 8159 	bne.w	8001340 <keyboard_scan+0x3c0>
			for (i = 1; i <= 4; i++) {
 800108e:	2301      	movs	r3, #1
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	e054      	b.n	800113e <keyboard_scan+0x1be>
				if (i == 1)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d105      	bne.n	80010a6 <keyboard_scan+0x126>
					Column1_OUT_High;
 800109a:	2201      	movs	r2, #1
 800109c:	2108      	movs	r1, #8
 800109e:	4874      	ldr	r0, [pc, #464]	; (8001270 <keyboard_scan+0x2f0>)
 80010a0:	f005 ff98 	bl	8006fd4 <HAL_GPIO_WritePin>
 80010a4:	e01a      	b.n	80010dc <keyboard_scan+0x15c>
				else if (i == 2)
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d105      	bne.n	80010b8 <keyboard_scan+0x138>
					Column2_OUT_High;
 80010ac:	2201      	movs	r2, #1
 80010ae:	2120      	movs	r1, #32
 80010b0:	486f      	ldr	r0, [pc, #444]	; (8001270 <keyboard_scan+0x2f0>)
 80010b2:	f005 ff8f 	bl	8006fd4 <HAL_GPIO_WritePin>
 80010b6:	e011      	b.n	80010dc <keyboard_scan+0x15c>
				else if (i == 3)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d105      	bne.n	80010ca <keyboard_scan+0x14a>
					Column3_OUT_High;
 80010be:	2201      	movs	r2, #1
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	486b      	ldr	r0, [pc, #428]	; (8001270 <keyboard_scan+0x2f0>)
 80010c4:	f005 ff86 	bl	8006fd4 <HAL_GPIO_WritePin>
 80010c8:	e008      	b.n	80010dc <keyboard_scan+0x15c>
				else if (i == 4)
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d105      	bne.n	80010dc <keyboard_scan+0x15c>
					Column4_OUT_High;
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d6:	4866      	ldr	r0, [pc, #408]	; (8001270 <keyboard_scan+0x2f0>)
 80010d8:	f005 ff7c 	bl	8006fd4 <HAL_GPIO_WritePin>

				if (Row2_INPUT_Read == GPIO_PIN_SET)
 80010dc:	2140      	movs	r1, #64	; 0x40
 80010de:	4864      	ldr	r0, [pc, #400]	; (8001270 <keyboard_scan+0x2f0>)
 80010e0:	f005 ff60 	bl	8006fa4 <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d102      	bne.n	80010f0 <keyboard_scan+0x170>
					keynum = i + 4;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	3304      	adds	r3, #4
 80010ee:	71bb      	strb	r3, [r7, #6]

				if (i == 1)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d105      	bne.n	8001102 <keyboard_scan+0x182>
					Column1_OUT_Low;
 80010f6:	2200      	movs	r2, #0
 80010f8:	2108      	movs	r1, #8
 80010fa:	485d      	ldr	r0, [pc, #372]	; (8001270 <keyboard_scan+0x2f0>)
 80010fc:	f005 ff6a 	bl	8006fd4 <HAL_GPIO_WritePin>
 8001100:	e01a      	b.n	8001138 <keyboard_scan+0x1b8>
				else if (i == 2)
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d105      	bne.n	8001114 <keyboard_scan+0x194>
					Column2_OUT_Low;
 8001108:	2200      	movs	r2, #0
 800110a:	2120      	movs	r1, #32
 800110c:	4858      	ldr	r0, [pc, #352]	; (8001270 <keyboard_scan+0x2f0>)
 800110e:	f005 ff61 	bl	8006fd4 <HAL_GPIO_WritePin>
 8001112:	e011      	b.n	8001138 <keyboard_scan+0x1b8>
				else if (i == 3)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d105      	bne.n	8001126 <keyboard_scan+0x1a6>
					Column3_OUT_Low;
 800111a:	2200      	movs	r2, #0
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	4854      	ldr	r0, [pc, #336]	; (8001270 <keyboard_scan+0x2f0>)
 8001120:	f005 ff58 	bl	8006fd4 <HAL_GPIO_WritePin>
 8001124:	e008      	b.n	8001138 <keyboard_scan+0x1b8>
				else if (i == 4)
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b04      	cmp	r3, #4
 800112a:	d105      	bne.n	8001138 <keyboard_scan+0x1b8>
					Column4_OUT_Low;
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001132:	484f      	ldr	r0, [pc, #316]	; (8001270 <keyboard_scan+0x2f0>)
 8001134:	f005 ff4e 	bl	8006fd4 <HAL_GPIO_WritePin>
			for (i = 1; i <= 4; i++) {
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	3301      	adds	r3, #1
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b04      	cmp	r3, #4
 8001142:	d9a7      	bls.n	8001094 <keyboard_scan+0x114>
 8001144:	e0fc      	b.n	8001340 <keyboard_scan+0x3c0>

			}
		}
	} else if (Row3_INPUT_Read == GPIO_PIN_RESET) {
 8001146:	2110      	movs	r1, #16
 8001148:	4849      	ldr	r0, [pc, #292]	; (8001270 <keyboard_scan+0x2f0>)
 800114a:	f005 ff2b 	bl	8006fa4 <HAL_GPIO_ReadPin>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d166      	bne.n	8001222 <keyboard_scan+0x2a2>
		HAL_Delay(20);
 8001154:	2014      	movs	r0, #20
 8001156:	f005 f851 	bl	80061fc <HAL_Delay>
		if (Row3_INPUT_Read == GPIO_PIN_RESET) { //消抖
 800115a:	2110      	movs	r1, #16
 800115c:	4844      	ldr	r0, [pc, #272]	; (8001270 <keyboard_scan+0x2f0>)
 800115e:	f005 ff21 	bl	8006fa4 <HAL_GPIO_ReadPin>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	f040 80eb 	bne.w	8001340 <keyboard_scan+0x3c0>
			for (i = 1; i <= 4; i++) {
 800116a:	2301      	movs	r3, #1
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	e054      	b.n	800121a <keyboard_scan+0x29a>
				if (i == 1)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d105      	bne.n	8001182 <keyboard_scan+0x202>
					Column1_OUT_High;
 8001176:	2201      	movs	r2, #1
 8001178:	2108      	movs	r1, #8
 800117a:	483d      	ldr	r0, [pc, #244]	; (8001270 <keyboard_scan+0x2f0>)
 800117c:	f005 ff2a 	bl	8006fd4 <HAL_GPIO_WritePin>
 8001180:	e01a      	b.n	80011b8 <keyboard_scan+0x238>
				else if (i == 2)
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d105      	bne.n	8001194 <keyboard_scan+0x214>
					Column2_OUT_High;
 8001188:	2201      	movs	r2, #1
 800118a:	2120      	movs	r1, #32
 800118c:	4838      	ldr	r0, [pc, #224]	; (8001270 <keyboard_scan+0x2f0>)
 800118e:	f005 ff21 	bl	8006fd4 <HAL_GPIO_WritePin>
 8001192:	e011      	b.n	80011b8 <keyboard_scan+0x238>
				else if (i == 3)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	2b03      	cmp	r3, #3
 8001198:	d105      	bne.n	80011a6 <keyboard_scan+0x226>
					Column3_OUT_High;
 800119a:	2201      	movs	r2, #1
 800119c:	2180      	movs	r1, #128	; 0x80
 800119e:	4834      	ldr	r0, [pc, #208]	; (8001270 <keyboard_scan+0x2f0>)
 80011a0:	f005 ff18 	bl	8006fd4 <HAL_GPIO_WritePin>
 80011a4:	e008      	b.n	80011b8 <keyboard_scan+0x238>
				else if (i == 4)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d105      	bne.n	80011b8 <keyboard_scan+0x238>
					Column4_OUT_High;
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b2:	482f      	ldr	r0, [pc, #188]	; (8001270 <keyboard_scan+0x2f0>)
 80011b4:	f005 ff0e 	bl	8006fd4 <HAL_GPIO_WritePin>

				if (Row3_INPUT_Read == GPIO_PIN_SET)
 80011b8:	2110      	movs	r1, #16
 80011ba:	482d      	ldr	r0, [pc, #180]	; (8001270 <keyboard_scan+0x2f0>)
 80011bc:	f005 fef2 	bl	8006fa4 <HAL_GPIO_ReadPin>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d102      	bne.n	80011cc <keyboard_scan+0x24c>
					keynum = i + 8;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	3308      	adds	r3, #8
 80011ca:	71bb      	strb	r3, [r7, #6]

				if (i == 1)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d105      	bne.n	80011de <keyboard_scan+0x25e>
					Column1_OUT_Low;
 80011d2:	2200      	movs	r2, #0
 80011d4:	2108      	movs	r1, #8
 80011d6:	4826      	ldr	r0, [pc, #152]	; (8001270 <keyboard_scan+0x2f0>)
 80011d8:	f005 fefc 	bl	8006fd4 <HAL_GPIO_WritePin>
 80011dc:	e01a      	b.n	8001214 <keyboard_scan+0x294>
				else if (i == 2)
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d105      	bne.n	80011f0 <keyboard_scan+0x270>
					Column2_OUT_Low;
 80011e4:	2200      	movs	r2, #0
 80011e6:	2120      	movs	r1, #32
 80011e8:	4821      	ldr	r0, [pc, #132]	; (8001270 <keyboard_scan+0x2f0>)
 80011ea:	f005 fef3 	bl	8006fd4 <HAL_GPIO_WritePin>
 80011ee:	e011      	b.n	8001214 <keyboard_scan+0x294>
				else if (i == 3)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d105      	bne.n	8001202 <keyboard_scan+0x282>
					Column3_OUT_Low;
 80011f6:	2200      	movs	r2, #0
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	481d      	ldr	r0, [pc, #116]	; (8001270 <keyboard_scan+0x2f0>)
 80011fc:	f005 feea 	bl	8006fd4 <HAL_GPIO_WritePin>
 8001200:	e008      	b.n	8001214 <keyboard_scan+0x294>
				else if (i == 4)
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b04      	cmp	r3, #4
 8001206:	d105      	bne.n	8001214 <keyboard_scan+0x294>
					Column4_OUT_Low;
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800120e:	4818      	ldr	r0, [pc, #96]	; (8001270 <keyboard_scan+0x2f0>)
 8001210:	f005 fee0 	bl	8006fd4 <HAL_GPIO_WritePin>
			for (i = 1; i <= 4; i++) {
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	3301      	adds	r3, #1
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b04      	cmp	r3, #4
 800121e:	d9a7      	bls.n	8001170 <keyboard_scan+0x1f0>
 8001220:	e08e      	b.n	8001340 <keyboard_scan+0x3c0>

			}
		}
	} else if (Row4_INPUT_Read == GPIO_PIN_RESET) {
 8001222:	2104      	movs	r1, #4
 8001224:	4812      	ldr	r0, [pc, #72]	; (8001270 <keyboard_scan+0x2f0>)
 8001226:	f005 febd 	bl	8006fa4 <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d168      	bne.n	8001302 <keyboard_scan+0x382>
		HAL_Delay(20);
 8001230:	2014      	movs	r0, #20
 8001232:	f004 ffe3 	bl	80061fc <HAL_Delay>
		if (Row4_INPUT_Read == GPIO_PIN_RESET) { //消抖
 8001236:	2104      	movs	r1, #4
 8001238:	480d      	ldr	r0, [pc, #52]	; (8001270 <keyboard_scan+0x2f0>)
 800123a:	f005 feb3 	bl	8006fa4 <HAL_GPIO_ReadPin>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d17d      	bne.n	8001340 <keyboard_scan+0x3c0>
			for (i = 1; i <= 4; i++) {
 8001244:	2301      	movs	r3, #1
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	e057      	b.n	80012fa <keyboard_scan+0x37a>
				if (i == 1)
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d105      	bne.n	800125c <keyboard_scan+0x2dc>
					Column1_OUT_High;
 8001250:	2201      	movs	r2, #1
 8001252:	2108      	movs	r1, #8
 8001254:	4806      	ldr	r0, [pc, #24]	; (8001270 <keyboard_scan+0x2f0>)
 8001256:	f005 febd 	bl	8006fd4 <HAL_GPIO_WritePin>
 800125a:	e01d      	b.n	8001298 <keyboard_scan+0x318>
				else if (i == 2)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d108      	bne.n	8001274 <keyboard_scan+0x2f4>
					Column2_OUT_High;
 8001262:	2201      	movs	r2, #1
 8001264:	2120      	movs	r1, #32
 8001266:	4802      	ldr	r0, [pc, #8]	; (8001270 <keyboard_scan+0x2f0>)
 8001268:	f005 feb4 	bl	8006fd4 <HAL_GPIO_WritePin>
 800126c:	e014      	b.n	8001298 <keyboard_scan+0x318>
 800126e:	bf00      	nop
 8001270:	40021800 	.word	0x40021800
				else if (i == 3)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b03      	cmp	r3, #3
 8001278:	d105      	bne.n	8001286 <keyboard_scan+0x306>
					Column3_OUT_High;
 800127a:	2201      	movs	r2, #1
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	4838      	ldr	r0, [pc, #224]	; (8001360 <keyboard_scan+0x3e0>)
 8001280:	f005 fea8 	bl	8006fd4 <HAL_GPIO_WritePin>
 8001284:	e008      	b.n	8001298 <keyboard_scan+0x318>
				else if (i == 4)
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b04      	cmp	r3, #4
 800128a:	d105      	bne.n	8001298 <keyboard_scan+0x318>
					Column4_OUT_High;
 800128c:	2201      	movs	r2, #1
 800128e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001292:	4833      	ldr	r0, [pc, #204]	; (8001360 <keyboard_scan+0x3e0>)
 8001294:	f005 fe9e 	bl	8006fd4 <HAL_GPIO_WritePin>

				if (Row4_INPUT_Read == GPIO_PIN_SET)
 8001298:	2104      	movs	r1, #4
 800129a:	4831      	ldr	r0, [pc, #196]	; (8001360 <keyboard_scan+0x3e0>)
 800129c:	f005 fe82 	bl	8006fa4 <HAL_GPIO_ReadPin>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d102      	bne.n	80012ac <keyboard_scan+0x32c>
					keynum = i + 12;
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	330c      	adds	r3, #12
 80012aa:	71bb      	strb	r3, [r7, #6]

				if (i == 1)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d105      	bne.n	80012be <keyboard_scan+0x33e>
					Column1_OUT_Low;
 80012b2:	2200      	movs	r2, #0
 80012b4:	2108      	movs	r1, #8
 80012b6:	482a      	ldr	r0, [pc, #168]	; (8001360 <keyboard_scan+0x3e0>)
 80012b8:	f005 fe8c 	bl	8006fd4 <HAL_GPIO_WritePin>
 80012bc:	e01a      	b.n	80012f4 <keyboard_scan+0x374>
				else if (i == 2)
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d105      	bne.n	80012d0 <keyboard_scan+0x350>
					Column2_OUT_Low;
 80012c4:	2200      	movs	r2, #0
 80012c6:	2120      	movs	r1, #32
 80012c8:	4825      	ldr	r0, [pc, #148]	; (8001360 <keyboard_scan+0x3e0>)
 80012ca:	f005 fe83 	bl	8006fd4 <HAL_GPIO_WritePin>
 80012ce:	e011      	b.n	80012f4 <keyboard_scan+0x374>
				else if (i == 3)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d105      	bne.n	80012e2 <keyboard_scan+0x362>
					Column3_OUT_Low;
 80012d6:	2200      	movs	r2, #0
 80012d8:	2180      	movs	r1, #128	; 0x80
 80012da:	4821      	ldr	r0, [pc, #132]	; (8001360 <keyboard_scan+0x3e0>)
 80012dc:	f005 fe7a 	bl	8006fd4 <HAL_GPIO_WritePin>
 80012e0:	e008      	b.n	80012f4 <keyboard_scan+0x374>
				else if (i == 4)
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d105      	bne.n	80012f4 <keyboard_scan+0x374>
					Column4_OUT_Low;
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ee:	481c      	ldr	r0, [pc, #112]	; (8001360 <keyboard_scan+0x3e0>)
 80012f0:	f005 fe70 	bl	8006fd4 <HAL_GPIO_WritePin>
			for (i = 1; i <= 4; i++) {
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	3301      	adds	r3, #1
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d9a4      	bls.n	800124a <keyboard_scan+0x2ca>
 8001300:	e01e      	b.n	8001340 <keyboard_scan+0x3c0>

			}
		}
	} else if (Row1_INPUT_Read == GPIO_PIN_SET
 8001302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001306:	4816      	ldr	r0, [pc, #88]	; (8001360 <keyboard_scan+0x3e0>)
 8001308:	f005 fe4c 	bl	8006fa4 <HAL_GPIO_ReadPin>
 800130c:	4603      	mov	r3, r0
 800130e:	2b01      	cmp	r3, #1
 8001310:	d116      	bne.n	8001340 <keyboard_scan+0x3c0>
			&& Row2_INPUT_Read == GPIO_PIN_RESET
 8001312:	2140      	movs	r1, #64	; 0x40
 8001314:	4812      	ldr	r0, [pc, #72]	; (8001360 <keyboard_scan+0x3e0>)
 8001316:	f005 fe45 	bl	8006fa4 <HAL_GPIO_ReadPin>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10f      	bne.n	8001340 <keyboard_scan+0x3c0>
			&& Row3_INPUT_Read == GPIO_PIN_RESET
 8001320:	2110      	movs	r1, #16
 8001322:	480f      	ldr	r0, [pc, #60]	; (8001360 <keyboard_scan+0x3e0>)
 8001324:	f005 fe3e 	bl	8006fa4 <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d108      	bne.n	8001340 <keyboard_scan+0x3c0>
			&& Row4_INPUT_Read == GPIO_PIN_RESET) {
 800132e:	2104      	movs	r1, #4
 8001330:	480b      	ldr	r0, [pc, #44]	; (8001360 <keyboard_scan+0x3e0>)
 8001332:	f005 fe37 	bl	8006fa4 <HAL_GPIO_ReadPin>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <keyboard_scan+0x3c0>
		return NOPRES;
 800133c:	2300      	movs	r3, #0
 800133e:	e00a      	b.n	8001356 <keyboard_scan+0x3d6>
	}

	if(lastnum == keynum)
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <keyboard_scan+0x3e4>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	79ba      	ldrb	r2, [r7, #6]
 8001346:	429a      	cmp	r2, r3
 8001348:	d101      	bne.n	800134e <keyboard_scan+0x3ce>
	{
		return NOPRES;
 800134a:	2300      	movs	r3, #0
 800134c:	e003      	b.n	8001356 <keyboard_scan+0x3d6>
	}
	lastnum = keynum;
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <keyboard_scan+0x3e4>)
 8001350:	79bb      	ldrb	r3, [r7, #6]
 8001352:	7013      	strb	r3, [r2, #0]
	return keynum;
 8001354:	79bb      	ldrb	r3, [r7, #6]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40021800 	.word	0x40021800
 8001364:	20000204 	.word	0x20000204

08001368 <LCD_WR_REG>:
_lcd_dev lcddev;

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(__IO uint16_t regval)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	80fb      	strh	r3, [r7, #6]
	regval=regval;		//使用-O2优化的时候,必须插入的延时
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	b29b      	uxth	r3, r3
 8001376:	80fb      	strh	r3, [r7, #6]
	TFT_LCD->LCD_REG=regval;//写入要写的寄存器序号
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <LCD_WR_REG+0x24>)
 800137a:	88fa      	ldrh	r2, [r7, #6]
 800137c:	b292      	uxth	r2, r2
 800137e:	801a      	strh	r2, [r3, #0]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	6c00007e 	.word	0x6c00007e

08001390 <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(__IO uint16_t data)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	80fb      	strh	r3, [r7, #6]
	data=data;			//使用-O2优化的时候,必须插入的延时
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	b29b      	uxth	r3, r3
 800139e:	80fb      	strh	r3, [r7, #6]
	TFT_LCD->LCD_RAM=data;
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <LCD_WR_DATA+0x24>)
 80013a2:	88fa      	ldrh	r2, [r7, #6]
 80013a4:	b292      	uxth	r2, r2
 80013a6:	805a      	strh	r2, [r3, #2]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	6c00007e 	.word	0x6c00007e

080013b8 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//防止被优化
	ram=TFT_LCD->LCD_RAM;
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <LCD_RD_DATA+0x20>)
 80013c0:	885b      	ldrh	r3, [r3, #2]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	80fb      	strh	r3, [r7, #6]
	return ram;
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	b29b      	uxth	r3, r3
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	6c00007e 	.word	0x6c00007e

080013dc <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	460a      	mov	r2, r1
 80013e6:	80fb      	strh	r3, [r7, #6]
 80013e8:	4613      	mov	r3, r2
 80013ea:	80bb      	strh	r3, [r7, #4]
	TFT_LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 80013ec:	4a05      	ldr	r2, [pc, #20]	; (8001404 <LCD_WriteReg+0x28>)
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	8013      	strh	r3, [r2, #0]
	TFT_LCD->LCD_RAM = LCD_RegValue;//写入数据
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <LCD_WriteReg+0x28>)
 80013f4:	88bb      	ldrh	r3, [r7, #4]
 80013f6:	8053      	strh	r3, [r2, #2]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	6c00007e 	.word	0x6c00007e

08001408 <opt_delay>:

//当mdk -O1时间优化时需要设置
//延时i
void opt_delay(uint8_t i)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	while(i--);
 8001412:	bf00      	nop
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	1e5a      	subs	r2, r3, #1
 8001418:	71fa      	strb	r2, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1fa      	bne.n	8001414 <opt_delay+0xc>
}
 800141e:	bf00      	nop
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <LCD_WriteRAM_Prepare>:
	opt_delay(5);
	return LCD_RD_DATA();		//返回读到的值
}
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
 	TFT_LCD->LCD_REG=lcddev.wramcmd;
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <LCD_WriteRAM_Prepare+0x18>)
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <LCD_WriteRAM_Prepare+0x1c>)
 8001434:	8912      	ldrh	r2, [r2, #8]
 8001436:	801a      	strh	r2, [r3, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	6c00007e 	.word	0x6c00007e
 8001448:	20000314 	.word	0x20000314

0800144c <LCD_SetCursor>:
}
//设置光标位置(对RGB屏无效)
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	460a      	mov	r2, r1
 8001456:	80fb      	strh	r3, [r7, #6]
 8001458:	4613      	mov	r3, r2
 800145a:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 800145c:	4b6b      	ldr	r3, [pc, #428]	; (800160c <LCD_SetCursor+0x1c0>)
 800145e:	889b      	ldrh	r3, [r3, #4]
 8001460:	f249 3241 	movw	r2, #37697	; 0x9341
 8001464:	4293      	cmp	r3, r2
 8001466:	d005      	beq.n	8001474 <LCD_SetCursor+0x28>
 8001468:	4b68      	ldr	r3, [pc, #416]	; (800160c <LCD_SetCursor+0x1c0>)
 800146a:	889b      	ldrh	r3, [r3, #4]
 800146c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001470:	4293      	cmp	r3, r2
 8001472:	d122      	bne.n	80014ba <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8001474:	4b65      	ldr	r3, [pc, #404]	; (800160c <LCD_SetCursor+0x1c0>)
 8001476:	895b      	ldrh	r3, [r3, #10]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff75 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	b29b      	uxth	r3, r3
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff83 	bl	8001390 <LCD_WR_DATA>
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	b29b      	uxth	r3, r3
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff7d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001496:	4b5d      	ldr	r3, [pc, #372]	; (800160c <LCD_SetCursor+0x1c0>)
 8001498:	899b      	ldrh	r3, [r3, #12]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff64 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 80014a0:	88bb      	ldrh	r3, [r7, #4]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff ff72 	bl	8001390 <LCD_WR_DATA>
 80014ac:	88bb      	ldrh	r3, [r7, #4]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff6c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
	}
}
 80014b8:	e0a3      	b.n	8001602 <LCD_SetCursor+0x1b6>
	}else if(lcddev.id==0X1963)
 80014ba:	4b54      	ldr	r3, [pc, #336]	; (800160c <LCD_SetCursor+0x1c0>)
 80014bc:	889b      	ldrh	r3, [r3, #4]
 80014be:	f641 1263 	movw	r2, #6499	; 0x1963
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d167      	bne.n	8001596 <LCD_SetCursor+0x14a>
		if(lcddev.dir==0)//x坐标需要变换
 80014c6:	4b51      	ldr	r3, [pc, #324]	; (800160c <LCD_SetCursor+0x1c0>)
 80014c8:	799b      	ldrb	r3, [r3, #6]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d11e      	bne.n	800150c <LCD_SetCursor+0xc0>
			Xpos=lcddev.width-1-Xpos;
 80014ce:	4b4f      	ldr	r3, [pc, #316]	; (800160c <LCD_SetCursor+0x1c0>)
 80014d0:	881a      	ldrh	r2, [r3, #0]
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	3b01      	subs	r3, #1
 80014da:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 80014dc:	4b4b      	ldr	r3, [pc, #300]	; (800160c <LCD_SetCursor+0x1c0>)
 80014de:	895b      	ldrh	r3, [r3, #10]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff41 	bl	8001368 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff ff52 	bl	8001390 <LCD_WR_DATA>
 80014ec:	2000      	movs	r0, #0
 80014ee:	f7ff ff4f 	bl	8001390 <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff49 	bl	8001390 <LCD_WR_DATA>
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	b29b      	uxth	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff43 	bl	8001390 <LCD_WR_DATA>
 800150a:	e021      	b.n	8001550 <LCD_SetCursor+0x104>
			LCD_WR_REG(lcddev.setxcmd);
 800150c:	4b3f      	ldr	r3, [pc, #252]	; (800160c <LCD_SetCursor+0x1c0>)
 800150e:	895b      	ldrh	r3, [r3, #10]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff29 	bl	8001368 <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	b29b      	uxth	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff37 	bl	8001390 <LCD_WR_DATA>
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff31 	bl	8001390 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 800152e:	4b37      	ldr	r3, [pc, #220]	; (800160c <LCD_SetCursor+0x1c0>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	3b01      	subs	r3, #1
 8001534:	121b      	asrs	r3, r3, #8
 8001536:	b29b      	uxth	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff29 	bl	8001390 <LCD_WR_DATA>
 800153e:	4b33      	ldr	r3, [pc, #204]	; (800160c <LCD_SetCursor+0x1c0>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	3b01      	subs	r3, #1
 8001544:	b29b      	uxth	r3, r3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	b29b      	uxth	r3, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff20 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001550:	4b2e      	ldr	r3, [pc, #184]	; (800160c <LCD_SetCursor+0x1c0>)
 8001552:	899b      	ldrh	r3, [r3, #12]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff07 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 800155a:	88bb      	ldrh	r3, [r7, #4]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	b29b      	uxth	r3, r3
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff15 	bl	8001390 <LCD_WR_DATA>
 8001566:	88bb      	ldrh	r3, [r7, #4]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	b29b      	uxth	r3, r3
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff0f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <LCD_SetCursor+0x1c0>)
 8001574:	885b      	ldrh	r3, [r3, #2]
 8001576:	3b01      	subs	r3, #1
 8001578:	121b      	asrs	r3, r3, #8
 800157a:	b29b      	uxth	r3, r3
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff07 	bl	8001390 <LCD_WR_DATA>
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <LCD_SetCursor+0x1c0>)
 8001584:	885b      	ldrh	r3, [r3, #2]
 8001586:	3b01      	subs	r3, #1
 8001588:	b29b      	uxth	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	b29b      	uxth	r3, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fefe 	bl	8001390 <LCD_WR_DATA>
}
 8001594:	e035      	b.n	8001602 <LCD_SetCursor+0x1b6>
	}else if(lcddev.id==0X5510)
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <LCD_SetCursor+0x1c0>)
 8001598:	889b      	ldrh	r3, [r3, #4]
 800159a:	f245 5210 	movw	r2, #21776	; 0x5510
 800159e:	4293      	cmp	r3, r2
 80015a0:	d12f      	bne.n	8001602 <LCD_SetCursor+0x1b6>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <LCD_SetCursor+0x1c0>)
 80015a4:	895b      	ldrh	r3, [r3, #10]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fede 	bl	8001368 <LCD_WR_REG>
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	0a1b      	lsrs	r3, r3, #8
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff feec 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <LCD_SetCursor+0x1c0>)
 80015ba:	895b      	ldrh	r3, [r3, #10]
 80015bc:	3301      	adds	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fed1 	bl	8001368 <LCD_WR_REG>
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fedf 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <LCD_SetCursor+0x1c0>)
 80015d4:	899b      	ldrh	r3, [r3, #12]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fec6 	bl	8001368 <LCD_WR_REG>
 80015dc:	88bb      	ldrh	r3, [r7, #4]
 80015de:	0a1b      	lsrs	r3, r3, #8
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fed4 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <LCD_SetCursor+0x1c0>)
 80015ea:	899b      	ldrh	r3, [r3, #12]
 80015ec:	3301      	adds	r3, #1
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff feb9 	bl	8001368 <LCD_WR_REG>
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fec7 	bl	8001390 <LCD_WR_DATA>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000314 	.word	0x20000314

08001610 <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
	uint16_t regval=0;
 800161a:	2300      	movs	r3, #0
 800161c:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg=0;
 800161e:	2300      	movs	r3, #0
 8001620:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if((lcddev.dir==1&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对1963不改变扫描方向！竖屏时1963改变方向
 8001622:	4ba9      	ldr	r3, [pc, #676]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 8001624:	799b      	ldrb	r3, [r3, #6]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d105      	bne.n	8001636 <LCD_Scan_Dir+0x26>
 800162a:	4ba7      	ldr	r3, [pc, #668]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 800162c:	889b      	ldrh	r3, [r3, #4]
 800162e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001632:	4293      	cmp	r3, r2
 8001634:	d109      	bne.n	800164a <LCD_Scan_Dir+0x3a>
 8001636:	4ba4      	ldr	r3, [pc, #656]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 8001638:	799b      	ldrb	r3, [r3, #6]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d134      	bne.n	80016a8 <LCD_Scan_Dir+0x98>
 800163e:	4ba2      	ldr	r3, [pc, #648]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 8001640:	889b      	ldrh	r3, [r3, #4]
 8001642:	f641 1263 	movw	r2, #6499	; 0x1963
 8001646:	4293      	cmp	r3, r2
 8001648:	d12e      	bne.n	80016a8 <LCD_Scan_Dir+0x98>
	{
		switch(dir)//方向转换
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	2b07      	cmp	r3, #7
 800164e:	d82c      	bhi.n	80016aa <LCD_Scan_Dir+0x9a>
 8001650:	a201      	add	r2, pc, #4	; (adr r2, 8001658 <LCD_Scan_Dir+0x48>)
 8001652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001656:	bf00      	nop
 8001658:	08001679 	.word	0x08001679
 800165c:	0800167f 	.word	0x0800167f
 8001660:	08001685 	.word	0x08001685
 8001664:	0800168b 	.word	0x0800168b
 8001668:	08001691 	.word	0x08001691
 800166c:	08001697 	.word	0x08001697
 8001670:	0800169d 	.word	0x0800169d
 8001674:	080016a3 	.word	0x080016a3
		{
			case 0:dir=6;break;
 8001678:	2306      	movs	r3, #6
 800167a:	71fb      	strb	r3, [r7, #7]
 800167c:	e015      	b.n	80016aa <LCD_Scan_Dir+0x9a>
			case 1:dir=7;break;
 800167e:	2307      	movs	r3, #7
 8001680:	71fb      	strb	r3, [r7, #7]
 8001682:	e012      	b.n	80016aa <LCD_Scan_Dir+0x9a>
			case 2:dir=4;break;
 8001684:	2304      	movs	r3, #4
 8001686:	71fb      	strb	r3, [r7, #7]
 8001688:	e00f      	b.n	80016aa <LCD_Scan_Dir+0x9a>
			case 3:dir=5;break;
 800168a:	2305      	movs	r3, #5
 800168c:	71fb      	strb	r3, [r7, #7]
 800168e:	e00c      	b.n	80016aa <LCD_Scan_Dir+0x9a>
			case 4:dir=1;break;
 8001690:	2301      	movs	r3, #1
 8001692:	71fb      	strb	r3, [r7, #7]
 8001694:	e009      	b.n	80016aa <LCD_Scan_Dir+0x9a>
			case 5:dir=0;break;
 8001696:	2300      	movs	r3, #0
 8001698:	71fb      	strb	r3, [r7, #7]
 800169a:	e006      	b.n	80016aa <LCD_Scan_Dir+0x9a>
			case 6:dir=3;break;
 800169c:	2303      	movs	r3, #3
 800169e:	71fb      	strb	r3, [r7, #7]
 80016a0:	e003      	b.n	80016aa <LCD_Scan_Dir+0x9a>
			case 7:dir=2;break;
 80016a2:	2302      	movs	r3, #2
 80016a4:	71fb      	strb	r3, [r7, #7]
 80016a6:	e000      	b.n	80016aa <LCD_Scan_Dir+0x9a>
		}
	}
 80016a8:	bf00      	nop
	if(lcddev.id==0x9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/5310/5510/1963,特殊处理
 80016aa:	4b87      	ldr	r3, [pc, #540]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80016ac:	889b      	ldrh	r3, [r3, #4]
 80016ae:	f249 3241 	movw	r2, #37697	; 0x9341
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d012      	beq.n	80016dc <LCD_Scan_Dir+0xcc>
 80016b6:	4b84      	ldr	r3, [pc, #528]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80016b8:	889b      	ldrh	r3, [r3, #4]
 80016ba:	f245 3210 	movw	r2, #21264	; 0x5310
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00c      	beq.n	80016dc <LCD_Scan_Dir+0xcc>
 80016c2:	4b81      	ldr	r3, [pc, #516]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80016c4:	889b      	ldrh	r3, [r3, #4]
 80016c6:	f245 5210 	movw	r2, #21776	; 0x5510
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d006      	beq.n	80016dc <LCD_Scan_Dir+0xcc>
 80016ce:	4b7e      	ldr	r3, [pc, #504]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80016d0:	889b      	ldrh	r3, [r3, #4]
 80016d2:	f641 1263 	movw	r2, #6499	; 0x1963
 80016d6:	4293      	cmp	r3, r2
 80016d8:	f040 8130 	bne.w	800193c <LCD_Scan_Dir+0x32c>
	{
		switch(dir)
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	2b07      	cmp	r3, #7
 80016e0:	d835      	bhi.n	800174e <LCD_Scan_Dir+0x13e>
 80016e2:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <LCD_Scan_Dir+0xd8>)
 80016e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e8:	0800174f 	.word	0x0800174f
 80016ec:	08001709 	.word	0x08001709
 80016f0:	08001713 	.word	0x08001713
 80016f4:	0800171d 	.word	0x0800171d
 80016f8:	08001727 	.word	0x08001727
 80016fc:	08001731 	.word	0x08001731
 8001700:	0800173b 	.word	0x0800173b
 8001704:	08001745 	.word	0x08001745
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 8001708:	89fb      	ldrh	r3, [r7, #14]
 800170a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800170e:	81fb      	strh	r3, [r7, #14]
				break;
 8001710:	e01d      	b.n	800174e <LCD_Scan_Dir+0x13e>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 8001712:	89fb      	ldrh	r3, [r7, #14]
 8001714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001718:	81fb      	strh	r3, [r7, #14]
				break;
 800171a:	e018      	b.n	800174e <LCD_Scan_Dir+0x13e>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 800171c:	89fb      	ldrh	r3, [r7, #14]
 800171e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001722:	81fb      	strh	r3, [r7, #14]
				break;
 8001724:	e013      	b.n	800174e <LCD_Scan_Dir+0x13e>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	f043 0320 	orr.w	r3, r3, #32
 800172c:	81fb      	strh	r3, [r7, #14]
				break;
 800172e:	e00e      	b.n	800174e <LCD_Scan_Dir+0x13e>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 8001730:	89fb      	ldrh	r3, [r7, #14]
 8001732:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001736:	81fb      	strh	r3, [r7, #14]
				break;
 8001738:	e009      	b.n	800174e <LCD_Scan_Dir+0x13e>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 800173a:	89fb      	ldrh	r3, [r7, #14]
 800173c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001740:	81fb      	strh	r3, [r7, #14]
				break;
 8001742:	e004      	b.n	800174e <LCD_Scan_Dir+0x13e>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 8001744:	89fb      	ldrh	r3, [r7, #14]
 8001746:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800174a:	81fb      	strh	r3, [r7, #14]
				break;
 800174c:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 800174e:	4b5e      	ldr	r3, [pc, #376]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 8001750:	889b      	ldrh	r3, [r3, #4]
 8001752:	f245 5210 	movw	r2, #21776	; 0x5510
 8001756:	4293      	cmp	r3, r2
 8001758:	d103      	bne.n	8001762 <LCD_Scan_Dir+0x152>
 800175a:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800175e:	81bb      	strh	r3, [r7, #12]
 8001760:	e001      	b.n	8001766 <LCD_Scan_Dir+0x156>
		else dirreg=0X36;
 8001762:	2336      	movs	r3, #54	; 0x36
 8001764:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 8001766:	4b58      	ldr	r3, [pc, #352]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 8001768:	889b      	ldrh	r3, [r3, #4]
 800176a:	f245 3210 	movw	r2, #21264	; 0x5310
 800176e:	4293      	cmp	r3, r2
 8001770:	d00f      	beq.n	8001792 <LCD_Scan_Dir+0x182>
 8001772:	4b55      	ldr	r3, [pc, #340]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 8001774:	889b      	ldrh	r3, [r3, #4]
 8001776:	f245 5210 	movw	r2, #21776	; 0x5510
 800177a:	4293      	cmp	r3, r2
 800177c:	d009      	beq.n	8001792 <LCD_Scan_Dir+0x182>
 800177e:	4b52      	ldr	r3, [pc, #328]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 8001780:	889b      	ldrh	r3, [r3, #4]
 8001782:	f641 1263 	movw	r2, #6499	; 0x1963
 8001786:	4293      	cmp	r3, r2
 8001788:	d003      	beq.n	8001792 <LCD_Scan_Dir+0x182>
 800178a:	89fb      	ldrh	r3, [r7, #14]
 800178c:	f043 0308 	orr.w	r3, r3, #8
 8001790:	81fb      	strh	r3, [r7, #14]
 		LCD_WriteReg(dirreg,regval);
 8001792:	89fa      	ldrh	r2, [r7, #14]
 8001794:	89bb      	ldrh	r3, [r7, #12]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fe1f 	bl	80013dc <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 800179e:	4b4a      	ldr	r3, [pc, #296]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80017a0:	889b      	ldrh	r3, [r3, #4]
 80017a2:	f641 1263 	movw	r2, #6499	; 0x1963
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d025      	beq.n	80017f6 <LCD_Scan_Dir+0x1e6>
		{
			if(regval&0X20)
 80017aa:	89fb      	ldrh	r3, [r7, #14]
 80017ac:	f003 0320 	and.w	r3, r3, #32
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d010      	beq.n	80017d6 <LCD_Scan_Dir+0x1c6>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 80017b4:	4b44      	ldr	r3, [pc, #272]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80017b6:	881a      	ldrh	r2, [r3, #0]
 80017b8:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80017ba:	885b      	ldrh	r3, [r3, #2]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d21a      	bcs.n	80017f6 <LCD_Scan_Dir+0x1e6>
				{
					temp=lcddev.width;
 80017c0:	4b41      	ldr	r3, [pc, #260]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 80017c6:	4b40      	ldr	r3, [pc, #256]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80017c8:	885a      	ldrh	r2, [r3, #2]
 80017ca:	4b3f      	ldr	r3, [pc, #252]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80017cc:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 80017ce:	4a3e      	ldr	r2, [pc, #248]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80017d0:	897b      	ldrh	r3, [r7, #10]
 80017d2:	8053      	strh	r3, [r2, #2]
 80017d4:	e00f      	b.n	80017f6 <LCD_Scan_Dir+0x1e6>
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 80017d6:	4b3c      	ldr	r3, [pc, #240]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80017d8:	881a      	ldrh	r2, [r3, #0]
 80017da:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80017dc:	885b      	ldrh	r3, [r3, #2]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d909      	bls.n	80017f6 <LCD_Scan_Dir+0x1e6>
				{
					temp=lcddev.width;
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 80017e8:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80017ea:	885a      	ldrh	r2, [r3, #2]
 80017ec:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80017ee:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 80017f0:	4a35      	ldr	r2, [pc, #212]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80017f2:	897b      	ldrh	r3, [r7, #10]
 80017f4:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 80017f6:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80017f8:	889b      	ldrh	r3, [r3, #4]
 80017fa:	f245 5210 	movw	r2, #21776	; 0x5510
 80017fe:	4293      	cmp	r3, r2
 8001800:	d164      	bne.n	80018cc <LCD_Scan_Dir+0x2bc>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 8001802:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 8001804:	895b      	ldrh	r3, [r3, #10]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fdae 	bl	8001368 <LCD_WR_REG>
 800180c:	2000      	movs	r0, #0
 800180e:	f7ff fdbf 	bl	8001390 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 8001812:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 8001814:	895b      	ldrh	r3, [r3, #10]
 8001816:	3301      	adds	r3, #1
 8001818:	b29b      	uxth	r3, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fda4 	bl	8001368 <LCD_WR_REG>
 8001820:	2000      	movs	r0, #0
 8001822:	f7ff fdb5 	bl	8001390 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 8001826:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 8001828:	895b      	ldrh	r3, [r3, #10]
 800182a:	3302      	adds	r3, #2
 800182c:	b29b      	uxth	r3, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fd9a 	bl	8001368 <LCD_WR_REG>
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	3b01      	subs	r3, #1
 800183a:	121b      	asrs	r3, r3, #8
 800183c:	b29b      	uxth	r3, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fda6 	bl	8001390 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001844:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 8001846:	895b      	ldrh	r3, [r3, #10]
 8001848:	3303      	adds	r3, #3
 800184a:	b29b      	uxth	r3, r3
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fd8b 	bl	8001368 <LCD_WR_REG>
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	3b01      	subs	r3, #1
 8001858:	b29b      	uxth	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	b29b      	uxth	r3, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fd96 	bl	8001390 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 8001866:	899b      	ldrh	r3, [r3, #12]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fd7d 	bl	8001368 <LCD_WR_REG>
 800186e:	2000      	movs	r0, #0
 8001870:	f7ff fd8e 	bl	8001390 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 8001876:	899b      	ldrh	r3, [r3, #12]
 8001878:	3301      	adds	r3, #1
 800187a:	b29b      	uxth	r3, r3
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fd73 	bl	8001368 <LCD_WR_REG>
 8001882:	2000      	movs	r0, #0
 8001884:	f7ff fd84 	bl	8001390 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 800188a:	899b      	ldrh	r3, [r3, #12]
 800188c:	3302      	adds	r3, #2
 800188e:	b29b      	uxth	r3, r3
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fd69 	bl	8001368 <LCD_WR_REG>
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 8001898:	885b      	ldrh	r3, [r3, #2]
 800189a:	3b01      	subs	r3, #1
 800189c:	121b      	asrs	r3, r3, #8
 800189e:	b29b      	uxth	r3, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fd75 	bl	8001390 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80018a8:	899b      	ldrh	r3, [r3, #12]
 80018aa:	3303      	adds	r3, #3
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fd5a 	bl	8001368 <LCD_WR_REG>
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <LCD_Scan_Dir+0x2b8>)
 80018b6:	885b      	ldrh	r3, [r3, #2]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fd65 	bl	8001390 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
			LCD_WR_DATA(0);LCD_WR_DATA(0);
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
		}
  	}
}
 80018c6:	e039      	b.n	800193c <LCD_Scan_Dir+0x32c>
 80018c8:	20000314 	.word	0x20000314
			LCD_WR_REG(lcddev.setxcmd);
 80018cc:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <LCD_Scan_Dir+0x334>)
 80018ce:	895b      	ldrh	r3, [r3, #10]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fd49 	bl	8001368 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80018d6:	2000      	movs	r0, #0
 80018d8:	f7ff fd5a 	bl	8001390 <LCD_WR_DATA>
 80018dc:	2000      	movs	r0, #0
 80018de:	f7ff fd57 	bl	8001390 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <LCD_Scan_Dir+0x334>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	121b      	asrs	r3, r3, #8
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fd4f 	bl	8001390 <LCD_WR_DATA>
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <LCD_Scan_Dir+0x334>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fd46 	bl	8001390 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <LCD_Scan_Dir+0x334>)
 8001906:	899b      	ldrh	r3, [r3, #12]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fd2d 	bl	8001368 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 800190e:	2000      	movs	r0, #0
 8001910:	f7ff fd3e 	bl	8001390 <LCD_WR_DATA>
 8001914:	2000      	movs	r0, #0
 8001916:	f7ff fd3b 	bl	8001390 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <LCD_Scan_Dir+0x334>)
 800191c:	885b      	ldrh	r3, [r3, #2]
 800191e:	3b01      	subs	r3, #1
 8001920:	121b      	asrs	r3, r3, #8
 8001922:	b29b      	uxth	r3, r3
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fd33 	bl	8001390 <LCD_WR_DATA>
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <LCD_Scan_Dir+0x334>)
 800192c:	885b      	ldrh	r3, [r3, #2]
 800192e:	3b01      	subs	r3, #1
 8001930:	b29b      	uxth	r3, r3
 8001932:	b2db      	uxtb	r3, r3
 8001934:	b29b      	uxth	r3, r3
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fd2a 	bl	8001390 <LCD_WR_DATA>
}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000314 	.word	0x20000314

08001948 <LCD_Fast_DrawPoint>:
}
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint32_t color)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	603a      	str	r2, [r7, #0]
 8001952:	80fb      	strh	r3, [r7, #6]
 8001954:	460b      	mov	r3, r1
 8001956:	80bb      	strh	r3, [r7, #4]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001958:	4b85      	ldr	r3, [pc, #532]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 800195a:	889b      	ldrh	r3, [r3, #4]
 800195c:	f249 3241 	movw	r2, #37697	; 0x9341
 8001960:	4293      	cmp	r3, r2
 8001962:	d005      	beq.n	8001970 <LCD_Fast_DrawPoint+0x28>
 8001964:	4b82      	ldr	r3, [pc, #520]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001966:	889b      	ldrh	r3, [r3, #4]
 8001968:	f245 3210 	movw	r2, #21264	; 0x5310
 800196c:	4293      	cmp	r3, r2
 800196e:	d122      	bne.n	80019b6 <LCD_Fast_DrawPoint+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8001970:	4b7f      	ldr	r3, [pc, #508]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001972:	895b      	ldrh	r3, [r3, #10]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fcf7 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	b29b      	uxth	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fd05 	bl	8001390 <LCD_WR_DATA>
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	b29b      	uxth	r3, r3
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fcff 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001992:	4b77      	ldr	r3, [pc, #476]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001994:	899b      	ldrh	r3, [r3, #12]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fce6 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 800199c:	88bb      	ldrh	r3, [r7, #4]
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fcf4 	bl	8001390 <LCD_WR_DATA>
 80019a8:	88bb      	ldrh	r3, [r7, #4]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fcee 	bl	8001390 <LCD_WR_DATA>
 80019b4:	e0cf      	b.n	8001b56 <LCD_Fast_DrawPoint+0x20e>
	}else if(lcddev.id==0X5510)
 80019b6:	4b6e      	ldr	r3, [pc, #440]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 80019b8:	889b      	ldrh	r3, [r3, #4]
 80019ba:	f245 5210 	movw	r2, #21776	; 0x5510
 80019be:	4293      	cmp	r3, r2
 80019c0:	d130      	bne.n	8001a24 <LCD_Fast_DrawPoint+0xdc>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 80019c2:	4b6b      	ldr	r3, [pc, #428]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 80019c4:	895b      	ldrh	r3, [r3, #10]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fcce 	bl	8001368 <LCD_WR_REG>
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fcdc 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 80019d8:	4b65      	ldr	r3, [pc, #404]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 80019da:	895b      	ldrh	r3, [r3, #10]
 80019dc:	3301      	adds	r3, #1
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fcc1 	bl	8001368 <LCD_WR_REG>
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fccf 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 80019f2:	4b5f      	ldr	r3, [pc, #380]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 80019f4:	899b      	ldrh	r3, [r3, #12]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fcb6 	bl	8001368 <LCD_WR_REG>
 80019fc:	88bb      	ldrh	r3, [r7, #4]
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fcc4 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 8001a08:	4b59      	ldr	r3, [pc, #356]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001a0a:	899b      	ldrh	r3, [r3, #12]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fca9 	bl	8001368 <LCD_WR_REG>
 8001a16:	88bb      	ldrh	r3, [r7, #4]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fcb7 	bl	8001390 <LCD_WR_DATA>
 8001a22:	e098      	b.n	8001b56 <LCD_Fast_DrawPoint+0x20e>
	}else if(lcddev.id==0X1963)
 8001a24:	4b52      	ldr	r3, [pc, #328]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001a26:	889b      	ldrh	r3, [r3, #4]
 8001a28:	f641 1263 	movw	r2, #6499	; 0x1963
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d145      	bne.n	8001abc <LCD_Fast_DrawPoint+0x174>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 8001a30:	4b4f      	ldr	r3, [pc, #316]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001a32:	799b      	ldrb	r3, [r3, #6]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d106      	bne.n	8001a46 <LCD_Fast_DrawPoint+0xfe>
 8001a38:	4b4d      	ldr	r3, [pc, #308]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001a3a:	881a      	ldrh	r2, [r3, #0]
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3b01      	subs	r3, #1
 8001a44:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001a46:	4b4a      	ldr	r3, [pc, #296]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001a48:	895b      	ldrh	r3, [r3, #10]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fc8c 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	0a1b      	lsrs	r3, r3, #8
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fc9a 	bl	8001390 <LCD_WR_DATA>
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fc94 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	0a1b      	lsrs	r3, r3, #8
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fc8e 	bl	8001390 <LCD_WR_DATA>
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fc88 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001a80:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001a82:	899b      	ldrh	r3, [r3, #12]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fc6f 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001a8a:	88bb      	ldrh	r3, [r7, #4]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fc7d 	bl	8001390 <LCD_WR_DATA>
 8001a96:	88bb      	ldrh	r3, [r7, #4]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fc77 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001aa2:	88bb      	ldrh	r3, [r7, #4]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fc71 	bl	8001390 <LCD_WR_DATA>
 8001aae:	88bb      	ldrh	r3, [r7, #4]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fc6b 	bl	8001390 <LCD_WR_DATA>
 8001aba:	e04c      	b.n	8001b56 <LCD_Fast_DrawPoint+0x20e>
	}else if(lcddev.id==0X6804)
 8001abc:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001abe:	889b      	ldrh	r3, [r3, #4]
 8001ac0:	f646 0204 	movw	r2, #26628	; 0x6804
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d12d      	bne.n	8001b24 <LCD_Fast_DrawPoint+0x1dc>
	{
		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏时处理
 8001ac8:	4b29      	ldr	r3, [pc, #164]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001aca:	799b      	ldrb	r3, [r3, #6]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d106      	bne.n	8001ade <LCD_Fast_DrawPoint+0x196>
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001ad2:	881a      	ldrh	r2, [r3, #0]
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	3b01      	subs	r3, #1
 8001adc:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001ae0:	895b      	ldrh	r3, [r3, #10]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fc40 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	0a1b      	lsrs	r3, r3, #8
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fc4e 	bl	8001390 <LCD_WR_DATA>
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fc48 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001b02:	899b      	ldrh	r3, [r3, #12]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fc2f 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001b0a:	88bb      	ldrh	r3, [r7, #4]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fc3d 	bl	8001390 <LCD_WR_DATA>
 8001b16:	88bb      	ldrh	r3, [r7, #4]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fc37 	bl	8001390 <LCD_WR_DATA>
 8001b22:	e018      	b.n	8001b56 <LCD_Fast_DrawPoint+0x20e>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏其实就是调转x,y坐标
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001b26:	799b      	ldrb	r3, [r3, #6]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d106      	bne.n	8001b3a <LCD_Fast_DrawPoint+0x1f2>
 8001b2c:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001b2e:	881a      	ldrh	r2, [r3, #0]
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3b01      	subs	r3, #1
 8001b38:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001b3c:	895b      	ldrh	r3, [r3, #10]
 8001b3e:	88fa      	ldrh	r2, [r7, #6]
 8001b40:	4611      	mov	r1, r2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fc4a 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001b4a:	899b      	ldrh	r3, [r3, #12]
 8001b4c:	88ba      	ldrh	r2, [r7, #4]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fc43 	bl	80013dc <LCD_WriteReg>
	}
	TFT_LCD->LCD_REG=lcddev.wramcmd;
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <LCD_Fast_DrawPoint+0x22c>)
 8001b58:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <LCD_Fast_DrawPoint+0x228>)
 8001b5a:	8912      	ldrh	r2, [r2, #8]
 8001b5c:	801a      	strh	r2, [r3, #0]
	TFT_LCD->LCD_RAM=color;
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <LCD_Fast_DrawPoint+0x22c>)
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	b292      	uxth	r2, r2
 8001b64:	805a      	strh	r2, [r3, #2]
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000314 	.word	0x20000314
 8001b74:	6c00007e 	.word	0x6c00007e

08001b78 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001b82:	20be      	movs	r0, #190	; 0xbe
 8001b84:	f7ff fbf0 	bl	8001368 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001b88:	2005      	movs	r0, #5
 8001b8a:	f7ff fc01 	bl	8001390 <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fcc7 	bl	8000524 <__aeabi_i2d>
 8001b96:	a310      	add	r3, pc, #64	; (adr r3, 8001bd8 <LCD_SSD_BackLightSet+0x60>)
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	f7fe fd2c 	bl	80005f8 <__aeabi_dmul>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f7fe fffe 	bl	8000ba8 <__aeabi_d2uiz>
 8001bac:	4603      	mov	r3, r0
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fbed 	bl	8001390 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f7ff fbea 	bl	8001390 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 8001bbc:	20ff      	movs	r0, #255	; 0xff
 8001bbe:	f7ff fbe7 	bl	8001390 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7ff fbe4 	bl	8001390 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f7ff fbe1 	bl	8001390 <LCD_WR_DATA>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	66666666 	.word	0x66666666
 8001bdc:	40046666 	.word	0x40046666

08001be0 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(uint8_t dir)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
	lcddev.dir=dir;		//竖屏/横屏
 8001bea:	4a64      	ldr	r2, [pc, #400]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	7193      	strb	r3, [r2, #6]
	if(dir==0)			//竖屏
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d15e      	bne.n	8001cb4 <LCD_Display_Dir+0xd4>
	{
		lcddev.width=240;
 8001bf6:	4b61      	ldr	r3, [pc, #388]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001bf8:	22f0      	movs	r2, #240	; 0xf0
 8001bfa:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001bfc:	4b5f      	ldr	r3, [pc, #380]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001bfe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c02:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001c04:	4b5d      	ldr	r3, [pc, #372]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001c06:	889b      	ldrh	r3, [r3, #4]
 8001c08:	f249 3241 	movw	r2, #37697	; 0x9341
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d005      	beq.n	8001c1c <LCD_Display_Dir+0x3c>
 8001c10:	4b5a      	ldr	r3, [pc, #360]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001c12:	889b      	ldrh	r3, [r3, #4]
 8001c14:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d118      	bne.n	8001c4e <LCD_Display_Dir+0x6e>
		{
			lcddev.wramcmd=0X2C;
 8001c1c:	4b57      	ldr	r3, [pc, #348]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001c1e:	222c      	movs	r2, #44	; 0x2c
 8001c20:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8001c22:	4b56      	ldr	r3, [pc, #344]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001c24:	222a      	movs	r2, #42	; 0x2a
 8001c26:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001c28:	4b54      	ldr	r3, [pc, #336]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001c2a:	222b      	movs	r2, #43	; 0x2b
 8001c2c:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X5310)
 8001c2e:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001c30:	889b      	ldrh	r3, [r3, #4]
 8001c32:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c36:	4293      	cmp	r3, r2
 8001c38:	f040 8099 	bne.w	8001d6e <LCD_Display_Dir+0x18e>
			{
				lcddev.width=320;
 8001c3c:	4b4f      	ldr	r3, [pc, #316]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001c3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c42:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 8001c44:	4b4d      	ldr	r3, [pc, #308]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001c46:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c4a:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X5310)
 8001c4c:	e08f      	b.n	8001d6e <LCD_Display_Dir+0x18e>
			}
		}else if(lcddev.id==0x5510)
 8001c4e:	4b4b      	ldr	r3, [pc, #300]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001c50:	889b      	ldrh	r3, [r3, #4]
 8001c52:	f245 5210 	movw	r2, #21776	; 0x5510
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d114      	bne.n	8001c84 <LCD_Display_Dir+0xa4>
		{
			lcddev.wramcmd=0X2C00;
 8001c5a:	4b48      	ldr	r3, [pc, #288]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001c5c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001c60:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8001c62:	4b46      	ldr	r3, [pc, #280]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001c64:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001c68:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8001c6a:	4b44      	ldr	r3, [pc, #272]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001c6c:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001c70:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 8001c72:	4b42      	ldr	r3, [pc, #264]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001c74:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c78:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 8001c7a:	4b40      	ldr	r3, [pc, #256]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001c7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001c80:	805a      	strh	r2, [r3, #2]
 8001c82:	e074      	b.n	8001d6e <LCD_Display_Dir+0x18e>
		}else if(lcddev.id==0X1963)
 8001c84:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001c86:	889b      	ldrh	r3, [r3, #4]
 8001c88:	f641 1263 	movw	r2, #6499	; 0x1963
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d16e      	bne.n	8001d6e <LCD_Display_Dir+0x18e>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8001c90:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001c92:	222c      	movs	r2, #44	; 0x2c
 8001c94:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 8001c96:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001c98:	222b      	movs	r2, #43	; 0x2b
 8001c9a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 8001c9c:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001c9e:	222a      	movs	r2, #42	; 0x2a
 8001ca0:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 8001ca2:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001ca4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ca8:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 8001caa:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001cac:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001cb0:	805a      	strh	r2, [r3, #2]
 8001cb2:	e05c      	b.n	8001d6e <LCD_Display_Dir+0x18e>
		}
	}else 				//横屏
	{
		lcddev.width=320;
 8001cb4:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001cb6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cba:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001cbc:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001cbe:	22f0      	movs	r2, #240	; 0xf0
 8001cc0:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001cc2:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001cc4:	889b      	ldrh	r3, [r3, #4]
 8001cc6:	f249 3241 	movw	r2, #37697	; 0x9341
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d005      	beq.n	8001cda <LCD_Display_Dir+0xfa>
 8001cce:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001cd0:	889b      	ldrh	r3, [r3, #4]
 8001cd2:	f245 3210 	movw	r2, #21264	; 0x5310
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d109      	bne.n	8001cee <LCD_Display_Dir+0x10e>
		{
			lcddev.wramcmd=0X2C;
 8001cda:	4b28      	ldr	r3, [pc, #160]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001cdc:	222c      	movs	r2, #44	; 0x2c
 8001cde:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8001ce0:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001ce2:	222a      	movs	r2, #42	; 0x2a
 8001ce4:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001ce6:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001ce8:	222b      	movs	r2, #43	; 0x2b
 8001cea:	819a      	strh	r2, [r3, #12]
 8001cec:	e031      	b.n	8001d52 <LCD_Display_Dir+0x172>
		}else if(lcddev.id==0x5510)
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001cf0:	889b      	ldrh	r3, [r3, #4]
 8001cf2:	f245 5210 	movw	r2, #21776	; 0x5510
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d114      	bne.n	8001d24 <LCD_Display_Dir+0x144>
		{
			lcddev.wramcmd=0X2C00;
 8001cfa:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001cfc:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001d00:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8001d02:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001d04:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001d08:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001d0c:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001d10:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001d14:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d18:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001d1c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d20:	805a      	strh	r2, [r3, #2]
 8001d22:	e016      	b.n	8001d52 <LCD_Display_Dir+0x172>
		}else if(lcddev.id==0X1963)
 8001d24:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001d26:	889b      	ldrh	r3, [r3, #4]
 8001d28:	f641 1263 	movw	r2, #6499	; 0x1963
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d110      	bne.n	8001d52 <LCD_Display_Dir+0x172>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001d32:	222c      	movs	r2, #44	; 0x2c
 8001d34:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001d38:	222a      	movs	r2, #42	; 0x2a
 8001d3a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001d3e:	222b      	movs	r2, #43	; 0x2b
 8001d40:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001d44:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d48:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001d4c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d50:	805a      	strh	r2, [r3, #2]
		}
		if(lcddev.id==0X5310)
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001d54:	889b      	ldrh	r3, [r3, #4]
 8001d56:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d107      	bne.n	8001d6e <LCD_Display_Dir+0x18e>
		{
			lcddev.width=480;
 8001d5e:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001d60:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d64:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <LCD_Display_Dir+0x19c>)
 8001d68:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d6c:	805a      	strh	r2, [r3, #2]
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f7ff fc4e 	bl	8001610 <LCD_Scan_Dir>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000314 	.word	0x20000314

08001d80 <TFTLCD_Init>:


//初始化lcd
//该初始化函数可以初始化各种型号的LCD(详见本.c文件最前面的描述)
void TFTLCD_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	HAL_Delay(50); // delay 50 ms
 8001d84:	2032      	movs	r0, #50	; 0x32
 8001d86:	f004 fa39 	bl	80061fc <HAL_Delay>

	//尝试9341 ID的读取
	LCD_WR_REG(0XD3);
 8001d8a:	20d3      	movs	r0, #211	; 0xd3
 8001d8c:	f7ff faec 	bl	8001368 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001d90:	f7ff fb12 	bl	80013b8 <LCD_RD_DATA>
 8001d94:	4603      	mov	r3, r0
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b5e      	ldr	r3, [pc, #376]	; (8001f14 <TFTLCD_Init+0x194>)
 8001d9a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();	//读到0X00
 8001d9c:	f7ff fb0c 	bl	80013b8 <LCD_RD_DATA>
 8001da0:	4603      	mov	r3, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b5b      	ldr	r3, [pc, #364]	; (8001f14 <TFTLCD_Init+0x194>)
 8001da6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();   	//读取93
 8001da8:	f7ff fb06 	bl	80013b8 <LCD_RD_DATA>
 8001dac:	4603      	mov	r3, r0
 8001dae:	461a      	mov	r2, r3
 8001db0:	4b58      	ldr	r3, [pc, #352]	; (8001f14 <TFTLCD_Init+0x194>)
 8001db2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001db4:	4b57      	ldr	r3, [pc, #348]	; (8001f14 <TFTLCD_Init+0x194>)
 8001db6:	889b      	ldrh	r3, [r3, #4]
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	4b55      	ldr	r3, [pc, #340]	; (8001f14 <TFTLCD_Init+0x194>)
 8001dbe:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();  	//读取41
 8001dc0:	f7ff fafa 	bl	80013b8 <LCD_RD_DATA>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b52      	ldr	r3, [pc, #328]	; (8001f14 <TFTLCD_Init+0x194>)
 8001dca:	889b      	ldrh	r3, [r3, #4]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <TFTLCD_Init+0x194>)
 8001dd2:	809a      	strh	r2, [r3, #4]
	if(lcddev.id!=0X9341)		//非9341,尝试看看是不是NT35310
 8001dd4:	4b4f      	ldr	r3, [pc, #316]	; (8001f14 <TFTLCD_Init+0x194>)
 8001dd6:	889b      	ldrh	r3, [r3, #4]
 8001dd8:	f249 3241 	movw	r2, #37697	; 0x9341
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	f000 808b 	beq.w	8001ef8 <TFTLCD_Init+0x178>
	{
		LCD_WR_REG(0XD4);
 8001de2:	20d4      	movs	r0, #212	; 0xd4
 8001de4:	f7ff fac0 	bl	8001368 <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();//dummy read
 8001de8:	f7ff fae6 	bl	80013b8 <LCD_RD_DATA>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	4b48      	ldr	r3, [pc, #288]	; (8001f14 <TFTLCD_Init+0x194>)
 8001df2:	809a      	strh	r2, [r3, #4]
		lcddev.id=LCD_RD_DATA();//读回0X01
 8001df4:	f7ff fae0 	bl	80013b8 <LCD_RD_DATA>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4b45      	ldr	r3, [pc, #276]	; (8001f14 <TFTLCD_Init+0x194>)
 8001dfe:	809a      	strh	r2, [r3, #4]
		lcddev.id=LCD_RD_DATA();//读回0X53
 8001e00:	f7ff fada 	bl	80013b8 <LCD_RD_DATA>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	4b42      	ldr	r3, [pc, #264]	; (8001f14 <TFTLCD_Init+0x194>)
 8001e0a:	809a      	strh	r2, [r3, #4]
		lcddev.id<<=8;
 8001e0c:	4b41      	ldr	r3, [pc, #260]	; (8001f14 <TFTLCD_Init+0x194>)
 8001e0e:	889b      	ldrh	r3, [r3, #4]
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <TFTLCD_Init+0x194>)
 8001e16:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 8001e18:	f7ff face 	bl	80013b8 <LCD_RD_DATA>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <TFTLCD_Init+0x194>)
 8001e22:	889b      	ldrh	r3, [r3, #4]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4b3a      	ldr	r3, [pc, #232]	; (8001f14 <TFTLCD_Init+0x194>)
 8001e2a:	809a      	strh	r2, [r3, #4]
		if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001e2c:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <TFTLCD_Init+0x194>)
 8001e2e:	889b      	ldrh	r3, [r3, #4]
 8001e30:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d05f      	beq.n	8001ef8 <TFTLCD_Init+0x178>
		{
			LCD_WR_REG(0XDA00);
 8001e38:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8001e3c:	f7ff fa94 	bl	8001368 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA();		//读回0X00
 8001e40:	f7ff faba 	bl	80013b8 <LCD_RD_DATA>
 8001e44:	4603      	mov	r3, r0
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <TFTLCD_Init+0x194>)
 8001e4a:	809a      	strh	r2, [r3, #4]
			LCD_WR_REG(0XDB00);
 8001e4c:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001e50:	f7ff fa8a 	bl	8001368 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA();		//读回0X80
 8001e54:	f7ff fab0 	bl	80013b8 <LCD_RD_DATA>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <TFTLCD_Init+0x194>)
 8001e5e:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 8001e60:	4b2c      	ldr	r3, [pc, #176]	; (8001f14 <TFTLCD_Init+0x194>)
 8001e62:	889b      	ldrh	r3, [r3, #4]
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <TFTLCD_Init+0x194>)
 8001e6a:	809a      	strh	r2, [r3, #4]
			LCD_WR_REG(0XDC00);
 8001e6c:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8001e70:	f7ff fa7a 	bl	8001368 <LCD_WR_REG>
			lcddev.id|=LCD_RD_DATA();		//读回0X00
 8001e74:	f7ff faa0 	bl	80013b8 <LCD_RD_DATA>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <TFTLCD_Init+0x194>)
 8001e7e:	889b      	ldrh	r3, [r3, #4]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <TFTLCD_Init+0x194>)
 8001e86:	809a      	strh	r2, [r3, #4]
			if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8001e88:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <TFTLCD_Init+0x194>)
 8001e8a:	889b      	ldrh	r3, [r3, #4]
 8001e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e90:	d103      	bne.n	8001e9a <TFTLCD_Init+0x11a>
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <TFTLCD_Init+0x194>)
 8001e94:	f245 5210 	movw	r2, #21776	; 0x5510
 8001e98:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <TFTLCD_Init+0x194>)
 8001e9c:	889b      	ldrh	r3, [r3, #4]
 8001e9e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d028      	beq.n	8001ef8 <TFTLCD_Init+0x178>
			{
				LCD_WR_REG(0XA1);
 8001ea6:	20a1      	movs	r0, #161	; 0xa1
 8001ea8:	f7ff fa5e 	bl	8001368 <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();
 8001eac:	f7ff fa84 	bl	80013b8 <LCD_RD_DATA>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <TFTLCD_Init+0x194>)
 8001eb6:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();	//读回0X57
 8001eb8:	f7ff fa7e 	bl	80013b8 <LCD_RD_DATA>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <TFTLCD_Init+0x194>)
 8001ec2:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <TFTLCD_Init+0x194>)
 8001ec6:	889b      	ldrh	r3, [r3, #4]
 8001ec8:	021b      	lsls	r3, r3, #8
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <TFTLCD_Init+0x194>)
 8001ece:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//读回0X61
 8001ed0:	f7ff fa72 	bl	80013b8 <LCD_RD_DATA>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <TFTLCD_Init+0x194>)
 8001eda:	889b      	ldrh	r3, [r3, #4]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <TFTLCD_Init+0x194>)
 8001ee2:	809a      	strh	r2, [r3, #4]
				if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <TFTLCD_Init+0x194>)
 8001ee6:	889b      	ldrh	r3, [r3, #4]
 8001ee8:	f245 7261 	movw	r2, #22369	; 0x5761
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d103      	bne.n	8001ef8 <TFTLCD_Init+0x178>
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <TFTLCD_Init+0x194>)
 8001ef2:	f641 1263 	movw	r2, #6499	; 0x1963
 8001ef6:	809a      	strh	r2, [r3, #4]
			}
		}
	}
	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <TFTLCD_Init+0x194>)
 8001efa:	889b      	ldrh	r3, [r3, #4]
 8001efc:	4619      	mov	r1, r3
 8001efe:	4806      	ldr	r0, [pc, #24]	; (8001f18 <TFTLCD_Init+0x198>)
 8001f00:	f008 ff9c 	bl	800ae3c <iprintf>
	if(lcddev.id==0X9341)	//9341初始化
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <TFTLCD_Init+0x194>)
 8001f06:	889b      	ldrh	r3, [r3, #4]
 8001f08:	f249 3241 	movw	r2, #37697	; 0x9341
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	f040 811b 	bne.w	8002148 <TFTLCD_Init+0x3c8>
 8001f12:	e003      	b.n	8001f1c <TFTLCD_Init+0x19c>
 8001f14:	20000314 	.word	0x20000314
 8001f18:	0800d520 	.word	0x0800d520
	{
		LCD_WR_REG(0xCF);
 8001f1c:	20cf      	movs	r0, #207	; 0xcf
 8001f1e:	f7ff fa23 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f7ff fa34 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 8001f28:	20c1      	movs	r0, #193	; 0xc1
 8001f2a:	f7ff fa31 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 8001f2e:	2030      	movs	r0, #48	; 0x30
 8001f30:	f7ff fa2e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 8001f34:	20ed      	movs	r0, #237	; 0xed
 8001f36:	f7ff fa17 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 8001f3a:	2064      	movs	r0, #100	; 0x64
 8001f3c:	f7ff fa28 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8001f40:	2003      	movs	r0, #3
 8001f42:	f7ff fa25 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 8001f46:	2012      	movs	r0, #18
 8001f48:	f7ff fa22 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 8001f4c:	2081      	movs	r0, #129	; 0x81
 8001f4e:	f7ff fa1f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 8001f52:	20e8      	movs	r0, #232	; 0xe8
 8001f54:	f7ff fa08 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 8001f58:	2085      	movs	r0, #133	; 0x85
 8001f5a:	f7ff fa19 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8001f5e:	2010      	movs	r0, #16
 8001f60:	f7ff fa16 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8001f64:	207a      	movs	r0, #122	; 0x7a
 8001f66:	f7ff fa13 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 8001f6a:	20cb      	movs	r0, #203	; 0xcb
 8001f6c:	f7ff f9fc 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 8001f70:	2039      	movs	r0, #57	; 0x39
 8001f72:	f7ff fa0d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8001f76:	202c      	movs	r0, #44	; 0x2c
 8001f78:	f7ff fa0a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7ff fa07 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8001f82:	2034      	movs	r0, #52	; 0x34
 8001f84:	f7ff fa04 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8001f88:	2002      	movs	r0, #2
 8001f8a:	f7ff fa01 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 8001f8e:	20f7      	movs	r0, #247	; 0xf7
 8001f90:	f7ff f9ea 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8001f94:	2020      	movs	r0, #32
 8001f96:	f7ff f9fb 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 8001f9a:	20ea      	movs	r0, #234	; 0xea
 8001f9c:	f7ff f9e4 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7ff f9f5 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f7ff f9f2 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 8001fac:	20c0      	movs	r0, #192	; 0xc0
 8001fae:	f7ff f9db 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001fb2:	201b      	movs	r0, #27
 8001fb4:	f7ff f9ec 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 8001fb8:	20c1      	movs	r0, #193	; 0xc1
 8001fba:	f7ff f9d5 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f7ff f9e6 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 8001fc4:	20c5      	movs	r0, #197	; 0xc5
 8001fc6:	f7ff f9cf 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 8001fca:	2030      	movs	r0, #48	; 0x30
 8001fcc:	f7ff f9e0 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 8001fd0:	2030      	movs	r0, #48	; 0x30
 8001fd2:	f7ff f9dd 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 8001fd6:	20c7      	movs	r0, #199	; 0xc7
 8001fd8:	f7ff f9c6 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 8001fdc:	20b7      	movs	r0, #183	; 0xb7
 8001fde:	f7ff f9d7 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 8001fe2:	2036      	movs	r0, #54	; 0x36
 8001fe4:	f7ff f9c0 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 8001fe8:	2048      	movs	r0, #72	; 0x48
 8001fea:	f7ff f9d1 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 8001fee:	203a      	movs	r0, #58	; 0x3a
 8001ff0:	f7ff f9ba 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 8001ff4:	2055      	movs	r0, #85	; 0x55
 8001ff6:	f7ff f9cb 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 8001ffa:	20b1      	movs	r0, #177	; 0xb1
 8001ffc:	f7ff f9b4 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002000:	2000      	movs	r0, #0
 8002002:	f7ff f9c5 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 8002006:	201a      	movs	r0, #26
 8002008:	f7ff f9c2 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 800200c:	20b6      	movs	r0, #182	; 0xb6
 800200e:	f7ff f9ab 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8002012:	200a      	movs	r0, #10
 8002014:	f7ff f9bc 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002018:	20a2      	movs	r0, #162	; 0xa2
 800201a:	f7ff f9b9 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800201e:	20f2      	movs	r0, #242	; 0xf2
 8002020:	f7ff f9a2 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002024:	2000      	movs	r0, #0
 8002026:	f7ff f9b3 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 800202a:	2026      	movs	r0, #38	; 0x26
 800202c:	f7ff f99c 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002030:	2001      	movs	r0, #1
 8002032:	f7ff f9ad 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 8002036:	20e0      	movs	r0, #224	; 0xe0
 8002038:	f7ff f996 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 800203c:	200f      	movs	r0, #15
 800203e:	f7ff f9a7 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8002042:	202a      	movs	r0, #42	; 0x2a
 8002044:	f7ff f9a4 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 8002048:	2028      	movs	r0, #40	; 0x28
 800204a:	f7ff f9a1 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 800204e:	2008      	movs	r0, #8
 8002050:	f7ff f99e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 8002054:	200e      	movs	r0, #14
 8002056:	f7ff f99b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 800205a:	2008      	movs	r0, #8
 800205c:	f7ff f998 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8002060:	2054      	movs	r0, #84	; 0x54
 8002062:	f7ff f995 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 8002066:	20a9      	movs	r0, #169	; 0xa9
 8002068:	f7ff f992 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 800206c:	2043      	movs	r0, #67	; 0x43
 800206e:	f7ff f98f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 8002072:	200a      	movs	r0, #10
 8002074:	f7ff f98c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8002078:	200f      	movs	r0, #15
 800207a:	f7ff f989 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800207e:	2000      	movs	r0, #0
 8002080:	f7ff f986 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002084:	2000      	movs	r0, #0
 8002086:	f7ff f983 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800208a:	2000      	movs	r0, #0
 800208c:	f7ff f980 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002090:	2000      	movs	r0, #0
 8002092:	f7ff f97d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 8002096:	20e1      	movs	r0, #225	; 0xe1
 8002098:	f7ff f966 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800209c:	2000      	movs	r0, #0
 800209e:	f7ff f977 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 80020a2:	2015      	movs	r0, #21
 80020a4:	f7ff f974 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 80020a8:	2017      	movs	r0, #23
 80020aa:	f7ff f971 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 80020ae:	2007      	movs	r0, #7
 80020b0:	f7ff f96e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 80020b4:	2011      	movs	r0, #17
 80020b6:	f7ff f96b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 80020ba:	2006      	movs	r0, #6
 80020bc:	f7ff f968 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 80020c0:	202b      	movs	r0, #43	; 0x2b
 80020c2:	f7ff f965 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 80020c6:	2056      	movs	r0, #86	; 0x56
 80020c8:	f7ff f962 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 80020cc:	203c      	movs	r0, #60	; 0x3c
 80020ce:	f7ff f95f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 80020d2:	2005      	movs	r0, #5
 80020d4:	f7ff f95c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 80020d8:	2010      	movs	r0, #16
 80020da:	f7ff f959 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 80020de:	200f      	movs	r0, #15
 80020e0:	f7ff f956 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80020e4:	203f      	movs	r0, #63	; 0x3f
 80020e6:	f7ff f953 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80020ea:	203f      	movs	r0, #63	; 0x3f
 80020ec:	f7ff f950 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 80020f0:	200f      	movs	r0, #15
 80020f2:	f7ff f94d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 80020f6:	202b      	movs	r0, #43	; 0x2b
 80020f8:	f7ff f936 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7ff f947 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002102:	2000      	movs	r0, #0
 8002104:	f7ff f944 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8002108:	2001      	movs	r0, #1
 800210a:	f7ff f941 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 800210e:	203f      	movs	r0, #63	; 0x3f
 8002110:	f7ff f93e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 8002114:	202a      	movs	r0, #42	; 0x2a
 8002116:	f7ff f927 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800211a:	2000      	movs	r0, #0
 800211c:	f7ff f938 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002120:	2000      	movs	r0, #0
 8002122:	f7ff f935 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002126:	2000      	movs	r0, #0
 8002128:	f7ff f932 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 800212c:	20ef      	movs	r0, #239	; 0xef
 800212e:	f7ff f92f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 8002132:	2011      	movs	r0, #17
 8002134:	f7ff f918 	bl	8001368 <LCD_WR_REG>
		HAL_Delay(120);
 8002138:	2078      	movs	r0, #120	; 0x78
 800213a:	f004 f85f 	bl	80061fc <HAL_Delay>
		LCD_WR_REG(0x29); //display on
 800213e:	2029      	movs	r0, #41	; 0x29
 8002140:	f7ff f912 	bl	8001368 <LCD_WR_REG>
 8002144:	f001 bfca 	b.w	80040dc <TFTLCD_Init+0x235c>
	}else if(lcddev.id==0x5310)
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <TFTLCD_Init+0x3d8>)
 800214a:	889b      	ldrh	r3, [r3, #4]
 800214c:	f245 3210 	movw	r2, #21264	; 0x5310
 8002150:	4293      	cmp	r3, r2
 8002152:	f040 877c 	bne.w	800304e <TFTLCD_Init+0x12ce>
 8002156:	e001      	b.n	800215c <TFTLCD_Init+0x3dc>
 8002158:	20000314 	.word	0x20000314
	{
		LCD_WR_REG(0xED);
 800215c:	20ed      	movs	r0, #237	; 0xed
 800215e:	f7ff f903 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002162:	2001      	movs	r0, #1
 8002164:	f7ff f914 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 8002168:	20fe      	movs	r0, #254	; 0xfe
 800216a:	f7ff f911 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 800216e:	20ee      	movs	r0, #238	; 0xee
 8002170:	f7ff f8fa 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 8002174:	20de      	movs	r0, #222	; 0xde
 8002176:	f7ff f90b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 800217a:	2021      	movs	r0, #33	; 0x21
 800217c:	f7ff f908 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 8002180:	20f1      	movs	r0, #241	; 0xf1
 8002182:	f7ff f8f1 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002186:	2001      	movs	r0, #1
 8002188:	f7ff f902 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 800218c:	20df      	movs	r0, #223	; 0xdf
 800218e:	f7ff f8eb 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 8002192:	2010      	movs	r0, #16
 8002194:	f7ff f8fc 	bl	8001390 <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8002198:	20c4      	movs	r0, #196	; 0xc4
 800219a:	f7ff f8e5 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 800219e:	208f      	movs	r0, #143	; 0x8f
 80021a0:	f7ff f8f6 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 80021a4:	20c6      	movs	r0, #198	; 0xc6
 80021a6:	f7ff f8df 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7ff f8f0 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80021b0:	20e2      	movs	r0, #226	; 0xe2
 80021b2:	f7ff f8ed 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80021b6:	20e2      	movs	r0, #226	; 0xe2
 80021b8:	f7ff f8ea 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80021bc:	20e2      	movs	r0, #226	; 0xe2
 80021be:	f7ff f8e7 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 80021c2:	20bf      	movs	r0, #191	; 0xbf
 80021c4:	f7ff f8d0 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 80021c8:	20aa      	movs	r0, #170	; 0xaa
 80021ca:	f7ff f8e1 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 80021ce:	20b0      	movs	r0, #176	; 0xb0
 80021d0:	f7ff f8ca 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 80021d4:	200d      	movs	r0, #13
 80021d6:	f7ff f8db 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021da:	2000      	movs	r0, #0
 80021dc:	f7ff f8d8 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 80021e0:	200d      	movs	r0, #13
 80021e2:	f7ff f8d5 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7ff f8d2 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 80021ec:	2011      	movs	r0, #17
 80021ee:	f7ff f8cf 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7ff f8cc 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 80021f8:	2019      	movs	r0, #25
 80021fa:	f7ff f8c9 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021fe:	2000      	movs	r0, #0
 8002200:	f7ff f8c6 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8002204:	2021      	movs	r0, #33	; 0x21
 8002206:	f7ff f8c3 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800220a:	2000      	movs	r0, #0
 800220c:	f7ff f8c0 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 8002210:	202d      	movs	r0, #45	; 0x2d
 8002212:	f7ff f8bd 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002216:	2000      	movs	r0, #0
 8002218:	f7ff f8ba 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 800221c:	203d      	movs	r0, #61	; 0x3d
 800221e:	f7ff f8b7 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002222:	2000      	movs	r0, #0
 8002224:	f7ff f8b4 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002228:	205d      	movs	r0, #93	; 0x5d
 800222a:	f7ff f8b1 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800222e:	2000      	movs	r0, #0
 8002230:	f7ff f8ae 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002234:	205d      	movs	r0, #93	; 0x5d
 8002236:	f7ff f8ab 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800223a:	2000      	movs	r0, #0
 800223c:	f7ff f8a8 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 8002240:	20b1      	movs	r0, #177	; 0xb1
 8002242:	f7ff f891 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 8002246:	2080      	movs	r0, #128	; 0x80
 8002248:	f7ff f8a2 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800224c:	2000      	movs	r0, #0
 800224e:	f7ff f89f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8002252:	208b      	movs	r0, #139	; 0x8b
 8002254:	f7ff f89c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002258:	2000      	movs	r0, #0
 800225a:	f7ff f899 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 800225e:	2096      	movs	r0, #150	; 0x96
 8002260:	f7ff f896 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002264:	2000      	movs	r0, #0
 8002266:	f7ff f893 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 800226a:	20b2      	movs	r0, #178	; 0xb2
 800226c:	f7ff f87c 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002270:	2000      	movs	r0, #0
 8002272:	f7ff f88d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002276:	2000      	movs	r0, #0
 8002278:	f7ff f88a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800227c:	2002      	movs	r0, #2
 800227e:	f7ff f887 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002282:	2000      	movs	r0, #0
 8002284:	f7ff f884 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8002288:	2003      	movs	r0, #3
 800228a:	f7ff f881 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800228e:	2000      	movs	r0, #0
 8002290:	f7ff f87e 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 8002294:	20b3      	movs	r0, #179	; 0xb3
 8002296:	f7ff f867 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800229a:	2000      	movs	r0, #0
 800229c:	f7ff f878 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7ff f875 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022a6:	2000      	movs	r0, #0
 80022a8:	f7ff f872 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7ff f86f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022b2:	2000      	movs	r0, #0
 80022b4:	f7ff f86c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7ff f869 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022be:	2000      	movs	r0, #0
 80022c0:	f7ff f866 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022c4:	2000      	movs	r0, #0
 80022c6:	f7ff f863 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f7ff f860 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022d0:	2000      	movs	r0, #0
 80022d2:	f7ff f85d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f7ff f85a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022dc:	2000      	movs	r0, #0
 80022de:	f7ff f857 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7ff f854 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7ff f851 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ee:	2000      	movs	r0, #0
 80022f0:	f7ff f84e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7ff f84b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f7ff f848 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002300:	2000      	movs	r0, #0
 8002302:	f7ff f845 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002306:	2000      	movs	r0, #0
 8002308:	f7ff f842 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800230c:	2000      	movs	r0, #0
 800230e:	f7ff f83f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002312:	2000      	movs	r0, #0
 8002314:	f7ff f83c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002318:	2000      	movs	r0, #0
 800231a:	f7ff f839 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800231e:	2000      	movs	r0, #0
 8002320:	f7ff f836 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002324:	2000      	movs	r0, #0
 8002326:	f7ff f833 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 800232a:	20b4      	movs	r0, #180	; 0xb4
 800232c:	f7ff f81c 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 8002330:	208b      	movs	r0, #139	; 0x8b
 8002332:	f7ff f82d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002336:	2000      	movs	r0, #0
 8002338:	f7ff f82a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 800233c:	2096      	movs	r0, #150	; 0x96
 800233e:	f7ff f827 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002342:	2000      	movs	r0, #0
 8002344:	f7ff f824 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 8002348:	20a1      	movs	r0, #161	; 0xa1
 800234a:	f7ff f821 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800234e:	2000      	movs	r0, #0
 8002350:	f7ff f81e 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 8002354:	20b5      	movs	r0, #181	; 0xb5
 8002356:	f7ff f807 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 800235a:	2002      	movs	r0, #2
 800235c:	f7ff f818 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff f815 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8002366:	2003      	movs	r0, #3
 8002368:	f7ff f812 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800236c:	2000      	movs	r0, #0
 800236e:	f7ff f80f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8002372:	2004      	movs	r0, #4
 8002374:	f7ff f80c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002378:	2000      	movs	r0, #0
 800237a:	f7ff f809 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 800237e:	20b6      	movs	r0, #182	; 0xb6
 8002380:	f7fe fff2 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002384:	2000      	movs	r0, #0
 8002386:	f7ff f803 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800238a:	2000      	movs	r0, #0
 800238c:	f7ff f800 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 8002390:	20b7      	movs	r0, #183	; 0xb7
 8002392:	f7fe ffe9 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002396:	2000      	movs	r0, #0
 8002398:	f7fe fffa 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800239c:	2000      	movs	r0, #0
 800239e:	f7fe fff7 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80023a2:	203f      	movs	r0, #63	; 0x3f
 80023a4:	f7fe fff4 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023a8:	2000      	movs	r0, #0
 80023aa:	f7fe fff1 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 80023ae:	205e      	movs	r0, #94	; 0x5e
 80023b0:	f7fe ffee 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023b4:	2000      	movs	r0, #0
 80023b6:	f7fe ffeb 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 80023ba:	2064      	movs	r0, #100	; 0x64
 80023bc:	f7fe ffe8 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe ffe5 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 80023c6:	208c      	movs	r0, #140	; 0x8c
 80023c8:	f7fe ffe2 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7fe ffdf 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 80023d2:	20ac      	movs	r0, #172	; 0xac
 80023d4:	f7fe ffdc 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023d8:	2000      	movs	r0, #0
 80023da:	f7fe ffd9 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 80023de:	20dc      	movs	r0, #220	; 0xdc
 80023e0:	f7fe ffd6 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7fe ffd3 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 80023ea:	2070      	movs	r0, #112	; 0x70
 80023ec:	f7fe ffd0 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7fe ffcd 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 80023f6:	2090      	movs	r0, #144	; 0x90
 80023f8:	f7fe ffca 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7fe ffc7 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 8002402:	20eb      	movs	r0, #235	; 0xeb
 8002404:	f7fe ffc4 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002408:	2000      	movs	r0, #0
 800240a:	f7fe ffc1 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 800240e:	20dc      	movs	r0, #220	; 0xdc
 8002410:	f7fe ffbe 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002414:	2000      	movs	r0, #0
 8002416:	f7fe ffbb 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 800241a:	20b8      	movs	r0, #184	; 0xb8
 800241c:	f7fe ffa4 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002420:	2000      	movs	r0, #0
 8002422:	f7fe ffb5 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002426:	2000      	movs	r0, #0
 8002428:	f7fe ffb2 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800242c:	2000      	movs	r0, #0
 800242e:	f7fe ffaf 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002432:	2000      	movs	r0, #0
 8002434:	f7fe ffac 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe ffa9 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800243e:	2000      	movs	r0, #0
 8002440:	f7fe ffa6 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002444:	2000      	movs	r0, #0
 8002446:	f7fe ffa3 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800244a:	2000      	movs	r0, #0
 800244c:	f7fe ffa0 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 8002450:	20ba      	movs	r0, #186	; 0xba
 8002452:	f7fe ff89 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 8002456:	2024      	movs	r0, #36	; 0x24
 8002458:	f7fe ff9a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800245c:	2000      	movs	r0, #0
 800245e:	f7fe ff97 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002462:	2000      	movs	r0, #0
 8002464:	f7fe ff94 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002468:	2000      	movs	r0, #0
 800246a:	f7fe ff91 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 800246e:	20c1      	movs	r0, #193	; 0xc1
 8002470:	f7fe ff7a 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8002474:	2020      	movs	r0, #32
 8002476:	f7fe ff8b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800247a:	2000      	movs	r0, #0
 800247c:	f7fe ff88 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8002480:	2054      	movs	r0, #84	; 0x54
 8002482:	f7fe ff85 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002486:	2000      	movs	r0, #0
 8002488:	f7fe ff82 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 800248c:	20ff      	movs	r0, #255	; 0xff
 800248e:	f7fe ff7f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002492:	2000      	movs	r0, #0
 8002494:	f7fe ff7c 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 8002498:	20c2      	movs	r0, #194	; 0xc2
 800249a:	f7fe ff65 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 800249e:	200a      	movs	r0, #10
 80024a0:	f7fe ff76 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7fe ff73 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 80024aa:	2004      	movs	r0, #4
 80024ac:	f7fe ff70 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7fe ff6d 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 80024b6:	20c3      	movs	r0, #195	; 0xc3
 80024b8:	f7fe ff56 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 80024bc:	203c      	movs	r0, #60	; 0x3c
 80024be:	f7fe ff67 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7fe ff64 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 80024c8:	203a      	movs	r0, #58	; 0x3a
 80024ca:	f7fe ff61 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7fe ff5e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 80024d4:	2039      	movs	r0, #57	; 0x39
 80024d6:	f7fe ff5b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024da:	2000      	movs	r0, #0
 80024dc:	f7fe ff58 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 80024e0:	2037      	movs	r0, #55	; 0x37
 80024e2:	f7fe ff55 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024e6:	2000      	movs	r0, #0
 80024e8:	f7fe ff52 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 80024ec:	203c      	movs	r0, #60	; 0x3c
 80024ee:	f7fe ff4f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7fe ff4c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80024f8:	2036      	movs	r0, #54	; 0x36
 80024fa:	f7fe ff49 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024fe:	2000      	movs	r0, #0
 8002500:	f7fe ff46 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8002504:	2032      	movs	r0, #50	; 0x32
 8002506:	f7fe ff43 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800250a:	2000      	movs	r0, #0
 800250c:	f7fe ff40 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8002510:	202f      	movs	r0, #47	; 0x2f
 8002512:	f7fe ff3d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe ff3a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 800251c:	202c      	movs	r0, #44	; 0x2c
 800251e:	f7fe ff37 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002522:	2000      	movs	r0, #0
 8002524:	f7fe ff34 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002528:	2029      	movs	r0, #41	; 0x29
 800252a:	f7fe ff31 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800252e:	2000      	movs	r0, #0
 8002530:	f7fe ff2e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8002534:	2026      	movs	r0, #38	; 0x26
 8002536:	f7fe ff2b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800253a:	2000      	movs	r0, #0
 800253c:	f7fe ff28 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002540:	2024      	movs	r0, #36	; 0x24
 8002542:	f7fe ff25 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002546:	2000      	movs	r0, #0
 8002548:	f7fe ff22 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 800254c:	2024      	movs	r0, #36	; 0x24
 800254e:	f7fe ff1f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002552:	2000      	movs	r0, #0
 8002554:	f7fe ff1c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002558:	2023      	movs	r0, #35	; 0x23
 800255a:	f7fe ff19 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800255e:	2000      	movs	r0, #0
 8002560:	f7fe ff16 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002564:	203c      	movs	r0, #60	; 0x3c
 8002566:	f7fe ff13 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800256a:	2000      	movs	r0, #0
 800256c:	f7fe ff10 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002570:	2036      	movs	r0, #54	; 0x36
 8002572:	f7fe ff0d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002576:	2000      	movs	r0, #0
 8002578:	f7fe ff0a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 800257c:	2032      	movs	r0, #50	; 0x32
 800257e:	f7fe ff07 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002582:	2000      	movs	r0, #0
 8002584:	f7fe ff04 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8002588:	202f      	movs	r0, #47	; 0x2f
 800258a:	f7fe ff01 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800258e:	2000      	movs	r0, #0
 8002590:	f7fe fefe 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002594:	202c      	movs	r0, #44	; 0x2c
 8002596:	f7fe fefb 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800259a:	2000      	movs	r0, #0
 800259c:	f7fe fef8 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 80025a0:	2029      	movs	r0, #41	; 0x29
 80025a2:	f7fe fef5 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7fe fef2 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 80025ac:	2026      	movs	r0, #38	; 0x26
 80025ae:	f7fe feef 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025b2:	2000      	movs	r0, #0
 80025b4:	f7fe feec 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 80025b8:	2024      	movs	r0, #36	; 0x24
 80025ba:	f7fe fee9 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025be:	2000      	movs	r0, #0
 80025c0:	f7fe fee6 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 80025c4:	2024      	movs	r0, #36	; 0x24
 80025c6:	f7fe fee3 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7fe fee0 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 80025d0:	2023      	movs	r0, #35	; 0x23
 80025d2:	f7fe fedd 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7fe feda 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 80025dc:	20c4      	movs	r0, #196	; 0xc4
 80025de:	f7fe fec3 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 80025e2:	2062      	movs	r0, #98	; 0x62
 80025e4:	f7fe fed4 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7fe fed1 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 80025ee:	2005      	movs	r0, #5
 80025f0:	f7fe fece 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7fe fecb 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 80025fa:	2084      	movs	r0, #132	; 0x84
 80025fc:	f7fe fec8 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002600:	2000      	movs	r0, #0
 8002602:	f7fe fec5 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 8002606:	20f0      	movs	r0, #240	; 0xf0
 8002608:	f7fe fec2 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800260c:	2000      	movs	r0, #0
 800260e:	f7fe febf 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8002612:	2018      	movs	r0, #24
 8002614:	f7fe febc 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002618:	2000      	movs	r0, #0
 800261a:	f7fe feb9 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 800261e:	20a4      	movs	r0, #164	; 0xa4
 8002620:	f7fe feb6 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002624:	2000      	movs	r0, #0
 8002626:	f7fe feb3 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 800262a:	2018      	movs	r0, #24
 800262c:	f7fe feb0 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002630:	2000      	movs	r0, #0
 8002632:	f7fe fead 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002636:	2050      	movs	r0, #80	; 0x50
 8002638:	f7fe feaa 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800263c:	2000      	movs	r0, #0
 800263e:	f7fe fea7 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 8002642:	200c      	movs	r0, #12
 8002644:	f7fe fea4 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002648:	2000      	movs	r0, #0
 800264a:	f7fe fea1 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 800264e:	2017      	movs	r0, #23
 8002650:	f7fe fe9e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002654:	2000      	movs	r0, #0
 8002656:	f7fe fe9b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 800265a:	2095      	movs	r0, #149	; 0x95
 800265c:	f7fe fe98 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002660:	2000      	movs	r0, #0
 8002662:	f7fe fe95 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002666:	20f3      	movs	r0, #243	; 0xf3
 8002668:	f7fe fe92 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800266c:	2000      	movs	r0, #0
 800266e:	f7fe fe8f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 8002672:	20e6      	movs	r0, #230	; 0xe6
 8002674:	f7fe fe8c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002678:	2000      	movs	r0, #0
 800267a:	f7fe fe89 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 800267e:	20c5      	movs	r0, #197	; 0xc5
 8002680:	f7fe fe72 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8002684:	2032      	movs	r0, #50	; 0x32
 8002686:	f7fe fe83 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800268a:	2000      	movs	r0, #0
 800268c:	f7fe fe80 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002690:	2044      	movs	r0, #68	; 0x44
 8002692:	f7fe fe7d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002696:	2000      	movs	r0, #0
 8002698:	f7fe fe7a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 800269c:	2065      	movs	r0, #101	; 0x65
 800269e:	f7fe fe77 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f7fe fe74 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80026a8:	2076      	movs	r0, #118	; 0x76
 80026aa:	f7fe fe71 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7fe fe6e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80026b4:	2088      	movs	r0, #136	; 0x88
 80026b6:	f7fe fe6b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026ba:	2000      	movs	r0, #0
 80026bc:	f7fe fe68 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 80026c0:	20c6      	movs	r0, #198	; 0xc6
 80026c2:	f7fe fe51 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 80026c6:	2020      	movs	r0, #32
 80026c8:	f7fe fe62 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7fe fe5f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 80026d2:	2017      	movs	r0, #23
 80026d4:	f7fe fe5c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026d8:	2000      	movs	r0, #0
 80026da:	f7fe fe59 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 80026de:	2001      	movs	r0, #1
 80026e0:	f7fe fe56 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7fe fe53 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 80026ea:	20c7      	movs	r0, #199	; 0xc7
 80026ec:	f7fe fe3c 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7fe fe4d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7fe fe4a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7fe fe47 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe fe44 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8002708:	20c8      	movs	r0, #200	; 0xc8
 800270a:	f7fe fe2d 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800270e:	2000      	movs	r0, #0
 8002710:	f7fe fe3e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002714:	2000      	movs	r0, #0
 8002716:	f7fe fe3b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800271a:	2000      	movs	r0, #0
 800271c:	f7fe fe38 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe fe35 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 8002726:	20c9      	movs	r0, #201	; 0xc9
 8002728:	f7fe fe1e 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800272c:	2000      	movs	r0, #0
 800272e:	f7fe fe2f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002732:	2000      	movs	r0, #0
 8002734:	f7fe fe2c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002738:	2000      	movs	r0, #0
 800273a:	f7fe fe29 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800273e:	2000      	movs	r0, #0
 8002740:	f7fe fe26 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002744:	2000      	movs	r0, #0
 8002746:	f7fe fe23 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800274a:	2000      	movs	r0, #0
 800274c:	f7fe fe20 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002750:	2000      	movs	r0, #0
 8002752:	f7fe fe1d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002756:	2000      	movs	r0, #0
 8002758:	f7fe fe1a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800275c:	2000      	movs	r0, #0
 800275e:	f7fe fe17 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002762:	2000      	movs	r0, #0
 8002764:	f7fe fe14 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002768:	2000      	movs	r0, #0
 800276a:	f7fe fe11 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800276e:	2000      	movs	r0, #0
 8002770:	f7fe fe0e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002774:	2000      	movs	r0, #0
 8002776:	f7fe fe0b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800277a:	2000      	movs	r0, #0
 800277c:	f7fe fe08 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002780:	2000      	movs	r0, #0
 8002782:	f7fe fe05 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002786:	2000      	movs	r0, #0
 8002788:	f7fe fe02 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 800278c:	20e0      	movs	r0, #224	; 0xe0
 800278e:	f7fe fdeb 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8002792:	2016      	movs	r0, #22
 8002794:	f7fe fdfc 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002798:	2000      	movs	r0, #0
 800279a:	f7fe fdf9 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 800279e:	201c      	movs	r0, #28
 80027a0:	f7fe fdf6 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7fe fdf3 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 80027aa:	2021      	movs	r0, #33	; 0x21
 80027ac:	f7fe fdf0 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7fe fded 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80027b6:	2036      	movs	r0, #54	; 0x36
 80027b8:	f7fe fdea 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027bc:	2000      	movs	r0, #0
 80027be:	f7fe fde7 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 80027c2:	2046      	movs	r0, #70	; 0x46
 80027c4:	f7fe fde4 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7fe fde1 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80027ce:	2052      	movs	r0, #82	; 0x52
 80027d0:	f7fe fdde 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7fe fddb 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 80027da:	2064      	movs	r0, #100	; 0x64
 80027dc:	f7fe fdd8 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7fe fdd5 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 80027e6:	207a      	movs	r0, #122	; 0x7a
 80027e8:	f7fe fdd2 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7fe fdcf 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 80027f2:	208b      	movs	r0, #139	; 0x8b
 80027f4:	f7fe fdcc 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7fe fdc9 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80027fe:	2099      	movs	r0, #153	; 0x99
 8002800:	f7fe fdc6 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002804:	2000      	movs	r0, #0
 8002806:	f7fe fdc3 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 800280a:	20a8      	movs	r0, #168	; 0xa8
 800280c:	f7fe fdc0 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002810:	2000      	movs	r0, #0
 8002812:	f7fe fdbd 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8002816:	20b9      	movs	r0, #185	; 0xb9
 8002818:	f7fe fdba 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800281c:	2000      	movs	r0, #0
 800281e:	f7fe fdb7 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002822:	20c4      	movs	r0, #196	; 0xc4
 8002824:	f7fe fdb4 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002828:	2000      	movs	r0, #0
 800282a:	f7fe fdb1 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 800282e:	20ca      	movs	r0, #202	; 0xca
 8002830:	f7fe fdae 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002834:	2000      	movs	r0, #0
 8002836:	f7fe fdab 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 800283a:	20d2      	movs	r0, #210	; 0xd2
 800283c:	f7fe fda8 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002840:	2000      	movs	r0, #0
 8002842:	f7fe fda5 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 8002846:	20d9      	movs	r0, #217	; 0xd9
 8002848:	f7fe fda2 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800284c:	2000      	movs	r0, #0
 800284e:	f7fe fd9f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8002852:	20e0      	movs	r0, #224	; 0xe0
 8002854:	f7fe fd9c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002858:	2000      	movs	r0, #0
 800285a:	f7fe fd99 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800285e:	20f3      	movs	r0, #243	; 0xf3
 8002860:	f7fe fd96 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002864:	2000      	movs	r0, #0
 8002866:	f7fe fd93 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 800286a:	20e1      	movs	r0, #225	; 0xe1
 800286c:	f7fe fd7c 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8002870:	2016      	movs	r0, #22
 8002872:	f7fe fd8d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002876:	2000      	movs	r0, #0
 8002878:	f7fe fd8a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 800287c:	201c      	movs	r0, #28
 800287e:	f7fe fd87 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002882:	2000      	movs	r0, #0
 8002884:	f7fe fd84 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 8002888:	2022      	movs	r0, #34	; 0x22
 800288a:	f7fe fd81 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800288e:	2000      	movs	r0, #0
 8002890:	f7fe fd7e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002894:	2036      	movs	r0, #54	; 0x36
 8002896:	f7fe fd7b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800289a:	2000      	movs	r0, #0
 800289c:	f7fe fd78 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80028a0:	2045      	movs	r0, #69	; 0x45
 80028a2:	f7fe fd75 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028a6:	2000      	movs	r0, #0
 80028a8:	f7fe fd72 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80028ac:	2052      	movs	r0, #82	; 0x52
 80028ae:	f7fe fd6f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7fe fd6c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 80028b8:	2064      	movs	r0, #100	; 0x64
 80028ba:	f7fe fd69 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028be:	2000      	movs	r0, #0
 80028c0:	f7fe fd66 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 80028c4:	207a      	movs	r0, #122	; 0x7a
 80028c6:	f7fe fd63 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ca:	2000      	movs	r0, #0
 80028cc:	f7fe fd60 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 80028d0:	208b      	movs	r0, #139	; 0x8b
 80028d2:	f7fe fd5d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7fe fd5a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80028dc:	2099      	movs	r0, #153	; 0x99
 80028de:	f7fe fd57 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028e2:	2000      	movs	r0, #0
 80028e4:	f7fe fd54 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 80028e8:	20a8      	movs	r0, #168	; 0xa8
 80028ea:	f7fe fd51 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7fe fd4e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 80028f4:	20b9      	movs	r0, #185	; 0xb9
 80028f6:	f7fe fd4b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028fa:	2000      	movs	r0, #0
 80028fc:	f7fe fd48 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002900:	20c4      	movs	r0, #196	; 0xc4
 8002902:	f7fe fd45 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002906:	2000      	movs	r0, #0
 8002908:	f7fe fd42 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 800290c:	20ca      	movs	r0, #202	; 0xca
 800290e:	f7fe fd3f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002912:	2000      	movs	r0, #0
 8002914:	f7fe fd3c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002918:	20d2      	movs	r0, #210	; 0xd2
 800291a:	f7fe fd39 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800291e:	2000      	movs	r0, #0
 8002920:	f7fe fd36 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 8002924:	20d8      	movs	r0, #216	; 0xd8
 8002926:	f7fe fd33 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800292a:	2000      	movs	r0, #0
 800292c:	f7fe fd30 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8002930:	20e0      	movs	r0, #224	; 0xe0
 8002932:	f7fe fd2d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002936:	2000      	movs	r0, #0
 8002938:	f7fe fd2a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800293c:	20f3      	movs	r0, #243	; 0xf3
 800293e:	f7fe fd27 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002942:	2000      	movs	r0, #0
 8002944:	f7fe fd24 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 8002948:	20e2      	movs	r0, #226	; 0xe2
 800294a:	f7fe fd0d 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 800294e:	2005      	movs	r0, #5
 8002950:	f7fe fd1e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002954:	2000      	movs	r0, #0
 8002956:	f7fe fd1b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 800295a:	200b      	movs	r0, #11
 800295c:	f7fe fd18 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002960:	2000      	movs	r0, #0
 8002962:	f7fe fd15 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 8002966:	201b      	movs	r0, #27
 8002968:	f7fe fd12 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800296c:	2000      	movs	r0, #0
 800296e:	f7fe fd0f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8002972:	2034      	movs	r0, #52	; 0x34
 8002974:	f7fe fd0c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002978:	2000      	movs	r0, #0
 800297a:	f7fe fd09 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800297e:	2044      	movs	r0, #68	; 0x44
 8002980:	f7fe fd06 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002984:	2000      	movs	r0, #0
 8002986:	f7fe fd03 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 800298a:	204f      	movs	r0, #79	; 0x4f
 800298c:	f7fe fd00 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002990:	2000      	movs	r0, #0
 8002992:	f7fe fcfd 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 8002996:	2061      	movs	r0, #97	; 0x61
 8002998:	f7fe fcfa 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800299c:	2000      	movs	r0, #0
 800299e:	f7fe fcf7 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 80029a2:	2079      	movs	r0, #121	; 0x79
 80029a4:	f7fe fcf4 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7fe fcf1 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80029ae:	2088      	movs	r0, #136	; 0x88
 80029b0:	f7fe fcee 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7fe fceb 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 80029ba:	2097      	movs	r0, #151	; 0x97
 80029bc:	f7fe fce8 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7fe fce5 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 80029c6:	20a6      	movs	r0, #166	; 0xa6
 80029c8:	f7fe fce2 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7fe fcdf 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 80029d2:	20b7      	movs	r0, #183	; 0xb7
 80029d4:	f7fe fcdc 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029d8:	2000      	movs	r0, #0
 80029da:	f7fe fcd9 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 80029de:	20c2      	movs	r0, #194	; 0xc2
 80029e0:	f7fe fcd6 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7fe fcd3 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 80029ea:	20c7      	movs	r0, #199	; 0xc7
 80029ec:	f7fe fcd0 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7fe fccd 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 80029f6:	20d1      	movs	r0, #209	; 0xd1
 80029f8:	f7fe fcca 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7fe fcc7 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 8002a02:	20d6      	movs	r0, #214	; 0xd6
 8002a04:	f7fe fcc4 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7fe fcc1 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002a0e:	20dd      	movs	r0, #221	; 0xdd
 8002a10:	f7fe fcbe 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fe fcbb 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002a1a:	20f3      	movs	r0, #243	; 0xf3
 8002a1c:	f7fe fcb8 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7fe fcb5 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 8002a26:	20e3      	movs	r0, #227	; 0xe3
 8002a28:	f7fe fc9e 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8002a2c:	2005      	movs	r0, #5
 8002a2e:	f7fe fcaf 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a32:	2000      	movs	r0, #0
 8002a34:	f7fe fcac 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 8002a38:	200a      	movs	r0, #10
 8002a3a:	f7fe fca9 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7fe fca6 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8002a44:	201c      	movs	r0, #28
 8002a46:	f7fe fca3 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f7fe fca0 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002a50:	2033      	movs	r0, #51	; 0x33
 8002a52:	f7fe fc9d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a56:	2000      	movs	r0, #0
 8002a58:	f7fe fc9a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002a5c:	2044      	movs	r0, #68	; 0x44
 8002a5e:	f7fe fc97 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7fe fc94 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002a68:	2050      	movs	r0, #80	; 0x50
 8002a6a:	f7fe fc91 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7fe fc8e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 8002a74:	2062      	movs	r0, #98	; 0x62
 8002a76:	f7fe fc8b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f7fe fc88 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 8002a80:	2078      	movs	r0, #120	; 0x78
 8002a82:	f7fe fc85 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7fe fc82 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002a8c:	2088      	movs	r0, #136	; 0x88
 8002a8e:	f7fe fc7f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f7fe fc7c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8002a98:	2097      	movs	r0, #151	; 0x97
 8002a9a:	f7fe fc79 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7fe fc76 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8002aa4:	20a6      	movs	r0, #166	; 0xa6
 8002aa6:	f7fe fc73 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7fe fc70 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 8002ab0:	20b7      	movs	r0, #183	; 0xb7
 8002ab2:	f7fe fc6d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7fe fc6a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8002abc:	20c2      	movs	r0, #194	; 0xc2
 8002abe:	f7fe fc67 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f7fe fc64 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8002ac8:	20c7      	movs	r0, #199	; 0xc7
 8002aca:	f7fe fc61 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f7fe fc5e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8002ad4:	20d1      	movs	r0, #209	; 0xd1
 8002ad6:	f7fe fc5b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7fe fc58 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 8002ae0:	20d5      	movs	r0, #213	; 0xd5
 8002ae2:	f7fe fc55 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7fe fc52 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002aec:	20dd      	movs	r0, #221	; 0xdd
 8002aee:	f7fe fc4f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002af2:	2000      	movs	r0, #0
 8002af4:	f7fe fc4c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002af8:	20f3      	movs	r0, #243	; 0xf3
 8002afa:	f7fe fc49 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002afe:	2000      	movs	r0, #0
 8002b00:	f7fe fc46 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 8002b04:	20e4      	movs	r0, #228	; 0xe4
 8002b06:	f7fe fc2f 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f7fe fc40 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7fe fc3d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8002b16:	2001      	movs	r0, #1
 8002b18:	f7fe fc3a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7fe fc37 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002b22:	2002      	movs	r0, #2
 8002b24:	f7fe fc34 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f7fe fc31 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8002b2e:	202a      	movs	r0, #42	; 0x2a
 8002b30:	f7fe fc2e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b34:	2000      	movs	r0, #0
 8002b36:	f7fe fc2b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002b3a:	203c      	movs	r0, #60	; 0x3c
 8002b3c:	f7fe fc28 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7fe fc25 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8002b46:	204b      	movs	r0, #75	; 0x4b
 8002b48:	f7fe fc22 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f7fe fc1f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002b52:	205d      	movs	r0, #93	; 0x5d
 8002b54:	f7fe fc1c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f7fe fc19 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8002b5e:	2074      	movs	r0, #116	; 0x74
 8002b60:	f7fe fc16 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7fe fc13 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002b6a:	2084      	movs	r0, #132	; 0x84
 8002b6c:	f7fe fc10 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b70:	2000      	movs	r0, #0
 8002b72:	f7fe fc0d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8002b76:	2093      	movs	r0, #147	; 0x93
 8002b78:	f7fe fc0a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7fe fc07 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002b82:	20a2      	movs	r0, #162	; 0xa2
 8002b84:	f7fe fc04 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f7fe fc01 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8002b8e:	20b3      	movs	r0, #179	; 0xb3
 8002b90:	f7fe fbfe 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7fe fbfb 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8002b9a:	20be      	movs	r0, #190	; 0xbe
 8002b9c:	f7fe fbf8 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f7fe fbf5 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002ba6:	20c4      	movs	r0, #196	; 0xc4
 8002ba8:	f7fe fbf2 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bac:	2000      	movs	r0, #0
 8002bae:	f7fe fbef 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 8002bb2:	20cd      	movs	r0, #205	; 0xcd
 8002bb4:	f7fe fbec 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f7fe fbe9 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8002bbe:	20d3      	movs	r0, #211	; 0xd3
 8002bc0:	f7fe fbe6 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f7fe fbe3 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002bca:	20dd      	movs	r0, #221	; 0xdd
 8002bcc:	f7fe fbe0 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f7fe fbdd 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002bd6:	20f3      	movs	r0, #243	; 0xf3
 8002bd8:	f7fe fbda 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f7fe fbd7 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 8002be2:	20e5      	movs	r0, #229	; 0xe5
 8002be4:	f7fe fbc0 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002be8:	2000      	movs	r0, #0
 8002bea:	f7fe fbd1 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7fe fbce 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f7fe fbcb 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7fe fbc8 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002c00:	2002      	movs	r0, #2
 8002c02:	f7fe fbc5 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c06:	2000      	movs	r0, #0
 8002c08:	f7fe fbc2 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002c0c:	2029      	movs	r0, #41	; 0x29
 8002c0e:	f7fe fbbf 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c12:	2000      	movs	r0, #0
 8002c14:	f7fe fbbc 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002c18:	203c      	movs	r0, #60	; 0x3c
 8002c1a:	f7fe fbb9 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f7fe fbb6 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8002c24:	204b      	movs	r0, #75	; 0x4b
 8002c26:	f7fe fbb3 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f7fe fbb0 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002c30:	205d      	movs	r0, #93	; 0x5d
 8002c32:	f7fe fbad 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f7fe fbaa 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8002c3c:	2074      	movs	r0, #116	; 0x74
 8002c3e:	f7fe fba7 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7fe fba4 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002c48:	2084      	movs	r0, #132	; 0x84
 8002c4a:	f7fe fba1 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f7fe fb9e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8002c54:	2093      	movs	r0, #147	; 0x93
 8002c56:	f7fe fb9b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f7fe fb98 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002c60:	20a2      	movs	r0, #162	; 0xa2
 8002c62:	f7fe fb95 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7fe fb92 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8002c6c:	20b3      	movs	r0, #179	; 0xb3
 8002c6e:	f7fe fb8f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c72:	2000      	movs	r0, #0
 8002c74:	f7fe fb8c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8002c78:	20be      	movs	r0, #190	; 0xbe
 8002c7a:	f7fe fb89 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f7fe fb86 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002c84:	20c4      	movs	r0, #196	; 0xc4
 8002c86:	f7fe fb83 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7fe fb80 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 8002c90:	20cd      	movs	r0, #205	; 0xcd
 8002c92:	f7fe fb7d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c96:	2000      	movs	r0, #0
 8002c98:	f7fe fb7a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8002c9c:	20d3      	movs	r0, #211	; 0xd3
 8002c9e:	f7fe fb77 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f7fe fb74 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002ca8:	20dc      	movs	r0, #220	; 0xdc
 8002caa:	f7fe fb71 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f7fe fb6e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002cb4:	20f3      	movs	r0, #243	; 0xf3
 8002cb6:	f7fe fb6b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f7fe fb68 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 8002cc0:	20e6      	movs	r0, #230	; 0xe6
 8002cc2:	f7fe fb51 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 8002cc6:	2011      	movs	r0, #17
 8002cc8:	f7fe fb62 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f7fe fb5f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8002cd2:	2034      	movs	r0, #52	; 0x34
 8002cd4:	f7fe fb5c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f7fe fb59 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002cde:	2056      	movs	r0, #86	; 0x56
 8002ce0:	f7fe fb56 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7fe fb53 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002cea:	2076      	movs	r0, #118	; 0x76
 8002cec:	f7fe fb50 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f7fe fb4d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002cf6:	2077      	movs	r0, #119	; 0x77
 8002cf8:	f7fe fb4a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f7fe fb47 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002d02:	2066      	movs	r0, #102	; 0x66
 8002d04:	f7fe fb44 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f7fe fb41 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002d0e:	2088      	movs	r0, #136	; 0x88
 8002d10:	f7fe fb3e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d14:	2000      	movs	r0, #0
 8002d16:	f7fe fb3b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002d1a:	2099      	movs	r0, #153	; 0x99
 8002d1c:	f7fe fb38 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d20:	2000      	movs	r0, #0
 8002d22:	f7fe fb35 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002d26:	20bb      	movs	r0, #187	; 0xbb
 8002d28:	f7fe fb32 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f7fe fb2f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002d32:	2099      	movs	r0, #153	; 0x99
 8002d34:	f7fe fb2c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f7fe fb29 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002d3e:	2066      	movs	r0, #102	; 0x66
 8002d40:	f7fe fb26 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7fe fb23 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002d4a:	2055      	movs	r0, #85	; 0x55
 8002d4c:	f7fe fb20 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d50:	2000      	movs	r0, #0
 8002d52:	f7fe fb1d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002d56:	2055      	movs	r0, #85	; 0x55
 8002d58:	f7fe fb1a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f7fe fb17 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8002d62:	2045      	movs	r0, #69	; 0x45
 8002d64:	f7fe fb14 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7fe fb11 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8002d6e:	2043      	movs	r0, #67	; 0x43
 8002d70:	f7fe fb0e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7fe fb0b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002d7a:	2044      	movs	r0, #68	; 0x44
 8002d7c:	f7fe fb08 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7fe fb05 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 8002d86:	20e7      	movs	r0, #231	; 0xe7
 8002d88:	f7fe faee 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8002d8c:	2032      	movs	r0, #50	; 0x32
 8002d8e:	f7fe faff 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d92:	2000      	movs	r0, #0
 8002d94:	f7fe fafc 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002d98:	2055      	movs	r0, #85	; 0x55
 8002d9a:	f7fe faf9 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f7fe faf6 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002da4:	2076      	movs	r0, #118	; 0x76
 8002da6:	f7fe faf3 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7fe faf0 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002db0:	2066      	movs	r0, #102	; 0x66
 8002db2:	f7fe faed 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002db6:	2000      	movs	r0, #0
 8002db8:	f7fe faea 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8002dbc:	2067      	movs	r0, #103	; 0x67
 8002dbe:	f7fe fae7 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f7fe fae4 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8002dc8:	2067      	movs	r0, #103	; 0x67
 8002dca:	f7fe fae1 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f7fe fade 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8002dd4:	2087      	movs	r0, #135	; 0x87
 8002dd6:	f7fe fadb 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7fe fad8 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002de0:	2099      	movs	r0, #153	; 0x99
 8002de2:	f7fe fad5 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002de6:	2000      	movs	r0, #0
 8002de8:	f7fe fad2 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002dec:	20bb      	movs	r0, #187	; 0xbb
 8002dee:	f7fe facf 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002df2:	2000      	movs	r0, #0
 8002df4:	f7fe facc 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002df8:	2099      	movs	r0, #153	; 0x99
 8002dfa:	f7fe fac9 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f7fe fac6 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002e04:	2077      	movs	r0, #119	; 0x77
 8002e06:	f7fe fac3 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f7fe fac0 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002e10:	2044      	movs	r0, #68	; 0x44
 8002e12:	f7fe fabd 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e16:	2000      	movs	r0, #0
 8002e18:	f7fe faba 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002e1c:	2056      	movs	r0, #86	; 0x56
 8002e1e:	f7fe fab7 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e22:	2000      	movs	r0, #0
 8002e24:	f7fe fab4 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002e28:	2023      	movs	r0, #35	; 0x23
 8002e2a:	f7fe fab1 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f7fe faae 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002e34:	2033      	movs	r0, #51	; 0x33
 8002e36:	f7fe faab 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7fe faa8 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8002e40:	2045      	movs	r0, #69	; 0x45
 8002e42:	f7fe faa5 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e46:	2000      	movs	r0, #0
 8002e48:	f7fe faa2 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 8002e4c:	20e8      	movs	r0, #232	; 0xe8
 8002e4e:	f7fe fa8b 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002e52:	2000      	movs	r0, #0
 8002e54:	f7fe fa9c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7fe fa99 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002e5e:	2099      	movs	r0, #153	; 0x99
 8002e60:	f7fe fa96 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e64:	2000      	movs	r0, #0
 8002e66:	f7fe fa93 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8002e6a:	2087      	movs	r0, #135	; 0x87
 8002e6c:	f7fe fa90 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7fe fa8d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002e76:	2088      	movs	r0, #136	; 0x88
 8002e78:	f7fe fa8a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f7fe fa87 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002e82:	2077      	movs	r0, #119	; 0x77
 8002e84:	f7fe fa84 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f7fe fa81 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002e8e:	2066      	movs	r0, #102	; 0x66
 8002e90:	f7fe fa7e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e94:	2000      	movs	r0, #0
 8002e96:	f7fe fa7b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002e9a:	2088      	movs	r0, #136	; 0x88
 8002e9c:	f7fe fa78 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f7fe fa75 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 8002ea6:	20aa      	movs	r0, #170	; 0xaa
 8002ea8:	f7fe fa72 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7fe fa6f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002eb2:	20bb      	movs	r0, #187	; 0xbb
 8002eb4:	f7fe fa6c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f7fe fa69 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002ebe:	2099      	movs	r0, #153	; 0x99
 8002ec0:	f7fe fa66 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f7fe fa63 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002eca:	2066      	movs	r0, #102	; 0x66
 8002ecc:	f7fe fa60 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7fe fa5d 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002ed6:	2055      	movs	r0, #85	; 0x55
 8002ed8:	f7fe fa5a 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002edc:	2000      	movs	r0, #0
 8002ede:	f7fe fa57 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002ee2:	2055      	movs	r0, #85	; 0x55
 8002ee4:	f7fe fa54 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f7fe fa51 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002eee:	2044      	movs	r0, #68	; 0x44
 8002ef0:	f7fe fa4e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f7fe fa4b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002efa:	2044      	movs	r0, #68	; 0x44
 8002efc:	f7fe fa48 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7fe fa45 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002f06:	2055      	movs	r0, #85	; 0x55
 8002f08:	f7fe fa42 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f7fe fa3f 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 8002f12:	20e9      	movs	r0, #233	; 0xe9
 8002f14:	f7fe fa28 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002f18:	20aa      	movs	r0, #170	; 0xaa
 8002f1a:	f7fe fa39 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f7fe fa36 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7fe fa33 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	f7fe fa30 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 8002f30:	2000      	movs	r0, #0
 8002f32:	f7fe fa19 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002f36:	20aa      	movs	r0, #170	; 0xaa
 8002f38:	f7fe fa2a 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 8002f3c:	20cf      	movs	r0, #207	; 0xcf
 8002f3e:	f7fe fa13 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002f42:	2000      	movs	r0, #0
 8002f44:	f7fe fa24 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f7fe fa21 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f7fe fa1e 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7fe fa1b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f7fe fa18 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f60:	2000      	movs	r0, #0
 8002f62:	f7fe fa15 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f66:	2000      	movs	r0, #0
 8002f68:	f7fe fa12 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	f7fe fa0f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f72:	2000      	movs	r0, #0
 8002f74:	f7fe fa0c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f7fe fa09 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f7fe fa06 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f84:	2000      	movs	r0, #0
 8002f86:	f7fe fa03 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f7fe fa00 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7fe f9fd 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7fe f9fa 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f7fe f9f7 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f7fe f9f4 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 8002fa8:	20f0      	movs	r0, #240	; 0xf0
 8002faa:	f7fe f9dd 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f7fe f9ee 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002fb4:	2050      	movs	r0, #80	; 0x50
 8002fb6:	f7fe f9eb 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f7fe f9e8 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	f7fe f9e5 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7fe f9e2 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 8002fcc:	20f3      	movs	r0, #243	; 0xf3
 8002fce:	f7fe f9cb 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f7fe f9dc 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 8002fd8:	20f9      	movs	r0, #249	; 0xf9
 8002fda:	f7fe f9c5 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 8002fde:	2006      	movs	r0, #6
 8002fe0:	f7fe f9d6 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8002fe4:	2010      	movs	r0, #16
 8002fe6:	f7fe f9d3 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002fea:	2029      	movs	r0, #41	; 0x29
 8002fec:	f7fe f9d0 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f7fe f9cd 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 8002ff6:	203a      	movs	r0, #58	; 0x3a
 8002ff8:	f7fe f9b6 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8002ffc:	2055      	movs	r0, #85	; 0x55
 8002ffe:	f7fe f9c7 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 8003002:	2011      	movs	r0, #17
 8003004:	f7fe f9b0 	bl	8001368 <LCD_WR_REG>
		HAL_Delay(100);
 8003008:	2064      	movs	r0, #100	; 0x64
 800300a:	f003 f8f7 	bl	80061fc <HAL_Delay>
		LCD_WR_REG(0x29);
 800300e:	2029      	movs	r0, #41	; 0x29
 8003010:	f7fe f9aa 	bl	8001368 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003014:	2035      	movs	r0, #53	; 0x35
 8003016:	f7fe f9a7 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800301a:	2000      	movs	r0, #0
 800301c:	f7fe f9b8 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 8003020:	2051      	movs	r0, #81	; 0x51
 8003022:	f7fe f9a1 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 8003026:	20ff      	movs	r0, #255	; 0xff
 8003028:	f7fe f9b2 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 800302c:	2053      	movs	r0, #83	; 0x53
 800302e:	f7fe f99b 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 8003032:	202c      	movs	r0, #44	; 0x2c
 8003034:	f7fe f9ac 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 8003038:	2055      	movs	r0, #85	; 0x55
 800303a:	f7fe f995 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 800303e:	2082      	movs	r0, #130	; 0x82
 8003040:	f7fe f9a6 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8003044:	202c      	movs	r0, #44	; 0x2c
 8003046:	f7fe f98f 	bl	8001368 <LCD_WR_REG>
 800304a:	f001 b847 	b.w	80040dc <TFTLCD_Init+0x235c>
	}else if(lcddev.id==0x5510)
 800304e:	4b04      	ldr	r3, [pc, #16]	; (8003060 <TFTLCD_Init+0x12e0>)
 8003050:	889b      	ldrh	r3, [r3, #4]
 8003052:	f245 5210 	movw	r2, #21776	; 0x5510
 8003056:	4293      	cmp	r3, r2
 8003058:	f040 8781 	bne.w	8003f5e <TFTLCD_Init+0x21de>
 800305c:	e002      	b.n	8003064 <TFTLCD_Init+0x12e4>
 800305e:	bf00      	nop
 8003060:	20000314 	.word	0x20000314
	{
		LCD_WriteReg(0xF000,0x55);
 8003064:	2155      	movs	r1, #85	; 0x55
 8003066:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800306a:	f7fe f9b7 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 800306e:	21aa      	movs	r1, #170	; 0xaa
 8003070:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003074:	f7fe f9b2 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8003078:	2152      	movs	r1, #82	; 0x52
 800307a:	f24f 0002 	movw	r0, #61442	; 0xf002
 800307e:	f7fe f9ad 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8003082:	2108      	movs	r1, #8
 8003084:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003088:	f7fe f9a8 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 800308c:	2101      	movs	r1, #1
 800308e:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003092:	f7fe f9a3 	bl	80013dc <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 8003096:	210d      	movs	r1, #13
 8003098:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 800309c:	f7fe f99e 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 80030a0:	210d      	movs	r1, #13
 80030a2:	f24b 0001 	movw	r0, #45057	; 0xb001
 80030a6:	f7fe f999 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 80030aa:	210d      	movs	r1, #13
 80030ac:	f24b 0002 	movw	r0, #45058	; 0xb002
 80030b0:	f7fe f994 	bl	80013dc <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 80030b4:	2134      	movs	r1, #52	; 0x34
 80030b6:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80030ba:	f7fe f98f 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 80030be:	2134      	movs	r1, #52	; 0x34
 80030c0:	f24b 6001 	movw	r0, #46593	; 0xb601
 80030c4:	f7fe f98a 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 80030c8:	2134      	movs	r1, #52	; 0x34
 80030ca:	f24b 6002 	movw	r0, #46594	; 0xb602
 80030ce:	f7fe f985 	bl	80013dc <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 80030d2:	210d      	movs	r1, #13
 80030d4:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80030d8:	f7fe f980 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 80030dc:	210d      	movs	r1, #13
 80030de:	f24b 1001 	movw	r0, #45313	; 0xb101
 80030e2:	f7fe f97b 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 80030e6:	210d      	movs	r1, #13
 80030e8:	f24b 1002 	movw	r0, #45314	; 0xb102
 80030ec:	f7fe f976 	bl	80013dc <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 80030f0:	2134      	movs	r1, #52	; 0x34
 80030f2:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80030f6:	f7fe f971 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 80030fa:	2134      	movs	r1, #52	; 0x34
 80030fc:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003100:	f7fe f96c 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 8003104:	2134      	movs	r1, #52	; 0x34
 8003106:	f24b 7002 	movw	r0, #46850	; 0xb702
 800310a:	f7fe f967 	bl	80013dc <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 800310e:	2100      	movs	r1, #0
 8003110:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003114:	f7fe f962 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 8003118:	2100      	movs	r1, #0
 800311a:	f24b 2001 	movw	r0, #45569	; 0xb201
 800311e:	f7fe f95d 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 8003122:	2100      	movs	r1, #0
 8003124:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003128:	f7fe f958 	bl	80013dc <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 800312c:	2124      	movs	r1, #36	; 0x24
 800312e:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003132:	f7fe f953 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 8003136:	2124      	movs	r1, #36	; 0x24
 8003138:	f64b 0001 	movw	r0, #47105	; 0xb801
 800313c:	f7fe f94e 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 8003140:	2124      	movs	r1, #36	; 0x24
 8003142:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003146:	f7fe f949 	bl	80013dc <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 800314a:	2101      	movs	r1, #1
 800314c:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003150:	f7fe f944 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 8003154:	210f      	movs	r1, #15
 8003156:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 800315a:	f7fe f93f 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 800315e:	210f      	movs	r1, #15
 8003160:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003164:	f7fe f93a 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 8003168:	210f      	movs	r1, #15
 800316a:	f24b 3002 	movw	r0, #45826	; 0xb302
 800316e:	f7fe f935 	bl	80013dc <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 8003172:	2134      	movs	r1, #52	; 0x34
 8003174:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8003178:	f7fe f930 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 800317c:	2134      	movs	r1, #52	; 0x34
 800317e:	f64b 1001 	movw	r0, #47361	; 0xb901
 8003182:	f7fe f92b 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 8003186:	2134      	movs	r1, #52	; 0x34
 8003188:	f64b 1002 	movw	r0, #47362	; 0xb902
 800318c:	f7fe f926 	bl	80013dc <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 8003190:	2108      	movs	r1, #8
 8003192:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8003196:	f7fe f921 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 800319a:	2108      	movs	r1, #8
 800319c:	f24b 5001 	movw	r0, #46337	; 0xb501
 80031a0:	f7fe f91c 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 80031a4:	2108      	movs	r1, #8
 80031a6:	f24b 5002 	movw	r0, #46338	; 0xb502
 80031aa:	f7fe f917 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 80031ae:	2103      	movs	r1, #3
 80031b0:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80031b4:	f7fe f912 	bl	80013dc <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 80031b8:	2124      	movs	r1, #36	; 0x24
 80031ba:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80031be:	f7fe f90d 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 80031c2:	2124      	movs	r1, #36	; 0x24
 80031c4:	f64b 2001 	movw	r0, #47617	; 0xba01
 80031c8:	f7fe f908 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 80031cc:	2124      	movs	r1, #36	; 0x24
 80031ce:	f64b 2002 	movw	r0, #47618	; 0xba02
 80031d2:	f7fe f903 	bl	80013dc <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 80031d6:	2100      	movs	r1, #0
 80031d8:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80031dc:	f7fe f8fe 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 80031e0:	2178      	movs	r1, #120	; 0x78
 80031e2:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80031e6:	f7fe f8f9 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 80031ea:	2100      	movs	r1, #0
 80031ec:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80031f0:	f7fe f8f4 	bl	80013dc <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 80031f4:	2100      	movs	r1, #0
 80031f6:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 80031fa:	f7fe f8ef 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 80031fe:	2178      	movs	r1, #120	; 0x78
 8003200:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003204:	f7fe f8ea 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8003208:	2100      	movs	r1, #0
 800320a:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800320e:	f7fe f8e5 	bl	80013dc <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 8003212:	2100      	movs	r1, #0
 8003214:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003218:	f7fe f8e0 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 800321c:	2164      	movs	r1, #100	; 0x64
 800321e:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8003222:	f7fe f8db 	bl	80013dc <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 8003226:	2100      	movs	r1, #0
 8003228:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 800322c:	f7fe f8d6 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 8003230:	2133      	movs	r1, #51	; 0x33
 8003232:	f24d 1001 	movw	r0, #53505	; 0xd101
 8003236:	f7fe f8d1 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 800323a:	2100      	movs	r1, #0
 800323c:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003240:	f7fe f8cc 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 8003244:	2134      	movs	r1, #52	; 0x34
 8003246:	f24d 1003 	movw	r0, #53507	; 0xd103
 800324a:	f7fe f8c7 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 800324e:	2100      	movs	r1, #0
 8003250:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003254:	f7fe f8c2 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 8003258:	213a      	movs	r1, #58	; 0x3a
 800325a:	f24d 1005 	movw	r0, #53509	; 0xd105
 800325e:	f7fe f8bd 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 8003262:	2100      	movs	r1, #0
 8003264:	f24d 1006 	movw	r0, #53510	; 0xd106
 8003268:	f7fe f8b8 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 800326c:	214a      	movs	r1, #74	; 0x4a
 800326e:	f24d 1007 	movw	r0, #53511	; 0xd107
 8003272:	f7fe f8b3 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 8003276:	2100      	movs	r1, #0
 8003278:	f24d 1008 	movw	r0, #53512	; 0xd108
 800327c:	f7fe f8ae 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 8003280:	215c      	movs	r1, #92	; 0x5c
 8003282:	f24d 1009 	movw	r0, #53513	; 0xd109
 8003286:	f7fe f8a9 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 800328a:	2100      	movs	r1, #0
 800328c:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8003290:	f7fe f8a4 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 8003294:	2181      	movs	r1, #129	; 0x81
 8003296:	f24d 100b 	movw	r0, #53515	; 0xd10b
 800329a:	f7fe f89f 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 800329e:	2100      	movs	r1, #0
 80032a0:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80032a4:	f7fe f89a 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 80032a8:	21a6      	movs	r1, #166	; 0xa6
 80032aa:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80032ae:	f7fe f895 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 80032b2:	2100      	movs	r1, #0
 80032b4:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80032b8:	f7fe f890 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 80032bc:	21e5      	movs	r1, #229	; 0xe5
 80032be:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80032c2:	f7fe f88b 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 80032c6:	2101      	movs	r1, #1
 80032c8:	f24d 1010 	movw	r0, #53520	; 0xd110
 80032cc:	f7fe f886 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 80032d0:	2113      	movs	r1, #19
 80032d2:	f24d 1011 	movw	r0, #53521	; 0xd111
 80032d6:	f7fe f881 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 80032da:	2101      	movs	r1, #1
 80032dc:	f24d 1012 	movw	r0, #53522	; 0xd112
 80032e0:	f7fe f87c 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 80032e4:	2154      	movs	r1, #84	; 0x54
 80032e6:	f24d 1013 	movw	r0, #53523	; 0xd113
 80032ea:	f7fe f877 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 80032ee:	2101      	movs	r1, #1
 80032f0:	f24d 1014 	movw	r0, #53524	; 0xd114
 80032f4:	f7fe f872 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 80032f8:	2182      	movs	r1, #130	; 0x82
 80032fa:	f24d 1015 	movw	r0, #53525	; 0xd115
 80032fe:	f7fe f86d 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 8003302:	2101      	movs	r1, #1
 8003304:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003308:	f7fe f868 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 800330c:	21ca      	movs	r1, #202	; 0xca
 800330e:	f24d 1017 	movw	r0, #53527	; 0xd117
 8003312:	f7fe f863 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 8003316:	2102      	movs	r1, #2
 8003318:	f24d 1018 	movw	r0, #53528	; 0xd118
 800331c:	f7fe f85e 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 8003320:	2100      	movs	r1, #0
 8003322:	f24d 1019 	movw	r0, #53529	; 0xd119
 8003326:	f7fe f859 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 800332a:	2102      	movs	r1, #2
 800332c:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003330:	f7fe f854 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 8003334:	2101      	movs	r1, #1
 8003336:	f24d 101b 	movw	r0, #53531	; 0xd11b
 800333a:	f7fe f84f 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 800333e:	2102      	movs	r1, #2
 8003340:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003344:	f7fe f84a 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 8003348:	2134      	movs	r1, #52	; 0x34
 800334a:	f24d 101d 	movw	r0, #53533	; 0xd11d
 800334e:	f7fe f845 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 8003352:	2102      	movs	r1, #2
 8003354:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8003358:	f7fe f840 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 800335c:	2167      	movs	r1, #103	; 0x67
 800335e:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8003362:	f7fe f83b 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 8003366:	2102      	movs	r1, #2
 8003368:	f24d 1020 	movw	r0, #53536	; 0xd120
 800336c:	f7fe f836 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 8003370:	2184      	movs	r1, #132	; 0x84
 8003372:	f24d 1021 	movw	r0, #53537	; 0xd121
 8003376:	f7fe f831 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 800337a:	2102      	movs	r1, #2
 800337c:	f24d 1022 	movw	r0, #53538	; 0xd122
 8003380:	f7fe f82c 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 8003384:	21a4      	movs	r1, #164	; 0xa4
 8003386:	f24d 1023 	movw	r0, #53539	; 0xd123
 800338a:	f7fe f827 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 800338e:	2102      	movs	r1, #2
 8003390:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003394:	f7fe f822 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 8003398:	21b7      	movs	r1, #183	; 0xb7
 800339a:	f24d 1025 	movw	r0, #53541	; 0xd125
 800339e:	f7fe f81d 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 80033a2:	2102      	movs	r1, #2
 80033a4:	f24d 1026 	movw	r0, #53542	; 0xd126
 80033a8:	f7fe f818 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 80033ac:	21cf      	movs	r1, #207	; 0xcf
 80033ae:	f24d 1027 	movw	r0, #53543	; 0xd127
 80033b2:	f7fe f813 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 80033b6:	2102      	movs	r1, #2
 80033b8:	f24d 1028 	movw	r0, #53544	; 0xd128
 80033bc:	f7fe f80e 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 80033c0:	21de      	movs	r1, #222	; 0xde
 80033c2:	f24d 1029 	movw	r0, #53545	; 0xd129
 80033c6:	f7fe f809 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 80033ca:	2102      	movs	r1, #2
 80033cc:	f24d 102a 	movw	r0, #53546	; 0xd12a
 80033d0:	f7fe f804 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 80033d4:	21f2      	movs	r1, #242	; 0xf2
 80033d6:	f24d 102b 	movw	r0, #53547	; 0xd12b
 80033da:	f7fd ffff 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 80033de:	2102      	movs	r1, #2
 80033e0:	f24d 102c 	movw	r0, #53548	; 0xd12c
 80033e4:	f7fd fffa 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 80033e8:	21fe      	movs	r1, #254	; 0xfe
 80033ea:	f24d 102d 	movw	r0, #53549	; 0xd12d
 80033ee:	f7fd fff5 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 80033f2:	2103      	movs	r1, #3
 80033f4:	f24d 102e 	movw	r0, #53550	; 0xd12e
 80033f8:	f7fd fff0 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 80033fc:	2110      	movs	r1, #16
 80033fe:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8003402:	f7fd ffeb 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 8003406:	2103      	movs	r1, #3
 8003408:	f24d 1030 	movw	r0, #53552	; 0xd130
 800340c:	f7fd ffe6 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 8003410:	2133      	movs	r1, #51	; 0x33
 8003412:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003416:	f7fd ffe1 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 800341a:	2103      	movs	r1, #3
 800341c:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003420:	f7fd ffdc 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 8003424:	216d      	movs	r1, #109	; 0x6d
 8003426:	f24d 1033 	movw	r0, #53555	; 0xd133
 800342a:	f7fd ffd7 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 800342e:	2100      	movs	r1, #0
 8003430:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003434:	f7fd ffd2 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 8003438:	2133      	movs	r1, #51	; 0x33
 800343a:	f24d 2001 	movw	r0, #53761	; 0xd201
 800343e:	f7fd ffcd 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 8003442:	2100      	movs	r1, #0
 8003444:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003448:	f7fd ffc8 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 800344c:	2134      	movs	r1, #52	; 0x34
 800344e:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003452:	f7fd ffc3 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 8003456:	2100      	movs	r1, #0
 8003458:	f24d 2004 	movw	r0, #53764	; 0xd204
 800345c:	f7fd ffbe 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 8003460:	213a      	movs	r1, #58	; 0x3a
 8003462:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003466:	f7fd ffb9 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 800346a:	2100      	movs	r1, #0
 800346c:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003470:	f7fd ffb4 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 8003474:	214a      	movs	r1, #74	; 0x4a
 8003476:	f24d 2007 	movw	r0, #53767	; 0xd207
 800347a:	f7fd ffaf 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 800347e:	2100      	movs	r1, #0
 8003480:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003484:	f7fd ffaa 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 8003488:	215c      	movs	r1, #92	; 0x5c
 800348a:	f24d 2009 	movw	r0, #53769	; 0xd209
 800348e:	f7fd ffa5 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 8003492:	2100      	movs	r1, #0
 8003494:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8003498:	f7fd ffa0 	bl	80013dc <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 800349c:	2181      	movs	r1, #129	; 0x81
 800349e:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80034a2:	f7fd ff9b 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 80034a6:	2100      	movs	r1, #0
 80034a8:	f24d 200c 	movw	r0, #53772	; 0xd20c
 80034ac:	f7fd ff96 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 80034b0:	21a6      	movs	r1, #166	; 0xa6
 80034b2:	f24d 200d 	movw	r0, #53773	; 0xd20d
 80034b6:	f7fd ff91 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 80034ba:	2100      	movs	r1, #0
 80034bc:	f24d 200e 	movw	r0, #53774	; 0xd20e
 80034c0:	f7fd ff8c 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 80034c4:	21e5      	movs	r1, #229	; 0xe5
 80034c6:	f24d 200f 	movw	r0, #53775	; 0xd20f
 80034ca:	f7fd ff87 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 80034ce:	2101      	movs	r1, #1
 80034d0:	f24d 2010 	movw	r0, #53776	; 0xd210
 80034d4:	f7fd ff82 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 80034d8:	2113      	movs	r1, #19
 80034da:	f24d 2011 	movw	r0, #53777	; 0xd211
 80034de:	f7fd ff7d 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 80034e2:	2101      	movs	r1, #1
 80034e4:	f24d 2012 	movw	r0, #53778	; 0xd212
 80034e8:	f7fd ff78 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 80034ec:	2154      	movs	r1, #84	; 0x54
 80034ee:	f24d 2013 	movw	r0, #53779	; 0xd213
 80034f2:	f7fd ff73 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 80034f6:	2101      	movs	r1, #1
 80034f8:	f24d 2014 	movw	r0, #53780	; 0xd214
 80034fc:	f7fd ff6e 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 8003500:	2182      	movs	r1, #130	; 0x82
 8003502:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003506:	f7fd ff69 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 800350a:	2101      	movs	r1, #1
 800350c:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003510:	f7fd ff64 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 8003514:	21ca      	movs	r1, #202	; 0xca
 8003516:	f24d 2017 	movw	r0, #53783	; 0xd217
 800351a:	f7fd ff5f 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 800351e:	2102      	movs	r1, #2
 8003520:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003524:	f7fd ff5a 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 8003528:	2100      	movs	r1, #0
 800352a:	f24d 2019 	movw	r0, #53785	; 0xd219
 800352e:	f7fd ff55 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 8003532:	2102      	movs	r1, #2
 8003534:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003538:	f7fd ff50 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 800353c:	2101      	movs	r1, #1
 800353e:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003542:	f7fd ff4b 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 8003546:	2102      	movs	r1, #2
 8003548:	f24d 201c 	movw	r0, #53788	; 0xd21c
 800354c:	f7fd ff46 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 8003550:	2134      	movs	r1, #52	; 0x34
 8003552:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003556:	f7fd ff41 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 800355a:	2102      	movs	r1, #2
 800355c:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003560:	f7fd ff3c 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 8003564:	2167      	movs	r1, #103	; 0x67
 8003566:	f24d 201f 	movw	r0, #53791	; 0xd21f
 800356a:	f7fd ff37 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 800356e:	2102      	movs	r1, #2
 8003570:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003574:	f7fd ff32 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 8003578:	2184      	movs	r1, #132	; 0x84
 800357a:	f24d 2021 	movw	r0, #53793	; 0xd221
 800357e:	f7fd ff2d 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 8003582:	2102      	movs	r1, #2
 8003584:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003588:	f7fd ff28 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 800358c:	21a4      	movs	r1, #164	; 0xa4
 800358e:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003592:	f7fd ff23 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 8003596:	2102      	movs	r1, #2
 8003598:	f24d 2024 	movw	r0, #53796	; 0xd224
 800359c:	f7fd ff1e 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 80035a0:	21b7      	movs	r1, #183	; 0xb7
 80035a2:	f24d 2025 	movw	r0, #53797	; 0xd225
 80035a6:	f7fd ff19 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 80035aa:	2102      	movs	r1, #2
 80035ac:	f24d 2026 	movw	r0, #53798	; 0xd226
 80035b0:	f7fd ff14 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 80035b4:	21cf      	movs	r1, #207	; 0xcf
 80035b6:	f24d 2027 	movw	r0, #53799	; 0xd227
 80035ba:	f7fd ff0f 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 80035be:	2102      	movs	r1, #2
 80035c0:	f24d 2028 	movw	r0, #53800	; 0xd228
 80035c4:	f7fd ff0a 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 80035c8:	21de      	movs	r1, #222	; 0xde
 80035ca:	f24d 2029 	movw	r0, #53801	; 0xd229
 80035ce:	f7fd ff05 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 80035d2:	2102      	movs	r1, #2
 80035d4:	f24d 202a 	movw	r0, #53802	; 0xd22a
 80035d8:	f7fd ff00 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 80035dc:	21f2      	movs	r1, #242	; 0xf2
 80035de:	f24d 202b 	movw	r0, #53803	; 0xd22b
 80035e2:	f7fd fefb 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 80035e6:	2102      	movs	r1, #2
 80035e8:	f24d 202c 	movw	r0, #53804	; 0xd22c
 80035ec:	f7fd fef6 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 80035f0:	21fe      	movs	r1, #254	; 0xfe
 80035f2:	f24d 202d 	movw	r0, #53805	; 0xd22d
 80035f6:	f7fd fef1 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 80035fa:	2103      	movs	r1, #3
 80035fc:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003600:	f7fd feec 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 8003604:	2110      	movs	r1, #16
 8003606:	f24d 202f 	movw	r0, #53807	; 0xd22f
 800360a:	f7fd fee7 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 800360e:	2103      	movs	r1, #3
 8003610:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003614:	f7fd fee2 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8003618:	2133      	movs	r1, #51	; 0x33
 800361a:	f24d 2031 	movw	r0, #53809	; 0xd231
 800361e:	f7fd fedd 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 8003622:	2103      	movs	r1, #3
 8003624:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003628:	f7fd fed8 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 800362c:	216d      	movs	r1, #109	; 0x6d
 800362e:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003632:	f7fd fed3 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 8003636:	2100      	movs	r1, #0
 8003638:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 800363c:	f7fd fece 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 8003640:	2133      	movs	r1, #51	; 0x33
 8003642:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003646:	f7fd fec9 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 800364a:	2100      	movs	r1, #0
 800364c:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003650:	f7fd fec4 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 8003654:	2134      	movs	r1, #52	; 0x34
 8003656:	f24d 3003 	movw	r0, #54019	; 0xd303
 800365a:	f7fd febf 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 800365e:	2100      	movs	r1, #0
 8003660:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003664:	f7fd feba 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 8003668:	213a      	movs	r1, #58	; 0x3a
 800366a:	f24d 3005 	movw	r0, #54021	; 0xd305
 800366e:	f7fd feb5 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 8003672:	2100      	movs	r1, #0
 8003674:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003678:	f7fd feb0 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 800367c:	214a      	movs	r1, #74	; 0x4a
 800367e:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003682:	f7fd feab 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 8003686:	2100      	movs	r1, #0
 8003688:	f24d 3008 	movw	r0, #54024	; 0xd308
 800368c:	f7fd fea6 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 8003690:	215c      	movs	r1, #92	; 0x5c
 8003692:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003696:	f7fd fea1 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 800369a:	2100      	movs	r1, #0
 800369c:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80036a0:	f7fd fe9c 	bl	80013dc <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 80036a4:	2181      	movs	r1, #129	; 0x81
 80036a6:	f24d 300b 	movw	r0, #54027	; 0xd30b
 80036aa:	f7fd fe97 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 80036ae:	2100      	movs	r1, #0
 80036b0:	f24d 300c 	movw	r0, #54028	; 0xd30c
 80036b4:	f7fd fe92 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 80036b8:	21a6      	movs	r1, #166	; 0xa6
 80036ba:	f24d 300d 	movw	r0, #54029	; 0xd30d
 80036be:	f7fd fe8d 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 80036c2:	2100      	movs	r1, #0
 80036c4:	f24d 300e 	movw	r0, #54030	; 0xd30e
 80036c8:	f7fd fe88 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 80036cc:	21e5      	movs	r1, #229	; 0xe5
 80036ce:	f24d 300f 	movw	r0, #54031	; 0xd30f
 80036d2:	f7fd fe83 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 80036d6:	2101      	movs	r1, #1
 80036d8:	f24d 3010 	movw	r0, #54032	; 0xd310
 80036dc:	f7fd fe7e 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 80036e0:	2113      	movs	r1, #19
 80036e2:	f24d 3011 	movw	r0, #54033	; 0xd311
 80036e6:	f7fd fe79 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 80036ea:	2101      	movs	r1, #1
 80036ec:	f24d 3012 	movw	r0, #54034	; 0xd312
 80036f0:	f7fd fe74 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 80036f4:	2154      	movs	r1, #84	; 0x54
 80036f6:	f24d 3013 	movw	r0, #54035	; 0xd313
 80036fa:	f7fd fe6f 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 80036fe:	2101      	movs	r1, #1
 8003700:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003704:	f7fd fe6a 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8003708:	2182      	movs	r1, #130	; 0x82
 800370a:	f24d 3015 	movw	r0, #54037	; 0xd315
 800370e:	f7fd fe65 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 8003712:	2101      	movs	r1, #1
 8003714:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003718:	f7fd fe60 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 800371c:	21ca      	movs	r1, #202	; 0xca
 800371e:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003722:	f7fd fe5b 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 8003726:	2102      	movs	r1, #2
 8003728:	f24d 3018 	movw	r0, #54040	; 0xd318
 800372c:	f7fd fe56 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 8003730:	2100      	movs	r1, #0
 8003732:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003736:	f7fd fe51 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 800373a:	2102      	movs	r1, #2
 800373c:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003740:	f7fd fe4c 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 8003744:	2101      	movs	r1, #1
 8003746:	f24d 301b 	movw	r0, #54043	; 0xd31b
 800374a:	f7fd fe47 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 800374e:	2102      	movs	r1, #2
 8003750:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003754:	f7fd fe42 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 8003758:	2134      	movs	r1, #52	; 0x34
 800375a:	f24d 301d 	movw	r0, #54045	; 0xd31d
 800375e:	f7fd fe3d 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 8003762:	2102      	movs	r1, #2
 8003764:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003768:	f7fd fe38 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 800376c:	2167      	movs	r1, #103	; 0x67
 800376e:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003772:	f7fd fe33 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 8003776:	2102      	movs	r1, #2
 8003778:	f24d 3020 	movw	r0, #54048	; 0xd320
 800377c:	f7fd fe2e 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 8003780:	2184      	movs	r1, #132	; 0x84
 8003782:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003786:	f7fd fe29 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 800378a:	2102      	movs	r1, #2
 800378c:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003790:	f7fd fe24 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 8003794:	21a4      	movs	r1, #164	; 0xa4
 8003796:	f24d 3023 	movw	r0, #54051	; 0xd323
 800379a:	f7fd fe1f 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 800379e:	2102      	movs	r1, #2
 80037a0:	f24d 3024 	movw	r0, #54052	; 0xd324
 80037a4:	f7fd fe1a 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 80037a8:	21b7      	movs	r1, #183	; 0xb7
 80037aa:	f24d 3025 	movw	r0, #54053	; 0xd325
 80037ae:	f7fd fe15 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 80037b2:	2102      	movs	r1, #2
 80037b4:	f24d 3026 	movw	r0, #54054	; 0xd326
 80037b8:	f7fd fe10 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 80037bc:	21cf      	movs	r1, #207	; 0xcf
 80037be:	f24d 3027 	movw	r0, #54055	; 0xd327
 80037c2:	f7fd fe0b 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 80037c6:	2102      	movs	r1, #2
 80037c8:	f24d 3028 	movw	r0, #54056	; 0xd328
 80037cc:	f7fd fe06 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 80037d0:	21de      	movs	r1, #222	; 0xde
 80037d2:	f24d 3029 	movw	r0, #54057	; 0xd329
 80037d6:	f7fd fe01 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 80037da:	2102      	movs	r1, #2
 80037dc:	f24d 302a 	movw	r0, #54058	; 0xd32a
 80037e0:	f7fd fdfc 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 80037e4:	21f2      	movs	r1, #242	; 0xf2
 80037e6:	f24d 302b 	movw	r0, #54059	; 0xd32b
 80037ea:	f7fd fdf7 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 80037ee:	2102      	movs	r1, #2
 80037f0:	f24d 302c 	movw	r0, #54060	; 0xd32c
 80037f4:	f7fd fdf2 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 80037f8:	21fe      	movs	r1, #254	; 0xfe
 80037fa:	f24d 302d 	movw	r0, #54061	; 0xd32d
 80037fe:	f7fd fded 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 8003802:	2103      	movs	r1, #3
 8003804:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003808:	f7fd fde8 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 800380c:	2110      	movs	r1, #16
 800380e:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003812:	f7fd fde3 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 8003816:	2103      	movs	r1, #3
 8003818:	f24d 3030 	movw	r0, #54064	; 0xd330
 800381c:	f7fd fdde 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 8003820:	2133      	movs	r1, #51	; 0x33
 8003822:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003826:	f7fd fdd9 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 800382a:	2103      	movs	r1, #3
 800382c:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003830:	f7fd fdd4 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 8003834:	216d      	movs	r1, #109	; 0x6d
 8003836:	f24d 3033 	movw	r0, #54067	; 0xd333
 800383a:	f7fd fdcf 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 800383e:	2100      	movs	r1, #0
 8003840:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003844:	f7fd fdca 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 8003848:	2133      	movs	r1, #51	; 0x33
 800384a:	f24d 4001 	movw	r0, #54273	; 0xd401
 800384e:	f7fd fdc5 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 8003852:	2100      	movs	r1, #0
 8003854:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003858:	f7fd fdc0 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 800385c:	2134      	movs	r1, #52	; 0x34
 800385e:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003862:	f7fd fdbb 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 8003866:	2100      	movs	r1, #0
 8003868:	f24d 4004 	movw	r0, #54276	; 0xd404
 800386c:	f7fd fdb6 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 8003870:	213a      	movs	r1, #58	; 0x3a
 8003872:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003876:	f7fd fdb1 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 800387a:	2100      	movs	r1, #0
 800387c:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003880:	f7fd fdac 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 8003884:	214a      	movs	r1, #74	; 0x4a
 8003886:	f24d 4007 	movw	r0, #54279	; 0xd407
 800388a:	f7fd fda7 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 800388e:	2100      	movs	r1, #0
 8003890:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003894:	f7fd fda2 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 8003898:	215c      	movs	r1, #92	; 0x5c
 800389a:	f24d 4009 	movw	r0, #54281	; 0xd409
 800389e:	f7fd fd9d 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 80038a2:	2100      	movs	r1, #0
 80038a4:	f24d 400a 	movw	r0, #54282	; 0xd40a
 80038a8:	f7fd fd98 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 80038ac:	2181      	movs	r1, #129	; 0x81
 80038ae:	f24d 400b 	movw	r0, #54283	; 0xd40b
 80038b2:	f7fd fd93 	bl	80013dc <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 80038b6:	2100      	movs	r1, #0
 80038b8:	f24d 400c 	movw	r0, #54284	; 0xd40c
 80038bc:	f7fd fd8e 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 80038c0:	21a6      	movs	r1, #166	; 0xa6
 80038c2:	f24d 400d 	movw	r0, #54285	; 0xd40d
 80038c6:	f7fd fd89 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 80038ca:	2100      	movs	r1, #0
 80038cc:	f24d 400e 	movw	r0, #54286	; 0xd40e
 80038d0:	f7fd fd84 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 80038d4:	21e5      	movs	r1, #229	; 0xe5
 80038d6:	f24d 400f 	movw	r0, #54287	; 0xd40f
 80038da:	f7fd fd7f 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 80038de:	2101      	movs	r1, #1
 80038e0:	f24d 4010 	movw	r0, #54288	; 0xd410
 80038e4:	f7fd fd7a 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 80038e8:	2113      	movs	r1, #19
 80038ea:	f24d 4011 	movw	r0, #54289	; 0xd411
 80038ee:	f7fd fd75 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 80038f2:	2101      	movs	r1, #1
 80038f4:	f24d 4012 	movw	r0, #54290	; 0xd412
 80038f8:	f7fd fd70 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 80038fc:	2154      	movs	r1, #84	; 0x54
 80038fe:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003902:	f7fd fd6b 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 8003906:	2101      	movs	r1, #1
 8003908:	f24d 4014 	movw	r0, #54292	; 0xd414
 800390c:	f7fd fd66 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 8003910:	2182      	movs	r1, #130	; 0x82
 8003912:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003916:	f7fd fd61 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 800391a:	2101      	movs	r1, #1
 800391c:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003920:	f7fd fd5c 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 8003924:	21ca      	movs	r1, #202	; 0xca
 8003926:	f24d 4017 	movw	r0, #54295	; 0xd417
 800392a:	f7fd fd57 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 800392e:	2102      	movs	r1, #2
 8003930:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003934:	f7fd fd52 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 8003938:	2100      	movs	r1, #0
 800393a:	f24d 4019 	movw	r0, #54297	; 0xd419
 800393e:	f7fd fd4d 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 8003942:	2102      	movs	r1, #2
 8003944:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003948:	f7fd fd48 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 800394c:	2101      	movs	r1, #1
 800394e:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003952:	f7fd fd43 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 8003956:	2102      	movs	r1, #2
 8003958:	f24d 401c 	movw	r0, #54300	; 0xd41c
 800395c:	f7fd fd3e 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 8003960:	2134      	movs	r1, #52	; 0x34
 8003962:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003966:	f7fd fd39 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 800396a:	2102      	movs	r1, #2
 800396c:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003970:	f7fd fd34 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 8003974:	2167      	movs	r1, #103	; 0x67
 8003976:	f24d 401f 	movw	r0, #54303	; 0xd41f
 800397a:	f7fd fd2f 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 800397e:	2102      	movs	r1, #2
 8003980:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003984:	f7fd fd2a 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 8003988:	2184      	movs	r1, #132	; 0x84
 800398a:	f24d 4021 	movw	r0, #54305	; 0xd421
 800398e:	f7fd fd25 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 8003992:	2102      	movs	r1, #2
 8003994:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003998:	f7fd fd20 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 800399c:	21a4      	movs	r1, #164	; 0xa4
 800399e:	f24d 4023 	movw	r0, #54307	; 0xd423
 80039a2:	f7fd fd1b 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 80039a6:	2102      	movs	r1, #2
 80039a8:	f24d 4024 	movw	r0, #54308	; 0xd424
 80039ac:	f7fd fd16 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 80039b0:	21b7      	movs	r1, #183	; 0xb7
 80039b2:	f24d 4025 	movw	r0, #54309	; 0xd425
 80039b6:	f7fd fd11 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 80039ba:	2102      	movs	r1, #2
 80039bc:	f24d 4026 	movw	r0, #54310	; 0xd426
 80039c0:	f7fd fd0c 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 80039c4:	21cf      	movs	r1, #207	; 0xcf
 80039c6:	f24d 4027 	movw	r0, #54311	; 0xd427
 80039ca:	f7fd fd07 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 80039ce:	2102      	movs	r1, #2
 80039d0:	f24d 4028 	movw	r0, #54312	; 0xd428
 80039d4:	f7fd fd02 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 80039d8:	21de      	movs	r1, #222	; 0xde
 80039da:	f24d 4029 	movw	r0, #54313	; 0xd429
 80039de:	f7fd fcfd 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 80039e2:	2102      	movs	r1, #2
 80039e4:	f24d 402a 	movw	r0, #54314	; 0xd42a
 80039e8:	f7fd fcf8 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 80039ec:	21f2      	movs	r1, #242	; 0xf2
 80039ee:	f24d 402b 	movw	r0, #54315	; 0xd42b
 80039f2:	f7fd fcf3 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 80039f6:	2102      	movs	r1, #2
 80039f8:	f24d 402c 	movw	r0, #54316	; 0xd42c
 80039fc:	f7fd fcee 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 8003a00:	21fe      	movs	r1, #254	; 0xfe
 8003a02:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003a06:	f7fd fce9 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 8003a0a:	2103      	movs	r1, #3
 8003a0c:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003a10:	f7fd fce4 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 8003a14:	2110      	movs	r1, #16
 8003a16:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003a1a:	f7fd fcdf 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 8003a1e:	2103      	movs	r1, #3
 8003a20:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003a24:	f7fd fcda 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 8003a28:	2133      	movs	r1, #51	; 0x33
 8003a2a:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003a2e:	f7fd fcd5 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 8003a32:	2103      	movs	r1, #3
 8003a34:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003a38:	f7fd fcd0 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 8003a3c:	216d      	movs	r1, #109	; 0x6d
 8003a3e:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003a42:	f7fd fccb 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 8003a46:	2100      	movs	r1, #0
 8003a48:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003a4c:	f7fd fcc6 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 8003a50:	2133      	movs	r1, #51	; 0x33
 8003a52:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003a56:	f7fd fcc1 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003a60:	f7fd fcbc 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 8003a64:	2134      	movs	r1, #52	; 0x34
 8003a66:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003a6a:	f7fd fcb7 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 8003a6e:	2100      	movs	r1, #0
 8003a70:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003a74:	f7fd fcb2 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 8003a78:	213a      	movs	r1, #58	; 0x3a
 8003a7a:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003a7e:	f7fd fcad 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 8003a82:	2100      	movs	r1, #0
 8003a84:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003a88:	f7fd fca8 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 8003a8c:	214a      	movs	r1, #74	; 0x4a
 8003a8e:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003a92:	f7fd fca3 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 8003a96:	2100      	movs	r1, #0
 8003a98:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003a9c:	f7fd fc9e 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 8003aa0:	215c      	movs	r1, #92	; 0x5c
 8003aa2:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003aa6:	f7fd fc99 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 8003aaa:	2100      	movs	r1, #0
 8003aac:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003ab0:	f7fd fc94 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 8003ab4:	2181      	movs	r1, #129	; 0x81
 8003ab6:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003aba:	f7fd fc8f 	bl	80013dc <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 8003abe:	2100      	movs	r1, #0
 8003ac0:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003ac4:	f7fd fc8a 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 8003ac8:	21a6      	movs	r1, #166	; 0xa6
 8003aca:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003ace:	f7fd fc85 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003ad8:	f7fd fc80 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 8003adc:	21e5      	movs	r1, #229	; 0xe5
 8003ade:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003ae2:	f7fd fc7b 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003aec:	f7fd fc76 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 8003af0:	2113      	movs	r1, #19
 8003af2:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003af6:	f7fd fc71 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 8003afa:	2101      	movs	r1, #1
 8003afc:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003b00:	f7fd fc6c 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 8003b04:	2154      	movs	r1, #84	; 0x54
 8003b06:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003b0a:	f7fd fc67 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 8003b0e:	2101      	movs	r1, #1
 8003b10:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003b14:	f7fd fc62 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 8003b18:	2182      	movs	r1, #130	; 0x82
 8003b1a:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003b1e:	f7fd fc5d 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 8003b22:	2101      	movs	r1, #1
 8003b24:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003b28:	f7fd fc58 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 8003b2c:	21ca      	movs	r1, #202	; 0xca
 8003b2e:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003b32:	f7fd fc53 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 8003b36:	2102      	movs	r1, #2
 8003b38:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003b3c:	f7fd fc4e 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 8003b40:	2100      	movs	r1, #0
 8003b42:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003b46:	f7fd fc49 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003b50:	f7fd fc44 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 8003b54:	2101      	movs	r1, #1
 8003b56:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003b5a:	f7fd fc3f 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 8003b5e:	2102      	movs	r1, #2
 8003b60:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003b64:	f7fd fc3a 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 8003b68:	2134      	movs	r1, #52	; 0x34
 8003b6a:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003b6e:	f7fd fc35 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 8003b72:	2102      	movs	r1, #2
 8003b74:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003b78:	f7fd fc30 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 8003b7c:	2167      	movs	r1, #103	; 0x67
 8003b7e:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003b82:	f7fd fc2b 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 8003b86:	2102      	movs	r1, #2
 8003b88:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003b8c:	f7fd fc26 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 8003b90:	2184      	movs	r1, #132	; 0x84
 8003b92:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003b96:	f7fd fc21 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003ba0:	f7fd fc1c 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 8003ba4:	21a4      	movs	r1, #164	; 0xa4
 8003ba6:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003baa:	f7fd fc17 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 8003bae:	2102      	movs	r1, #2
 8003bb0:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003bb4:	f7fd fc12 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 8003bb8:	21b7      	movs	r1, #183	; 0xb7
 8003bba:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003bbe:	f7fd fc0d 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003bc8:	f7fd fc08 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 8003bcc:	21cf      	movs	r1, #207	; 0xcf
 8003bce:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003bd2:	f7fd fc03 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 8003bd6:	2102      	movs	r1, #2
 8003bd8:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003bdc:	f7fd fbfe 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 8003be0:	21de      	movs	r1, #222	; 0xde
 8003be2:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003be6:	f7fd fbf9 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 8003bea:	2102      	movs	r1, #2
 8003bec:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003bf0:	f7fd fbf4 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 8003bf4:	21f2      	movs	r1, #242	; 0xf2
 8003bf6:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003bfa:	f7fd fbef 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 8003bfe:	2102      	movs	r1, #2
 8003c00:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003c04:	f7fd fbea 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 8003c08:	21fe      	movs	r1, #254	; 0xfe
 8003c0a:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003c0e:	f7fd fbe5 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 8003c12:	2103      	movs	r1, #3
 8003c14:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003c18:	f7fd fbe0 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 8003c1c:	2110      	movs	r1, #16
 8003c1e:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003c22:	f7fd fbdb 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 8003c26:	2103      	movs	r1, #3
 8003c28:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003c2c:	f7fd fbd6 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 8003c30:	2133      	movs	r1, #51	; 0x33
 8003c32:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003c36:	f7fd fbd1 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 8003c3a:	2103      	movs	r1, #3
 8003c3c:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003c40:	f7fd fbcc 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 8003c44:	216d      	movs	r1, #109	; 0x6d
 8003c46:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003c4a:	f7fd fbc7 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 8003c4e:	2100      	movs	r1, #0
 8003c50:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003c54:	f7fd fbc2 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 8003c58:	2133      	movs	r1, #51	; 0x33
 8003c5a:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003c5e:	f7fd fbbd 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 8003c62:	2100      	movs	r1, #0
 8003c64:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003c68:	f7fd fbb8 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 8003c6c:	2134      	movs	r1, #52	; 0x34
 8003c6e:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003c72:	f7fd fbb3 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 8003c76:	2100      	movs	r1, #0
 8003c78:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003c7c:	f7fd fbae 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 8003c80:	213a      	movs	r1, #58	; 0x3a
 8003c82:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003c86:	f7fd fba9 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003c90:	f7fd fba4 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 8003c94:	214a      	movs	r1, #74	; 0x4a
 8003c96:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003c9a:	f7fd fb9f 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003ca4:	f7fd fb9a 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 8003ca8:	215c      	movs	r1, #92	; 0x5c
 8003caa:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003cae:	f7fd fb95 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003cb8:	f7fd fb90 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 8003cbc:	2181      	movs	r1, #129	; 0x81
 8003cbe:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003cc2:	f7fd fb8b 	bl	80013dc <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003ccc:	f7fd fb86 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 8003cd0:	21a6      	movs	r1, #166	; 0xa6
 8003cd2:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003cd6:	f7fd fb81 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 8003cda:	2100      	movs	r1, #0
 8003cdc:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003ce0:	f7fd fb7c 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 8003ce4:	21e5      	movs	r1, #229	; 0xe5
 8003ce6:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003cea:	f7fd fb77 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 8003cee:	2101      	movs	r1, #1
 8003cf0:	f24d 6010 	movw	r0, #54800	; 0xd610
 8003cf4:	f7fd fb72 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 8003cf8:	2113      	movs	r1, #19
 8003cfa:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003cfe:	f7fd fb6d 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 8003d02:	2101      	movs	r1, #1
 8003d04:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003d08:	f7fd fb68 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8003d0c:	2154      	movs	r1, #84	; 0x54
 8003d0e:	f24d 6013 	movw	r0, #54803	; 0xd613
 8003d12:	f7fd fb63 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 8003d16:	2101      	movs	r1, #1
 8003d18:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003d1c:	f7fd fb5e 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 8003d20:	2182      	movs	r1, #130	; 0x82
 8003d22:	f24d 6015 	movw	r0, #54805	; 0xd615
 8003d26:	f7fd fb59 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003d30:	f7fd fb54 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 8003d34:	21ca      	movs	r1, #202	; 0xca
 8003d36:	f24d 6017 	movw	r0, #54807	; 0xd617
 8003d3a:	f7fd fb4f 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 8003d3e:	2102      	movs	r1, #2
 8003d40:	f24d 6018 	movw	r0, #54808	; 0xd618
 8003d44:	f7fd fb4a 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 8003d48:	2100      	movs	r1, #0
 8003d4a:	f24d 6019 	movw	r0, #54809	; 0xd619
 8003d4e:	f7fd fb45 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 8003d52:	2102      	movs	r1, #2
 8003d54:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8003d58:	f7fd fb40 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8003d62:	f7fd fb3b 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 8003d66:	2102      	movs	r1, #2
 8003d68:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8003d6c:	f7fd fb36 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 8003d70:	2134      	movs	r1, #52	; 0x34
 8003d72:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8003d76:	f7fd fb31 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 8003d7a:	2102      	movs	r1, #2
 8003d7c:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8003d80:	f7fd fb2c 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 8003d84:	2167      	movs	r1, #103	; 0x67
 8003d86:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8003d8a:	f7fd fb27 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 8003d8e:	2102      	movs	r1, #2
 8003d90:	f24d 6020 	movw	r0, #54816	; 0xd620
 8003d94:	f7fd fb22 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 8003d98:	2184      	movs	r1, #132	; 0x84
 8003d9a:	f24d 6021 	movw	r0, #54817	; 0xd621
 8003d9e:	f7fd fb1d 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 8003da2:	2102      	movs	r1, #2
 8003da4:	f24d 6022 	movw	r0, #54818	; 0xd622
 8003da8:	f7fd fb18 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 8003dac:	21a4      	movs	r1, #164	; 0xa4
 8003dae:	f24d 6023 	movw	r0, #54819	; 0xd623
 8003db2:	f7fd fb13 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 8003db6:	2102      	movs	r1, #2
 8003db8:	f24d 6024 	movw	r0, #54820	; 0xd624
 8003dbc:	f7fd fb0e 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 8003dc0:	21b7      	movs	r1, #183	; 0xb7
 8003dc2:	f24d 6025 	movw	r0, #54821	; 0xd625
 8003dc6:	f7fd fb09 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 8003dca:	2102      	movs	r1, #2
 8003dcc:	f24d 6026 	movw	r0, #54822	; 0xd626
 8003dd0:	f7fd fb04 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 8003dd4:	21cf      	movs	r1, #207	; 0xcf
 8003dd6:	f24d 6027 	movw	r0, #54823	; 0xd627
 8003dda:	f7fd faff 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 8003dde:	2102      	movs	r1, #2
 8003de0:	f24d 6028 	movw	r0, #54824	; 0xd628
 8003de4:	f7fd fafa 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 8003de8:	21de      	movs	r1, #222	; 0xde
 8003dea:	f24d 6029 	movw	r0, #54825	; 0xd629
 8003dee:	f7fd faf5 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 8003df2:	2102      	movs	r1, #2
 8003df4:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8003df8:	f7fd faf0 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8003dfc:	21f2      	movs	r1, #242	; 0xf2
 8003dfe:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8003e02:	f7fd faeb 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 8003e06:	2102      	movs	r1, #2
 8003e08:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003e0c:	f7fd fae6 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 8003e10:	21fe      	movs	r1, #254	; 0xfe
 8003e12:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8003e16:	f7fd fae1 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 8003e1a:	2103      	movs	r1, #3
 8003e1c:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003e20:	f7fd fadc 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 8003e24:	2110      	movs	r1, #16
 8003e26:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8003e2a:	f7fd fad7 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 8003e2e:	2103      	movs	r1, #3
 8003e30:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003e34:	f7fd fad2 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 8003e38:	2133      	movs	r1, #51	; 0x33
 8003e3a:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003e3e:	f7fd facd 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 8003e42:	2103      	movs	r1, #3
 8003e44:	f24d 6032 	movw	r0, #54834	; 0xd632
 8003e48:	f7fd fac8 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 8003e4c:	216d      	movs	r1, #109	; 0x6d
 8003e4e:	f24d 6033 	movw	r0, #54835	; 0xd633
 8003e52:	f7fd fac3 	bl	80013dc <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 8003e56:	2155      	movs	r1, #85	; 0x55
 8003e58:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003e5c:	f7fd fabe 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8003e60:	21aa      	movs	r1, #170	; 0xaa
 8003e62:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003e66:	f7fd fab9 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8003e6a:	2152      	movs	r1, #82	; 0x52
 8003e6c:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003e70:	f7fd fab4 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8003e74:	2108      	movs	r1, #8
 8003e76:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003e7a:	f7fd faaf 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 8003e7e:	2100      	movs	r1, #0
 8003e80:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003e84:	f7fd faaa 	bl	80013dc <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8003e88:	21cc      	movs	r1, #204	; 0xcc
 8003e8a:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003e8e:	f7fd faa5 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8003e92:	2100      	movs	r1, #0
 8003e94:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003e98:	f7fd faa0 	bl	80013dc <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 8003e9c:	2105      	movs	r1, #5
 8003e9e:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003ea2:	f7fd fa9b 	bl	80013dc <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 8003ea6:	2170      	movs	r1, #112	; 0x70
 8003ea8:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003eac:	f7fd fa96 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 8003eb0:	2170      	movs	r1, #112	; 0x70
 8003eb2:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003eb6:	f7fd fa91 	bl	80013dc <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 8003eba:	2101      	movs	r1, #1
 8003ebc:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003ec0:	f7fd fa8c 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 8003ec4:	2103      	movs	r1, #3
 8003ec6:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003eca:	f7fd fa87 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 8003ece:	2103      	movs	r1, #3
 8003ed0:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003ed4:	f7fd fa82 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 8003ed8:	2103      	movs	r1, #3
 8003eda:	f64b 0003 	movw	r0, #47107	; 0xb803
 8003ede:	f7fd fa7d 	bl	80013dc <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003ee8:	f7fd fa78 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 8003eec:	2100      	movs	r1, #0
 8003eee:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003ef2:	f7fd fa73 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003efc:	f7fd fa6e 	bl	80013dc <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 8003f00:	21d0      	movs	r1, #208	; 0xd0
 8003f02:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8003f06:	f7fd fa69 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	f64c 1001 	movw	r0, #51457	; 0xc901
 8003f10:	f7fd fa64 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 8003f14:	2150      	movs	r1, #80	; 0x50
 8003f16:	f64c 1002 	movw	r0, #51458	; 0xc902
 8003f1a:	f7fd fa5f 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 8003f1e:	2150      	movs	r1, #80	; 0x50
 8003f20:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003f24:	f7fd fa5a 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 8003f28:	2150      	movs	r1, #80	; 0x50
 8003f2a:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003f2e:	f7fd fa55 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 8003f32:	2100      	movs	r1, #0
 8003f34:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8003f38:	f7fd fa50 	bl	80013dc <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 8003f3c:	2155      	movs	r1, #85	; 0x55
 8003f3e:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003f42:	f7fd fa4b 	bl	80013dc <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8003f46:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8003f4a:	f7fd fa0d 	bl	8001368 <LCD_WR_REG>
		opt_delay(120);
 8003f4e:	2078      	movs	r0, #120	; 0x78
 8003f50:	f7fd fa5a 	bl	8001408 <opt_delay>
		LCD_WR_REG(0x2900);
 8003f54:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8003f58:	f7fd fa06 	bl	8001368 <LCD_WR_REG>
 8003f5c:	e0be      	b.n	80040dc <TFTLCD_Init+0x235c>
	}else if(lcddev.id==0X1963)
 8003f5e:	4b7f      	ldr	r3, [pc, #508]	; (800415c <TFTLCD_Init+0x23dc>)
 8003f60:	889b      	ldrh	r3, [r3, #4]
 8003f62:	f641 1263 	movw	r2, #6499	; 0x1963
 8003f66:	4293      	cmp	r3, r2
 8003f68:	f040 80b8 	bne.w	80040dc <TFTLCD_Init+0x235c>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8003f6c:	20e2      	movs	r0, #226	; 0xe2
 8003f6e:	f7fd f9fb 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 8003f72:	201d      	movs	r0, #29
 8003f74:	f7fd fa0c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8003f78:	2002      	movs	r0, #2
 8003f7a:	f7fd fa09 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 8003f7e:	2004      	movs	r0, #4
 8003f80:	f7fd fa06 	bl	8001390 <LCD_WR_DATA>
		opt_delay(100);
 8003f84:	2064      	movs	r0, #100	; 0x64
 8003f86:	f7fd fa3f 	bl	8001408 <opt_delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8003f8a:	20e0      	movs	r0, #224	; 0xe0
 8003f8c:	f7fd f9ec 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8003f90:	2001      	movs	r0, #1
 8003f92:	f7fd f9fd 	bl	8001390 <LCD_WR_DATA>
		HAL_Delay(10);
 8003f96:	200a      	movs	r0, #10
 8003f98:	f002 f930 	bl	80061fc <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8003f9c:	20e0      	movs	r0, #224	; 0xe0
 8003f9e:	f7fd f9e3 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 8003fa2:	2003      	movs	r0, #3
 8003fa4:	f7fd f9f4 	bl	8001390 <LCD_WR_DATA>
		HAL_Delay(12);
 8003fa8:	200c      	movs	r0, #12
 8003faa:	f002 f927 	bl	80061fc <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8003fae:	2001      	movs	r0, #1
 8003fb0:	f7fd f9da 	bl	8001368 <LCD_WR_REG>
		HAL_Delay(10);
 8003fb4:	200a      	movs	r0, #10
 8003fb6:	f002 f921 	bl	80061fc <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8003fba:	20e6      	movs	r0, #230	; 0xe6
 8003fbc:	f7fd f9d4 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8003fc0:	202f      	movs	r0, #47	; 0x2f
 8003fc2:	f7fd f9e5 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8003fc6:	20ff      	movs	r0, #255	; 0xff
 8003fc8:	f7fd f9e2 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8003fcc:	20ff      	movs	r0, #255	; 0xff
 8003fce:	f7fd f9df 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 8003fd2:	20b0      	movs	r0, #176	; 0xb0
 8003fd4:	f7fd f9c8 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8003fd8:	2020      	movs	r0, #32
 8003fda:	f7fd f9d9 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 8003fde:	2000      	movs	r0, #0
 8003fe0:	f7fd f9d6 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 8003fe4:	2003      	movs	r0, #3
 8003fe6:	f7fd f9d3 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8003fea:	f240 301f 	movw	r0, #799	; 0x31f
 8003fee:	f7fd f9cf 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 8003ff2:	2001      	movs	r0, #1
 8003ff4:	f7fd f9cc 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8003ff8:	f240 10df 	movw	r0, #479	; 0x1df
 8003ffc:	f7fd f9c8 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 8004000:	2000      	movs	r0, #0
 8004002:	f7fd f9c5 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 8004006:	20b4      	movs	r0, #180	; 0xb4
 8004008:	f7fd f9ae 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 800400c:	2004      	movs	r0, #4
 800400e:	f7fd f9bf 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 8004012:	f240 401f 	movw	r0, #1055	; 0x41f
 8004016:	f7fd f9bb 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 800401a:	2000      	movs	r0, #0
 800401c:	f7fd f9b8 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 8004020:	202e      	movs	r0, #46	; 0x2e
 8004022:	f7fd f9b5 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8004026:	2000      	movs	r0, #0
 8004028:	f7fd f9b2 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800402c:	2000      	movs	r0, #0
 800402e:	f7fd f9af 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004032:	2000      	movs	r0, #0
 8004034:	f7fd f9ac 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004038:	2000      	movs	r0, #0
 800403a:	f7fd f9a9 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 800403e:	20b6      	movs	r0, #182	; 0xb6
 8004040:	f7fd f992 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8004044:	2002      	movs	r0, #2
 8004046:	f7fd f9a3 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 800404a:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800404e:	f7fd f99f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 8004052:	2000      	movs	r0, #0
 8004054:	f7fd f99c 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 8004058:	2017      	movs	r0, #23
 800405a:	f7fd f999 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 800405e:	2015      	movs	r0, #21
 8004060:	f7fd f996 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004064:	2000      	movs	r0, #0
 8004066:	f7fd f993 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800406a:	2000      	movs	r0, #0
 800406c:	f7fd f990 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 8004070:	20f0      	movs	r0, #240	; 0xf0
 8004072:	f7fd f979 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 8004076:	2003      	movs	r0, #3
 8004078:	f7fd f98a 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 800407c:	2029      	movs	r0, #41	; 0x29
 800407e:	f7fd f973 	bl	8001368 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8004082:	20d0      	movs	r0, #208	; 0xd0
 8004084:	f7fd f970 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8004088:	2000      	movs	r0, #0
 800408a:	f7fd f981 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 800408e:	20be      	movs	r0, #190	; 0xbe
 8004090:	f7fd f96a 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8004094:	2005      	movs	r0, #5
 8004096:	f7fd f97b 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 800409a:	20fe      	movs	r0, #254	; 0xfe
 800409c:	f7fd f978 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 80040a0:	2001      	movs	r0, #1
 80040a2:	f7fd f975 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 80040a6:	2000      	movs	r0, #0
 80040a8:	f7fd f972 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 80040ac:	2000      	movs	r0, #0
 80040ae:	f7fd f96f 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 80040b2:	2000      	movs	r0, #0
 80040b4:	f7fd f96c 	bl	8001390 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 80040b8:	20b8      	movs	r0, #184	; 0xb8
 80040ba:	f7fd f955 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 80040be:	2003      	movs	r0, #3
 80040c0:	f7fd f966 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 80040c4:	2001      	movs	r0, #1
 80040c6:	f7fd f963 	bl	8001390 <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 80040ca:	20ba      	movs	r0, #186	; 0xba
 80040cc:	f7fd f94c 	bl	8001368 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 80040d0:	2001      	movs	r0, #1
 80040d2:	f7fd f95d 	bl	8001390 <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 80040d6:	2064      	movs	r0, #100	; 0x64
 80040d8:	f7fd fd4e 	bl	8001b78 <LCD_SSD_BackLightSet>
	}
	//初始化完成以后,提速
	if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//如果是这几个IC,则设置WR时序为最快
 80040dc:	4b1f      	ldr	r3, [pc, #124]	; (800415c <TFTLCD_Init+0x23dc>)
 80040de:	889b      	ldrh	r3, [r3, #4]
 80040e0:	f249 3241 	movw	r2, #37697	; 0x9341
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d011      	beq.n	800410c <TFTLCD_Init+0x238c>
 80040e8:	4b1c      	ldr	r3, [pc, #112]	; (800415c <TFTLCD_Init+0x23dc>)
 80040ea:	889b      	ldrh	r3, [r3, #4]
 80040ec:	f245 3210 	movw	r2, #21264	; 0x5310
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00b      	beq.n	800410c <TFTLCD_Init+0x238c>
 80040f4:	4b19      	ldr	r3, [pc, #100]	; (800415c <TFTLCD_Init+0x23dc>)
 80040f6:	889b      	ldrh	r3, [r3, #4]
 80040f8:	f245 5210 	movw	r2, #21776	; 0x5510
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d005      	beq.n	800410c <TFTLCD_Init+0x238c>
 8004100:	4b16      	ldr	r3, [pc, #88]	; (800415c <TFTLCD_Init+0x23dc>)
 8004102:	889b      	ldrh	r3, [r3, #4]
 8004104:	f641 1263 	movw	r2, #6499	; 0x1963
 8004108:	4293      	cmp	r3, r2
 800410a:	d117      	bne.n	800413c <TFTLCD_Init+0x23bc>
	{
		//重新配置写时序控制寄存器的时序
		FSMC_Bank1E->BWTR[6]&=~(0XF<<0);//地址建立时间(ADDSET)清零
 800410c:	4b14      	ldr	r3, [pc, #80]	; (8004160 <TFTLCD_Init+0x23e0>)
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	4a13      	ldr	r2, [pc, #76]	; (8004160 <TFTLCD_Init+0x23e0>)
 8004112:	f023 030f 	bic.w	r3, r3, #15
 8004116:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]&=~(0XF<<8);//数据保存时间清零
 8004118:	4b11      	ldr	r3, [pc, #68]	; (8004160 <TFTLCD_Init+0x23e0>)
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	4a10      	ldr	r2, [pc, #64]	; (8004160 <TFTLCD_Init+0x23e0>)
 800411e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004122:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=3<<0;		//地址建立时间(ADDSET)为3个HCLK =18ns
 8004124:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <TFTLCD_Init+0x23e0>)
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	4a0d      	ldr	r2, [pc, #52]	; (8004160 <TFTLCD_Init+0x23e0>)
 800412a:	f043 0303 	orr.w	r3, r3, #3
 800412e:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=2<<8; 	//数据保存时间(DATAST)为6ns*3个HCLK=18ns
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <TFTLCD_Init+0x23e0>)
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	4a0a      	ldr	r2, [pc, #40]	; (8004160 <TFTLCD_Init+0x23e0>)
 8004136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800413a:	6193      	str	r3, [r2, #24]
	}
	LCD_Display_Dir(0);		//默认为竖屏
 800413c:	2000      	movs	r0, #0
 800413e:	f7fd fd4f 	bl	8001be0 <LCD_Display_Dir>
	GPIOB->ODR |= 1<<15;					//点亮背光
 8004142:	4b08      	ldr	r3, [pc, #32]	; (8004164 <TFTLCD_Init+0x23e4>)
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	4a07      	ldr	r2, [pc, #28]	; (8004164 <TFTLCD_Init+0x23e4>)
 8004148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414c:	6153      	str	r3, [r2, #20]
	LCD_Clear(WHITE);
 800414e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004152:	f000 f809 	bl	8004168 <LCD_Clear>
}
 8004156:	bf00      	nop
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000314 	.word	0x20000314
 8004160:	a0000104 	.word	0xa0000104
 8004164:	40020400 	.word	0x40020400

08004168 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(uint32_t color)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
	uint32_t index=0;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint=lcddev.width;
 8004174:	4b11      	ldr	r3, [pc, #68]	; (80041bc <LCD_Clear+0x54>)
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 800417a:	4b10      	ldr	r3, [pc, #64]	; (80041bc <LCD_Clear+0x54>)
 800417c:	885b      	ldrh	r3, [r3, #2]
 800417e:	461a      	mov	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	60bb      	str	r3, [r7, #8]
	LCD_SetCursor(0x00,0x0000);			//设置光标位置
 8004188:	2100      	movs	r1, #0
 800418a:	2000      	movs	r0, #0
 800418c:	f7fd f95e 	bl	800144c <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 8004190:	f7fd f94c 	bl	800142c <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 8004194:	2300      	movs	r3, #0
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	e006      	b.n	80041a8 <LCD_Clear+0x40>
	{
		TFT_LCD->LCD_RAM=color;
 800419a:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <LCD_Clear+0x58>)
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	b292      	uxth	r2, r2
 80041a0:	805a      	strh	r2, [r3, #2]
	for(index=0;index<totalpoint;index++)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3301      	adds	r3, #1
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d3f4      	bcc.n	800419a <LCD_Clear+0x32>
	}
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000314 	.word	0x20000314
 80041c0:	6c00007e 	.word	0x6c00007e

080041c4 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24/32
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4604      	mov	r4, r0
 80041cc:	4608      	mov	r0, r1
 80041ce:	4611      	mov	r1, r2
 80041d0:	461a      	mov	r2, r3
 80041d2:	4623      	mov	r3, r4
 80041d4:	80fb      	strh	r3, [r7, #6]
 80041d6:	4603      	mov	r3, r0
 80041d8:	80bb      	strh	r3, [r7, #4]
 80041da:	460b      	mov	r3, r1
 80041dc:	70fb      	strb	r3, [r7, #3]
 80041de:	4613      	mov	r3, r2
 80041e0:	70bb      	strb	r3, [r7, #2]
    uint8_t temp,t1,t;
	uint16_t y0=y;
 80041e2:	88bb      	ldrh	r3, [r7, #4]
 80041e4:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 80041e6:	78bb      	ldrb	r3, [r7, #2]
 80041e8:	08db      	lsrs	r3, r3, #3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	78bb      	ldrb	r3, [r7, #2]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bf14      	ite	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	2300      	moveq	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	4413      	add	r3, r2
 8004202:	b2da      	uxtb	r2, r3
 8004204:	78bb      	ldrb	r3, [r7, #2]
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	b2db      	uxtb	r3, r3
 800420a:	fb12 f303 	smulbb	r3, r2, r3
 800420e:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	3b20      	subs	r3, #32
 8004214:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 8004216:	2300      	movs	r3, #0
 8004218:	737b      	strb	r3, [r7, #13]
 800421a:	e08f      	b.n	800433c <LCD_ShowChar+0x178>
	{
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
 800421c:	78bb      	ldrb	r3, [r7, #2]
 800421e:	2b0c      	cmp	r3, #12
 8004220:	d10b      	bne.n	800423a <LCD_ShowChar+0x76>
 8004222:	78fa      	ldrb	r2, [r7, #3]
 8004224:	7b79      	ldrb	r1, [r7, #13]
 8004226:	484b      	ldr	r0, [pc, #300]	; (8004354 <LCD_ShowChar+0x190>)
 8004228:	4613      	mov	r3, r2
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4403      	add	r3, r0
 8004232:	440b      	add	r3, r1
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	73fb      	strb	r3, [r7, #15]
 8004238:	e03f      	b.n	80042ba <LCD_ShowChar+0xf6>
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
 800423a:	78bb      	ldrb	r3, [r7, #2]
 800423c:	2b10      	cmp	r3, #16
 800423e:	d108      	bne.n	8004252 <LCD_ShowChar+0x8e>
 8004240:	78fa      	ldrb	r2, [r7, #3]
 8004242:	7b7b      	ldrb	r3, [r7, #13]
 8004244:	4944      	ldr	r1, [pc, #272]	; (8004358 <LCD_ShowChar+0x194>)
 8004246:	0112      	lsls	r2, r2, #4
 8004248:	440a      	add	r2, r1
 800424a:	4413      	add	r3, r2
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	73fb      	strb	r3, [r7, #15]
 8004250:	e033      	b.n	80042ba <LCD_ShowChar+0xf6>
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
 8004252:	78bb      	ldrb	r3, [r7, #2]
 8004254:	2b18      	cmp	r3, #24
 8004256:	d10b      	bne.n	8004270 <LCD_ShowChar+0xac>
 8004258:	78fa      	ldrb	r2, [r7, #3]
 800425a:	7b79      	ldrb	r1, [r7, #13]
 800425c:	483f      	ldr	r0, [pc, #252]	; (800435c <LCD_ShowChar+0x198>)
 800425e:	4613      	mov	r3, r2
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4403      	add	r3, r0
 8004268:	440b      	add	r3, r1
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	73fb      	strb	r3, [r7, #15]
 800426e:	e024      	b.n	80042ba <LCD_ShowChar+0xf6>
		else if(size==32)temp=asc2_3216[num][t];	//调用3216字体
 8004270:	78bb      	ldrb	r3, [r7, #2]
 8004272:	2b20      	cmp	r3, #32
 8004274:	d108      	bne.n	8004288 <LCD_ShowChar+0xc4>
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	7b7b      	ldrb	r3, [r7, #13]
 800427a:	4939      	ldr	r1, [pc, #228]	; (8004360 <LCD_ShowChar+0x19c>)
 800427c:	0192      	lsls	r2, r2, #6
 800427e:	440a      	add	r2, r1
 8004280:	4413      	add	r3, r2
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	73fb      	strb	r3, [r7, #15]
 8004286:	e018      	b.n	80042ba <LCD_ShowChar+0xf6>
		else if(size==48)temp=asc2_4824[num][t];	//调用4824字体
 8004288:	78bb      	ldrb	r3, [r7, #2]
 800428a:	2b30      	cmp	r3, #48	; 0x30
 800428c:	d10a      	bne.n	80042a4 <LCD_ShowChar+0xe0>
 800428e:	78fa      	ldrb	r2, [r7, #3]
 8004290:	7b7b      	ldrb	r3, [r7, #13]
 8004292:	4934      	ldr	r1, [pc, #208]	; (8004364 <LCD_ShowChar+0x1a0>)
 8004294:	20a8      	movs	r0, #168	; 0xa8
 8004296:	fb00 f202 	mul.w	r2, r0, r2
 800429a:	440a      	add	r2, r1
 800429c:	4413      	add	r3, r2
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	73fb      	strb	r3, [r7, #15]
 80042a2:	e00a      	b.n	80042ba <LCD_ShowChar+0xf6>
		else if(size==64)temp=asc2_6432[num][t];	//调用6432字体
 80042a4:	78bb      	ldrb	r3, [r7, #2]
 80042a6:	2b40      	cmp	r3, #64	; 0x40
 80042a8:	d14e      	bne.n	8004348 <LCD_ShowChar+0x184>
 80042aa:	78fa      	ldrb	r2, [r7, #3]
 80042ac:	7b7b      	ldrb	r3, [r7, #13]
 80042ae:	492e      	ldr	r1, [pc, #184]	; (8004368 <LCD_ShowChar+0x1a4>)
 80042b0:	0212      	lsls	r2, r2, #8
 80042b2:	440a      	add	r2, r1
 80042b4:	4413      	add	r3, r2
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 80042ba:	2300      	movs	r3, #0
 80042bc:	73bb      	strb	r3, [r7, #14]
 80042be:	e035      	b.n	800432c <LCD_ShowChar+0x168>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 80042c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	da07      	bge.n	80042d8 <LCD_ShowChar+0x114>
 80042c8:	4b28      	ldr	r3, [pc, #160]	; (800436c <LCD_ShowChar+0x1a8>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	88b9      	ldrh	r1, [r7, #4]
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fd fb39 	bl	8001948 <LCD_Fast_DrawPoint>
 80042d6:	e00a      	b.n	80042ee <LCD_ShowChar+0x12a>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 80042d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d106      	bne.n	80042ee <LCD_ShowChar+0x12a>
 80042e0:	4b23      	ldr	r3, [pc, #140]	; (8004370 <LCD_ShowChar+0x1ac>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	88b9      	ldrh	r1, [r7, #4]
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fd fb2d 	bl	8001948 <LCD_Fast_DrawPoint>
			temp<<=1;
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]
			y++;
 80042f4:	88bb      	ldrh	r3, [r7, #4]
 80042f6:	3301      	adds	r3, #1
 80042f8:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 80042fa:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <LCD_ShowChar+0x1b0>)
 80042fc:	885b      	ldrh	r3, [r3, #2]
 80042fe:	88ba      	ldrh	r2, [r7, #4]
 8004300:	429a      	cmp	r2, r3
 8004302:	d223      	bcs.n	800434c <LCD_ShowChar+0x188>
			if((y-y0)==size)
 8004304:	88ba      	ldrh	r2, [r7, #4]
 8004306:	897b      	ldrh	r3, [r7, #10]
 8004308:	1ad2      	subs	r2, r2, r3
 800430a:	78bb      	ldrb	r3, [r7, #2]
 800430c:	429a      	cmp	r2, r3
 800430e:	d10a      	bne.n	8004326 <LCD_ShowChar+0x162>
			{
				y=y0;
 8004310:	897b      	ldrh	r3, [r7, #10]
 8004312:	80bb      	strh	r3, [r7, #4]
				x++;
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	3301      	adds	r3, #1
 8004318:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 800431a:	4b16      	ldr	r3, [pc, #88]	; (8004374 <LCD_ShowChar+0x1b0>)
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	88fa      	ldrh	r2, [r7, #6]
 8004320:	429a      	cmp	r2, r3
 8004322:	d307      	bcc.n	8004334 <LCD_ShowChar+0x170>
 8004324:	e013      	b.n	800434e <LCD_ShowChar+0x18a>
		for(t1=0;t1<8;t1++)
 8004326:	7bbb      	ldrb	r3, [r7, #14]
 8004328:	3301      	adds	r3, #1
 800432a:	73bb      	strb	r3, [r7, #14]
 800432c:	7bbb      	ldrb	r3, [r7, #14]
 800432e:	2b07      	cmp	r3, #7
 8004330:	d9c6      	bls.n	80042c0 <LCD_ShowChar+0xfc>
 8004332:	e000      	b.n	8004336 <LCD_ShowChar+0x172>
				break;
 8004334:	bf00      	nop
	for(t=0;t<csize;t++)
 8004336:	7b7b      	ldrb	r3, [r7, #13]
 8004338:	3301      	adds	r3, #1
 800433a:	737b      	strb	r3, [r7, #13]
 800433c:	7b7a      	ldrb	r2, [r7, #13]
 800433e:	7a7b      	ldrb	r3, [r7, #9]
 8004340:	429a      	cmp	r2, r3
 8004342:	f4ff af6b 	bcc.w	800421c <LCD_ShowChar+0x58>
 8004346:	e002      	b.n	800434e <LCD_ShowChar+0x18a>
		else return;								//没有的字库
 8004348:	bf00      	nop
 800434a:	e000      	b.n	800434e <LCD_ShowChar+0x18a>
			if(y>=lcddev.height)return;		//超区域了
 800434c:	bf00      	nop
			}
		}
	}
}
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	bd90      	pop	{r4, r7, pc}
 8004354:	0800d75c 	.word	0x0800d75c
 8004358:	0800dbd0 	.word	0x0800dbd0
 800435c:	0800e1c0 	.word	0x0800e1c0
 8004360:	0800ef1c 	.word	0x0800ef1c
 8004364:	080106dc 	.word	0x080106dc
 8004368:	08014534 	.word	0x08014534
 800436c:	20000000 	.word	0x20000000
 8004370:	20000004 	.word	0x20000004
 8004374:	20000314 	.word	0x20000314

08004378 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b087      	sub	sp, #28
 800437c:	af02      	add	r7, sp, #8
 800437e:	4604      	mov	r4, r0
 8004380:	4608      	mov	r0, r1
 8004382:	4611      	mov	r1, r2
 8004384:	461a      	mov	r2, r3
 8004386:	4623      	mov	r3, r4
 8004388:	80fb      	strh	r3, [r7, #6]
 800438a:	4603      	mov	r3, r0
 800438c:	80bb      	strh	r3, [r7, #4]
 800438e:	460b      	mov	r3, r1
 8004390:	807b      	strh	r3, [r7, #2]
 8004392:	4613      	mov	r3, r2
 8004394:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	73fb      	strb	r3, [r7, #15]
	width+=x;
 800439a:	887a      	ldrh	r2, [r7, #2]
 800439c:	88fb      	ldrh	r3, [r7, #6]
 800439e:	4413      	add	r3, r2
 80043a0:	807b      	strh	r3, [r7, #2]
	height+=y;
 80043a2:	883a      	ldrh	r2, [r7, #0]
 80043a4:	88bb      	ldrh	r3, [r7, #4]
 80043a6:	4413      	add	r3, r2
 80043a8:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 80043aa:	e024      	b.n	80043f6 <LCD_ShowString+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 80043ac:	88fa      	ldrh	r2, [r7, #6]
 80043ae:	887b      	ldrh	r3, [r7, #2]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d307      	bcc.n	80043c4 <LCD_ShowString+0x4c>
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	80fb      	strh	r3, [r7, #6]
 80043b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043bc:	b29a      	uxth	r2, r3
 80043be:	88bb      	ldrh	r3, [r7, #4]
 80043c0:	4413      	add	r3, r2
 80043c2:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 80043c4:	88ba      	ldrh	r2, [r7, #4]
 80043c6:	883b      	ldrh	r3, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d21d      	bcs.n	8004408 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	781a      	ldrb	r2, [r3, #0]
 80043d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043d4:	88b9      	ldrh	r1, [r7, #4]
 80043d6:	88f8      	ldrh	r0, [r7, #6]
 80043d8:	2400      	movs	r4, #0
 80043da:	9400      	str	r4, [sp, #0]
 80043dc:	f7ff fef2 	bl	80041c4 <LCD_ShowChar>
        x+=size/2;
 80043e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043e4:	085b      	lsrs	r3, r3, #1
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	4413      	add	r3, r2
 80043ee:	80fb      	strh	r3, [r7, #6]
        p++;
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	3301      	adds	r3, #1
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b7e      	cmp	r3, #126	; 0x7e
 80043fc:	d805      	bhi.n	800440a <LCD_ShowString+0x92>
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b1f      	cmp	r3, #31
 8004404:	d8d2      	bhi.n	80043ac <LCD_ShowString+0x34>
    }
}
 8004406:	e000      	b.n	800440a <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 8004408:	bf00      	nop
}
 800440a:	bf00      	nop
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	bd90      	pop	{r4, r7, pc}
	...

08004414 <PCA9685_SetBit>:
#include "math.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af04      	add	r7, sp, #16
 800441a:	4603      	mov	r3, r0
 800441c:	71fb      	strb	r3, [r7, #7]
 800441e:	460b      	mov	r3, r1
 8004420:	71bb      	strb	r3, [r7, #6]
 8004422:	4613      	mov	r3, r2
 8004424:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 8004426:	797b      	ldrb	r3, [r7, #5]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <PCA9685_SetBit+0x1c>
 800442c:	2301      	movs	r3, #1
 800442e:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8004430:	4b24      	ldr	r3, [pc, #144]	; (80044c4 <PCA9685_SetBit+0xb0>)
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	b29a      	uxth	r2, r3
 8004438:	230a      	movs	r3, #10
 800443a:	9302      	str	r3, [sp, #8]
 800443c:	2301      	movs	r3, #1
 800443e:	9301      	str	r3, [sp, #4]
 8004440:	f107 030f 	add.w	r3, r7, #15
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	2301      	movs	r3, #1
 8004448:	2180      	movs	r1, #128	; 0x80
 800444a:	f003 f93d 	bl	80076c8 <HAL_I2C_Mem_Read>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e031      	b.n	80044bc <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 8004458:	79bb      	ldrb	r3, [r7, #6]
 800445a:	2201      	movs	r2, #1
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	b25b      	sxtb	r3, r3
 8004462:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004466:	b25b      	sxtb	r3, r3
 8004468:	43db      	mvns	r3, r3
 800446a:	b25a      	sxtb	r2, r3
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	b25b      	sxtb	r3, r3
 8004470:	4013      	ands	r3, r2
 8004472:	b25b      	sxtb	r3, r3
 8004474:	b2db      	uxtb	r3, r3
 8004476:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 8004478:	797b      	ldrb	r3, [r7, #5]
 800447a:	f003 0201 	and.w	r2, r3, #1
 800447e:	79bb      	ldrb	r3, [r7, #6]
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	b25a      	sxtb	r2, r3
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	b25b      	sxtb	r3, r3
 800448a:	4313      	orrs	r3, r2
 800448c:	b25b      	sxtb	r3, r3
 800448e:	b2db      	uxtb	r3, r3
 8004490:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8004492:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <PCA9685_SetBit+0xb0>)
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	b29a      	uxth	r2, r3
 800449a:	230a      	movs	r3, #10
 800449c:	9302      	str	r3, [sp, #8]
 800449e:	2301      	movs	r3, #1
 80044a0:	9301      	str	r3, [sp, #4]
 80044a2:	f107 030f 	add.w	r3, r7, #15
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	2301      	movs	r3, #1
 80044aa:	2180      	movs	r1, #128	; 0x80
 80044ac:	f003 f812 	bl	80074d4 <HAL_I2C_Mem_Write>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	20000324 	.word	0x20000324

080044c8 <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 80044ce:	2306      	movs	r3, #6
 80044d0:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 80044d2:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <PCA9685_SoftwareReset+0x30>)
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	1dfa      	adds	r2, r7, #7
 80044d8:	230a      	movs	r3, #10
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	2301      	movs	r3, #1
 80044de:	2100      	movs	r1, #0
 80044e0:	f002 fefa 	bl	80072d8 <HAL_I2C_Master_Transmit>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	e000      	b.n	80044f0 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 80044ee:	2301      	movs	r3, #1
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	20000324 	.word	0x20000324

080044fc <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	461a      	mov	r2, r3
 800450a:	2104      	movs	r1, #4
 800450c:	2000      	movs	r0, #0
 800450e:	f7ff ff81 	bl	8004414 <PCA9685_SetBit>
 8004512:	4603      	mov	r3, r0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	461a      	mov	r2, r3
 800452a:	2107      	movs	r1, #7
 800452c:	2000      	movs	r0, #0
 800452e:	f7ff ff71 	bl	8004414 <PCA9685_SetBit>
 8004532:	4603      	mov	r3, r0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	461a      	mov	r2, r3
 800454a:	2105      	movs	r1, #5
 800454c:	2000      	movs	r0, #0
 800454e:	f7ff ff61 	bl	8004414 <PCA9685_SetBit>
 8004552:	4603      	mov	r3, r0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	0000      	movs	r0, r0
	...

08004560 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af04      	add	r7, sp, #16
 8004566:	4603      	mov	r3, r0
 8004568:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 800456a:	88fb      	ldrh	r3, [r7, #6]
 800456c:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8004570:	4293      	cmp	r3, r2
 8004572:	d902      	bls.n	800457a <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8004574:	2303      	movs	r3, #3
 8004576:	72fb      	strb	r3, [r7, #11]
 8004578:	e046      	b.n	8004608 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 800457a:	88fb      	ldrh	r3, [r7, #6]
 800457c:	2b18      	cmp	r3, #24
 800457e:	d802      	bhi.n	8004586 <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8004580:	23ff      	movs	r3, #255	; 0xff
 8004582:	72fb      	strb	r3, [r7, #11]
 8004584:	e040      	b.n	8004608 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004590:	ee17 0a90 	vmov	r0, s15
 8004594:	f7fb ffd8 	bl	8000548 <__aeabi_f2d>
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	4b2a      	ldr	r3, [pc, #168]	; (8004648 <PCA9685_SetPwmFrequency+0xe8>)
 800459e:	f7fc f82b 	bl	80005f8 <__aeabi_dmul>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	a126      	add	r1, pc, #152	; (adr r1, 8004640 <PCA9685_SetPwmFrequency+0xe0>)
 80045a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045ac:	f7fc f94e 	bl	800084c <__aeabi_ddiv>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4610      	mov	r0, r2
 80045b6:	4619      	mov	r1, r3
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	4b23      	ldr	r3, [pc, #140]	; (800464c <PCA9685_SetPwmFrequency+0xec>)
 80045be:	f7fb fe63 	bl	8000288 <__aeabi_dsub>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4610      	mov	r0, r2
 80045c8:	4619      	mov	r1, r3
 80045ca:	f7fc fb0d 	bl	8000be8 <__aeabi_d2f>
 80045ce:	4603      	mov	r3, r0
 80045d0:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f7fb ffb8 	bl	8000548 <__aeabi_f2d>
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	4b1c      	ldr	r3, [pc, #112]	; (8004650 <PCA9685_SetPwmFrequency+0xf0>)
 80045de:	f7fb fe55 	bl	800028c <__adddf3>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	ec43 2b17 	vmov	d7, r2, r3
 80045ea:	eeb0 0a47 	vmov.f32	s0, s14
 80045ee:	eef0 0a67 	vmov.f32	s1, s15
 80045f2:	f008 fedd 	bl	800d3b0 <floor>
 80045f6:	ec53 2b10 	vmov	r2, r3, d0
 80045fa:	4610      	mov	r0, r2
 80045fc:	4619      	mov	r1, r3
 80045fe:	f7fc fad3 	bl	8000ba8 <__aeabi_d2uiz>
 8004602:	4603      	mov	r3, r0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 8004608:	2001      	movs	r0, #1
 800460a:	f7ff ff77 	bl	80044fc <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 800460e:	4b11      	ldr	r3, [pc, #68]	; (8004654 <PCA9685_SetPwmFrequency+0xf4>)
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	230a      	movs	r3, #10
 8004614:	9302      	str	r3, [sp, #8]
 8004616:	2301      	movs	r3, #1
 8004618:	9301      	str	r3, [sp, #4]
 800461a:	f107 030b 	add.w	r3, r7, #11
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	2301      	movs	r3, #1
 8004622:	22fe      	movs	r2, #254	; 0xfe
 8004624:	2180      	movs	r1, #128	; 0x80
 8004626:	f002 ff55 	bl	80074d4 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 800462a:	2000      	movs	r0, #0
 800462c:	f7ff ff66 	bl	80044fc <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8004630:	2001      	movs	r0, #1
 8004632:	f7ff ff73 	bl	800451c <PCA9685_RestartMode>
	return PCA9685_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	00000000 	.word	0x00000000
 8004644:	4177d784 	.word	0x4177d784
 8004648:	40b00000 	.word	0x40b00000
 800464c:	3ff00000 	.word	0x3ff00000
 8004650:	3fe00000 	.word	0x3fe00000
 8004654:	20000324 	.word	0x20000324

08004658 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af04      	add	r7, sp, #16
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]
 8004662:	460b      	mov	r3, r1
 8004664:	80bb      	strh	r3, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	b2db      	uxtb	r3, r3
 8004670:	3306      	adds	r3, #6
 8004672:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 8004674:	88bb      	ldrh	r3, [r7, #4]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 800467a:	88bb      	ldrh	r3, [r7, #4]
 800467c:	0a1b      	lsrs	r3, r3, #8
 800467e:	b29b      	uxth	r3, r3
 8004680:	b2db      	uxtb	r3, r3
 8004682:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8004684:	887b      	ldrh	r3, [r7, #2]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 800468a:	887b      	ldrh	r3, [r7, #2]
 800468c:	0a1b      	lsrs	r3, r3, #8
 800468e:	b29b      	uxth	r3, r3
 8004690:	b2db      	uxtb	r3, r3
 8004692:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 8004694:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <PCA9685_SetPwm+0x70>)
 8004696:	6818      	ldr	r0, [r3, #0]
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	b29a      	uxth	r2, r3
 800469c:	230a      	movs	r3, #10
 800469e:	9302      	str	r3, [sp, #8]
 80046a0:	2304      	movs	r3, #4
 80046a2:	9301      	str	r3, [sp, #4]
 80046a4:	f107 0308 	add.w	r3, r7, #8
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	2301      	movs	r3, #1
 80046ac:	2180      	movs	r1, #128	; 0x80
 80046ae:	f002 ff11 	bl	80074d4 <HAL_I2C_Mem_Write>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000324 	.word	0x20000324

080046cc <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	71fb      	strb	r3, [r7, #7]
 80046d6:	460b      	mov	r3, r1
 80046d8:	80bb      	strh	r3, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 80046de:	88bb      	ldrh	r3, [r7, #4]
 80046e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e4:	d302      	bcc.n	80046ec <PCA9685_SetPin+0x20>
 80046e6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80046ea:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 80046ec:	79bb      	ldrb	r3, [r7, #6]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d025      	beq.n	800473e <PCA9685_SetPin+0x72>
    if (Value == 0) {
 80046f2:	88bb      	ldrh	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d108      	bne.n	800470a <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 80046f8:	79fb      	ldrb	r3, [r7, #7]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff ffa9 	bl	8004658 <PCA9685_SetPwm>
 8004706:	4603      	mov	r3, r0
 8004708:	e03a      	b.n	8004780 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 800470a:	88bb      	ldrh	r3, [r7, #4]
 800470c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004710:	4293      	cmp	r3, r2
 8004712:	d108      	bne.n	8004726 <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800471a:	2100      	movs	r1, #0
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff ff9b 	bl	8004658 <PCA9685_SetPwm>
 8004722:	4603      	mov	r3, r0
 8004724:	e02c      	b.n	8004780 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8004726:	88bb      	ldrh	r3, [r7, #4]
 8004728:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800472c:	330f      	adds	r3, #15
 800472e:	b29a      	uxth	r2, r3
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	2100      	movs	r1, #0
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff ff8f 	bl	8004658 <PCA9685_SetPwm>
 800473a:	4603      	mov	r3, r0
 800473c:	e020      	b.n	8004780 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 800473e:	88bb      	ldrh	r3, [r7, #4]
 8004740:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004744:	4293      	cmp	r3, r2
 8004746:	d108      	bne.n	800475a <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	2200      	movs	r2, #0
 800474c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff ff81 	bl	8004658 <PCA9685_SetPwm>
 8004756:	4603      	mov	r3, r0
 8004758:	e012      	b.n	8004780 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 800475a:	88bb      	ldrh	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d108      	bne.n	8004772 <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004766:	2100      	movs	r1, #0
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff ff75 	bl	8004658 <PCA9685_SetPwm>
 800476e:	4603      	mov	r3, r0
 8004770:	e006      	b.n	8004780 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 8004772:	88ba      	ldrh	r2, [r7, #4]
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	2100      	movs	r1, #0
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff ff6d 	bl	8004658 <PCA9685_SetPwm>
 800477e:	4603      	mov	r3, r0
    }
  }
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	ed87 0a00 	vstr	s0, [r7]
 8004794:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 8004796:	edd7 7a00 	vldr	s15, [r7]
 800479a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800479e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a2:	d502      	bpl.n	80047aa <PCA9685_SetServoAngle+0x22>
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 80047aa:	edd7 7a00 	vldr	s15, [r7]
 80047ae:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004830 <PCA9685_SetServoAngle+0xa8>
 80047b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ba:	dd01      	ble.n	80047c0 <PCA9685_SetServoAngle+0x38>
 80047bc:	4b1d      	ldr	r3, [pc, #116]	; (8004834 <PCA9685_SetServoAngle+0xac>)
 80047be:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 80047c0:	6838      	ldr	r0, [r7, #0]
 80047c2:	f7fb fec1 	bl	8000548 <__aeabi_f2d>
 80047c6:	a318      	add	r3, pc, #96	; (adr r3, 8004828 <PCA9685_SetServoAngle+0xa0>)
 80047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047cc:	f7fb ff14 	bl	80005f8 <__aeabi_dmul>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	4b16      	ldr	r3, [pc, #88]	; (8004838 <PCA9685_SetServoAngle+0xb0>)
 80047de:	f7fc f835 	bl	800084c <__aeabi_ddiv>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4610      	mov	r0, r2
 80047e8:	4619      	mov	r1, r3
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	4b13      	ldr	r3, [pc, #76]	; (800483c <PCA9685_SetServoAngle+0xb4>)
 80047f0:	f7fb fd4c 	bl	800028c <__adddf3>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4610      	mov	r0, r2
 80047fa:	4619      	mov	r1, r3
 80047fc:	f7fc f9f4 	bl	8000be8 <__aeabi_d2f>
 8004800:	4603      	mov	r3, r0
 8004802:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8004804:	edd7 7a03 	vldr	s15, [r7, #12]
 8004808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800480c:	ee17 3a90 	vmov	r3, s15
 8004810:	b299      	uxth	r1, r3
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	2200      	movs	r2, #0
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff ff58 	bl	80046cc <PCA9685_SetPin>
 800481c:	4603      	mov	r3, r0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	00000000 	.word	0x00000000
 800482c:	40786000 	.word	0x40786000
 8004830:	43340000 	.word	0x43340000
 8004834:	43340000 	.word	0x43340000
 8004838:	40668000 	.word	0x40668000
 800483c:	405b8000 	.word	0x405b8000

08004840 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8004848:	4a07      	ldr	r2, [pc, #28]	; (8004868 <PCA9685_Init+0x28>)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 800484e:	f7ff fe3b 	bl	80044c8 <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 8004852:	2030      	movs	r0, #48	; 0x30
 8004854:	f7ff fe84 	bl	8004560 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8004858:	2001      	movs	r0, #1
 800485a:	f7ff fe6f 	bl	800453c <PCA9685_AutoIncrement>

	return PCA9685_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000324 	.word	0x20000324

0800486c <PID_Init>:
/*
 * 使用串级PID算法，外环PID为位置环，其输出为速度期望；内环PID为速度环，其输出为角度期望，直接控制舵机角度
 */

//坐标PID初始化
void PID_Init(PID *pid) {
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	printf("PID Init begin\r\n");
 8004874:	481d      	ldr	r0, [pc, #116]	; (80048ec <PID_Init+0x80>)
 8004876:	f006 fb67 	bl	800af48 <puts>
	pid->SetPosi = 40;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2228      	movs	r2, #40	; 0x28
 800487e:	801a      	strh	r2, [r3, #0]
	pid->ActualPosi = 0;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	805a      	strh	r2, [r3, #2]
	pid->errorPosi[0] = 0;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	809a      	strh	r2, [r3, #4]
	pid->errorPosi[1] = 0;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	80da      	strh	r2, [r3, #6]
	pid->errorSpeed[0] = 0;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	811a      	strh	r2, [r3, #8]
	pid->errorSpeed[1] = 0;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	815a      	strh	r2, [r3, #10]
	pid->errorSpeed[2] = 0;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	819a      	strh	r2, [r3, #12]
	pid->Speed = 0;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28
	pid->angle = 90;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a10      	ldr	r2, [pc, #64]	; (80048f0 <PID_Init+0x84>)
 80048b0:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->integral = 0;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30

	pid->PKp = 32.5;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a0d      	ldr	r2, [pc, #52]	; (80048f4 <PID_Init+0x88>)
 80048be:	611a      	str	r2, [r3, #16]
	pid->PKi = 0.5;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80048c6:	615a      	str	r2, [r3, #20]
	pid->PKd = 70.0;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a0b      	ldr	r2, [pc, #44]	; (80048f8 <PID_Init+0x8c>)
 80048cc:	619a      	str	r2, [r3, #24]
	pid->SKp = 32.5;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a08      	ldr	r2, [pc, #32]	; (80048f4 <PID_Init+0x88>)
 80048d2:	61da      	str	r2, [r3, #28]
	pid->SKi = 0.5;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80048da:	621a      	str	r2, [r3, #32]
	pid->SKd = 70.0;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a06      	ldr	r2, [pc, #24]	; (80048f8 <PID_Init+0x8c>)
 80048e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80048e2:	bf00      	nop
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	0800d530 	.word	0x0800d530
 80048f0:	42b40000 	.word	0x42b40000
 80048f4:	42020000 	.word	0x42020000
 80048f8:	428c0000 	.word	0x428c0000

080048fc <PID_Calc>:

//坐标PID调节函数(X轴)
uint16_t PID_Calc(PID *pid, uint16_t Posi, float Speed) {
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	460b      	mov	r3, r1
 8004906:	ed87 0a01 	vstr	s0, [r7, #4]
 800490a:	817b      	strh	r3, [r7, #10]
	/******************************外环位置式PID(位置环)d************************************/

	pid->ActualPosi = Posi;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	897a      	ldrh	r2, [r7, #10]
 8004910:	805a      	strh	r2, [r3, #2]
	pid->errorPosi[0] = pid->SetPosi - pid->ActualPosi;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	881a      	ldrh	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	885b      	ldrh	r3, [r3, #2]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	b29b      	uxth	r3, r3
 800491e:	b21a      	sxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	809a      	strh	r2, [r3, #4]

	/* 设定闭环死区 */
	if ((pid->errorPosi[0] >= -LOC_DEAD_ZONE)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800492a:	f113 0f03 	cmn.w	r3, #3
 800492e:	db0e      	blt.n	800494e <PID_Calc+0x52>
			&& (pid->errorPosi[0] <= LOC_DEAD_ZONE)) {
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004936:	2b03      	cmp	r3, #3
 8004938:	dc09      	bgt.n	800494e <PID_Calc+0x52>
		pid->errorPosi[0] = 0;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	809a      	strh	r2, [r3, #4]
		pid->integral = 0;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	631a      	str	r2, [r3, #48]	; 0x30
		pid->errorPosi[1] = 0;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	80da      	strh	r2, [r3, #6]
	}

	if (pid->errorPosi[0] >= LOCAL_MAX) {
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004954:	2bc7      	cmp	r3, #199	; 0xc7
 8004956:	dd03      	ble.n	8004960 <PID_Calc+0x64>
		pid->errorPosi[0] = LOCAL_MAX;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	22c8      	movs	r2, #200	; 0xc8
 800495c:	809a      	strh	r2, [r3, #4]
 800495e:	e009      	b.n	8004974 <PID_Calc+0x78>
	} else if (pid->errorPosi[0] <= -LOCAL_MAX) {
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004966:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 800496a:	da03      	bge.n	8004974 <PID_Calc+0x78>
		pid->errorPosi[0] = -LOCAL_MAX;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f64f 7238 	movw	r2, #65336	; 0xff38
 8004972:	809a      	strh	r2, [r3, #4]
	}

	pid->integral += pid->errorPosi[0];
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	//位置式PID算法核心函数
	pid->Speed = pid->PKp * pid->errorPosi[0] + pid->PKi * pid->integral
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	ed93 7a04 	vldr	s14, [r3, #16]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	edd3 6a05 	vldr	s13, [r3, #20]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80049b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049ba:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ pid->PKd * (pid->errorPosi[0] - pid->errorPosi[1]);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	edd3 6a06 	vldr	s13, [r3, #24]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80049ca:	461a      	mov	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	ee07 3a90 	vmov	s15, r3
 80049d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049e0:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid->Speed = pid->PKp * pid->errorPosi[0] + pid->PKi * pid->integral
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
//	printf("比例%hu\r\n积分%hu\r\n微分%hu\r\n输出为%hu\r\n", (unsigned short int)pid->err, (unsigned short int)pid->integral,
//			(unsigned short int)(pid->err - pid->err_last), (unsigned short int)pid->ActualPosi);
	pid->errorPosi[1] = pid->errorPosi[0];
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	80da      	strh	r2, [r3, #6]

	/*********************************************************************************/

	/******************************内环增量式PID(速度环)d************************************/

	pid->errorSpeed[0] = pid->Speed - Speed;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80049fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80049fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a06:	ee17 3a90 	vmov	r3, s15
 8004a0a:	b21a      	sxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	811a      	strh	r2, [r3, #8]
	//增量式PID核心算法
	pid->angle += pid->SKp * (pid->errorSpeed[0] - pid->errorSpeed[1])
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	edd3 6a07 	vldr	s13, [r3, #28]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a22:	461a      	mov	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	ee07 3a90 	vmov	s15, r3
 8004a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a34:	ee66 6aa7 	vmul.f32	s13, s13, s15
			+ pid->SKi * pid->errorSpeed[0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	ed93 6a08 	vldr	s12, [r3, #32]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a44:	ee07 3a90 	vmov	s15, r3
 8004a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a4c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004a50:	ee76 6aa7 	vadd.f32	s13, s13, s15
			+ pid->SKd
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
					* (pid->errorSpeed[0] - 2 * pid->errorSpeed[1]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a60:	461a      	mov	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	1ad3      	subs	r3, r2, r3
							+ pid->errorSpeed[2]);
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8004a72:	4413      	add	r3, r2
					* (pid->errorSpeed[0] - 2 * pid->errorSpeed[1]
 8004a74:	ee07 3a90 	vmov	s15, r3
 8004a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a7c:	ee66 7a27 	vmul.f32	s15, s12, s15
			+ pid->SKd
 8004a80:	ee76 7aa7 	vadd.f32	s15, s13, s15
	pid->angle += pid->SKp * (pid->errorSpeed[0] - pid->errorSpeed[1])
 8004a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	if (pid->angle >= ANGLE_MAX) {
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004a94:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004ae0 <PID_Calc+0x1e4>
 8004a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa0:	db03      	blt.n	8004aaa <PID_Calc+0x1ae>
		pid->angle = ANGLE_MAX;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4a0f      	ldr	r2, [pc, #60]	; (8004ae4 <PID_Calc+0x1e8>)
 8004aa6:	62da      	str	r2, [r3, #44]	; 0x2c
 8004aa8:	e00b      	b.n	8004ac2 <PID_Calc+0x1c6>
	} else if (pid->angle <= ANGLE_MIN) {
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004ab0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab8:	d803      	bhi.n	8004ac2 <PID_Calc+0x1c6>
		pid->angle = ANGLE_MIN;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	return pid->angle;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004acc:	ee17 3a90 	vmov	r3, s15
 8004ad0:	b29b      	uxth	r3, r3

	/****************************************************************************************/
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	43340000 	.word	0x43340000
 8004ae4:	43340000 	.word	0x43340000

08004ae8 <ChaSetPosi>:


//改变设定值
void ChaSetPosi(PID *pid, uint16_t setPosi) {
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	807b      	strh	r3, [r7, #2]
	pid->SetPosi = setPosi;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	887a      	ldrh	r2, [r7, #2]
 8004af8:	801a      	strh	r2, [r3, #0]
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <ballSpeed>:
PID pid_X, pid_Y;  //PID结构体,分别表示X,Y坐标

uint8_t Mode[6] = { 0 };

//计算小球速度
float ballSpeed(uint16_t *coordinate_XY, uint8_t len) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
	float distanceX, distanceY;
	uint8_t j = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	75fb      	strb	r3, [r7, #23]
	j = (i - 10) ? (i >= 10) : (i - 10 + len);
 8004b18:	4b3f      	ldr	r3, [pc, #252]	; (8004c18 <ballSpeed+0x110>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b0a      	cmp	r3, #10
 8004b1e:	d007      	beq.n	8004b30 <ballSpeed+0x28>
 8004b20:	4b3d      	ldr	r3, [pc, #244]	; (8004c18 <ballSpeed+0x110>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b09      	cmp	r3, #9
 8004b26:	bf8c      	ite	hi
 8004b28:	2301      	movhi	r3, #1
 8004b2a:	2300      	movls	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e006      	b.n	8004b3e <ballSpeed+0x36>
 8004b30:	4b39      	ldr	r3, [pc, #228]	; (8004c18 <ballSpeed+0x110>)
 8004b32:	781a      	ldrb	r2, [r3, #0]
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	4413      	add	r3, r2
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	3b0a      	subs	r3, #10
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	75fb      	strb	r3, [r7, #23]
	distanceX = *(coordinate_XY + 2 * i + 0) - *(coordinate_XY + 2 * j + 0);
 8004b40:	4b35      	ldr	r3, [pc, #212]	; (8004c18 <ballSpeed+0x110>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	4413      	add	r3, r2
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	7dfb      	ldrb	r3, [r7, #23]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	4413      	add	r3, r2
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	1acb      	subs	r3, r1, r3
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b62:	edc7 7a04 	vstr	s15, [r7, #16]
	distanceY = *(coordinate_XY + 2 * i + 1) - *(coordinate_XY + 2 * j + 1);
 8004b66:	4b2c      	ldr	r3, [pc, #176]	; (8004c18 <ballSpeed+0x110>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	3302      	adds	r3, #2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	4413      	add	r3, r2
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	4619      	mov	r1, r3
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	3302      	adds	r3, #2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	4413      	add	r3, r2
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	1acb      	subs	r3, r1, r3
 8004b84:	ee07 3a90 	vmov	s15, r3
 8004b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b8c:	edc7 7a03 	vstr	s15, [r7, #12]
	distance = sqrtf(distanceX * distanceX + distanceY * distanceY);
 8004b90:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b94:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004b98:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ba8:	f008 fc82 	bl	800d4b0 <sqrtf>
 8004bac:	eef0 7a40 	vmov.f32	s15, s0
 8004bb0:	4b1a      	ldr	r3, [pc, #104]	; (8004c1c <ballSpeed+0x114>)
 8004bb2:	edc3 7a00 	vstr	s15, [r3]

	speedX = distanceX * FRAME / 10;
 8004bb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bba:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004c20 <ballSpeed+0x118>
 8004bbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004bc2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004bc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bca:	4b16      	ldr	r3, [pc, #88]	; (8004c24 <ballSpeed+0x11c>)
 8004bcc:	edc3 7a00 	vstr	s15, [r3]
	speedY = distanceY * FRAME / 10;
 8004bd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bd4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004c20 <ballSpeed+0x118>
 8004bd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004bdc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004be0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004be4:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <ballSpeed+0x120>)
 8004be6:	edc3 7a00 	vstr	s15, [r3]
	speed = distance * FRAME / 10;
 8004bea:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <ballSpeed+0x114>)
 8004bec:	edd3 7a00 	vldr	s15, [r3]
 8004bf0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8004c20 <ballSpeed+0x118>
 8004bf4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004bf8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <ballSpeed+0x124>)
 8004c02:	edc3 7a00 	vstr	s15, [r3]
	return distance;
 8004c06:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <ballSpeed+0x114>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	ee07 3a90 	vmov	s15, r3
}
 8004c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	200002a8 	.word	0x200002a8
 8004c1c:	20000364 	.word	0x20000364
 8004c20:	42480000 	.word	0x42480000
 8004c24:	20000360 	.word	0x20000360
 8004c28:	20000408 	.word	0x20000408
 8004c2c:	20000368 	.word	0x20000368

08004c30 <GetSetPosi>:

//确定9个位置坐标
void GetSetPosi(uint16_t *SetPosi, uint8_t number) {
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	70fb      	strb	r3, [r7, #3]
	switch (number) {
 8004c3c:	78fb      	ldrb	r3, [r7, #3]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d863      	bhi.n	8004d0c <GetSetPosi+0xdc>
 8004c44:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <GetSetPosi+0x1c>)
 8004c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4a:	bf00      	nop
 8004c4c:	08004c71 	.word	0x08004c71
 8004c50:	08004c81 	.word	0x08004c81
 8004c54:	08004c91 	.word	0x08004c91
 8004c58:	08004ca3 	.word	0x08004ca3
 8004c5c:	08004cb3 	.word	0x08004cb3
 8004c60:	08004cc3 	.word	0x08004cc3
 8004c64:	08004cd5 	.word	0x08004cd5
 8004c68:	08004ce7 	.word	0x08004ce7
 8004c6c:	08004cf9 	.word	0x08004cf9
	case 1:
		SetPosi[0] = 80;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2250      	movs	r2, #80	; 0x50
 8004c74:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 80;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3302      	adds	r3, #2
 8004c7a:	2250      	movs	r2, #80	; 0x50
 8004c7c:	801a      	strh	r2, [r3, #0]
		break;
 8004c7e:	e045      	b.n	8004d0c <GetSetPosi+0xdc>
	case 2:
		SetPosi[0] = 200;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	22c8      	movs	r2, #200	; 0xc8
 8004c84:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 80;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3302      	adds	r3, #2
 8004c8a:	2250      	movs	r2, #80	; 0x50
 8004c8c:	801a      	strh	r2, [r3, #0]
		break;
 8004c8e:	e03d      	b.n	8004d0c <GetSetPosi+0xdc>
	case 3:
		SetPosi[0] = 320;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004c96:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 80;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3302      	adds	r3, #2
 8004c9c:	2250      	movs	r2, #80	; 0x50
 8004c9e:	801a      	strh	r2, [r3, #0]
		break;
 8004ca0:	e034      	b.n	8004d0c <GetSetPosi+0xdc>
	case 4:
		SetPosi[0] = 80;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2250      	movs	r2, #80	; 0x50
 8004ca6:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 200;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3302      	adds	r3, #2
 8004cac:	22c8      	movs	r2, #200	; 0xc8
 8004cae:	801a      	strh	r2, [r3, #0]
		break;
 8004cb0:	e02c      	b.n	8004d0c <GetSetPosi+0xdc>
	case 5:
		SetPosi[0] = 200;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	22c8      	movs	r2, #200	; 0xc8
 8004cb6:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 200;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3302      	adds	r3, #2
 8004cbc:	22c8      	movs	r2, #200	; 0xc8
 8004cbe:	801a      	strh	r2, [r3, #0]
		break;
 8004cc0:	e024      	b.n	8004d0c <GetSetPosi+0xdc>
	case 6:
		SetPosi[0] = 320;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004cc8:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 200;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	3302      	adds	r3, #2
 8004cce:	22c8      	movs	r2, #200	; 0xc8
 8004cd0:	801a      	strh	r2, [r3, #0]
		break;
 8004cd2:	e01b      	b.n	8004d0c <GetSetPosi+0xdc>
	case 7:
		SetPosi[0] = 80;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2250      	movs	r2, #80	; 0x50
 8004cd8:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 320;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3302      	adds	r3, #2
 8004cde:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004ce2:	801a      	strh	r2, [r3, #0]
		break;
 8004ce4:	e012      	b.n	8004d0c <GetSetPosi+0xdc>
	case 8:
		SetPosi[0] = 200;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	22c8      	movs	r2, #200	; 0xc8
 8004cea:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 320;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3302      	adds	r3, #2
 8004cf0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004cf4:	801a      	strh	r2, [r3, #0]
		break;
 8004cf6:	e009      	b.n	8004d0c <GetSetPosi+0xdc>
	case 9:
		SetPosi[0] = 320;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004cfe:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 320;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3302      	adds	r3, #2
 8004d04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d08:	801a      	strh	r2, [r3, #0]
		break;
 8004d0a:	bf00      	nop
	}
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <ShowString>:

//LCD显示函数
void ShowString() {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	; 0x28
 8004d1c:	af02      	add	r7, sp, #8
	uint8_t Buffer[32]; //输出文本暂存区
	LCD_ShowString(30, 30, 400, 48, 48, (uint8_t*) "STM32F407");
 8004d1e:	4b46      	ldr	r3, [pc, #280]	; (8004e38 <ShowString+0x120>)
 8004d20:	9301      	str	r3, [sp, #4]
 8004d22:	2330      	movs	r3, #48	; 0x30
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	2330      	movs	r3, #48	; 0x30
 8004d28:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004d2c:	211e      	movs	r1, #30
 8004d2e:	201e      	movs	r0, #30
 8004d30:	f7ff fb22 	bl	8004378 <LCD_ShowString>
//	LCD_ShowString(30, 100, 400, 32, 32, Buffer);
//	sprintf((char*) Buffer, "KalmanAngleY:%7.2f", MPU6050.KalmanAngleY);
//	LCD_ShowString(30, 150, 400, 32, 32, Buffer);

	//LCD输出设定球坐标
	sprintf((char*) Buffer, "Actual_XY:(%4d, %4d)", SetPosi[0], SetPosi[1]);
 8004d34:	4b41      	ldr	r3, [pc, #260]	; (8004e3c <ShowString+0x124>)
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4b40      	ldr	r3, [pc, #256]	; (8004e3c <ShowString+0x124>)
 8004d3c:	885b      	ldrh	r3, [r3, #2]
 8004d3e:	4638      	mov	r0, r7
 8004d40:	493f      	ldr	r1, [pc, #252]	; (8004e40 <ShowString+0x128>)
 8004d42:	f006 f909 	bl	800af58 <siprintf>
	LCD_ShowString(30, 100, 400, 32, 32, Buffer);
 8004d46:	463b      	mov	r3, r7
 8004d48:	9301      	str	r3, [sp, #4]
 8004d4a:	2320      	movs	r3, #32
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	2320      	movs	r3, #32
 8004d50:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004d54:	2164      	movs	r1, #100	; 0x64
 8004d56:	201e      	movs	r0, #30
 8004d58:	f7ff fb0e 	bl	8004378 <LCD_ShowString>
	//LCD输出当前球坐标，若球的位置达到要求，则输出黑色文字，否则输出红色文字
	if (distance <= 30) {
 8004d5c:	4b39      	ldr	r3, [pc, #228]	; (8004e44 <ShowString+0x12c>)
 8004d5e:	edd3 7a00 	vldr	s15, [r3]
 8004d62:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d6e:	d804      	bhi.n	8004d7a <ShowString+0x62>
		POINT_COLOR = RED;
 8004d70:	4b35      	ldr	r3, [pc, #212]	; (8004e48 <ShowString+0x130>)
 8004d72:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	e002      	b.n	8004d80 <ShowString+0x68>
	} else {
		POINT_COLOR = BLACK;
 8004d7a:	4b33      	ldr	r3, [pc, #204]	; (8004e48 <ShowString+0x130>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
	}
	sprintf((char*) Buffer, "SET_XY   :(%4d, %4d)", coordinate_XY[i][0],
 8004d80:	4b32      	ldr	r3, [pc, #200]	; (8004e4c <ShowString+0x134>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	4b32      	ldr	r3, [pc, #200]	; (8004e50 <ShowString+0x138>)
 8004d88:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8004d8c:	4619      	mov	r1, r3
			coordinate_XY[i][1]);
 8004d8e:	4b2f      	ldr	r3, [pc, #188]	; (8004e4c <ShowString+0x134>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	4a2f      	ldr	r2, [pc, #188]	; (8004e50 <ShowString+0x138>)
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	885b      	ldrh	r3, [r3, #2]
	sprintf((char*) Buffer, "SET_XY   :(%4d, %4d)", coordinate_XY[i][0],
 8004d9a:	4638      	mov	r0, r7
 8004d9c:	460a      	mov	r2, r1
 8004d9e:	492d      	ldr	r1, [pc, #180]	; (8004e54 <ShowString+0x13c>)
 8004da0:	f006 f8da 	bl	800af58 <siprintf>
	LCD_ShowString(30, 150, 400, 32, 32, Buffer);
 8004da4:	463b      	mov	r3, r7
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	2320      	movs	r3, #32
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	2320      	movs	r3, #32
 8004dae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004db2:	2196      	movs	r1, #150	; 0x96
 8004db4:	201e      	movs	r0, #30
 8004db6:	f7ff fadf 	bl	8004378 <LCD_ShowString>
	POINT_COLOR = BLACK;
 8004dba:	4b23      	ldr	r3, [pc, #140]	; (8004e48 <ShowString+0x130>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]

	//LCD输出舵机当前角度
	sprintf((char*) Buffer, "Angle_X:%6.2f", pid_X.angle);
 8004dc0:	4b25      	ldr	r3, [pc, #148]	; (8004e58 <ShowString+0x140>)
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fb fbbf 	bl	8000548 <__aeabi_f2d>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4638      	mov	r0, r7
 8004dd0:	4922      	ldr	r1, [pc, #136]	; (8004e5c <ShowString+0x144>)
 8004dd2:	f006 f8c1 	bl	800af58 <siprintf>
	LCD_ShowString(30, 200, 400, 32, 32, Buffer);
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	2320      	movs	r3, #32
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	2320      	movs	r3, #32
 8004de0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004de4:	21c8      	movs	r1, #200	; 0xc8
 8004de6:	201e      	movs	r0, #30
 8004de8:	f7ff fac6 	bl	8004378 <LCD_ShowString>
	sprintf((char*) Buffer, "Angle_Y:%6.2f", pid_Y.angle);
 8004dec:	4b1c      	ldr	r3, [pc, #112]	; (8004e60 <ShowString+0x148>)
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7fb fba9 	bl	8000548 <__aeabi_f2d>
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4638      	mov	r0, r7
 8004dfc:	4919      	ldr	r1, [pc, #100]	; (8004e64 <ShowString+0x14c>)
 8004dfe:	f006 f8ab 	bl	800af58 <siprintf>
	LCD_ShowString(30, 250, 400, 32, 32, Buffer);
 8004e02:	463b      	mov	r3, r7
 8004e04:	9301      	str	r3, [sp, #4]
 8004e06:	2320      	movs	r3, #32
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	2320      	movs	r3, #32
 8004e0c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004e10:	21fa      	movs	r1, #250	; 0xfa
 8004e12:	201e      	movs	r0, #30
 8004e14:	f7ff fab0 	bl	8004378 <LCD_ShowString>

	LCD_ShowString(30, 300, 400, 32, 32, (uint8_t*) "请选择模式");
 8004e18:	4b13      	ldr	r3, [pc, #76]	; (8004e68 <ShowString+0x150>)
 8004e1a:	9301      	str	r3, [sp, #4]
 8004e1c:	2320      	movs	r3, #32
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	2320      	movs	r3, #32
 8004e22:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004e26:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004e2a:	201e      	movs	r0, #30
 8004e2c:	f7ff faa4 	bl	8004378 <LCD_ShowString>
}
 8004e30:	bf00      	nop
 8004e32:	3720      	adds	r7, #32
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	0800d540 	.word	0x0800d540
 8004e3c:	2000035c 	.word	0x2000035c
 8004e40:	0800d54c 	.word	0x0800d54c
 8004e44:	20000364 	.word	0x20000364
 8004e48:	20000000 	.word	0x20000000
 8004e4c:	200002a8 	.word	0x200002a8
 8004e50:	20000228 	.word	0x20000228
 8004e54:	0800d564 	.word	0x0800d564
 8004e58:	2000036c 	.word	0x2000036c
 8004e5c:	0800d57c 	.word	0x0800d57c
 8004e60:	20000328 	.word	0x20000328
 8004e64:	0800d58c 	.word	0x0800d58c
 8004e68:	0800d59c 	.word	0x0800d59c

08004e6c <ModeStable>:

//模式1：稳定模式
void ModeStable(void) {
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
	//确定稳定坐标
	GetSetPosi(SetPosi, Mode[1]);
 8004e70:	4b23      	ldr	r3, [pc, #140]	; (8004f00 <ModeStable+0x94>)
 8004e72:	785b      	ldrb	r3, [r3, #1]
 8004e74:	4619      	mov	r1, r3
 8004e76:	4823      	ldr	r0, [pc, #140]	; (8004f04 <ModeStable+0x98>)
 8004e78:	f7ff feda 	bl	8004c30 <GetSetPosi>
	//将稳定坐标放入PID结构体中
	ChaSetPosi(&pid_X, SetPosi[0]);
 8004e7c:	4b21      	ldr	r3, [pc, #132]	; (8004f04 <ModeStable+0x98>)
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	4619      	mov	r1, r3
 8004e82:	4821      	ldr	r0, [pc, #132]	; (8004f08 <ModeStable+0x9c>)
 8004e84:	f7ff fe30 	bl	8004ae8 <ChaSetPosi>
	ChaSetPosi(&pid_Y, SetPosi[1]);
 8004e88:	4b1e      	ldr	r3, [pc, #120]	; (8004f04 <ModeStable+0x98>)
 8004e8a:	885b      	ldrh	r3, [r3, #2]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	481f      	ldr	r0, [pc, #124]	; (8004f0c <ModeStable+0xa0>)
 8004e90:	f7ff fe2a 	bl	8004ae8 <ChaSetPosi>

	//计算小球速度,同时查看间距
	ballSpeed((uint16_t*) coordinate_XY, 32);
 8004e94:	2120      	movs	r1, #32
 8004e96:	481e      	ldr	r0, [pc, #120]	; (8004f10 <ModeStable+0xa4>)
 8004e98:	f7ff fe36 	bl	8004b08 <ballSpeed>
	//分别使用pid算法调整X,Y的坐标
	//其中0通道控制X轴舵机,1通道控制Y轴舵机
	PID_Calc(&pid_X, coordinate_XY[i][0], speedX);
 8004e9c:	4b1d      	ldr	r3, [pc, #116]	; (8004f14 <ModeStable+0xa8>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	4b1b      	ldr	r3, [pc, #108]	; (8004f10 <ModeStable+0xa4>)
 8004ea4:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8004ea8:	4a1b      	ldr	r2, [pc, #108]	; (8004f18 <ModeStable+0xac>)
 8004eaa:	edd2 7a00 	vldr	s15, [r2]
 8004eae:	eeb0 0a67 	vmov.f32	s0, s15
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4814      	ldr	r0, [pc, #80]	; (8004f08 <ModeStable+0x9c>)
 8004eb6:	f7ff fd21 	bl	80048fc <PID_Calc>
	PID_Calc(&pid_Y, coordinate_XY[i][1], speedY);
 8004eba:	4b16      	ldr	r3, [pc, #88]	; (8004f14 <ModeStable+0xa8>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	4a14      	ldr	r2, [pc, #80]	; (8004f10 <ModeStable+0xa4>)
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	885b      	ldrh	r3, [r3, #2]
 8004ec6:	4a15      	ldr	r2, [pc, #84]	; (8004f1c <ModeStable+0xb0>)
 8004ec8:	edd2 7a00 	vldr	s15, [r2]
 8004ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	480e      	ldr	r0, [pc, #56]	; (8004f0c <ModeStable+0xa0>)
 8004ed4:	f7ff fd12 	bl	80048fc <PID_Calc>
	PCA9685_SetServoAngle(0, pid_X.angle);
 8004ed8:	4b0b      	ldr	r3, [pc, #44]	; (8004f08 <ModeStable+0x9c>)
 8004eda:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004ede:	eeb0 0a67 	vmov.f32	s0, s15
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	f7ff fc50 	bl	8004788 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, pid_Y.angle);
 8004ee8:	4b08      	ldr	r3, [pc, #32]	; (8004f0c <ModeStable+0xa0>)
 8004eea:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004eee:	eeb0 0a67 	vmov.f32	s0, s15
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	f7ff fc48 	bl	8004788 <PCA9685_SetServoAngle>

	//同一使用LCD输出相关信息
	ShowString();
 8004ef8:	f7ff ff0e 	bl	8004d18 <ShowString>
}
 8004efc:	bf00      	nop
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	200002ac 	.word	0x200002ac
 8004f04:	2000035c 	.word	0x2000035c
 8004f08:	2000036c 	.word	0x2000036c
 8004f0c:	20000328 	.word	0x20000328
 8004f10:	20000228 	.word	0x20000228
 8004f14:	200002a8 	.word	0x200002a8
 8004f18:	20000360 	.word	0x20000360
 8004f1c:	20000408 	.word	0x20000408

08004f20 <ModeMove>:

//模式2：移动模式
void ModeMove(void) {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
	uint8_t count = 0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	71fb      	strb	r3, [r7, #7]
	static uint8_t isTim = 0;  //判断是否稳定，是否开始计时，Tim为1即为开始计时
	while (Mode[count] != 0) {
 8004f2a:	e002      	b.n	8004f32 <ModeMove+0x12>
		count++;
 8004f2c:	79fb      	ldrb	r3, [r7, #7]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	71fb      	strb	r3, [r7, #7]
	while (Mode[count] != 0) {
 8004f32:	79fb      	ldrb	r3, [r7, #7]
 8004f34:	4a6d      	ldr	r2, [pc, #436]	; (80050ec <ModeMove+0x1cc>)
 8004f36:	5cd3      	ldrb	r3, [r2, r3]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1f7      	bne.n	8004f2c <ModeMove+0xc>
	}

	for (uint8_t i = 1; i < count;) {
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	71bb      	strb	r3, [r7, #6]
 8004f40:	e0c9      	b.n	80050d6 <ModeMove+0x1b6>

		//确定目的坐标
		GetSetPosi(SetPosi, Mode[i]);
 8004f42:	79bb      	ldrb	r3, [r7, #6]
 8004f44:	4a69      	ldr	r2, [pc, #420]	; (80050ec <ModeMove+0x1cc>)
 8004f46:	5cd3      	ldrb	r3, [r2, r3]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4869      	ldr	r0, [pc, #420]	; (80050f0 <ModeMove+0x1d0>)
 8004f4c:	f7ff fe70 	bl	8004c30 <GetSetPosi>
		ChaSetPosi(&pid_X, SetPosi[0]);
 8004f50:	4b67      	ldr	r3, [pc, #412]	; (80050f0 <ModeMove+0x1d0>)
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	4619      	mov	r1, r3
 8004f56:	4867      	ldr	r0, [pc, #412]	; (80050f4 <ModeMove+0x1d4>)
 8004f58:	f7ff fdc6 	bl	8004ae8 <ChaSetPosi>
		ChaSetPosi(&pid_Y, SetPosi[1]);
 8004f5c:	4b64      	ldr	r3, [pc, #400]	; (80050f0 <ModeMove+0x1d0>)
 8004f5e:	885b      	ldrh	r3, [r3, #2]
 8004f60:	4619      	mov	r1, r3
 8004f62:	4865      	ldr	r0, [pc, #404]	; (80050f8 <ModeMove+0x1d8>)
 8004f64:	f7ff fdc0 	bl	8004ae8 <ChaSetPosi>

		//计算小球速度,同时查看间距
		ballSpeed((uint16_t*) coordinate_XY, 32);
 8004f68:	2120      	movs	r1, #32
 8004f6a:	4864      	ldr	r0, [pc, #400]	; (80050fc <ModeMove+0x1dc>)
 8004f6c:	f7ff fdcc 	bl	8004b08 <ballSpeed>
		//i==1时，需要在初始位置稳定2s以上
		if (i == 1) {
 8004f70:	79bb      	ldrb	r3, [r7, #6]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d13e      	bne.n	8004ff4 <ModeMove+0xd4>
			if (isTim == 0) {
 8004f76:	4b62      	ldr	r3, [pc, #392]	; (8005100 <ModeMove+0x1e0>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d110      	bne.n	8004fa0 <ModeMove+0x80>
				if (distance <= 30) {
 8004f7e:	4b61      	ldr	r3, [pc, #388]	; (8005104 <ModeMove+0x1e4>)
 8004f80:	edd3 7a00 	vldr	s15, [r3]
 8004f84:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f90:	d876      	bhi.n	8005080 <ModeMove+0x160>
					HAL_TIM_Base_Start(&htim2);
 8004f92:	485d      	ldr	r0, [pc, #372]	; (8005108 <ModeMove+0x1e8>)
 8004f94:	f003 fea4 	bl	8008ce0 <HAL_TIM_Base_Start>
					isTim = 1;
 8004f98:	4b59      	ldr	r3, [pc, #356]	; (8005100 <ModeMove+0x1e0>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	701a      	strb	r2, [r3, #0]
 8004f9e:	e06f      	b.n	8005080 <ModeMove+0x160>
				}
			} else {
				if (distance > 30) {
 8004fa0:	4b58      	ldr	r3, [pc, #352]	; (8005104 <ModeMove+0x1e4>)
 8004fa2:	edd3 7a00 	vldr	s15, [r3]
 8004fa6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb2:	dd0a      	ble.n	8004fca <ModeMove+0xaa>
					isTim = 1;
 8004fb4:	4b52      	ldr	r3, [pc, #328]	; (8005100 <ModeMove+0x1e0>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop(&htim2);
 8004fba:	4853      	ldr	r0, [pc, #332]	; (8005108 <ModeMove+0x1e8>)
 8004fbc:	f003 fef8 	bl	8008db0 <HAL_TIM_Base_Stop>
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8004fc0:	4b51      	ldr	r3, [pc, #324]	; (8005108 <ModeMove+0x1e8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	625a      	str	r2, [r3, #36]	; 0x24
 8004fc8:	e05a      	b.n	8005080 <ModeMove+0x160>
				} else if (__HAL_TIM_GET_COUNTER(&htim2) >= 30000) {
 8004fca:	4b4f      	ldr	r3, [pc, #316]	; (8005108 <ModeMove+0x1e8>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	f247 522f 	movw	r2, #29999	; 0x752f
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d953      	bls.n	8005080 <ModeMove+0x160>
					i++;
 8004fd8:	79bb      	ldrb	r3, [r7, #6]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	71bb      	strb	r3, [r7, #6]
					isTim = 1;
 8004fde:	4b48      	ldr	r3, [pc, #288]	; (8005100 <ModeMove+0x1e0>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop(&htim2);
 8004fe4:	4848      	ldr	r0, [pc, #288]	; (8005108 <ModeMove+0x1e8>)
 8004fe6:	f003 fee3 	bl	8008db0 <HAL_TIM_Base_Stop>
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8004fea:	4b47      	ldr	r3, [pc, #284]	; (8005108 <ModeMove+0x1e8>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ff2:	e045      	b.n	8005080 <ModeMove+0x160>
				}
			}
		} else if (i > 1 || i < count - 1) { //中间路径只需稍微停留即可，这里停留0.5s
 8004ff4:	79bb      	ldrb	r3, [r7, #6]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d804      	bhi.n	8005004 <ModeMove+0xe4>
 8004ffa:	79ba      	ldrb	r2, [r7, #6]
 8004ffc:	79fb      	ldrb	r3, [r7, #7]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	429a      	cmp	r2, r3
 8005002:	da3d      	bge.n	8005080 <ModeMove+0x160>
			if (isTim == 0) {
 8005004:	4b3e      	ldr	r3, [pc, #248]	; (8005100 <ModeMove+0x1e0>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d110      	bne.n	800502e <ModeMove+0x10e>
				if (distance <= 30) {
 800500c:	4b3d      	ldr	r3, [pc, #244]	; (8005104 <ModeMove+0x1e4>)
 800500e:	edd3 7a00 	vldr	s15, [r3]
 8005012:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800501a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800501e:	d82f      	bhi.n	8005080 <ModeMove+0x160>
					HAL_TIM_Base_Start(&htim2);
 8005020:	4839      	ldr	r0, [pc, #228]	; (8005108 <ModeMove+0x1e8>)
 8005022:	f003 fe5d 	bl	8008ce0 <HAL_TIM_Base_Start>
					isTim = 1;
 8005026:	4b36      	ldr	r3, [pc, #216]	; (8005100 <ModeMove+0x1e0>)
 8005028:	2201      	movs	r2, #1
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	e028      	b.n	8005080 <ModeMove+0x160>
				}
			} else {
				if (distance > 30) {
 800502e:	4b35      	ldr	r3, [pc, #212]	; (8005104 <ModeMove+0x1e4>)
 8005030:	edd3 7a00 	vldr	s15, [r3]
 8005034:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005038:	eef4 7ac7 	vcmpe.f32	s15, s14
 800503c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005040:	dd0a      	ble.n	8005058 <ModeMove+0x138>
					isTim = 1;
 8005042:	4b2f      	ldr	r3, [pc, #188]	; (8005100 <ModeMove+0x1e0>)
 8005044:	2201      	movs	r2, #1
 8005046:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop(&htim2);
 8005048:	482f      	ldr	r0, [pc, #188]	; (8005108 <ModeMove+0x1e8>)
 800504a:	f003 feb1 	bl	8008db0 <HAL_TIM_Base_Stop>
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 800504e:	4b2e      	ldr	r3, [pc, #184]	; (8005108 <ModeMove+0x1e8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2200      	movs	r2, #0
 8005054:	625a      	str	r2, [r3, #36]	; 0x24
 8005056:	e013      	b.n	8005080 <ModeMove+0x160>
				} else if (__HAL_TIM_GET_COUNTER(&htim2) >= 5000) {
 8005058:	4b2b      	ldr	r3, [pc, #172]	; (8005108 <ModeMove+0x1e8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	f241 3287 	movw	r2, #4999	; 0x1387
 8005062:	4293      	cmp	r3, r2
 8005064:	d90c      	bls.n	8005080 <ModeMove+0x160>
					i++;
 8005066:	79bb      	ldrb	r3, [r7, #6]
 8005068:	3301      	adds	r3, #1
 800506a:	71bb      	strb	r3, [r7, #6]
					isTim = 1;
 800506c:	4b24      	ldr	r3, [pc, #144]	; (8005100 <ModeMove+0x1e0>)
 800506e:	2201      	movs	r2, #1
 8005070:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop(&htim2);
 8005072:	4825      	ldr	r0, [pc, #148]	; (8005108 <ModeMove+0x1e8>)
 8005074:	f003 fe9c 	bl	8008db0 <HAL_TIM_Base_Stop>
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8005078:	4b23      	ldr	r3, [pc, #140]	; (8005108 <ModeMove+0x1e8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2200      	movs	r2, #0
 800507e:	625a      	str	r2, [r3, #36]	; 0x24
			}
		}

		//分别使用pid算法调整X,Y的坐标
		//其中0通道控制X轴舵机,1通道控制Y轴舵机
		PID_Calc(&pid_X, coordinate_XY[i][0], speedX);
 8005080:	79bb      	ldrb	r3, [r7, #6]
 8005082:	4a1e      	ldr	r2, [pc, #120]	; (80050fc <ModeMove+0x1dc>)
 8005084:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8005088:	4a20      	ldr	r2, [pc, #128]	; (800510c <ModeMove+0x1ec>)
 800508a:	edd2 7a00 	vldr	s15, [r2]
 800508e:	eeb0 0a67 	vmov.f32	s0, s15
 8005092:	4619      	mov	r1, r3
 8005094:	4817      	ldr	r0, [pc, #92]	; (80050f4 <ModeMove+0x1d4>)
 8005096:	f7ff fc31 	bl	80048fc <PID_Calc>
		PID_Calc(&pid_Y, coordinate_XY[i][1], speedY);
 800509a:	79bb      	ldrb	r3, [r7, #6]
 800509c:	4a17      	ldr	r2, [pc, #92]	; (80050fc <ModeMove+0x1dc>)
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	885b      	ldrh	r3, [r3, #2]
 80050a4:	4a1a      	ldr	r2, [pc, #104]	; (8005110 <ModeMove+0x1f0>)
 80050a6:	edd2 7a00 	vldr	s15, [r2]
 80050aa:	eeb0 0a67 	vmov.f32	s0, s15
 80050ae:	4619      	mov	r1, r3
 80050b0:	4811      	ldr	r0, [pc, #68]	; (80050f8 <ModeMove+0x1d8>)
 80050b2:	f7ff fc23 	bl	80048fc <PID_Calc>
		PCA9685_SetServoAngle(0, pid_X.angle);
 80050b6:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <ModeMove+0x1d4>)
 80050b8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80050bc:	eeb0 0a67 	vmov.f32	s0, s15
 80050c0:	2000      	movs	r0, #0
 80050c2:	f7ff fb61 	bl	8004788 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(1, pid_Y.angle);
 80050c6:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <ModeMove+0x1d8>)
 80050c8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80050cc:	eeb0 0a67 	vmov.f32	s0, s15
 80050d0:	2001      	movs	r0, #1
 80050d2:	f7ff fb59 	bl	8004788 <PCA9685_SetServoAngle>
	for (uint8_t i = 1; i < count;) {
 80050d6:	79ba      	ldrb	r2, [r7, #6]
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	429a      	cmp	r2, r3
 80050dc:	f4ff af31 	bcc.w	8004f42 <ModeMove+0x22>
	}
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	200002ac 	.word	0x200002ac
 80050f0:	2000035c 	.word	0x2000035c
 80050f4:	2000036c 	.word	0x2000036c
 80050f8:	20000328 	.word	0x20000328
 80050fc:	20000228 	.word	0x20000228
 8005100:	200002b2 	.word	0x200002b2
 8005104:	20000364 	.word	0x20000364
 8005108:	200004b0 	.word	0x200004b0
 800510c:	20000360 	.word	0x20000360
 8005110:	20000408 	.word	0x20000408

08005114 <ModeRound>:

//模式3：绕圈模式
void ModeRound(void) {
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
	//确定中心坐标
	GetSetPosi(SetPosi, Mode[1]);
 8005118:	4b09      	ldr	r3, [pc, #36]	; (8005140 <ModeRound+0x2c>)
 800511a:	785b      	ldrb	r3, [r3, #1]
 800511c:	4619      	mov	r1, r3
 800511e:	4809      	ldr	r0, [pc, #36]	; (8005144 <ModeRound+0x30>)
 8005120:	f7ff fd86 	bl	8004c30 <GetSetPosi>
	//将稳定坐标放入PID结构体中
	ChaSetPosi(&pid_X, SetPosi[0]);
 8005124:	4b07      	ldr	r3, [pc, #28]	; (8005144 <ModeRound+0x30>)
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	4619      	mov	r1, r3
 800512a:	4807      	ldr	r0, [pc, #28]	; (8005148 <ModeRound+0x34>)
 800512c:	f7ff fcdc 	bl	8004ae8 <ChaSetPosi>
	ChaSetPosi(&pid_Y, SetPosi[1]);
 8005130:	4b04      	ldr	r3, [pc, #16]	; (8005144 <ModeRound+0x30>)
 8005132:	885b      	ldrh	r3, [r3, #2]
 8005134:	4619      	mov	r1, r3
 8005136:	4805      	ldr	r0, [pc, #20]	; (800514c <ModeRound+0x38>)
 8005138:	f7ff fcd6 	bl	8004ae8 <ChaSetPosi>
}
 800513c:	bf00      	nop
 800513e:	bd80      	pop	{r7, pc}
 8005140:	200002ac 	.word	0x200002ac
 8005144:	2000035c 	.word	0x2000035c
 8005148:	2000036c 	.word	0x2000036c
 800514c:	20000328 	.word	0x20000328

08005150 <SelecMode>:

//选择模式
void SelecMode(uint8_t isInit) {
 8005150:	b590      	push	{r4, r7, lr}
 8005152:	b089      	sub	sp, #36	; 0x24
 8005154:	af02      	add	r7, sp, #8
 8005156:	4603      	mov	r3, r0
 8005158:	71fb      	strb	r3, [r7, #7]
	uint8_t key;
	uint8_t ModeBuffer[6];  //模式缓存区
	for (uint8_t i = 0; i < 6; i++) {
 800515a:	2300      	movs	r3, #0
 800515c:	75fb      	strb	r3, [r7, #23]
 800515e:	e00f      	b.n	8005180 <SelecMode+0x30>
		ModeBuffer[i] = Mode[i];
 8005160:	7dfa      	ldrb	r2, [r7, #23]
 8005162:	7dfb      	ldrb	r3, [r7, #23]
 8005164:	4974      	ldr	r1, [pc, #464]	; (8005338 <SelecMode+0x1e8>)
 8005166:	5c8a      	ldrb	r2, [r1, r2]
 8005168:	f107 0118 	add.w	r1, r7, #24
 800516c:	440b      	add	r3, r1
 800516e:	f803 2c0c 	strb.w	r2, [r3, #-12]
		Mode[i] = 0;
 8005172:	7dfb      	ldrb	r3, [r7, #23]
 8005174:	4a70      	ldr	r2, [pc, #448]	; (8005338 <SelecMode+0x1e8>)
 8005176:	2100      	movs	r1, #0
 8005178:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 6; i++) {
 800517a:	7dfb      	ldrb	r3, [r7, #23]
 800517c:	3301      	adds	r3, #1
 800517e:	75fb      	strb	r3, [r7, #23]
 8005180:	7dfb      	ldrb	r3, [r7, #23]
 8005182:	2b05      	cmp	r3, #5
 8005184:	d9ec      	bls.n	8005160 <SelecMode+0x10>
	}

	printf("请选择模式:(模式+格点)\r\n如：从1经过2，3至6 ---------- 移动+1+2+3+6\r\n");
 8005186:	486d      	ldr	r0, [pc, #436]	; (800533c <SelecMode+0x1ec>)
 8005188:	f005 fede 	bl	800af48 <puts>
	for (uint8_t i = 0; i <= 4; i++) {
 800518c:	2300      	movs	r3, #0
 800518e:	75bb      	strb	r3, [r7, #22]
 8005190:	e0c7      	b.n	8005322 <SelecMode+0x1d2>
		while ((key = keyboard_scan()) == NOPRES)
 8005192:	bf00      	nop
 8005194:	f7fb fef4 	bl	8000f80 <keyboard_scan>
 8005198:	4603      	mov	r3, r0
 800519a:	753b      	strb	r3, [r7, #20]
 800519c:	7d3b      	ldrb	r3, [r7, #20]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0f8      	beq.n	8005194 <SelecMode+0x44>
		/*
		 * 若输入格式不符合要求，则重新输入
		 * 若如何输入，则显示模式缓存区数据
		 * 先输入模式（即稳定、移动和绕圈），后输入数字
		 */
		if (i == 0 && key != STABLE && key != MOVE && key != ROUND) {
 80051a2:	7dbb      	ldrb	r3, [r7, #22]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10e      	bne.n	80051c6 <SelecMode+0x76>
 80051a8:	7d3b      	ldrb	r3, [r7, #20]
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d00b      	beq.n	80051c6 <SelecMode+0x76>
 80051ae:	7d3b      	ldrb	r3, [r7, #20]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d008      	beq.n	80051c6 <SelecMode+0x76>
 80051b4:	7d3b      	ldrb	r3, [r7, #20]
 80051b6:	2b0c      	cmp	r3, #12
 80051b8:	d005      	beq.n	80051c6 <SelecMode+0x76>
			printf("你输入的格式不符合要求，请重新输入!\r\n");
 80051ba:	4861      	ldr	r0, [pc, #388]	; (8005340 <SelecMode+0x1f0>)
 80051bc:	f005 fec4 	bl	800af48 <puts>
			i = -1;
 80051c0:	23ff      	movs	r3, #255	; 0xff
 80051c2:	75bb      	strb	r3, [r7, #22]
			continue;
 80051c4:	e0aa      	b.n	800531c <SelecMode+0x1cc>
		} else if (i == 0 && (key == STABLE || key == MOVE || key == ROUND)) {
 80051c6:	7dbb      	ldrb	r3, [r7, #22]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d122      	bne.n	8005212 <SelecMode+0xc2>
 80051cc:	7d3b      	ldrb	r3, [r7, #20]
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d005      	beq.n	80051de <SelecMode+0x8e>
 80051d2:	7d3b      	ldrb	r3, [r7, #20]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d002      	beq.n	80051de <SelecMode+0x8e>
 80051d8:	7d3b      	ldrb	r3, [r7, #20]
 80051da:	2b0c      	cmp	r3, #12
 80051dc:	d119      	bne.n	8005212 <SelecMode+0xc2>
			Mode[i] = key;
 80051de:	7dbb      	ldrb	r3, [r7, #22]
 80051e0:	4955      	ldr	r1, [pc, #340]	; (8005338 <SelecMode+0x1e8>)
 80051e2:	7d3a      	ldrb	r2, [r7, #20]
 80051e4:	54ca      	strb	r2, [r1, r3]
			printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3],
 80051e6:	4b54      	ldr	r3, [pc, #336]	; (8005338 <SelecMode+0x1e8>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	4619      	mov	r1, r3
 80051ec:	4b52      	ldr	r3, [pc, #328]	; (8005338 <SelecMode+0x1e8>)
 80051ee:	785b      	ldrb	r3, [r3, #1]
 80051f0:	4618      	mov	r0, r3
 80051f2:	4b51      	ldr	r3, [pc, #324]	; (8005338 <SelecMode+0x1e8>)
 80051f4:	789b      	ldrb	r3, [r3, #2]
 80051f6:	461c      	mov	r4, r3
 80051f8:	4b4f      	ldr	r3, [pc, #316]	; (8005338 <SelecMode+0x1e8>)
 80051fa:	78db      	ldrb	r3, [r3, #3]
 80051fc:	461a      	mov	r2, r3
					Mode[4]);
 80051fe:	4b4e      	ldr	r3, [pc, #312]	; (8005338 <SelecMode+0x1e8>)
 8005200:	791b      	ldrb	r3, [r3, #4]
			printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3],
 8005202:	9301      	str	r3, [sp, #4]
 8005204:	9200      	str	r2, [sp, #0]
 8005206:	4623      	mov	r3, r4
 8005208:	4602      	mov	r2, r0
 800520a:	484e      	ldr	r0, [pc, #312]	; (8005344 <SelecMode+0x1f4>)
 800520c:	f005 fe16 	bl	800ae3c <iprintf>
			continue;
 8005210:	e084      	b.n	800531c <SelecMode+0x1cc>
		} else if (key == DETER) {
 8005212:	7d3b      	ldrb	r3, [r7, #20]
 8005214:	2b0d      	cmp	r3, #13
 8005216:	f000 8089 	beq.w	800532c <SelecMode+0x1dc>
			break;
		} else if (key == RESET) {
 800521a:	7d3b      	ldrb	r3, [r7, #20]
 800521c:	2b0f      	cmp	r3, #15
 800521e:	d112      	bne.n	8005246 <SelecMode+0xf6>
			for (i = 0; i <= 4; i++) {
 8005220:	2300      	movs	r3, #0
 8005222:	75bb      	strb	r3, [r7, #22]
 8005224:	e006      	b.n	8005234 <SelecMode+0xe4>
				Mode[i] = 0;
 8005226:	7dbb      	ldrb	r3, [r7, #22]
 8005228:	4a43      	ldr	r2, [pc, #268]	; (8005338 <SelecMode+0x1e8>)
 800522a:	2100      	movs	r1, #0
 800522c:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i <= 4; i++) {
 800522e:	7dbb      	ldrb	r3, [r7, #22]
 8005230:	3301      	adds	r3, #1
 8005232:	75bb      	strb	r3, [r7, #22]
 8005234:	7dbb      	ldrb	r3, [r7, #22]
 8005236:	2b04      	cmp	r3, #4
 8005238:	d9f5      	bls.n	8005226 <SelecMode+0xd6>
			}
			i = -1;
 800523a:	23ff      	movs	r3, #255	; 0xff
 800523c:	75bb      	strb	r3, [r7, #22]
			printf("复位\r\n");
 800523e:	4842      	ldr	r0, [pc, #264]	; (8005348 <SelecMode+0x1f8>)
 8005240:	f005 fe82 	bl	800af48 <puts>
			continue;
 8005244:	e06a      	b.n	800531c <SelecMode+0x1cc>
		}

		//判断格式输入是否正确
		if ((key >= ONE && key <= THREE) || (key >= FOUR && key <= SIX)
 8005246:	7d3b      	ldrb	r3, [r7, #20]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <SelecMode+0x102>
 800524c:	7d3b      	ldrb	r3, [r7, #20]
 800524e:	2b03      	cmp	r3, #3
 8005250:	d90b      	bls.n	800526a <SelecMode+0x11a>
 8005252:	7d3b      	ldrb	r3, [r7, #20]
 8005254:	2b04      	cmp	r3, #4
 8005256:	d902      	bls.n	800525e <SelecMode+0x10e>
 8005258:	7d3b      	ldrb	r3, [r7, #20]
 800525a:	2b07      	cmp	r3, #7
 800525c:	d905      	bls.n	800526a <SelecMode+0x11a>
				|| (key >= SEVEN && key <= NINE)) {
 800525e:	7d3b      	ldrb	r3, [r7, #20]
 8005260:	2b08      	cmp	r3, #8
 8005262:	d91c      	bls.n	800529e <SelecMode+0x14e>
 8005264:	7d3b      	ldrb	r3, [r7, #20]
 8005266:	2b0b      	cmp	r3, #11
 8005268:	d819      	bhi.n	800529e <SelecMode+0x14e>
			Mode[i] = key;
 800526a:	7dbb      	ldrb	r3, [r7, #22]
 800526c:	4932      	ldr	r1, [pc, #200]	; (8005338 <SelecMode+0x1e8>)
 800526e:	7d3a      	ldrb	r2, [r7, #20]
 8005270:	54ca      	strb	r2, [r1, r3]
			printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3],
 8005272:	4b31      	ldr	r3, [pc, #196]	; (8005338 <SelecMode+0x1e8>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	4619      	mov	r1, r3
 8005278:	4b2f      	ldr	r3, [pc, #188]	; (8005338 <SelecMode+0x1e8>)
 800527a:	785b      	ldrb	r3, [r3, #1]
 800527c:	4618      	mov	r0, r3
 800527e:	4b2e      	ldr	r3, [pc, #184]	; (8005338 <SelecMode+0x1e8>)
 8005280:	789b      	ldrb	r3, [r3, #2]
 8005282:	461c      	mov	r4, r3
 8005284:	4b2c      	ldr	r3, [pc, #176]	; (8005338 <SelecMode+0x1e8>)
 8005286:	78db      	ldrb	r3, [r3, #3]
 8005288:	461a      	mov	r2, r3
					Mode[4]);
 800528a:	4b2b      	ldr	r3, [pc, #172]	; (8005338 <SelecMode+0x1e8>)
 800528c:	791b      	ldrb	r3, [r3, #4]
			printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3],
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	9200      	str	r2, [sp, #0]
 8005292:	4623      	mov	r3, r4
 8005294:	4602      	mov	r2, r0
 8005296:	482b      	ldr	r0, [pc, #172]	; (8005344 <SelecMode+0x1f4>)
 8005298:	f005 fdd0 	bl	800ae3c <iprintf>
			continue;
 800529c:	e03e      	b.n	800531c <SelecMode+0x1cc>
		} else if (key == DETER) {
 800529e:	7d3b      	ldrb	r3, [r7, #20]
 80052a0:	2b0d      	cmp	r3, #13
 80052a2:	d045      	beq.n	8005330 <SelecMode+0x1e0>
			break;
		} else if (key == RESET) {
 80052a4:	7d3b      	ldrb	r3, [r7, #20]
 80052a6:	2b0f      	cmp	r3, #15
 80052a8:	d112      	bne.n	80052d0 <SelecMode+0x180>
			for (i = 0; i <= 4; i++) {
 80052aa:	2300      	movs	r3, #0
 80052ac:	75bb      	strb	r3, [r7, #22]
 80052ae:	e006      	b.n	80052be <SelecMode+0x16e>
				Mode[i] = 0;
 80052b0:	7dbb      	ldrb	r3, [r7, #22]
 80052b2:	4a21      	ldr	r2, [pc, #132]	; (8005338 <SelecMode+0x1e8>)
 80052b4:	2100      	movs	r1, #0
 80052b6:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i <= 4; i++) {
 80052b8:	7dbb      	ldrb	r3, [r7, #22]
 80052ba:	3301      	adds	r3, #1
 80052bc:	75bb      	strb	r3, [r7, #22]
 80052be:	7dbb      	ldrb	r3, [r7, #22]
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d9f5      	bls.n	80052b0 <SelecMode+0x160>
			}
			i = -1;
 80052c4:	23ff      	movs	r3, #255	; 0xff
 80052c6:	75bb      	strb	r3, [r7, #22]
			printf("复位\r\n");
 80052c8:	481f      	ldr	r0, [pc, #124]	; (8005348 <SelecMode+0x1f8>)
 80052ca:	f005 fe3d 	bl	800af48 <puts>
			continue;
 80052ce:	e025      	b.n	800531c <SelecMode+0x1cc>
		}

		//若按下CANCEL键，则取消以上输入，并将模式缓存区的数据恢复
		if (key == CANCEL) {
 80052d0:	7d3b      	ldrb	r3, [r7, #20]
 80052d2:	2b10      	cmp	r3, #16
 80052d4:	d11c      	bne.n	8005310 <SelecMode+0x1c0>
			if (isInit == 0) {
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d112      	bne.n	8005302 <SelecMode+0x1b2>
				for (uint8_t i = 0; i < 6; i++) {
 80052dc:	2300      	movs	r3, #0
 80052de:	757b      	strb	r3, [r7, #21]
 80052e0:	e00b      	b.n	80052fa <SelecMode+0x1aa>
					Mode[i] = ModeBuffer[i];
 80052e2:	7d7a      	ldrb	r2, [r7, #21]
 80052e4:	7d7b      	ldrb	r3, [r7, #21]
 80052e6:	f107 0118 	add.w	r1, r7, #24
 80052ea:	440a      	add	r2, r1
 80052ec:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 80052f0:	4a11      	ldr	r2, [pc, #68]	; (8005338 <SelecMode+0x1e8>)
 80052f2:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < 6; i++) {
 80052f4:	7d7b      	ldrb	r3, [r7, #21]
 80052f6:	3301      	adds	r3, #1
 80052f8:	757b      	strb	r3, [r7, #21]
 80052fa:	7d7b      	ldrb	r3, [r7, #21]
 80052fc:	2b05      	cmp	r3, #5
 80052fe:	d9f0      	bls.n	80052e2 <SelecMode+0x192>
				}
				return;
 8005300:	e017      	b.n	8005332 <SelecMode+0x1e2>
			} else {
				printf("你输入的格式不符合要求，请重新输入!\r\n");
 8005302:	480f      	ldr	r0, [pc, #60]	; (8005340 <SelecMode+0x1f0>)
 8005304:	f005 fe20 	bl	800af48 <puts>
				i -= 1;
 8005308:	7dbb      	ldrb	r3, [r7, #22]
 800530a:	3b01      	subs	r3, #1
 800530c:	75bb      	strb	r3, [r7, #22]
 800530e:	e005      	b.n	800531c <SelecMode+0x1cc>
			}
		} else {
			printf("你输入的格式不符合要求，请重新输入!\r\n");
 8005310:	480b      	ldr	r0, [pc, #44]	; (8005340 <SelecMode+0x1f0>)
 8005312:	f005 fe19 	bl	800af48 <puts>
			i -= 1;
 8005316:	7dbb      	ldrb	r3, [r7, #22]
 8005318:	3b01      	subs	r3, #1
 800531a:	75bb      	strb	r3, [r7, #22]
	for (uint8_t i = 0; i <= 4; i++) {
 800531c:	7dbb      	ldrb	r3, [r7, #22]
 800531e:	3301      	adds	r3, #1
 8005320:	75bb      	strb	r3, [r7, #22]
 8005322:	7dbb      	ldrb	r3, [r7, #22]
 8005324:	2b04      	cmp	r3, #4
 8005326:	f67f af34 	bls.w	8005192 <SelecMode+0x42>
 800532a:	e002      	b.n	8005332 <SelecMode+0x1e2>
			break;
 800532c:	bf00      	nop
 800532e:	e000      	b.n	8005332 <SelecMode+0x1e2>
			break;
 8005330:	bf00      	nop
		}
	}
}
 8005332:	371c      	adds	r7, #28
 8005334:	46bd      	mov	sp, r7
 8005336:	bd90      	pop	{r4, r7, pc}
 8005338:	200002ac 	.word	0x200002ac
 800533c:	0800d5ac 	.word	0x0800d5ac
 8005340:	0800d604 	.word	0x0800d604
 8005344:	0800d63c 	.word	0x0800d63c
 8005348:	0800d654 	.word	0x0800d654

0800534c <app_main_init>:

//初始化函数
void app_main_init(void) {
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
	//LCD初始化
	TFTLCD_Init();
 8005350:	f7fc fd16 	bl	8001d80 <TFTLCD_Init>
	LCD_Clear(WHITE);
 8005354:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005358:	f7fe ff06 	bl	8004168 <LCD_Clear>
	POINT_COLOR = BLACK;
 800535c:	4b0f      	ldr	r3, [pc, #60]	; (800539c <app_main_init+0x50>)
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
//	//MPU6050初始化,判断MPU6050是否正常连接
//	while (MPU6050_Init(&hi2c1) == 1)
//		;

	//PCA9685初始化,将通道一和通道二(本次需要使用这两个通道)的角度初始化为0
	PCA9685_Init(&hi2c1);
 8005362:	480f      	ldr	r0, [pc, #60]	; (80053a0 <app_main_init+0x54>)
 8005364:	f7ff fa6c 	bl	8004840 <PCA9685_Init>
	PCA9685_SetServoAngle(0, 90);
 8005368:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80053a4 <app_main_init+0x58>
 800536c:	2000      	movs	r0, #0
 800536e:	f7ff fa0b 	bl	8004788 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, 90);
 8005372:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80053a4 <app_main_init+0x58>
 8005376:	2001      	movs	r0, #1
 8005378:	f7ff fa06 	bl	8004788 <PCA9685_SetServoAngle>

	SelecMode(1);
 800537c:	2001      	movs	r0, #1
 800537e:	f7ff fee7 	bl	8005150 <SelecMode>

	//PID初始化, 并设定预设球位置
	PID_Init(&pid_X);
 8005382:	4809      	ldr	r0, [pc, #36]	; (80053a8 <app_main_init+0x5c>)
 8005384:	f7ff fa72 	bl	800486c <PID_Init>
	PID_Init(&pid_Y);
 8005388:	4808      	ldr	r0, [pc, #32]	; (80053ac <app_main_init+0x60>)
 800538a:	f7ff fa6f 	bl	800486c <PID_Init>

	HAL_Delay(500);   //延时1s用于舵机调整角度
 800538e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005392:	f000 ff33 	bl	80061fc <HAL_Delay>
}
 8005396:	bf00      	nop
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000000 	.word	0x20000000
 80053a0:	2000045c 	.word	0x2000045c
 80053a4:	42b40000 	.word	0x42b40000
 80053a8:	2000036c 	.word	0x2000036c
 80053ac:	20000328 	.word	0x20000328

080053b0 <app_main>:

//主程序函数
void app_main(void) {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
	if (Mode[0] == STABLE) {
 80053b4:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <app_main+0x30>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d102      	bne.n	80053c2 <app_main+0x12>
		ModeStable();
 80053bc:	f7ff fd56 	bl	8004e6c <ModeStable>
//	usart1_report_imu(MPU6050.Accel_X_RAW, MPU6050.Accel_Y_RAW,
//			MPU6050.Accel_Z_RAW, MPU6050.Gyro_X_RAW, MPU6050.Gyro_Y_RAW,
//			MPU6050.Gyro_Z_RAW, (float) MPU6050.KalmanAngleX * 100,
//			(float) MPU6050.KalmanAngleY * 100, 0);
	//	print("\r\nKalmanAngleX:%.2f\r\nKalmanAngleY:%.2f\r\n", MPU6050.KalmanAngleX, MPU6050.KalmanAngleY);
}
 80053c0:	e00c      	b.n	80053dc <app_main+0x2c>
	} else if (Mode[0] == MOVE) {
 80053c2:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <app_main+0x30>)
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d102      	bne.n	80053d0 <app_main+0x20>
		ModeMove();
 80053ca:	f7ff fda9 	bl	8004f20 <ModeMove>
}
 80053ce:	e005      	b.n	80053dc <app_main+0x2c>
	} else if (Mode[0] == ROUND) {
 80053d0:	4b03      	ldr	r3, [pc, #12]	; (80053e0 <app_main+0x30>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b0c      	cmp	r3, #12
 80053d6:	d101      	bne.n	80053dc <app_main+0x2c>
		ModeRound();
 80053d8:	f7ff fe9c 	bl	8005114 <ModeRound>
}
 80053dc:	bf00      	nop
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	200002ac 	.word	0x200002ac

080053e4 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 80053ec:	bf00      	nop
 80053ee:	4b08      	ldr	r3, [pc, #32]	; (8005410 <__io_putchar+0x2c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f9      	beq.n	80053ee <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	4b04      	ldr	r3, [pc, #16]	; (8005410 <__io_putchar+0x2c>)
 8005400:	605a      	str	r2, [r3, #4]

	//  while ((USART2->SR & 0X40) == 0) {
	//  }; //循环发送,直到发送完毕
	//  USART2->DR = (uint8_t) ch;

	return ch;
 8005402:	687b      	ldr	r3, [r7, #4]
}
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	40011000 	.word	0x40011000

08005414 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800541a:	2300      	movs	r3, #0
 800541c:	607b      	str	r3, [r7, #4]
 800541e:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <MX_DMA_Init+0x3c>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	4a0b      	ldr	r2, [pc, #44]	; (8005450 <MX_DMA_Init+0x3c>)
 8005424:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005428:	6313      	str	r3, [r2, #48]	; 0x30
 800542a:	4b09      	ldr	r3, [pc, #36]	; (8005450 <MX_DMA_Init+0x3c>)
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005432:	607b      	str	r3, [r7, #4]
 8005434:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005436:	2200      	movs	r2, #0
 8005438:	2100      	movs	r1, #0
 800543a:	203a      	movs	r0, #58	; 0x3a
 800543c:	f000 ffdd 	bl	80063fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005440:	203a      	movs	r0, #58	; 0x3a
 8005442:	f000 fff6 	bl	8006432 <HAL_NVIC_EnableIRQ>

}
 8005446:	bf00      	nop
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	40023800 	.word	0x40023800

08005454 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08e      	sub	sp, #56	; 0x38
 8005458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800545a:	f107 031c 	add.w	r3, r7, #28
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	605a      	str	r2, [r3, #4]
 8005464:	609a      	str	r2, [r3, #8]
 8005466:	60da      	str	r2, [r3, #12]
 8005468:	611a      	str	r2, [r3, #16]
 800546a:	615a      	str	r2, [r3, #20]
 800546c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800546e:	463b      	mov	r3, r7
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	605a      	str	r2, [r3, #4]
 8005476:	609a      	str	r2, [r3, #8]
 8005478:	60da      	str	r2, [r3, #12]
 800547a:	611a      	str	r2, [r3, #16]
 800547c:	615a      	str	r2, [r3, #20]
 800547e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8005480:	4b2f      	ldr	r3, [pc, #188]	; (8005540 <MX_FSMC_Init+0xec>)
 8005482:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8005486:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8005488:	4b2d      	ldr	r3, [pc, #180]	; (8005540 <MX_FSMC_Init+0xec>)
 800548a:	4a2e      	ldr	r2, [pc, #184]	; (8005544 <MX_FSMC_Init+0xf0>)
 800548c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 800548e:	4b2c      	ldr	r3, [pc, #176]	; (8005540 <MX_FSMC_Init+0xec>)
 8005490:	2206      	movs	r2, #6
 8005492:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8005494:	4b2a      	ldr	r3, [pc, #168]	; (8005540 <MX_FSMC_Init+0xec>)
 8005496:	2200      	movs	r2, #0
 8005498:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800549a:	4b29      	ldr	r3, [pc, #164]	; (8005540 <MX_FSMC_Init+0xec>)
 800549c:	2200      	movs	r2, #0
 800549e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80054a0:	4b27      	ldr	r3, [pc, #156]	; (8005540 <MX_FSMC_Init+0xec>)
 80054a2:	2210      	movs	r2, #16
 80054a4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80054a6:	4b26      	ldr	r3, [pc, #152]	; (8005540 <MX_FSMC_Init+0xec>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80054ac:	4b24      	ldr	r3, [pc, #144]	; (8005540 <MX_FSMC_Init+0xec>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80054b2:	4b23      	ldr	r3, [pc, #140]	; (8005540 <MX_FSMC_Init+0xec>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80054b8:	4b21      	ldr	r3, [pc, #132]	; (8005540 <MX_FSMC_Init+0xec>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80054be:	4b20      	ldr	r3, [pc, #128]	; (8005540 <MX_FSMC_Init+0xec>)
 80054c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054c4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80054c6:	4b1e      	ldr	r3, [pc, #120]	; (8005540 <MX_FSMC_Init+0xec>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80054cc:	4b1c      	ldr	r3, [pc, #112]	; (8005540 <MX_FSMC_Init+0xec>)
 80054ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80054d4:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <MX_FSMC_Init+0xec>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80054da:	4b19      	ldr	r3, [pc, #100]	; (8005540 <MX_FSMC_Init+0xec>)
 80054dc:	2200      	movs	r2, #0
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80054e0:	4b17      	ldr	r3, [pc, #92]	; (8005540 <MX_FSMC_Init+0xec>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 80054e6:	2301      	movs	r3, #1
 80054e8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80054ea:	230f      	movs	r3, #15
 80054ec:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 15;
 80054ee:	230f      	movs	r3, #15
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 80054f2:	230f      	movs	r3, #15
 80054f4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80054f6:	2310      	movs	r3, #16
 80054f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80054fa:	2311      	movs	r3, #17
 80054fc:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80054fe:	2300      	movs	r3, #0
 8005500:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 1;
 8005502:	2301      	movs	r3, #1
 8005504:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8005506:	230f      	movs	r3, #15
 8005508:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 15;
 800550a:	230f      	movs	r3, #15
 800550c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 800550e:	230f      	movs	r3, #15
 8005510:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8005512:	2310      	movs	r3, #16
 8005514:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8005516:	2311      	movs	r3, #17
 8005518:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800551a:	2300      	movs	r3, #0
 800551c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800551e:	463a      	mov	r2, r7
 8005520:	f107 031c 	add.w	r3, r7, #28
 8005524:	4619      	mov	r1, r3
 8005526:	4806      	ldr	r0, [pc, #24]	; (8005540 <MX_FSMC_Init+0xec>)
 8005528:	f003 fb46 	bl	8008bb8 <HAL_SRAM_Init>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8005532:	f000 fa41 	bl	80059b8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8005536:	bf00      	nop
 8005538:	3738      	adds	r7, #56	; 0x38
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	2000040c 	.word	0x2000040c
 8005544:	a0000104 	.word	0xa0000104

08005548 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800554e:	1d3b      	adds	r3, r7, #4
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	605a      	str	r2, [r3, #4]
 8005556:	609a      	str	r2, [r3, #8]
 8005558:	60da      	str	r2, [r3, #12]
 800555a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800555c:	4b2c      	ldr	r3, [pc, #176]	; (8005610 <HAL_FSMC_MspInit+0xc8>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d151      	bne.n	8005608 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8005564:	4b2a      	ldr	r3, [pc, #168]	; (8005610 <HAL_FSMC_MspInit+0xc8>)
 8005566:	2201      	movs	r2, #1
 8005568:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800556a:	2300      	movs	r3, #0
 800556c:	603b      	str	r3, [r7, #0]
 800556e:	4b29      	ldr	r3, [pc, #164]	; (8005614 <HAL_FSMC_MspInit+0xcc>)
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	4a28      	ldr	r2, [pc, #160]	; (8005614 <HAL_FSMC_MspInit+0xcc>)
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	6393      	str	r3, [r2, #56]	; 0x38
 800557a:	4b26      	ldr	r3, [pc, #152]	; (8005614 <HAL_FSMC_MspInit+0xcc>)
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800558a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800558c:	2302      	movs	r3, #2
 800558e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005594:	2303      	movs	r3, #3
 8005596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005598:	230c      	movs	r3, #12
 800559a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800559c:	1d3b      	adds	r3, r7, #4
 800559e:	4619      	mov	r1, r3
 80055a0:	481d      	ldr	r0, [pc, #116]	; (8005618 <HAL_FSMC_MspInit+0xd0>)
 80055a2:	f001 fb63 	bl	8006c6c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80055a6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80055aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ac:	2302      	movs	r3, #2
 80055ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055b4:	2303      	movs	r3, #3
 80055b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80055b8:	230c      	movs	r3, #12
 80055ba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055bc:	1d3b      	adds	r3, r7, #4
 80055be:	4619      	mov	r1, r3
 80055c0:	4816      	ldr	r0, [pc, #88]	; (800561c <HAL_FSMC_MspInit+0xd4>)
 80055c2:	f001 fb53 	bl	8006c6c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80055c6:	f24c 7333 	movw	r3, #50995	; 0xc733
 80055ca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055cc:	2302      	movs	r3, #2
 80055ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055d4:	2303      	movs	r3, #3
 80055d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80055d8:	230c      	movs	r3, #12
 80055da:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055dc:	1d3b      	adds	r3, r7, #4
 80055de:	4619      	mov	r1, r3
 80055e0:	480f      	ldr	r0, [pc, #60]	; (8005620 <HAL_FSMC_MspInit+0xd8>)
 80055e2:	f001 fb43 	bl	8006c6c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80055e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ec:	2302      	movs	r3, #2
 80055ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055f4:	2303      	movs	r3, #3
 80055f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80055f8:	230c      	movs	r3, #12
 80055fa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80055fc:	1d3b      	adds	r3, r7, #4
 80055fe:	4619      	mov	r1, r3
 8005600:	4808      	ldr	r0, [pc, #32]	; (8005624 <HAL_FSMC_MspInit+0xdc>)
 8005602:	f001 fb33 	bl	8006c6c <HAL_GPIO_Init>
 8005606:	e000      	b.n	800560a <HAL_FSMC_MspInit+0xc2>
    return;
 8005608:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	200002b4 	.word	0x200002b4
 8005614:	40023800 	.word	0x40023800
 8005618:	40021400 	.word	0x40021400
 800561c:	40021000 	.word	0x40021000
 8005620:	40020c00 	.word	0x40020c00
 8005624:	40021800 	.word	0x40021800

08005628 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005630:	f7ff ff8a 	bl	8005548 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005634:	bf00      	nop
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b08c      	sub	sp, #48	; 0x30
 8005640:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005642:	f107 031c 	add.w	r3, r7, #28
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	605a      	str	r2, [r3, #4]
 800564c:	609a      	str	r2, [r3, #8]
 800564e:	60da      	str	r2, [r3, #12]
 8005650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005652:	2300      	movs	r3, #0
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	4b57      	ldr	r3, [pc, #348]	; (80057b4 <MX_GPIO_Init+0x178>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	4a56      	ldr	r2, [pc, #344]	; (80057b4 <MX_GPIO_Init+0x178>)
 800565c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005660:	6313      	str	r3, [r2, #48]	; 0x30
 8005662:	4b54      	ldr	r3, [pc, #336]	; (80057b4 <MX_GPIO_Init+0x178>)
 8005664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	4b50      	ldr	r3, [pc, #320]	; (80057b4 <MX_GPIO_Init+0x178>)
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	4a4f      	ldr	r2, [pc, #316]	; (80057b4 <MX_GPIO_Init+0x178>)
 8005678:	f043 0301 	orr.w	r3, r3, #1
 800567c:	6313      	str	r3, [r2, #48]	; 0x30
 800567e:	4b4d      	ldr	r3, [pc, #308]	; (80057b4 <MX_GPIO_Init+0x178>)
 8005680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800568a:	2300      	movs	r3, #0
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	4b49      	ldr	r3, [pc, #292]	; (80057b4 <MX_GPIO_Init+0x178>)
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	4a48      	ldr	r2, [pc, #288]	; (80057b4 <MX_GPIO_Init+0x178>)
 8005694:	f043 0320 	orr.w	r3, r3, #32
 8005698:	6313      	str	r3, [r2, #48]	; 0x30
 800569a:	4b46      	ldr	r3, [pc, #280]	; (80057b4 <MX_GPIO_Init+0x178>)
 800569c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	4b42      	ldr	r3, [pc, #264]	; (80057b4 <MX_GPIO_Init+0x178>)
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	4a41      	ldr	r2, [pc, #260]	; (80057b4 <MX_GPIO_Init+0x178>)
 80056b0:	f043 0310 	orr.w	r3, r3, #16
 80056b4:	6313      	str	r3, [r2, #48]	; 0x30
 80056b6:	4b3f      	ldr	r3, [pc, #252]	; (80057b4 <MX_GPIO_Init+0x178>)
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	f003 0310 	and.w	r3, r3, #16
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056c2:	2300      	movs	r3, #0
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	4b3b      	ldr	r3, [pc, #236]	; (80057b4 <MX_GPIO_Init+0x178>)
 80056c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ca:	4a3a      	ldr	r2, [pc, #232]	; (80057b4 <MX_GPIO_Init+0x178>)
 80056cc:	f043 0302 	orr.w	r3, r3, #2
 80056d0:	6313      	str	r3, [r2, #48]	; 0x30
 80056d2:	4b38      	ldr	r3, [pc, #224]	; (80057b4 <MX_GPIO_Init+0x178>)
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	60bb      	str	r3, [r7, #8]
 80056dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80056de:	2300      	movs	r3, #0
 80056e0:	607b      	str	r3, [r7, #4]
 80056e2:	4b34      	ldr	r3, [pc, #208]	; (80057b4 <MX_GPIO_Init+0x178>)
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	4a33      	ldr	r2, [pc, #204]	; (80057b4 <MX_GPIO_Init+0x178>)
 80056e8:	f043 0308 	orr.w	r3, r3, #8
 80056ec:	6313      	str	r3, [r2, #48]	; 0x30
 80056ee:	4b31      	ldr	r3, [pc, #196]	; (80057b4 <MX_GPIO_Init+0x178>)
 80056f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	607b      	str	r3, [r7, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80056fa:	2300      	movs	r3, #0
 80056fc:	603b      	str	r3, [r7, #0]
 80056fe:	4b2d      	ldr	r3, [pc, #180]	; (80057b4 <MX_GPIO_Init+0x178>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	4a2c      	ldr	r2, [pc, #176]	; (80057b4 <MX_GPIO_Init+0x178>)
 8005704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005708:	6313      	str	r3, [r2, #48]	; 0x30
 800570a:	4b2a      	ldr	r3, [pc, #168]	; (80057b4 <MX_GPIO_Init+0x178>)
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8005716:	2200      	movs	r2, #0
 8005718:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800571c:	4826      	ldr	r0, [pc, #152]	; (80057b8 <MX_GPIO_Init+0x17c>)
 800571e:	f001 fc59 	bl	8006fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin, GPIO_PIN_RESET);
 8005722:	2200      	movs	r2, #0
 8005724:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 8005728:	4824      	ldr	r0, [pc, #144]	; (80057bc <MX_GPIO_Init+0x180>)
 800572a:	f001 fc53 	bl	8006fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KY_UP_Pin;
 800572e:	2301      	movs	r3, #1
 8005730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005732:	4b23      	ldr	r3, [pc, #140]	; (80057c0 <MX_GPIO_Init+0x184>)
 8005734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005736:	2302      	movs	r3, #2
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KY_UP_GPIO_Port, &GPIO_InitStruct);
 800573a:	f107 031c 	add.w	r3, r7, #28
 800573e:	4619      	mov	r1, r3
 8005740:	4820      	ldr	r0, [pc, #128]	; (80057c4 <MX_GPIO_Init+0x188>)
 8005742:	f001 fa93 	bl	8006c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800574a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800574c:	2301      	movs	r3, #1
 800574e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005750:	2301      	movs	r3, #1
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005754:	2302      	movs	r3, #2
 8005756:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005758:	f107 031c 	add.w	r3, r7, #28
 800575c:	4619      	mov	r1, r3
 800575e:	4816      	ldr	r0, [pc, #88]	; (80057b8 <MX_GPIO_Init+0x17c>)
 8005760:	f001 fa84 	bl	8006c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = Row4_Pin|Row3_Pin|Row2_Pin|Row1_Pin;
 8005764:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8005768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800576a:	2300      	movs	r3, #0
 800576c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800576e:	2301      	movs	r3, #1
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005772:	f107 031c 	add.w	r3, r7, #28
 8005776:	4619      	mov	r1, r3
 8005778:	4810      	ldr	r0, [pc, #64]	; (80057bc <MX_GPIO_Init+0x180>)
 800577a:	f001 fa77 	bl	8006c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin;
 800577e:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 8005782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005784:	2301      	movs	r3, #1
 8005786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005788:	2302      	movs	r3, #2
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800578c:	2302      	movs	r3, #2
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005790:	f107 031c 	add.w	r3, r7, #28
 8005794:	4619      	mov	r1, r3
 8005796:	4809      	ldr	r0, [pc, #36]	; (80057bc <MX_GPIO_Init+0x180>)
 8005798:	f001 fa68 	bl	8006c6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800579c:	2200      	movs	r2, #0
 800579e:	2101      	movs	r1, #1
 80057a0:	2006      	movs	r0, #6
 80057a2:	f000 fe2a 	bl	80063fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80057a6:	2006      	movs	r0, #6
 80057a8:	f000 fe43 	bl	8006432 <HAL_NVIC_EnableIRQ>

}
 80057ac:	bf00      	nop
 80057ae:	3730      	adds	r7, #48	; 0x30
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	40023800 	.word	0x40023800
 80057b8:	40020400 	.word	0x40020400
 80057bc:	40021800 	.word	0x40021800
 80057c0:	10110000 	.word	0x10110000
 80057c4:	40020000 	.word	0x40020000

080057c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80057cc:	4b12      	ldr	r3, [pc, #72]	; (8005818 <MX_I2C1_Init+0x50>)
 80057ce:	4a13      	ldr	r2, [pc, #76]	; (800581c <MX_I2C1_Init+0x54>)
 80057d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80057d2:	4b11      	ldr	r3, [pc, #68]	; (8005818 <MX_I2C1_Init+0x50>)
 80057d4:	4a12      	ldr	r2, [pc, #72]	; (8005820 <MX_I2C1_Init+0x58>)
 80057d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80057d8:	4b0f      	ldr	r3, [pc, #60]	; (8005818 <MX_I2C1_Init+0x50>)
 80057da:	2200      	movs	r2, #0
 80057dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80057de:	4b0e      	ldr	r3, [pc, #56]	; (8005818 <MX_I2C1_Init+0x50>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80057e4:	4b0c      	ldr	r3, [pc, #48]	; (8005818 <MX_I2C1_Init+0x50>)
 80057e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80057ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80057ec:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <MX_I2C1_Init+0x50>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80057f2:	4b09      	ldr	r3, [pc, #36]	; (8005818 <MX_I2C1_Init+0x50>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80057f8:	4b07      	ldr	r3, [pc, #28]	; (8005818 <MX_I2C1_Init+0x50>)
 80057fa:	2240      	movs	r2, #64	; 0x40
 80057fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80057fe:	4b06      	ldr	r3, [pc, #24]	; (8005818 <MX_I2C1_Init+0x50>)
 8005800:	2200      	movs	r2, #0
 8005802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005804:	4804      	ldr	r0, [pc, #16]	; (8005818 <MX_I2C1_Init+0x50>)
 8005806:	f001 fc23 	bl	8007050 <HAL_I2C_Init>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005810:	f000 f8d2 	bl	80059b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005814:	bf00      	nop
 8005816:	bd80      	pop	{r7, pc}
 8005818:	2000045c 	.word	0x2000045c
 800581c:	40005400 	.word	0x40005400
 8005820:	00061a80 	.word	0x00061a80

08005824 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08a      	sub	sp, #40	; 0x28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800582c:	f107 0314 	add.w	r3, r7, #20
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	605a      	str	r2, [r3, #4]
 8005836:	609a      	str	r2, [r3, #8]
 8005838:	60da      	str	r2, [r3, #12]
 800583a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a19      	ldr	r2, [pc, #100]	; (80058a8 <HAL_I2C_MspInit+0x84>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d12b      	bne.n	800589e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005846:	2300      	movs	r3, #0
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	4b18      	ldr	r3, [pc, #96]	; (80058ac <HAL_I2C_MspInit+0x88>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	4a17      	ldr	r2, [pc, #92]	; (80058ac <HAL_I2C_MspInit+0x88>)
 8005850:	f043 0302 	orr.w	r3, r3, #2
 8005854:	6313      	str	r3, [r2, #48]	; 0x30
 8005856:	4b15      	ldr	r3, [pc, #84]	; (80058ac <HAL_I2C_MspInit+0x88>)
 8005858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	613b      	str	r3, [r7, #16]
 8005860:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005862:	23c0      	movs	r3, #192	; 0xc0
 8005864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005866:	2312      	movs	r3, #18
 8005868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800586a:	2301      	movs	r3, #1
 800586c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800586e:	2303      	movs	r3, #3
 8005870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005872:	2304      	movs	r3, #4
 8005874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005876:	f107 0314 	add.w	r3, r7, #20
 800587a:	4619      	mov	r1, r3
 800587c:	480c      	ldr	r0, [pc, #48]	; (80058b0 <HAL_I2C_MspInit+0x8c>)
 800587e:	f001 f9f5 	bl	8006c6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	4b09      	ldr	r3, [pc, #36]	; (80058ac <HAL_I2C_MspInit+0x88>)
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	4a08      	ldr	r2, [pc, #32]	; (80058ac <HAL_I2C_MspInit+0x88>)
 800588c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005890:	6413      	str	r3, [r2, #64]	; 0x40
 8005892:	4b06      	ldr	r3, [pc, #24]	; (80058ac <HAL_I2C_MspInit+0x88>)
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800589e:	bf00      	nop
 80058a0:	3728      	adds	r7, #40	; 0x28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40005400 	.word	0x40005400
 80058ac:	40023800 	.word	0x40023800
 80058b0:	40020400 	.word	0x40020400

080058b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80058b8:	f000 fc2e 	bl	8006118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80058bc:	f000 f812 	bl	80058e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80058c0:	f7ff febc 	bl	800563c <MX_GPIO_Init>
  MX_DMA_Init();
 80058c4:	f7ff fda6 	bl	8005414 <MX_DMA_Init>
  MX_FSMC_Init();
 80058c8:	f7ff fdc4 	bl	8005454 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 80058cc:	f000 fa7c 	bl	8005dc8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80058d0:	f7ff ff7a 	bl	80057c8 <MX_I2C1_Init>
  MX_TIM2_Init();
 80058d4:	f000 fa04 	bl	8005ce0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	app_main_init();
 80058d8:	f7ff fd38 	bl	800534c <app_main_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		app_main();
 80058dc:	f7ff fd68 	bl	80053b0 <app_main>
 80058e0:	e7fc      	b.n	80058dc <main+0x28>
	...

080058e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b094      	sub	sp, #80	; 0x50
 80058e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058ea:	f107 0320 	add.w	r3, r7, #32
 80058ee:	2230      	movs	r2, #48	; 0x30
 80058f0:	2100      	movs	r1, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	f004 fe30 	bl	800a558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058f8:	f107 030c 	add.w	r3, r7, #12
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	605a      	str	r2, [r3, #4]
 8005902:	609a      	str	r2, [r3, #8]
 8005904:	60da      	str	r2, [r3, #12]
 8005906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005908:	2300      	movs	r3, #0
 800590a:	60bb      	str	r3, [r7, #8]
 800590c:	4b28      	ldr	r3, [pc, #160]	; (80059b0 <SystemClock_Config+0xcc>)
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	4a27      	ldr	r2, [pc, #156]	; (80059b0 <SystemClock_Config+0xcc>)
 8005912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005916:	6413      	str	r3, [r2, #64]	; 0x40
 8005918:	4b25      	ldr	r3, [pc, #148]	; (80059b0 <SystemClock_Config+0xcc>)
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005920:	60bb      	str	r3, [r7, #8]
 8005922:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005924:	2300      	movs	r3, #0
 8005926:	607b      	str	r3, [r7, #4]
 8005928:	4b22      	ldr	r3, [pc, #136]	; (80059b4 <SystemClock_Config+0xd0>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a21      	ldr	r2, [pc, #132]	; (80059b4 <SystemClock_Config+0xd0>)
 800592e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005932:	6013      	str	r3, [r2, #0]
 8005934:	4b1f      	ldr	r3, [pc, #124]	; (80059b4 <SystemClock_Config+0xd0>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800593c:	607b      	str	r3, [r7, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005940:	2301      	movs	r3, #1
 8005942:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800594a:	2302      	movs	r3, #2
 800594c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800594e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005952:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005954:	2304      	movs	r3, #4
 8005956:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005958:	23a8      	movs	r3, #168	; 0xa8
 800595a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800595c:	2302      	movs	r3, #2
 800595e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005960:	2304      	movs	r3, #4
 8005962:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005964:	f107 0320 	add.w	r3, r7, #32
 8005968:	4618      	mov	r0, r3
 800596a:	f002 fcb1 	bl	80082d0 <HAL_RCC_OscConfig>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005974:	f000 f820 	bl	80059b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005978:	230f      	movs	r3, #15
 800597a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800597c:	2302      	movs	r3, #2
 800597e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005980:	2300      	movs	r3, #0
 8005982:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005984:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005988:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800598a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800598e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005990:	f107 030c 	add.w	r3, r7, #12
 8005994:	2105      	movs	r1, #5
 8005996:	4618      	mov	r0, r3
 8005998:	f002 ff12 	bl	80087c0 <HAL_RCC_ClockConfig>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80059a2:	f000 f809 	bl	80059b8 <Error_Handler>
  }
}
 80059a6:	bf00      	nop
 80059a8:	3750      	adds	r7, #80	; 0x50
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	40023800 	.word	0x40023800
 80059b4:	40007000 	.word	0x40007000

080059b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80059b8:	b480      	push	{r7}
 80059ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80059bc:	b672      	cpsid	i
}
 80059be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80059c0:	e7fe      	b.n	80059c0 <Error_Handler+0x8>
	...

080059c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ca:	2300      	movs	r3, #0
 80059cc:	607b      	str	r3, [r7, #4]
 80059ce:	4b10      	ldr	r3, [pc, #64]	; (8005a10 <HAL_MspInit+0x4c>)
 80059d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d2:	4a0f      	ldr	r2, [pc, #60]	; (8005a10 <HAL_MspInit+0x4c>)
 80059d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059d8:	6453      	str	r3, [r2, #68]	; 0x44
 80059da:	4b0d      	ldr	r3, [pc, #52]	; (8005a10 <HAL_MspInit+0x4c>)
 80059dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059e2:	607b      	str	r3, [r7, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059e6:	2300      	movs	r3, #0
 80059e8:	603b      	str	r3, [r7, #0]
 80059ea:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <HAL_MspInit+0x4c>)
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	4a08      	ldr	r2, [pc, #32]	; (8005a10 <HAL_MspInit+0x4c>)
 80059f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f4:	6413      	str	r3, [r2, #64]	; 0x40
 80059f6:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <HAL_MspInit+0x4c>)
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fe:	603b      	str	r3, [r7, #0]
 8005a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40023800 	.word	0x40023800

08005a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8005a18:	e7fe      	b.n	8005a18 <NMI_Handler+0x4>

08005a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a1e:	e7fe      	b.n	8005a1e <HardFault_Handler+0x4>

08005a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a24:	e7fe      	b.n	8005a24 <MemManage_Handler+0x4>

08005a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a26:	b480      	push	{r7}
 8005a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a2a:	e7fe      	b.n	8005a2a <BusFault_Handler+0x4>

08005a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a30:	e7fe      	b.n	8005a30 <UsageFault_Handler+0x4>

08005a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a32:	b480      	push	{r7}
 8005a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a36:	bf00      	nop
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a44:	bf00      	nop
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a52:	bf00      	nop
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a60:	f000 fbac 	bl	80061bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a64:	bf00      	nop
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005a68:	b590      	push	{r4, r7, lr}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005a6e:	2001      	movs	r0, #1
 8005a70:	f001 faca 	bl	8007008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	HAL_Delay(20);
 8005a74:	2014      	movs	r0, #20
 8005a76:	f000 fbc1 	bl	80061fc <HAL_Delay>
	if (KY_UP == GPIO_PIN_SET) {
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	4817      	ldr	r0, [pc, #92]	; (8005adc <EXTI0_IRQHandler+0x74>)
 8005a7e:	f001 fa91 	bl	8006fa4 <HAL_GPIO_ReadPin>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d124      	bne.n	8005ad2 <EXTI0_IRQHandler+0x6a>
		printf("KY_UP按键按下。。。。。\r\n");
 8005a88:	4815      	ldr	r0, [pc, #84]	; (8005ae0 <EXTI0_IRQHandler+0x78>)
 8005a8a:	f005 fa5d 	bl	800af48 <puts>
		//让舵机角度再次回到初始值
		PCA9685_SetServoAngle(0, 90);
 8005a8e:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8005ae4 <EXTI0_IRQHandler+0x7c>
 8005a92:	2000      	movs	r0, #0
 8005a94:	f7fe fe78 	bl	8004788 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(1, 90);
 8005a98:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8005ae4 <EXTI0_IRQHandler+0x7c>
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	f7fe fe73 	bl	8004788 <PCA9685_SetServoAngle>

		//使用矩形键盘设置模式
		SelecMode(0);
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	f7ff fb54 	bl	8005150 <SelecMode>
		printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3], Mode[4]);
 8005aa8:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <EXTI0_IRQHandler+0x80>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	4619      	mov	r1, r3
 8005aae:	4b0e      	ldr	r3, [pc, #56]	; (8005ae8 <EXTI0_IRQHandler+0x80>)
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <EXTI0_IRQHandler+0x80>)
 8005ab6:	789b      	ldrb	r3, [r3, #2]
 8005ab8:	461c      	mov	r4, r3
 8005aba:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <EXTI0_IRQHandler+0x80>)
 8005abc:	78db      	ldrb	r3, [r3, #3]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	4b09      	ldr	r3, [pc, #36]	; (8005ae8 <EXTI0_IRQHandler+0x80>)
 8005ac2:	791b      	ldrb	r3, [r3, #4]
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	9200      	str	r2, [sp, #0]
 8005ac8:	4623      	mov	r3, r4
 8005aca:	4602      	mov	r2, r0
 8005acc:	4807      	ldr	r0, [pc, #28]	; (8005aec <EXTI0_IRQHandler+0x84>)
 8005ace:	f005 f9b5 	bl	800ae3c <iprintf>
	}
  /* USER CODE END EXTI0_IRQn 1 */
}
 8005ad2:	bf00      	nop
 8005ad4:	3704      	adds	r7, #4
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd90      	pop	{r4, r7, pc}
 8005ada:	bf00      	nop
 8005adc:	40020000 	.word	0x40020000
 8005ae0:	0800d65c 	.word	0x0800d65c
 8005ae4:	42b40000 	.word	0x42b40000
 8005ae8:	200002ac 	.word	0x200002ac
 8005aec:	0800d680 	.word	0x0800d680

08005af0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005af4:	4802      	ldr	r0, [pc, #8]	; (8005b00 <TIM2_IRQHandler+0x10>)
 8005af6:	f003 f982 	bl	8008dfe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005afa:	bf00      	nop
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	200004b0 	.word	0x200004b0

08005b04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005b08:	4803      	ldr	r0, [pc, #12]	; (8005b18 <USART1_IRQHandler+0x14>)
 8005b0a:	f003 fe19 	bl	8009740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	// 新添加的函数，用来处理串口空闲中断
	USER_UART_IRQHandler(&huart1);
 8005b0e:	4802      	ldr	r0, [pc, #8]	; (8005b18 <USART1_IRQHandler+0x14>)
 8005b10:	f000 faac 	bl	800606c <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8005b14:	bf00      	nop
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20000558 	.word	0x20000558

08005b1c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005b20:	4802      	ldr	r0, [pc, #8]	; (8005b2c <DMA2_Stream2_IRQHandler+0x10>)
 8005b22:	f000 fe39 	bl	8006798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005b26:	bf00      	nop
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	200004f8 	.word	0x200004f8

08005b30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
	return 1;
 8005b34:	2301      	movs	r3, #1
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <_kill>:

int _kill(int pid, int sig)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005b4a:	f004 fcdb 	bl	800a504 <__errno>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2216      	movs	r2, #22
 8005b52:	601a      	str	r2, [r3, #0]
	return -1;
 8005b54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <_exit>:

void _exit (int status)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005b68:	f04f 31ff 	mov.w	r1, #4294967295
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff ffe7 	bl	8005b40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005b72:	e7fe      	b.n	8005b72 <_exit+0x12>

08005b74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	e00a      	b.n	8005b9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005b86:	f3af 8000 	nop.w
 8005b8a:	4601      	mov	r1, r0
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	60ba      	str	r2, [r7, #8]
 8005b92:	b2ca      	uxtb	r2, r1
 8005b94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	dbf0      	blt.n	8005b86 <_read+0x12>
	}

return len;
 8005ba4:	687b      	ldr	r3, [r7, #4]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b086      	sub	sp, #24
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	e009      	b.n	8005bd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	60ba      	str	r2, [r7, #8]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff fc0b 	bl	80053e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	dbf1      	blt.n	8005bc0 <_write+0x12>
	}
	return len;
 8005bdc:	687b      	ldr	r3, [r7, #4]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <_close>:

int _close(int file)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
	return -1;
 8005bee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c0e:	605a      	str	r2, [r3, #4]
	return 0;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <_isatty>:

int _isatty(int file)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
	return 1;
 8005c26:	2301      	movs	r3, #1
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
	return 0;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
	...

08005c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c58:	4a14      	ldr	r2, [pc, #80]	; (8005cac <_sbrk+0x5c>)
 8005c5a:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <_sbrk+0x60>)
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c64:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <_sbrk+0x64>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d102      	bne.n	8005c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c6c:	4b11      	ldr	r3, [pc, #68]	; (8005cb4 <_sbrk+0x64>)
 8005c6e:	4a12      	ldr	r2, [pc, #72]	; (8005cb8 <_sbrk+0x68>)
 8005c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c72:	4b10      	ldr	r3, [pc, #64]	; (8005cb4 <_sbrk+0x64>)
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4413      	add	r3, r2
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d207      	bcs.n	8005c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005c80:	f004 fc40 	bl	800a504 <__errno>
 8005c84:	4603      	mov	r3, r0
 8005c86:	220c      	movs	r2, #12
 8005c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8e:	e009      	b.n	8005ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c90:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <_sbrk+0x64>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c96:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <_sbrk+0x64>)
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	4a05      	ldr	r2, [pc, #20]	; (8005cb4 <_sbrk+0x64>)
 8005ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	20020000 	.word	0x20020000
 8005cb0:	00000400 	.word	0x00000400
 8005cb4:	200002b8 	.word	0x200002b8
 8005cb8:	200005b0 	.word	0x200005b0

08005cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005cc0:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <SystemInit+0x20>)
 8005cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc6:	4a05      	ldr	r2, [pc, #20]	; (8005cdc <SystemInit+0x20>)
 8005cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005cd0:	bf00      	nop
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	e000ed00 	.word	0xe000ed00

08005ce0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ce6:	f107 0308 	add.w	r3, r7, #8
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	605a      	str	r2, [r3, #4]
 8005cf0:	609a      	str	r2, [r3, #8]
 8005cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cf4:	463b      	mov	r3, r7
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005cfc:	4b1e      	ldr	r3, [pc, #120]	; (8005d78 <MX_TIM2_Init+0x98>)
 8005cfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8005d04:	4b1c      	ldr	r3, [pc, #112]	; (8005d78 <MX_TIM2_Init+0x98>)
 8005d06:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8005d0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d0c:	4b1a      	ldr	r3, [pc, #104]	; (8005d78 <MX_TIM2_Init+0x98>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005d12:	4b19      	ldr	r3, [pc, #100]	; (8005d78 <MX_TIM2_Init+0x98>)
 8005d14:	f04f 32ff 	mov.w	r2, #4294967295
 8005d18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d1a:	4b17      	ldr	r3, [pc, #92]	; (8005d78 <MX_TIM2_Init+0x98>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d20:	4b15      	ldr	r3, [pc, #84]	; (8005d78 <MX_TIM2_Init+0x98>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005d26:	4814      	ldr	r0, [pc, #80]	; (8005d78 <MX_TIM2_Init+0x98>)
 8005d28:	f002 ff8a 	bl	8008c40 <HAL_TIM_Base_Init>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005d32:	f7ff fe41 	bl	80059b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005d3c:	f107 0308 	add.w	r3, r7, #8
 8005d40:	4619      	mov	r1, r3
 8005d42:	480d      	ldr	r0, [pc, #52]	; (8005d78 <MX_TIM2_Init+0x98>)
 8005d44:	f003 f963 	bl	800900e <HAL_TIM_ConfigClockSource>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005d4e:	f7ff fe33 	bl	80059b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d52:	2300      	movs	r3, #0
 8005d54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d56:	2300      	movs	r3, #0
 8005d58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4806      	ldr	r0, [pc, #24]	; (8005d78 <MX_TIM2_Init+0x98>)
 8005d60:	f003 fb86 	bl	8009470 <HAL_TIMEx_MasterConfigSynchronization>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005d6a:	f7ff fe25 	bl	80059b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005d6e:	bf00      	nop
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	200004b0 	.word	0x200004b0

08005d7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8c:	d115      	bne.n	8005dba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <HAL_TIM_Base_MspInit+0x48>)
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	4a0b      	ldr	r2, [pc, #44]	; (8005dc4 <HAL_TIM_Base_MspInit+0x48>)
 8005d98:	f043 0301 	orr.w	r3, r3, #1
 8005d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d9e:	4b09      	ldr	r3, [pc, #36]	; (8005dc4 <HAL_TIM_Base_MspInit+0x48>)
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005daa:	2200      	movs	r2, #0
 8005dac:	2100      	movs	r1, #0
 8005dae:	201c      	movs	r0, #28
 8005db0:	f000 fb23 	bl	80063fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005db4:	201c      	movs	r0, #28
 8005db6:	f000 fb3c 	bl	8006432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005dba:	bf00      	nop
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40023800 	.word	0x40023800

08005dc8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005dcc:	4b17      	ldr	r3, [pc, #92]	; (8005e2c <MX_USART1_UART_Init+0x64>)
 8005dce:	4a18      	ldr	r2, [pc, #96]	; (8005e30 <MX_USART1_UART_Init+0x68>)
 8005dd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005dd2:	4b16      	ldr	r3, [pc, #88]	; (8005e2c <MX_USART1_UART_Init+0x64>)
 8005dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005dd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005dda:	4b14      	ldr	r3, [pc, #80]	; (8005e2c <MX_USART1_UART_Init+0x64>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005de0:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <MX_USART1_UART_Init+0x64>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005de6:	4b11      	ldr	r3, [pc, #68]	; (8005e2c <MX_USART1_UART_Init+0x64>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005dec:	4b0f      	ldr	r3, [pc, #60]	; (8005e2c <MX_USART1_UART_Init+0x64>)
 8005dee:	220c      	movs	r2, #12
 8005df0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005df2:	4b0e      	ldr	r3, [pc, #56]	; (8005e2c <MX_USART1_UART_Init+0x64>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005df8:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <MX_USART1_UART_Init+0x64>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005dfe:	480b      	ldr	r0, [pc, #44]	; (8005e2c <MX_USART1_UART_Init+0x64>)
 8005e00:	f003 fbc6 	bl	8009590 <HAL_UART_Init>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005e0a:	f7ff fdd5 	bl	80059b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);  // 使能串口空闲中断
 8005e0e:	4b07      	ldr	r3, [pc, #28]	; (8005e2c <MX_USART1_UART_Init+0x64>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <MX_USART1_UART_Init+0x64>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0210 	orr.w	r2, r2, #16
 8005e1c:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(&huart1, (uint8_t*) receive_buff, 8); //设置DMA传输，将串口1的数据搬运到recvive_buff中，每次8个字节
 8005e1e:	2208      	movs	r2, #8
 8005e20:	4904      	ldr	r1, [pc, #16]	; (8005e34 <MX_USART1_UART_Init+0x6c>)
 8005e22:	4802      	ldr	r0, [pc, #8]	; (8005e2c <MX_USART1_UART_Init+0x64>)
 8005e24:	f003 fc01 	bl	800962a <HAL_UART_Receive_DMA>
  /* USER CODE END USART1_Init 2 */

}
 8005e28:	bf00      	nop
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	20000558 	.word	0x20000558
 8005e30:	40011000 	.word	0x40011000
 8005e34:	20000208 	.word	0x20000208

08005e38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08a      	sub	sp, #40	; 0x28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e40:	f107 0314 	add.w	r3, r7, #20
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	605a      	str	r2, [r3, #4]
 8005e4a:	609a      	str	r2, [r3, #8]
 8005e4c:	60da      	str	r2, [r3, #12]
 8005e4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a35      	ldr	r2, [pc, #212]	; (8005f2c <HAL_UART_MspInit+0xf4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d163      	bne.n	8005f22 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	613b      	str	r3, [r7, #16]
 8005e5e:	4b34      	ldr	r3, [pc, #208]	; (8005f30 <HAL_UART_MspInit+0xf8>)
 8005e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e62:	4a33      	ldr	r2, [pc, #204]	; (8005f30 <HAL_UART_MspInit+0xf8>)
 8005e64:	f043 0310 	orr.w	r3, r3, #16
 8005e68:	6453      	str	r3, [r2, #68]	; 0x44
 8005e6a:	4b31      	ldr	r3, [pc, #196]	; (8005f30 <HAL_UART_MspInit+0xf8>)
 8005e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6e:	f003 0310 	and.w	r3, r3, #16
 8005e72:	613b      	str	r3, [r7, #16]
 8005e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	4b2d      	ldr	r3, [pc, #180]	; (8005f30 <HAL_UART_MspInit+0xf8>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	4a2c      	ldr	r2, [pc, #176]	; (8005f30 <HAL_UART_MspInit+0xf8>)
 8005e80:	f043 0301 	orr.w	r3, r3, #1
 8005e84:	6313      	str	r3, [r2, #48]	; 0x30
 8005e86:	4b2a      	ldr	r3, [pc, #168]	; (8005f30 <HAL_UART_MspInit+0xf8>)
 8005e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005e92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e98:	2302      	movs	r3, #2
 8005e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005ea4:	2307      	movs	r3, #7
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ea8:	f107 0314 	add.w	r3, r7, #20
 8005eac:	4619      	mov	r1, r3
 8005eae:	4821      	ldr	r0, [pc, #132]	; (8005f34 <HAL_UART_MspInit+0xfc>)
 8005eb0:	f000 fedc 	bl	8006c6c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005eb4:	4b20      	ldr	r3, [pc, #128]	; (8005f38 <HAL_UART_MspInit+0x100>)
 8005eb6:	4a21      	ldr	r2, [pc, #132]	; (8005f3c <HAL_UART_MspInit+0x104>)
 8005eb8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005eba:	4b1f      	ldr	r3, [pc, #124]	; (8005f38 <HAL_UART_MspInit+0x100>)
 8005ebc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ec0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ec2:	4b1d      	ldr	r3, [pc, #116]	; (8005f38 <HAL_UART_MspInit+0x100>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ec8:	4b1b      	ldr	r3, [pc, #108]	; (8005f38 <HAL_UART_MspInit+0x100>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ece:	4b1a      	ldr	r3, [pc, #104]	; (8005f38 <HAL_UART_MspInit+0x100>)
 8005ed0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ed4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ed6:	4b18      	ldr	r3, [pc, #96]	; (8005f38 <HAL_UART_MspInit+0x100>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005edc:	4b16      	ldr	r3, [pc, #88]	; (8005f38 <HAL_UART_MspInit+0x100>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005ee2:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <HAL_UART_MspInit+0x100>)
 8005ee4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ee8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005eea:	4b13      	ldr	r3, [pc, #76]	; (8005f38 <HAL_UART_MspInit+0x100>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ef0:	4b11      	ldr	r3, [pc, #68]	; (8005f38 <HAL_UART_MspInit+0x100>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005ef6:	4810      	ldr	r0, [pc, #64]	; (8005f38 <HAL_UART_MspInit+0x100>)
 8005ef8:	f000 fab6 	bl	8006468 <HAL_DMA_Init>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8005f02:	f7ff fd59 	bl	80059b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a0b      	ldr	r2, [pc, #44]	; (8005f38 <HAL_UART_MspInit+0x100>)
 8005f0a:	639a      	str	r2, [r3, #56]	; 0x38
 8005f0c:	4a0a      	ldr	r2, [pc, #40]	; (8005f38 <HAL_UART_MspInit+0x100>)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8005f12:	2200      	movs	r2, #0
 8005f14:	2101      	movs	r1, #1
 8005f16:	2025      	movs	r0, #37	; 0x25
 8005f18:	f000 fa6f 	bl	80063fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005f1c:	2025      	movs	r0, #37	; 0x25
 8005f1e:	f000 fa88 	bl	8006432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005f22:	bf00      	nop
 8005f24:	3728      	adds	r7, #40	; 0x28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	40011000 	.word	0x40011000
 8005f30:	40023800 	.word	0x40023800
 8005f34:	40020000 	.word	0x40020000
 8005f38:	200004f8 	.word	0x200004f8
 8005f3c:	40026440 	.word	0x40026440

08005f40 <USAR_UART_IDLECallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void USAR_UART_IDLECallback(UART_HandleTypeDef *huart) {
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
	// 停止本次DMA传输
	HAL_UART_DMAStop(&huart1);
 8005f48:	483c      	ldr	r0, [pc, #240]	; (800603c <USAR_UART_IDLECallback+0xfc>)
 8005f4a:	f003 fb9e 	bl	800968a <HAL_UART_DMAStop>

	// 计算接收到的数据长度
	uint8_t data_length = BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8005f4e:	4b3c      	ldr	r3, [pc, #240]	; (8006040 <USAR_UART_IDLECallback+0x100>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	f1c3 0320 	rsb	r3, r3, #32
 8005f5a:	73fb      	strb	r3, [r7, #15]

	coordinate_XY[i][0] = receive_buff[0] + (receive_buff[1] << 8);
 8005f5c:	4b39      	ldr	r3, [pc, #228]	; (8006044 <USAR_UART_IDLECallback+0x104>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	4b38      	ldr	r3, [pc, #224]	; (8006044 <USAR_UART_IDLECallback+0x104>)
 8005f64:	785b      	ldrb	r3, [r3, #1]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	021b      	lsls	r3, r3, #8
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	4936      	ldr	r1, [pc, #216]	; (8006048 <USAR_UART_IDLECallback+0x108>)
 8005f6e:	7809      	ldrb	r1, [r1, #0]
 8005f70:	4413      	add	r3, r2
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	4b35      	ldr	r3, [pc, #212]	; (800604c <USAR_UART_IDLECallback+0x10c>)
 8005f76:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
	coordinate_XY[i][1] = receive_buff[2] + (receive_buff[3] << 8);
 8005f7a:	4b32      	ldr	r3, [pc, #200]	; (8006044 <USAR_UART_IDLECallback+0x104>)
 8005f7c:	789b      	ldrb	r3, [r3, #2]
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	4b30      	ldr	r3, [pc, #192]	; (8006044 <USAR_UART_IDLECallback+0x104>)
 8005f82:	78db      	ldrb	r3, [r3, #3]
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	021b      	lsls	r3, r3, #8
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	492f      	ldr	r1, [pc, #188]	; (8006048 <USAR_UART_IDLECallback+0x108>)
 8005f8c:	7809      	ldrb	r1, [r1, #0]
 8005f8e:	4608      	mov	r0, r1
 8005f90:	4413      	add	r3, r2
 8005f92:	b299      	uxth	r1, r3
 8005f94:	4a2d      	ldr	r2, [pc, #180]	; (800604c <USAR_UART_IDLECallback+0x10c>)
 8005f96:	0083      	lsls	r3, r0, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	460a      	mov	r2, r1
 8005f9c:	805a      	strh	r2, [r3, #2]

	printf("coordinate_X = %x\r\n", coordinate_XY[i][0]);
 8005f9e:	4b2a      	ldr	r3, [pc, #168]	; (8006048 <USAR_UART_IDLECallback+0x108>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	4b29      	ldr	r3, [pc, #164]	; (800604c <USAR_UART_IDLECallback+0x10c>)
 8005fa6:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8005faa:	4619      	mov	r1, r3
 8005fac:	4828      	ldr	r0, [pc, #160]	; (8006050 <USAR_UART_IDLECallback+0x110>)
 8005fae:	f004 ff45 	bl	800ae3c <iprintf>
	printf("coordinate_Y = %x\r\n", coordinate_XY[i][1]);
 8005fb2:	4b25      	ldr	r3, [pc, #148]	; (8006048 <USAR_UART_IDLECallback+0x108>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	4a25      	ldr	r2, [pc, #148]	; (800604c <USAR_UART_IDLECallback+0x10c>)
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	885b      	ldrh	r3, [r3, #2]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	4824      	ldr	r0, [pc, #144]	; (8006054 <USAR_UART_IDLECallback+0x114>)
 8005fc2:	f004 ff3b 	bl	800ae3c <iprintf>
	i++;
 8005fc6:	4b20      	ldr	r3, [pc, #128]	; (8006048 <USAR_UART_IDLECallback+0x108>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	4b1e      	ldr	r3, [pc, #120]	; (8006048 <USAR_UART_IDLECallback+0x108>)
 8005fd0:	701a      	strb	r2, [r3, #0]
	if (i >= 31) {
 8005fd2:	4b1d      	ldr	r3, [pc, #116]	; (8006048 <USAR_UART_IDLECallback+0x108>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b1e      	cmp	r3, #30
 8005fd8:	d902      	bls.n	8005fe0 <USAR_UART_IDLECallback+0xa0>
		i = 0;
 8005fda:	4b1b      	ldr	r3, [pc, #108]	; (8006048 <USAR_UART_IDLECallback+0x108>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	701a      	strb	r2, [r3, #0]
	}
	// 测试函数：将接收到的数据打印出去
	printf("Receive Data(length = %d): \r\n", data_length);
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	481c      	ldr	r0, [pc, #112]	; (8006058 <USAR_UART_IDLECallback+0x118>)
 8005fe6:	f004 ff29 	bl	800ae3c <iprintf>
	printf("receive_buff[0] = %x\r\n", receive_buff[0]);
 8005fea:	4b16      	ldr	r3, [pc, #88]	; (8006044 <USAR_UART_IDLECallback+0x104>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	481a      	ldr	r0, [pc, #104]	; (800605c <USAR_UART_IDLECallback+0x11c>)
 8005ff2:	f004 ff23 	bl	800ae3c <iprintf>
	printf("receive_buff[1] = %x\r\n", receive_buff[1]);
 8005ff6:	4b13      	ldr	r3, [pc, #76]	; (8006044 <USAR_UART_IDLECallback+0x104>)
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	4818      	ldr	r0, [pc, #96]	; (8006060 <USAR_UART_IDLECallback+0x120>)
 8005ffe:	f004 ff1d 	bl	800ae3c <iprintf>
	printf("receive_buff[2] = %x\r\n", receive_buff[2]);
 8006002:	4b10      	ldr	r3, [pc, #64]	; (8006044 <USAR_UART_IDLECallback+0x104>)
 8006004:	789b      	ldrb	r3, [r3, #2]
 8006006:	4619      	mov	r1, r3
 8006008:	4816      	ldr	r0, [pc, #88]	; (8006064 <USAR_UART_IDLECallback+0x124>)
 800600a:	f004 ff17 	bl	800ae3c <iprintf>
	printf("receive_buff[3] = %x\r\n", receive_buff[3]);
 800600e:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <USAR_UART_IDLECallback+0x104>)
 8006010:	78db      	ldrb	r3, [r3, #3]
 8006012:	4619      	mov	r1, r3
 8006014:	4814      	ldr	r0, [pc, #80]	; (8006068 <USAR_UART_IDLECallback+0x128>)
 8006016:	f004 ff11 	bl	800ae3c <iprintf>

	// 清零接收缓冲区
	memset(receive_buff, 0, data_length);
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	461a      	mov	r2, r3
 800601e:	2100      	movs	r1, #0
 8006020:	4808      	ldr	r0, [pc, #32]	; (8006044 <USAR_UART_IDLECallback+0x104>)
 8006022:	f004 fa99 	bl	800a558 <memset>
	data_length = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	73fb      	strb	r3, [r7, #15]

	// 重启开始DMA传输 每次255字节数据
	HAL_UART_Receive_DMA(&huart1, (uint8_t*) receive_buff, 32);
 800602a:	2220      	movs	r2, #32
 800602c:	4905      	ldr	r1, [pc, #20]	; (8006044 <USAR_UART_IDLECallback+0x104>)
 800602e:	4803      	ldr	r0, [pc, #12]	; (800603c <USAR_UART_IDLECallback+0xfc>)
 8006030:	f003 fafb 	bl	800962a <HAL_UART_Receive_DMA>
}
 8006034:	bf00      	nop
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	20000558 	.word	0x20000558
 8006040:	200004f8 	.word	0x200004f8
 8006044:	20000208 	.word	0x20000208
 8006048:	200002a8 	.word	0x200002a8
 800604c:	20000228 	.word	0x20000228
 8006050:	0800d698 	.word	0x0800d698
 8006054:	0800d6ac 	.word	0x0800d6ac
 8006058:	0800d6c0 	.word	0x0800d6c0
 800605c:	0800d6e0 	.word	0x0800d6e0
 8006060:	0800d6f8 	.word	0x0800d6f8
 8006064:	0800d710 	.word	0x0800d710
 8006068:	0800d728 	.word	0x0800d728

0800606c <USER_UART_IRQHandler>:

void USER_UART_IRQHandler(UART_HandleTypeDef *huart) {	// 判断是否是串口1
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
//	printf("\r\n进入中断函数.....\r\n");
	if (USART1 == huart->Instance) {	// 判断是否是空闲中断
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a0f      	ldr	r2, [pc, #60]	; (80060b8 <USER_UART_IRQHandler+0x4c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d117      	bne.n	80060ae <USER_UART_IRQHandler+0x42>
		if (RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {// 清除空闲中断标志（否则会一直不断进入中断）
 800607e:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <USER_UART_IRQHandler+0x50>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0310 	and.w	r3, r3, #16
 8006088:	2b10      	cmp	r3, #16
 800608a:	d110      	bne.n	80060ae <USER_UART_IRQHandler+0x42>
			__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	4b0a      	ldr	r3, [pc, #40]	; (80060bc <USER_UART_IRQHandler+0x50>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	4b08      	ldr	r3, [pc, #32]	; (80060bc <USER_UART_IRQHandler+0x50>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]
			printf("UART1 Idle IQR Detected\r\n");
 80060a2:	4807      	ldr	r0, [pc, #28]	; (80060c0 <USER_UART_IRQHandler+0x54>)
 80060a4:	f004 ff50 	bl	800af48 <puts>
			// 调用中断处理函数
			USAR_UART_IDLECallback(huart);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff ff49 	bl	8005f40 <USAR_UART_IDLECallback>
		}
	}
}
 80060ae:	bf00      	nop
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	40011000 	.word	0x40011000
 80060bc:	20000558 	.word	0x20000558
 80060c0:	0800d740 	.word	0x0800d740

080060c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80060c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80060fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80060c8:	480d      	ldr	r0, [pc, #52]	; (8006100 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80060ca:	490e      	ldr	r1, [pc, #56]	; (8006104 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80060cc:	4a0e      	ldr	r2, [pc, #56]	; (8006108 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80060ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80060d0:	e002      	b.n	80060d8 <LoopCopyDataInit>

080060d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80060d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80060d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80060d6:	3304      	adds	r3, #4

080060d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80060d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80060da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80060dc:	d3f9      	bcc.n	80060d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80060de:	4a0b      	ldr	r2, [pc, #44]	; (800610c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80060e0:	4c0b      	ldr	r4, [pc, #44]	; (8006110 <LoopFillZerobss+0x26>)
  movs r3, #0
 80060e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80060e4:	e001      	b.n	80060ea <LoopFillZerobss>

080060e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80060e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80060e8:	3204      	adds	r2, #4

080060ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80060ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80060ec:	d3fb      	bcc.n	80060e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80060ee:	f7ff fde5 	bl	8005cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80060f2:	f004 fa0d 	bl	800a510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80060f6:	f7ff fbdd 	bl	80058b4 <main>
  bx  lr    
 80060fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80060fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006104:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8006108:	0801a844 	.word	0x0801a844
  ldr r2, =_sbss
 800610c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8006110:	200005b0 	.word	0x200005b0

08006114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006114:	e7fe      	b.n	8006114 <ADC_IRQHandler>
	...

08006118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800611c:	4b0e      	ldr	r3, [pc, #56]	; (8006158 <HAL_Init+0x40>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a0d      	ldr	r2, [pc, #52]	; (8006158 <HAL_Init+0x40>)
 8006122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006126:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006128:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <HAL_Init+0x40>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a0a      	ldr	r2, [pc, #40]	; (8006158 <HAL_Init+0x40>)
 800612e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006132:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006134:	4b08      	ldr	r3, [pc, #32]	; (8006158 <HAL_Init+0x40>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a07      	ldr	r2, [pc, #28]	; (8006158 <HAL_Init+0x40>)
 800613a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800613e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006140:	2003      	movs	r0, #3
 8006142:	f000 f94f 	bl	80063e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006146:	2000      	movs	r0, #0
 8006148:	f000 f808 	bl	800615c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800614c:	f7ff fc3a 	bl	80059c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	40023c00 	.word	0x40023c00

0800615c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006164:	4b12      	ldr	r3, [pc, #72]	; (80061b0 <HAL_InitTick+0x54>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	4b12      	ldr	r3, [pc, #72]	; (80061b4 <HAL_InitTick+0x58>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	4619      	mov	r1, r3
 800616e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006172:	fbb3 f3f1 	udiv	r3, r3, r1
 8006176:	fbb2 f3f3 	udiv	r3, r2, r3
 800617a:	4618      	mov	r0, r3
 800617c:	f000 f967 	bl	800644e <HAL_SYSTICK_Config>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e00e      	b.n	80061a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b0f      	cmp	r3, #15
 800618e:	d80a      	bhi.n	80061a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006190:	2200      	movs	r2, #0
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	f04f 30ff 	mov.w	r0, #4294967295
 8006198:	f000 f92f 	bl	80063fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800619c:	4a06      	ldr	r2, [pc, #24]	; (80061b8 <HAL_InitTick+0x5c>)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	e000      	b.n	80061a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20000008 	.word	0x20000008
 80061b4:	20000010 	.word	0x20000010
 80061b8:	2000000c 	.word	0x2000000c

080061bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80061c0:	4b06      	ldr	r3, [pc, #24]	; (80061dc <HAL_IncTick+0x20>)
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	461a      	mov	r2, r3
 80061c6:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <HAL_IncTick+0x24>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4413      	add	r3, r2
 80061cc:	4a04      	ldr	r2, [pc, #16]	; (80061e0 <HAL_IncTick+0x24>)
 80061ce:	6013      	str	r3, [r2, #0]
}
 80061d0:	bf00      	nop
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	20000010 	.word	0x20000010
 80061e0:	2000059c 	.word	0x2000059c

080061e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80061e4:	b480      	push	{r7}
 80061e6:	af00      	add	r7, sp, #0
  return uwTick;
 80061e8:	4b03      	ldr	r3, [pc, #12]	; (80061f8 <HAL_GetTick+0x14>)
 80061ea:	681b      	ldr	r3, [r3, #0]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	2000059c 	.word	0x2000059c

080061fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006204:	f7ff ffee 	bl	80061e4 <HAL_GetTick>
 8006208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006214:	d005      	beq.n	8006222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006216:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <HAL_Delay+0x44>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4413      	add	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006222:	bf00      	nop
 8006224:	f7ff ffde 	bl	80061e4 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	429a      	cmp	r2, r3
 8006232:	d8f7      	bhi.n	8006224 <HAL_Delay+0x28>
  {
  }
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	20000010 	.word	0x20000010

08006244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f003 0307 	and.w	r3, r3, #7
 8006252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006254:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <__NVIC_SetPriorityGrouping+0x44>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006260:	4013      	ands	r3, r2
 8006262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800626c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006276:	4a04      	ldr	r2, [pc, #16]	; (8006288 <__NVIC_SetPriorityGrouping+0x44>)
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	60d3      	str	r3, [r2, #12]
}
 800627c:	bf00      	nop
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	e000ed00 	.word	0xe000ed00

0800628c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006290:	4b04      	ldr	r3, [pc, #16]	; (80062a4 <__NVIC_GetPriorityGrouping+0x18>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	0a1b      	lsrs	r3, r3, #8
 8006296:	f003 0307 	and.w	r3, r3, #7
}
 800629a:	4618      	mov	r0, r3
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	e000ed00 	.word	0xe000ed00

080062a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	4603      	mov	r3, r0
 80062b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	db0b      	blt.n	80062d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062ba:	79fb      	ldrb	r3, [r7, #7]
 80062bc:	f003 021f 	and.w	r2, r3, #31
 80062c0:	4907      	ldr	r1, [pc, #28]	; (80062e0 <__NVIC_EnableIRQ+0x38>)
 80062c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	2001      	movs	r0, #1
 80062ca:	fa00 f202 	lsl.w	r2, r0, r2
 80062ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80062d2:	bf00      	nop
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	e000e100 	.word	0xe000e100

080062e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	4603      	mov	r3, r0
 80062ec:	6039      	str	r1, [r7, #0]
 80062ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	db0a      	blt.n	800630e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	490c      	ldr	r1, [pc, #48]	; (8006330 <__NVIC_SetPriority+0x4c>)
 80062fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006302:	0112      	lsls	r2, r2, #4
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	440b      	add	r3, r1
 8006308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800630c:	e00a      	b.n	8006324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	b2da      	uxtb	r2, r3
 8006312:	4908      	ldr	r1, [pc, #32]	; (8006334 <__NVIC_SetPriority+0x50>)
 8006314:	79fb      	ldrb	r3, [r7, #7]
 8006316:	f003 030f 	and.w	r3, r3, #15
 800631a:	3b04      	subs	r3, #4
 800631c:	0112      	lsls	r2, r2, #4
 800631e:	b2d2      	uxtb	r2, r2
 8006320:	440b      	add	r3, r1
 8006322:	761a      	strb	r2, [r3, #24]
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	e000e100 	.word	0xe000e100
 8006334:	e000ed00 	.word	0xe000ed00

08006338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006338:	b480      	push	{r7}
 800633a:	b089      	sub	sp, #36	; 0x24
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	f1c3 0307 	rsb	r3, r3, #7
 8006352:	2b04      	cmp	r3, #4
 8006354:	bf28      	it	cs
 8006356:	2304      	movcs	r3, #4
 8006358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	3304      	adds	r3, #4
 800635e:	2b06      	cmp	r3, #6
 8006360:	d902      	bls.n	8006368 <NVIC_EncodePriority+0x30>
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	3b03      	subs	r3, #3
 8006366:	e000      	b.n	800636a <NVIC_EncodePriority+0x32>
 8006368:	2300      	movs	r3, #0
 800636a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800636c:	f04f 32ff 	mov.w	r2, #4294967295
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	fa02 f303 	lsl.w	r3, r2, r3
 8006376:	43da      	mvns	r2, r3
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	401a      	ands	r2, r3
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006380:	f04f 31ff 	mov.w	r1, #4294967295
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	fa01 f303 	lsl.w	r3, r1, r3
 800638a:	43d9      	mvns	r1, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006390:	4313      	orrs	r3, r2
         );
}
 8006392:	4618      	mov	r0, r3
 8006394:	3724      	adds	r7, #36	; 0x24
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
	...

080063a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063b0:	d301      	bcc.n	80063b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063b2:	2301      	movs	r3, #1
 80063b4:	e00f      	b.n	80063d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063b6:	4a0a      	ldr	r2, [pc, #40]	; (80063e0 <SysTick_Config+0x40>)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063be:	210f      	movs	r1, #15
 80063c0:	f04f 30ff 	mov.w	r0, #4294967295
 80063c4:	f7ff ff8e 	bl	80062e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063c8:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <SysTick_Config+0x40>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063ce:	4b04      	ldr	r3, [pc, #16]	; (80063e0 <SysTick_Config+0x40>)
 80063d0:	2207      	movs	r2, #7
 80063d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	e000e010 	.word	0xe000e010

080063e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff ff29 	bl	8006244 <__NVIC_SetPriorityGrouping>
}
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b086      	sub	sp, #24
 80063fe:	af00      	add	r7, sp, #0
 8006400:	4603      	mov	r3, r0
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	607a      	str	r2, [r7, #4]
 8006406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006408:	2300      	movs	r3, #0
 800640a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800640c:	f7ff ff3e 	bl	800628c <__NVIC_GetPriorityGrouping>
 8006410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	6978      	ldr	r0, [r7, #20]
 8006418:	f7ff ff8e 	bl	8006338 <NVIC_EncodePriority>
 800641c:	4602      	mov	r2, r0
 800641e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006422:	4611      	mov	r1, r2
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff ff5d 	bl	80062e4 <__NVIC_SetPriority>
}
 800642a:	bf00      	nop
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b082      	sub	sp, #8
 8006436:	af00      	add	r7, sp, #0
 8006438:	4603      	mov	r3, r0
 800643a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800643c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006440:	4618      	mov	r0, r3
 8006442:	f7ff ff31 	bl	80062a8 <__NVIC_EnableIRQ>
}
 8006446:	bf00      	nop
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b082      	sub	sp, #8
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7ff ffa2 	bl	80063a0 <SysTick_Config>
 800645c:	4603      	mov	r3, r0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006474:	f7ff feb6 	bl	80061e4 <HAL_GetTick>
 8006478:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e099      	b.n	80065b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0201 	bic.w	r2, r2, #1
 80064a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064a4:	e00f      	b.n	80064c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064a6:	f7ff fe9d 	bl	80061e4 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b05      	cmp	r3, #5
 80064b2:	d908      	bls.n	80064c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2220      	movs	r2, #32
 80064b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2203      	movs	r2, #3
 80064be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e078      	b.n	80065b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e8      	bne.n	80064a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	4b38      	ldr	r3, [pc, #224]	; (80065c0 <HAL_DMA_Init+0x158>)
 80064e0:	4013      	ands	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800650a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	2b04      	cmp	r3, #4
 800651e:	d107      	bne.n	8006530 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006528:	4313      	orrs	r3, r2
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f023 0307 	bic.w	r3, r3, #7
 8006546:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	2b04      	cmp	r3, #4
 8006558:	d117      	bne.n	800658a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00e      	beq.n	800658a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fb01 	bl	8006b74 <DMA_CheckFifoParam>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d008      	beq.n	800658a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2240      	movs	r2, #64	; 0x40
 800657c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006586:	2301      	movs	r3, #1
 8006588:	e016      	b.n	80065b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fab8 	bl	8006b08 <DMA_CalcBaseAndBitshift>
 8006598:	4603      	mov	r3, r0
 800659a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a0:	223f      	movs	r2, #63	; 0x3f
 80065a2:	409a      	lsls	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3718      	adds	r7, #24
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	f010803f 	.word	0xf010803f

080065c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d101      	bne.n	80065ea <HAL_DMA_Start_IT+0x26>
 80065e6:	2302      	movs	r3, #2
 80065e8:	e040      	b.n	800666c <HAL_DMA_Start_IT+0xa8>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d12f      	bne.n	800665e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2202      	movs	r2, #2
 8006602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 fa4a 	bl	8006aac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800661c:	223f      	movs	r2, #63	; 0x3f
 800661e:	409a      	lsls	r2, r3
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0216 	orr.w	r2, r2, #22
 8006632:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	2b00      	cmp	r3, #0
 800663a:	d007      	beq.n	800664c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0208 	orr.w	r2, r2, #8
 800664a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f042 0201 	orr.w	r2, r2, #1
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	e005      	b.n	800666a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006666:	2302      	movs	r3, #2
 8006668:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800666a:	7dfb      	ldrb	r3, [r7, #23]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3718      	adds	r7, #24
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006680:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006682:	f7ff fdaf 	bl	80061e4 <HAL_GetTick>
 8006686:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d008      	beq.n	80066a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2280      	movs	r2, #128	; 0x80
 8006698:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e052      	b.n	800674c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0216 	bic.w	r2, r2, #22
 80066b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695a      	ldr	r2, [r3, #20]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d103      	bne.n	80066d6 <HAL_DMA_Abort+0x62>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d007      	beq.n	80066e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0208 	bic.w	r2, r2, #8
 80066e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0201 	bic.w	r2, r2, #1
 80066f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066f6:	e013      	b.n	8006720 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066f8:	f7ff fd74 	bl	80061e4 <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	2b05      	cmp	r3, #5
 8006704:	d90c      	bls.n	8006720 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2220      	movs	r2, #32
 800670a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2203      	movs	r2, #3
 8006718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e015      	b.n	800674c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e4      	bne.n	80066f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006732:	223f      	movs	r2, #63	; 0x3f
 8006734:	409a      	lsls	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b02      	cmp	r3, #2
 8006766:	d004      	beq.n	8006772 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2280      	movs	r2, #128	; 0x80
 800676c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e00c      	b.n	800678c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2205      	movs	r2, #5
 8006776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0201 	bic.w	r2, r2, #1
 8006788:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80067a4:	4b92      	ldr	r3, [pc, #584]	; (80069f0 <HAL_DMA_IRQHandler+0x258>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a92      	ldr	r2, [pc, #584]	; (80069f4 <HAL_DMA_IRQHandler+0x25c>)
 80067aa:	fba2 2303 	umull	r2, r3, r2, r3
 80067ae:	0a9b      	lsrs	r3, r3, #10
 80067b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c2:	2208      	movs	r2, #8
 80067c4:	409a      	lsls	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4013      	ands	r3, r2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d01a      	beq.n	8006804 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d013      	beq.n	8006804 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 0204 	bic.w	r2, r2, #4
 80067ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f0:	2208      	movs	r2, #8
 80067f2:	409a      	lsls	r2, r3
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fc:	f043 0201 	orr.w	r2, r3, #1
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006808:	2201      	movs	r2, #1
 800680a:	409a      	lsls	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4013      	ands	r3, r2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d012      	beq.n	800683a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00b      	beq.n	800683a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006826:	2201      	movs	r2, #1
 8006828:	409a      	lsls	r2, r3
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006832:	f043 0202 	orr.w	r2, r3, #2
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683e:	2204      	movs	r2, #4
 8006840:	409a      	lsls	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	4013      	ands	r3, r2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d012      	beq.n	8006870 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00b      	beq.n	8006870 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800685c:	2204      	movs	r2, #4
 800685e:	409a      	lsls	r2, r3
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006868:	f043 0204 	orr.w	r2, r3, #4
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006874:	2210      	movs	r2, #16
 8006876:	409a      	lsls	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4013      	ands	r3, r2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d043      	beq.n	8006908 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0308 	and.w	r3, r3, #8
 800688a:	2b00      	cmp	r3, #0
 800688c:	d03c      	beq.n	8006908 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006892:	2210      	movs	r2, #16
 8006894:	409a      	lsls	r2, r3
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d018      	beq.n	80068da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d108      	bne.n	80068c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d024      	beq.n	8006908 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
 80068c6:	e01f      	b.n	8006908 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d01b      	beq.n	8006908 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	4798      	blx	r3
 80068d8:	e016      	b.n	8006908 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d107      	bne.n	80068f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0208 	bic.w	r2, r2, #8
 80068f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690c:	2220      	movs	r2, #32
 800690e:	409a      	lsls	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4013      	ands	r3, r2
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 808e 	beq.w	8006a36 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0310 	and.w	r3, r3, #16
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8086 	beq.w	8006a36 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800692e:	2220      	movs	r2, #32
 8006930:	409a      	lsls	r2, r3
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b05      	cmp	r3, #5
 8006940:	d136      	bne.n	80069b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0216 	bic.w	r2, r2, #22
 8006950:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	695a      	ldr	r2, [r3, #20]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006960:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	2b00      	cmp	r3, #0
 8006968:	d103      	bne.n	8006972 <HAL_DMA_IRQHandler+0x1da>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800696e:	2b00      	cmp	r3, #0
 8006970:	d007      	beq.n	8006982 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 0208 	bic.w	r2, r2, #8
 8006980:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006986:	223f      	movs	r2, #63	; 0x3f
 8006988:	409a      	lsls	r2, r3
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d07d      	beq.n	8006aa2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	4798      	blx	r3
        }
        return;
 80069ae:	e078      	b.n	8006aa2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d01c      	beq.n	80069f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d108      	bne.n	80069de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d030      	beq.n	8006a36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	4798      	blx	r3
 80069dc:	e02b      	b.n	8006a36 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d027      	beq.n	8006a36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	4798      	blx	r3
 80069ee:	e022      	b.n	8006a36 <HAL_DMA_IRQHandler+0x29e>
 80069f0:	20000008 	.word	0x20000008
 80069f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10f      	bne.n	8006a26 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0210 	bic.w	r2, r2, #16
 8006a14:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d032      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d022      	beq.n	8006a90 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2205      	movs	r2, #5
 8006a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0201 	bic.w	r2, r2, #1
 8006a60:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	3301      	adds	r3, #1
 8006a66:	60bb      	str	r3, [r7, #8]
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d307      	bcc.n	8006a7e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1f2      	bne.n	8006a62 <HAL_DMA_IRQHandler+0x2ca>
 8006a7c:	e000      	b.n	8006a80 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006a7e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d005      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	4798      	blx	r3
 8006aa0:	e000      	b.n	8006aa4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006aa2:	bf00      	nop
    }
  }
}
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop

08006aac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
 8006ab8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ac8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	2b40      	cmp	r3, #64	; 0x40
 8006ad8:	d108      	bne.n	8006aec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006aea:	e007      	b.n	8006afc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	60da      	str	r2, [r3, #12]
}
 8006afc:	bf00      	nop
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	3b10      	subs	r3, #16
 8006b18:	4a14      	ldr	r2, [pc, #80]	; (8006b6c <DMA_CalcBaseAndBitshift+0x64>)
 8006b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1e:	091b      	lsrs	r3, r3, #4
 8006b20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006b22:	4a13      	ldr	r2, [pc, #76]	; (8006b70 <DMA_CalcBaseAndBitshift+0x68>)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4413      	add	r3, r2
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d909      	bls.n	8006b4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006b3e:	f023 0303 	bic.w	r3, r3, #3
 8006b42:	1d1a      	adds	r2, r3, #4
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	659a      	str	r2, [r3, #88]	; 0x58
 8006b48:	e007      	b.n	8006b5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006b52:	f023 0303 	bic.w	r3, r3, #3
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	aaaaaaab 	.word	0xaaaaaaab
 8006b70:	0801a44c 	.word	0x0801a44c

08006b74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d11f      	bne.n	8006bce <DMA_CheckFifoParam+0x5a>
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d856      	bhi.n	8006c42 <DMA_CheckFifoParam+0xce>
 8006b94:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <DMA_CheckFifoParam+0x28>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006bad 	.word	0x08006bad
 8006ba0:	08006bbf 	.word	0x08006bbf
 8006ba4:	08006bad 	.word	0x08006bad
 8006ba8:	08006c43 	.word	0x08006c43
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d046      	beq.n	8006c46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bbc:	e043      	b.n	8006c46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006bc6:	d140      	bne.n	8006c4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bcc:	e03d      	b.n	8006c4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bd6:	d121      	bne.n	8006c1c <DMA_CheckFifoParam+0xa8>
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d837      	bhi.n	8006c4e <DMA_CheckFifoParam+0xda>
 8006bde:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <DMA_CheckFifoParam+0x70>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006bf5 	.word	0x08006bf5
 8006be8:	08006bfb 	.word	0x08006bfb
 8006bec:	08006bf5 	.word	0x08006bf5
 8006bf0:	08006c0d 	.word	0x08006c0d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf8:	e030      	b.n	8006c5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d025      	beq.n	8006c52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c0a:	e022      	b.n	8006c52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c14:	d11f      	bne.n	8006c56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006c1a:	e01c      	b.n	8006c56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d903      	bls.n	8006c2a <DMA_CheckFifoParam+0xb6>
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d003      	beq.n	8006c30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006c28:	e018      	b.n	8006c5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c2e:	e015      	b.n	8006c5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00e      	beq.n	8006c5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c40:	e00b      	b.n	8006c5a <DMA_CheckFifoParam+0xe6>
      break;
 8006c42:	bf00      	nop
 8006c44:	e00a      	b.n	8006c5c <DMA_CheckFifoParam+0xe8>
      break;
 8006c46:	bf00      	nop
 8006c48:	e008      	b.n	8006c5c <DMA_CheckFifoParam+0xe8>
      break;
 8006c4a:	bf00      	nop
 8006c4c:	e006      	b.n	8006c5c <DMA_CheckFifoParam+0xe8>
      break;
 8006c4e:	bf00      	nop
 8006c50:	e004      	b.n	8006c5c <DMA_CheckFifoParam+0xe8>
      break;
 8006c52:	bf00      	nop
 8006c54:	e002      	b.n	8006c5c <DMA_CheckFifoParam+0xe8>
      break;   
 8006c56:	bf00      	nop
 8006c58:	e000      	b.n	8006c5c <DMA_CheckFifoParam+0xe8>
      break;
 8006c5a:	bf00      	nop
    }
  } 
  
  return status; 
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop

08006c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b089      	sub	sp, #36	; 0x24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c82:	2300      	movs	r3, #0
 8006c84:	61fb      	str	r3, [r7, #28]
 8006c86:	e16b      	b.n	8006f60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c88:	2201      	movs	r2, #1
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	f040 815a 	bne.w	8006f5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d005      	beq.n	8006cbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d130      	bne.n	8006d20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	005b      	lsls	r3, r3, #1
 8006cc8:	2203      	movs	r2, #3
 8006cca:	fa02 f303 	lsl.w	r3, r2, r3
 8006cce:	43db      	mvns	r3, r3
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	68da      	ldr	r2, [r3, #12]
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce2:	69ba      	ldr	r2, [r7, #24]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfc:	43db      	mvns	r3, r3
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	4013      	ands	r3, r2
 8006d02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	091b      	lsrs	r3, r3, #4
 8006d0a:	f003 0201 	and.w	r2, r3, #1
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	fa02 f303 	lsl.w	r3, r2, r3
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f003 0303 	and.w	r3, r3, #3
 8006d28:	2b03      	cmp	r3, #3
 8006d2a:	d017      	beq.n	8006d5c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	2203      	movs	r2, #3
 8006d38:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3c:	43db      	mvns	r3, r3
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	4013      	ands	r3, r2
 8006d42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	689a      	ldr	r2, [r3, #8]
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	005b      	lsls	r3, r3, #1
 8006d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f003 0303 	and.w	r3, r3, #3
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d123      	bne.n	8006db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	08da      	lsrs	r2, r3, #3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3208      	adds	r2, #8
 8006d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	f003 0307 	and.w	r3, r3, #7
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	220f      	movs	r2, #15
 8006d80:	fa02 f303 	lsl.w	r3, r2, r3
 8006d84:	43db      	mvns	r3, r3
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	4013      	ands	r3, r2
 8006d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	691a      	ldr	r2, [r3, #16]
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	08da      	lsrs	r2, r3, #3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3208      	adds	r2, #8
 8006daa:	69b9      	ldr	r1, [r7, #24]
 8006dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	2203      	movs	r2, #3
 8006dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc0:	43db      	mvns	r3, r3
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f003 0203 	and.w	r2, r3, #3
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	69ba      	ldr	r2, [r7, #24]
 8006de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 80b4 	beq.w	8006f5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006df2:	2300      	movs	r3, #0
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	4b60      	ldr	r3, [pc, #384]	; (8006f78 <HAL_GPIO_Init+0x30c>)
 8006df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfa:	4a5f      	ldr	r2, [pc, #380]	; (8006f78 <HAL_GPIO_Init+0x30c>)
 8006dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e00:	6453      	str	r3, [r2, #68]	; 0x44
 8006e02:	4b5d      	ldr	r3, [pc, #372]	; (8006f78 <HAL_GPIO_Init+0x30c>)
 8006e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e0e:	4a5b      	ldr	r2, [pc, #364]	; (8006f7c <HAL_GPIO_Init+0x310>)
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	089b      	lsrs	r3, r3, #2
 8006e14:	3302      	adds	r3, #2
 8006e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	f003 0303 	and.w	r3, r3, #3
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	220f      	movs	r2, #15
 8006e26:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2a:	43db      	mvns	r3, r3
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	4013      	ands	r3, r2
 8006e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a52      	ldr	r2, [pc, #328]	; (8006f80 <HAL_GPIO_Init+0x314>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d02b      	beq.n	8006e92 <HAL_GPIO_Init+0x226>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a51      	ldr	r2, [pc, #324]	; (8006f84 <HAL_GPIO_Init+0x318>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d025      	beq.n	8006e8e <HAL_GPIO_Init+0x222>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a50      	ldr	r2, [pc, #320]	; (8006f88 <HAL_GPIO_Init+0x31c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d01f      	beq.n	8006e8a <HAL_GPIO_Init+0x21e>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a4f      	ldr	r2, [pc, #316]	; (8006f8c <HAL_GPIO_Init+0x320>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d019      	beq.n	8006e86 <HAL_GPIO_Init+0x21a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a4e      	ldr	r2, [pc, #312]	; (8006f90 <HAL_GPIO_Init+0x324>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d013      	beq.n	8006e82 <HAL_GPIO_Init+0x216>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a4d      	ldr	r2, [pc, #308]	; (8006f94 <HAL_GPIO_Init+0x328>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d00d      	beq.n	8006e7e <HAL_GPIO_Init+0x212>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a4c      	ldr	r2, [pc, #304]	; (8006f98 <HAL_GPIO_Init+0x32c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d007      	beq.n	8006e7a <HAL_GPIO_Init+0x20e>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a4b      	ldr	r2, [pc, #300]	; (8006f9c <HAL_GPIO_Init+0x330>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d101      	bne.n	8006e76 <HAL_GPIO_Init+0x20a>
 8006e72:	2307      	movs	r3, #7
 8006e74:	e00e      	b.n	8006e94 <HAL_GPIO_Init+0x228>
 8006e76:	2308      	movs	r3, #8
 8006e78:	e00c      	b.n	8006e94 <HAL_GPIO_Init+0x228>
 8006e7a:	2306      	movs	r3, #6
 8006e7c:	e00a      	b.n	8006e94 <HAL_GPIO_Init+0x228>
 8006e7e:	2305      	movs	r3, #5
 8006e80:	e008      	b.n	8006e94 <HAL_GPIO_Init+0x228>
 8006e82:	2304      	movs	r3, #4
 8006e84:	e006      	b.n	8006e94 <HAL_GPIO_Init+0x228>
 8006e86:	2303      	movs	r3, #3
 8006e88:	e004      	b.n	8006e94 <HAL_GPIO_Init+0x228>
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	e002      	b.n	8006e94 <HAL_GPIO_Init+0x228>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <HAL_GPIO_Init+0x228>
 8006e92:	2300      	movs	r3, #0
 8006e94:	69fa      	ldr	r2, [r7, #28]
 8006e96:	f002 0203 	and.w	r2, r2, #3
 8006e9a:	0092      	lsls	r2, r2, #2
 8006e9c:	4093      	lsls	r3, r2
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ea4:	4935      	ldr	r1, [pc, #212]	; (8006f7c <HAL_GPIO_Init+0x310>)
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	089b      	lsrs	r3, r3, #2
 8006eaa:	3302      	adds	r3, #2
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006eb2:	4b3b      	ldr	r3, [pc, #236]	; (8006fa0 <HAL_GPIO_Init+0x334>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	43db      	mvns	r3, r3
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ed6:	4a32      	ldr	r2, [pc, #200]	; (8006fa0 <HAL_GPIO_Init+0x334>)
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006edc:	4b30      	ldr	r3, [pc, #192]	; (8006fa0 <HAL_GPIO_Init+0x334>)
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d003      	beq.n	8006f00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f00:	4a27      	ldr	r2, [pc, #156]	; (8006fa0 <HAL_GPIO_Init+0x334>)
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f06:	4b26      	ldr	r3, [pc, #152]	; (8006fa0 <HAL_GPIO_Init+0x334>)
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	43db      	mvns	r3, r3
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	4013      	ands	r3, r2
 8006f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d003      	beq.n	8006f2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006f2a:	4a1d      	ldr	r2, [pc, #116]	; (8006fa0 <HAL_GPIO_Init+0x334>)
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006f30:	4b1b      	ldr	r3, [pc, #108]	; (8006fa0 <HAL_GPIO_Init+0x334>)
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	43db      	mvns	r3, r3
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f54:	4a12      	ldr	r2, [pc, #72]	; (8006fa0 <HAL_GPIO_Init+0x334>)
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	61fb      	str	r3, [r7, #28]
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	2b0f      	cmp	r3, #15
 8006f64:	f67f ae90 	bls.w	8006c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	3724      	adds	r7, #36	; 0x24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40023800 	.word	0x40023800
 8006f7c:	40013800 	.word	0x40013800
 8006f80:	40020000 	.word	0x40020000
 8006f84:	40020400 	.word	0x40020400
 8006f88:	40020800 	.word	0x40020800
 8006f8c:	40020c00 	.word	0x40020c00
 8006f90:	40021000 	.word	0x40021000
 8006f94:	40021400 	.word	0x40021400
 8006f98:	40021800 	.word	0x40021800
 8006f9c:	40021c00 	.word	0x40021c00
 8006fa0:	40013c00 	.word	0x40013c00

08006fa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	691a      	ldr	r2, [r3, #16]
 8006fb4:	887b      	ldrh	r3, [r7, #2]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d002      	beq.n	8006fc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	73fb      	strb	r3, [r7, #15]
 8006fc0:	e001      	b.n	8006fc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	807b      	strh	r3, [r7, #2]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006fe4:	787b      	ldrb	r3, [r7, #1]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fea:	887a      	ldrh	r2, [r7, #2]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006ff0:	e003      	b.n	8006ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006ff2:	887b      	ldrh	r3, [r7, #2]
 8006ff4:	041a      	lsls	r2, r3, #16
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	619a      	str	r2, [r3, #24]
}
 8006ffa:	bf00      	nop
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
	...

08007008 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007012:	4b08      	ldr	r3, [pc, #32]	; (8007034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007014:	695a      	ldr	r2, [r3, #20]
 8007016:	88fb      	ldrh	r3, [r7, #6]
 8007018:	4013      	ands	r3, r2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d006      	beq.n	800702c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800701e:	4a05      	ldr	r2, [pc, #20]	; (8007034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007020:	88fb      	ldrh	r3, [r7, #6]
 8007022:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007024:	88fb      	ldrh	r3, [r7, #6]
 8007026:	4618      	mov	r0, r3
 8007028:	f000 f806 	bl	8007038 <HAL_GPIO_EXTI_Callback>
  }
}
 800702c:	bf00      	nop
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	40013c00 	.word	0x40013c00

08007038 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
	...

08007050 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e12b      	b.n	80072ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d106      	bne.n	800707c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7fe fbd4 	bl	8005824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2224      	movs	r2, #36	; 0x24
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 0201 	bic.w	r2, r2, #1
 8007092:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80070b4:	f001 fd58 	bl	8008b68 <HAL_RCC_GetPCLK1Freq>
 80070b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	4a81      	ldr	r2, [pc, #516]	; (80072c4 <HAL_I2C_Init+0x274>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d807      	bhi.n	80070d4 <HAL_I2C_Init+0x84>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4a80      	ldr	r2, [pc, #512]	; (80072c8 <HAL_I2C_Init+0x278>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	bf94      	ite	ls
 80070cc:	2301      	movls	r3, #1
 80070ce:	2300      	movhi	r3, #0
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	e006      	b.n	80070e2 <HAL_I2C_Init+0x92>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4a7d      	ldr	r2, [pc, #500]	; (80072cc <HAL_I2C_Init+0x27c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	bf94      	ite	ls
 80070dc:	2301      	movls	r3, #1
 80070de:	2300      	movhi	r3, #0
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e0e7      	b.n	80072ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	4a78      	ldr	r2, [pc, #480]	; (80072d0 <HAL_I2C_Init+0x280>)
 80070ee:	fba2 2303 	umull	r2, r3, r2, r3
 80070f2:	0c9b      	lsrs	r3, r3, #18
 80070f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	430a      	orrs	r2, r1
 8007108:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	4a6a      	ldr	r2, [pc, #424]	; (80072c4 <HAL_I2C_Init+0x274>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d802      	bhi.n	8007124 <HAL_I2C_Init+0xd4>
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	3301      	adds	r3, #1
 8007122:	e009      	b.n	8007138 <HAL_I2C_Init+0xe8>
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800712a:	fb02 f303 	mul.w	r3, r2, r3
 800712e:	4a69      	ldr	r2, [pc, #420]	; (80072d4 <HAL_I2C_Init+0x284>)
 8007130:	fba2 2303 	umull	r2, r3, r2, r3
 8007134:	099b      	lsrs	r3, r3, #6
 8007136:	3301      	adds	r3, #1
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	6812      	ldr	r2, [r2, #0]
 800713c:	430b      	orrs	r3, r1
 800713e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800714a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	495c      	ldr	r1, [pc, #368]	; (80072c4 <HAL_I2C_Init+0x274>)
 8007154:	428b      	cmp	r3, r1
 8007156:	d819      	bhi.n	800718c <HAL_I2C_Init+0x13c>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	1e59      	subs	r1, r3, #1
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	fbb1 f3f3 	udiv	r3, r1, r3
 8007166:	1c59      	adds	r1, r3, #1
 8007168:	f640 73fc 	movw	r3, #4092	; 0xffc
 800716c:	400b      	ands	r3, r1
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <HAL_I2C_Init+0x138>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1e59      	subs	r1, r3, #1
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007180:	3301      	adds	r3, #1
 8007182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007186:	e051      	b.n	800722c <HAL_I2C_Init+0x1dc>
 8007188:	2304      	movs	r3, #4
 800718a:	e04f      	b.n	800722c <HAL_I2C_Init+0x1dc>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d111      	bne.n	80071b8 <HAL_I2C_Init+0x168>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	1e58      	subs	r0, r3, #1
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6859      	ldr	r1, [r3, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	005b      	lsls	r3, r3, #1
 80071a0:	440b      	add	r3, r1
 80071a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80071a6:	3301      	adds	r3, #1
 80071a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bf0c      	ite	eq
 80071b0:	2301      	moveq	r3, #1
 80071b2:	2300      	movne	r3, #0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	e012      	b.n	80071de <HAL_I2C_Init+0x18e>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	1e58      	subs	r0, r3, #1
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6859      	ldr	r1, [r3, #4]
 80071c0:	460b      	mov	r3, r1
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	440b      	add	r3, r1
 80071c6:	0099      	lsls	r1, r3, #2
 80071c8:	440b      	add	r3, r1
 80071ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80071ce:	3301      	adds	r3, #1
 80071d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	bf0c      	ite	eq
 80071d8:	2301      	moveq	r3, #1
 80071da:	2300      	movne	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <HAL_I2C_Init+0x196>
 80071e2:	2301      	movs	r3, #1
 80071e4:	e022      	b.n	800722c <HAL_I2C_Init+0x1dc>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10e      	bne.n	800720c <HAL_I2C_Init+0x1bc>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	1e58      	subs	r0, r3, #1
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6859      	ldr	r1, [r3, #4]
 80071f6:	460b      	mov	r3, r1
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	440b      	add	r3, r1
 80071fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8007200:	3301      	adds	r3, #1
 8007202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800720a:	e00f      	b.n	800722c <HAL_I2C_Init+0x1dc>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	1e58      	subs	r0, r3, #1
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6859      	ldr	r1, [r3, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	440b      	add	r3, r1
 800721a:	0099      	lsls	r1, r3, #2
 800721c:	440b      	add	r3, r1
 800721e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007222:	3301      	adds	r3, #1
 8007224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007228:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800722c:	6879      	ldr	r1, [r7, #4]
 800722e:	6809      	ldr	r1, [r1, #0]
 8007230:	4313      	orrs	r3, r2
 8007232:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69da      	ldr	r2, [r3, #28]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	431a      	orrs	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800725a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6911      	ldr	r1, [r2, #16]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	68d2      	ldr	r2, [r2, #12]
 8007266:	4311      	orrs	r1, r2
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6812      	ldr	r2, [r2, #0]
 800726c:	430b      	orrs	r3, r1
 800726e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	695a      	ldr	r2, [r3, #20]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	431a      	orrs	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0201 	orr.w	r2, r2, #1
 800729a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2220      	movs	r2, #32
 80072a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	000186a0 	.word	0x000186a0
 80072c8:	001e847f 	.word	0x001e847f
 80072cc:	003d08ff 	.word	0x003d08ff
 80072d0:	431bde83 	.word	0x431bde83
 80072d4:	10624dd3 	.word	0x10624dd3

080072d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b088      	sub	sp, #32
 80072dc:	af02      	add	r7, sp, #8
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	607a      	str	r2, [r7, #4]
 80072e2:	461a      	mov	r2, r3
 80072e4:	460b      	mov	r3, r1
 80072e6:	817b      	strh	r3, [r7, #10]
 80072e8:	4613      	mov	r3, r2
 80072ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80072ec:	f7fe ff7a 	bl	80061e4 <HAL_GetTick>
 80072f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b20      	cmp	r3, #32
 80072fc:	f040 80e0 	bne.w	80074c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	2319      	movs	r3, #25
 8007306:	2201      	movs	r2, #1
 8007308:	4970      	ldr	r1, [pc, #448]	; (80074cc <HAL_I2C_Master_Transmit+0x1f4>)
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f000 fe02 	bl	8007f14 <I2C_WaitOnFlagUntilTimeout>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007316:	2302      	movs	r3, #2
 8007318:	e0d3      	b.n	80074c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007320:	2b01      	cmp	r3, #1
 8007322:	d101      	bne.n	8007328 <HAL_I2C_Master_Transmit+0x50>
 8007324:	2302      	movs	r3, #2
 8007326:	e0cc      	b.n	80074c2 <HAL_I2C_Master_Transmit+0x1ea>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b01      	cmp	r3, #1
 800733c:	d007      	beq.n	800734e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f042 0201 	orr.w	r2, r2, #1
 800734c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800735c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2221      	movs	r2, #33	; 0x21
 8007362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2210      	movs	r2, #16
 800736a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	893a      	ldrh	r2, [r7, #8]
 800737e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007384:	b29a      	uxth	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	4a50      	ldr	r2, [pc, #320]	; (80074d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800738e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007390:	8979      	ldrh	r1, [r7, #10]
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	6a3a      	ldr	r2, [r7, #32]
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f000 fbbc 	bl	8007b14 <I2C_MasterRequestWrite>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e08d      	b.n	80074c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073a6:	2300      	movs	r3, #0
 80073a8:	613b      	str	r3, [r7, #16]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	613b      	str	r3, [r7, #16]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	613b      	str	r3, [r7, #16]
 80073ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80073bc:	e066      	b.n	800748c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	6a39      	ldr	r1, [r7, #32]
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 fe7c 	bl	80080c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00d      	beq.n	80073ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	d107      	bne.n	80073e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e06b      	b.n	80074c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	781a      	ldrb	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007404:	b29b      	uxth	r3, r3
 8007406:	3b01      	subs	r3, #1
 8007408:	b29a      	uxth	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007412:	3b01      	subs	r3, #1
 8007414:	b29a      	uxth	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	2b04      	cmp	r3, #4
 8007426:	d11b      	bne.n	8007460 <HAL_I2C_Master_Transmit+0x188>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800742c:	2b00      	cmp	r3, #0
 800742e:	d017      	beq.n	8007460 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007434:	781a      	ldrb	r2, [r3, #0]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744a:	b29b      	uxth	r3, r3
 800744c:	3b01      	subs	r3, #1
 800744e:	b29a      	uxth	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	6a39      	ldr	r1, [r7, #32]
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 fe6c 	bl	8008142 <I2C_WaitOnBTFFlagUntilTimeout>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00d      	beq.n	800748c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007474:	2b04      	cmp	r3, #4
 8007476:	d107      	bne.n	8007488 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007486:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e01a      	b.n	80074c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007490:	2b00      	cmp	r3, #0
 8007492:	d194      	bne.n	80073be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2220      	movs	r2, #32
 80074a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80074bc:	2300      	movs	r3, #0
 80074be:	e000      	b.n	80074c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80074c0:	2302      	movs	r3, #2
  }
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	00100002 	.word	0x00100002
 80074d0:	ffff0000 	.word	0xffff0000

080074d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b088      	sub	sp, #32
 80074d8:	af02      	add	r7, sp, #8
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	4608      	mov	r0, r1
 80074de:	4611      	mov	r1, r2
 80074e0:	461a      	mov	r2, r3
 80074e2:	4603      	mov	r3, r0
 80074e4:	817b      	strh	r3, [r7, #10]
 80074e6:	460b      	mov	r3, r1
 80074e8:	813b      	strh	r3, [r7, #8]
 80074ea:	4613      	mov	r3, r2
 80074ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80074ee:	f7fe fe79 	bl	80061e4 <HAL_GetTick>
 80074f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b20      	cmp	r3, #32
 80074fe:	f040 80d9 	bne.w	80076b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	2319      	movs	r3, #25
 8007508:	2201      	movs	r2, #1
 800750a:	496d      	ldr	r1, [pc, #436]	; (80076c0 <HAL_I2C_Mem_Write+0x1ec>)
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f000 fd01 	bl	8007f14 <I2C_WaitOnFlagUntilTimeout>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d001      	beq.n	800751c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007518:	2302      	movs	r3, #2
 800751a:	e0cc      	b.n	80076b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007522:	2b01      	cmp	r3, #1
 8007524:	d101      	bne.n	800752a <HAL_I2C_Mem_Write+0x56>
 8007526:	2302      	movs	r3, #2
 8007528:	e0c5      	b.n	80076b6 <HAL_I2C_Mem_Write+0x1e2>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b01      	cmp	r3, #1
 800753e:	d007      	beq.n	8007550 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f042 0201 	orr.w	r2, r2, #1
 800754e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800755e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2221      	movs	r2, #33	; 0x21
 8007564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2240      	movs	r2, #64	; 0x40
 800756c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6a3a      	ldr	r2, [r7, #32]
 800757a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007580:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007586:	b29a      	uxth	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4a4d      	ldr	r2, [pc, #308]	; (80076c4 <HAL_I2C_Mem_Write+0x1f0>)
 8007590:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007592:	88f8      	ldrh	r0, [r7, #6]
 8007594:	893a      	ldrh	r2, [r7, #8]
 8007596:	8979      	ldrh	r1, [r7, #10]
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	9301      	str	r3, [sp, #4]
 800759c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	4603      	mov	r3, r0
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 fb38 	bl	8007c18 <I2C_RequestMemoryWrite>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d052      	beq.n	8007654 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e081      	b.n	80076b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 fd82 	bl	80080c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00d      	beq.n	80075de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	2b04      	cmp	r3, #4
 80075c8:	d107      	bne.n	80075da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e06b      	b.n	80076b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	781a      	ldrb	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ee:	1c5a      	adds	r2, r3, #1
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f8:	3b01      	subs	r3, #1
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007604:	b29b      	uxth	r3, r3
 8007606:	3b01      	subs	r3, #1
 8007608:	b29a      	uxth	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b04      	cmp	r3, #4
 800761a:	d11b      	bne.n	8007654 <HAL_I2C_Mem_Write+0x180>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007620:	2b00      	cmp	r3, #0
 8007622:	d017      	beq.n	8007654 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	781a      	ldrb	r2, [r3, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800763e:	3b01      	subs	r3, #1
 8007640:	b29a      	uxth	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764a:	b29b      	uxth	r3, r3
 800764c:	3b01      	subs	r3, #1
 800764e:	b29a      	uxth	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1aa      	bne.n	80075b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 fd6e 	bl	8008142 <I2C_WaitOnBTFFlagUntilTimeout>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00d      	beq.n	8007688 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007670:	2b04      	cmp	r3, #4
 8007672:	d107      	bne.n	8007684 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007682:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e016      	b.n	80076b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2220      	movs	r2, #32
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	e000      	b.n	80076b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80076b4:	2302      	movs	r3, #2
  }
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	00100002 	.word	0x00100002
 80076c4:	ffff0000 	.word	0xffff0000

080076c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b08c      	sub	sp, #48	; 0x30
 80076cc:	af02      	add	r7, sp, #8
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	4608      	mov	r0, r1
 80076d2:	4611      	mov	r1, r2
 80076d4:	461a      	mov	r2, r3
 80076d6:	4603      	mov	r3, r0
 80076d8:	817b      	strh	r3, [r7, #10]
 80076da:	460b      	mov	r3, r1
 80076dc:	813b      	strh	r3, [r7, #8]
 80076de:	4613      	mov	r3, r2
 80076e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076e2:	f7fe fd7f 	bl	80061e4 <HAL_GetTick>
 80076e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b20      	cmp	r3, #32
 80076f2:	f040 8208 	bne.w	8007b06 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	2319      	movs	r3, #25
 80076fc:	2201      	movs	r2, #1
 80076fe:	497b      	ldr	r1, [pc, #492]	; (80078ec <HAL_I2C_Mem_Read+0x224>)
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 fc07 	bl	8007f14 <I2C_WaitOnFlagUntilTimeout>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800770c:	2302      	movs	r3, #2
 800770e:	e1fb      	b.n	8007b08 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007716:	2b01      	cmp	r3, #1
 8007718:	d101      	bne.n	800771e <HAL_I2C_Mem_Read+0x56>
 800771a:	2302      	movs	r3, #2
 800771c:	e1f4      	b.n	8007b08 <HAL_I2C_Mem_Read+0x440>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	2b01      	cmp	r3, #1
 8007732:	d007      	beq.n	8007744 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0201 	orr.w	r2, r2, #1
 8007742:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007752:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2222      	movs	r2, #34	; 0x22
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2240      	movs	r2, #64	; 0x40
 8007760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800776e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007774:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800777a:	b29a      	uxth	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4a5b      	ldr	r2, [pc, #364]	; (80078f0 <HAL_I2C_Mem_Read+0x228>)
 8007784:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007786:	88f8      	ldrh	r0, [r7, #6]
 8007788:	893a      	ldrh	r2, [r7, #8]
 800778a:	8979      	ldrh	r1, [r7, #10]
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	4603      	mov	r3, r0
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 fad4 	bl	8007d44 <I2C_RequestMemoryRead>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e1b0      	b.n	8007b08 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d113      	bne.n	80077d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077ae:	2300      	movs	r3, #0
 80077b0:	623b      	str	r3, [r7, #32]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	623b      	str	r3, [r7, #32]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	623b      	str	r3, [r7, #32]
 80077c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	e184      	b.n	8007ae0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d11b      	bne.n	8007816 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077ee:	2300      	movs	r3, #0
 80077f0:	61fb      	str	r3, [r7, #28]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	61fb      	str	r3, [r7, #28]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	61fb      	str	r3, [r7, #28]
 8007802:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	e164      	b.n	8007ae0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800781a:	2b02      	cmp	r3, #2
 800781c:	d11b      	bne.n	8007856 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800782c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800783c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800783e:	2300      	movs	r3, #0
 8007840:	61bb      	str	r3, [r7, #24]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	61bb      	str	r3, [r7, #24]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	61bb      	str	r3, [r7, #24]
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	e144      	b.n	8007ae0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007856:	2300      	movs	r3, #0
 8007858:	617b      	str	r3, [r7, #20]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	617b      	str	r3, [r7, #20]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	617b      	str	r3, [r7, #20]
 800786a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800786c:	e138      	b.n	8007ae0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007872:	2b03      	cmp	r3, #3
 8007874:	f200 80f1 	bhi.w	8007a5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800787c:	2b01      	cmp	r3, #1
 800787e:	d123      	bne.n	80078c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007882:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 fc9d 	bl	80081c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e139      	b.n	8007b08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	691a      	ldr	r2, [r3, #16]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078b0:	3b01      	subs	r3, #1
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078bc:	b29b      	uxth	r3, r3
 80078be:	3b01      	subs	r3, #1
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078c6:	e10b      	b.n	8007ae0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d14e      	bne.n	800796e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d6:	2200      	movs	r2, #0
 80078d8:	4906      	ldr	r1, [pc, #24]	; (80078f4 <HAL_I2C_Mem_Read+0x22c>)
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 fb1a 	bl	8007f14 <I2C_WaitOnFlagUntilTimeout>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d008      	beq.n	80078f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e10e      	b.n	8007b08 <HAL_I2C_Mem_Read+0x440>
 80078ea:	bf00      	nop
 80078ec:	00100002 	.word	0x00100002
 80078f0:	ffff0000 	.word	0xffff0000
 80078f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007906:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	691a      	ldr	r2, [r3, #16]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007912:	b2d2      	uxtb	r2, r2
 8007914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007924:	3b01      	subs	r3, #1
 8007926:	b29a      	uxth	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007930:	b29b      	uxth	r3, r3
 8007932:	3b01      	subs	r3, #1
 8007934:	b29a      	uxth	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	691a      	ldr	r2, [r3, #16]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007944:	b2d2      	uxtb	r2, r2
 8007946:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794c:	1c5a      	adds	r2, r3, #1
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007956:	3b01      	subs	r3, #1
 8007958:	b29a      	uxth	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007962:	b29b      	uxth	r3, r3
 8007964:	3b01      	subs	r3, #1
 8007966:	b29a      	uxth	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800796c:	e0b8      	b.n	8007ae0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007974:	2200      	movs	r2, #0
 8007976:	4966      	ldr	r1, [pc, #408]	; (8007b10 <HAL_I2C_Mem_Read+0x448>)
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 facb 	bl	8007f14 <I2C_WaitOnFlagUntilTimeout>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e0bf      	b.n	8007b08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007996:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	691a      	ldr	r2, [r3, #16]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	b2d2      	uxtb	r2, r2
 80079a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079aa:	1c5a      	adds	r2, r3, #1
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b4:	3b01      	subs	r3, #1
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	3b01      	subs	r3, #1
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d0:	2200      	movs	r2, #0
 80079d2:	494f      	ldr	r1, [pc, #316]	; (8007b10 <HAL_I2C_Mem_Read+0x448>)
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 fa9d 	bl	8007f14 <I2C_WaitOnFlagUntilTimeout>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e091      	b.n	8007b08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691a      	ldr	r2, [r3, #16]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	b2d2      	uxtb	r2, r2
 8007a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	1c5a      	adds	r2, r3, #1
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a10:	3b01      	subs	r3, #1
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	691a      	ldr	r2, [r3, #16]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	b2d2      	uxtb	r2, r2
 8007a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a42:	3b01      	subs	r3, #1
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	3b01      	subs	r3, #1
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a58:	e042      	b.n	8007ae0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 fbb0 	bl	80081c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e04c      	b.n	8007b08 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	691a      	ldr	r2, [r3, #16]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	b2d2      	uxtb	r2, r2
 8007a7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	f003 0304 	and.w	r3, r3, #4
 8007aaa:	2b04      	cmp	r3, #4
 8007aac:	d118      	bne.n	8007ae0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aca:	3b01      	subs	r3, #1
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f47f aec2 	bne.w	800786e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2220      	movs	r2, #32
 8007aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	e000      	b.n	8007b08 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007b06:	2302      	movs	r3, #2
  }
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3728      	adds	r7, #40	; 0x28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	00010004 	.word	0x00010004

08007b14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b088      	sub	sp, #32
 8007b18:	af02      	add	r7, sp, #8
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	607a      	str	r2, [r7, #4]
 8007b1e:	603b      	str	r3, [r7, #0]
 8007b20:	460b      	mov	r3, r1
 8007b22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2b08      	cmp	r3, #8
 8007b2e:	d006      	beq.n	8007b3e <I2C_MasterRequestWrite+0x2a>
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d003      	beq.n	8007b3e <I2C_MasterRequestWrite+0x2a>
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b3c:	d108      	bne.n	8007b50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	e00b      	b.n	8007b68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b54:	2b12      	cmp	r3, #18
 8007b56:	d107      	bne.n	8007b68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 f9cd 	bl	8007f14 <I2C_WaitOnFlagUntilTimeout>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00d      	beq.n	8007b9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b8e:	d103      	bne.n	8007b98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e035      	b.n	8007c08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ba4:	d108      	bne.n	8007bb8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ba6:	897b      	ldrh	r3, [r7, #10]
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	461a      	mov	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007bb4:	611a      	str	r2, [r3, #16]
 8007bb6:	e01b      	b.n	8007bf0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007bb8:	897b      	ldrh	r3, [r7, #10]
 8007bba:	11db      	asrs	r3, r3, #7
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	f003 0306 	and.w	r3, r3, #6
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	f063 030f 	orn	r3, r3, #15
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	490e      	ldr	r1, [pc, #56]	; (8007c10 <I2C_MasterRequestWrite+0xfc>)
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f000 f9f3 	bl	8007fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e010      	b.n	8007c08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007be6:	897b      	ldrh	r3, [r7, #10]
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	4907      	ldr	r1, [pc, #28]	; (8007c14 <I2C_MasterRequestWrite+0x100>)
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 f9e3 	bl	8007fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e000      	b.n	8007c08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3718      	adds	r7, #24
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	00010008 	.word	0x00010008
 8007c14:	00010002 	.word	0x00010002

08007c18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b088      	sub	sp, #32
 8007c1c:	af02      	add	r7, sp, #8
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	4608      	mov	r0, r1
 8007c22:	4611      	mov	r1, r2
 8007c24:	461a      	mov	r2, r3
 8007c26:	4603      	mov	r3, r0
 8007c28:	817b      	strh	r3, [r7, #10]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	813b      	strh	r3, [r7, #8]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 f960 	bl	8007f14 <I2C_WaitOnFlagUntilTimeout>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00d      	beq.n	8007c76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c68:	d103      	bne.n	8007c72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e05f      	b.n	8007d36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c76:	897b      	ldrh	r3, [r7, #10]
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	6a3a      	ldr	r2, [r7, #32]
 8007c8a:	492d      	ldr	r1, [pc, #180]	; (8007d40 <I2C_RequestMemoryWrite+0x128>)
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 f998 	bl	8007fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e04c      	b.n	8007d36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	617b      	str	r3, [r7, #20]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	617b      	str	r3, [r7, #20]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	617b      	str	r3, [r7, #20]
 8007cb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cb4:	6a39      	ldr	r1, [r7, #32]
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 fa02 	bl	80080c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00d      	beq.n	8007cde <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc6:	2b04      	cmp	r3, #4
 8007cc8:	d107      	bne.n	8007cda <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e02b      	b.n	8007d36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007cde:	88fb      	ldrh	r3, [r7, #6]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d105      	bne.n	8007cf0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ce4:	893b      	ldrh	r3, [r7, #8]
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	611a      	str	r2, [r3, #16]
 8007cee:	e021      	b.n	8007d34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007cf0:	893b      	ldrh	r3, [r7, #8]
 8007cf2:	0a1b      	lsrs	r3, r3, #8
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d00:	6a39      	ldr	r1, [r7, #32]
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f000 f9dc 	bl	80080c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00d      	beq.n	8007d2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	d107      	bne.n	8007d26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e005      	b.n	8007d36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d2a:	893b      	ldrh	r3, [r7, #8]
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	00010002 	.word	0x00010002

08007d44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b088      	sub	sp, #32
 8007d48:	af02      	add	r7, sp, #8
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	4608      	mov	r0, r1
 8007d4e:	4611      	mov	r1, r2
 8007d50:	461a      	mov	r2, r3
 8007d52:	4603      	mov	r3, r0
 8007d54:	817b      	strh	r3, [r7, #10]
 8007d56:	460b      	mov	r3, r1
 8007d58:	813b      	strh	r3, [r7, #8]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d6c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 f8c2 	bl	8007f14 <I2C_WaitOnFlagUntilTimeout>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00d      	beq.n	8007db2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007da4:	d103      	bne.n	8007dae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e0aa      	b.n	8007f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007db2:	897b      	ldrh	r3, [r7, #10]
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	461a      	mov	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007dc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	6a3a      	ldr	r2, [r7, #32]
 8007dc6:	4952      	ldr	r1, [pc, #328]	; (8007f10 <I2C_RequestMemoryRead+0x1cc>)
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 f8fa 	bl	8007fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e097      	b.n	8007f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	617b      	str	r3, [r7, #20]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	617b      	str	r3, [r7, #20]
 8007dec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df0:	6a39      	ldr	r1, [r7, #32]
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 f964 	bl	80080c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00d      	beq.n	8007e1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	d107      	bne.n	8007e16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e076      	b.n	8007f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e1a:	88fb      	ldrh	r3, [r7, #6]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d105      	bne.n	8007e2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e20:	893b      	ldrh	r3, [r7, #8]
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	611a      	str	r2, [r3, #16]
 8007e2a:	e021      	b.n	8007e70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007e2c:	893b      	ldrh	r3, [r7, #8]
 8007e2e:	0a1b      	lsrs	r3, r3, #8
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e3c:	6a39      	ldr	r1, [r7, #32]
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 f93e 	bl	80080c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00d      	beq.n	8007e66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	d107      	bne.n	8007e62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e050      	b.n	8007f08 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e66:	893b      	ldrh	r3, [r7, #8]
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e72:	6a39      	ldr	r1, [r7, #32]
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f000 f923 	bl	80080c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00d      	beq.n	8007e9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e84:	2b04      	cmp	r3, #4
 8007e86:	d107      	bne.n	8007e98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e035      	b.n	8007f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eaa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 f82b 	bl	8007f14 <I2C_WaitOnFlagUntilTimeout>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00d      	beq.n	8007ee0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ed2:	d103      	bne.n	8007edc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e013      	b.n	8007f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007ee0:	897b      	ldrh	r3, [r7, #10]
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	f043 0301 	orr.w	r3, r3, #1
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	6a3a      	ldr	r2, [r7, #32]
 8007ef4:	4906      	ldr	r1, [pc, #24]	; (8007f10 <I2C_RequestMemoryRead+0x1cc>)
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 f863 	bl	8007fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e000      	b.n	8007f08 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3718      	adds	r7, #24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	00010002 	.word	0x00010002

08007f14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	603b      	str	r3, [r7, #0]
 8007f20:	4613      	mov	r3, r2
 8007f22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f24:	e025      	b.n	8007f72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2c:	d021      	beq.n	8007f72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f2e:	f7fe f959 	bl	80061e4 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d302      	bcc.n	8007f44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d116      	bne.n	8007f72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5e:	f043 0220 	orr.w	r2, r3, #32
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e023      	b.n	8007fba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	0c1b      	lsrs	r3, r3, #16
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d10d      	bne.n	8007f98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	43da      	mvns	r2, r3
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	4013      	ands	r3, r2
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	bf0c      	ite	eq
 8007f8e:	2301      	moveq	r3, #1
 8007f90:	2300      	movne	r3, #0
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	461a      	mov	r2, r3
 8007f96:	e00c      	b.n	8007fb2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	43da      	mvns	r2, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	bf0c      	ite	eq
 8007faa:	2301      	moveq	r3, #1
 8007fac:	2300      	movne	r3, #0
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	79fb      	ldrb	r3, [r7, #7]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d0b6      	beq.n	8007f26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	607a      	str	r2, [r7, #4]
 8007fce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fd0:	e051      	b.n	8008076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fe0:	d123      	bne.n	800802a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ff0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ffa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2220      	movs	r2, #32
 8008006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008016:	f043 0204 	orr.w	r2, r3, #4
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e046      	b.n	80080b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008030:	d021      	beq.n	8008076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008032:	f7fe f8d7 	bl	80061e4 <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	429a      	cmp	r2, r3
 8008040:	d302      	bcc.n	8008048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d116      	bne.n	8008076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2220      	movs	r2, #32
 8008052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008062:	f043 0220 	orr.w	r2, r3, #32
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e020      	b.n	80080b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	0c1b      	lsrs	r3, r3, #16
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b01      	cmp	r3, #1
 800807e:	d10c      	bne.n	800809a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	43da      	mvns	r2, r3
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	4013      	ands	r3, r2
 800808c:	b29b      	uxth	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	bf14      	ite	ne
 8008092:	2301      	movne	r3, #1
 8008094:	2300      	moveq	r3, #0
 8008096:	b2db      	uxtb	r3, r3
 8008098:	e00b      	b.n	80080b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	43da      	mvns	r2, r3
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	4013      	ands	r3, r2
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	bf14      	ite	ne
 80080ac:	2301      	movne	r3, #1
 80080ae:	2300      	moveq	r3, #0
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d18d      	bne.n	8007fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80080cc:	e02d      	b.n	800812a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 f8ce 	bl	8008270 <I2C_IsAcknowledgeFailed>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e02d      	b.n	800813a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e4:	d021      	beq.n	800812a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080e6:	f7fe f87d 	bl	80061e4 <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d302      	bcc.n	80080fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d116      	bne.n	800812a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2220      	movs	r2, #32
 8008106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008116:	f043 0220 	orr.w	r2, r3, #32
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e007      	b.n	800813a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008134:	2b80      	cmp	r3, #128	; 0x80
 8008136:	d1ca      	bne.n	80080ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	60f8      	str	r0, [r7, #12]
 800814a:	60b9      	str	r1, [r7, #8]
 800814c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800814e:	e02d      	b.n	80081ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 f88d 	bl	8008270 <I2C_IsAcknowledgeFailed>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d001      	beq.n	8008160 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e02d      	b.n	80081bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008166:	d021      	beq.n	80081ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008168:	f7fe f83c 	bl	80061e4 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	429a      	cmp	r2, r3
 8008176:	d302      	bcc.n	800817e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d116      	bne.n	80081ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2220      	movs	r2, #32
 8008188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008198:	f043 0220 	orr.w	r2, r3, #32
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e007      	b.n	80081bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	f003 0304 	and.w	r3, r3, #4
 80081b6:	2b04      	cmp	r3, #4
 80081b8:	d1ca      	bne.n	8008150 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80081d0:	e042      	b.n	8008258 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	f003 0310 	and.w	r3, r3, #16
 80081dc:	2b10      	cmp	r3, #16
 80081de:	d119      	bne.n	8008214 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f06f 0210 	mvn.w	r2, #16
 80081e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2220      	movs	r2, #32
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e029      	b.n	8008268 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008214:	f7fd ffe6 	bl	80061e4 <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	429a      	cmp	r2, r3
 8008222:	d302      	bcc.n	800822a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d116      	bne.n	8008258 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2220      	movs	r2, #32
 8008234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008244:	f043 0220 	orr.w	r2, r3, #32
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e007      	b.n	8008268 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008262:	2b40      	cmp	r3, #64	; 0x40
 8008264:	d1b5      	bne.n	80081d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008286:	d11b      	bne.n	80082c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008290:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2220      	movs	r2, #32
 800829c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ac:	f043 0204 	orr.w	r2, r3, #4
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e000      	b.n	80082c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
	...

080082d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e264      	b.n	80087ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d075      	beq.n	80083da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80082ee:	4ba3      	ldr	r3, [pc, #652]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f003 030c 	and.w	r3, r3, #12
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	d00c      	beq.n	8008314 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082fa:	4ba0      	ldr	r3, [pc, #640]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008302:	2b08      	cmp	r3, #8
 8008304:	d112      	bne.n	800832c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008306:	4b9d      	ldr	r3, [pc, #628]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800830e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008312:	d10b      	bne.n	800832c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008314:	4b99      	ldr	r3, [pc, #612]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d05b      	beq.n	80083d8 <HAL_RCC_OscConfig+0x108>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d157      	bne.n	80083d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e23f      	b.n	80087ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008334:	d106      	bne.n	8008344 <HAL_RCC_OscConfig+0x74>
 8008336:	4b91      	ldr	r3, [pc, #580]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a90      	ldr	r2, [pc, #576]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 800833c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008340:	6013      	str	r3, [r2, #0]
 8008342:	e01d      	b.n	8008380 <HAL_RCC_OscConfig+0xb0>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800834c:	d10c      	bne.n	8008368 <HAL_RCC_OscConfig+0x98>
 800834e:	4b8b      	ldr	r3, [pc, #556]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a8a      	ldr	r2, [pc, #552]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 8008354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008358:	6013      	str	r3, [r2, #0]
 800835a:	4b88      	ldr	r3, [pc, #544]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a87      	ldr	r2, [pc, #540]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 8008360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008364:	6013      	str	r3, [r2, #0]
 8008366:	e00b      	b.n	8008380 <HAL_RCC_OscConfig+0xb0>
 8008368:	4b84      	ldr	r3, [pc, #528]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a83      	ldr	r2, [pc, #524]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 800836e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	4b81      	ldr	r3, [pc, #516]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a80      	ldr	r2, [pc, #512]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 800837a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800837e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d013      	beq.n	80083b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008388:	f7fd ff2c 	bl	80061e4 <HAL_GetTick>
 800838c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800838e:	e008      	b.n	80083a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008390:	f7fd ff28 	bl	80061e4 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b64      	cmp	r3, #100	; 0x64
 800839c:	d901      	bls.n	80083a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e204      	b.n	80087ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083a2:	4b76      	ldr	r3, [pc, #472]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0f0      	beq.n	8008390 <HAL_RCC_OscConfig+0xc0>
 80083ae:	e014      	b.n	80083da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083b0:	f7fd ff18 	bl	80061e4 <HAL_GetTick>
 80083b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083b6:	e008      	b.n	80083ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083b8:	f7fd ff14 	bl	80061e4 <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	2b64      	cmp	r3, #100	; 0x64
 80083c4:	d901      	bls.n	80083ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e1f0      	b.n	80087ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083ca:	4b6c      	ldr	r3, [pc, #432]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1f0      	bne.n	80083b8 <HAL_RCC_OscConfig+0xe8>
 80083d6:	e000      	b.n	80083da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0302 	and.w	r3, r3, #2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d063      	beq.n	80084ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80083e6:	4b65      	ldr	r3, [pc, #404]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f003 030c 	and.w	r3, r3, #12
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00b      	beq.n	800840a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083f2:	4b62      	ldr	r3, [pc, #392]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80083fa:	2b08      	cmp	r3, #8
 80083fc:	d11c      	bne.n	8008438 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083fe:	4b5f      	ldr	r3, [pc, #380]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d116      	bne.n	8008438 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800840a:	4b5c      	ldr	r3, [pc, #368]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0302 	and.w	r3, r3, #2
 8008412:	2b00      	cmp	r3, #0
 8008414:	d005      	beq.n	8008422 <HAL_RCC_OscConfig+0x152>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d001      	beq.n	8008422 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e1c4      	b.n	80087ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008422:	4b56      	ldr	r3, [pc, #344]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	00db      	lsls	r3, r3, #3
 8008430:	4952      	ldr	r1, [pc, #328]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 8008432:	4313      	orrs	r3, r2
 8008434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008436:	e03a      	b.n	80084ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d020      	beq.n	8008482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008440:	4b4f      	ldr	r3, [pc, #316]	; (8008580 <HAL_RCC_OscConfig+0x2b0>)
 8008442:	2201      	movs	r2, #1
 8008444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008446:	f7fd fecd 	bl	80061e4 <HAL_GetTick>
 800844a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800844c:	e008      	b.n	8008460 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800844e:	f7fd fec9 	bl	80061e4 <HAL_GetTick>
 8008452:	4602      	mov	r2, r0
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	2b02      	cmp	r3, #2
 800845a:	d901      	bls.n	8008460 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e1a5      	b.n	80087ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008460:	4b46      	ldr	r3, [pc, #280]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0302 	and.w	r3, r3, #2
 8008468:	2b00      	cmp	r3, #0
 800846a:	d0f0      	beq.n	800844e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800846c:	4b43      	ldr	r3, [pc, #268]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	00db      	lsls	r3, r3, #3
 800847a:	4940      	ldr	r1, [pc, #256]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 800847c:	4313      	orrs	r3, r2
 800847e:	600b      	str	r3, [r1, #0]
 8008480:	e015      	b.n	80084ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008482:	4b3f      	ldr	r3, [pc, #252]	; (8008580 <HAL_RCC_OscConfig+0x2b0>)
 8008484:	2200      	movs	r2, #0
 8008486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008488:	f7fd feac 	bl	80061e4 <HAL_GetTick>
 800848c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800848e:	e008      	b.n	80084a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008490:	f7fd fea8 	bl	80061e4 <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	2b02      	cmp	r3, #2
 800849c:	d901      	bls.n	80084a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e184      	b.n	80087ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084a2:	4b36      	ldr	r3, [pc, #216]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0302 	and.w	r3, r3, #2
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1f0      	bne.n	8008490 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 0308 	and.w	r3, r3, #8
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d030      	beq.n	800851c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d016      	beq.n	80084f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084c2:	4b30      	ldr	r3, [pc, #192]	; (8008584 <HAL_RCC_OscConfig+0x2b4>)
 80084c4:	2201      	movs	r2, #1
 80084c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084c8:	f7fd fe8c 	bl	80061e4 <HAL_GetTick>
 80084cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084ce:	e008      	b.n	80084e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084d0:	f7fd fe88 	bl	80061e4 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e164      	b.n	80087ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084e2:	4b26      	ldr	r3, [pc, #152]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 80084e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d0f0      	beq.n	80084d0 <HAL_RCC_OscConfig+0x200>
 80084ee:	e015      	b.n	800851c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084f0:	4b24      	ldr	r3, [pc, #144]	; (8008584 <HAL_RCC_OscConfig+0x2b4>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084f6:	f7fd fe75 	bl	80061e4 <HAL_GetTick>
 80084fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084fc:	e008      	b.n	8008510 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084fe:	f7fd fe71 	bl	80061e4 <HAL_GetTick>
 8008502:	4602      	mov	r2, r0
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	2b02      	cmp	r3, #2
 800850a:	d901      	bls.n	8008510 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e14d      	b.n	80087ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008510:	4b1a      	ldr	r3, [pc, #104]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 8008512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008514:	f003 0302 	and.w	r3, r3, #2
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1f0      	bne.n	80084fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0304 	and.w	r3, r3, #4
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 80a0 	beq.w	800866a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800852a:	2300      	movs	r3, #0
 800852c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800852e:	4b13      	ldr	r3, [pc, #76]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 8008530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10f      	bne.n	800855a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800853a:	2300      	movs	r3, #0
 800853c:	60bb      	str	r3, [r7, #8]
 800853e:	4b0f      	ldr	r3, [pc, #60]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	4a0e      	ldr	r2, [pc, #56]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 8008544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008548:	6413      	str	r3, [r2, #64]	; 0x40
 800854a:	4b0c      	ldr	r3, [pc, #48]	; (800857c <HAL_RCC_OscConfig+0x2ac>)
 800854c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008552:	60bb      	str	r3, [r7, #8]
 8008554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008556:	2301      	movs	r3, #1
 8008558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800855a:	4b0b      	ldr	r3, [pc, #44]	; (8008588 <HAL_RCC_OscConfig+0x2b8>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008562:	2b00      	cmp	r3, #0
 8008564:	d121      	bne.n	80085aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008566:	4b08      	ldr	r3, [pc, #32]	; (8008588 <HAL_RCC_OscConfig+0x2b8>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a07      	ldr	r2, [pc, #28]	; (8008588 <HAL_RCC_OscConfig+0x2b8>)
 800856c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008572:	f7fd fe37 	bl	80061e4 <HAL_GetTick>
 8008576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008578:	e011      	b.n	800859e <HAL_RCC_OscConfig+0x2ce>
 800857a:	bf00      	nop
 800857c:	40023800 	.word	0x40023800
 8008580:	42470000 	.word	0x42470000
 8008584:	42470e80 	.word	0x42470e80
 8008588:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800858c:	f7fd fe2a 	bl	80061e4 <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	2b02      	cmp	r3, #2
 8008598:	d901      	bls.n	800859e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e106      	b.n	80087ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800859e:	4b85      	ldr	r3, [pc, #532]	; (80087b4 <HAL_RCC_OscConfig+0x4e4>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d0f0      	beq.n	800858c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d106      	bne.n	80085c0 <HAL_RCC_OscConfig+0x2f0>
 80085b2:	4b81      	ldr	r3, [pc, #516]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 80085b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b6:	4a80      	ldr	r2, [pc, #512]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 80085b8:	f043 0301 	orr.w	r3, r3, #1
 80085bc:	6713      	str	r3, [r2, #112]	; 0x70
 80085be:	e01c      	b.n	80085fa <HAL_RCC_OscConfig+0x32a>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	2b05      	cmp	r3, #5
 80085c6:	d10c      	bne.n	80085e2 <HAL_RCC_OscConfig+0x312>
 80085c8:	4b7b      	ldr	r3, [pc, #492]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 80085ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085cc:	4a7a      	ldr	r2, [pc, #488]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 80085ce:	f043 0304 	orr.w	r3, r3, #4
 80085d2:	6713      	str	r3, [r2, #112]	; 0x70
 80085d4:	4b78      	ldr	r3, [pc, #480]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 80085d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d8:	4a77      	ldr	r2, [pc, #476]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 80085da:	f043 0301 	orr.w	r3, r3, #1
 80085de:	6713      	str	r3, [r2, #112]	; 0x70
 80085e0:	e00b      	b.n	80085fa <HAL_RCC_OscConfig+0x32a>
 80085e2:	4b75      	ldr	r3, [pc, #468]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 80085e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e6:	4a74      	ldr	r2, [pc, #464]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 80085e8:	f023 0301 	bic.w	r3, r3, #1
 80085ec:	6713      	str	r3, [r2, #112]	; 0x70
 80085ee:	4b72      	ldr	r3, [pc, #456]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 80085f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f2:	4a71      	ldr	r2, [pc, #452]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 80085f4:	f023 0304 	bic.w	r3, r3, #4
 80085f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d015      	beq.n	800862e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008602:	f7fd fdef 	bl	80061e4 <HAL_GetTick>
 8008606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008608:	e00a      	b.n	8008620 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800860a:	f7fd fdeb 	bl	80061e4 <HAL_GetTick>
 800860e:	4602      	mov	r2, r0
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	f241 3288 	movw	r2, #5000	; 0x1388
 8008618:	4293      	cmp	r3, r2
 800861a:	d901      	bls.n	8008620 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e0c5      	b.n	80087ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008620:	4b65      	ldr	r3, [pc, #404]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 8008622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b00      	cmp	r3, #0
 800862a:	d0ee      	beq.n	800860a <HAL_RCC_OscConfig+0x33a>
 800862c:	e014      	b.n	8008658 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800862e:	f7fd fdd9 	bl	80061e4 <HAL_GetTick>
 8008632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008634:	e00a      	b.n	800864c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008636:	f7fd fdd5 	bl	80061e4 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	f241 3288 	movw	r2, #5000	; 0x1388
 8008644:	4293      	cmp	r3, r2
 8008646:	d901      	bls.n	800864c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	e0af      	b.n	80087ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800864c:	4b5a      	ldr	r3, [pc, #360]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 800864e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008650:	f003 0302 	and.w	r3, r3, #2
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1ee      	bne.n	8008636 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d105      	bne.n	800866a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800865e:	4b56      	ldr	r3, [pc, #344]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 8008660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008662:	4a55      	ldr	r2, [pc, #340]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 8008664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008668:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	2b00      	cmp	r3, #0
 8008670:	f000 809b 	beq.w	80087aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008674:	4b50      	ldr	r3, [pc, #320]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f003 030c 	and.w	r3, r3, #12
 800867c:	2b08      	cmp	r3, #8
 800867e:	d05c      	beq.n	800873a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	2b02      	cmp	r3, #2
 8008686:	d141      	bne.n	800870c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008688:	4b4c      	ldr	r3, [pc, #304]	; (80087bc <HAL_RCC_OscConfig+0x4ec>)
 800868a:	2200      	movs	r2, #0
 800868c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800868e:	f7fd fda9 	bl	80061e4 <HAL_GetTick>
 8008692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008694:	e008      	b.n	80086a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008696:	f7fd fda5 	bl	80061e4 <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d901      	bls.n	80086a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e081      	b.n	80087ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086a8:	4b43      	ldr	r3, [pc, #268]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1f0      	bne.n	8008696 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	69da      	ldr	r2, [r3, #28]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	431a      	orrs	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c2:	019b      	lsls	r3, r3, #6
 80086c4:	431a      	orrs	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ca:	085b      	lsrs	r3, r3, #1
 80086cc:	3b01      	subs	r3, #1
 80086ce:	041b      	lsls	r3, r3, #16
 80086d0:	431a      	orrs	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d6:	061b      	lsls	r3, r3, #24
 80086d8:	4937      	ldr	r1, [pc, #220]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086de:	4b37      	ldr	r3, [pc, #220]	; (80087bc <HAL_RCC_OscConfig+0x4ec>)
 80086e0:	2201      	movs	r2, #1
 80086e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086e4:	f7fd fd7e 	bl	80061e4 <HAL_GetTick>
 80086e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086ea:	e008      	b.n	80086fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086ec:	f7fd fd7a 	bl	80061e4 <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d901      	bls.n	80086fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e056      	b.n	80087ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086fe:	4b2e      	ldr	r3, [pc, #184]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d0f0      	beq.n	80086ec <HAL_RCC_OscConfig+0x41c>
 800870a:	e04e      	b.n	80087aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800870c:	4b2b      	ldr	r3, [pc, #172]	; (80087bc <HAL_RCC_OscConfig+0x4ec>)
 800870e:	2200      	movs	r2, #0
 8008710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008712:	f7fd fd67 	bl	80061e4 <HAL_GetTick>
 8008716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008718:	e008      	b.n	800872c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800871a:	f7fd fd63 	bl	80061e4 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	2b02      	cmp	r3, #2
 8008726:	d901      	bls.n	800872c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e03f      	b.n	80087ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800872c:	4b22      	ldr	r3, [pc, #136]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1f0      	bne.n	800871a <HAL_RCC_OscConfig+0x44a>
 8008738:	e037      	b.n	80087aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d101      	bne.n	8008746 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e032      	b.n	80087ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008746:	4b1c      	ldr	r3, [pc, #112]	; (80087b8 <HAL_RCC_OscConfig+0x4e8>)
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d028      	beq.n	80087a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800875e:	429a      	cmp	r2, r3
 8008760:	d121      	bne.n	80087a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800876c:	429a      	cmp	r2, r3
 800876e:	d11a      	bne.n	80087a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008776:	4013      	ands	r3, r2
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800877c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800877e:	4293      	cmp	r3, r2
 8008780:	d111      	bne.n	80087a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878c:	085b      	lsrs	r3, r3, #1
 800878e:	3b01      	subs	r3, #1
 8008790:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008792:	429a      	cmp	r2, r3
 8008794:	d107      	bne.n	80087a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d001      	beq.n	80087aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e000      	b.n	80087ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3718      	adds	r7, #24
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	40007000 	.word	0x40007000
 80087b8:	40023800 	.word	0x40023800
 80087bc:	42470060 	.word	0x42470060

080087c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d101      	bne.n	80087d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e0cc      	b.n	800896e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80087d4:	4b68      	ldr	r3, [pc, #416]	; (8008978 <HAL_RCC_ClockConfig+0x1b8>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0307 	and.w	r3, r3, #7
 80087dc:	683a      	ldr	r2, [r7, #0]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d90c      	bls.n	80087fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087e2:	4b65      	ldr	r3, [pc, #404]	; (8008978 <HAL_RCC_ClockConfig+0x1b8>)
 80087e4:	683a      	ldr	r2, [r7, #0]
 80087e6:	b2d2      	uxtb	r2, r2
 80087e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087ea:	4b63      	ldr	r3, [pc, #396]	; (8008978 <HAL_RCC_ClockConfig+0x1b8>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0307 	and.w	r3, r3, #7
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d001      	beq.n	80087fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e0b8      	b.n	800896e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0302 	and.w	r3, r3, #2
 8008804:	2b00      	cmp	r3, #0
 8008806:	d020      	beq.n	800884a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0304 	and.w	r3, r3, #4
 8008810:	2b00      	cmp	r3, #0
 8008812:	d005      	beq.n	8008820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008814:	4b59      	ldr	r3, [pc, #356]	; (800897c <HAL_RCC_ClockConfig+0x1bc>)
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	4a58      	ldr	r2, [pc, #352]	; (800897c <HAL_RCC_ClockConfig+0x1bc>)
 800881a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800881e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0308 	and.w	r3, r3, #8
 8008828:	2b00      	cmp	r3, #0
 800882a:	d005      	beq.n	8008838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800882c:	4b53      	ldr	r3, [pc, #332]	; (800897c <HAL_RCC_ClockConfig+0x1bc>)
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	4a52      	ldr	r2, [pc, #328]	; (800897c <HAL_RCC_ClockConfig+0x1bc>)
 8008832:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008838:	4b50      	ldr	r3, [pc, #320]	; (800897c <HAL_RCC_ClockConfig+0x1bc>)
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	494d      	ldr	r1, [pc, #308]	; (800897c <HAL_RCC_ClockConfig+0x1bc>)
 8008846:	4313      	orrs	r3, r2
 8008848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	2b00      	cmp	r3, #0
 8008854:	d044      	beq.n	80088e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	2b01      	cmp	r3, #1
 800885c:	d107      	bne.n	800886e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800885e:	4b47      	ldr	r3, [pc, #284]	; (800897c <HAL_RCC_ClockConfig+0x1bc>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d119      	bne.n	800889e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e07f      	b.n	800896e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	2b02      	cmp	r3, #2
 8008874:	d003      	beq.n	800887e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800887a:	2b03      	cmp	r3, #3
 800887c:	d107      	bne.n	800888e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800887e:	4b3f      	ldr	r3, [pc, #252]	; (800897c <HAL_RCC_ClockConfig+0x1bc>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d109      	bne.n	800889e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e06f      	b.n	800896e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800888e:	4b3b      	ldr	r3, [pc, #236]	; (800897c <HAL_RCC_ClockConfig+0x1bc>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e067      	b.n	800896e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800889e:	4b37      	ldr	r3, [pc, #220]	; (800897c <HAL_RCC_ClockConfig+0x1bc>)
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f023 0203 	bic.w	r2, r3, #3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	4934      	ldr	r1, [pc, #208]	; (800897c <HAL_RCC_ClockConfig+0x1bc>)
 80088ac:	4313      	orrs	r3, r2
 80088ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80088b0:	f7fd fc98 	bl	80061e4 <HAL_GetTick>
 80088b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088b6:	e00a      	b.n	80088ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088b8:	f7fd fc94 	bl	80061e4 <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d901      	bls.n	80088ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e04f      	b.n	800896e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088ce:	4b2b      	ldr	r3, [pc, #172]	; (800897c <HAL_RCC_ClockConfig+0x1bc>)
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f003 020c 	and.w	r2, r3, #12
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	429a      	cmp	r2, r3
 80088de:	d1eb      	bne.n	80088b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80088e0:	4b25      	ldr	r3, [pc, #148]	; (8008978 <HAL_RCC_ClockConfig+0x1b8>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0307 	and.w	r3, r3, #7
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d20c      	bcs.n	8008908 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088ee:	4b22      	ldr	r3, [pc, #136]	; (8008978 <HAL_RCC_ClockConfig+0x1b8>)
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	b2d2      	uxtb	r2, r2
 80088f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088f6:	4b20      	ldr	r3, [pc, #128]	; (8008978 <HAL_RCC_ClockConfig+0x1b8>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	429a      	cmp	r2, r3
 8008902:	d001      	beq.n	8008908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e032      	b.n	800896e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	d008      	beq.n	8008926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008914:	4b19      	ldr	r3, [pc, #100]	; (800897c <HAL_RCC_ClockConfig+0x1bc>)
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	4916      	ldr	r1, [pc, #88]	; (800897c <HAL_RCC_ClockConfig+0x1bc>)
 8008922:	4313      	orrs	r3, r2
 8008924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0308 	and.w	r3, r3, #8
 800892e:	2b00      	cmp	r3, #0
 8008930:	d009      	beq.n	8008946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008932:	4b12      	ldr	r3, [pc, #72]	; (800897c <HAL_RCC_ClockConfig+0x1bc>)
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	00db      	lsls	r3, r3, #3
 8008940:	490e      	ldr	r1, [pc, #56]	; (800897c <HAL_RCC_ClockConfig+0x1bc>)
 8008942:	4313      	orrs	r3, r2
 8008944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008946:	f000 f821 	bl	800898c <HAL_RCC_GetSysClockFreq>
 800894a:	4602      	mov	r2, r0
 800894c:	4b0b      	ldr	r3, [pc, #44]	; (800897c <HAL_RCC_ClockConfig+0x1bc>)
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	091b      	lsrs	r3, r3, #4
 8008952:	f003 030f 	and.w	r3, r3, #15
 8008956:	490a      	ldr	r1, [pc, #40]	; (8008980 <HAL_RCC_ClockConfig+0x1c0>)
 8008958:	5ccb      	ldrb	r3, [r1, r3]
 800895a:	fa22 f303 	lsr.w	r3, r2, r3
 800895e:	4a09      	ldr	r2, [pc, #36]	; (8008984 <HAL_RCC_ClockConfig+0x1c4>)
 8008960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008962:	4b09      	ldr	r3, [pc, #36]	; (8008988 <HAL_RCC_ClockConfig+0x1c8>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4618      	mov	r0, r3
 8008968:	f7fd fbf8 	bl	800615c <HAL_InitTick>

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	40023c00 	.word	0x40023c00
 800897c:	40023800 	.word	0x40023800
 8008980:	0801a434 	.word	0x0801a434
 8008984:	20000008 	.word	0x20000008
 8008988:	2000000c 	.word	0x2000000c

0800898c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800898c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008994:	2300      	movs	r3, #0
 8008996:	607b      	str	r3, [r7, #4]
 8008998:	2300      	movs	r3, #0
 800899a:	60fb      	str	r3, [r7, #12]
 800899c:	2300      	movs	r3, #0
 800899e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80089a0:	2300      	movs	r3, #0
 80089a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089a4:	4b67      	ldr	r3, [pc, #412]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f003 030c 	and.w	r3, r3, #12
 80089ac:	2b08      	cmp	r3, #8
 80089ae:	d00d      	beq.n	80089cc <HAL_RCC_GetSysClockFreq+0x40>
 80089b0:	2b08      	cmp	r3, #8
 80089b2:	f200 80bd 	bhi.w	8008b30 <HAL_RCC_GetSysClockFreq+0x1a4>
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d002      	beq.n	80089c0 <HAL_RCC_GetSysClockFreq+0x34>
 80089ba:	2b04      	cmp	r3, #4
 80089bc:	d003      	beq.n	80089c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80089be:	e0b7      	b.n	8008b30 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80089c0:	4b61      	ldr	r3, [pc, #388]	; (8008b48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80089c2:	60bb      	str	r3, [r7, #8]
       break;
 80089c4:	e0b7      	b.n	8008b36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80089c6:	4b61      	ldr	r3, [pc, #388]	; (8008b4c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80089c8:	60bb      	str	r3, [r7, #8]
      break;
 80089ca:	e0b4      	b.n	8008b36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80089cc:	4b5d      	ldr	r3, [pc, #372]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80089d6:	4b5b      	ldr	r3, [pc, #364]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d04d      	beq.n	8008a7e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089e2:	4b58      	ldr	r3, [pc, #352]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	099b      	lsrs	r3, r3, #6
 80089e8:	461a      	mov	r2, r3
 80089ea:	f04f 0300 	mov.w	r3, #0
 80089ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80089f2:	f04f 0100 	mov.w	r1, #0
 80089f6:	ea02 0800 	and.w	r8, r2, r0
 80089fa:	ea03 0901 	and.w	r9, r3, r1
 80089fe:	4640      	mov	r0, r8
 8008a00:	4649      	mov	r1, r9
 8008a02:	f04f 0200 	mov.w	r2, #0
 8008a06:	f04f 0300 	mov.w	r3, #0
 8008a0a:	014b      	lsls	r3, r1, #5
 8008a0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008a10:	0142      	lsls	r2, r0, #5
 8008a12:	4610      	mov	r0, r2
 8008a14:	4619      	mov	r1, r3
 8008a16:	ebb0 0008 	subs.w	r0, r0, r8
 8008a1a:	eb61 0109 	sbc.w	r1, r1, r9
 8008a1e:	f04f 0200 	mov.w	r2, #0
 8008a22:	f04f 0300 	mov.w	r3, #0
 8008a26:	018b      	lsls	r3, r1, #6
 8008a28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008a2c:	0182      	lsls	r2, r0, #6
 8008a2e:	1a12      	subs	r2, r2, r0
 8008a30:	eb63 0301 	sbc.w	r3, r3, r1
 8008a34:	f04f 0000 	mov.w	r0, #0
 8008a38:	f04f 0100 	mov.w	r1, #0
 8008a3c:	00d9      	lsls	r1, r3, #3
 8008a3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a42:	00d0      	lsls	r0, r2, #3
 8008a44:	4602      	mov	r2, r0
 8008a46:	460b      	mov	r3, r1
 8008a48:	eb12 0208 	adds.w	r2, r2, r8
 8008a4c:	eb43 0309 	adc.w	r3, r3, r9
 8008a50:	f04f 0000 	mov.w	r0, #0
 8008a54:	f04f 0100 	mov.w	r1, #0
 8008a58:	0259      	lsls	r1, r3, #9
 8008a5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008a5e:	0250      	lsls	r0, r2, #9
 8008a60:	4602      	mov	r2, r0
 8008a62:	460b      	mov	r3, r1
 8008a64:	4610      	mov	r0, r2
 8008a66:	4619      	mov	r1, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f04f 0300 	mov.w	r3, #0
 8008a70:	f7f8 f90a 	bl	8000c88 <__aeabi_uldivmod>
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4613      	mov	r3, r2
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	e04a      	b.n	8008b14 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a7e:	4b31      	ldr	r3, [pc, #196]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	099b      	lsrs	r3, r3, #6
 8008a84:	461a      	mov	r2, r3
 8008a86:	f04f 0300 	mov.w	r3, #0
 8008a8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008a8e:	f04f 0100 	mov.w	r1, #0
 8008a92:	ea02 0400 	and.w	r4, r2, r0
 8008a96:	ea03 0501 	and.w	r5, r3, r1
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	f04f 0200 	mov.w	r2, #0
 8008aa2:	f04f 0300 	mov.w	r3, #0
 8008aa6:	014b      	lsls	r3, r1, #5
 8008aa8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008aac:	0142      	lsls	r2, r0, #5
 8008aae:	4610      	mov	r0, r2
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	1b00      	subs	r0, r0, r4
 8008ab4:	eb61 0105 	sbc.w	r1, r1, r5
 8008ab8:	f04f 0200 	mov.w	r2, #0
 8008abc:	f04f 0300 	mov.w	r3, #0
 8008ac0:	018b      	lsls	r3, r1, #6
 8008ac2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008ac6:	0182      	lsls	r2, r0, #6
 8008ac8:	1a12      	subs	r2, r2, r0
 8008aca:	eb63 0301 	sbc.w	r3, r3, r1
 8008ace:	f04f 0000 	mov.w	r0, #0
 8008ad2:	f04f 0100 	mov.w	r1, #0
 8008ad6:	00d9      	lsls	r1, r3, #3
 8008ad8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008adc:	00d0      	lsls	r0, r2, #3
 8008ade:	4602      	mov	r2, r0
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	1912      	adds	r2, r2, r4
 8008ae4:	eb45 0303 	adc.w	r3, r5, r3
 8008ae8:	f04f 0000 	mov.w	r0, #0
 8008aec:	f04f 0100 	mov.w	r1, #0
 8008af0:	0299      	lsls	r1, r3, #10
 8008af2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008af6:	0290      	lsls	r0, r2, #10
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	4610      	mov	r0, r2
 8008afe:	4619      	mov	r1, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	461a      	mov	r2, r3
 8008b04:	f04f 0300 	mov.w	r3, #0
 8008b08:	f7f8 f8be 	bl	8000c88 <__aeabi_uldivmod>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	460b      	mov	r3, r1
 8008b10:	4613      	mov	r3, r2
 8008b12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b14:	4b0b      	ldr	r3, [pc, #44]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	0c1b      	lsrs	r3, r3, #16
 8008b1a:	f003 0303 	and.w	r3, r3, #3
 8008b1e:	3301      	adds	r3, #1
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b2c:	60bb      	str	r3, [r7, #8]
      break;
 8008b2e:	e002      	b.n	8008b36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b30:	4b05      	ldr	r3, [pc, #20]	; (8008b48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008b32:	60bb      	str	r3, [r7, #8]
      break;
 8008b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b36:	68bb      	ldr	r3, [r7, #8]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008b42:	bf00      	nop
 8008b44:	40023800 	.word	0x40023800
 8008b48:	00f42400 	.word	0x00f42400
 8008b4c:	007a1200 	.word	0x007a1200

08008b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b50:	b480      	push	{r7}
 8008b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b54:	4b03      	ldr	r3, [pc, #12]	; (8008b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b56:	681b      	ldr	r3, [r3, #0]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	20000008 	.word	0x20000008

08008b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008b6c:	f7ff fff0 	bl	8008b50 <HAL_RCC_GetHCLKFreq>
 8008b70:	4602      	mov	r2, r0
 8008b72:	4b05      	ldr	r3, [pc, #20]	; (8008b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	0a9b      	lsrs	r3, r3, #10
 8008b78:	f003 0307 	and.w	r3, r3, #7
 8008b7c:	4903      	ldr	r1, [pc, #12]	; (8008b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b7e:	5ccb      	ldrb	r3, [r1, r3]
 8008b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	40023800 	.word	0x40023800
 8008b8c:	0801a444 	.word	0x0801a444

08008b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008b94:	f7ff ffdc 	bl	8008b50 <HAL_RCC_GetHCLKFreq>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	4b05      	ldr	r3, [pc, #20]	; (8008bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	0b5b      	lsrs	r3, r3, #13
 8008ba0:	f003 0307 	and.w	r3, r3, #7
 8008ba4:	4903      	ldr	r1, [pc, #12]	; (8008bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ba6:	5ccb      	ldrb	r3, [r1, r3]
 8008ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	40023800 	.word	0x40023800
 8008bb4:	0801a444 	.word	0x0801a444

08008bb8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e034      	b.n	8008c38 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d106      	bne.n	8008be8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f7fc fd20 	bl	8005628 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3308      	adds	r3, #8
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f001 fbb6 	bl	800a364 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6818      	ldr	r0, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	461a      	mov	r2, r3
 8008c02:	68b9      	ldr	r1, [r7, #8]
 8008c04:	f001 fc00 	bl	800a408 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6858      	ldr	r0, [r3, #4]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	689a      	ldr	r2, [r3, #8]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c14:	6879      	ldr	r1, [r7, #4]
 8008c16:	f001 fc35 	bl	800a484 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	6892      	ldr	r2, [r2, #8]
 8008c22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	6892      	ldr	r2, [r2, #8]
 8008c2e:	f041 0101 	orr.w	r1, r1, #1
 8008c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e041      	b.n	8008cd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d106      	bne.n	8008c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7fd f888 	bl	8005d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4610      	mov	r0, r2
 8008c80:	f000 fabc 	bl	80091fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
	...

08008ce0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d001      	beq.n	8008cf8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e046      	b.n	8008d86 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a23      	ldr	r2, [pc, #140]	; (8008d94 <HAL_TIM_Base_Start+0xb4>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d022      	beq.n	8008d50 <HAL_TIM_Base_Start+0x70>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d12:	d01d      	beq.n	8008d50 <HAL_TIM_Base_Start+0x70>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a1f      	ldr	r2, [pc, #124]	; (8008d98 <HAL_TIM_Base_Start+0xb8>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d018      	beq.n	8008d50 <HAL_TIM_Base_Start+0x70>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a1e      	ldr	r2, [pc, #120]	; (8008d9c <HAL_TIM_Base_Start+0xbc>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d013      	beq.n	8008d50 <HAL_TIM_Base_Start+0x70>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a1c      	ldr	r2, [pc, #112]	; (8008da0 <HAL_TIM_Base_Start+0xc0>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d00e      	beq.n	8008d50 <HAL_TIM_Base_Start+0x70>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a1b      	ldr	r2, [pc, #108]	; (8008da4 <HAL_TIM_Base_Start+0xc4>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d009      	beq.n	8008d50 <HAL_TIM_Base_Start+0x70>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a19      	ldr	r2, [pc, #100]	; (8008da8 <HAL_TIM_Base_Start+0xc8>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d004      	beq.n	8008d50 <HAL_TIM_Base_Start+0x70>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a18      	ldr	r2, [pc, #96]	; (8008dac <HAL_TIM_Base_Start+0xcc>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d111      	bne.n	8008d74 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	f003 0307 	and.w	r3, r3, #7
 8008d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2b06      	cmp	r3, #6
 8008d60:	d010      	beq.n	8008d84 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f042 0201 	orr.w	r2, r2, #1
 8008d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d72:	e007      	b.n	8008d84 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f042 0201 	orr.w	r2, r2, #1
 8008d82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	40010000 	.word	0x40010000
 8008d98:	40000400 	.word	0x40000400
 8008d9c:	40000800 	.word	0x40000800
 8008da0:	40000c00 	.word	0x40000c00
 8008da4:	40010400 	.word	0x40010400
 8008da8:	40014000 	.word	0x40014000
 8008dac:	40001800 	.word	0x40001800

08008db0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6a1a      	ldr	r2, [r3, #32]
 8008dbe:	f241 1311 	movw	r3, #4369	; 0x1111
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10f      	bne.n	8008de8 <HAL_TIM_Base_Stop+0x38>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6a1a      	ldr	r2, [r3, #32]
 8008dce:	f240 4344 	movw	r3, #1092	; 0x444
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d107      	bne.n	8008de8 <HAL_TIM_Base_Stop+0x38>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 0201 	bic.w	r2, r2, #1
 8008de6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b082      	sub	sp, #8
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	f003 0302 	and.w	r3, r3, #2
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d122      	bne.n	8008e5a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d11b      	bne.n	8008e5a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f06f 0202 	mvn.w	r2, #2
 8008e2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	f003 0303 	and.w	r3, r3, #3
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d003      	beq.n	8008e48 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f9bc 	bl	80091be <HAL_TIM_IC_CaptureCallback>
 8008e46:	e005      	b.n	8008e54 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f9ae 	bl	80091aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f9bf 	bl	80091d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	f003 0304 	and.w	r3, r3, #4
 8008e64:	2b04      	cmp	r3, #4
 8008e66:	d122      	bne.n	8008eae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	f003 0304 	and.w	r3, r3, #4
 8008e72:	2b04      	cmp	r3, #4
 8008e74:	d11b      	bne.n	8008eae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f06f 0204 	mvn.w	r2, #4
 8008e7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2202      	movs	r2, #2
 8008e84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d003      	beq.n	8008e9c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f992 	bl	80091be <HAL_TIM_IC_CaptureCallback>
 8008e9a:	e005      	b.n	8008ea8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f984 	bl	80091aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f995 	bl	80091d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	f003 0308 	and.w	r3, r3, #8
 8008eb8:	2b08      	cmp	r3, #8
 8008eba:	d122      	bne.n	8008f02 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	f003 0308 	and.w	r3, r3, #8
 8008ec6:	2b08      	cmp	r3, #8
 8008ec8:	d11b      	bne.n	8008f02 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f06f 0208 	mvn.w	r2, #8
 8008ed2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2204      	movs	r2, #4
 8008ed8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	69db      	ldr	r3, [r3, #28]
 8008ee0:	f003 0303 	and.w	r3, r3, #3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d003      	beq.n	8008ef0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f968 	bl	80091be <HAL_TIM_IC_CaptureCallback>
 8008eee:	e005      	b.n	8008efc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f95a 	bl	80091aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f96b 	bl	80091d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	f003 0310 	and.w	r3, r3, #16
 8008f0c:	2b10      	cmp	r3, #16
 8008f0e:	d122      	bne.n	8008f56 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	f003 0310 	and.w	r3, r3, #16
 8008f1a:	2b10      	cmp	r3, #16
 8008f1c:	d11b      	bne.n	8008f56 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f06f 0210 	mvn.w	r2, #16
 8008f26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2208      	movs	r2, #8
 8008f2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d003      	beq.n	8008f44 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f93e 	bl	80091be <HAL_TIM_IC_CaptureCallback>
 8008f42:	e005      	b.n	8008f50 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f930 	bl	80091aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f941 	bl	80091d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d10e      	bne.n	8008f82 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	f003 0301 	and.w	r3, r3, #1
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d107      	bne.n	8008f82 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f06f 0201 	mvn.w	r2, #1
 8008f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 f90a 	bl	8009196 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f8c:	2b80      	cmp	r3, #128	; 0x80
 8008f8e:	d10e      	bne.n	8008fae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f9a:	2b80      	cmp	r3, #128	; 0x80
 8008f9c:	d107      	bne.n	8008fae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fae7 	bl	800957c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb8:	2b40      	cmp	r3, #64	; 0x40
 8008fba:	d10e      	bne.n	8008fda <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc6:	2b40      	cmp	r3, #64	; 0x40
 8008fc8:	d107      	bne.n	8008fda <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f906 	bl	80091e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	f003 0320 	and.w	r3, r3, #32
 8008fe4:	2b20      	cmp	r3, #32
 8008fe6:	d10e      	bne.n	8009006 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f003 0320 	and.w	r3, r3, #32
 8008ff2:	2b20      	cmp	r3, #32
 8008ff4:	d107      	bne.n	8009006 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f06f 0220 	mvn.w	r2, #32
 8008ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fab1 	bl	8009568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009006:	bf00      	nop
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800901e:	2b01      	cmp	r3, #1
 8009020:	d101      	bne.n	8009026 <HAL_TIM_ConfigClockSource+0x18>
 8009022:	2302      	movs	r3, #2
 8009024:	e0b3      	b.n	800918e <HAL_TIM_ConfigClockSource+0x180>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2202      	movs	r2, #2
 8009032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009044:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800904c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800905e:	d03e      	beq.n	80090de <HAL_TIM_ConfigClockSource+0xd0>
 8009060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009064:	f200 8087 	bhi.w	8009176 <HAL_TIM_ConfigClockSource+0x168>
 8009068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800906c:	f000 8085 	beq.w	800917a <HAL_TIM_ConfigClockSource+0x16c>
 8009070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009074:	d87f      	bhi.n	8009176 <HAL_TIM_ConfigClockSource+0x168>
 8009076:	2b70      	cmp	r3, #112	; 0x70
 8009078:	d01a      	beq.n	80090b0 <HAL_TIM_ConfigClockSource+0xa2>
 800907a:	2b70      	cmp	r3, #112	; 0x70
 800907c:	d87b      	bhi.n	8009176 <HAL_TIM_ConfigClockSource+0x168>
 800907e:	2b60      	cmp	r3, #96	; 0x60
 8009080:	d050      	beq.n	8009124 <HAL_TIM_ConfigClockSource+0x116>
 8009082:	2b60      	cmp	r3, #96	; 0x60
 8009084:	d877      	bhi.n	8009176 <HAL_TIM_ConfigClockSource+0x168>
 8009086:	2b50      	cmp	r3, #80	; 0x50
 8009088:	d03c      	beq.n	8009104 <HAL_TIM_ConfigClockSource+0xf6>
 800908a:	2b50      	cmp	r3, #80	; 0x50
 800908c:	d873      	bhi.n	8009176 <HAL_TIM_ConfigClockSource+0x168>
 800908e:	2b40      	cmp	r3, #64	; 0x40
 8009090:	d058      	beq.n	8009144 <HAL_TIM_ConfigClockSource+0x136>
 8009092:	2b40      	cmp	r3, #64	; 0x40
 8009094:	d86f      	bhi.n	8009176 <HAL_TIM_ConfigClockSource+0x168>
 8009096:	2b30      	cmp	r3, #48	; 0x30
 8009098:	d064      	beq.n	8009164 <HAL_TIM_ConfigClockSource+0x156>
 800909a:	2b30      	cmp	r3, #48	; 0x30
 800909c:	d86b      	bhi.n	8009176 <HAL_TIM_ConfigClockSource+0x168>
 800909e:	2b20      	cmp	r3, #32
 80090a0:	d060      	beq.n	8009164 <HAL_TIM_ConfigClockSource+0x156>
 80090a2:	2b20      	cmp	r3, #32
 80090a4:	d867      	bhi.n	8009176 <HAL_TIM_ConfigClockSource+0x168>
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d05c      	beq.n	8009164 <HAL_TIM_ConfigClockSource+0x156>
 80090aa:	2b10      	cmp	r3, #16
 80090ac:	d05a      	beq.n	8009164 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80090ae:	e062      	b.n	8009176 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6818      	ldr	r0, [r3, #0]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	6899      	ldr	r1, [r3, #8]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	f000 f9b6 	bl	8009430 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80090d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	609a      	str	r2, [r3, #8]
      break;
 80090dc:	e04e      	b.n	800917c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6818      	ldr	r0, [r3, #0]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	6899      	ldr	r1, [r3, #8]
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	685a      	ldr	r2, [r3, #4]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	f000 f99f 	bl	8009430 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009100:	609a      	str	r2, [r3, #8]
      break;
 8009102:	e03b      	b.n	800917c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6818      	ldr	r0, [r3, #0]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	6859      	ldr	r1, [r3, #4]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	461a      	mov	r2, r3
 8009112:	f000 f913 	bl	800933c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2150      	movs	r1, #80	; 0x50
 800911c:	4618      	mov	r0, r3
 800911e:	f000 f96c 	bl	80093fa <TIM_ITRx_SetConfig>
      break;
 8009122:	e02b      	b.n	800917c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6818      	ldr	r0, [r3, #0]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	6859      	ldr	r1, [r3, #4]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	461a      	mov	r2, r3
 8009132:	f000 f932 	bl	800939a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2160      	movs	r1, #96	; 0x60
 800913c:	4618      	mov	r0, r3
 800913e:	f000 f95c 	bl	80093fa <TIM_ITRx_SetConfig>
      break;
 8009142:	e01b      	b.n	800917c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6818      	ldr	r0, [r3, #0]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	6859      	ldr	r1, [r3, #4]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	461a      	mov	r2, r3
 8009152:	f000 f8f3 	bl	800933c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2140      	movs	r1, #64	; 0x40
 800915c:	4618      	mov	r0, r3
 800915e:	f000 f94c 	bl	80093fa <TIM_ITRx_SetConfig>
      break;
 8009162:	e00b      	b.n	800917c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4619      	mov	r1, r3
 800916e:	4610      	mov	r0, r2
 8009170:	f000 f943 	bl	80093fa <TIM_ITRx_SetConfig>
        break;
 8009174:	e002      	b.n	800917c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009176:	bf00      	nop
 8009178:	e000      	b.n	800917c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800917a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009196:	b480      	push	{r7}
 8009198:	b083      	sub	sp, #12
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800919e:	bf00      	nop
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b083      	sub	sp, #12
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091b2:	bf00      	nop
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091be:	b480      	push	{r7}
 80091c0:	b083      	sub	sp, #12
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091c6:	bf00      	nop
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b083      	sub	sp, #12
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091da:	bf00      	nop
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b083      	sub	sp, #12
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091ee:	bf00      	nop
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
	...

080091fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a40      	ldr	r2, [pc, #256]	; (8009310 <TIM_Base_SetConfig+0x114>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d013      	beq.n	800923c <TIM_Base_SetConfig+0x40>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800921a:	d00f      	beq.n	800923c <TIM_Base_SetConfig+0x40>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a3d      	ldr	r2, [pc, #244]	; (8009314 <TIM_Base_SetConfig+0x118>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d00b      	beq.n	800923c <TIM_Base_SetConfig+0x40>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a3c      	ldr	r2, [pc, #240]	; (8009318 <TIM_Base_SetConfig+0x11c>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d007      	beq.n	800923c <TIM_Base_SetConfig+0x40>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a3b      	ldr	r2, [pc, #236]	; (800931c <TIM_Base_SetConfig+0x120>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d003      	beq.n	800923c <TIM_Base_SetConfig+0x40>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a3a      	ldr	r2, [pc, #232]	; (8009320 <TIM_Base_SetConfig+0x124>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d108      	bne.n	800924e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	4313      	orrs	r3, r2
 800924c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a2f      	ldr	r2, [pc, #188]	; (8009310 <TIM_Base_SetConfig+0x114>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d02b      	beq.n	80092ae <TIM_Base_SetConfig+0xb2>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800925c:	d027      	beq.n	80092ae <TIM_Base_SetConfig+0xb2>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a2c      	ldr	r2, [pc, #176]	; (8009314 <TIM_Base_SetConfig+0x118>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d023      	beq.n	80092ae <TIM_Base_SetConfig+0xb2>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a2b      	ldr	r2, [pc, #172]	; (8009318 <TIM_Base_SetConfig+0x11c>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d01f      	beq.n	80092ae <TIM_Base_SetConfig+0xb2>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a2a      	ldr	r2, [pc, #168]	; (800931c <TIM_Base_SetConfig+0x120>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d01b      	beq.n	80092ae <TIM_Base_SetConfig+0xb2>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a29      	ldr	r2, [pc, #164]	; (8009320 <TIM_Base_SetConfig+0x124>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d017      	beq.n	80092ae <TIM_Base_SetConfig+0xb2>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a28      	ldr	r2, [pc, #160]	; (8009324 <TIM_Base_SetConfig+0x128>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d013      	beq.n	80092ae <TIM_Base_SetConfig+0xb2>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a27      	ldr	r2, [pc, #156]	; (8009328 <TIM_Base_SetConfig+0x12c>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d00f      	beq.n	80092ae <TIM_Base_SetConfig+0xb2>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a26      	ldr	r2, [pc, #152]	; (800932c <TIM_Base_SetConfig+0x130>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d00b      	beq.n	80092ae <TIM_Base_SetConfig+0xb2>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a25      	ldr	r2, [pc, #148]	; (8009330 <TIM_Base_SetConfig+0x134>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d007      	beq.n	80092ae <TIM_Base_SetConfig+0xb2>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a24      	ldr	r2, [pc, #144]	; (8009334 <TIM_Base_SetConfig+0x138>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d003      	beq.n	80092ae <TIM_Base_SetConfig+0xb2>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a23      	ldr	r2, [pc, #140]	; (8009338 <TIM_Base_SetConfig+0x13c>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d108      	bne.n	80092c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	4313      	orrs	r3, r2
 80092be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	689a      	ldr	r2, [r3, #8]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a0a      	ldr	r2, [pc, #40]	; (8009310 <TIM_Base_SetConfig+0x114>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d003      	beq.n	80092f4 <TIM_Base_SetConfig+0xf8>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a0c      	ldr	r2, [pc, #48]	; (8009320 <TIM_Base_SetConfig+0x124>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d103      	bne.n	80092fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	691a      	ldr	r2, [r3, #16]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	615a      	str	r2, [r3, #20]
}
 8009302:	bf00      	nop
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	40010000 	.word	0x40010000
 8009314:	40000400 	.word	0x40000400
 8009318:	40000800 	.word	0x40000800
 800931c:	40000c00 	.word	0x40000c00
 8009320:	40010400 	.word	0x40010400
 8009324:	40014000 	.word	0x40014000
 8009328:	40014400 	.word	0x40014400
 800932c:	40014800 	.word	0x40014800
 8009330:	40001800 	.word	0x40001800
 8009334:	40001c00 	.word	0x40001c00
 8009338:	40002000 	.word	0x40002000

0800933c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800933c:	b480      	push	{r7}
 800933e:	b087      	sub	sp, #28
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6a1b      	ldr	r3, [r3, #32]
 800934c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6a1b      	ldr	r3, [r3, #32]
 8009352:	f023 0201 	bic.w	r2, r3, #1
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	011b      	lsls	r3, r3, #4
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	4313      	orrs	r3, r2
 8009370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f023 030a 	bic.w	r3, r3, #10
 8009378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	4313      	orrs	r3, r2
 8009380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	693a      	ldr	r2, [r7, #16]
 8009386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	621a      	str	r2, [r3, #32]
}
 800938e:	bf00      	nop
 8009390:	371c      	adds	r7, #28
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800939a:	b480      	push	{r7}
 800939c:	b087      	sub	sp, #28
 800939e:	af00      	add	r7, sp, #0
 80093a0:	60f8      	str	r0, [r7, #12]
 80093a2:	60b9      	str	r1, [r7, #8]
 80093a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	f023 0210 	bic.w	r2, r3, #16
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6a1b      	ldr	r3, [r3, #32]
 80093bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	031b      	lsls	r3, r3, #12
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80093d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	011b      	lsls	r3, r3, #4
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	4313      	orrs	r3, r2
 80093e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	697a      	ldr	r2, [r7, #20]
 80093e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	621a      	str	r2, [r3, #32]
}
 80093ee:	bf00      	nop
 80093f0:	371c      	adds	r7, #28
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b085      	sub	sp, #20
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	4313      	orrs	r3, r2
 8009418:	f043 0307 	orr.w	r3, r3, #7
 800941c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	609a      	str	r2, [r3, #8]
}
 8009424:	bf00      	nop
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009430:	b480      	push	{r7}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
 800943c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800944a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	021a      	lsls	r2, r3, #8
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	431a      	orrs	r2, r3
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	4313      	orrs	r3, r2
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	4313      	orrs	r3, r2
 800945c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	609a      	str	r2, [r3, #8]
}
 8009464:	bf00      	nop
 8009466:	371c      	adds	r7, #28
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009480:	2b01      	cmp	r3, #1
 8009482:	d101      	bne.n	8009488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009484:	2302      	movs	r3, #2
 8009486:	e05a      	b.n	800953e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2202      	movs	r2, #2
 8009494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a21      	ldr	r2, [pc, #132]	; (800954c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d022      	beq.n	8009512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094d4:	d01d      	beq.n	8009512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a1d      	ldr	r2, [pc, #116]	; (8009550 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d018      	beq.n	8009512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a1b      	ldr	r2, [pc, #108]	; (8009554 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d013      	beq.n	8009512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a1a      	ldr	r2, [pc, #104]	; (8009558 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d00e      	beq.n	8009512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a18      	ldr	r2, [pc, #96]	; (800955c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d009      	beq.n	8009512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a17      	ldr	r2, [pc, #92]	; (8009560 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d004      	beq.n	8009512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a15      	ldr	r2, [pc, #84]	; (8009564 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d10c      	bne.n	800952c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	4313      	orrs	r3, r2
 8009522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	40010000 	.word	0x40010000
 8009550:	40000400 	.word	0x40000400
 8009554:	40000800 	.word	0x40000800
 8009558:	40000c00 	.word	0x40000c00
 800955c:	40010400 	.word	0x40010400
 8009560:	40014000 	.word	0x40014000
 8009564:	40001800 	.word	0x40001800

08009568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d101      	bne.n	80095a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e03f      	b.n	8009622 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d106      	bne.n	80095bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7fc fc3e 	bl	8005e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2224      	movs	r2, #36	; 0x24
 80095c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68da      	ldr	r2, [r3, #12]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fcfd 	bl	8009fd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	691a      	ldr	r2, [r3, #16]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	695a      	ldr	r2, [r3, #20]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009608:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2220      	movs	r2, #32
 8009614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2220      	movs	r2, #32
 800961c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b084      	sub	sp, #16
 800962e:	af00      	add	r7, sp, #0
 8009630:	60f8      	str	r0, [r7, #12]
 8009632:	60b9      	str	r1, [r7, #8]
 8009634:	4613      	mov	r3, r2
 8009636:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b20      	cmp	r3, #32
 8009642:	d11d      	bne.n	8009680 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d002      	beq.n	8009650 <HAL_UART_Receive_DMA+0x26>
 800964a:	88fb      	ldrh	r3, [r7, #6]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d101      	bne.n	8009654 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e016      	b.n	8009682 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800965a:	2b01      	cmp	r3, #1
 800965c:	d101      	bne.n	8009662 <HAL_UART_Receive_DMA+0x38>
 800965e:	2302      	movs	r3, #2
 8009660:	e00f      	b.n	8009682 <HAL_UART_Receive_DMA+0x58>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8009670:	88fb      	ldrh	r3, [r7, #6]
 8009672:	461a      	mov	r2, r3
 8009674:	68b9      	ldr	r1, [r7, #8]
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f000 faf2 	bl	8009c60 <UART_Start_Receive_DMA>
 800967c:	4603      	mov	r3, r0
 800967e:	e000      	b.n	8009682 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009680:	2302      	movs	r3, #2
  }
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b084      	sub	sp, #16
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009692:	2300      	movs	r3, #0
 8009694:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	695b      	ldr	r3, [r3, #20]
 800969c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a0:	2b80      	cmp	r3, #128	; 0x80
 80096a2:	bf0c      	ite	eq
 80096a4:	2301      	moveq	r3, #1
 80096a6:	2300      	movne	r3, #0
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2b21      	cmp	r3, #33	; 0x21
 80096b6:	d116      	bne.n	80096e6 <HAL_UART_DMAStop+0x5c>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d013      	beq.n	80096e6 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	695a      	ldr	r2, [r3, #20]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096cc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d004      	beq.n	80096e0 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fc ffca 	bl	8006674 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fb21 	bl	8009d28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f0:	2b40      	cmp	r3, #64	; 0x40
 80096f2:	bf0c      	ite	eq
 80096f4:	2301      	moveq	r3, #1
 80096f6:	2300      	movne	r3, #0
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2b22      	cmp	r3, #34	; 0x22
 8009706:	d116      	bne.n	8009736 <HAL_UART_DMAStop+0xac>
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d013      	beq.n	8009736 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	695a      	ldr	r2, [r3, #20]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800971c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009722:	2b00      	cmp	r3, #0
 8009724:	d004      	beq.n	8009730 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972a:	4618      	mov	r0, r3
 800972c:	f7fc ffa2 	bl	8006674 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fb0f 	bl	8009d54 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b08a      	sub	sp, #40	; 0x28
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009760:	2300      	movs	r3, #0
 8009762:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009764:	2300      	movs	r3, #0
 8009766:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	f003 030f 	and.w	r3, r3, #15
 800976e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10d      	bne.n	8009792 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009778:	f003 0320 	and.w	r3, r3, #32
 800977c:	2b00      	cmp	r3, #0
 800977e:	d008      	beq.n	8009792 <HAL_UART_IRQHandler+0x52>
 8009780:	6a3b      	ldr	r3, [r7, #32]
 8009782:	f003 0320 	and.w	r3, r3, #32
 8009786:	2b00      	cmp	r3, #0
 8009788:	d003      	beq.n	8009792 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fb8b 	bl	8009ea6 <UART_Receive_IT>
      return;
 8009790:	e17c      	b.n	8009a8c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	2b00      	cmp	r3, #0
 8009796:	f000 80b1 	beq.w	80098fc <HAL_UART_IRQHandler+0x1bc>
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d105      	bne.n	80097b0 <HAL_UART_IRQHandler+0x70>
 80097a4:	6a3b      	ldr	r3, [r7, #32]
 80097a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f000 80a6 	beq.w	80098fc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00a      	beq.n	80097d0 <HAL_UART_IRQHandler+0x90>
 80097ba:	6a3b      	ldr	r3, [r7, #32]
 80097bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d005      	beq.n	80097d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c8:	f043 0201 	orr.w	r2, r3, #1
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	f003 0304 	and.w	r3, r3, #4
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00a      	beq.n	80097f0 <HAL_UART_IRQHandler+0xb0>
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	f003 0301 	and.w	r3, r3, #1
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d005      	beq.n	80097f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e8:	f043 0202 	orr.w	r2, r3, #2
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	f003 0302 	and.w	r3, r3, #2
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00a      	beq.n	8009810 <HAL_UART_IRQHandler+0xd0>
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	f003 0301 	and.w	r3, r3, #1
 8009800:	2b00      	cmp	r3, #0
 8009802:	d005      	beq.n	8009810 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009808:	f043 0204 	orr.w	r2, r3, #4
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	f003 0308 	and.w	r3, r3, #8
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00f      	beq.n	800983a <HAL_UART_IRQHandler+0xfa>
 800981a:	6a3b      	ldr	r3, [r7, #32]
 800981c:	f003 0320 	and.w	r3, r3, #32
 8009820:	2b00      	cmp	r3, #0
 8009822:	d104      	bne.n	800982e <HAL_UART_IRQHandler+0xee>
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	2b00      	cmp	r3, #0
 800982c:	d005      	beq.n	800983a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009832:	f043 0208 	orr.w	r2, r3, #8
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983e:	2b00      	cmp	r3, #0
 8009840:	f000 811f 	beq.w	8009a82 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	f003 0320 	and.w	r3, r3, #32
 800984a:	2b00      	cmp	r3, #0
 800984c:	d007      	beq.n	800985e <HAL_UART_IRQHandler+0x11e>
 800984e:	6a3b      	ldr	r3, [r7, #32]
 8009850:	f003 0320 	and.w	r3, r3, #32
 8009854:	2b00      	cmp	r3, #0
 8009856:	d002      	beq.n	800985e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fb24 	bl	8009ea6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009868:	2b40      	cmp	r3, #64	; 0x40
 800986a:	bf0c      	ite	eq
 800986c:	2301      	moveq	r3, #1
 800986e:	2300      	movne	r3, #0
 8009870:	b2db      	uxtb	r3, r3
 8009872:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009878:	f003 0308 	and.w	r3, r3, #8
 800987c:	2b00      	cmp	r3, #0
 800987e:	d102      	bne.n	8009886 <HAL_UART_IRQHandler+0x146>
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d031      	beq.n	80098ea <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fa64 	bl	8009d54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009896:	2b40      	cmp	r3, #64	; 0x40
 8009898:	d123      	bne.n	80098e2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	695a      	ldr	r2, [r3, #20]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d013      	beq.n	80098da <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b6:	4a77      	ldr	r2, [pc, #476]	; (8009a94 <HAL_UART_IRQHandler+0x354>)
 80098b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fc ff48 	bl	8006754 <HAL_DMA_Abort_IT>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d016      	beq.n	80098f8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80098d4:	4610      	mov	r0, r2
 80098d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098d8:	e00e      	b.n	80098f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 f8fa 	bl	8009ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098e0:	e00a      	b.n	80098f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f8f6 	bl	8009ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098e8:	e006      	b.n	80098f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f8f2 	bl	8009ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80098f6:	e0c4      	b.n	8009a82 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098f8:	bf00      	nop
    return;
 80098fa:	e0c2      	b.n	8009a82 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009900:	2b01      	cmp	r3, #1
 8009902:	f040 80a2 	bne.w	8009a4a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009908:	f003 0310 	and.w	r3, r3, #16
 800990c:	2b00      	cmp	r3, #0
 800990e:	f000 809c 	beq.w	8009a4a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009912:	6a3b      	ldr	r3, [r7, #32]
 8009914:	f003 0310 	and.w	r3, r3, #16
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 8096 	beq.w	8009a4a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800991e:	2300      	movs	r3, #0
 8009920:	60fb      	str	r3, [r7, #12]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	60fb      	str	r3, [r7, #12]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	60fb      	str	r3, [r7, #12]
 8009932:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	695b      	ldr	r3, [r3, #20]
 800993a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800993e:	2b40      	cmp	r3, #64	; 0x40
 8009940:	d14f      	bne.n	80099e2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800994c:	8a3b      	ldrh	r3, [r7, #16]
 800994e:	2b00      	cmp	r3, #0
 8009950:	f000 8099 	beq.w	8009a86 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009958:	8a3a      	ldrh	r2, [r7, #16]
 800995a:	429a      	cmp	r2, r3
 800995c:	f080 8093 	bcs.w	8009a86 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	8a3a      	ldrh	r2, [r7, #16]
 8009964:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800996a:	69db      	ldr	r3, [r3, #28]
 800996c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009970:	d02b      	beq.n	80099ca <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68da      	ldr	r2, [r3, #12]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009980:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	695a      	ldr	r2, [r3, #20]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f022 0201 	bic.w	r2, r2, #1
 8009990:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	695a      	ldr	r2, [r3, #20]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099a0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2220      	movs	r2, #32
 80099a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68da      	ldr	r2, [r3, #12]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f022 0210 	bic.w	r2, r2, #16
 80099be:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7fc fe55 	bl	8006674 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	1ad3      	subs	r3, r2, r3
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	4619      	mov	r1, r3
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f884 	bl	8009ae8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80099e0:	e051      	b.n	8009a86 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d047      	beq.n	8009a8a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80099fa:	8a7b      	ldrh	r3, [r7, #18]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d044      	beq.n	8009a8a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68da      	ldr	r2, [r3, #12]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009a0e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	695a      	ldr	r2, [r3, #20]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f022 0201 	bic.w	r2, r2, #1
 8009a1e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2220      	movs	r2, #32
 8009a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68da      	ldr	r2, [r3, #12]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f022 0210 	bic.w	r2, r2, #16
 8009a3c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a3e:	8a7b      	ldrh	r3, [r7, #18]
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f850 	bl	8009ae8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009a48:	e01f      	b.n	8009a8a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d008      	beq.n	8009a66 <HAL_UART_IRQHandler+0x326>
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d003      	beq.n	8009a66 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f9b9 	bl	8009dd6 <UART_Transmit_IT>
    return;
 8009a64:	e012      	b.n	8009a8c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00d      	beq.n	8009a8c <HAL_UART_IRQHandler+0x34c>
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d008      	beq.n	8009a8c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f9fb 	bl	8009e76 <UART_EndTransmit_IT>
    return;
 8009a80:	e004      	b.n	8009a8c <HAL_UART_IRQHandler+0x34c>
    return;
 8009a82:	bf00      	nop
 8009a84:	e002      	b.n	8009a8c <HAL_UART_IRQHandler+0x34c>
      return;
 8009a86:	bf00      	nop
 8009a88:	e000      	b.n	8009a8c <HAL_UART_IRQHandler+0x34c>
      return;
 8009a8a:	bf00      	nop
  }
}
 8009a8c:	3728      	adds	r7, #40	; 0x28
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	08009daf 	.word	0x08009daf

08009a98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009ab4:	bf00      	nop
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009ac8:	bf00      	nop
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009adc:	bf00      	nop
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d12a      	bne.n	8009b72 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68da      	ldr	r2, [r3, #12]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b30:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	695a      	ldr	r2, [r3, #20]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f022 0201 	bic.w	r2, r2, #1
 8009b40:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	695a      	ldr	r2, [r3, #20]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b50:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2220      	movs	r2, #32
 8009b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d107      	bne.n	8009b72 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68da      	ldr	r2, [r3, #12]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f022 0210 	bic.w	r2, r2, #16
 8009b70:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d106      	bne.n	8009b88 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b7e:	4619      	mov	r1, r3
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f7ff ffb1 	bl	8009ae8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b86:	e002      	b.n	8009b8e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f7ff ff8f 	bl	8009aac <HAL_UART_RxCpltCallback>
}
 8009b8e:	bf00      	nop
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b084      	sub	sp, #16
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d108      	bne.n	8009bbe <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bb0:	085b      	lsrs	r3, r3, #1
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f7ff ff96 	bl	8009ae8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009bbc:	e002      	b.n	8009bc4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f7ff ff7e 	bl	8009ac0 <HAL_UART_RxHalfCpltCallback>
}
 8009bc4:	bf00      	nop
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bdc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009be8:	2b80      	cmp	r3, #128	; 0x80
 8009bea:	bf0c      	ite	eq
 8009bec:	2301      	moveq	r3, #1
 8009bee:	2300      	movne	r3, #0
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b21      	cmp	r3, #33	; 0x21
 8009bfe:	d108      	bne.n	8009c12 <UART_DMAError+0x46>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d005      	beq.n	8009c12 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009c0c:	68b8      	ldr	r0, [r7, #8]
 8009c0e:	f000 f88b 	bl	8009d28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c1c:	2b40      	cmp	r3, #64	; 0x40
 8009c1e:	bf0c      	ite	eq
 8009c20:	2301      	moveq	r3, #1
 8009c22:	2300      	movne	r3, #0
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	2b22      	cmp	r3, #34	; 0x22
 8009c32:	d108      	bne.n	8009c46 <UART_DMAError+0x7a>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d005      	beq.n	8009c46 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009c40:	68b8      	ldr	r0, [r7, #8]
 8009c42:	f000 f887 	bl	8009d54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c4a:	f043 0210 	orr.w	r2, r3, #16
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c52:	68b8      	ldr	r0, [r7, #8]
 8009c54:	f7ff ff3e 	bl	8009ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c58:	bf00      	nop
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	88fa      	ldrh	r2, [r7, #6]
 8009c78:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2222      	movs	r2, #34	; 0x22
 8009c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8c:	4a23      	ldr	r2, [pc, #140]	; (8009d1c <UART_Start_Receive_DMA+0xbc>)
 8009c8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c94:	4a22      	ldr	r2, [pc, #136]	; (8009d20 <UART_Start_Receive_DMA+0xc0>)
 8009c96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9c:	4a21      	ldr	r2, [pc, #132]	; (8009d24 <UART_Start_Receive_DMA+0xc4>)
 8009c9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009ca8:	f107 0308 	add.w	r3, r7, #8
 8009cac:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	4619      	mov	r1, r3
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	88fb      	ldrh	r3, [r7, #6]
 8009cc0:	f7fc fc80 	bl	80065c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	613b      	str	r3, [r7, #16]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	613b      	str	r3, [r7, #16]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	613b      	str	r3, [r7, #16]
 8009cd8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68da      	ldr	r2, [r3, #12]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cf0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	695a      	ldr	r2, [r3, #20]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f042 0201 	orr.w	r2, r2, #1
 8009d00:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	695a      	ldr	r2, [r3, #20]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d10:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3718      	adds	r7, #24
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	08009b01 	.word	0x08009b01
 8009d20:	08009b97 	.word	0x08009b97
 8009d24:	08009bcd 	.word	0x08009bcd

08009d28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68da      	ldr	r2, [r3, #12]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009d3e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2220      	movs	r2, #32
 8009d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68da      	ldr	r2, [r3, #12]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009d6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	695a      	ldr	r2, [r3, #20]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f022 0201 	bic.w	r2, r2, #1
 8009d7a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d107      	bne.n	8009d94 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68da      	ldr	r2, [r3, #12]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f022 0210 	bic.w	r2, r2, #16
 8009d92:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2220      	movs	r2, #32
 8009d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009da2:	bf00      	nop
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b084      	sub	sp, #16
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f7ff fe83 	bl	8009ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dce:	bf00      	nop
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009dd6:	b480      	push	{r7}
 8009dd8:	b085      	sub	sp, #20
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	2b21      	cmp	r3, #33	; 0x21
 8009de8:	d13e      	bne.n	8009e68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009df2:	d114      	bne.n	8009e1e <UART_Transmit_IT+0x48>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d110      	bne.n	8009e1e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a1b      	ldr	r3, [r3, #32]
 8009e00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	881b      	ldrh	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	1c9a      	adds	r2, r3, #2
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	621a      	str	r2, [r3, #32]
 8009e1c:	e008      	b.n	8009e30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a1b      	ldr	r3, [r3, #32]
 8009e22:	1c59      	adds	r1, r3, #1
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	6211      	str	r1, [r2, #32]
 8009e28:	781a      	ldrb	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	3b01      	subs	r3, #1
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10f      	bne.n	8009e64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68da      	ldr	r2, [r3, #12]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68da      	ldr	r2, [r3, #12]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009e64:	2300      	movs	r3, #0
 8009e66:	e000      	b.n	8009e6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009e68:	2302      	movs	r3, #2
  }
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b082      	sub	sp, #8
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68da      	ldr	r2, [r3, #12]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2220      	movs	r2, #32
 8009e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f7ff fdfe 	bl	8009a98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b084      	sub	sp, #16
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b22      	cmp	r3, #34	; 0x22
 8009eb8:	f040 8087 	bne.w	8009fca <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ec4:	d117      	bne.n	8009ef6 <UART_Receive_IT+0x50>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d113      	bne.n	8009ef6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eee:	1c9a      	adds	r2, r3, #2
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	629a      	str	r2, [r3, #40]	; 0x28
 8009ef4:	e026      	b.n	8009f44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009efa:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009efc:	2300      	movs	r3, #0
 8009efe:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f08:	d007      	beq.n	8009f1a <UART_Receive_IT+0x74>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d10a      	bne.n	8009f28 <UART_Receive_IT+0x82>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d106      	bne.n	8009f28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	b2da      	uxtb	r2, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	701a      	strb	r2, [r3, #0]
 8009f26:	e008      	b.n	8009f3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3e:	1c5a      	adds	r2, r3, #1
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	4619      	mov	r1, r3
 8009f52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d136      	bne.n	8009fc6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68da      	ldr	r2, [r3, #12]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f022 0220 	bic.w	r2, r2, #32
 8009f66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	68da      	ldr	r2, [r3, #12]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	695a      	ldr	r2, [r3, #20]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f022 0201 	bic.w	r2, r2, #1
 8009f86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d10e      	bne.n	8009fb6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68da      	ldr	r2, [r3, #12]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f022 0210 	bic.w	r2, r2, #16
 8009fa6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fac:	4619      	mov	r1, r3
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7ff fd9a 	bl	8009ae8 <HAL_UARTEx_RxEventCallback>
 8009fb4:	e002      	b.n	8009fbc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7ff fd78 	bl	8009aac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	e002      	b.n	8009fcc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	e000      	b.n	8009fcc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009fca:	2302      	movs	r3, #2
  }
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd8:	b09f      	sub	sp, #124	; 0x7c
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fea:	68d9      	ldr	r1, [r3, #12]
 8009fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	ea40 0301 	orr.w	r3, r0, r1
 8009ff4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ff8:	689a      	ldr	r2, [r3, #8]
 8009ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	431a      	orrs	r2, r3
 800a000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a002:	695b      	ldr	r3, [r3, #20]
 800a004:	431a      	orrs	r2, r3
 800a006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a00e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a018:	f021 010c 	bic.w	r1, r1, #12
 800a01c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a022:	430b      	orrs	r3, r1
 800a024:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	695b      	ldr	r3, [r3, #20]
 800a02c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a032:	6999      	ldr	r1, [r3, #24]
 800a034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	ea40 0301 	orr.w	r3, r0, r1
 800a03c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a03e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	4bc5      	ldr	r3, [pc, #788]	; (800a358 <UART_SetConfig+0x384>)
 800a044:	429a      	cmp	r2, r3
 800a046:	d004      	beq.n	800a052 <UART_SetConfig+0x7e>
 800a048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	4bc3      	ldr	r3, [pc, #780]	; (800a35c <UART_SetConfig+0x388>)
 800a04e:	429a      	cmp	r2, r3
 800a050:	d103      	bne.n	800a05a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a052:	f7fe fd9d 	bl	8008b90 <HAL_RCC_GetPCLK2Freq>
 800a056:	6778      	str	r0, [r7, #116]	; 0x74
 800a058:	e002      	b.n	800a060 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a05a:	f7fe fd85 	bl	8008b68 <HAL_RCC_GetPCLK1Freq>
 800a05e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a062:	69db      	ldr	r3, [r3, #28]
 800a064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a068:	f040 80b6 	bne.w	800a1d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a06c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a06e:	461c      	mov	r4, r3
 800a070:	f04f 0500 	mov.w	r5, #0
 800a074:	4622      	mov	r2, r4
 800a076:	462b      	mov	r3, r5
 800a078:	1891      	adds	r1, r2, r2
 800a07a:	6439      	str	r1, [r7, #64]	; 0x40
 800a07c:	415b      	adcs	r3, r3
 800a07e:	647b      	str	r3, [r7, #68]	; 0x44
 800a080:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a084:	1912      	adds	r2, r2, r4
 800a086:	eb45 0303 	adc.w	r3, r5, r3
 800a08a:	f04f 0000 	mov.w	r0, #0
 800a08e:	f04f 0100 	mov.w	r1, #0
 800a092:	00d9      	lsls	r1, r3, #3
 800a094:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a098:	00d0      	lsls	r0, r2, #3
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	1911      	adds	r1, r2, r4
 800a0a0:	6639      	str	r1, [r7, #96]	; 0x60
 800a0a2:	416b      	adcs	r3, r5
 800a0a4:	667b      	str	r3, [r7, #100]	; 0x64
 800a0a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	f04f 0300 	mov.w	r3, #0
 800a0b0:	1891      	adds	r1, r2, r2
 800a0b2:	63b9      	str	r1, [r7, #56]	; 0x38
 800a0b4:	415b      	adcs	r3, r3
 800a0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a0bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a0c0:	f7f6 fde2 	bl	8000c88 <__aeabi_uldivmod>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4ba5      	ldr	r3, [pc, #660]	; (800a360 <UART_SetConfig+0x38c>)
 800a0ca:	fba3 2302 	umull	r2, r3, r3, r2
 800a0ce:	095b      	lsrs	r3, r3, #5
 800a0d0:	011e      	lsls	r6, r3, #4
 800a0d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0d4:	461c      	mov	r4, r3
 800a0d6:	f04f 0500 	mov.w	r5, #0
 800a0da:	4622      	mov	r2, r4
 800a0dc:	462b      	mov	r3, r5
 800a0de:	1891      	adds	r1, r2, r2
 800a0e0:	6339      	str	r1, [r7, #48]	; 0x30
 800a0e2:	415b      	adcs	r3, r3
 800a0e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a0e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a0ea:	1912      	adds	r2, r2, r4
 800a0ec:	eb45 0303 	adc.w	r3, r5, r3
 800a0f0:	f04f 0000 	mov.w	r0, #0
 800a0f4:	f04f 0100 	mov.w	r1, #0
 800a0f8:	00d9      	lsls	r1, r3, #3
 800a0fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a0fe:	00d0      	lsls	r0, r2, #3
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	1911      	adds	r1, r2, r4
 800a106:	65b9      	str	r1, [r7, #88]	; 0x58
 800a108:	416b      	adcs	r3, r5
 800a10a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a10c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	461a      	mov	r2, r3
 800a112:	f04f 0300 	mov.w	r3, #0
 800a116:	1891      	adds	r1, r2, r2
 800a118:	62b9      	str	r1, [r7, #40]	; 0x28
 800a11a:	415b      	adcs	r3, r3
 800a11c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a11e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a122:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a126:	f7f6 fdaf 	bl	8000c88 <__aeabi_uldivmod>
 800a12a:	4602      	mov	r2, r0
 800a12c:	460b      	mov	r3, r1
 800a12e:	4b8c      	ldr	r3, [pc, #560]	; (800a360 <UART_SetConfig+0x38c>)
 800a130:	fba3 1302 	umull	r1, r3, r3, r2
 800a134:	095b      	lsrs	r3, r3, #5
 800a136:	2164      	movs	r1, #100	; 0x64
 800a138:	fb01 f303 	mul.w	r3, r1, r3
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	00db      	lsls	r3, r3, #3
 800a140:	3332      	adds	r3, #50	; 0x32
 800a142:	4a87      	ldr	r2, [pc, #540]	; (800a360 <UART_SetConfig+0x38c>)
 800a144:	fba2 2303 	umull	r2, r3, r2, r3
 800a148:	095b      	lsrs	r3, r3, #5
 800a14a:	005b      	lsls	r3, r3, #1
 800a14c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a150:	441e      	add	r6, r3
 800a152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a154:	4618      	mov	r0, r3
 800a156:	f04f 0100 	mov.w	r1, #0
 800a15a:	4602      	mov	r2, r0
 800a15c:	460b      	mov	r3, r1
 800a15e:	1894      	adds	r4, r2, r2
 800a160:	623c      	str	r4, [r7, #32]
 800a162:	415b      	adcs	r3, r3
 800a164:	627b      	str	r3, [r7, #36]	; 0x24
 800a166:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a16a:	1812      	adds	r2, r2, r0
 800a16c:	eb41 0303 	adc.w	r3, r1, r3
 800a170:	f04f 0400 	mov.w	r4, #0
 800a174:	f04f 0500 	mov.w	r5, #0
 800a178:	00dd      	lsls	r5, r3, #3
 800a17a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a17e:	00d4      	lsls	r4, r2, #3
 800a180:	4622      	mov	r2, r4
 800a182:	462b      	mov	r3, r5
 800a184:	1814      	adds	r4, r2, r0
 800a186:	653c      	str	r4, [r7, #80]	; 0x50
 800a188:	414b      	adcs	r3, r1
 800a18a:	657b      	str	r3, [r7, #84]	; 0x54
 800a18c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	461a      	mov	r2, r3
 800a192:	f04f 0300 	mov.w	r3, #0
 800a196:	1891      	adds	r1, r2, r2
 800a198:	61b9      	str	r1, [r7, #24]
 800a19a:	415b      	adcs	r3, r3
 800a19c:	61fb      	str	r3, [r7, #28]
 800a19e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a1a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a1a6:	f7f6 fd6f 	bl	8000c88 <__aeabi_uldivmod>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	4b6c      	ldr	r3, [pc, #432]	; (800a360 <UART_SetConfig+0x38c>)
 800a1b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a1b4:	095b      	lsrs	r3, r3, #5
 800a1b6:	2164      	movs	r1, #100	; 0x64
 800a1b8:	fb01 f303 	mul.w	r3, r1, r3
 800a1bc:	1ad3      	subs	r3, r2, r3
 800a1be:	00db      	lsls	r3, r3, #3
 800a1c0:	3332      	adds	r3, #50	; 0x32
 800a1c2:	4a67      	ldr	r2, [pc, #412]	; (800a360 <UART_SetConfig+0x38c>)
 800a1c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a1c8:	095b      	lsrs	r3, r3, #5
 800a1ca:	f003 0207 	and.w	r2, r3, #7
 800a1ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4432      	add	r2, r6
 800a1d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a1d6:	e0b9      	b.n	800a34c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a1d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1da:	461c      	mov	r4, r3
 800a1dc:	f04f 0500 	mov.w	r5, #0
 800a1e0:	4622      	mov	r2, r4
 800a1e2:	462b      	mov	r3, r5
 800a1e4:	1891      	adds	r1, r2, r2
 800a1e6:	6139      	str	r1, [r7, #16]
 800a1e8:	415b      	adcs	r3, r3
 800a1ea:	617b      	str	r3, [r7, #20]
 800a1ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a1f0:	1912      	adds	r2, r2, r4
 800a1f2:	eb45 0303 	adc.w	r3, r5, r3
 800a1f6:	f04f 0000 	mov.w	r0, #0
 800a1fa:	f04f 0100 	mov.w	r1, #0
 800a1fe:	00d9      	lsls	r1, r3, #3
 800a200:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a204:	00d0      	lsls	r0, r2, #3
 800a206:	4602      	mov	r2, r0
 800a208:	460b      	mov	r3, r1
 800a20a:	eb12 0804 	adds.w	r8, r2, r4
 800a20e:	eb43 0905 	adc.w	r9, r3, r5
 800a212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	4618      	mov	r0, r3
 800a218:	f04f 0100 	mov.w	r1, #0
 800a21c:	f04f 0200 	mov.w	r2, #0
 800a220:	f04f 0300 	mov.w	r3, #0
 800a224:	008b      	lsls	r3, r1, #2
 800a226:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a22a:	0082      	lsls	r2, r0, #2
 800a22c:	4640      	mov	r0, r8
 800a22e:	4649      	mov	r1, r9
 800a230:	f7f6 fd2a 	bl	8000c88 <__aeabi_uldivmod>
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	4b49      	ldr	r3, [pc, #292]	; (800a360 <UART_SetConfig+0x38c>)
 800a23a:	fba3 2302 	umull	r2, r3, r3, r2
 800a23e:	095b      	lsrs	r3, r3, #5
 800a240:	011e      	lsls	r6, r3, #4
 800a242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a244:	4618      	mov	r0, r3
 800a246:	f04f 0100 	mov.w	r1, #0
 800a24a:	4602      	mov	r2, r0
 800a24c:	460b      	mov	r3, r1
 800a24e:	1894      	adds	r4, r2, r2
 800a250:	60bc      	str	r4, [r7, #8]
 800a252:	415b      	adcs	r3, r3
 800a254:	60fb      	str	r3, [r7, #12]
 800a256:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a25a:	1812      	adds	r2, r2, r0
 800a25c:	eb41 0303 	adc.w	r3, r1, r3
 800a260:	f04f 0400 	mov.w	r4, #0
 800a264:	f04f 0500 	mov.w	r5, #0
 800a268:	00dd      	lsls	r5, r3, #3
 800a26a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a26e:	00d4      	lsls	r4, r2, #3
 800a270:	4622      	mov	r2, r4
 800a272:	462b      	mov	r3, r5
 800a274:	1814      	adds	r4, r2, r0
 800a276:	64bc      	str	r4, [r7, #72]	; 0x48
 800a278:	414b      	adcs	r3, r1
 800a27a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a27c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	4618      	mov	r0, r3
 800a282:	f04f 0100 	mov.w	r1, #0
 800a286:	f04f 0200 	mov.w	r2, #0
 800a28a:	f04f 0300 	mov.w	r3, #0
 800a28e:	008b      	lsls	r3, r1, #2
 800a290:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a294:	0082      	lsls	r2, r0, #2
 800a296:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a29a:	f7f6 fcf5 	bl	8000c88 <__aeabi_uldivmod>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	4b2f      	ldr	r3, [pc, #188]	; (800a360 <UART_SetConfig+0x38c>)
 800a2a4:	fba3 1302 	umull	r1, r3, r3, r2
 800a2a8:	095b      	lsrs	r3, r3, #5
 800a2aa:	2164      	movs	r1, #100	; 0x64
 800a2ac:	fb01 f303 	mul.w	r3, r1, r3
 800a2b0:	1ad3      	subs	r3, r2, r3
 800a2b2:	011b      	lsls	r3, r3, #4
 800a2b4:	3332      	adds	r3, #50	; 0x32
 800a2b6:	4a2a      	ldr	r2, [pc, #168]	; (800a360 <UART_SetConfig+0x38c>)
 800a2b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2bc:	095b      	lsrs	r3, r3, #5
 800a2be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2c2:	441e      	add	r6, r3
 800a2c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f04f 0100 	mov.w	r1, #0
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	1894      	adds	r4, r2, r2
 800a2d2:	603c      	str	r4, [r7, #0]
 800a2d4:	415b      	adcs	r3, r3
 800a2d6:	607b      	str	r3, [r7, #4]
 800a2d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2dc:	1812      	adds	r2, r2, r0
 800a2de:	eb41 0303 	adc.w	r3, r1, r3
 800a2e2:	f04f 0400 	mov.w	r4, #0
 800a2e6:	f04f 0500 	mov.w	r5, #0
 800a2ea:	00dd      	lsls	r5, r3, #3
 800a2ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a2f0:	00d4      	lsls	r4, r2, #3
 800a2f2:	4622      	mov	r2, r4
 800a2f4:	462b      	mov	r3, r5
 800a2f6:	eb12 0a00 	adds.w	sl, r2, r0
 800a2fa:	eb43 0b01 	adc.w	fp, r3, r1
 800a2fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	4618      	mov	r0, r3
 800a304:	f04f 0100 	mov.w	r1, #0
 800a308:	f04f 0200 	mov.w	r2, #0
 800a30c:	f04f 0300 	mov.w	r3, #0
 800a310:	008b      	lsls	r3, r1, #2
 800a312:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a316:	0082      	lsls	r2, r0, #2
 800a318:	4650      	mov	r0, sl
 800a31a:	4659      	mov	r1, fp
 800a31c:	f7f6 fcb4 	bl	8000c88 <__aeabi_uldivmod>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	4b0e      	ldr	r3, [pc, #56]	; (800a360 <UART_SetConfig+0x38c>)
 800a326:	fba3 1302 	umull	r1, r3, r3, r2
 800a32a:	095b      	lsrs	r3, r3, #5
 800a32c:	2164      	movs	r1, #100	; 0x64
 800a32e:	fb01 f303 	mul.w	r3, r1, r3
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	011b      	lsls	r3, r3, #4
 800a336:	3332      	adds	r3, #50	; 0x32
 800a338:	4a09      	ldr	r2, [pc, #36]	; (800a360 <UART_SetConfig+0x38c>)
 800a33a:	fba2 2303 	umull	r2, r3, r2, r3
 800a33e:	095b      	lsrs	r3, r3, #5
 800a340:	f003 020f 	and.w	r2, r3, #15
 800a344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4432      	add	r2, r6
 800a34a:	609a      	str	r2, [r3, #8]
}
 800a34c:	bf00      	nop
 800a34e:	377c      	adds	r7, #124	; 0x7c
 800a350:	46bd      	mov	sp, r7
 800a352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a356:	bf00      	nop
 800a358:	40011000 	.word	0x40011000
 800a35c:	40011400 	.word	0x40011400
 800a360:	51eb851f 	.word	0x51eb851f

0800a364 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800a36e:	2300      	movs	r3, #0
 800a370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a37c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	4b20      	ldr	r3, [pc, #128]	; (800a404 <FSMC_NORSRAM_Init+0xa0>)
 800a382:	4013      	ands	r3, r2
 800a384:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a38e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800a394:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800a39a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800a3a0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800a3a6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800a3ac:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800a3b2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800a3b8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800a3be:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800a3c4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800a3ca:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800a3d0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	2b08      	cmp	r3, #8
 800a3de:	d103      	bne.n	800a3e8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3e6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	68f9      	ldr	r1, [r7, #12]
 800a3f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	fff00080 	.word	0xfff00080

0800a408 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800a414:	2300      	movs	r3, #0
 800a416:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	1c5a      	adds	r2, r3, #1
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a422:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a42a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a436:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a43e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800a446:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	3b01      	subs	r3, #1
 800a44e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a450:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	695b      	ldr	r3, [r3, #20]
 800a456:	3b02      	subs	r3, #2
 800a458:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a45a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a460:	4313      	orrs	r3, r2
 800a462:	697a      	ldr	r2, [r7, #20]
 800a464:	4313      	orrs	r3, r2
 800a466:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	1c5a      	adds	r2, r3, #1
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6979      	ldr	r1, [r7, #20]
 800a470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	371c      	adds	r7, #28
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
	...

0800a484 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800a484:	b480      	push	{r7}
 800a486:	b087      	sub	sp, #28
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800a492:	2300      	movs	r3, #0
 800a494:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a49c:	d122      	bne.n	800a4e4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800a4a8:	697a      	ldr	r2, [r7, #20]
 800a4aa:	4b15      	ldr	r3, [pc, #84]	; (800a500 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a4ba:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a4c2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800a4ca:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a4d0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	6979      	ldr	r1, [r7, #20]
 800a4de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a4e2:	e005      	b.n	800a4f0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a4ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	371c      	adds	r7, #28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	cff00000 	.word	0xcff00000

0800a504 <__errno>:
 800a504:	4b01      	ldr	r3, [pc, #4]	; (800a50c <__errno+0x8>)
 800a506:	6818      	ldr	r0, [r3, #0]
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	20000014 	.word	0x20000014

0800a510 <__libc_init_array>:
 800a510:	b570      	push	{r4, r5, r6, lr}
 800a512:	4d0d      	ldr	r5, [pc, #52]	; (800a548 <__libc_init_array+0x38>)
 800a514:	4c0d      	ldr	r4, [pc, #52]	; (800a54c <__libc_init_array+0x3c>)
 800a516:	1b64      	subs	r4, r4, r5
 800a518:	10a4      	asrs	r4, r4, #2
 800a51a:	2600      	movs	r6, #0
 800a51c:	42a6      	cmp	r6, r4
 800a51e:	d109      	bne.n	800a534 <__libc_init_array+0x24>
 800a520:	4d0b      	ldr	r5, [pc, #44]	; (800a550 <__libc_init_array+0x40>)
 800a522:	4c0c      	ldr	r4, [pc, #48]	; (800a554 <__libc_init_array+0x44>)
 800a524:	f002 ffee 	bl	800d504 <_init>
 800a528:	1b64      	subs	r4, r4, r5
 800a52a:	10a4      	asrs	r4, r4, #2
 800a52c:	2600      	movs	r6, #0
 800a52e:	42a6      	cmp	r6, r4
 800a530:	d105      	bne.n	800a53e <__libc_init_array+0x2e>
 800a532:	bd70      	pop	{r4, r5, r6, pc}
 800a534:	f855 3b04 	ldr.w	r3, [r5], #4
 800a538:	4798      	blx	r3
 800a53a:	3601      	adds	r6, #1
 800a53c:	e7ee      	b.n	800a51c <__libc_init_array+0xc>
 800a53e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a542:	4798      	blx	r3
 800a544:	3601      	adds	r6, #1
 800a546:	e7f2      	b.n	800a52e <__libc_init_array+0x1e>
 800a548:	0801a83c 	.word	0x0801a83c
 800a54c:	0801a83c 	.word	0x0801a83c
 800a550:	0801a83c 	.word	0x0801a83c
 800a554:	0801a840 	.word	0x0801a840

0800a558 <memset>:
 800a558:	4402      	add	r2, r0
 800a55a:	4603      	mov	r3, r0
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d100      	bne.n	800a562 <memset+0xa>
 800a560:	4770      	bx	lr
 800a562:	f803 1b01 	strb.w	r1, [r3], #1
 800a566:	e7f9      	b.n	800a55c <memset+0x4>

0800a568 <__cvt>:
 800a568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a56c:	ec55 4b10 	vmov	r4, r5, d0
 800a570:	2d00      	cmp	r5, #0
 800a572:	460e      	mov	r6, r1
 800a574:	4619      	mov	r1, r3
 800a576:	462b      	mov	r3, r5
 800a578:	bfbb      	ittet	lt
 800a57a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a57e:	461d      	movlt	r5, r3
 800a580:	2300      	movge	r3, #0
 800a582:	232d      	movlt	r3, #45	; 0x2d
 800a584:	700b      	strb	r3, [r1, #0]
 800a586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a588:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a58c:	4691      	mov	r9, r2
 800a58e:	f023 0820 	bic.w	r8, r3, #32
 800a592:	bfbc      	itt	lt
 800a594:	4622      	movlt	r2, r4
 800a596:	4614      	movlt	r4, r2
 800a598:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a59c:	d005      	beq.n	800a5aa <__cvt+0x42>
 800a59e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a5a2:	d100      	bne.n	800a5a6 <__cvt+0x3e>
 800a5a4:	3601      	adds	r6, #1
 800a5a6:	2102      	movs	r1, #2
 800a5a8:	e000      	b.n	800a5ac <__cvt+0x44>
 800a5aa:	2103      	movs	r1, #3
 800a5ac:	ab03      	add	r3, sp, #12
 800a5ae:	9301      	str	r3, [sp, #4]
 800a5b0:	ab02      	add	r3, sp, #8
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	ec45 4b10 	vmov	d0, r4, r5
 800a5b8:	4653      	mov	r3, sl
 800a5ba:	4632      	mov	r2, r6
 800a5bc:	f000 fe38 	bl	800b230 <_dtoa_r>
 800a5c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a5c4:	4607      	mov	r7, r0
 800a5c6:	d102      	bne.n	800a5ce <__cvt+0x66>
 800a5c8:	f019 0f01 	tst.w	r9, #1
 800a5cc:	d022      	beq.n	800a614 <__cvt+0xac>
 800a5ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a5d2:	eb07 0906 	add.w	r9, r7, r6
 800a5d6:	d110      	bne.n	800a5fa <__cvt+0x92>
 800a5d8:	783b      	ldrb	r3, [r7, #0]
 800a5da:	2b30      	cmp	r3, #48	; 0x30
 800a5dc:	d10a      	bne.n	800a5f4 <__cvt+0x8c>
 800a5de:	2200      	movs	r2, #0
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	4629      	mov	r1, r5
 800a5e6:	f7f6 fa6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5ea:	b918      	cbnz	r0, 800a5f4 <__cvt+0x8c>
 800a5ec:	f1c6 0601 	rsb	r6, r6, #1
 800a5f0:	f8ca 6000 	str.w	r6, [sl]
 800a5f4:	f8da 3000 	ldr.w	r3, [sl]
 800a5f8:	4499      	add	r9, r3
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4620      	mov	r0, r4
 800a600:	4629      	mov	r1, r5
 800a602:	f7f6 fa61 	bl	8000ac8 <__aeabi_dcmpeq>
 800a606:	b108      	cbz	r0, 800a60c <__cvt+0xa4>
 800a608:	f8cd 900c 	str.w	r9, [sp, #12]
 800a60c:	2230      	movs	r2, #48	; 0x30
 800a60e:	9b03      	ldr	r3, [sp, #12]
 800a610:	454b      	cmp	r3, r9
 800a612:	d307      	bcc.n	800a624 <__cvt+0xbc>
 800a614:	9b03      	ldr	r3, [sp, #12]
 800a616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a618:	1bdb      	subs	r3, r3, r7
 800a61a:	4638      	mov	r0, r7
 800a61c:	6013      	str	r3, [r2, #0]
 800a61e:	b004      	add	sp, #16
 800a620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a624:	1c59      	adds	r1, r3, #1
 800a626:	9103      	str	r1, [sp, #12]
 800a628:	701a      	strb	r2, [r3, #0]
 800a62a:	e7f0      	b.n	800a60e <__cvt+0xa6>

0800a62c <__exponent>:
 800a62c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a62e:	4603      	mov	r3, r0
 800a630:	2900      	cmp	r1, #0
 800a632:	bfb8      	it	lt
 800a634:	4249      	neglt	r1, r1
 800a636:	f803 2b02 	strb.w	r2, [r3], #2
 800a63a:	bfb4      	ite	lt
 800a63c:	222d      	movlt	r2, #45	; 0x2d
 800a63e:	222b      	movge	r2, #43	; 0x2b
 800a640:	2909      	cmp	r1, #9
 800a642:	7042      	strb	r2, [r0, #1]
 800a644:	dd2a      	ble.n	800a69c <__exponent+0x70>
 800a646:	f10d 0407 	add.w	r4, sp, #7
 800a64a:	46a4      	mov	ip, r4
 800a64c:	270a      	movs	r7, #10
 800a64e:	46a6      	mov	lr, r4
 800a650:	460a      	mov	r2, r1
 800a652:	fb91 f6f7 	sdiv	r6, r1, r7
 800a656:	fb07 1516 	mls	r5, r7, r6, r1
 800a65a:	3530      	adds	r5, #48	; 0x30
 800a65c:	2a63      	cmp	r2, #99	; 0x63
 800a65e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a662:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a666:	4631      	mov	r1, r6
 800a668:	dcf1      	bgt.n	800a64e <__exponent+0x22>
 800a66a:	3130      	adds	r1, #48	; 0x30
 800a66c:	f1ae 0502 	sub.w	r5, lr, #2
 800a670:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a674:	1c44      	adds	r4, r0, #1
 800a676:	4629      	mov	r1, r5
 800a678:	4561      	cmp	r1, ip
 800a67a:	d30a      	bcc.n	800a692 <__exponent+0x66>
 800a67c:	f10d 0209 	add.w	r2, sp, #9
 800a680:	eba2 020e 	sub.w	r2, r2, lr
 800a684:	4565      	cmp	r5, ip
 800a686:	bf88      	it	hi
 800a688:	2200      	movhi	r2, #0
 800a68a:	4413      	add	r3, r2
 800a68c:	1a18      	subs	r0, r3, r0
 800a68e:	b003      	add	sp, #12
 800a690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a692:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a696:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a69a:	e7ed      	b.n	800a678 <__exponent+0x4c>
 800a69c:	2330      	movs	r3, #48	; 0x30
 800a69e:	3130      	adds	r1, #48	; 0x30
 800a6a0:	7083      	strb	r3, [r0, #2]
 800a6a2:	70c1      	strb	r1, [r0, #3]
 800a6a4:	1d03      	adds	r3, r0, #4
 800a6a6:	e7f1      	b.n	800a68c <__exponent+0x60>

0800a6a8 <_printf_float>:
 800a6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ac:	ed2d 8b02 	vpush	{d8}
 800a6b0:	b08d      	sub	sp, #52	; 0x34
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a6b8:	4616      	mov	r6, r2
 800a6ba:	461f      	mov	r7, r3
 800a6bc:	4605      	mov	r5, r0
 800a6be:	f001 fd5b 	bl	800c178 <_localeconv_r>
 800a6c2:	f8d0 a000 	ldr.w	sl, [r0]
 800a6c6:	4650      	mov	r0, sl
 800a6c8:	f7f5 fd82 	bl	80001d0 <strlen>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a6d0:	6823      	ldr	r3, [r4, #0]
 800a6d2:	9305      	str	r3, [sp, #20]
 800a6d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a6d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a6dc:	3307      	adds	r3, #7
 800a6de:	f023 0307 	bic.w	r3, r3, #7
 800a6e2:	f103 0208 	add.w	r2, r3, #8
 800a6e6:	f8c8 2000 	str.w	r2, [r8]
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a6f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a6f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a6fa:	9307      	str	r3, [sp, #28]
 800a6fc:	f8cd 8018 	str.w	r8, [sp, #24]
 800a700:	ee08 0a10 	vmov	s16, r0
 800a704:	4b9f      	ldr	r3, [pc, #636]	; (800a984 <_printf_float+0x2dc>)
 800a706:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a70a:	f04f 32ff 	mov.w	r2, #4294967295
 800a70e:	f7f6 fa0d 	bl	8000b2c <__aeabi_dcmpun>
 800a712:	bb88      	cbnz	r0, 800a778 <_printf_float+0xd0>
 800a714:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a718:	4b9a      	ldr	r3, [pc, #616]	; (800a984 <_printf_float+0x2dc>)
 800a71a:	f04f 32ff 	mov.w	r2, #4294967295
 800a71e:	f7f6 f9e7 	bl	8000af0 <__aeabi_dcmple>
 800a722:	bb48      	cbnz	r0, 800a778 <_printf_float+0xd0>
 800a724:	2200      	movs	r2, #0
 800a726:	2300      	movs	r3, #0
 800a728:	4640      	mov	r0, r8
 800a72a:	4649      	mov	r1, r9
 800a72c:	f7f6 f9d6 	bl	8000adc <__aeabi_dcmplt>
 800a730:	b110      	cbz	r0, 800a738 <_printf_float+0x90>
 800a732:	232d      	movs	r3, #45	; 0x2d
 800a734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a738:	4b93      	ldr	r3, [pc, #588]	; (800a988 <_printf_float+0x2e0>)
 800a73a:	4894      	ldr	r0, [pc, #592]	; (800a98c <_printf_float+0x2e4>)
 800a73c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a740:	bf94      	ite	ls
 800a742:	4698      	movls	r8, r3
 800a744:	4680      	movhi	r8, r0
 800a746:	2303      	movs	r3, #3
 800a748:	6123      	str	r3, [r4, #16]
 800a74a:	9b05      	ldr	r3, [sp, #20]
 800a74c:	f023 0204 	bic.w	r2, r3, #4
 800a750:	6022      	str	r2, [r4, #0]
 800a752:	f04f 0900 	mov.w	r9, #0
 800a756:	9700      	str	r7, [sp, #0]
 800a758:	4633      	mov	r3, r6
 800a75a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a75c:	4621      	mov	r1, r4
 800a75e:	4628      	mov	r0, r5
 800a760:	f000 f9d8 	bl	800ab14 <_printf_common>
 800a764:	3001      	adds	r0, #1
 800a766:	f040 8090 	bne.w	800a88a <_printf_float+0x1e2>
 800a76a:	f04f 30ff 	mov.w	r0, #4294967295
 800a76e:	b00d      	add	sp, #52	; 0x34
 800a770:	ecbd 8b02 	vpop	{d8}
 800a774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a778:	4642      	mov	r2, r8
 800a77a:	464b      	mov	r3, r9
 800a77c:	4640      	mov	r0, r8
 800a77e:	4649      	mov	r1, r9
 800a780:	f7f6 f9d4 	bl	8000b2c <__aeabi_dcmpun>
 800a784:	b140      	cbz	r0, 800a798 <_printf_float+0xf0>
 800a786:	464b      	mov	r3, r9
 800a788:	2b00      	cmp	r3, #0
 800a78a:	bfbc      	itt	lt
 800a78c:	232d      	movlt	r3, #45	; 0x2d
 800a78e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a792:	487f      	ldr	r0, [pc, #508]	; (800a990 <_printf_float+0x2e8>)
 800a794:	4b7f      	ldr	r3, [pc, #508]	; (800a994 <_printf_float+0x2ec>)
 800a796:	e7d1      	b.n	800a73c <_printf_float+0x94>
 800a798:	6863      	ldr	r3, [r4, #4]
 800a79a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a79e:	9206      	str	r2, [sp, #24]
 800a7a0:	1c5a      	adds	r2, r3, #1
 800a7a2:	d13f      	bne.n	800a824 <_printf_float+0x17c>
 800a7a4:	2306      	movs	r3, #6
 800a7a6:	6063      	str	r3, [r4, #4]
 800a7a8:	9b05      	ldr	r3, [sp, #20]
 800a7aa:	6861      	ldr	r1, [r4, #4]
 800a7ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	9303      	str	r3, [sp, #12]
 800a7b4:	ab0a      	add	r3, sp, #40	; 0x28
 800a7b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a7ba:	ab09      	add	r3, sp, #36	; 0x24
 800a7bc:	ec49 8b10 	vmov	d0, r8, r9
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	6022      	str	r2, [r4, #0]
 800a7c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	f7ff fecd 	bl	800a568 <__cvt>
 800a7ce:	9b06      	ldr	r3, [sp, #24]
 800a7d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7d2:	2b47      	cmp	r3, #71	; 0x47
 800a7d4:	4680      	mov	r8, r0
 800a7d6:	d108      	bne.n	800a7ea <_printf_float+0x142>
 800a7d8:	1cc8      	adds	r0, r1, #3
 800a7da:	db02      	blt.n	800a7e2 <_printf_float+0x13a>
 800a7dc:	6863      	ldr	r3, [r4, #4]
 800a7de:	4299      	cmp	r1, r3
 800a7e0:	dd41      	ble.n	800a866 <_printf_float+0x1be>
 800a7e2:	f1ab 0b02 	sub.w	fp, fp, #2
 800a7e6:	fa5f fb8b 	uxtb.w	fp, fp
 800a7ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a7ee:	d820      	bhi.n	800a832 <_printf_float+0x18a>
 800a7f0:	3901      	subs	r1, #1
 800a7f2:	465a      	mov	r2, fp
 800a7f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a7f8:	9109      	str	r1, [sp, #36]	; 0x24
 800a7fa:	f7ff ff17 	bl	800a62c <__exponent>
 800a7fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a800:	1813      	adds	r3, r2, r0
 800a802:	2a01      	cmp	r2, #1
 800a804:	4681      	mov	r9, r0
 800a806:	6123      	str	r3, [r4, #16]
 800a808:	dc02      	bgt.n	800a810 <_printf_float+0x168>
 800a80a:	6822      	ldr	r2, [r4, #0]
 800a80c:	07d2      	lsls	r2, r2, #31
 800a80e:	d501      	bpl.n	800a814 <_printf_float+0x16c>
 800a810:	3301      	adds	r3, #1
 800a812:	6123      	str	r3, [r4, #16]
 800a814:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d09c      	beq.n	800a756 <_printf_float+0xae>
 800a81c:	232d      	movs	r3, #45	; 0x2d
 800a81e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a822:	e798      	b.n	800a756 <_printf_float+0xae>
 800a824:	9a06      	ldr	r2, [sp, #24]
 800a826:	2a47      	cmp	r2, #71	; 0x47
 800a828:	d1be      	bne.n	800a7a8 <_printf_float+0x100>
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1bc      	bne.n	800a7a8 <_printf_float+0x100>
 800a82e:	2301      	movs	r3, #1
 800a830:	e7b9      	b.n	800a7a6 <_printf_float+0xfe>
 800a832:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a836:	d118      	bne.n	800a86a <_printf_float+0x1c2>
 800a838:	2900      	cmp	r1, #0
 800a83a:	6863      	ldr	r3, [r4, #4]
 800a83c:	dd0b      	ble.n	800a856 <_printf_float+0x1ae>
 800a83e:	6121      	str	r1, [r4, #16]
 800a840:	b913      	cbnz	r3, 800a848 <_printf_float+0x1a0>
 800a842:	6822      	ldr	r2, [r4, #0]
 800a844:	07d0      	lsls	r0, r2, #31
 800a846:	d502      	bpl.n	800a84e <_printf_float+0x1a6>
 800a848:	3301      	adds	r3, #1
 800a84a:	440b      	add	r3, r1
 800a84c:	6123      	str	r3, [r4, #16]
 800a84e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a850:	f04f 0900 	mov.w	r9, #0
 800a854:	e7de      	b.n	800a814 <_printf_float+0x16c>
 800a856:	b913      	cbnz	r3, 800a85e <_printf_float+0x1b6>
 800a858:	6822      	ldr	r2, [r4, #0]
 800a85a:	07d2      	lsls	r2, r2, #31
 800a85c:	d501      	bpl.n	800a862 <_printf_float+0x1ba>
 800a85e:	3302      	adds	r3, #2
 800a860:	e7f4      	b.n	800a84c <_printf_float+0x1a4>
 800a862:	2301      	movs	r3, #1
 800a864:	e7f2      	b.n	800a84c <_printf_float+0x1a4>
 800a866:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a86a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a86c:	4299      	cmp	r1, r3
 800a86e:	db05      	blt.n	800a87c <_printf_float+0x1d4>
 800a870:	6823      	ldr	r3, [r4, #0]
 800a872:	6121      	str	r1, [r4, #16]
 800a874:	07d8      	lsls	r0, r3, #31
 800a876:	d5ea      	bpl.n	800a84e <_printf_float+0x1a6>
 800a878:	1c4b      	adds	r3, r1, #1
 800a87a:	e7e7      	b.n	800a84c <_printf_float+0x1a4>
 800a87c:	2900      	cmp	r1, #0
 800a87e:	bfd4      	ite	le
 800a880:	f1c1 0202 	rsble	r2, r1, #2
 800a884:	2201      	movgt	r2, #1
 800a886:	4413      	add	r3, r2
 800a888:	e7e0      	b.n	800a84c <_printf_float+0x1a4>
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	055a      	lsls	r2, r3, #21
 800a88e:	d407      	bmi.n	800a8a0 <_printf_float+0x1f8>
 800a890:	6923      	ldr	r3, [r4, #16]
 800a892:	4642      	mov	r2, r8
 800a894:	4631      	mov	r1, r6
 800a896:	4628      	mov	r0, r5
 800a898:	47b8      	blx	r7
 800a89a:	3001      	adds	r0, #1
 800a89c:	d12c      	bne.n	800a8f8 <_printf_float+0x250>
 800a89e:	e764      	b.n	800a76a <_printf_float+0xc2>
 800a8a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8a4:	f240 80e0 	bls.w	800aa68 <_printf_float+0x3c0>
 800a8a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	f7f6 f90a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d034      	beq.n	800a922 <_printf_float+0x27a>
 800a8b8:	4a37      	ldr	r2, [pc, #220]	; (800a998 <_printf_float+0x2f0>)
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	4631      	mov	r1, r6
 800a8be:	4628      	mov	r0, r5
 800a8c0:	47b8      	blx	r7
 800a8c2:	3001      	adds	r0, #1
 800a8c4:	f43f af51 	beq.w	800a76a <_printf_float+0xc2>
 800a8c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	db02      	blt.n	800a8d6 <_printf_float+0x22e>
 800a8d0:	6823      	ldr	r3, [r4, #0]
 800a8d2:	07d8      	lsls	r0, r3, #31
 800a8d4:	d510      	bpl.n	800a8f8 <_printf_float+0x250>
 800a8d6:	ee18 3a10 	vmov	r3, s16
 800a8da:	4652      	mov	r2, sl
 800a8dc:	4631      	mov	r1, r6
 800a8de:	4628      	mov	r0, r5
 800a8e0:	47b8      	blx	r7
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	f43f af41 	beq.w	800a76a <_printf_float+0xc2>
 800a8e8:	f04f 0800 	mov.w	r8, #0
 800a8ec:	f104 091a 	add.w	r9, r4, #26
 800a8f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	4543      	cmp	r3, r8
 800a8f6:	dc09      	bgt.n	800a90c <_printf_float+0x264>
 800a8f8:	6823      	ldr	r3, [r4, #0]
 800a8fa:	079b      	lsls	r3, r3, #30
 800a8fc:	f100 8105 	bmi.w	800ab0a <_printf_float+0x462>
 800a900:	68e0      	ldr	r0, [r4, #12]
 800a902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a904:	4298      	cmp	r0, r3
 800a906:	bfb8      	it	lt
 800a908:	4618      	movlt	r0, r3
 800a90a:	e730      	b.n	800a76e <_printf_float+0xc6>
 800a90c:	2301      	movs	r3, #1
 800a90e:	464a      	mov	r2, r9
 800a910:	4631      	mov	r1, r6
 800a912:	4628      	mov	r0, r5
 800a914:	47b8      	blx	r7
 800a916:	3001      	adds	r0, #1
 800a918:	f43f af27 	beq.w	800a76a <_printf_float+0xc2>
 800a91c:	f108 0801 	add.w	r8, r8, #1
 800a920:	e7e6      	b.n	800a8f0 <_printf_float+0x248>
 800a922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a924:	2b00      	cmp	r3, #0
 800a926:	dc39      	bgt.n	800a99c <_printf_float+0x2f4>
 800a928:	4a1b      	ldr	r2, [pc, #108]	; (800a998 <_printf_float+0x2f0>)
 800a92a:	2301      	movs	r3, #1
 800a92c:	4631      	mov	r1, r6
 800a92e:	4628      	mov	r0, r5
 800a930:	47b8      	blx	r7
 800a932:	3001      	adds	r0, #1
 800a934:	f43f af19 	beq.w	800a76a <_printf_float+0xc2>
 800a938:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a93c:	4313      	orrs	r3, r2
 800a93e:	d102      	bne.n	800a946 <_printf_float+0x29e>
 800a940:	6823      	ldr	r3, [r4, #0]
 800a942:	07d9      	lsls	r1, r3, #31
 800a944:	d5d8      	bpl.n	800a8f8 <_printf_float+0x250>
 800a946:	ee18 3a10 	vmov	r3, s16
 800a94a:	4652      	mov	r2, sl
 800a94c:	4631      	mov	r1, r6
 800a94e:	4628      	mov	r0, r5
 800a950:	47b8      	blx	r7
 800a952:	3001      	adds	r0, #1
 800a954:	f43f af09 	beq.w	800a76a <_printf_float+0xc2>
 800a958:	f04f 0900 	mov.w	r9, #0
 800a95c:	f104 0a1a 	add.w	sl, r4, #26
 800a960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a962:	425b      	negs	r3, r3
 800a964:	454b      	cmp	r3, r9
 800a966:	dc01      	bgt.n	800a96c <_printf_float+0x2c4>
 800a968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a96a:	e792      	b.n	800a892 <_printf_float+0x1ea>
 800a96c:	2301      	movs	r3, #1
 800a96e:	4652      	mov	r2, sl
 800a970:	4631      	mov	r1, r6
 800a972:	4628      	mov	r0, r5
 800a974:	47b8      	blx	r7
 800a976:	3001      	adds	r0, #1
 800a978:	f43f aef7 	beq.w	800a76a <_printf_float+0xc2>
 800a97c:	f109 0901 	add.w	r9, r9, #1
 800a980:	e7ee      	b.n	800a960 <_printf_float+0x2b8>
 800a982:	bf00      	nop
 800a984:	7fefffff 	.word	0x7fefffff
 800a988:	0801a458 	.word	0x0801a458
 800a98c:	0801a45c 	.word	0x0801a45c
 800a990:	0801a464 	.word	0x0801a464
 800a994:	0801a460 	.word	0x0801a460
 800a998:	0801a468 	.word	0x0801a468
 800a99c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a99e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	bfa8      	it	ge
 800a9a4:	461a      	movge	r2, r3
 800a9a6:	2a00      	cmp	r2, #0
 800a9a8:	4691      	mov	r9, r2
 800a9aa:	dc37      	bgt.n	800aa1c <_printf_float+0x374>
 800a9ac:	f04f 0b00 	mov.w	fp, #0
 800a9b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9b4:	f104 021a 	add.w	r2, r4, #26
 800a9b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9ba:	9305      	str	r3, [sp, #20]
 800a9bc:	eba3 0309 	sub.w	r3, r3, r9
 800a9c0:	455b      	cmp	r3, fp
 800a9c2:	dc33      	bgt.n	800aa2c <_printf_float+0x384>
 800a9c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	db3b      	blt.n	800aa44 <_printf_float+0x39c>
 800a9cc:	6823      	ldr	r3, [r4, #0]
 800a9ce:	07da      	lsls	r2, r3, #31
 800a9d0:	d438      	bmi.n	800aa44 <_printf_float+0x39c>
 800a9d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9d4:	9b05      	ldr	r3, [sp, #20]
 800a9d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	eba2 0901 	sub.w	r9, r2, r1
 800a9de:	4599      	cmp	r9, r3
 800a9e0:	bfa8      	it	ge
 800a9e2:	4699      	movge	r9, r3
 800a9e4:	f1b9 0f00 	cmp.w	r9, #0
 800a9e8:	dc35      	bgt.n	800aa56 <_printf_float+0x3ae>
 800a9ea:	f04f 0800 	mov.w	r8, #0
 800a9ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9f2:	f104 0a1a 	add.w	sl, r4, #26
 800a9f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9fa:	1a9b      	subs	r3, r3, r2
 800a9fc:	eba3 0309 	sub.w	r3, r3, r9
 800aa00:	4543      	cmp	r3, r8
 800aa02:	f77f af79 	ble.w	800a8f8 <_printf_float+0x250>
 800aa06:	2301      	movs	r3, #1
 800aa08:	4652      	mov	r2, sl
 800aa0a:	4631      	mov	r1, r6
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	47b8      	blx	r7
 800aa10:	3001      	adds	r0, #1
 800aa12:	f43f aeaa 	beq.w	800a76a <_printf_float+0xc2>
 800aa16:	f108 0801 	add.w	r8, r8, #1
 800aa1a:	e7ec      	b.n	800a9f6 <_printf_float+0x34e>
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	4631      	mov	r1, r6
 800aa20:	4642      	mov	r2, r8
 800aa22:	4628      	mov	r0, r5
 800aa24:	47b8      	blx	r7
 800aa26:	3001      	adds	r0, #1
 800aa28:	d1c0      	bne.n	800a9ac <_printf_float+0x304>
 800aa2a:	e69e      	b.n	800a76a <_printf_float+0xc2>
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	4631      	mov	r1, r6
 800aa30:	4628      	mov	r0, r5
 800aa32:	9205      	str	r2, [sp, #20]
 800aa34:	47b8      	blx	r7
 800aa36:	3001      	adds	r0, #1
 800aa38:	f43f ae97 	beq.w	800a76a <_printf_float+0xc2>
 800aa3c:	9a05      	ldr	r2, [sp, #20]
 800aa3e:	f10b 0b01 	add.w	fp, fp, #1
 800aa42:	e7b9      	b.n	800a9b8 <_printf_float+0x310>
 800aa44:	ee18 3a10 	vmov	r3, s16
 800aa48:	4652      	mov	r2, sl
 800aa4a:	4631      	mov	r1, r6
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	47b8      	blx	r7
 800aa50:	3001      	adds	r0, #1
 800aa52:	d1be      	bne.n	800a9d2 <_printf_float+0x32a>
 800aa54:	e689      	b.n	800a76a <_printf_float+0xc2>
 800aa56:	9a05      	ldr	r2, [sp, #20]
 800aa58:	464b      	mov	r3, r9
 800aa5a:	4442      	add	r2, r8
 800aa5c:	4631      	mov	r1, r6
 800aa5e:	4628      	mov	r0, r5
 800aa60:	47b8      	blx	r7
 800aa62:	3001      	adds	r0, #1
 800aa64:	d1c1      	bne.n	800a9ea <_printf_float+0x342>
 800aa66:	e680      	b.n	800a76a <_printf_float+0xc2>
 800aa68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa6a:	2a01      	cmp	r2, #1
 800aa6c:	dc01      	bgt.n	800aa72 <_printf_float+0x3ca>
 800aa6e:	07db      	lsls	r3, r3, #31
 800aa70:	d538      	bpl.n	800aae4 <_printf_float+0x43c>
 800aa72:	2301      	movs	r3, #1
 800aa74:	4642      	mov	r2, r8
 800aa76:	4631      	mov	r1, r6
 800aa78:	4628      	mov	r0, r5
 800aa7a:	47b8      	blx	r7
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	f43f ae74 	beq.w	800a76a <_printf_float+0xc2>
 800aa82:	ee18 3a10 	vmov	r3, s16
 800aa86:	4652      	mov	r2, sl
 800aa88:	4631      	mov	r1, r6
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	47b8      	blx	r7
 800aa8e:	3001      	adds	r0, #1
 800aa90:	f43f ae6b 	beq.w	800a76a <_printf_float+0xc2>
 800aa94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa98:	2200      	movs	r2, #0
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	f7f6 f814 	bl	8000ac8 <__aeabi_dcmpeq>
 800aaa0:	b9d8      	cbnz	r0, 800aada <_printf_float+0x432>
 800aaa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaa4:	f108 0201 	add.w	r2, r8, #1
 800aaa8:	3b01      	subs	r3, #1
 800aaaa:	4631      	mov	r1, r6
 800aaac:	4628      	mov	r0, r5
 800aaae:	47b8      	blx	r7
 800aab0:	3001      	adds	r0, #1
 800aab2:	d10e      	bne.n	800aad2 <_printf_float+0x42a>
 800aab4:	e659      	b.n	800a76a <_printf_float+0xc2>
 800aab6:	2301      	movs	r3, #1
 800aab8:	4652      	mov	r2, sl
 800aaba:	4631      	mov	r1, r6
 800aabc:	4628      	mov	r0, r5
 800aabe:	47b8      	blx	r7
 800aac0:	3001      	adds	r0, #1
 800aac2:	f43f ae52 	beq.w	800a76a <_printf_float+0xc2>
 800aac6:	f108 0801 	add.w	r8, r8, #1
 800aaca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aacc:	3b01      	subs	r3, #1
 800aace:	4543      	cmp	r3, r8
 800aad0:	dcf1      	bgt.n	800aab6 <_printf_float+0x40e>
 800aad2:	464b      	mov	r3, r9
 800aad4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aad8:	e6dc      	b.n	800a894 <_printf_float+0x1ec>
 800aada:	f04f 0800 	mov.w	r8, #0
 800aade:	f104 0a1a 	add.w	sl, r4, #26
 800aae2:	e7f2      	b.n	800aaca <_printf_float+0x422>
 800aae4:	2301      	movs	r3, #1
 800aae6:	4642      	mov	r2, r8
 800aae8:	e7df      	b.n	800aaaa <_printf_float+0x402>
 800aaea:	2301      	movs	r3, #1
 800aaec:	464a      	mov	r2, r9
 800aaee:	4631      	mov	r1, r6
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	47b8      	blx	r7
 800aaf4:	3001      	adds	r0, #1
 800aaf6:	f43f ae38 	beq.w	800a76a <_printf_float+0xc2>
 800aafa:	f108 0801 	add.w	r8, r8, #1
 800aafe:	68e3      	ldr	r3, [r4, #12]
 800ab00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab02:	1a5b      	subs	r3, r3, r1
 800ab04:	4543      	cmp	r3, r8
 800ab06:	dcf0      	bgt.n	800aaea <_printf_float+0x442>
 800ab08:	e6fa      	b.n	800a900 <_printf_float+0x258>
 800ab0a:	f04f 0800 	mov.w	r8, #0
 800ab0e:	f104 0919 	add.w	r9, r4, #25
 800ab12:	e7f4      	b.n	800aafe <_printf_float+0x456>

0800ab14 <_printf_common>:
 800ab14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab18:	4616      	mov	r6, r2
 800ab1a:	4699      	mov	r9, r3
 800ab1c:	688a      	ldr	r2, [r1, #8]
 800ab1e:	690b      	ldr	r3, [r1, #16]
 800ab20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab24:	4293      	cmp	r3, r2
 800ab26:	bfb8      	it	lt
 800ab28:	4613      	movlt	r3, r2
 800ab2a:	6033      	str	r3, [r6, #0]
 800ab2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab30:	4607      	mov	r7, r0
 800ab32:	460c      	mov	r4, r1
 800ab34:	b10a      	cbz	r2, 800ab3a <_printf_common+0x26>
 800ab36:	3301      	adds	r3, #1
 800ab38:	6033      	str	r3, [r6, #0]
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	0699      	lsls	r1, r3, #26
 800ab3e:	bf42      	ittt	mi
 800ab40:	6833      	ldrmi	r3, [r6, #0]
 800ab42:	3302      	addmi	r3, #2
 800ab44:	6033      	strmi	r3, [r6, #0]
 800ab46:	6825      	ldr	r5, [r4, #0]
 800ab48:	f015 0506 	ands.w	r5, r5, #6
 800ab4c:	d106      	bne.n	800ab5c <_printf_common+0x48>
 800ab4e:	f104 0a19 	add.w	sl, r4, #25
 800ab52:	68e3      	ldr	r3, [r4, #12]
 800ab54:	6832      	ldr	r2, [r6, #0]
 800ab56:	1a9b      	subs	r3, r3, r2
 800ab58:	42ab      	cmp	r3, r5
 800ab5a:	dc26      	bgt.n	800abaa <_printf_common+0x96>
 800ab5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab60:	1e13      	subs	r3, r2, #0
 800ab62:	6822      	ldr	r2, [r4, #0]
 800ab64:	bf18      	it	ne
 800ab66:	2301      	movne	r3, #1
 800ab68:	0692      	lsls	r2, r2, #26
 800ab6a:	d42b      	bmi.n	800abc4 <_printf_common+0xb0>
 800ab6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab70:	4649      	mov	r1, r9
 800ab72:	4638      	mov	r0, r7
 800ab74:	47c0      	blx	r8
 800ab76:	3001      	adds	r0, #1
 800ab78:	d01e      	beq.n	800abb8 <_printf_common+0xa4>
 800ab7a:	6823      	ldr	r3, [r4, #0]
 800ab7c:	68e5      	ldr	r5, [r4, #12]
 800ab7e:	6832      	ldr	r2, [r6, #0]
 800ab80:	f003 0306 	and.w	r3, r3, #6
 800ab84:	2b04      	cmp	r3, #4
 800ab86:	bf08      	it	eq
 800ab88:	1aad      	subeq	r5, r5, r2
 800ab8a:	68a3      	ldr	r3, [r4, #8]
 800ab8c:	6922      	ldr	r2, [r4, #16]
 800ab8e:	bf0c      	ite	eq
 800ab90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab94:	2500      	movne	r5, #0
 800ab96:	4293      	cmp	r3, r2
 800ab98:	bfc4      	itt	gt
 800ab9a:	1a9b      	subgt	r3, r3, r2
 800ab9c:	18ed      	addgt	r5, r5, r3
 800ab9e:	2600      	movs	r6, #0
 800aba0:	341a      	adds	r4, #26
 800aba2:	42b5      	cmp	r5, r6
 800aba4:	d11a      	bne.n	800abdc <_printf_common+0xc8>
 800aba6:	2000      	movs	r0, #0
 800aba8:	e008      	b.n	800abbc <_printf_common+0xa8>
 800abaa:	2301      	movs	r3, #1
 800abac:	4652      	mov	r2, sl
 800abae:	4649      	mov	r1, r9
 800abb0:	4638      	mov	r0, r7
 800abb2:	47c0      	blx	r8
 800abb4:	3001      	adds	r0, #1
 800abb6:	d103      	bne.n	800abc0 <_printf_common+0xac>
 800abb8:	f04f 30ff 	mov.w	r0, #4294967295
 800abbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc0:	3501      	adds	r5, #1
 800abc2:	e7c6      	b.n	800ab52 <_printf_common+0x3e>
 800abc4:	18e1      	adds	r1, r4, r3
 800abc6:	1c5a      	adds	r2, r3, #1
 800abc8:	2030      	movs	r0, #48	; 0x30
 800abca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800abce:	4422      	add	r2, r4
 800abd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800abd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abd8:	3302      	adds	r3, #2
 800abda:	e7c7      	b.n	800ab6c <_printf_common+0x58>
 800abdc:	2301      	movs	r3, #1
 800abde:	4622      	mov	r2, r4
 800abe0:	4649      	mov	r1, r9
 800abe2:	4638      	mov	r0, r7
 800abe4:	47c0      	blx	r8
 800abe6:	3001      	adds	r0, #1
 800abe8:	d0e6      	beq.n	800abb8 <_printf_common+0xa4>
 800abea:	3601      	adds	r6, #1
 800abec:	e7d9      	b.n	800aba2 <_printf_common+0x8e>
	...

0800abf0 <_printf_i>:
 800abf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abf4:	460c      	mov	r4, r1
 800abf6:	4691      	mov	r9, r2
 800abf8:	7e27      	ldrb	r7, [r4, #24]
 800abfa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800abfc:	2f78      	cmp	r7, #120	; 0x78
 800abfe:	4680      	mov	r8, r0
 800ac00:	469a      	mov	sl, r3
 800ac02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac06:	d807      	bhi.n	800ac18 <_printf_i+0x28>
 800ac08:	2f62      	cmp	r7, #98	; 0x62
 800ac0a:	d80a      	bhi.n	800ac22 <_printf_i+0x32>
 800ac0c:	2f00      	cmp	r7, #0
 800ac0e:	f000 80d8 	beq.w	800adc2 <_printf_i+0x1d2>
 800ac12:	2f58      	cmp	r7, #88	; 0x58
 800ac14:	f000 80a3 	beq.w	800ad5e <_printf_i+0x16e>
 800ac18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac20:	e03a      	b.n	800ac98 <_printf_i+0xa8>
 800ac22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac26:	2b15      	cmp	r3, #21
 800ac28:	d8f6      	bhi.n	800ac18 <_printf_i+0x28>
 800ac2a:	a001      	add	r0, pc, #4	; (adr r0, 800ac30 <_printf_i+0x40>)
 800ac2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ac30:	0800ac89 	.word	0x0800ac89
 800ac34:	0800ac9d 	.word	0x0800ac9d
 800ac38:	0800ac19 	.word	0x0800ac19
 800ac3c:	0800ac19 	.word	0x0800ac19
 800ac40:	0800ac19 	.word	0x0800ac19
 800ac44:	0800ac19 	.word	0x0800ac19
 800ac48:	0800ac9d 	.word	0x0800ac9d
 800ac4c:	0800ac19 	.word	0x0800ac19
 800ac50:	0800ac19 	.word	0x0800ac19
 800ac54:	0800ac19 	.word	0x0800ac19
 800ac58:	0800ac19 	.word	0x0800ac19
 800ac5c:	0800ada9 	.word	0x0800ada9
 800ac60:	0800accd 	.word	0x0800accd
 800ac64:	0800ad8b 	.word	0x0800ad8b
 800ac68:	0800ac19 	.word	0x0800ac19
 800ac6c:	0800ac19 	.word	0x0800ac19
 800ac70:	0800adcb 	.word	0x0800adcb
 800ac74:	0800ac19 	.word	0x0800ac19
 800ac78:	0800accd 	.word	0x0800accd
 800ac7c:	0800ac19 	.word	0x0800ac19
 800ac80:	0800ac19 	.word	0x0800ac19
 800ac84:	0800ad93 	.word	0x0800ad93
 800ac88:	680b      	ldr	r3, [r1, #0]
 800ac8a:	1d1a      	adds	r2, r3, #4
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	600a      	str	r2, [r1, #0]
 800ac90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e0a3      	b.n	800ade4 <_printf_i+0x1f4>
 800ac9c:	6825      	ldr	r5, [r4, #0]
 800ac9e:	6808      	ldr	r0, [r1, #0]
 800aca0:	062e      	lsls	r6, r5, #24
 800aca2:	f100 0304 	add.w	r3, r0, #4
 800aca6:	d50a      	bpl.n	800acbe <_printf_i+0xce>
 800aca8:	6805      	ldr	r5, [r0, #0]
 800acaa:	600b      	str	r3, [r1, #0]
 800acac:	2d00      	cmp	r5, #0
 800acae:	da03      	bge.n	800acb8 <_printf_i+0xc8>
 800acb0:	232d      	movs	r3, #45	; 0x2d
 800acb2:	426d      	negs	r5, r5
 800acb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acb8:	485e      	ldr	r0, [pc, #376]	; (800ae34 <_printf_i+0x244>)
 800acba:	230a      	movs	r3, #10
 800acbc:	e019      	b.n	800acf2 <_printf_i+0x102>
 800acbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800acc2:	6805      	ldr	r5, [r0, #0]
 800acc4:	600b      	str	r3, [r1, #0]
 800acc6:	bf18      	it	ne
 800acc8:	b22d      	sxthne	r5, r5
 800acca:	e7ef      	b.n	800acac <_printf_i+0xbc>
 800accc:	680b      	ldr	r3, [r1, #0]
 800acce:	6825      	ldr	r5, [r4, #0]
 800acd0:	1d18      	adds	r0, r3, #4
 800acd2:	6008      	str	r0, [r1, #0]
 800acd4:	0628      	lsls	r0, r5, #24
 800acd6:	d501      	bpl.n	800acdc <_printf_i+0xec>
 800acd8:	681d      	ldr	r5, [r3, #0]
 800acda:	e002      	b.n	800ace2 <_printf_i+0xf2>
 800acdc:	0669      	lsls	r1, r5, #25
 800acde:	d5fb      	bpl.n	800acd8 <_printf_i+0xe8>
 800ace0:	881d      	ldrh	r5, [r3, #0]
 800ace2:	4854      	ldr	r0, [pc, #336]	; (800ae34 <_printf_i+0x244>)
 800ace4:	2f6f      	cmp	r7, #111	; 0x6f
 800ace6:	bf0c      	ite	eq
 800ace8:	2308      	moveq	r3, #8
 800acea:	230a      	movne	r3, #10
 800acec:	2100      	movs	r1, #0
 800acee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acf2:	6866      	ldr	r6, [r4, #4]
 800acf4:	60a6      	str	r6, [r4, #8]
 800acf6:	2e00      	cmp	r6, #0
 800acf8:	bfa2      	ittt	ge
 800acfa:	6821      	ldrge	r1, [r4, #0]
 800acfc:	f021 0104 	bicge.w	r1, r1, #4
 800ad00:	6021      	strge	r1, [r4, #0]
 800ad02:	b90d      	cbnz	r5, 800ad08 <_printf_i+0x118>
 800ad04:	2e00      	cmp	r6, #0
 800ad06:	d04d      	beq.n	800ada4 <_printf_i+0x1b4>
 800ad08:	4616      	mov	r6, r2
 800ad0a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad0e:	fb03 5711 	mls	r7, r3, r1, r5
 800ad12:	5dc7      	ldrb	r7, [r0, r7]
 800ad14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad18:	462f      	mov	r7, r5
 800ad1a:	42bb      	cmp	r3, r7
 800ad1c:	460d      	mov	r5, r1
 800ad1e:	d9f4      	bls.n	800ad0a <_printf_i+0x11a>
 800ad20:	2b08      	cmp	r3, #8
 800ad22:	d10b      	bne.n	800ad3c <_printf_i+0x14c>
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	07df      	lsls	r7, r3, #31
 800ad28:	d508      	bpl.n	800ad3c <_printf_i+0x14c>
 800ad2a:	6923      	ldr	r3, [r4, #16]
 800ad2c:	6861      	ldr	r1, [r4, #4]
 800ad2e:	4299      	cmp	r1, r3
 800ad30:	bfde      	ittt	le
 800ad32:	2330      	movle	r3, #48	; 0x30
 800ad34:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad38:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad3c:	1b92      	subs	r2, r2, r6
 800ad3e:	6122      	str	r2, [r4, #16]
 800ad40:	f8cd a000 	str.w	sl, [sp]
 800ad44:	464b      	mov	r3, r9
 800ad46:	aa03      	add	r2, sp, #12
 800ad48:	4621      	mov	r1, r4
 800ad4a:	4640      	mov	r0, r8
 800ad4c:	f7ff fee2 	bl	800ab14 <_printf_common>
 800ad50:	3001      	adds	r0, #1
 800ad52:	d14c      	bne.n	800adee <_printf_i+0x1fe>
 800ad54:	f04f 30ff 	mov.w	r0, #4294967295
 800ad58:	b004      	add	sp, #16
 800ad5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad5e:	4835      	ldr	r0, [pc, #212]	; (800ae34 <_printf_i+0x244>)
 800ad60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ad64:	6823      	ldr	r3, [r4, #0]
 800ad66:	680e      	ldr	r6, [r1, #0]
 800ad68:	061f      	lsls	r7, r3, #24
 800ad6a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ad6e:	600e      	str	r6, [r1, #0]
 800ad70:	d514      	bpl.n	800ad9c <_printf_i+0x1ac>
 800ad72:	07d9      	lsls	r1, r3, #31
 800ad74:	bf44      	itt	mi
 800ad76:	f043 0320 	orrmi.w	r3, r3, #32
 800ad7a:	6023      	strmi	r3, [r4, #0]
 800ad7c:	b91d      	cbnz	r5, 800ad86 <_printf_i+0x196>
 800ad7e:	6823      	ldr	r3, [r4, #0]
 800ad80:	f023 0320 	bic.w	r3, r3, #32
 800ad84:	6023      	str	r3, [r4, #0]
 800ad86:	2310      	movs	r3, #16
 800ad88:	e7b0      	b.n	800acec <_printf_i+0xfc>
 800ad8a:	6823      	ldr	r3, [r4, #0]
 800ad8c:	f043 0320 	orr.w	r3, r3, #32
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	2378      	movs	r3, #120	; 0x78
 800ad94:	4828      	ldr	r0, [pc, #160]	; (800ae38 <_printf_i+0x248>)
 800ad96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad9a:	e7e3      	b.n	800ad64 <_printf_i+0x174>
 800ad9c:	065e      	lsls	r6, r3, #25
 800ad9e:	bf48      	it	mi
 800ada0:	b2ad      	uxthmi	r5, r5
 800ada2:	e7e6      	b.n	800ad72 <_printf_i+0x182>
 800ada4:	4616      	mov	r6, r2
 800ada6:	e7bb      	b.n	800ad20 <_printf_i+0x130>
 800ada8:	680b      	ldr	r3, [r1, #0]
 800adaa:	6826      	ldr	r6, [r4, #0]
 800adac:	6960      	ldr	r0, [r4, #20]
 800adae:	1d1d      	adds	r5, r3, #4
 800adb0:	600d      	str	r5, [r1, #0]
 800adb2:	0635      	lsls	r5, r6, #24
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	d501      	bpl.n	800adbc <_printf_i+0x1cc>
 800adb8:	6018      	str	r0, [r3, #0]
 800adba:	e002      	b.n	800adc2 <_printf_i+0x1d2>
 800adbc:	0671      	lsls	r1, r6, #25
 800adbe:	d5fb      	bpl.n	800adb8 <_printf_i+0x1c8>
 800adc0:	8018      	strh	r0, [r3, #0]
 800adc2:	2300      	movs	r3, #0
 800adc4:	6123      	str	r3, [r4, #16]
 800adc6:	4616      	mov	r6, r2
 800adc8:	e7ba      	b.n	800ad40 <_printf_i+0x150>
 800adca:	680b      	ldr	r3, [r1, #0]
 800adcc:	1d1a      	adds	r2, r3, #4
 800adce:	600a      	str	r2, [r1, #0]
 800add0:	681e      	ldr	r6, [r3, #0]
 800add2:	6862      	ldr	r2, [r4, #4]
 800add4:	2100      	movs	r1, #0
 800add6:	4630      	mov	r0, r6
 800add8:	f7f5 fa02 	bl	80001e0 <memchr>
 800addc:	b108      	cbz	r0, 800ade2 <_printf_i+0x1f2>
 800adde:	1b80      	subs	r0, r0, r6
 800ade0:	6060      	str	r0, [r4, #4]
 800ade2:	6863      	ldr	r3, [r4, #4]
 800ade4:	6123      	str	r3, [r4, #16]
 800ade6:	2300      	movs	r3, #0
 800ade8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adec:	e7a8      	b.n	800ad40 <_printf_i+0x150>
 800adee:	6923      	ldr	r3, [r4, #16]
 800adf0:	4632      	mov	r2, r6
 800adf2:	4649      	mov	r1, r9
 800adf4:	4640      	mov	r0, r8
 800adf6:	47d0      	blx	sl
 800adf8:	3001      	adds	r0, #1
 800adfa:	d0ab      	beq.n	800ad54 <_printf_i+0x164>
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	079b      	lsls	r3, r3, #30
 800ae00:	d413      	bmi.n	800ae2a <_printf_i+0x23a>
 800ae02:	68e0      	ldr	r0, [r4, #12]
 800ae04:	9b03      	ldr	r3, [sp, #12]
 800ae06:	4298      	cmp	r0, r3
 800ae08:	bfb8      	it	lt
 800ae0a:	4618      	movlt	r0, r3
 800ae0c:	e7a4      	b.n	800ad58 <_printf_i+0x168>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	4632      	mov	r2, r6
 800ae12:	4649      	mov	r1, r9
 800ae14:	4640      	mov	r0, r8
 800ae16:	47d0      	blx	sl
 800ae18:	3001      	adds	r0, #1
 800ae1a:	d09b      	beq.n	800ad54 <_printf_i+0x164>
 800ae1c:	3501      	adds	r5, #1
 800ae1e:	68e3      	ldr	r3, [r4, #12]
 800ae20:	9903      	ldr	r1, [sp, #12]
 800ae22:	1a5b      	subs	r3, r3, r1
 800ae24:	42ab      	cmp	r3, r5
 800ae26:	dcf2      	bgt.n	800ae0e <_printf_i+0x21e>
 800ae28:	e7eb      	b.n	800ae02 <_printf_i+0x212>
 800ae2a:	2500      	movs	r5, #0
 800ae2c:	f104 0619 	add.w	r6, r4, #25
 800ae30:	e7f5      	b.n	800ae1e <_printf_i+0x22e>
 800ae32:	bf00      	nop
 800ae34:	0801a46a 	.word	0x0801a46a
 800ae38:	0801a47b 	.word	0x0801a47b

0800ae3c <iprintf>:
 800ae3c:	b40f      	push	{r0, r1, r2, r3}
 800ae3e:	4b0a      	ldr	r3, [pc, #40]	; (800ae68 <iprintf+0x2c>)
 800ae40:	b513      	push	{r0, r1, r4, lr}
 800ae42:	681c      	ldr	r4, [r3, #0]
 800ae44:	b124      	cbz	r4, 800ae50 <iprintf+0x14>
 800ae46:	69a3      	ldr	r3, [r4, #24]
 800ae48:	b913      	cbnz	r3, 800ae50 <iprintf+0x14>
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f001 f8f6 	bl	800c03c <__sinit>
 800ae50:	ab05      	add	r3, sp, #20
 800ae52:	9a04      	ldr	r2, [sp, #16]
 800ae54:	68a1      	ldr	r1, [r4, #8]
 800ae56:	9301      	str	r3, [sp, #4]
 800ae58:	4620      	mov	r0, r4
 800ae5a:	f001 ffcd 	bl	800cdf8 <_vfiprintf_r>
 800ae5e:	b002      	add	sp, #8
 800ae60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae64:	b004      	add	sp, #16
 800ae66:	4770      	bx	lr
 800ae68:	20000014 	.word	0x20000014

0800ae6c <_puts_r>:
 800ae6c:	b570      	push	{r4, r5, r6, lr}
 800ae6e:	460e      	mov	r6, r1
 800ae70:	4605      	mov	r5, r0
 800ae72:	b118      	cbz	r0, 800ae7c <_puts_r+0x10>
 800ae74:	6983      	ldr	r3, [r0, #24]
 800ae76:	b90b      	cbnz	r3, 800ae7c <_puts_r+0x10>
 800ae78:	f001 f8e0 	bl	800c03c <__sinit>
 800ae7c:	69ab      	ldr	r3, [r5, #24]
 800ae7e:	68ac      	ldr	r4, [r5, #8]
 800ae80:	b913      	cbnz	r3, 800ae88 <_puts_r+0x1c>
 800ae82:	4628      	mov	r0, r5
 800ae84:	f001 f8da 	bl	800c03c <__sinit>
 800ae88:	4b2c      	ldr	r3, [pc, #176]	; (800af3c <_puts_r+0xd0>)
 800ae8a:	429c      	cmp	r4, r3
 800ae8c:	d120      	bne.n	800aed0 <_puts_r+0x64>
 800ae8e:	686c      	ldr	r4, [r5, #4]
 800ae90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae92:	07db      	lsls	r3, r3, #31
 800ae94:	d405      	bmi.n	800aea2 <_puts_r+0x36>
 800ae96:	89a3      	ldrh	r3, [r4, #12]
 800ae98:	0598      	lsls	r0, r3, #22
 800ae9a:	d402      	bmi.n	800aea2 <_puts_r+0x36>
 800ae9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae9e:	f001 f970 	bl	800c182 <__retarget_lock_acquire_recursive>
 800aea2:	89a3      	ldrh	r3, [r4, #12]
 800aea4:	0719      	lsls	r1, r3, #28
 800aea6:	d51d      	bpl.n	800aee4 <_puts_r+0x78>
 800aea8:	6923      	ldr	r3, [r4, #16]
 800aeaa:	b1db      	cbz	r3, 800aee4 <_puts_r+0x78>
 800aeac:	3e01      	subs	r6, #1
 800aeae:	68a3      	ldr	r3, [r4, #8]
 800aeb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	60a3      	str	r3, [r4, #8]
 800aeb8:	bb39      	cbnz	r1, 800af0a <_puts_r+0x9e>
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	da38      	bge.n	800af30 <_puts_r+0xc4>
 800aebe:	4622      	mov	r2, r4
 800aec0:	210a      	movs	r1, #10
 800aec2:	4628      	mov	r0, r5
 800aec4:	f000 f868 	bl	800af98 <__swbuf_r>
 800aec8:	3001      	adds	r0, #1
 800aeca:	d011      	beq.n	800aef0 <_puts_r+0x84>
 800aecc:	250a      	movs	r5, #10
 800aece:	e011      	b.n	800aef4 <_puts_r+0x88>
 800aed0:	4b1b      	ldr	r3, [pc, #108]	; (800af40 <_puts_r+0xd4>)
 800aed2:	429c      	cmp	r4, r3
 800aed4:	d101      	bne.n	800aeda <_puts_r+0x6e>
 800aed6:	68ac      	ldr	r4, [r5, #8]
 800aed8:	e7da      	b.n	800ae90 <_puts_r+0x24>
 800aeda:	4b1a      	ldr	r3, [pc, #104]	; (800af44 <_puts_r+0xd8>)
 800aedc:	429c      	cmp	r4, r3
 800aede:	bf08      	it	eq
 800aee0:	68ec      	ldreq	r4, [r5, #12]
 800aee2:	e7d5      	b.n	800ae90 <_puts_r+0x24>
 800aee4:	4621      	mov	r1, r4
 800aee6:	4628      	mov	r0, r5
 800aee8:	f000 f8a8 	bl	800b03c <__swsetup_r>
 800aeec:	2800      	cmp	r0, #0
 800aeee:	d0dd      	beq.n	800aeac <_puts_r+0x40>
 800aef0:	f04f 35ff 	mov.w	r5, #4294967295
 800aef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aef6:	07da      	lsls	r2, r3, #31
 800aef8:	d405      	bmi.n	800af06 <_puts_r+0x9a>
 800aefa:	89a3      	ldrh	r3, [r4, #12]
 800aefc:	059b      	lsls	r3, r3, #22
 800aefe:	d402      	bmi.n	800af06 <_puts_r+0x9a>
 800af00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af02:	f001 f93f 	bl	800c184 <__retarget_lock_release_recursive>
 800af06:	4628      	mov	r0, r5
 800af08:	bd70      	pop	{r4, r5, r6, pc}
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	da04      	bge.n	800af18 <_puts_r+0xac>
 800af0e:	69a2      	ldr	r2, [r4, #24]
 800af10:	429a      	cmp	r2, r3
 800af12:	dc06      	bgt.n	800af22 <_puts_r+0xb6>
 800af14:	290a      	cmp	r1, #10
 800af16:	d004      	beq.n	800af22 <_puts_r+0xb6>
 800af18:	6823      	ldr	r3, [r4, #0]
 800af1a:	1c5a      	adds	r2, r3, #1
 800af1c:	6022      	str	r2, [r4, #0]
 800af1e:	7019      	strb	r1, [r3, #0]
 800af20:	e7c5      	b.n	800aeae <_puts_r+0x42>
 800af22:	4622      	mov	r2, r4
 800af24:	4628      	mov	r0, r5
 800af26:	f000 f837 	bl	800af98 <__swbuf_r>
 800af2a:	3001      	adds	r0, #1
 800af2c:	d1bf      	bne.n	800aeae <_puts_r+0x42>
 800af2e:	e7df      	b.n	800aef0 <_puts_r+0x84>
 800af30:	6823      	ldr	r3, [r4, #0]
 800af32:	250a      	movs	r5, #10
 800af34:	1c5a      	adds	r2, r3, #1
 800af36:	6022      	str	r2, [r4, #0]
 800af38:	701d      	strb	r5, [r3, #0]
 800af3a:	e7db      	b.n	800aef4 <_puts_r+0x88>
 800af3c:	0801a540 	.word	0x0801a540
 800af40:	0801a560 	.word	0x0801a560
 800af44:	0801a520 	.word	0x0801a520

0800af48 <puts>:
 800af48:	4b02      	ldr	r3, [pc, #8]	; (800af54 <puts+0xc>)
 800af4a:	4601      	mov	r1, r0
 800af4c:	6818      	ldr	r0, [r3, #0]
 800af4e:	f7ff bf8d 	b.w	800ae6c <_puts_r>
 800af52:	bf00      	nop
 800af54:	20000014 	.word	0x20000014

0800af58 <siprintf>:
 800af58:	b40e      	push	{r1, r2, r3}
 800af5a:	b500      	push	{lr}
 800af5c:	b09c      	sub	sp, #112	; 0x70
 800af5e:	ab1d      	add	r3, sp, #116	; 0x74
 800af60:	9002      	str	r0, [sp, #8]
 800af62:	9006      	str	r0, [sp, #24]
 800af64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af68:	4809      	ldr	r0, [pc, #36]	; (800af90 <siprintf+0x38>)
 800af6a:	9107      	str	r1, [sp, #28]
 800af6c:	9104      	str	r1, [sp, #16]
 800af6e:	4909      	ldr	r1, [pc, #36]	; (800af94 <siprintf+0x3c>)
 800af70:	f853 2b04 	ldr.w	r2, [r3], #4
 800af74:	9105      	str	r1, [sp, #20]
 800af76:	6800      	ldr	r0, [r0, #0]
 800af78:	9301      	str	r3, [sp, #4]
 800af7a:	a902      	add	r1, sp, #8
 800af7c:	f001 fe12 	bl	800cba4 <_svfiprintf_r>
 800af80:	9b02      	ldr	r3, [sp, #8]
 800af82:	2200      	movs	r2, #0
 800af84:	701a      	strb	r2, [r3, #0]
 800af86:	b01c      	add	sp, #112	; 0x70
 800af88:	f85d eb04 	ldr.w	lr, [sp], #4
 800af8c:	b003      	add	sp, #12
 800af8e:	4770      	bx	lr
 800af90:	20000014 	.word	0x20000014
 800af94:	ffff0208 	.word	0xffff0208

0800af98 <__swbuf_r>:
 800af98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9a:	460e      	mov	r6, r1
 800af9c:	4614      	mov	r4, r2
 800af9e:	4605      	mov	r5, r0
 800afa0:	b118      	cbz	r0, 800afaa <__swbuf_r+0x12>
 800afa2:	6983      	ldr	r3, [r0, #24]
 800afa4:	b90b      	cbnz	r3, 800afaa <__swbuf_r+0x12>
 800afa6:	f001 f849 	bl	800c03c <__sinit>
 800afaa:	4b21      	ldr	r3, [pc, #132]	; (800b030 <__swbuf_r+0x98>)
 800afac:	429c      	cmp	r4, r3
 800afae:	d12b      	bne.n	800b008 <__swbuf_r+0x70>
 800afb0:	686c      	ldr	r4, [r5, #4]
 800afb2:	69a3      	ldr	r3, [r4, #24]
 800afb4:	60a3      	str	r3, [r4, #8]
 800afb6:	89a3      	ldrh	r3, [r4, #12]
 800afb8:	071a      	lsls	r2, r3, #28
 800afba:	d52f      	bpl.n	800b01c <__swbuf_r+0x84>
 800afbc:	6923      	ldr	r3, [r4, #16]
 800afbe:	b36b      	cbz	r3, 800b01c <__swbuf_r+0x84>
 800afc0:	6923      	ldr	r3, [r4, #16]
 800afc2:	6820      	ldr	r0, [r4, #0]
 800afc4:	1ac0      	subs	r0, r0, r3
 800afc6:	6963      	ldr	r3, [r4, #20]
 800afc8:	b2f6      	uxtb	r6, r6
 800afca:	4283      	cmp	r3, r0
 800afcc:	4637      	mov	r7, r6
 800afce:	dc04      	bgt.n	800afda <__swbuf_r+0x42>
 800afd0:	4621      	mov	r1, r4
 800afd2:	4628      	mov	r0, r5
 800afd4:	f000 ff9e 	bl	800bf14 <_fflush_r>
 800afd8:	bb30      	cbnz	r0, 800b028 <__swbuf_r+0x90>
 800afda:	68a3      	ldr	r3, [r4, #8]
 800afdc:	3b01      	subs	r3, #1
 800afde:	60a3      	str	r3, [r4, #8]
 800afe0:	6823      	ldr	r3, [r4, #0]
 800afe2:	1c5a      	adds	r2, r3, #1
 800afe4:	6022      	str	r2, [r4, #0]
 800afe6:	701e      	strb	r6, [r3, #0]
 800afe8:	6963      	ldr	r3, [r4, #20]
 800afea:	3001      	adds	r0, #1
 800afec:	4283      	cmp	r3, r0
 800afee:	d004      	beq.n	800affa <__swbuf_r+0x62>
 800aff0:	89a3      	ldrh	r3, [r4, #12]
 800aff2:	07db      	lsls	r3, r3, #31
 800aff4:	d506      	bpl.n	800b004 <__swbuf_r+0x6c>
 800aff6:	2e0a      	cmp	r6, #10
 800aff8:	d104      	bne.n	800b004 <__swbuf_r+0x6c>
 800affa:	4621      	mov	r1, r4
 800affc:	4628      	mov	r0, r5
 800affe:	f000 ff89 	bl	800bf14 <_fflush_r>
 800b002:	b988      	cbnz	r0, 800b028 <__swbuf_r+0x90>
 800b004:	4638      	mov	r0, r7
 800b006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b008:	4b0a      	ldr	r3, [pc, #40]	; (800b034 <__swbuf_r+0x9c>)
 800b00a:	429c      	cmp	r4, r3
 800b00c:	d101      	bne.n	800b012 <__swbuf_r+0x7a>
 800b00e:	68ac      	ldr	r4, [r5, #8]
 800b010:	e7cf      	b.n	800afb2 <__swbuf_r+0x1a>
 800b012:	4b09      	ldr	r3, [pc, #36]	; (800b038 <__swbuf_r+0xa0>)
 800b014:	429c      	cmp	r4, r3
 800b016:	bf08      	it	eq
 800b018:	68ec      	ldreq	r4, [r5, #12]
 800b01a:	e7ca      	b.n	800afb2 <__swbuf_r+0x1a>
 800b01c:	4621      	mov	r1, r4
 800b01e:	4628      	mov	r0, r5
 800b020:	f000 f80c 	bl	800b03c <__swsetup_r>
 800b024:	2800      	cmp	r0, #0
 800b026:	d0cb      	beq.n	800afc0 <__swbuf_r+0x28>
 800b028:	f04f 37ff 	mov.w	r7, #4294967295
 800b02c:	e7ea      	b.n	800b004 <__swbuf_r+0x6c>
 800b02e:	bf00      	nop
 800b030:	0801a540 	.word	0x0801a540
 800b034:	0801a560 	.word	0x0801a560
 800b038:	0801a520 	.word	0x0801a520

0800b03c <__swsetup_r>:
 800b03c:	4b32      	ldr	r3, [pc, #200]	; (800b108 <__swsetup_r+0xcc>)
 800b03e:	b570      	push	{r4, r5, r6, lr}
 800b040:	681d      	ldr	r5, [r3, #0]
 800b042:	4606      	mov	r6, r0
 800b044:	460c      	mov	r4, r1
 800b046:	b125      	cbz	r5, 800b052 <__swsetup_r+0x16>
 800b048:	69ab      	ldr	r3, [r5, #24]
 800b04a:	b913      	cbnz	r3, 800b052 <__swsetup_r+0x16>
 800b04c:	4628      	mov	r0, r5
 800b04e:	f000 fff5 	bl	800c03c <__sinit>
 800b052:	4b2e      	ldr	r3, [pc, #184]	; (800b10c <__swsetup_r+0xd0>)
 800b054:	429c      	cmp	r4, r3
 800b056:	d10f      	bne.n	800b078 <__swsetup_r+0x3c>
 800b058:	686c      	ldr	r4, [r5, #4]
 800b05a:	89a3      	ldrh	r3, [r4, #12]
 800b05c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b060:	0719      	lsls	r1, r3, #28
 800b062:	d42c      	bmi.n	800b0be <__swsetup_r+0x82>
 800b064:	06dd      	lsls	r5, r3, #27
 800b066:	d411      	bmi.n	800b08c <__swsetup_r+0x50>
 800b068:	2309      	movs	r3, #9
 800b06a:	6033      	str	r3, [r6, #0]
 800b06c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b070:	81a3      	strh	r3, [r4, #12]
 800b072:	f04f 30ff 	mov.w	r0, #4294967295
 800b076:	e03e      	b.n	800b0f6 <__swsetup_r+0xba>
 800b078:	4b25      	ldr	r3, [pc, #148]	; (800b110 <__swsetup_r+0xd4>)
 800b07a:	429c      	cmp	r4, r3
 800b07c:	d101      	bne.n	800b082 <__swsetup_r+0x46>
 800b07e:	68ac      	ldr	r4, [r5, #8]
 800b080:	e7eb      	b.n	800b05a <__swsetup_r+0x1e>
 800b082:	4b24      	ldr	r3, [pc, #144]	; (800b114 <__swsetup_r+0xd8>)
 800b084:	429c      	cmp	r4, r3
 800b086:	bf08      	it	eq
 800b088:	68ec      	ldreq	r4, [r5, #12]
 800b08a:	e7e6      	b.n	800b05a <__swsetup_r+0x1e>
 800b08c:	0758      	lsls	r0, r3, #29
 800b08e:	d512      	bpl.n	800b0b6 <__swsetup_r+0x7a>
 800b090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b092:	b141      	cbz	r1, 800b0a6 <__swsetup_r+0x6a>
 800b094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b098:	4299      	cmp	r1, r3
 800b09a:	d002      	beq.n	800b0a2 <__swsetup_r+0x66>
 800b09c:	4630      	mov	r0, r6
 800b09e:	f001 fc7b 	bl	800c998 <_free_r>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	6363      	str	r3, [r4, #52]	; 0x34
 800b0a6:	89a3      	ldrh	r3, [r4, #12]
 800b0a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0ac:	81a3      	strh	r3, [r4, #12]
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	6063      	str	r3, [r4, #4]
 800b0b2:	6923      	ldr	r3, [r4, #16]
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	89a3      	ldrh	r3, [r4, #12]
 800b0b8:	f043 0308 	orr.w	r3, r3, #8
 800b0bc:	81a3      	strh	r3, [r4, #12]
 800b0be:	6923      	ldr	r3, [r4, #16]
 800b0c0:	b94b      	cbnz	r3, 800b0d6 <__swsetup_r+0x9a>
 800b0c2:	89a3      	ldrh	r3, [r4, #12]
 800b0c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0cc:	d003      	beq.n	800b0d6 <__swsetup_r+0x9a>
 800b0ce:	4621      	mov	r1, r4
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	f001 f87d 	bl	800c1d0 <__smakebuf_r>
 800b0d6:	89a0      	ldrh	r0, [r4, #12]
 800b0d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0dc:	f010 0301 	ands.w	r3, r0, #1
 800b0e0:	d00a      	beq.n	800b0f8 <__swsetup_r+0xbc>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	60a3      	str	r3, [r4, #8]
 800b0e6:	6963      	ldr	r3, [r4, #20]
 800b0e8:	425b      	negs	r3, r3
 800b0ea:	61a3      	str	r3, [r4, #24]
 800b0ec:	6923      	ldr	r3, [r4, #16]
 800b0ee:	b943      	cbnz	r3, 800b102 <__swsetup_r+0xc6>
 800b0f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b0f4:	d1ba      	bne.n	800b06c <__swsetup_r+0x30>
 800b0f6:	bd70      	pop	{r4, r5, r6, pc}
 800b0f8:	0781      	lsls	r1, r0, #30
 800b0fa:	bf58      	it	pl
 800b0fc:	6963      	ldrpl	r3, [r4, #20]
 800b0fe:	60a3      	str	r3, [r4, #8]
 800b100:	e7f4      	b.n	800b0ec <__swsetup_r+0xb0>
 800b102:	2000      	movs	r0, #0
 800b104:	e7f7      	b.n	800b0f6 <__swsetup_r+0xba>
 800b106:	bf00      	nop
 800b108:	20000014 	.word	0x20000014
 800b10c:	0801a540 	.word	0x0801a540
 800b110:	0801a560 	.word	0x0801a560
 800b114:	0801a520 	.word	0x0801a520

0800b118 <quorem>:
 800b118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b11c:	6903      	ldr	r3, [r0, #16]
 800b11e:	690c      	ldr	r4, [r1, #16]
 800b120:	42a3      	cmp	r3, r4
 800b122:	4607      	mov	r7, r0
 800b124:	f2c0 8081 	blt.w	800b22a <quorem+0x112>
 800b128:	3c01      	subs	r4, #1
 800b12a:	f101 0814 	add.w	r8, r1, #20
 800b12e:	f100 0514 	add.w	r5, r0, #20
 800b132:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b136:	9301      	str	r3, [sp, #4]
 800b138:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b13c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b140:	3301      	adds	r3, #1
 800b142:	429a      	cmp	r2, r3
 800b144:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b148:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b14c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b150:	d331      	bcc.n	800b1b6 <quorem+0x9e>
 800b152:	f04f 0e00 	mov.w	lr, #0
 800b156:	4640      	mov	r0, r8
 800b158:	46ac      	mov	ip, r5
 800b15a:	46f2      	mov	sl, lr
 800b15c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b160:	b293      	uxth	r3, r2
 800b162:	fb06 e303 	mla	r3, r6, r3, lr
 800b166:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	ebaa 0303 	sub.w	r3, sl, r3
 800b170:	0c12      	lsrs	r2, r2, #16
 800b172:	f8dc a000 	ldr.w	sl, [ip]
 800b176:	fb06 e202 	mla	r2, r6, r2, lr
 800b17a:	fa13 f38a 	uxtah	r3, r3, sl
 800b17e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b182:	fa1f fa82 	uxth.w	sl, r2
 800b186:	f8dc 2000 	ldr.w	r2, [ip]
 800b18a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b18e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b192:	b29b      	uxth	r3, r3
 800b194:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b198:	4581      	cmp	r9, r0
 800b19a:	f84c 3b04 	str.w	r3, [ip], #4
 800b19e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b1a2:	d2db      	bcs.n	800b15c <quorem+0x44>
 800b1a4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b1a8:	b92b      	cbnz	r3, 800b1b6 <quorem+0x9e>
 800b1aa:	9b01      	ldr	r3, [sp, #4]
 800b1ac:	3b04      	subs	r3, #4
 800b1ae:	429d      	cmp	r5, r3
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	d32e      	bcc.n	800b212 <quorem+0xfa>
 800b1b4:	613c      	str	r4, [r7, #16]
 800b1b6:	4638      	mov	r0, r7
 800b1b8:	f001 fade 	bl	800c778 <__mcmp>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	db24      	blt.n	800b20a <quorem+0xf2>
 800b1c0:	3601      	adds	r6, #1
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	f04f 0c00 	mov.w	ip, #0
 800b1c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b1cc:	f8d0 e000 	ldr.w	lr, [r0]
 800b1d0:	b293      	uxth	r3, r2
 800b1d2:	ebac 0303 	sub.w	r3, ip, r3
 800b1d6:	0c12      	lsrs	r2, r2, #16
 800b1d8:	fa13 f38e 	uxtah	r3, r3, lr
 800b1dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b1e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1ea:	45c1      	cmp	r9, r8
 800b1ec:	f840 3b04 	str.w	r3, [r0], #4
 800b1f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b1f4:	d2e8      	bcs.n	800b1c8 <quorem+0xb0>
 800b1f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1fe:	b922      	cbnz	r2, 800b20a <quorem+0xf2>
 800b200:	3b04      	subs	r3, #4
 800b202:	429d      	cmp	r5, r3
 800b204:	461a      	mov	r2, r3
 800b206:	d30a      	bcc.n	800b21e <quorem+0x106>
 800b208:	613c      	str	r4, [r7, #16]
 800b20a:	4630      	mov	r0, r6
 800b20c:	b003      	add	sp, #12
 800b20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b212:	6812      	ldr	r2, [r2, #0]
 800b214:	3b04      	subs	r3, #4
 800b216:	2a00      	cmp	r2, #0
 800b218:	d1cc      	bne.n	800b1b4 <quorem+0x9c>
 800b21a:	3c01      	subs	r4, #1
 800b21c:	e7c7      	b.n	800b1ae <quorem+0x96>
 800b21e:	6812      	ldr	r2, [r2, #0]
 800b220:	3b04      	subs	r3, #4
 800b222:	2a00      	cmp	r2, #0
 800b224:	d1f0      	bne.n	800b208 <quorem+0xf0>
 800b226:	3c01      	subs	r4, #1
 800b228:	e7eb      	b.n	800b202 <quorem+0xea>
 800b22a:	2000      	movs	r0, #0
 800b22c:	e7ee      	b.n	800b20c <quorem+0xf4>
	...

0800b230 <_dtoa_r>:
 800b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b234:	ed2d 8b02 	vpush	{d8}
 800b238:	ec57 6b10 	vmov	r6, r7, d0
 800b23c:	b095      	sub	sp, #84	; 0x54
 800b23e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b240:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b244:	9105      	str	r1, [sp, #20]
 800b246:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b24a:	4604      	mov	r4, r0
 800b24c:	9209      	str	r2, [sp, #36]	; 0x24
 800b24e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b250:	b975      	cbnz	r5, 800b270 <_dtoa_r+0x40>
 800b252:	2010      	movs	r0, #16
 800b254:	f000 fffc 	bl	800c250 <malloc>
 800b258:	4602      	mov	r2, r0
 800b25a:	6260      	str	r0, [r4, #36]	; 0x24
 800b25c:	b920      	cbnz	r0, 800b268 <_dtoa_r+0x38>
 800b25e:	4bb2      	ldr	r3, [pc, #712]	; (800b528 <_dtoa_r+0x2f8>)
 800b260:	21ea      	movs	r1, #234	; 0xea
 800b262:	48b2      	ldr	r0, [pc, #712]	; (800b52c <_dtoa_r+0x2fc>)
 800b264:	f001 ff5e 	bl	800d124 <__assert_func>
 800b268:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b26c:	6005      	str	r5, [r0, #0]
 800b26e:	60c5      	str	r5, [r0, #12]
 800b270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b272:	6819      	ldr	r1, [r3, #0]
 800b274:	b151      	cbz	r1, 800b28c <_dtoa_r+0x5c>
 800b276:	685a      	ldr	r2, [r3, #4]
 800b278:	604a      	str	r2, [r1, #4]
 800b27a:	2301      	movs	r3, #1
 800b27c:	4093      	lsls	r3, r2
 800b27e:	608b      	str	r3, [r1, #8]
 800b280:	4620      	mov	r0, r4
 800b282:	f001 f83b 	bl	800c2fc <_Bfree>
 800b286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b288:	2200      	movs	r2, #0
 800b28a:	601a      	str	r2, [r3, #0]
 800b28c:	1e3b      	subs	r3, r7, #0
 800b28e:	bfb9      	ittee	lt
 800b290:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b294:	9303      	strlt	r3, [sp, #12]
 800b296:	2300      	movge	r3, #0
 800b298:	f8c8 3000 	strge.w	r3, [r8]
 800b29c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b2a0:	4ba3      	ldr	r3, [pc, #652]	; (800b530 <_dtoa_r+0x300>)
 800b2a2:	bfbc      	itt	lt
 800b2a4:	2201      	movlt	r2, #1
 800b2a6:	f8c8 2000 	strlt.w	r2, [r8]
 800b2aa:	ea33 0309 	bics.w	r3, r3, r9
 800b2ae:	d11b      	bne.n	800b2e8 <_dtoa_r+0xb8>
 800b2b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b2b2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2bc:	4333      	orrs	r3, r6
 800b2be:	f000 857a 	beq.w	800bdb6 <_dtoa_r+0xb86>
 800b2c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2c4:	b963      	cbnz	r3, 800b2e0 <_dtoa_r+0xb0>
 800b2c6:	4b9b      	ldr	r3, [pc, #620]	; (800b534 <_dtoa_r+0x304>)
 800b2c8:	e024      	b.n	800b314 <_dtoa_r+0xe4>
 800b2ca:	4b9b      	ldr	r3, [pc, #620]	; (800b538 <_dtoa_r+0x308>)
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b2d2:	6013      	str	r3, [r2, #0]
 800b2d4:	9800      	ldr	r0, [sp, #0]
 800b2d6:	b015      	add	sp, #84	; 0x54
 800b2d8:	ecbd 8b02 	vpop	{d8}
 800b2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e0:	4b94      	ldr	r3, [pc, #592]	; (800b534 <_dtoa_r+0x304>)
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	3303      	adds	r3, #3
 800b2e6:	e7f3      	b.n	800b2d0 <_dtoa_r+0xa0>
 800b2e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	ec51 0b17 	vmov	r0, r1, d7
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b2f8:	f7f5 fbe6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2fc:	4680      	mov	r8, r0
 800b2fe:	b158      	cbz	r0, 800b318 <_dtoa_r+0xe8>
 800b300:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b302:	2301      	movs	r3, #1
 800b304:	6013      	str	r3, [r2, #0]
 800b306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f000 8551 	beq.w	800bdb0 <_dtoa_r+0xb80>
 800b30e:	488b      	ldr	r0, [pc, #556]	; (800b53c <_dtoa_r+0x30c>)
 800b310:	6018      	str	r0, [r3, #0]
 800b312:	1e43      	subs	r3, r0, #1
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	e7dd      	b.n	800b2d4 <_dtoa_r+0xa4>
 800b318:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b31c:	aa12      	add	r2, sp, #72	; 0x48
 800b31e:	a913      	add	r1, sp, #76	; 0x4c
 800b320:	4620      	mov	r0, r4
 800b322:	f001 facd 	bl	800c8c0 <__d2b>
 800b326:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b32a:	4683      	mov	fp, r0
 800b32c:	2d00      	cmp	r5, #0
 800b32e:	d07c      	beq.n	800b42a <_dtoa_r+0x1fa>
 800b330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b332:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b33a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b33e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b342:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b346:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b34a:	4b7d      	ldr	r3, [pc, #500]	; (800b540 <_dtoa_r+0x310>)
 800b34c:	2200      	movs	r2, #0
 800b34e:	4630      	mov	r0, r6
 800b350:	4639      	mov	r1, r7
 800b352:	f7f4 ff99 	bl	8000288 <__aeabi_dsub>
 800b356:	a36e      	add	r3, pc, #440	; (adr r3, 800b510 <_dtoa_r+0x2e0>)
 800b358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35c:	f7f5 f94c 	bl	80005f8 <__aeabi_dmul>
 800b360:	a36d      	add	r3, pc, #436	; (adr r3, 800b518 <_dtoa_r+0x2e8>)
 800b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b366:	f7f4 ff91 	bl	800028c <__adddf3>
 800b36a:	4606      	mov	r6, r0
 800b36c:	4628      	mov	r0, r5
 800b36e:	460f      	mov	r7, r1
 800b370:	f7f5 f8d8 	bl	8000524 <__aeabi_i2d>
 800b374:	a36a      	add	r3, pc, #424	; (adr r3, 800b520 <_dtoa_r+0x2f0>)
 800b376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37a:	f7f5 f93d 	bl	80005f8 <__aeabi_dmul>
 800b37e:	4602      	mov	r2, r0
 800b380:	460b      	mov	r3, r1
 800b382:	4630      	mov	r0, r6
 800b384:	4639      	mov	r1, r7
 800b386:	f7f4 ff81 	bl	800028c <__adddf3>
 800b38a:	4606      	mov	r6, r0
 800b38c:	460f      	mov	r7, r1
 800b38e:	f7f5 fbe3 	bl	8000b58 <__aeabi_d2iz>
 800b392:	2200      	movs	r2, #0
 800b394:	4682      	mov	sl, r0
 800b396:	2300      	movs	r3, #0
 800b398:	4630      	mov	r0, r6
 800b39a:	4639      	mov	r1, r7
 800b39c:	f7f5 fb9e 	bl	8000adc <__aeabi_dcmplt>
 800b3a0:	b148      	cbz	r0, 800b3b6 <_dtoa_r+0x186>
 800b3a2:	4650      	mov	r0, sl
 800b3a4:	f7f5 f8be 	bl	8000524 <__aeabi_i2d>
 800b3a8:	4632      	mov	r2, r6
 800b3aa:	463b      	mov	r3, r7
 800b3ac:	f7f5 fb8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3b0:	b908      	cbnz	r0, 800b3b6 <_dtoa_r+0x186>
 800b3b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3b6:	f1ba 0f16 	cmp.w	sl, #22
 800b3ba:	d854      	bhi.n	800b466 <_dtoa_r+0x236>
 800b3bc:	4b61      	ldr	r3, [pc, #388]	; (800b544 <_dtoa_r+0x314>)
 800b3be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b3ca:	f7f5 fb87 	bl	8000adc <__aeabi_dcmplt>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d04b      	beq.n	800b46a <_dtoa_r+0x23a>
 800b3d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	930e      	str	r3, [sp, #56]	; 0x38
 800b3da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b3dc:	1b5d      	subs	r5, r3, r5
 800b3de:	1e6b      	subs	r3, r5, #1
 800b3e0:	9304      	str	r3, [sp, #16]
 800b3e2:	bf43      	ittte	mi
 800b3e4:	2300      	movmi	r3, #0
 800b3e6:	f1c5 0801 	rsbmi	r8, r5, #1
 800b3ea:	9304      	strmi	r3, [sp, #16]
 800b3ec:	f04f 0800 	movpl.w	r8, #0
 800b3f0:	f1ba 0f00 	cmp.w	sl, #0
 800b3f4:	db3b      	blt.n	800b46e <_dtoa_r+0x23e>
 800b3f6:	9b04      	ldr	r3, [sp, #16]
 800b3f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b3fc:	4453      	add	r3, sl
 800b3fe:	9304      	str	r3, [sp, #16]
 800b400:	2300      	movs	r3, #0
 800b402:	9306      	str	r3, [sp, #24]
 800b404:	9b05      	ldr	r3, [sp, #20]
 800b406:	2b09      	cmp	r3, #9
 800b408:	d869      	bhi.n	800b4de <_dtoa_r+0x2ae>
 800b40a:	2b05      	cmp	r3, #5
 800b40c:	bfc4      	itt	gt
 800b40e:	3b04      	subgt	r3, #4
 800b410:	9305      	strgt	r3, [sp, #20]
 800b412:	9b05      	ldr	r3, [sp, #20]
 800b414:	f1a3 0302 	sub.w	r3, r3, #2
 800b418:	bfcc      	ite	gt
 800b41a:	2500      	movgt	r5, #0
 800b41c:	2501      	movle	r5, #1
 800b41e:	2b03      	cmp	r3, #3
 800b420:	d869      	bhi.n	800b4f6 <_dtoa_r+0x2c6>
 800b422:	e8df f003 	tbb	[pc, r3]
 800b426:	4e2c      	.short	0x4e2c
 800b428:	5a4c      	.short	0x5a4c
 800b42a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b42e:	441d      	add	r5, r3
 800b430:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b434:	2b20      	cmp	r3, #32
 800b436:	bfc1      	itttt	gt
 800b438:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b43c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b440:	fa09 f303 	lslgt.w	r3, r9, r3
 800b444:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b448:	bfda      	itte	le
 800b44a:	f1c3 0320 	rsble	r3, r3, #32
 800b44e:	fa06 f003 	lslle.w	r0, r6, r3
 800b452:	4318      	orrgt	r0, r3
 800b454:	f7f5 f856 	bl	8000504 <__aeabi_ui2d>
 800b458:	2301      	movs	r3, #1
 800b45a:	4606      	mov	r6, r0
 800b45c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b460:	3d01      	subs	r5, #1
 800b462:	9310      	str	r3, [sp, #64]	; 0x40
 800b464:	e771      	b.n	800b34a <_dtoa_r+0x11a>
 800b466:	2301      	movs	r3, #1
 800b468:	e7b6      	b.n	800b3d8 <_dtoa_r+0x1a8>
 800b46a:	900e      	str	r0, [sp, #56]	; 0x38
 800b46c:	e7b5      	b.n	800b3da <_dtoa_r+0x1aa>
 800b46e:	f1ca 0300 	rsb	r3, sl, #0
 800b472:	9306      	str	r3, [sp, #24]
 800b474:	2300      	movs	r3, #0
 800b476:	eba8 080a 	sub.w	r8, r8, sl
 800b47a:	930d      	str	r3, [sp, #52]	; 0x34
 800b47c:	e7c2      	b.n	800b404 <_dtoa_r+0x1d4>
 800b47e:	2300      	movs	r3, #0
 800b480:	9308      	str	r3, [sp, #32]
 800b482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b484:	2b00      	cmp	r3, #0
 800b486:	dc39      	bgt.n	800b4fc <_dtoa_r+0x2cc>
 800b488:	f04f 0901 	mov.w	r9, #1
 800b48c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b490:	464b      	mov	r3, r9
 800b492:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b496:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b498:	2200      	movs	r2, #0
 800b49a:	6042      	str	r2, [r0, #4]
 800b49c:	2204      	movs	r2, #4
 800b49e:	f102 0614 	add.w	r6, r2, #20
 800b4a2:	429e      	cmp	r6, r3
 800b4a4:	6841      	ldr	r1, [r0, #4]
 800b4a6:	d92f      	bls.n	800b508 <_dtoa_r+0x2d8>
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f000 fee7 	bl	800c27c <_Balloc>
 800b4ae:	9000      	str	r0, [sp, #0]
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d14b      	bne.n	800b54c <_dtoa_r+0x31c>
 800b4b4:	4b24      	ldr	r3, [pc, #144]	; (800b548 <_dtoa_r+0x318>)
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b4bc:	e6d1      	b.n	800b262 <_dtoa_r+0x32>
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e7de      	b.n	800b480 <_dtoa_r+0x250>
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	9308      	str	r3, [sp, #32]
 800b4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c8:	eb0a 0903 	add.w	r9, sl, r3
 800b4cc:	f109 0301 	add.w	r3, r9, #1
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	9301      	str	r3, [sp, #4]
 800b4d4:	bfb8      	it	lt
 800b4d6:	2301      	movlt	r3, #1
 800b4d8:	e7dd      	b.n	800b496 <_dtoa_r+0x266>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e7f2      	b.n	800b4c4 <_dtoa_r+0x294>
 800b4de:	2501      	movs	r5, #1
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	9305      	str	r3, [sp, #20]
 800b4e4:	9508      	str	r5, [sp, #32]
 800b4e6:	f04f 39ff 	mov.w	r9, #4294967295
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f8cd 9004 	str.w	r9, [sp, #4]
 800b4f0:	2312      	movs	r3, #18
 800b4f2:	9209      	str	r2, [sp, #36]	; 0x24
 800b4f4:	e7cf      	b.n	800b496 <_dtoa_r+0x266>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	9308      	str	r3, [sp, #32]
 800b4fa:	e7f4      	b.n	800b4e6 <_dtoa_r+0x2b6>
 800b4fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b500:	f8cd 9004 	str.w	r9, [sp, #4]
 800b504:	464b      	mov	r3, r9
 800b506:	e7c6      	b.n	800b496 <_dtoa_r+0x266>
 800b508:	3101      	adds	r1, #1
 800b50a:	6041      	str	r1, [r0, #4]
 800b50c:	0052      	lsls	r2, r2, #1
 800b50e:	e7c6      	b.n	800b49e <_dtoa_r+0x26e>
 800b510:	636f4361 	.word	0x636f4361
 800b514:	3fd287a7 	.word	0x3fd287a7
 800b518:	8b60c8b3 	.word	0x8b60c8b3
 800b51c:	3fc68a28 	.word	0x3fc68a28
 800b520:	509f79fb 	.word	0x509f79fb
 800b524:	3fd34413 	.word	0x3fd34413
 800b528:	0801a499 	.word	0x0801a499
 800b52c:	0801a4b0 	.word	0x0801a4b0
 800b530:	7ff00000 	.word	0x7ff00000
 800b534:	0801a495 	.word	0x0801a495
 800b538:	0801a48c 	.word	0x0801a48c
 800b53c:	0801a469 	.word	0x0801a469
 800b540:	3ff80000 	.word	0x3ff80000
 800b544:	0801a608 	.word	0x0801a608
 800b548:	0801a50f 	.word	0x0801a50f
 800b54c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b54e:	9a00      	ldr	r2, [sp, #0]
 800b550:	601a      	str	r2, [r3, #0]
 800b552:	9b01      	ldr	r3, [sp, #4]
 800b554:	2b0e      	cmp	r3, #14
 800b556:	f200 80ad 	bhi.w	800b6b4 <_dtoa_r+0x484>
 800b55a:	2d00      	cmp	r5, #0
 800b55c:	f000 80aa 	beq.w	800b6b4 <_dtoa_r+0x484>
 800b560:	f1ba 0f00 	cmp.w	sl, #0
 800b564:	dd36      	ble.n	800b5d4 <_dtoa_r+0x3a4>
 800b566:	4ac3      	ldr	r2, [pc, #780]	; (800b874 <_dtoa_r+0x644>)
 800b568:	f00a 030f 	and.w	r3, sl, #15
 800b56c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b570:	ed93 7b00 	vldr	d7, [r3]
 800b574:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b578:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b57c:	eeb0 8a47 	vmov.f32	s16, s14
 800b580:	eef0 8a67 	vmov.f32	s17, s15
 800b584:	d016      	beq.n	800b5b4 <_dtoa_r+0x384>
 800b586:	4bbc      	ldr	r3, [pc, #752]	; (800b878 <_dtoa_r+0x648>)
 800b588:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b58c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b590:	f7f5 f95c 	bl	800084c <__aeabi_ddiv>
 800b594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b598:	f007 070f 	and.w	r7, r7, #15
 800b59c:	2503      	movs	r5, #3
 800b59e:	4eb6      	ldr	r6, [pc, #728]	; (800b878 <_dtoa_r+0x648>)
 800b5a0:	b957      	cbnz	r7, 800b5b8 <_dtoa_r+0x388>
 800b5a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5a6:	ec53 2b18 	vmov	r2, r3, d8
 800b5aa:	f7f5 f94f 	bl	800084c <__aeabi_ddiv>
 800b5ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5b2:	e029      	b.n	800b608 <_dtoa_r+0x3d8>
 800b5b4:	2502      	movs	r5, #2
 800b5b6:	e7f2      	b.n	800b59e <_dtoa_r+0x36e>
 800b5b8:	07f9      	lsls	r1, r7, #31
 800b5ba:	d508      	bpl.n	800b5ce <_dtoa_r+0x39e>
 800b5bc:	ec51 0b18 	vmov	r0, r1, d8
 800b5c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b5c4:	f7f5 f818 	bl	80005f8 <__aeabi_dmul>
 800b5c8:	ec41 0b18 	vmov	d8, r0, r1
 800b5cc:	3501      	adds	r5, #1
 800b5ce:	107f      	asrs	r7, r7, #1
 800b5d0:	3608      	adds	r6, #8
 800b5d2:	e7e5      	b.n	800b5a0 <_dtoa_r+0x370>
 800b5d4:	f000 80a6 	beq.w	800b724 <_dtoa_r+0x4f4>
 800b5d8:	f1ca 0600 	rsb	r6, sl, #0
 800b5dc:	4ba5      	ldr	r3, [pc, #660]	; (800b874 <_dtoa_r+0x644>)
 800b5de:	4fa6      	ldr	r7, [pc, #664]	; (800b878 <_dtoa_r+0x648>)
 800b5e0:	f006 020f 	and.w	r2, r6, #15
 800b5e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b5f0:	f7f5 f802 	bl	80005f8 <__aeabi_dmul>
 800b5f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5f8:	1136      	asrs	r6, r6, #4
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	2502      	movs	r5, #2
 800b5fe:	2e00      	cmp	r6, #0
 800b600:	f040 8085 	bne.w	800b70e <_dtoa_r+0x4de>
 800b604:	2b00      	cmp	r3, #0
 800b606:	d1d2      	bne.n	800b5ae <_dtoa_r+0x37e>
 800b608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	f000 808c 	beq.w	800b728 <_dtoa_r+0x4f8>
 800b610:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b614:	4b99      	ldr	r3, [pc, #612]	; (800b87c <_dtoa_r+0x64c>)
 800b616:	2200      	movs	r2, #0
 800b618:	4630      	mov	r0, r6
 800b61a:	4639      	mov	r1, r7
 800b61c:	f7f5 fa5e 	bl	8000adc <__aeabi_dcmplt>
 800b620:	2800      	cmp	r0, #0
 800b622:	f000 8081 	beq.w	800b728 <_dtoa_r+0x4f8>
 800b626:	9b01      	ldr	r3, [sp, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d07d      	beq.n	800b728 <_dtoa_r+0x4f8>
 800b62c:	f1b9 0f00 	cmp.w	r9, #0
 800b630:	dd3c      	ble.n	800b6ac <_dtoa_r+0x47c>
 800b632:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b636:	9307      	str	r3, [sp, #28]
 800b638:	2200      	movs	r2, #0
 800b63a:	4b91      	ldr	r3, [pc, #580]	; (800b880 <_dtoa_r+0x650>)
 800b63c:	4630      	mov	r0, r6
 800b63e:	4639      	mov	r1, r7
 800b640:	f7f4 ffda 	bl	80005f8 <__aeabi_dmul>
 800b644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b648:	3501      	adds	r5, #1
 800b64a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b64e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b652:	4628      	mov	r0, r5
 800b654:	f7f4 ff66 	bl	8000524 <__aeabi_i2d>
 800b658:	4632      	mov	r2, r6
 800b65a:	463b      	mov	r3, r7
 800b65c:	f7f4 ffcc 	bl	80005f8 <__aeabi_dmul>
 800b660:	4b88      	ldr	r3, [pc, #544]	; (800b884 <_dtoa_r+0x654>)
 800b662:	2200      	movs	r2, #0
 800b664:	f7f4 fe12 	bl	800028c <__adddf3>
 800b668:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b66c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b670:	9303      	str	r3, [sp, #12]
 800b672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b674:	2b00      	cmp	r3, #0
 800b676:	d15c      	bne.n	800b732 <_dtoa_r+0x502>
 800b678:	4b83      	ldr	r3, [pc, #524]	; (800b888 <_dtoa_r+0x658>)
 800b67a:	2200      	movs	r2, #0
 800b67c:	4630      	mov	r0, r6
 800b67e:	4639      	mov	r1, r7
 800b680:	f7f4 fe02 	bl	8000288 <__aeabi_dsub>
 800b684:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b688:	4606      	mov	r6, r0
 800b68a:	460f      	mov	r7, r1
 800b68c:	f7f5 fa44 	bl	8000b18 <__aeabi_dcmpgt>
 800b690:	2800      	cmp	r0, #0
 800b692:	f040 8296 	bne.w	800bbc2 <_dtoa_r+0x992>
 800b696:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b69a:	4630      	mov	r0, r6
 800b69c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6a0:	4639      	mov	r1, r7
 800b6a2:	f7f5 fa1b 	bl	8000adc <__aeabi_dcmplt>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	f040 8288 	bne.w	800bbbc <_dtoa_r+0x98c>
 800b6ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b6b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f2c0 8158 	blt.w	800b96c <_dtoa_r+0x73c>
 800b6bc:	f1ba 0f0e 	cmp.w	sl, #14
 800b6c0:	f300 8154 	bgt.w	800b96c <_dtoa_r+0x73c>
 800b6c4:	4b6b      	ldr	r3, [pc, #428]	; (800b874 <_dtoa_r+0x644>)
 800b6c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b6ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f280 80e3 	bge.w	800b89c <_dtoa_r+0x66c>
 800b6d6:	9b01      	ldr	r3, [sp, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	f300 80df 	bgt.w	800b89c <_dtoa_r+0x66c>
 800b6de:	f040 826d 	bne.w	800bbbc <_dtoa_r+0x98c>
 800b6e2:	4b69      	ldr	r3, [pc, #420]	; (800b888 <_dtoa_r+0x658>)
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	4640      	mov	r0, r8
 800b6e8:	4649      	mov	r1, r9
 800b6ea:	f7f4 ff85 	bl	80005f8 <__aeabi_dmul>
 800b6ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6f2:	f7f5 fa07 	bl	8000b04 <__aeabi_dcmpge>
 800b6f6:	9e01      	ldr	r6, [sp, #4]
 800b6f8:	4637      	mov	r7, r6
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	f040 8243 	bne.w	800bb86 <_dtoa_r+0x956>
 800b700:	9d00      	ldr	r5, [sp, #0]
 800b702:	2331      	movs	r3, #49	; 0x31
 800b704:	f805 3b01 	strb.w	r3, [r5], #1
 800b708:	f10a 0a01 	add.w	sl, sl, #1
 800b70c:	e23f      	b.n	800bb8e <_dtoa_r+0x95e>
 800b70e:	07f2      	lsls	r2, r6, #31
 800b710:	d505      	bpl.n	800b71e <_dtoa_r+0x4ee>
 800b712:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b716:	f7f4 ff6f 	bl	80005f8 <__aeabi_dmul>
 800b71a:	3501      	adds	r5, #1
 800b71c:	2301      	movs	r3, #1
 800b71e:	1076      	asrs	r6, r6, #1
 800b720:	3708      	adds	r7, #8
 800b722:	e76c      	b.n	800b5fe <_dtoa_r+0x3ce>
 800b724:	2502      	movs	r5, #2
 800b726:	e76f      	b.n	800b608 <_dtoa_r+0x3d8>
 800b728:	9b01      	ldr	r3, [sp, #4]
 800b72a:	f8cd a01c 	str.w	sl, [sp, #28]
 800b72e:	930c      	str	r3, [sp, #48]	; 0x30
 800b730:	e78d      	b.n	800b64e <_dtoa_r+0x41e>
 800b732:	9900      	ldr	r1, [sp, #0]
 800b734:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b736:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b738:	4b4e      	ldr	r3, [pc, #312]	; (800b874 <_dtoa_r+0x644>)
 800b73a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b73e:	4401      	add	r1, r0
 800b740:	9102      	str	r1, [sp, #8]
 800b742:	9908      	ldr	r1, [sp, #32]
 800b744:	eeb0 8a47 	vmov.f32	s16, s14
 800b748:	eef0 8a67 	vmov.f32	s17, s15
 800b74c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b750:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b754:	2900      	cmp	r1, #0
 800b756:	d045      	beq.n	800b7e4 <_dtoa_r+0x5b4>
 800b758:	494c      	ldr	r1, [pc, #304]	; (800b88c <_dtoa_r+0x65c>)
 800b75a:	2000      	movs	r0, #0
 800b75c:	f7f5 f876 	bl	800084c <__aeabi_ddiv>
 800b760:	ec53 2b18 	vmov	r2, r3, d8
 800b764:	f7f4 fd90 	bl	8000288 <__aeabi_dsub>
 800b768:	9d00      	ldr	r5, [sp, #0]
 800b76a:	ec41 0b18 	vmov	d8, r0, r1
 800b76e:	4639      	mov	r1, r7
 800b770:	4630      	mov	r0, r6
 800b772:	f7f5 f9f1 	bl	8000b58 <__aeabi_d2iz>
 800b776:	900c      	str	r0, [sp, #48]	; 0x30
 800b778:	f7f4 fed4 	bl	8000524 <__aeabi_i2d>
 800b77c:	4602      	mov	r2, r0
 800b77e:	460b      	mov	r3, r1
 800b780:	4630      	mov	r0, r6
 800b782:	4639      	mov	r1, r7
 800b784:	f7f4 fd80 	bl	8000288 <__aeabi_dsub>
 800b788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b78a:	3330      	adds	r3, #48	; 0x30
 800b78c:	f805 3b01 	strb.w	r3, [r5], #1
 800b790:	ec53 2b18 	vmov	r2, r3, d8
 800b794:	4606      	mov	r6, r0
 800b796:	460f      	mov	r7, r1
 800b798:	f7f5 f9a0 	bl	8000adc <__aeabi_dcmplt>
 800b79c:	2800      	cmp	r0, #0
 800b79e:	d165      	bne.n	800b86c <_dtoa_r+0x63c>
 800b7a0:	4632      	mov	r2, r6
 800b7a2:	463b      	mov	r3, r7
 800b7a4:	4935      	ldr	r1, [pc, #212]	; (800b87c <_dtoa_r+0x64c>)
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	f7f4 fd6e 	bl	8000288 <__aeabi_dsub>
 800b7ac:	ec53 2b18 	vmov	r2, r3, d8
 800b7b0:	f7f5 f994 	bl	8000adc <__aeabi_dcmplt>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	f040 80b9 	bne.w	800b92c <_dtoa_r+0x6fc>
 800b7ba:	9b02      	ldr	r3, [sp, #8]
 800b7bc:	429d      	cmp	r5, r3
 800b7be:	f43f af75 	beq.w	800b6ac <_dtoa_r+0x47c>
 800b7c2:	4b2f      	ldr	r3, [pc, #188]	; (800b880 <_dtoa_r+0x650>)
 800b7c4:	ec51 0b18 	vmov	r0, r1, d8
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f7f4 ff15 	bl	80005f8 <__aeabi_dmul>
 800b7ce:	4b2c      	ldr	r3, [pc, #176]	; (800b880 <_dtoa_r+0x650>)
 800b7d0:	ec41 0b18 	vmov	d8, r0, r1
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	4639      	mov	r1, r7
 800b7da:	f7f4 ff0d 	bl	80005f8 <__aeabi_dmul>
 800b7de:	4606      	mov	r6, r0
 800b7e0:	460f      	mov	r7, r1
 800b7e2:	e7c4      	b.n	800b76e <_dtoa_r+0x53e>
 800b7e4:	ec51 0b17 	vmov	r0, r1, d7
 800b7e8:	f7f4 ff06 	bl	80005f8 <__aeabi_dmul>
 800b7ec:	9b02      	ldr	r3, [sp, #8]
 800b7ee:	9d00      	ldr	r5, [sp, #0]
 800b7f0:	930c      	str	r3, [sp, #48]	; 0x30
 800b7f2:	ec41 0b18 	vmov	d8, r0, r1
 800b7f6:	4639      	mov	r1, r7
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	f7f5 f9ad 	bl	8000b58 <__aeabi_d2iz>
 800b7fe:	9011      	str	r0, [sp, #68]	; 0x44
 800b800:	f7f4 fe90 	bl	8000524 <__aeabi_i2d>
 800b804:	4602      	mov	r2, r0
 800b806:	460b      	mov	r3, r1
 800b808:	4630      	mov	r0, r6
 800b80a:	4639      	mov	r1, r7
 800b80c:	f7f4 fd3c 	bl	8000288 <__aeabi_dsub>
 800b810:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b812:	3330      	adds	r3, #48	; 0x30
 800b814:	f805 3b01 	strb.w	r3, [r5], #1
 800b818:	9b02      	ldr	r3, [sp, #8]
 800b81a:	429d      	cmp	r5, r3
 800b81c:	4606      	mov	r6, r0
 800b81e:	460f      	mov	r7, r1
 800b820:	f04f 0200 	mov.w	r2, #0
 800b824:	d134      	bne.n	800b890 <_dtoa_r+0x660>
 800b826:	4b19      	ldr	r3, [pc, #100]	; (800b88c <_dtoa_r+0x65c>)
 800b828:	ec51 0b18 	vmov	r0, r1, d8
 800b82c:	f7f4 fd2e 	bl	800028c <__adddf3>
 800b830:	4602      	mov	r2, r0
 800b832:	460b      	mov	r3, r1
 800b834:	4630      	mov	r0, r6
 800b836:	4639      	mov	r1, r7
 800b838:	f7f5 f96e 	bl	8000b18 <__aeabi_dcmpgt>
 800b83c:	2800      	cmp	r0, #0
 800b83e:	d175      	bne.n	800b92c <_dtoa_r+0x6fc>
 800b840:	ec53 2b18 	vmov	r2, r3, d8
 800b844:	4911      	ldr	r1, [pc, #68]	; (800b88c <_dtoa_r+0x65c>)
 800b846:	2000      	movs	r0, #0
 800b848:	f7f4 fd1e 	bl	8000288 <__aeabi_dsub>
 800b84c:	4602      	mov	r2, r0
 800b84e:	460b      	mov	r3, r1
 800b850:	4630      	mov	r0, r6
 800b852:	4639      	mov	r1, r7
 800b854:	f7f5 f942 	bl	8000adc <__aeabi_dcmplt>
 800b858:	2800      	cmp	r0, #0
 800b85a:	f43f af27 	beq.w	800b6ac <_dtoa_r+0x47c>
 800b85e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b860:	1e6b      	subs	r3, r5, #1
 800b862:	930c      	str	r3, [sp, #48]	; 0x30
 800b864:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b868:	2b30      	cmp	r3, #48	; 0x30
 800b86a:	d0f8      	beq.n	800b85e <_dtoa_r+0x62e>
 800b86c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b870:	e04a      	b.n	800b908 <_dtoa_r+0x6d8>
 800b872:	bf00      	nop
 800b874:	0801a608 	.word	0x0801a608
 800b878:	0801a5e0 	.word	0x0801a5e0
 800b87c:	3ff00000 	.word	0x3ff00000
 800b880:	40240000 	.word	0x40240000
 800b884:	401c0000 	.word	0x401c0000
 800b888:	40140000 	.word	0x40140000
 800b88c:	3fe00000 	.word	0x3fe00000
 800b890:	4baf      	ldr	r3, [pc, #700]	; (800bb50 <_dtoa_r+0x920>)
 800b892:	f7f4 feb1 	bl	80005f8 <__aeabi_dmul>
 800b896:	4606      	mov	r6, r0
 800b898:	460f      	mov	r7, r1
 800b89a:	e7ac      	b.n	800b7f6 <_dtoa_r+0x5c6>
 800b89c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b8a0:	9d00      	ldr	r5, [sp, #0]
 800b8a2:	4642      	mov	r2, r8
 800b8a4:	464b      	mov	r3, r9
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	4639      	mov	r1, r7
 800b8aa:	f7f4 ffcf 	bl	800084c <__aeabi_ddiv>
 800b8ae:	f7f5 f953 	bl	8000b58 <__aeabi_d2iz>
 800b8b2:	9002      	str	r0, [sp, #8]
 800b8b4:	f7f4 fe36 	bl	8000524 <__aeabi_i2d>
 800b8b8:	4642      	mov	r2, r8
 800b8ba:	464b      	mov	r3, r9
 800b8bc:	f7f4 fe9c 	bl	80005f8 <__aeabi_dmul>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	4639      	mov	r1, r7
 800b8c8:	f7f4 fcde 	bl	8000288 <__aeabi_dsub>
 800b8cc:	9e02      	ldr	r6, [sp, #8]
 800b8ce:	9f01      	ldr	r7, [sp, #4]
 800b8d0:	3630      	adds	r6, #48	; 0x30
 800b8d2:	f805 6b01 	strb.w	r6, [r5], #1
 800b8d6:	9e00      	ldr	r6, [sp, #0]
 800b8d8:	1bae      	subs	r6, r5, r6
 800b8da:	42b7      	cmp	r7, r6
 800b8dc:	4602      	mov	r2, r0
 800b8de:	460b      	mov	r3, r1
 800b8e0:	d137      	bne.n	800b952 <_dtoa_r+0x722>
 800b8e2:	f7f4 fcd3 	bl	800028c <__adddf3>
 800b8e6:	4642      	mov	r2, r8
 800b8e8:	464b      	mov	r3, r9
 800b8ea:	4606      	mov	r6, r0
 800b8ec:	460f      	mov	r7, r1
 800b8ee:	f7f5 f913 	bl	8000b18 <__aeabi_dcmpgt>
 800b8f2:	b9c8      	cbnz	r0, 800b928 <_dtoa_r+0x6f8>
 800b8f4:	4642      	mov	r2, r8
 800b8f6:	464b      	mov	r3, r9
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	4639      	mov	r1, r7
 800b8fc:	f7f5 f8e4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b900:	b110      	cbz	r0, 800b908 <_dtoa_r+0x6d8>
 800b902:	9b02      	ldr	r3, [sp, #8]
 800b904:	07d9      	lsls	r1, r3, #31
 800b906:	d40f      	bmi.n	800b928 <_dtoa_r+0x6f8>
 800b908:	4620      	mov	r0, r4
 800b90a:	4659      	mov	r1, fp
 800b90c:	f000 fcf6 	bl	800c2fc <_Bfree>
 800b910:	2300      	movs	r3, #0
 800b912:	702b      	strb	r3, [r5, #0]
 800b914:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b916:	f10a 0001 	add.w	r0, sl, #1
 800b91a:	6018      	str	r0, [r3, #0]
 800b91c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f43f acd8 	beq.w	800b2d4 <_dtoa_r+0xa4>
 800b924:	601d      	str	r5, [r3, #0]
 800b926:	e4d5      	b.n	800b2d4 <_dtoa_r+0xa4>
 800b928:	f8cd a01c 	str.w	sl, [sp, #28]
 800b92c:	462b      	mov	r3, r5
 800b92e:	461d      	mov	r5, r3
 800b930:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b934:	2a39      	cmp	r2, #57	; 0x39
 800b936:	d108      	bne.n	800b94a <_dtoa_r+0x71a>
 800b938:	9a00      	ldr	r2, [sp, #0]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d1f7      	bne.n	800b92e <_dtoa_r+0x6fe>
 800b93e:	9a07      	ldr	r2, [sp, #28]
 800b940:	9900      	ldr	r1, [sp, #0]
 800b942:	3201      	adds	r2, #1
 800b944:	9207      	str	r2, [sp, #28]
 800b946:	2230      	movs	r2, #48	; 0x30
 800b948:	700a      	strb	r2, [r1, #0]
 800b94a:	781a      	ldrb	r2, [r3, #0]
 800b94c:	3201      	adds	r2, #1
 800b94e:	701a      	strb	r2, [r3, #0]
 800b950:	e78c      	b.n	800b86c <_dtoa_r+0x63c>
 800b952:	4b7f      	ldr	r3, [pc, #508]	; (800bb50 <_dtoa_r+0x920>)
 800b954:	2200      	movs	r2, #0
 800b956:	f7f4 fe4f 	bl	80005f8 <__aeabi_dmul>
 800b95a:	2200      	movs	r2, #0
 800b95c:	2300      	movs	r3, #0
 800b95e:	4606      	mov	r6, r0
 800b960:	460f      	mov	r7, r1
 800b962:	f7f5 f8b1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b966:	2800      	cmp	r0, #0
 800b968:	d09b      	beq.n	800b8a2 <_dtoa_r+0x672>
 800b96a:	e7cd      	b.n	800b908 <_dtoa_r+0x6d8>
 800b96c:	9a08      	ldr	r2, [sp, #32]
 800b96e:	2a00      	cmp	r2, #0
 800b970:	f000 80c4 	beq.w	800bafc <_dtoa_r+0x8cc>
 800b974:	9a05      	ldr	r2, [sp, #20]
 800b976:	2a01      	cmp	r2, #1
 800b978:	f300 80a8 	bgt.w	800bacc <_dtoa_r+0x89c>
 800b97c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b97e:	2a00      	cmp	r2, #0
 800b980:	f000 80a0 	beq.w	800bac4 <_dtoa_r+0x894>
 800b984:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b988:	9e06      	ldr	r6, [sp, #24]
 800b98a:	4645      	mov	r5, r8
 800b98c:	9a04      	ldr	r2, [sp, #16]
 800b98e:	2101      	movs	r1, #1
 800b990:	441a      	add	r2, r3
 800b992:	4620      	mov	r0, r4
 800b994:	4498      	add	r8, r3
 800b996:	9204      	str	r2, [sp, #16]
 800b998:	f000 fd6c 	bl	800c474 <__i2b>
 800b99c:	4607      	mov	r7, r0
 800b99e:	2d00      	cmp	r5, #0
 800b9a0:	dd0b      	ble.n	800b9ba <_dtoa_r+0x78a>
 800b9a2:	9b04      	ldr	r3, [sp, #16]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	dd08      	ble.n	800b9ba <_dtoa_r+0x78a>
 800b9a8:	42ab      	cmp	r3, r5
 800b9aa:	9a04      	ldr	r2, [sp, #16]
 800b9ac:	bfa8      	it	ge
 800b9ae:	462b      	movge	r3, r5
 800b9b0:	eba8 0803 	sub.w	r8, r8, r3
 800b9b4:	1aed      	subs	r5, r5, r3
 800b9b6:	1ad3      	subs	r3, r2, r3
 800b9b8:	9304      	str	r3, [sp, #16]
 800b9ba:	9b06      	ldr	r3, [sp, #24]
 800b9bc:	b1fb      	cbz	r3, 800b9fe <_dtoa_r+0x7ce>
 800b9be:	9b08      	ldr	r3, [sp, #32]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f000 809f 	beq.w	800bb04 <_dtoa_r+0x8d4>
 800b9c6:	2e00      	cmp	r6, #0
 800b9c8:	dd11      	ble.n	800b9ee <_dtoa_r+0x7be>
 800b9ca:	4639      	mov	r1, r7
 800b9cc:	4632      	mov	r2, r6
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f000 fe0c 	bl	800c5ec <__pow5mult>
 800b9d4:	465a      	mov	r2, fp
 800b9d6:	4601      	mov	r1, r0
 800b9d8:	4607      	mov	r7, r0
 800b9da:	4620      	mov	r0, r4
 800b9dc:	f000 fd60 	bl	800c4a0 <__multiply>
 800b9e0:	4659      	mov	r1, fp
 800b9e2:	9007      	str	r0, [sp, #28]
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	f000 fc89 	bl	800c2fc <_Bfree>
 800b9ea:	9b07      	ldr	r3, [sp, #28]
 800b9ec:	469b      	mov	fp, r3
 800b9ee:	9b06      	ldr	r3, [sp, #24]
 800b9f0:	1b9a      	subs	r2, r3, r6
 800b9f2:	d004      	beq.n	800b9fe <_dtoa_r+0x7ce>
 800b9f4:	4659      	mov	r1, fp
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f000 fdf8 	bl	800c5ec <__pow5mult>
 800b9fc:	4683      	mov	fp, r0
 800b9fe:	2101      	movs	r1, #1
 800ba00:	4620      	mov	r0, r4
 800ba02:	f000 fd37 	bl	800c474 <__i2b>
 800ba06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	4606      	mov	r6, r0
 800ba0c:	dd7c      	ble.n	800bb08 <_dtoa_r+0x8d8>
 800ba0e:	461a      	mov	r2, r3
 800ba10:	4601      	mov	r1, r0
 800ba12:	4620      	mov	r0, r4
 800ba14:	f000 fdea 	bl	800c5ec <__pow5mult>
 800ba18:	9b05      	ldr	r3, [sp, #20]
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	dd76      	ble.n	800bb0e <_dtoa_r+0x8de>
 800ba20:	2300      	movs	r3, #0
 800ba22:	9306      	str	r3, [sp, #24]
 800ba24:	6933      	ldr	r3, [r6, #16]
 800ba26:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ba2a:	6918      	ldr	r0, [r3, #16]
 800ba2c:	f000 fcd2 	bl	800c3d4 <__hi0bits>
 800ba30:	f1c0 0020 	rsb	r0, r0, #32
 800ba34:	9b04      	ldr	r3, [sp, #16]
 800ba36:	4418      	add	r0, r3
 800ba38:	f010 001f 	ands.w	r0, r0, #31
 800ba3c:	f000 8086 	beq.w	800bb4c <_dtoa_r+0x91c>
 800ba40:	f1c0 0320 	rsb	r3, r0, #32
 800ba44:	2b04      	cmp	r3, #4
 800ba46:	dd7f      	ble.n	800bb48 <_dtoa_r+0x918>
 800ba48:	f1c0 001c 	rsb	r0, r0, #28
 800ba4c:	9b04      	ldr	r3, [sp, #16]
 800ba4e:	4403      	add	r3, r0
 800ba50:	4480      	add	r8, r0
 800ba52:	4405      	add	r5, r0
 800ba54:	9304      	str	r3, [sp, #16]
 800ba56:	f1b8 0f00 	cmp.w	r8, #0
 800ba5a:	dd05      	ble.n	800ba68 <_dtoa_r+0x838>
 800ba5c:	4659      	mov	r1, fp
 800ba5e:	4642      	mov	r2, r8
 800ba60:	4620      	mov	r0, r4
 800ba62:	f000 fe1d 	bl	800c6a0 <__lshift>
 800ba66:	4683      	mov	fp, r0
 800ba68:	9b04      	ldr	r3, [sp, #16]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	dd05      	ble.n	800ba7a <_dtoa_r+0x84a>
 800ba6e:	4631      	mov	r1, r6
 800ba70:	461a      	mov	r2, r3
 800ba72:	4620      	mov	r0, r4
 800ba74:	f000 fe14 	bl	800c6a0 <__lshift>
 800ba78:	4606      	mov	r6, r0
 800ba7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d069      	beq.n	800bb54 <_dtoa_r+0x924>
 800ba80:	4631      	mov	r1, r6
 800ba82:	4658      	mov	r0, fp
 800ba84:	f000 fe78 	bl	800c778 <__mcmp>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	da63      	bge.n	800bb54 <_dtoa_r+0x924>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	4659      	mov	r1, fp
 800ba90:	220a      	movs	r2, #10
 800ba92:	4620      	mov	r0, r4
 800ba94:	f000 fc54 	bl	800c340 <__multadd>
 800ba98:	9b08      	ldr	r3, [sp, #32]
 800ba9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba9e:	4683      	mov	fp, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 818f 	beq.w	800bdc4 <_dtoa_r+0xb94>
 800baa6:	4639      	mov	r1, r7
 800baa8:	2300      	movs	r3, #0
 800baaa:	220a      	movs	r2, #10
 800baac:	4620      	mov	r0, r4
 800baae:	f000 fc47 	bl	800c340 <__multadd>
 800bab2:	f1b9 0f00 	cmp.w	r9, #0
 800bab6:	4607      	mov	r7, r0
 800bab8:	f300 808e 	bgt.w	800bbd8 <_dtoa_r+0x9a8>
 800babc:	9b05      	ldr	r3, [sp, #20]
 800babe:	2b02      	cmp	r3, #2
 800bac0:	dc50      	bgt.n	800bb64 <_dtoa_r+0x934>
 800bac2:	e089      	b.n	800bbd8 <_dtoa_r+0x9a8>
 800bac4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bac6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800baca:	e75d      	b.n	800b988 <_dtoa_r+0x758>
 800bacc:	9b01      	ldr	r3, [sp, #4]
 800bace:	1e5e      	subs	r6, r3, #1
 800bad0:	9b06      	ldr	r3, [sp, #24]
 800bad2:	42b3      	cmp	r3, r6
 800bad4:	bfbf      	itttt	lt
 800bad6:	9b06      	ldrlt	r3, [sp, #24]
 800bad8:	9606      	strlt	r6, [sp, #24]
 800bada:	1af2      	sublt	r2, r6, r3
 800badc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800bade:	bfb6      	itet	lt
 800bae0:	189b      	addlt	r3, r3, r2
 800bae2:	1b9e      	subge	r6, r3, r6
 800bae4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800bae6:	9b01      	ldr	r3, [sp, #4]
 800bae8:	bfb8      	it	lt
 800baea:	2600      	movlt	r6, #0
 800baec:	2b00      	cmp	r3, #0
 800baee:	bfb5      	itete	lt
 800baf0:	eba8 0503 	sublt.w	r5, r8, r3
 800baf4:	9b01      	ldrge	r3, [sp, #4]
 800baf6:	2300      	movlt	r3, #0
 800baf8:	4645      	movge	r5, r8
 800bafa:	e747      	b.n	800b98c <_dtoa_r+0x75c>
 800bafc:	9e06      	ldr	r6, [sp, #24]
 800bafe:	9f08      	ldr	r7, [sp, #32]
 800bb00:	4645      	mov	r5, r8
 800bb02:	e74c      	b.n	800b99e <_dtoa_r+0x76e>
 800bb04:	9a06      	ldr	r2, [sp, #24]
 800bb06:	e775      	b.n	800b9f4 <_dtoa_r+0x7c4>
 800bb08:	9b05      	ldr	r3, [sp, #20]
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	dc18      	bgt.n	800bb40 <_dtoa_r+0x910>
 800bb0e:	9b02      	ldr	r3, [sp, #8]
 800bb10:	b9b3      	cbnz	r3, 800bb40 <_dtoa_r+0x910>
 800bb12:	9b03      	ldr	r3, [sp, #12]
 800bb14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb18:	b9a3      	cbnz	r3, 800bb44 <_dtoa_r+0x914>
 800bb1a:	9b03      	ldr	r3, [sp, #12]
 800bb1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb20:	0d1b      	lsrs	r3, r3, #20
 800bb22:	051b      	lsls	r3, r3, #20
 800bb24:	b12b      	cbz	r3, 800bb32 <_dtoa_r+0x902>
 800bb26:	9b04      	ldr	r3, [sp, #16]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	9304      	str	r3, [sp, #16]
 800bb2c:	f108 0801 	add.w	r8, r8, #1
 800bb30:	2301      	movs	r3, #1
 800bb32:	9306      	str	r3, [sp, #24]
 800bb34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f47f af74 	bne.w	800ba24 <_dtoa_r+0x7f4>
 800bb3c:	2001      	movs	r0, #1
 800bb3e:	e779      	b.n	800ba34 <_dtoa_r+0x804>
 800bb40:	2300      	movs	r3, #0
 800bb42:	e7f6      	b.n	800bb32 <_dtoa_r+0x902>
 800bb44:	9b02      	ldr	r3, [sp, #8]
 800bb46:	e7f4      	b.n	800bb32 <_dtoa_r+0x902>
 800bb48:	d085      	beq.n	800ba56 <_dtoa_r+0x826>
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	301c      	adds	r0, #28
 800bb4e:	e77d      	b.n	800ba4c <_dtoa_r+0x81c>
 800bb50:	40240000 	.word	0x40240000
 800bb54:	9b01      	ldr	r3, [sp, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	dc38      	bgt.n	800bbcc <_dtoa_r+0x99c>
 800bb5a:	9b05      	ldr	r3, [sp, #20]
 800bb5c:	2b02      	cmp	r3, #2
 800bb5e:	dd35      	ble.n	800bbcc <_dtoa_r+0x99c>
 800bb60:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bb64:	f1b9 0f00 	cmp.w	r9, #0
 800bb68:	d10d      	bne.n	800bb86 <_dtoa_r+0x956>
 800bb6a:	4631      	mov	r1, r6
 800bb6c:	464b      	mov	r3, r9
 800bb6e:	2205      	movs	r2, #5
 800bb70:	4620      	mov	r0, r4
 800bb72:	f000 fbe5 	bl	800c340 <__multadd>
 800bb76:	4601      	mov	r1, r0
 800bb78:	4606      	mov	r6, r0
 800bb7a:	4658      	mov	r0, fp
 800bb7c:	f000 fdfc 	bl	800c778 <__mcmp>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	f73f adbd 	bgt.w	800b700 <_dtoa_r+0x4d0>
 800bb86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb88:	9d00      	ldr	r5, [sp, #0]
 800bb8a:	ea6f 0a03 	mvn.w	sl, r3
 800bb8e:	f04f 0800 	mov.w	r8, #0
 800bb92:	4631      	mov	r1, r6
 800bb94:	4620      	mov	r0, r4
 800bb96:	f000 fbb1 	bl	800c2fc <_Bfree>
 800bb9a:	2f00      	cmp	r7, #0
 800bb9c:	f43f aeb4 	beq.w	800b908 <_dtoa_r+0x6d8>
 800bba0:	f1b8 0f00 	cmp.w	r8, #0
 800bba4:	d005      	beq.n	800bbb2 <_dtoa_r+0x982>
 800bba6:	45b8      	cmp	r8, r7
 800bba8:	d003      	beq.n	800bbb2 <_dtoa_r+0x982>
 800bbaa:	4641      	mov	r1, r8
 800bbac:	4620      	mov	r0, r4
 800bbae:	f000 fba5 	bl	800c2fc <_Bfree>
 800bbb2:	4639      	mov	r1, r7
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	f000 fba1 	bl	800c2fc <_Bfree>
 800bbba:	e6a5      	b.n	800b908 <_dtoa_r+0x6d8>
 800bbbc:	2600      	movs	r6, #0
 800bbbe:	4637      	mov	r7, r6
 800bbc0:	e7e1      	b.n	800bb86 <_dtoa_r+0x956>
 800bbc2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bbc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bbc8:	4637      	mov	r7, r6
 800bbca:	e599      	b.n	800b700 <_dtoa_r+0x4d0>
 800bbcc:	9b08      	ldr	r3, [sp, #32]
 800bbce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f000 80fd 	beq.w	800bdd2 <_dtoa_r+0xba2>
 800bbd8:	2d00      	cmp	r5, #0
 800bbda:	dd05      	ble.n	800bbe8 <_dtoa_r+0x9b8>
 800bbdc:	4639      	mov	r1, r7
 800bbde:	462a      	mov	r2, r5
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f000 fd5d 	bl	800c6a0 <__lshift>
 800bbe6:	4607      	mov	r7, r0
 800bbe8:	9b06      	ldr	r3, [sp, #24]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d05c      	beq.n	800bca8 <_dtoa_r+0xa78>
 800bbee:	6879      	ldr	r1, [r7, #4]
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f000 fb43 	bl	800c27c <_Balloc>
 800bbf6:	4605      	mov	r5, r0
 800bbf8:	b928      	cbnz	r0, 800bc06 <_dtoa_r+0x9d6>
 800bbfa:	4b80      	ldr	r3, [pc, #512]	; (800bdfc <_dtoa_r+0xbcc>)
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bc02:	f7ff bb2e 	b.w	800b262 <_dtoa_r+0x32>
 800bc06:	693a      	ldr	r2, [r7, #16]
 800bc08:	3202      	adds	r2, #2
 800bc0a:	0092      	lsls	r2, r2, #2
 800bc0c:	f107 010c 	add.w	r1, r7, #12
 800bc10:	300c      	adds	r0, #12
 800bc12:	f000 fb25 	bl	800c260 <memcpy>
 800bc16:	2201      	movs	r2, #1
 800bc18:	4629      	mov	r1, r5
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f000 fd40 	bl	800c6a0 <__lshift>
 800bc20:	9b00      	ldr	r3, [sp, #0]
 800bc22:	3301      	adds	r3, #1
 800bc24:	9301      	str	r3, [sp, #4]
 800bc26:	9b00      	ldr	r3, [sp, #0]
 800bc28:	444b      	add	r3, r9
 800bc2a:	9307      	str	r3, [sp, #28]
 800bc2c:	9b02      	ldr	r3, [sp, #8]
 800bc2e:	f003 0301 	and.w	r3, r3, #1
 800bc32:	46b8      	mov	r8, r7
 800bc34:	9306      	str	r3, [sp, #24]
 800bc36:	4607      	mov	r7, r0
 800bc38:	9b01      	ldr	r3, [sp, #4]
 800bc3a:	4631      	mov	r1, r6
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	4658      	mov	r0, fp
 800bc40:	9302      	str	r3, [sp, #8]
 800bc42:	f7ff fa69 	bl	800b118 <quorem>
 800bc46:	4603      	mov	r3, r0
 800bc48:	3330      	adds	r3, #48	; 0x30
 800bc4a:	9004      	str	r0, [sp, #16]
 800bc4c:	4641      	mov	r1, r8
 800bc4e:	4658      	mov	r0, fp
 800bc50:	9308      	str	r3, [sp, #32]
 800bc52:	f000 fd91 	bl	800c778 <__mcmp>
 800bc56:	463a      	mov	r2, r7
 800bc58:	4681      	mov	r9, r0
 800bc5a:	4631      	mov	r1, r6
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f000 fda7 	bl	800c7b0 <__mdiff>
 800bc62:	68c2      	ldr	r2, [r0, #12]
 800bc64:	9b08      	ldr	r3, [sp, #32]
 800bc66:	4605      	mov	r5, r0
 800bc68:	bb02      	cbnz	r2, 800bcac <_dtoa_r+0xa7c>
 800bc6a:	4601      	mov	r1, r0
 800bc6c:	4658      	mov	r0, fp
 800bc6e:	f000 fd83 	bl	800c778 <__mcmp>
 800bc72:	9b08      	ldr	r3, [sp, #32]
 800bc74:	4602      	mov	r2, r0
 800bc76:	4629      	mov	r1, r5
 800bc78:	4620      	mov	r0, r4
 800bc7a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800bc7e:	f000 fb3d 	bl	800c2fc <_Bfree>
 800bc82:	9b05      	ldr	r3, [sp, #20]
 800bc84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc86:	9d01      	ldr	r5, [sp, #4]
 800bc88:	ea43 0102 	orr.w	r1, r3, r2
 800bc8c:	9b06      	ldr	r3, [sp, #24]
 800bc8e:	430b      	orrs	r3, r1
 800bc90:	9b08      	ldr	r3, [sp, #32]
 800bc92:	d10d      	bne.n	800bcb0 <_dtoa_r+0xa80>
 800bc94:	2b39      	cmp	r3, #57	; 0x39
 800bc96:	d029      	beq.n	800bcec <_dtoa_r+0xabc>
 800bc98:	f1b9 0f00 	cmp.w	r9, #0
 800bc9c:	dd01      	ble.n	800bca2 <_dtoa_r+0xa72>
 800bc9e:	9b04      	ldr	r3, [sp, #16]
 800bca0:	3331      	adds	r3, #49	; 0x31
 800bca2:	9a02      	ldr	r2, [sp, #8]
 800bca4:	7013      	strb	r3, [r2, #0]
 800bca6:	e774      	b.n	800bb92 <_dtoa_r+0x962>
 800bca8:	4638      	mov	r0, r7
 800bcaa:	e7b9      	b.n	800bc20 <_dtoa_r+0x9f0>
 800bcac:	2201      	movs	r2, #1
 800bcae:	e7e2      	b.n	800bc76 <_dtoa_r+0xa46>
 800bcb0:	f1b9 0f00 	cmp.w	r9, #0
 800bcb4:	db06      	blt.n	800bcc4 <_dtoa_r+0xa94>
 800bcb6:	9905      	ldr	r1, [sp, #20]
 800bcb8:	ea41 0909 	orr.w	r9, r1, r9
 800bcbc:	9906      	ldr	r1, [sp, #24]
 800bcbe:	ea59 0101 	orrs.w	r1, r9, r1
 800bcc2:	d120      	bne.n	800bd06 <_dtoa_r+0xad6>
 800bcc4:	2a00      	cmp	r2, #0
 800bcc6:	ddec      	ble.n	800bca2 <_dtoa_r+0xa72>
 800bcc8:	4659      	mov	r1, fp
 800bcca:	2201      	movs	r2, #1
 800bccc:	4620      	mov	r0, r4
 800bcce:	9301      	str	r3, [sp, #4]
 800bcd0:	f000 fce6 	bl	800c6a0 <__lshift>
 800bcd4:	4631      	mov	r1, r6
 800bcd6:	4683      	mov	fp, r0
 800bcd8:	f000 fd4e 	bl	800c778 <__mcmp>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	9b01      	ldr	r3, [sp, #4]
 800bce0:	dc02      	bgt.n	800bce8 <_dtoa_r+0xab8>
 800bce2:	d1de      	bne.n	800bca2 <_dtoa_r+0xa72>
 800bce4:	07da      	lsls	r2, r3, #31
 800bce6:	d5dc      	bpl.n	800bca2 <_dtoa_r+0xa72>
 800bce8:	2b39      	cmp	r3, #57	; 0x39
 800bcea:	d1d8      	bne.n	800bc9e <_dtoa_r+0xa6e>
 800bcec:	9a02      	ldr	r2, [sp, #8]
 800bcee:	2339      	movs	r3, #57	; 0x39
 800bcf0:	7013      	strb	r3, [r2, #0]
 800bcf2:	462b      	mov	r3, r5
 800bcf4:	461d      	mov	r5, r3
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bcfc:	2a39      	cmp	r2, #57	; 0x39
 800bcfe:	d050      	beq.n	800bda2 <_dtoa_r+0xb72>
 800bd00:	3201      	adds	r2, #1
 800bd02:	701a      	strb	r2, [r3, #0]
 800bd04:	e745      	b.n	800bb92 <_dtoa_r+0x962>
 800bd06:	2a00      	cmp	r2, #0
 800bd08:	dd03      	ble.n	800bd12 <_dtoa_r+0xae2>
 800bd0a:	2b39      	cmp	r3, #57	; 0x39
 800bd0c:	d0ee      	beq.n	800bcec <_dtoa_r+0xabc>
 800bd0e:	3301      	adds	r3, #1
 800bd10:	e7c7      	b.n	800bca2 <_dtoa_r+0xa72>
 800bd12:	9a01      	ldr	r2, [sp, #4]
 800bd14:	9907      	ldr	r1, [sp, #28]
 800bd16:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bd1a:	428a      	cmp	r2, r1
 800bd1c:	d02a      	beq.n	800bd74 <_dtoa_r+0xb44>
 800bd1e:	4659      	mov	r1, fp
 800bd20:	2300      	movs	r3, #0
 800bd22:	220a      	movs	r2, #10
 800bd24:	4620      	mov	r0, r4
 800bd26:	f000 fb0b 	bl	800c340 <__multadd>
 800bd2a:	45b8      	cmp	r8, r7
 800bd2c:	4683      	mov	fp, r0
 800bd2e:	f04f 0300 	mov.w	r3, #0
 800bd32:	f04f 020a 	mov.w	r2, #10
 800bd36:	4641      	mov	r1, r8
 800bd38:	4620      	mov	r0, r4
 800bd3a:	d107      	bne.n	800bd4c <_dtoa_r+0xb1c>
 800bd3c:	f000 fb00 	bl	800c340 <__multadd>
 800bd40:	4680      	mov	r8, r0
 800bd42:	4607      	mov	r7, r0
 800bd44:	9b01      	ldr	r3, [sp, #4]
 800bd46:	3301      	adds	r3, #1
 800bd48:	9301      	str	r3, [sp, #4]
 800bd4a:	e775      	b.n	800bc38 <_dtoa_r+0xa08>
 800bd4c:	f000 faf8 	bl	800c340 <__multadd>
 800bd50:	4639      	mov	r1, r7
 800bd52:	4680      	mov	r8, r0
 800bd54:	2300      	movs	r3, #0
 800bd56:	220a      	movs	r2, #10
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f000 faf1 	bl	800c340 <__multadd>
 800bd5e:	4607      	mov	r7, r0
 800bd60:	e7f0      	b.n	800bd44 <_dtoa_r+0xb14>
 800bd62:	f1b9 0f00 	cmp.w	r9, #0
 800bd66:	9a00      	ldr	r2, [sp, #0]
 800bd68:	bfcc      	ite	gt
 800bd6a:	464d      	movgt	r5, r9
 800bd6c:	2501      	movle	r5, #1
 800bd6e:	4415      	add	r5, r2
 800bd70:	f04f 0800 	mov.w	r8, #0
 800bd74:	4659      	mov	r1, fp
 800bd76:	2201      	movs	r2, #1
 800bd78:	4620      	mov	r0, r4
 800bd7a:	9301      	str	r3, [sp, #4]
 800bd7c:	f000 fc90 	bl	800c6a0 <__lshift>
 800bd80:	4631      	mov	r1, r6
 800bd82:	4683      	mov	fp, r0
 800bd84:	f000 fcf8 	bl	800c778 <__mcmp>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	dcb2      	bgt.n	800bcf2 <_dtoa_r+0xac2>
 800bd8c:	d102      	bne.n	800bd94 <_dtoa_r+0xb64>
 800bd8e:	9b01      	ldr	r3, [sp, #4]
 800bd90:	07db      	lsls	r3, r3, #31
 800bd92:	d4ae      	bmi.n	800bcf2 <_dtoa_r+0xac2>
 800bd94:	462b      	mov	r3, r5
 800bd96:	461d      	mov	r5, r3
 800bd98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd9c:	2a30      	cmp	r2, #48	; 0x30
 800bd9e:	d0fa      	beq.n	800bd96 <_dtoa_r+0xb66>
 800bda0:	e6f7      	b.n	800bb92 <_dtoa_r+0x962>
 800bda2:	9a00      	ldr	r2, [sp, #0]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d1a5      	bne.n	800bcf4 <_dtoa_r+0xac4>
 800bda8:	f10a 0a01 	add.w	sl, sl, #1
 800bdac:	2331      	movs	r3, #49	; 0x31
 800bdae:	e779      	b.n	800bca4 <_dtoa_r+0xa74>
 800bdb0:	4b13      	ldr	r3, [pc, #76]	; (800be00 <_dtoa_r+0xbd0>)
 800bdb2:	f7ff baaf 	b.w	800b314 <_dtoa_r+0xe4>
 800bdb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f47f aa86 	bne.w	800b2ca <_dtoa_r+0x9a>
 800bdbe:	4b11      	ldr	r3, [pc, #68]	; (800be04 <_dtoa_r+0xbd4>)
 800bdc0:	f7ff baa8 	b.w	800b314 <_dtoa_r+0xe4>
 800bdc4:	f1b9 0f00 	cmp.w	r9, #0
 800bdc8:	dc03      	bgt.n	800bdd2 <_dtoa_r+0xba2>
 800bdca:	9b05      	ldr	r3, [sp, #20]
 800bdcc:	2b02      	cmp	r3, #2
 800bdce:	f73f aec9 	bgt.w	800bb64 <_dtoa_r+0x934>
 800bdd2:	9d00      	ldr	r5, [sp, #0]
 800bdd4:	4631      	mov	r1, r6
 800bdd6:	4658      	mov	r0, fp
 800bdd8:	f7ff f99e 	bl	800b118 <quorem>
 800bddc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bde0:	f805 3b01 	strb.w	r3, [r5], #1
 800bde4:	9a00      	ldr	r2, [sp, #0]
 800bde6:	1aaa      	subs	r2, r5, r2
 800bde8:	4591      	cmp	r9, r2
 800bdea:	ddba      	ble.n	800bd62 <_dtoa_r+0xb32>
 800bdec:	4659      	mov	r1, fp
 800bdee:	2300      	movs	r3, #0
 800bdf0:	220a      	movs	r2, #10
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	f000 faa4 	bl	800c340 <__multadd>
 800bdf8:	4683      	mov	fp, r0
 800bdfa:	e7eb      	b.n	800bdd4 <_dtoa_r+0xba4>
 800bdfc:	0801a50f 	.word	0x0801a50f
 800be00:	0801a468 	.word	0x0801a468
 800be04:	0801a48c 	.word	0x0801a48c

0800be08 <__sflush_r>:
 800be08:	898a      	ldrh	r2, [r1, #12]
 800be0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be0e:	4605      	mov	r5, r0
 800be10:	0710      	lsls	r0, r2, #28
 800be12:	460c      	mov	r4, r1
 800be14:	d458      	bmi.n	800bec8 <__sflush_r+0xc0>
 800be16:	684b      	ldr	r3, [r1, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	dc05      	bgt.n	800be28 <__sflush_r+0x20>
 800be1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be1e:	2b00      	cmp	r3, #0
 800be20:	dc02      	bgt.n	800be28 <__sflush_r+0x20>
 800be22:	2000      	movs	r0, #0
 800be24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be2a:	2e00      	cmp	r6, #0
 800be2c:	d0f9      	beq.n	800be22 <__sflush_r+0x1a>
 800be2e:	2300      	movs	r3, #0
 800be30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be34:	682f      	ldr	r7, [r5, #0]
 800be36:	602b      	str	r3, [r5, #0]
 800be38:	d032      	beq.n	800bea0 <__sflush_r+0x98>
 800be3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be3c:	89a3      	ldrh	r3, [r4, #12]
 800be3e:	075a      	lsls	r2, r3, #29
 800be40:	d505      	bpl.n	800be4e <__sflush_r+0x46>
 800be42:	6863      	ldr	r3, [r4, #4]
 800be44:	1ac0      	subs	r0, r0, r3
 800be46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be48:	b10b      	cbz	r3, 800be4e <__sflush_r+0x46>
 800be4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be4c:	1ac0      	subs	r0, r0, r3
 800be4e:	2300      	movs	r3, #0
 800be50:	4602      	mov	r2, r0
 800be52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be54:	6a21      	ldr	r1, [r4, #32]
 800be56:	4628      	mov	r0, r5
 800be58:	47b0      	blx	r6
 800be5a:	1c43      	adds	r3, r0, #1
 800be5c:	89a3      	ldrh	r3, [r4, #12]
 800be5e:	d106      	bne.n	800be6e <__sflush_r+0x66>
 800be60:	6829      	ldr	r1, [r5, #0]
 800be62:	291d      	cmp	r1, #29
 800be64:	d82c      	bhi.n	800bec0 <__sflush_r+0xb8>
 800be66:	4a2a      	ldr	r2, [pc, #168]	; (800bf10 <__sflush_r+0x108>)
 800be68:	40ca      	lsrs	r2, r1
 800be6a:	07d6      	lsls	r6, r2, #31
 800be6c:	d528      	bpl.n	800bec0 <__sflush_r+0xb8>
 800be6e:	2200      	movs	r2, #0
 800be70:	6062      	str	r2, [r4, #4]
 800be72:	04d9      	lsls	r1, r3, #19
 800be74:	6922      	ldr	r2, [r4, #16]
 800be76:	6022      	str	r2, [r4, #0]
 800be78:	d504      	bpl.n	800be84 <__sflush_r+0x7c>
 800be7a:	1c42      	adds	r2, r0, #1
 800be7c:	d101      	bne.n	800be82 <__sflush_r+0x7a>
 800be7e:	682b      	ldr	r3, [r5, #0]
 800be80:	b903      	cbnz	r3, 800be84 <__sflush_r+0x7c>
 800be82:	6560      	str	r0, [r4, #84]	; 0x54
 800be84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be86:	602f      	str	r7, [r5, #0]
 800be88:	2900      	cmp	r1, #0
 800be8a:	d0ca      	beq.n	800be22 <__sflush_r+0x1a>
 800be8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be90:	4299      	cmp	r1, r3
 800be92:	d002      	beq.n	800be9a <__sflush_r+0x92>
 800be94:	4628      	mov	r0, r5
 800be96:	f000 fd7f 	bl	800c998 <_free_r>
 800be9a:	2000      	movs	r0, #0
 800be9c:	6360      	str	r0, [r4, #52]	; 0x34
 800be9e:	e7c1      	b.n	800be24 <__sflush_r+0x1c>
 800bea0:	6a21      	ldr	r1, [r4, #32]
 800bea2:	2301      	movs	r3, #1
 800bea4:	4628      	mov	r0, r5
 800bea6:	47b0      	blx	r6
 800bea8:	1c41      	adds	r1, r0, #1
 800beaa:	d1c7      	bne.n	800be3c <__sflush_r+0x34>
 800beac:	682b      	ldr	r3, [r5, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d0c4      	beq.n	800be3c <__sflush_r+0x34>
 800beb2:	2b1d      	cmp	r3, #29
 800beb4:	d001      	beq.n	800beba <__sflush_r+0xb2>
 800beb6:	2b16      	cmp	r3, #22
 800beb8:	d101      	bne.n	800bebe <__sflush_r+0xb6>
 800beba:	602f      	str	r7, [r5, #0]
 800bebc:	e7b1      	b.n	800be22 <__sflush_r+0x1a>
 800bebe:	89a3      	ldrh	r3, [r4, #12]
 800bec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bec4:	81a3      	strh	r3, [r4, #12]
 800bec6:	e7ad      	b.n	800be24 <__sflush_r+0x1c>
 800bec8:	690f      	ldr	r7, [r1, #16]
 800beca:	2f00      	cmp	r7, #0
 800becc:	d0a9      	beq.n	800be22 <__sflush_r+0x1a>
 800bece:	0793      	lsls	r3, r2, #30
 800bed0:	680e      	ldr	r6, [r1, #0]
 800bed2:	bf08      	it	eq
 800bed4:	694b      	ldreq	r3, [r1, #20]
 800bed6:	600f      	str	r7, [r1, #0]
 800bed8:	bf18      	it	ne
 800beda:	2300      	movne	r3, #0
 800bedc:	eba6 0807 	sub.w	r8, r6, r7
 800bee0:	608b      	str	r3, [r1, #8]
 800bee2:	f1b8 0f00 	cmp.w	r8, #0
 800bee6:	dd9c      	ble.n	800be22 <__sflush_r+0x1a>
 800bee8:	6a21      	ldr	r1, [r4, #32]
 800beea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800beec:	4643      	mov	r3, r8
 800beee:	463a      	mov	r2, r7
 800bef0:	4628      	mov	r0, r5
 800bef2:	47b0      	blx	r6
 800bef4:	2800      	cmp	r0, #0
 800bef6:	dc06      	bgt.n	800bf06 <__sflush_r+0xfe>
 800bef8:	89a3      	ldrh	r3, [r4, #12]
 800befa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800befe:	81a3      	strh	r3, [r4, #12]
 800bf00:	f04f 30ff 	mov.w	r0, #4294967295
 800bf04:	e78e      	b.n	800be24 <__sflush_r+0x1c>
 800bf06:	4407      	add	r7, r0
 800bf08:	eba8 0800 	sub.w	r8, r8, r0
 800bf0c:	e7e9      	b.n	800bee2 <__sflush_r+0xda>
 800bf0e:	bf00      	nop
 800bf10:	20400001 	.word	0x20400001

0800bf14 <_fflush_r>:
 800bf14:	b538      	push	{r3, r4, r5, lr}
 800bf16:	690b      	ldr	r3, [r1, #16]
 800bf18:	4605      	mov	r5, r0
 800bf1a:	460c      	mov	r4, r1
 800bf1c:	b913      	cbnz	r3, 800bf24 <_fflush_r+0x10>
 800bf1e:	2500      	movs	r5, #0
 800bf20:	4628      	mov	r0, r5
 800bf22:	bd38      	pop	{r3, r4, r5, pc}
 800bf24:	b118      	cbz	r0, 800bf2e <_fflush_r+0x1a>
 800bf26:	6983      	ldr	r3, [r0, #24]
 800bf28:	b90b      	cbnz	r3, 800bf2e <_fflush_r+0x1a>
 800bf2a:	f000 f887 	bl	800c03c <__sinit>
 800bf2e:	4b14      	ldr	r3, [pc, #80]	; (800bf80 <_fflush_r+0x6c>)
 800bf30:	429c      	cmp	r4, r3
 800bf32:	d11b      	bne.n	800bf6c <_fflush_r+0x58>
 800bf34:	686c      	ldr	r4, [r5, #4]
 800bf36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d0ef      	beq.n	800bf1e <_fflush_r+0xa>
 800bf3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf40:	07d0      	lsls	r0, r2, #31
 800bf42:	d404      	bmi.n	800bf4e <_fflush_r+0x3a>
 800bf44:	0599      	lsls	r1, r3, #22
 800bf46:	d402      	bmi.n	800bf4e <_fflush_r+0x3a>
 800bf48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf4a:	f000 f91a 	bl	800c182 <__retarget_lock_acquire_recursive>
 800bf4e:	4628      	mov	r0, r5
 800bf50:	4621      	mov	r1, r4
 800bf52:	f7ff ff59 	bl	800be08 <__sflush_r>
 800bf56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf58:	07da      	lsls	r2, r3, #31
 800bf5a:	4605      	mov	r5, r0
 800bf5c:	d4e0      	bmi.n	800bf20 <_fflush_r+0xc>
 800bf5e:	89a3      	ldrh	r3, [r4, #12]
 800bf60:	059b      	lsls	r3, r3, #22
 800bf62:	d4dd      	bmi.n	800bf20 <_fflush_r+0xc>
 800bf64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf66:	f000 f90d 	bl	800c184 <__retarget_lock_release_recursive>
 800bf6a:	e7d9      	b.n	800bf20 <_fflush_r+0xc>
 800bf6c:	4b05      	ldr	r3, [pc, #20]	; (800bf84 <_fflush_r+0x70>)
 800bf6e:	429c      	cmp	r4, r3
 800bf70:	d101      	bne.n	800bf76 <_fflush_r+0x62>
 800bf72:	68ac      	ldr	r4, [r5, #8]
 800bf74:	e7df      	b.n	800bf36 <_fflush_r+0x22>
 800bf76:	4b04      	ldr	r3, [pc, #16]	; (800bf88 <_fflush_r+0x74>)
 800bf78:	429c      	cmp	r4, r3
 800bf7a:	bf08      	it	eq
 800bf7c:	68ec      	ldreq	r4, [r5, #12]
 800bf7e:	e7da      	b.n	800bf36 <_fflush_r+0x22>
 800bf80:	0801a540 	.word	0x0801a540
 800bf84:	0801a560 	.word	0x0801a560
 800bf88:	0801a520 	.word	0x0801a520

0800bf8c <std>:
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	b510      	push	{r4, lr}
 800bf90:	4604      	mov	r4, r0
 800bf92:	e9c0 3300 	strd	r3, r3, [r0]
 800bf96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf9a:	6083      	str	r3, [r0, #8]
 800bf9c:	8181      	strh	r1, [r0, #12]
 800bf9e:	6643      	str	r3, [r0, #100]	; 0x64
 800bfa0:	81c2      	strh	r2, [r0, #14]
 800bfa2:	6183      	str	r3, [r0, #24]
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	2208      	movs	r2, #8
 800bfa8:	305c      	adds	r0, #92	; 0x5c
 800bfaa:	f7fe fad5 	bl	800a558 <memset>
 800bfae:	4b05      	ldr	r3, [pc, #20]	; (800bfc4 <std+0x38>)
 800bfb0:	6263      	str	r3, [r4, #36]	; 0x24
 800bfb2:	4b05      	ldr	r3, [pc, #20]	; (800bfc8 <std+0x3c>)
 800bfb4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bfb6:	4b05      	ldr	r3, [pc, #20]	; (800bfcc <std+0x40>)
 800bfb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bfba:	4b05      	ldr	r3, [pc, #20]	; (800bfd0 <std+0x44>)
 800bfbc:	6224      	str	r4, [r4, #32]
 800bfbe:	6323      	str	r3, [r4, #48]	; 0x30
 800bfc0:	bd10      	pop	{r4, pc}
 800bfc2:	bf00      	nop
 800bfc4:	0800d079 	.word	0x0800d079
 800bfc8:	0800d09b 	.word	0x0800d09b
 800bfcc:	0800d0d3 	.word	0x0800d0d3
 800bfd0:	0800d0f7 	.word	0x0800d0f7

0800bfd4 <_cleanup_r>:
 800bfd4:	4901      	ldr	r1, [pc, #4]	; (800bfdc <_cleanup_r+0x8>)
 800bfd6:	f000 b8af 	b.w	800c138 <_fwalk_reent>
 800bfda:	bf00      	nop
 800bfdc:	0800bf15 	.word	0x0800bf15

0800bfe0 <__sfmoreglue>:
 800bfe0:	b570      	push	{r4, r5, r6, lr}
 800bfe2:	1e4a      	subs	r2, r1, #1
 800bfe4:	2568      	movs	r5, #104	; 0x68
 800bfe6:	4355      	muls	r5, r2
 800bfe8:	460e      	mov	r6, r1
 800bfea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bfee:	f000 fd23 	bl	800ca38 <_malloc_r>
 800bff2:	4604      	mov	r4, r0
 800bff4:	b140      	cbz	r0, 800c008 <__sfmoreglue+0x28>
 800bff6:	2100      	movs	r1, #0
 800bff8:	e9c0 1600 	strd	r1, r6, [r0]
 800bffc:	300c      	adds	r0, #12
 800bffe:	60a0      	str	r0, [r4, #8]
 800c000:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c004:	f7fe faa8 	bl	800a558 <memset>
 800c008:	4620      	mov	r0, r4
 800c00a:	bd70      	pop	{r4, r5, r6, pc}

0800c00c <__sfp_lock_acquire>:
 800c00c:	4801      	ldr	r0, [pc, #4]	; (800c014 <__sfp_lock_acquire+0x8>)
 800c00e:	f000 b8b8 	b.w	800c182 <__retarget_lock_acquire_recursive>
 800c012:	bf00      	nop
 800c014:	200005a8 	.word	0x200005a8

0800c018 <__sfp_lock_release>:
 800c018:	4801      	ldr	r0, [pc, #4]	; (800c020 <__sfp_lock_release+0x8>)
 800c01a:	f000 b8b3 	b.w	800c184 <__retarget_lock_release_recursive>
 800c01e:	bf00      	nop
 800c020:	200005a8 	.word	0x200005a8

0800c024 <__sinit_lock_acquire>:
 800c024:	4801      	ldr	r0, [pc, #4]	; (800c02c <__sinit_lock_acquire+0x8>)
 800c026:	f000 b8ac 	b.w	800c182 <__retarget_lock_acquire_recursive>
 800c02a:	bf00      	nop
 800c02c:	200005a3 	.word	0x200005a3

0800c030 <__sinit_lock_release>:
 800c030:	4801      	ldr	r0, [pc, #4]	; (800c038 <__sinit_lock_release+0x8>)
 800c032:	f000 b8a7 	b.w	800c184 <__retarget_lock_release_recursive>
 800c036:	bf00      	nop
 800c038:	200005a3 	.word	0x200005a3

0800c03c <__sinit>:
 800c03c:	b510      	push	{r4, lr}
 800c03e:	4604      	mov	r4, r0
 800c040:	f7ff fff0 	bl	800c024 <__sinit_lock_acquire>
 800c044:	69a3      	ldr	r3, [r4, #24]
 800c046:	b11b      	cbz	r3, 800c050 <__sinit+0x14>
 800c048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c04c:	f7ff bff0 	b.w	800c030 <__sinit_lock_release>
 800c050:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c054:	6523      	str	r3, [r4, #80]	; 0x50
 800c056:	4b13      	ldr	r3, [pc, #76]	; (800c0a4 <__sinit+0x68>)
 800c058:	4a13      	ldr	r2, [pc, #76]	; (800c0a8 <__sinit+0x6c>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c05e:	42a3      	cmp	r3, r4
 800c060:	bf04      	itt	eq
 800c062:	2301      	moveq	r3, #1
 800c064:	61a3      	streq	r3, [r4, #24]
 800c066:	4620      	mov	r0, r4
 800c068:	f000 f820 	bl	800c0ac <__sfp>
 800c06c:	6060      	str	r0, [r4, #4]
 800c06e:	4620      	mov	r0, r4
 800c070:	f000 f81c 	bl	800c0ac <__sfp>
 800c074:	60a0      	str	r0, [r4, #8]
 800c076:	4620      	mov	r0, r4
 800c078:	f000 f818 	bl	800c0ac <__sfp>
 800c07c:	2200      	movs	r2, #0
 800c07e:	60e0      	str	r0, [r4, #12]
 800c080:	2104      	movs	r1, #4
 800c082:	6860      	ldr	r0, [r4, #4]
 800c084:	f7ff ff82 	bl	800bf8c <std>
 800c088:	68a0      	ldr	r0, [r4, #8]
 800c08a:	2201      	movs	r2, #1
 800c08c:	2109      	movs	r1, #9
 800c08e:	f7ff ff7d 	bl	800bf8c <std>
 800c092:	68e0      	ldr	r0, [r4, #12]
 800c094:	2202      	movs	r2, #2
 800c096:	2112      	movs	r1, #18
 800c098:	f7ff ff78 	bl	800bf8c <std>
 800c09c:	2301      	movs	r3, #1
 800c09e:	61a3      	str	r3, [r4, #24]
 800c0a0:	e7d2      	b.n	800c048 <__sinit+0xc>
 800c0a2:	bf00      	nop
 800c0a4:	0801a454 	.word	0x0801a454
 800c0a8:	0800bfd5 	.word	0x0800bfd5

0800c0ac <__sfp>:
 800c0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ae:	4607      	mov	r7, r0
 800c0b0:	f7ff ffac 	bl	800c00c <__sfp_lock_acquire>
 800c0b4:	4b1e      	ldr	r3, [pc, #120]	; (800c130 <__sfp+0x84>)
 800c0b6:	681e      	ldr	r6, [r3, #0]
 800c0b8:	69b3      	ldr	r3, [r6, #24]
 800c0ba:	b913      	cbnz	r3, 800c0c2 <__sfp+0x16>
 800c0bc:	4630      	mov	r0, r6
 800c0be:	f7ff ffbd 	bl	800c03c <__sinit>
 800c0c2:	3648      	adds	r6, #72	; 0x48
 800c0c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	d503      	bpl.n	800c0d4 <__sfp+0x28>
 800c0cc:	6833      	ldr	r3, [r6, #0]
 800c0ce:	b30b      	cbz	r3, 800c114 <__sfp+0x68>
 800c0d0:	6836      	ldr	r6, [r6, #0]
 800c0d2:	e7f7      	b.n	800c0c4 <__sfp+0x18>
 800c0d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c0d8:	b9d5      	cbnz	r5, 800c110 <__sfp+0x64>
 800c0da:	4b16      	ldr	r3, [pc, #88]	; (800c134 <__sfp+0x88>)
 800c0dc:	60e3      	str	r3, [r4, #12]
 800c0de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c0e2:	6665      	str	r5, [r4, #100]	; 0x64
 800c0e4:	f000 f84c 	bl	800c180 <__retarget_lock_init_recursive>
 800c0e8:	f7ff ff96 	bl	800c018 <__sfp_lock_release>
 800c0ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c0f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c0f4:	6025      	str	r5, [r4, #0]
 800c0f6:	61a5      	str	r5, [r4, #24]
 800c0f8:	2208      	movs	r2, #8
 800c0fa:	4629      	mov	r1, r5
 800c0fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c100:	f7fe fa2a 	bl	800a558 <memset>
 800c104:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c108:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c10c:	4620      	mov	r0, r4
 800c10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c110:	3468      	adds	r4, #104	; 0x68
 800c112:	e7d9      	b.n	800c0c8 <__sfp+0x1c>
 800c114:	2104      	movs	r1, #4
 800c116:	4638      	mov	r0, r7
 800c118:	f7ff ff62 	bl	800bfe0 <__sfmoreglue>
 800c11c:	4604      	mov	r4, r0
 800c11e:	6030      	str	r0, [r6, #0]
 800c120:	2800      	cmp	r0, #0
 800c122:	d1d5      	bne.n	800c0d0 <__sfp+0x24>
 800c124:	f7ff ff78 	bl	800c018 <__sfp_lock_release>
 800c128:	230c      	movs	r3, #12
 800c12a:	603b      	str	r3, [r7, #0]
 800c12c:	e7ee      	b.n	800c10c <__sfp+0x60>
 800c12e:	bf00      	nop
 800c130:	0801a454 	.word	0x0801a454
 800c134:	ffff0001 	.word	0xffff0001

0800c138 <_fwalk_reent>:
 800c138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c13c:	4606      	mov	r6, r0
 800c13e:	4688      	mov	r8, r1
 800c140:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c144:	2700      	movs	r7, #0
 800c146:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c14a:	f1b9 0901 	subs.w	r9, r9, #1
 800c14e:	d505      	bpl.n	800c15c <_fwalk_reent+0x24>
 800c150:	6824      	ldr	r4, [r4, #0]
 800c152:	2c00      	cmp	r4, #0
 800c154:	d1f7      	bne.n	800c146 <_fwalk_reent+0xe>
 800c156:	4638      	mov	r0, r7
 800c158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c15c:	89ab      	ldrh	r3, [r5, #12]
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d907      	bls.n	800c172 <_fwalk_reent+0x3a>
 800c162:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c166:	3301      	adds	r3, #1
 800c168:	d003      	beq.n	800c172 <_fwalk_reent+0x3a>
 800c16a:	4629      	mov	r1, r5
 800c16c:	4630      	mov	r0, r6
 800c16e:	47c0      	blx	r8
 800c170:	4307      	orrs	r7, r0
 800c172:	3568      	adds	r5, #104	; 0x68
 800c174:	e7e9      	b.n	800c14a <_fwalk_reent+0x12>
	...

0800c178 <_localeconv_r>:
 800c178:	4800      	ldr	r0, [pc, #0]	; (800c17c <_localeconv_r+0x4>)
 800c17a:	4770      	bx	lr
 800c17c:	20000168 	.word	0x20000168

0800c180 <__retarget_lock_init_recursive>:
 800c180:	4770      	bx	lr

0800c182 <__retarget_lock_acquire_recursive>:
 800c182:	4770      	bx	lr

0800c184 <__retarget_lock_release_recursive>:
 800c184:	4770      	bx	lr

0800c186 <__swhatbuf_r>:
 800c186:	b570      	push	{r4, r5, r6, lr}
 800c188:	460e      	mov	r6, r1
 800c18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c18e:	2900      	cmp	r1, #0
 800c190:	b096      	sub	sp, #88	; 0x58
 800c192:	4614      	mov	r4, r2
 800c194:	461d      	mov	r5, r3
 800c196:	da07      	bge.n	800c1a8 <__swhatbuf_r+0x22>
 800c198:	2300      	movs	r3, #0
 800c19a:	602b      	str	r3, [r5, #0]
 800c19c:	89b3      	ldrh	r3, [r6, #12]
 800c19e:	061a      	lsls	r2, r3, #24
 800c1a0:	d410      	bmi.n	800c1c4 <__swhatbuf_r+0x3e>
 800c1a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1a6:	e00e      	b.n	800c1c6 <__swhatbuf_r+0x40>
 800c1a8:	466a      	mov	r2, sp
 800c1aa:	f000 fffb 	bl	800d1a4 <_fstat_r>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	dbf2      	blt.n	800c198 <__swhatbuf_r+0x12>
 800c1b2:	9a01      	ldr	r2, [sp, #4]
 800c1b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c1b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c1bc:	425a      	negs	r2, r3
 800c1be:	415a      	adcs	r2, r3
 800c1c0:	602a      	str	r2, [r5, #0]
 800c1c2:	e7ee      	b.n	800c1a2 <__swhatbuf_r+0x1c>
 800c1c4:	2340      	movs	r3, #64	; 0x40
 800c1c6:	2000      	movs	r0, #0
 800c1c8:	6023      	str	r3, [r4, #0]
 800c1ca:	b016      	add	sp, #88	; 0x58
 800c1cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c1d0 <__smakebuf_r>:
 800c1d0:	898b      	ldrh	r3, [r1, #12]
 800c1d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1d4:	079d      	lsls	r5, r3, #30
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	460c      	mov	r4, r1
 800c1da:	d507      	bpl.n	800c1ec <__smakebuf_r+0x1c>
 800c1dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	6123      	str	r3, [r4, #16]
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	6163      	str	r3, [r4, #20]
 800c1e8:	b002      	add	sp, #8
 800c1ea:	bd70      	pop	{r4, r5, r6, pc}
 800c1ec:	ab01      	add	r3, sp, #4
 800c1ee:	466a      	mov	r2, sp
 800c1f0:	f7ff ffc9 	bl	800c186 <__swhatbuf_r>
 800c1f4:	9900      	ldr	r1, [sp, #0]
 800c1f6:	4605      	mov	r5, r0
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	f000 fc1d 	bl	800ca38 <_malloc_r>
 800c1fe:	b948      	cbnz	r0, 800c214 <__smakebuf_r+0x44>
 800c200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c204:	059a      	lsls	r2, r3, #22
 800c206:	d4ef      	bmi.n	800c1e8 <__smakebuf_r+0x18>
 800c208:	f023 0303 	bic.w	r3, r3, #3
 800c20c:	f043 0302 	orr.w	r3, r3, #2
 800c210:	81a3      	strh	r3, [r4, #12]
 800c212:	e7e3      	b.n	800c1dc <__smakebuf_r+0xc>
 800c214:	4b0d      	ldr	r3, [pc, #52]	; (800c24c <__smakebuf_r+0x7c>)
 800c216:	62b3      	str	r3, [r6, #40]	; 0x28
 800c218:	89a3      	ldrh	r3, [r4, #12]
 800c21a:	6020      	str	r0, [r4, #0]
 800c21c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c220:	81a3      	strh	r3, [r4, #12]
 800c222:	9b00      	ldr	r3, [sp, #0]
 800c224:	6163      	str	r3, [r4, #20]
 800c226:	9b01      	ldr	r3, [sp, #4]
 800c228:	6120      	str	r0, [r4, #16]
 800c22a:	b15b      	cbz	r3, 800c244 <__smakebuf_r+0x74>
 800c22c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c230:	4630      	mov	r0, r6
 800c232:	f000 ffc9 	bl	800d1c8 <_isatty_r>
 800c236:	b128      	cbz	r0, 800c244 <__smakebuf_r+0x74>
 800c238:	89a3      	ldrh	r3, [r4, #12]
 800c23a:	f023 0303 	bic.w	r3, r3, #3
 800c23e:	f043 0301 	orr.w	r3, r3, #1
 800c242:	81a3      	strh	r3, [r4, #12]
 800c244:	89a0      	ldrh	r0, [r4, #12]
 800c246:	4305      	orrs	r5, r0
 800c248:	81a5      	strh	r5, [r4, #12]
 800c24a:	e7cd      	b.n	800c1e8 <__smakebuf_r+0x18>
 800c24c:	0800bfd5 	.word	0x0800bfd5

0800c250 <malloc>:
 800c250:	4b02      	ldr	r3, [pc, #8]	; (800c25c <malloc+0xc>)
 800c252:	4601      	mov	r1, r0
 800c254:	6818      	ldr	r0, [r3, #0]
 800c256:	f000 bbef 	b.w	800ca38 <_malloc_r>
 800c25a:	bf00      	nop
 800c25c:	20000014 	.word	0x20000014

0800c260 <memcpy>:
 800c260:	440a      	add	r2, r1
 800c262:	4291      	cmp	r1, r2
 800c264:	f100 33ff 	add.w	r3, r0, #4294967295
 800c268:	d100      	bne.n	800c26c <memcpy+0xc>
 800c26a:	4770      	bx	lr
 800c26c:	b510      	push	{r4, lr}
 800c26e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c272:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c276:	4291      	cmp	r1, r2
 800c278:	d1f9      	bne.n	800c26e <memcpy+0xe>
 800c27a:	bd10      	pop	{r4, pc}

0800c27c <_Balloc>:
 800c27c:	b570      	push	{r4, r5, r6, lr}
 800c27e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c280:	4604      	mov	r4, r0
 800c282:	460d      	mov	r5, r1
 800c284:	b976      	cbnz	r6, 800c2a4 <_Balloc+0x28>
 800c286:	2010      	movs	r0, #16
 800c288:	f7ff ffe2 	bl	800c250 <malloc>
 800c28c:	4602      	mov	r2, r0
 800c28e:	6260      	str	r0, [r4, #36]	; 0x24
 800c290:	b920      	cbnz	r0, 800c29c <_Balloc+0x20>
 800c292:	4b18      	ldr	r3, [pc, #96]	; (800c2f4 <_Balloc+0x78>)
 800c294:	4818      	ldr	r0, [pc, #96]	; (800c2f8 <_Balloc+0x7c>)
 800c296:	2166      	movs	r1, #102	; 0x66
 800c298:	f000 ff44 	bl	800d124 <__assert_func>
 800c29c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2a0:	6006      	str	r6, [r0, #0]
 800c2a2:	60c6      	str	r6, [r0, #12]
 800c2a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c2a6:	68f3      	ldr	r3, [r6, #12]
 800c2a8:	b183      	cbz	r3, 800c2cc <_Balloc+0x50>
 800c2aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2b2:	b9b8      	cbnz	r0, 800c2e4 <_Balloc+0x68>
 800c2b4:	2101      	movs	r1, #1
 800c2b6:	fa01 f605 	lsl.w	r6, r1, r5
 800c2ba:	1d72      	adds	r2, r6, #5
 800c2bc:	0092      	lsls	r2, r2, #2
 800c2be:	4620      	mov	r0, r4
 800c2c0:	f000 fb5a 	bl	800c978 <_calloc_r>
 800c2c4:	b160      	cbz	r0, 800c2e0 <_Balloc+0x64>
 800c2c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c2ca:	e00e      	b.n	800c2ea <_Balloc+0x6e>
 800c2cc:	2221      	movs	r2, #33	; 0x21
 800c2ce:	2104      	movs	r1, #4
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f000 fb51 	bl	800c978 <_calloc_r>
 800c2d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2d8:	60f0      	str	r0, [r6, #12]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1e4      	bne.n	800c2aa <_Balloc+0x2e>
 800c2e0:	2000      	movs	r0, #0
 800c2e2:	bd70      	pop	{r4, r5, r6, pc}
 800c2e4:	6802      	ldr	r2, [r0, #0]
 800c2e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c2f0:	e7f7      	b.n	800c2e2 <_Balloc+0x66>
 800c2f2:	bf00      	nop
 800c2f4:	0801a499 	.word	0x0801a499
 800c2f8:	0801a580 	.word	0x0801a580

0800c2fc <_Bfree>:
 800c2fc:	b570      	push	{r4, r5, r6, lr}
 800c2fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c300:	4605      	mov	r5, r0
 800c302:	460c      	mov	r4, r1
 800c304:	b976      	cbnz	r6, 800c324 <_Bfree+0x28>
 800c306:	2010      	movs	r0, #16
 800c308:	f7ff ffa2 	bl	800c250 <malloc>
 800c30c:	4602      	mov	r2, r0
 800c30e:	6268      	str	r0, [r5, #36]	; 0x24
 800c310:	b920      	cbnz	r0, 800c31c <_Bfree+0x20>
 800c312:	4b09      	ldr	r3, [pc, #36]	; (800c338 <_Bfree+0x3c>)
 800c314:	4809      	ldr	r0, [pc, #36]	; (800c33c <_Bfree+0x40>)
 800c316:	218a      	movs	r1, #138	; 0x8a
 800c318:	f000 ff04 	bl	800d124 <__assert_func>
 800c31c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c320:	6006      	str	r6, [r0, #0]
 800c322:	60c6      	str	r6, [r0, #12]
 800c324:	b13c      	cbz	r4, 800c336 <_Bfree+0x3a>
 800c326:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c328:	6862      	ldr	r2, [r4, #4]
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c330:	6021      	str	r1, [r4, #0]
 800c332:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c336:	bd70      	pop	{r4, r5, r6, pc}
 800c338:	0801a499 	.word	0x0801a499
 800c33c:	0801a580 	.word	0x0801a580

0800c340 <__multadd>:
 800c340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c344:	690e      	ldr	r6, [r1, #16]
 800c346:	4607      	mov	r7, r0
 800c348:	4698      	mov	r8, r3
 800c34a:	460c      	mov	r4, r1
 800c34c:	f101 0014 	add.w	r0, r1, #20
 800c350:	2300      	movs	r3, #0
 800c352:	6805      	ldr	r5, [r0, #0]
 800c354:	b2a9      	uxth	r1, r5
 800c356:	fb02 8101 	mla	r1, r2, r1, r8
 800c35a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c35e:	0c2d      	lsrs	r5, r5, #16
 800c360:	fb02 c505 	mla	r5, r2, r5, ip
 800c364:	b289      	uxth	r1, r1
 800c366:	3301      	adds	r3, #1
 800c368:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c36c:	429e      	cmp	r6, r3
 800c36e:	f840 1b04 	str.w	r1, [r0], #4
 800c372:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c376:	dcec      	bgt.n	800c352 <__multadd+0x12>
 800c378:	f1b8 0f00 	cmp.w	r8, #0
 800c37c:	d022      	beq.n	800c3c4 <__multadd+0x84>
 800c37e:	68a3      	ldr	r3, [r4, #8]
 800c380:	42b3      	cmp	r3, r6
 800c382:	dc19      	bgt.n	800c3b8 <__multadd+0x78>
 800c384:	6861      	ldr	r1, [r4, #4]
 800c386:	4638      	mov	r0, r7
 800c388:	3101      	adds	r1, #1
 800c38a:	f7ff ff77 	bl	800c27c <_Balloc>
 800c38e:	4605      	mov	r5, r0
 800c390:	b928      	cbnz	r0, 800c39e <__multadd+0x5e>
 800c392:	4602      	mov	r2, r0
 800c394:	4b0d      	ldr	r3, [pc, #52]	; (800c3cc <__multadd+0x8c>)
 800c396:	480e      	ldr	r0, [pc, #56]	; (800c3d0 <__multadd+0x90>)
 800c398:	21b5      	movs	r1, #181	; 0xb5
 800c39a:	f000 fec3 	bl	800d124 <__assert_func>
 800c39e:	6922      	ldr	r2, [r4, #16]
 800c3a0:	3202      	adds	r2, #2
 800c3a2:	f104 010c 	add.w	r1, r4, #12
 800c3a6:	0092      	lsls	r2, r2, #2
 800c3a8:	300c      	adds	r0, #12
 800c3aa:	f7ff ff59 	bl	800c260 <memcpy>
 800c3ae:	4621      	mov	r1, r4
 800c3b0:	4638      	mov	r0, r7
 800c3b2:	f7ff ffa3 	bl	800c2fc <_Bfree>
 800c3b6:	462c      	mov	r4, r5
 800c3b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c3bc:	3601      	adds	r6, #1
 800c3be:	f8c3 8014 	str.w	r8, [r3, #20]
 800c3c2:	6126      	str	r6, [r4, #16]
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3ca:	bf00      	nop
 800c3cc:	0801a50f 	.word	0x0801a50f
 800c3d0:	0801a580 	.word	0x0801a580

0800c3d4 <__hi0bits>:
 800c3d4:	0c03      	lsrs	r3, r0, #16
 800c3d6:	041b      	lsls	r3, r3, #16
 800c3d8:	b9d3      	cbnz	r3, 800c410 <__hi0bits+0x3c>
 800c3da:	0400      	lsls	r0, r0, #16
 800c3dc:	2310      	movs	r3, #16
 800c3de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c3e2:	bf04      	itt	eq
 800c3e4:	0200      	lsleq	r0, r0, #8
 800c3e6:	3308      	addeq	r3, #8
 800c3e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c3ec:	bf04      	itt	eq
 800c3ee:	0100      	lsleq	r0, r0, #4
 800c3f0:	3304      	addeq	r3, #4
 800c3f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c3f6:	bf04      	itt	eq
 800c3f8:	0080      	lsleq	r0, r0, #2
 800c3fa:	3302      	addeq	r3, #2
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	db05      	blt.n	800c40c <__hi0bits+0x38>
 800c400:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c404:	f103 0301 	add.w	r3, r3, #1
 800c408:	bf08      	it	eq
 800c40a:	2320      	moveq	r3, #32
 800c40c:	4618      	mov	r0, r3
 800c40e:	4770      	bx	lr
 800c410:	2300      	movs	r3, #0
 800c412:	e7e4      	b.n	800c3de <__hi0bits+0xa>

0800c414 <__lo0bits>:
 800c414:	6803      	ldr	r3, [r0, #0]
 800c416:	f013 0207 	ands.w	r2, r3, #7
 800c41a:	4601      	mov	r1, r0
 800c41c:	d00b      	beq.n	800c436 <__lo0bits+0x22>
 800c41e:	07da      	lsls	r2, r3, #31
 800c420:	d424      	bmi.n	800c46c <__lo0bits+0x58>
 800c422:	0798      	lsls	r0, r3, #30
 800c424:	bf49      	itett	mi
 800c426:	085b      	lsrmi	r3, r3, #1
 800c428:	089b      	lsrpl	r3, r3, #2
 800c42a:	2001      	movmi	r0, #1
 800c42c:	600b      	strmi	r3, [r1, #0]
 800c42e:	bf5c      	itt	pl
 800c430:	600b      	strpl	r3, [r1, #0]
 800c432:	2002      	movpl	r0, #2
 800c434:	4770      	bx	lr
 800c436:	b298      	uxth	r0, r3
 800c438:	b9b0      	cbnz	r0, 800c468 <__lo0bits+0x54>
 800c43a:	0c1b      	lsrs	r3, r3, #16
 800c43c:	2010      	movs	r0, #16
 800c43e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c442:	bf04      	itt	eq
 800c444:	0a1b      	lsreq	r3, r3, #8
 800c446:	3008      	addeq	r0, #8
 800c448:	071a      	lsls	r2, r3, #28
 800c44a:	bf04      	itt	eq
 800c44c:	091b      	lsreq	r3, r3, #4
 800c44e:	3004      	addeq	r0, #4
 800c450:	079a      	lsls	r2, r3, #30
 800c452:	bf04      	itt	eq
 800c454:	089b      	lsreq	r3, r3, #2
 800c456:	3002      	addeq	r0, #2
 800c458:	07da      	lsls	r2, r3, #31
 800c45a:	d403      	bmi.n	800c464 <__lo0bits+0x50>
 800c45c:	085b      	lsrs	r3, r3, #1
 800c45e:	f100 0001 	add.w	r0, r0, #1
 800c462:	d005      	beq.n	800c470 <__lo0bits+0x5c>
 800c464:	600b      	str	r3, [r1, #0]
 800c466:	4770      	bx	lr
 800c468:	4610      	mov	r0, r2
 800c46a:	e7e8      	b.n	800c43e <__lo0bits+0x2a>
 800c46c:	2000      	movs	r0, #0
 800c46e:	4770      	bx	lr
 800c470:	2020      	movs	r0, #32
 800c472:	4770      	bx	lr

0800c474 <__i2b>:
 800c474:	b510      	push	{r4, lr}
 800c476:	460c      	mov	r4, r1
 800c478:	2101      	movs	r1, #1
 800c47a:	f7ff feff 	bl	800c27c <_Balloc>
 800c47e:	4602      	mov	r2, r0
 800c480:	b928      	cbnz	r0, 800c48e <__i2b+0x1a>
 800c482:	4b05      	ldr	r3, [pc, #20]	; (800c498 <__i2b+0x24>)
 800c484:	4805      	ldr	r0, [pc, #20]	; (800c49c <__i2b+0x28>)
 800c486:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c48a:	f000 fe4b 	bl	800d124 <__assert_func>
 800c48e:	2301      	movs	r3, #1
 800c490:	6144      	str	r4, [r0, #20]
 800c492:	6103      	str	r3, [r0, #16]
 800c494:	bd10      	pop	{r4, pc}
 800c496:	bf00      	nop
 800c498:	0801a50f 	.word	0x0801a50f
 800c49c:	0801a580 	.word	0x0801a580

0800c4a0 <__multiply>:
 800c4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a4:	4614      	mov	r4, r2
 800c4a6:	690a      	ldr	r2, [r1, #16]
 800c4a8:	6923      	ldr	r3, [r4, #16]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	bfb8      	it	lt
 800c4ae:	460b      	movlt	r3, r1
 800c4b0:	460d      	mov	r5, r1
 800c4b2:	bfbc      	itt	lt
 800c4b4:	4625      	movlt	r5, r4
 800c4b6:	461c      	movlt	r4, r3
 800c4b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c4bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c4c0:	68ab      	ldr	r3, [r5, #8]
 800c4c2:	6869      	ldr	r1, [r5, #4]
 800c4c4:	eb0a 0709 	add.w	r7, sl, r9
 800c4c8:	42bb      	cmp	r3, r7
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	bfb8      	it	lt
 800c4ce:	3101      	addlt	r1, #1
 800c4d0:	f7ff fed4 	bl	800c27c <_Balloc>
 800c4d4:	b930      	cbnz	r0, 800c4e4 <__multiply+0x44>
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	4b42      	ldr	r3, [pc, #264]	; (800c5e4 <__multiply+0x144>)
 800c4da:	4843      	ldr	r0, [pc, #268]	; (800c5e8 <__multiply+0x148>)
 800c4dc:	f240 115d 	movw	r1, #349	; 0x15d
 800c4e0:	f000 fe20 	bl	800d124 <__assert_func>
 800c4e4:	f100 0614 	add.w	r6, r0, #20
 800c4e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c4ec:	4633      	mov	r3, r6
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	4543      	cmp	r3, r8
 800c4f2:	d31e      	bcc.n	800c532 <__multiply+0x92>
 800c4f4:	f105 0c14 	add.w	ip, r5, #20
 800c4f8:	f104 0314 	add.w	r3, r4, #20
 800c4fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c500:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c504:	9202      	str	r2, [sp, #8]
 800c506:	ebac 0205 	sub.w	r2, ip, r5
 800c50a:	3a15      	subs	r2, #21
 800c50c:	f022 0203 	bic.w	r2, r2, #3
 800c510:	3204      	adds	r2, #4
 800c512:	f105 0115 	add.w	r1, r5, #21
 800c516:	458c      	cmp	ip, r1
 800c518:	bf38      	it	cc
 800c51a:	2204      	movcc	r2, #4
 800c51c:	9201      	str	r2, [sp, #4]
 800c51e:	9a02      	ldr	r2, [sp, #8]
 800c520:	9303      	str	r3, [sp, #12]
 800c522:	429a      	cmp	r2, r3
 800c524:	d808      	bhi.n	800c538 <__multiply+0x98>
 800c526:	2f00      	cmp	r7, #0
 800c528:	dc55      	bgt.n	800c5d6 <__multiply+0x136>
 800c52a:	6107      	str	r7, [r0, #16]
 800c52c:	b005      	add	sp, #20
 800c52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c532:	f843 2b04 	str.w	r2, [r3], #4
 800c536:	e7db      	b.n	800c4f0 <__multiply+0x50>
 800c538:	f8b3 a000 	ldrh.w	sl, [r3]
 800c53c:	f1ba 0f00 	cmp.w	sl, #0
 800c540:	d020      	beq.n	800c584 <__multiply+0xe4>
 800c542:	f105 0e14 	add.w	lr, r5, #20
 800c546:	46b1      	mov	r9, r6
 800c548:	2200      	movs	r2, #0
 800c54a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c54e:	f8d9 b000 	ldr.w	fp, [r9]
 800c552:	b2a1      	uxth	r1, r4
 800c554:	fa1f fb8b 	uxth.w	fp, fp
 800c558:	fb0a b101 	mla	r1, sl, r1, fp
 800c55c:	4411      	add	r1, r2
 800c55e:	f8d9 2000 	ldr.w	r2, [r9]
 800c562:	0c24      	lsrs	r4, r4, #16
 800c564:	0c12      	lsrs	r2, r2, #16
 800c566:	fb0a 2404 	mla	r4, sl, r4, r2
 800c56a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c56e:	b289      	uxth	r1, r1
 800c570:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c574:	45f4      	cmp	ip, lr
 800c576:	f849 1b04 	str.w	r1, [r9], #4
 800c57a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c57e:	d8e4      	bhi.n	800c54a <__multiply+0xaa>
 800c580:	9901      	ldr	r1, [sp, #4]
 800c582:	5072      	str	r2, [r6, r1]
 800c584:	9a03      	ldr	r2, [sp, #12]
 800c586:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c58a:	3304      	adds	r3, #4
 800c58c:	f1b9 0f00 	cmp.w	r9, #0
 800c590:	d01f      	beq.n	800c5d2 <__multiply+0x132>
 800c592:	6834      	ldr	r4, [r6, #0]
 800c594:	f105 0114 	add.w	r1, r5, #20
 800c598:	46b6      	mov	lr, r6
 800c59a:	f04f 0a00 	mov.w	sl, #0
 800c59e:	880a      	ldrh	r2, [r1, #0]
 800c5a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c5a4:	fb09 b202 	mla	r2, r9, r2, fp
 800c5a8:	4492      	add	sl, r2
 800c5aa:	b2a4      	uxth	r4, r4
 800c5ac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c5b0:	f84e 4b04 	str.w	r4, [lr], #4
 800c5b4:	f851 4b04 	ldr.w	r4, [r1], #4
 800c5b8:	f8be 2000 	ldrh.w	r2, [lr]
 800c5bc:	0c24      	lsrs	r4, r4, #16
 800c5be:	fb09 2404 	mla	r4, r9, r4, r2
 800c5c2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c5c6:	458c      	cmp	ip, r1
 800c5c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c5cc:	d8e7      	bhi.n	800c59e <__multiply+0xfe>
 800c5ce:	9a01      	ldr	r2, [sp, #4]
 800c5d0:	50b4      	str	r4, [r6, r2]
 800c5d2:	3604      	adds	r6, #4
 800c5d4:	e7a3      	b.n	800c51e <__multiply+0x7e>
 800c5d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1a5      	bne.n	800c52a <__multiply+0x8a>
 800c5de:	3f01      	subs	r7, #1
 800c5e0:	e7a1      	b.n	800c526 <__multiply+0x86>
 800c5e2:	bf00      	nop
 800c5e4:	0801a50f 	.word	0x0801a50f
 800c5e8:	0801a580 	.word	0x0801a580

0800c5ec <__pow5mult>:
 800c5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5f0:	4615      	mov	r5, r2
 800c5f2:	f012 0203 	ands.w	r2, r2, #3
 800c5f6:	4606      	mov	r6, r0
 800c5f8:	460f      	mov	r7, r1
 800c5fa:	d007      	beq.n	800c60c <__pow5mult+0x20>
 800c5fc:	4c25      	ldr	r4, [pc, #148]	; (800c694 <__pow5mult+0xa8>)
 800c5fe:	3a01      	subs	r2, #1
 800c600:	2300      	movs	r3, #0
 800c602:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c606:	f7ff fe9b 	bl	800c340 <__multadd>
 800c60a:	4607      	mov	r7, r0
 800c60c:	10ad      	asrs	r5, r5, #2
 800c60e:	d03d      	beq.n	800c68c <__pow5mult+0xa0>
 800c610:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c612:	b97c      	cbnz	r4, 800c634 <__pow5mult+0x48>
 800c614:	2010      	movs	r0, #16
 800c616:	f7ff fe1b 	bl	800c250 <malloc>
 800c61a:	4602      	mov	r2, r0
 800c61c:	6270      	str	r0, [r6, #36]	; 0x24
 800c61e:	b928      	cbnz	r0, 800c62c <__pow5mult+0x40>
 800c620:	4b1d      	ldr	r3, [pc, #116]	; (800c698 <__pow5mult+0xac>)
 800c622:	481e      	ldr	r0, [pc, #120]	; (800c69c <__pow5mult+0xb0>)
 800c624:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c628:	f000 fd7c 	bl	800d124 <__assert_func>
 800c62c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c630:	6004      	str	r4, [r0, #0]
 800c632:	60c4      	str	r4, [r0, #12]
 800c634:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c638:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c63c:	b94c      	cbnz	r4, 800c652 <__pow5mult+0x66>
 800c63e:	f240 2171 	movw	r1, #625	; 0x271
 800c642:	4630      	mov	r0, r6
 800c644:	f7ff ff16 	bl	800c474 <__i2b>
 800c648:	2300      	movs	r3, #0
 800c64a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c64e:	4604      	mov	r4, r0
 800c650:	6003      	str	r3, [r0, #0]
 800c652:	f04f 0900 	mov.w	r9, #0
 800c656:	07eb      	lsls	r3, r5, #31
 800c658:	d50a      	bpl.n	800c670 <__pow5mult+0x84>
 800c65a:	4639      	mov	r1, r7
 800c65c:	4622      	mov	r2, r4
 800c65e:	4630      	mov	r0, r6
 800c660:	f7ff ff1e 	bl	800c4a0 <__multiply>
 800c664:	4639      	mov	r1, r7
 800c666:	4680      	mov	r8, r0
 800c668:	4630      	mov	r0, r6
 800c66a:	f7ff fe47 	bl	800c2fc <_Bfree>
 800c66e:	4647      	mov	r7, r8
 800c670:	106d      	asrs	r5, r5, #1
 800c672:	d00b      	beq.n	800c68c <__pow5mult+0xa0>
 800c674:	6820      	ldr	r0, [r4, #0]
 800c676:	b938      	cbnz	r0, 800c688 <__pow5mult+0x9c>
 800c678:	4622      	mov	r2, r4
 800c67a:	4621      	mov	r1, r4
 800c67c:	4630      	mov	r0, r6
 800c67e:	f7ff ff0f 	bl	800c4a0 <__multiply>
 800c682:	6020      	str	r0, [r4, #0]
 800c684:	f8c0 9000 	str.w	r9, [r0]
 800c688:	4604      	mov	r4, r0
 800c68a:	e7e4      	b.n	800c656 <__pow5mult+0x6a>
 800c68c:	4638      	mov	r0, r7
 800c68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c692:	bf00      	nop
 800c694:	0801a6d0 	.word	0x0801a6d0
 800c698:	0801a499 	.word	0x0801a499
 800c69c:	0801a580 	.word	0x0801a580

0800c6a0 <__lshift>:
 800c6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6a4:	460c      	mov	r4, r1
 800c6a6:	6849      	ldr	r1, [r1, #4]
 800c6a8:	6923      	ldr	r3, [r4, #16]
 800c6aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6ae:	68a3      	ldr	r3, [r4, #8]
 800c6b0:	4607      	mov	r7, r0
 800c6b2:	4691      	mov	r9, r2
 800c6b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6b8:	f108 0601 	add.w	r6, r8, #1
 800c6bc:	42b3      	cmp	r3, r6
 800c6be:	db0b      	blt.n	800c6d8 <__lshift+0x38>
 800c6c0:	4638      	mov	r0, r7
 800c6c2:	f7ff fddb 	bl	800c27c <_Balloc>
 800c6c6:	4605      	mov	r5, r0
 800c6c8:	b948      	cbnz	r0, 800c6de <__lshift+0x3e>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	4b28      	ldr	r3, [pc, #160]	; (800c770 <__lshift+0xd0>)
 800c6ce:	4829      	ldr	r0, [pc, #164]	; (800c774 <__lshift+0xd4>)
 800c6d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c6d4:	f000 fd26 	bl	800d124 <__assert_func>
 800c6d8:	3101      	adds	r1, #1
 800c6da:	005b      	lsls	r3, r3, #1
 800c6dc:	e7ee      	b.n	800c6bc <__lshift+0x1c>
 800c6de:	2300      	movs	r3, #0
 800c6e0:	f100 0114 	add.w	r1, r0, #20
 800c6e4:	f100 0210 	add.w	r2, r0, #16
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	4553      	cmp	r3, sl
 800c6ec:	db33      	blt.n	800c756 <__lshift+0xb6>
 800c6ee:	6920      	ldr	r0, [r4, #16]
 800c6f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c6f4:	f104 0314 	add.w	r3, r4, #20
 800c6f8:	f019 091f 	ands.w	r9, r9, #31
 800c6fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c700:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c704:	d02b      	beq.n	800c75e <__lshift+0xbe>
 800c706:	f1c9 0e20 	rsb	lr, r9, #32
 800c70a:	468a      	mov	sl, r1
 800c70c:	2200      	movs	r2, #0
 800c70e:	6818      	ldr	r0, [r3, #0]
 800c710:	fa00 f009 	lsl.w	r0, r0, r9
 800c714:	4302      	orrs	r2, r0
 800c716:	f84a 2b04 	str.w	r2, [sl], #4
 800c71a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c71e:	459c      	cmp	ip, r3
 800c720:	fa22 f20e 	lsr.w	r2, r2, lr
 800c724:	d8f3      	bhi.n	800c70e <__lshift+0x6e>
 800c726:	ebac 0304 	sub.w	r3, ip, r4
 800c72a:	3b15      	subs	r3, #21
 800c72c:	f023 0303 	bic.w	r3, r3, #3
 800c730:	3304      	adds	r3, #4
 800c732:	f104 0015 	add.w	r0, r4, #21
 800c736:	4584      	cmp	ip, r0
 800c738:	bf38      	it	cc
 800c73a:	2304      	movcc	r3, #4
 800c73c:	50ca      	str	r2, [r1, r3]
 800c73e:	b10a      	cbz	r2, 800c744 <__lshift+0xa4>
 800c740:	f108 0602 	add.w	r6, r8, #2
 800c744:	3e01      	subs	r6, #1
 800c746:	4638      	mov	r0, r7
 800c748:	612e      	str	r6, [r5, #16]
 800c74a:	4621      	mov	r1, r4
 800c74c:	f7ff fdd6 	bl	800c2fc <_Bfree>
 800c750:	4628      	mov	r0, r5
 800c752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c756:	f842 0f04 	str.w	r0, [r2, #4]!
 800c75a:	3301      	adds	r3, #1
 800c75c:	e7c5      	b.n	800c6ea <__lshift+0x4a>
 800c75e:	3904      	subs	r1, #4
 800c760:	f853 2b04 	ldr.w	r2, [r3], #4
 800c764:	f841 2f04 	str.w	r2, [r1, #4]!
 800c768:	459c      	cmp	ip, r3
 800c76a:	d8f9      	bhi.n	800c760 <__lshift+0xc0>
 800c76c:	e7ea      	b.n	800c744 <__lshift+0xa4>
 800c76e:	bf00      	nop
 800c770:	0801a50f 	.word	0x0801a50f
 800c774:	0801a580 	.word	0x0801a580

0800c778 <__mcmp>:
 800c778:	b530      	push	{r4, r5, lr}
 800c77a:	6902      	ldr	r2, [r0, #16]
 800c77c:	690c      	ldr	r4, [r1, #16]
 800c77e:	1b12      	subs	r2, r2, r4
 800c780:	d10e      	bne.n	800c7a0 <__mcmp+0x28>
 800c782:	f100 0314 	add.w	r3, r0, #20
 800c786:	3114      	adds	r1, #20
 800c788:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c78c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c790:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c794:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c798:	42a5      	cmp	r5, r4
 800c79a:	d003      	beq.n	800c7a4 <__mcmp+0x2c>
 800c79c:	d305      	bcc.n	800c7aa <__mcmp+0x32>
 800c79e:	2201      	movs	r2, #1
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	bd30      	pop	{r4, r5, pc}
 800c7a4:	4283      	cmp	r3, r0
 800c7a6:	d3f3      	bcc.n	800c790 <__mcmp+0x18>
 800c7a8:	e7fa      	b.n	800c7a0 <__mcmp+0x28>
 800c7aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ae:	e7f7      	b.n	800c7a0 <__mcmp+0x28>

0800c7b0 <__mdiff>:
 800c7b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b4:	460c      	mov	r4, r1
 800c7b6:	4606      	mov	r6, r0
 800c7b8:	4611      	mov	r1, r2
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	4617      	mov	r7, r2
 800c7be:	f7ff ffdb 	bl	800c778 <__mcmp>
 800c7c2:	1e05      	subs	r5, r0, #0
 800c7c4:	d110      	bne.n	800c7e8 <__mdiff+0x38>
 800c7c6:	4629      	mov	r1, r5
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	f7ff fd57 	bl	800c27c <_Balloc>
 800c7ce:	b930      	cbnz	r0, 800c7de <__mdiff+0x2e>
 800c7d0:	4b39      	ldr	r3, [pc, #228]	; (800c8b8 <__mdiff+0x108>)
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	f240 2132 	movw	r1, #562	; 0x232
 800c7d8:	4838      	ldr	r0, [pc, #224]	; (800c8bc <__mdiff+0x10c>)
 800c7da:	f000 fca3 	bl	800d124 <__assert_func>
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e8:	bfa4      	itt	ge
 800c7ea:	463b      	movge	r3, r7
 800c7ec:	4627      	movge	r7, r4
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	6879      	ldr	r1, [r7, #4]
 800c7f2:	bfa6      	itte	ge
 800c7f4:	461c      	movge	r4, r3
 800c7f6:	2500      	movge	r5, #0
 800c7f8:	2501      	movlt	r5, #1
 800c7fa:	f7ff fd3f 	bl	800c27c <_Balloc>
 800c7fe:	b920      	cbnz	r0, 800c80a <__mdiff+0x5a>
 800c800:	4b2d      	ldr	r3, [pc, #180]	; (800c8b8 <__mdiff+0x108>)
 800c802:	4602      	mov	r2, r0
 800c804:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c808:	e7e6      	b.n	800c7d8 <__mdiff+0x28>
 800c80a:	693e      	ldr	r6, [r7, #16]
 800c80c:	60c5      	str	r5, [r0, #12]
 800c80e:	6925      	ldr	r5, [r4, #16]
 800c810:	f107 0114 	add.w	r1, r7, #20
 800c814:	f104 0914 	add.w	r9, r4, #20
 800c818:	f100 0e14 	add.w	lr, r0, #20
 800c81c:	f107 0210 	add.w	r2, r7, #16
 800c820:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c824:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c828:	46f2      	mov	sl, lr
 800c82a:	2700      	movs	r7, #0
 800c82c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c830:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c834:	fa1f f883 	uxth.w	r8, r3
 800c838:	fa17 f78b 	uxtah	r7, r7, fp
 800c83c:	0c1b      	lsrs	r3, r3, #16
 800c83e:	eba7 0808 	sub.w	r8, r7, r8
 800c842:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c846:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c84a:	fa1f f888 	uxth.w	r8, r8
 800c84e:	141f      	asrs	r7, r3, #16
 800c850:	454d      	cmp	r5, r9
 800c852:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c856:	f84a 3b04 	str.w	r3, [sl], #4
 800c85a:	d8e7      	bhi.n	800c82c <__mdiff+0x7c>
 800c85c:	1b2b      	subs	r3, r5, r4
 800c85e:	3b15      	subs	r3, #21
 800c860:	f023 0303 	bic.w	r3, r3, #3
 800c864:	3304      	adds	r3, #4
 800c866:	3415      	adds	r4, #21
 800c868:	42a5      	cmp	r5, r4
 800c86a:	bf38      	it	cc
 800c86c:	2304      	movcc	r3, #4
 800c86e:	4419      	add	r1, r3
 800c870:	4473      	add	r3, lr
 800c872:	469e      	mov	lr, r3
 800c874:	460d      	mov	r5, r1
 800c876:	4565      	cmp	r5, ip
 800c878:	d30e      	bcc.n	800c898 <__mdiff+0xe8>
 800c87a:	f10c 0203 	add.w	r2, ip, #3
 800c87e:	1a52      	subs	r2, r2, r1
 800c880:	f022 0203 	bic.w	r2, r2, #3
 800c884:	3903      	subs	r1, #3
 800c886:	458c      	cmp	ip, r1
 800c888:	bf38      	it	cc
 800c88a:	2200      	movcc	r2, #0
 800c88c:	441a      	add	r2, r3
 800c88e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c892:	b17b      	cbz	r3, 800c8b4 <__mdiff+0x104>
 800c894:	6106      	str	r6, [r0, #16]
 800c896:	e7a5      	b.n	800c7e4 <__mdiff+0x34>
 800c898:	f855 8b04 	ldr.w	r8, [r5], #4
 800c89c:	fa17 f488 	uxtah	r4, r7, r8
 800c8a0:	1422      	asrs	r2, r4, #16
 800c8a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c8a6:	b2a4      	uxth	r4, r4
 800c8a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c8ac:	f84e 4b04 	str.w	r4, [lr], #4
 800c8b0:	1417      	asrs	r7, r2, #16
 800c8b2:	e7e0      	b.n	800c876 <__mdiff+0xc6>
 800c8b4:	3e01      	subs	r6, #1
 800c8b6:	e7ea      	b.n	800c88e <__mdiff+0xde>
 800c8b8:	0801a50f 	.word	0x0801a50f
 800c8bc:	0801a580 	.word	0x0801a580

0800c8c0 <__d2b>:
 800c8c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8c4:	4689      	mov	r9, r1
 800c8c6:	2101      	movs	r1, #1
 800c8c8:	ec57 6b10 	vmov	r6, r7, d0
 800c8cc:	4690      	mov	r8, r2
 800c8ce:	f7ff fcd5 	bl	800c27c <_Balloc>
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	b930      	cbnz	r0, 800c8e4 <__d2b+0x24>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	4b25      	ldr	r3, [pc, #148]	; (800c970 <__d2b+0xb0>)
 800c8da:	4826      	ldr	r0, [pc, #152]	; (800c974 <__d2b+0xb4>)
 800c8dc:	f240 310a 	movw	r1, #778	; 0x30a
 800c8e0:	f000 fc20 	bl	800d124 <__assert_func>
 800c8e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c8e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c8ec:	bb35      	cbnz	r5, 800c93c <__d2b+0x7c>
 800c8ee:	2e00      	cmp	r6, #0
 800c8f0:	9301      	str	r3, [sp, #4]
 800c8f2:	d028      	beq.n	800c946 <__d2b+0x86>
 800c8f4:	4668      	mov	r0, sp
 800c8f6:	9600      	str	r6, [sp, #0]
 800c8f8:	f7ff fd8c 	bl	800c414 <__lo0bits>
 800c8fc:	9900      	ldr	r1, [sp, #0]
 800c8fe:	b300      	cbz	r0, 800c942 <__d2b+0x82>
 800c900:	9a01      	ldr	r2, [sp, #4]
 800c902:	f1c0 0320 	rsb	r3, r0, #32
 800c906:	fa02 f303 	lsl.w	r3, r2, r3
 800c90a:	430b      	orrs	r3, r1
 800c90c:	40c2      	lsrs	r2, r0
 800c90e:	6163      	str	r3, [r4, #20]
 800c910:	9201      	str	r2, [sp, #4]
 800c912:	9b01      	ldr	r3, [sp, #4]
 800c914:	61a3      	str	r3, [r4, #24]
 800c916:	2b00      	cmp	r3, #0
 800c918:	bf14      	ite	ne
 800c91a:	2202      	movne	r2, #2
 800c91c:	2201      	moveq	r2, #1
 800c91e:	6122      	str	r2, [r4, #16]
 800c920:	b1d5      	cbz	r5, 800c958 <__d2b+0x98>
 800c922:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c926:	4405      	add	r5, r0
 800c928:	f8c9 5000 	str.w	r5, [r9]
 800c92c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c930:	f8c8 0000 	str.w	r0, [r8]
 800c934:	4620      	mov	r0, r4
 800c936:	b003      	add	sp, #12
 800c938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c93c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c940:	e7d5      	b.n	800c8ee <__d2b+0x2e>
 800c942:	6161      	str	r1, [r4, #20]
 800c944:	e7e5      	b.n	800c912 <__d2b+0x52>
 800c946:	a801      	add	r0, sp, #4
 800c948:	f7ff fd64 	bl	800c414 <__lo0bits>
 800c94c:	9b01      	ldr	r3, [sp, #4]
 800c94e:	6163      	str	r3, [r4, #20]
 800c950:	2201      	movs	r2, #1
 800c952:	6122      	str	r2, [r4, #16]
 800c954:	3020      	adds	r0, #32
 800c956:	e7e3      	b.n	800c920 <__d2b+0x60>
 800c958:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c95c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c960:	f8c9 0000 	str.w	r0, [r9]
 800c964:	6918      	ldr	r0, [r3, #16]
 800c966:	f7ff fd35 	bl	800c3d4 <__hi0bits>
 800c96a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c96e:	e7df      	b.n	800c930 <__d2b+0x70>
 800c970:	0801a50f 	.word	0x0801a50f
 800c974:	0801a580 	.word	0x0801a580

0800c978 <_calloc_r>:
 800c978:	b513      	push	{r0, r1, r4, lr}
 800c97a:	434a      	muls	r2, r1
 800c97c:	4611      	mov	r1, r2
 800c97e:	9201      	str	r2, [sp, #4]
 800c980:	f000 f85a 	bl	800ca38 <_malloc_r>
 800c984:	4604      	mov	r4, r0
 800c986:	b118      	cbz	r0, 800c990 <_calloc_r+0x18>
 800c988:	9a01      	ldr	r2, [sp, #4]
 800c98a:	2100      	movs	r1, #0
 800c98c:	f7fd fde4 	bl	800a558 <memset>
 800c990:	4620      	mov	r0, r4
 800c992:	b002      	add	sp, #8
 800c994:	bd10      	pop	{r4, pc}
	...

0800c998 <_free_r>:
 800c998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c99a:	2900      	cmp	r1, #0
 800c99c:	d048      	beq.n	800ca30 <_free_r+0x98>
 800c99e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9a2:	9001      	str	r0, [sp, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	f1a1 0404 	sub.w	r4, r1, #4
 800c9aa:	bfb8      	it	lt
 800c9ac:	18e4      	addlt	r4, r4, r3
 800c9ae:	f000 fc59 	bl	800d264 <__malloc_lock>
 800c9b2:	4a20      	ldr	r2, [pc, #128]	; (800ca34 <_free_r+0x9c>)
 800c9b4:	9801      	ldr	r0, [sp, #4]
 800c9b6:	6813      	ldr	r3, [r2, #0]
 800c9b8:	4615      	mov	r5, r2
 800c9ba:	b933      	cbnz	r3, 800c9ca <_free_r+0x32>
 800c9bc:	6063      	str	r3, [r4, #4]
 800c9be:	6014      	str	r4, [r2, #0]
 800c9c0:	b003      	add	sp, #12
 800c9c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9c6:	f000 bc53 	b.w	800d270 <__malloc_unlock>
 800c9ca:	42a3      	cmp	r3, r4
 800c9cc:	d90b      	bls.n	800c9e6 <_free_r+0x4e>
 800c9ce:	6821      	ldr	r1, [r4, #0]
 800c9d0:	1862      	adds	r2, r4, r1
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	bf04      	itt	eq
 800c9d6:	681a      	ldreq	r2, [r3, #0]
 800c9d8:	685b      	ldreq	r3, [r3, #4]
 800c9da:	6063      	str	r3, [r4, #4]
 800c9dc:	bf04      	itt	eq
 800c9de:	1852      	addeq	r2, r2, r1
 800c9e0:	6022      	streq	r2, [r4, #0]
 800c9e2:	602c      	str	r4, [r5, #0]
 800c9e4:	e7ec      	b.n	800c9c0 <_free_r+0x28>
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	b10b      	cbz	r3, 800c9f0 <_free_r+0x58>
 800c9ec:	42a3      	cmp	r3, r4
 800c9ee:	d9fa      	bls.n	800c9e6 <_free_r+0x4e>
 800c9f0:	6811      	ldr	r1, [r2, #0]
 800c9f2:	1855      	adds	r5, r2, r1
 800c9f4:	42a5      	cmp	r5, r4
 800c9f6:	d10b      	bne.n	800ca10 <_free_r+0x78>
 800c9f8:	6824      	ldr	r4, [r4, #0]
 800c9fa:	4421      	add	r1, r4
 800c9fc:	1854      	adds	r4, r2, r1
 800c9fe:	42a3      	cmp	r3, r4
 800ca00:	6011      	str	r1, [r2, #0]
 800ca02:	d1dd      	bne.n	800c9c0 <_free_r+0x28>
 800ca04:	681c      	ldr	r4, [r3, #0]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	6053      	str	r3, [r2, #4]
 800ca0a:	4421      	add	r1, r4
 800ca0c:	6011      	str	r1, [r2, #0]
 800ca0e:	e7d7      	b.n	800c9c0 <_free_r+0x28>
 800ca10:	d902      	bls.n	800ca18 <_free_r+0x80>
 800ca12:	230c      	movs	r3, #12
 800ca14:	6003      	str	r3, [r0, #0]
 800ca16:	e7d3      	b.n	800c9c0 <_free_r+0x28>
 800ca18:	6825      	ldr	r5, [r4, #0]
 800ca1a:	1961      	adds	r1, r4, r5
 800ca1c:	428b      	cmp	r3, r1
 800ca1e:	bf04      	itt	eq
 800ca20:	6819      	ldreq	r1, [r3, #0]
 800ca22:	685b      	ldreq	r3, [r3, #4]
 800ca24:	6063      	str	r3, [r4, #4]
 800ca26:	bf04      	itt	eq
 800ca28:	1949      	addeq	r1, r1, r5
 800ca2a:	6021      	streq	r1, [r4, #0]
 800ca2c:	6054      	str	r4, [r2, #4]
 800ca2e:	e7c7      	b.n	800c9c0 <_free_r+0x28>
 800ca30:	b003      	add	sp, #12
 800ca32:	bd30      	pop	{r4, r5, pc}
 800ca34:	200002bc 	.word	0x200002bc

0800ca38 <_malloc_r>:
 800ca38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca3a:	1ccd      	adds	r5, r1, #3
 800ca3c:	f025 0503 	bic.w	r5, r5, #3
 800ca40:	3508      	adds	r5, #8
 800ca42:	2d0c      	cmp	r5, #12
 800ca44:	bf38      	it	cc
 800ca46:	250c      	movcc	r5, #12
 800ca48:	2d00      	cmp	r5, #0
 800ca4a:	4606      	mov	r6, r0
 800ca4c:	db01      	blt.n	800ca52 <_malloc_r+0x1a>
 800ca4e:	42a9      	cmp	r1, r5
 800ca50:	d903      	bls.n	800ca5a <_malloc_r+0x22>
 800ca52:	230c      	movs	r3, #12
 800ca54:	6033      	str	r3, [r6, #0]
 800ca56:	2000      	movs	r0, #0
 800ca58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca5a:	f000 fc03 	bl	800d264 <__malloc_lock>
 800ca5e:	4921      	ldr	r1, [pc, #132]	; (800cae4 <_malloc_r+0xac>)
 800ca60:	680a      	ldr	r2, [r1, #0]
 800ca62:	4614      	mov	r4, r2
 800ca64:	b99c      	cbnz	r4, 800ca8e <_malloc_r+0x56>
 800ca66:	4f20      	ldr	r7, [pc, #128]	; (800cae8 <_malloc_r+0xb0>)
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	b923      	cbnz	r3, 800ca76 <_malloc_r+0x3e>
 800ca6c:	4621      	mov	r1, r4
 800ca6e:	4630      	mov	r0, r6
 800ca70:	f000 faf2 	bl	800d058 <_sbrk_r>
 800ca74:	6038      	str	r0, [r7, #0]
 800ca76:	4629      	mov	r1, r5
 800ca78:	4630      	mov	r0, r6
 800ca7a:	f000 faed 	bl	800d058 <_sbrk_r>
 800ca7e:	1c43      	adds	r3, r0, #1
 800ca80:	d123      	bne.n	800caca <_malloc_r+0x92>
 800ca82:	230c      	movs	r3, #12
 800ca84:	6033      	str	r3, [r6, #0]
 800ca86:	4630      	mov	r0, r6
 800ca88:	f000 fbf2 	bl	800d270 <__malloc_unlock>
 800ca8c:	e7e3      	b.n	800ca56 <_malloc_r+0x1e>
 800ca8e:	6823      	ldr	r3, [r4, #0]
 800ca90:	1b5b      	subs	r3, r3, r5
 800ca92:	d417      	bmi.n	800cac4 <_malloc_r+0x8c>
 800ca94:	2b0b      	cmp	r3, #11
 800ca96:	d903      	bls.n	800caa0 <_malloc_r+0x68>
 800ca98:	6023      	str	r3, [r4, #0]
 800ca9a:	441c      	add	r4, r3
 800ca9c:	6025      	str	r5, [r4, #0]
 800ca9e:	e004      	b.n	800caaa <_malloc_r+0x72>
 800caa0:	6863      	ldr	r3, [r4, #4]
 800caa2:	42a2      	cmp	r2, r4
 800caa4:	bf0c      	ite	eq
 800caa6:	600b      	streq	r3, [r1, #0]
 800caa8:	6053      	strne	r3, [r2, #4]
 800caaa:	4630      	mov	r0, r6
 800caac:	f000 fbe0 	bl	800d270 <__malloc_unlock>
 800cab0:	f104 000b 	add.w	r0, r4, #11
 800cab4:	1d23      	adds	r3, r4, #4
 800cab6:	f020 0007 	bic.w	r0, r0, #7
 800caba:	1ac2      	subs	r2, r0, r3
 800cabc:	d0cc      	beq.n	800ca58 <_malloc_r+0x20>
 800cabe:	1a1b      	subs	r3, r3, r0
 800cac0:	50a3      	str	r3, [r4, r2]
 800cac2:	e7c9      	b.n	800ca58 <_malloc_r+0x20>
 800cac4:	4622      	mov	r2, r4
 800cac6:	6864      	ldr	r4, [r4, #4]
 800cac8:	e7cc      	b.n	800ca64 <_malloc_r+0x2c>
 800caca:	1cc4      	adds	r4, r0, #3
 800cacc:	f024 0403 	bic.w	r4, r4, #3
 800cad0:	42a0      	cmp	r0, r4
 800cad2:	d0e3      	beq.n	800ca9c <_malloc_r+0x64>
 800cad4:	1a21      	subs	r1, r4, r0
 800cad6:	4630      	mov	r0, r6
 800cad8:	f000 fabe 	bl	800d058 <_sbrk_r>
 800cadc:	3001      	adds	r0, #1
 800cade:	d1dd      	bne.n	800ca9c <_malloc_r+0x64>
 800cae0:	e7cf      	b.n	800ca82 <_malloc_r+0x4a>
 800cae2:	bf00      	nop
 800cae4:	200002bc 	.word	0x200002bc
 800cae8:	200002c0 	.word	0x200002c0

0800caec <__ssputs_r>:
 800caec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf0:	688e      	ldr	r6, [r1, #8]
 800caf2:	429e      	cmp	r6, r3
 800caf4:	4682      	mov	sl, r0
 800caf6:	460c      	mov	r4, r1
 800caf8:	4690      	mov	r8, r2
 800cafa:	461f      	mov	r7, r3
 800cafc:	d838      	bhi.n	800cb70 <__ssputs_r+0x84>
 800cafe:	898a      	ldrh	r2, [r1, #12]
 800cb00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb04:	d032      	beq.n	800cb6c <__ssputs_r+0x80>
 800cb06:	6825      	ldr	r5, [r4, #0]
 800cb08:	6909      	ldr	r1, [r1, #16]
 800cb0a:	eba5 0901 	sub.w	r9, r5, r1
 800cb0e:	6965      	ldr	r5, [r4, #20]
 800cb10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb18:	3301      	adds	r3, #1
 800cb1a:	444b      	add	r3, r9
 800cb1c:	106d      	asrs	r5, r5, #1
 800cb1e:	429d      	cmp	r5, r3
 800cb20:	bf38      	it	cc
 800cb22:	461d      	movcc	r5, r3
 800cb24:	0553      	lsls	r3, r2, #21
 800cb26:	d531      	bpl.n	800cb8c <__ssputs_r+0xa0>
 800cb28:	4629      	mov	r1, r5
 800cb2a:	f7ff ff85 	bl	800ca38 <_malloc_r>
 800cb2e:	4606      	mov	r6, r0
 800cb30:	b950      	cbnz	r0, 800cb48 <__ssputs_r+0x5c>
 800cb32:	230c      	movs	r3, #12
 800cb34:	f8ca 3000 	str.w	r3, [sl]
 800cb38:	89a3      	ldrh	r3, [r4, #12]
 800cb3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb3e:	81a3      	strh	r3, [r4, #12]
 800cb40:	f04f 30ff 	mov.w	r0, #4294967295
 800cb44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb48:	6921      	ldr	r1, [r4, #16]
 800cb4a:	464a      	mov	r2, r9
 800cb4c:	f7ff fb88 	bl	800c260 <memcpy>
 800cb50:	89a3      	ldrh	r3, [r4, #12]
 800cb52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb5a:	81a3      	strh	r3, [r4, #12]
 800cb5c:	6126      	str	r6, [r4, #16]
 800cb5e:	6165      	str	r5, [r4, #20]
 800cb60:	444e      	add	r6, r9
 800cb62:	eba5 0509 	sub.w	r5, r5, r9
 800cb66:	6026      	str	r6, [r4, #0]
 800cb68:	60a5      	str	r5, [r4, #8]
 800cb6a:	463e      	mov	r6, r7
 800cb6c:	42be      	cmp	r6, r7
 800cb6e:	d900      	bls.n	800cb72 <__ssputs_r+0x86>
 800cb70:	463e      	mov	r6, r7
 800cb72:	4632      	mov	r2, r6
 800cb74:	6820      	ldr	r0, [r4, #0]
 800cb76:	4641      	mov	r1, r8
 800cb78:	f000 fb5a 	bl	800d230 <memmove>
 800cb7c:	68a3      	ldr	r3, [r4, #8]
 800cb7e:	6822      	ldr	r2, [r4, #0]
 800cb80:	1b9b      	subs	r3, r3, r6
 800cb82:	4432      	add	r2, r6
 800cb84:	60a3      	str	r3, [r4, #8]
 800cb86:	6022      	str	r2, [r4, #0]
 800cb88:	2000      	movs	r0, #0
 800cb8a:	e7db      	b.n	800cb44 <__ssputs_r+0x58>
 800cb8c:	462a      	mov	r2, r5
 800cb8e:	f000 fb75 	bl	800d27c <_realloc_r>
 800cb92:	4606      	mov	r6, r0
 800cb94:	2800      	cmp	r0, #0
 800cb96:	d1e1      	bne.n	800cb5c <__ssputs_r+0x70>
 800cb98:	6921      	ldr	r1, [r4, #16]
 800cb9a:	4650      	mov	r0, sl
 800cb9c:	f7ff fefc 	bl	800c998 <_free_r>
 800cba0:	e7c7      	b.n	800cb32 <__ssputs_r+0x46>
	...

0800cba4 <_svfiprintf_r>:
 800cba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba8:	4698      	mov	r8, r3
 800cbaa:	898b      	ldrh	r3, [r1, #12]
 800cbac:	061b      	lsls	r3, r3, #24
 800cbae:	b09d      	sub	sp, #116	; 0x74
 800cbb0:	4607      	mov	r7, r0
 800cbb2:	460d      	mov	r5, r1
 800cbb4:	4614      	mov	r4, r2
 800cbb6:	d50e      	bpl.n	800cbd6 <_svfiprintf_r+0x32>
 800cbb8:	690b      	ldr	r3, [r1, #16]
 800cbba:	b963      	cbnz	r3, 800cbd6 <_svfiprintf_r+0x32>
 800cbbc:	2140      	movs	r1, #64	; 0x40
 800cbbe:	f7ff ff3b 	bl	800ca38 <_malloc_r>
 800cbc2:	6028      	str	r0, [r5, #0]
 800cbc4:	6128      	str	r0, [r5, #16]
 800cbc6:	b920      	cbnz	r0, 800cbd2 <_svfiprintf_r+0x2e>
 800cbc8:	230c      	movs	r3, #12
 800cbca:	603b      	str	r3, [r7, #0]
 800cbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd0:	e0d1      	b.n	800cd76 <_svfiprintf_r+0x1d2>
 800cbd2:	2340      	movs	r3, #64	; 0x40
 800cbd4:	616b      	str	r3, [r5, #20]
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	9309      	str	r3, [sp, #36]	; 0x24
 800cbda:	2320      	movs	r3, #32
 800cbdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cbe0:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbe4:	2330      	movs	r3, #48	; 0x30
 800cbe6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cd90 <_svfiprintf_r+0x1ec>
 800cbea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbee:	f04f 0901 	mov.w	r9, #1
 800cbf2:	4623      	mov	r3, r4
 800cbf4:	469a      	mov	sl, r3
 800cbf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbfa:	b10a      	cbz	r2, 800cc00 <_svfiprintf_r+0x5c>
 800cbfc:	2a25      	cmp	r2, #37	; 0x25
 800cbfe:	d1f9      	bne.n	800cbf4 <_svfiprintf_r+0x50>
 800cc00:	ebba 0b04 	subs.w	fp, sl, r4
 800cc04:	d00b      	beq.n	800cc1e <_svfiprintf_r+0x7a>
 800cc06:	465b      	mov	r3, fp
 800cc08:	4622      	mov	r2, r4
 800cc0a:	4629      	mov	r1, r5
 800cc0c:	4638      	mov	r0, r7
 800cc0e:	f7ff ff6d 	bl	800caec <__ssputs_r>
 800cc12:	3001      	adds	r0, #1
 800cc14:	f000 80aa 	beq.w	800cd6c <_svfiprintf_r+0x1c8>
 800cc18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc1a:	445a      	add	r2, fp
 800cc1c:	9209      	str	r2, [sp, #36]	; 0x24
 800cc1e:	f89a 3000 	ldrb.w	r3, [sl]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	f000 80a2 	beq.w	800cd6c <_svfiprintf_r+0x1c8>
 800cc28:	2300      	movs	r3, #0
 800cc2a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc32:	f10a 0a01 	add.w	sl, sl, #1
 800cc36:	9304      	str	r3, [sp, #16]
 800cc38:	9307      	str	r3, [sp, #28]
 800cc3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc3e:	931a      	str	r3, [sp, #104]	; 0x68
 800cc40:	4654      	mov	r4, sl
 800cc42:	2205      	movs	r2, #5
 800cc44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc48:	4851      	ldr	r0, [pc, #324]	; (800cd90 <_svfiprintf_r+0x1ec>)
 800cc4a:	f7f3 fac9 	bl	80001e0 <memchr>
 800cc4e:	9a04      	ldr	r2, [sp, #16]
 800cc50:	b9d8      	cbnz	r0, 800cc8a <_svfiprintf_r+0xe6>
 800cc52:	06d0      	lsls	r0, r2, #27
 800cc54:	bf44      	itt	mi
 800cc56:	2320      	movmi	r3, #32
 800cc58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc5c:	0711      	lsls	r1, r2, #28
 800cc5e:	bf44      	itt	mi
 800cc60:	232b      	movmi	r3, #43	; 0x2b
 800cc62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc66:	f89a 3000 	ldrb.w	r3, [sl]
 800cc6a:	2b2a      	cmp	r3, #42	; 0x2a
 800cc6c:	d015      	beq.n	800cc9a <_svfiprintf_r+0xf6>
 800cc6e:	9a07      	ldr	r2, [sp, #28]
 800cc70:	4654      	mov	r4, sl
 800cc72:	2000      	movs	r0, #0
 800cc74:	f04f 0c0a 	mov.w	ip, #10
 800cc78:	4621      	mov	r1, r4
 800cc7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc7e:	3b30      	subs	r3, #48	; 0x30
 800cc80:	2b09      	cmp	r3, #9
 800cc82:	d94e      	bls.n	800cd22 <_svfiprintf_r+0x17e>
 800cc84:	b1b0      	cbz	r0, 800ccb4 <_svfiprintf_r+0x110>
 800cc86:	9207      	str	r2, [sp, #28]
 800cc88:	e014      	b.n	800ccb4 <_svfiprintf_r+0x110>
 800cc8a:	eba0 0308 	sub.w	r3, r0, r8
 800cc8e:	fa09 f303 	lsl.w	r3, r9, r3
 800cc92:	4313      	orrs	r3, r2
 800cc94:	9304      	str	r3, [sp, #16]
 800cc96:	46a2      	mov	sl, r4
 800cc98:	e7d2      	b.n	800cc40 <_svfiprintf_r+0x9c>
 800cc9a:	9b03      	ldr	r3, [sp, #12]
 800cc9c:	1d19      	adds	r1, r3, #4
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	9103      	str	r1, [sp, #12]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	bfbb      	ittet	lt
 800cca6:	425b      	neglt	r3, r3
 800cca8:	f042 0202 	orrlt.w	r2, r2, #2
 800ccac:	9307      	strge	r3, [sp, #28]
 800ccae:	9307      	strlt	r3, [sp, #28]
 800ccb0:	bfb8      	it	lt
 800ccb2:	9204      	strlt	r2, [sp, #16]
 800ccb4:	7823      	ldrb	r3, [r4, #0]
 800ccb6:	2b2e      	cmp	r3, #46	; 0x2e
 800ccb8:	d10c      	bne.n	800ccd4 <_svfiprintf_r+0x130>
 800ccba:	7863      	ldrb	r3, [r4, #1]
 800ccbc:	2b2a      	cmp	r3, #42	; 0x2a
 800ccbe:	d135      	bne.n	800cd2c <_svfiprintf_r+0x188>
 800ccc0:	9b03      	ldr	r3, [sp, #12]
 800ccc2:	1d1a      	adds	r2, r3, #4
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	9203      	str	r2, [sp, #12]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	bfb8      	it	lt
 800cccc:	f04f 33ff 	movlt.w	r3, #4294967295
 800ccd0:	3402      	adds	r4, #2
 800ccd2:	9305      	str	r3, [sp, #20]
 800ccd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cda0 <_svfiprintf_r+0x1fc>
 800ccd8:	7821      	ldrb	r1, [r4, #0]
 800ccda:	2203      	movs	r2, #3
 800ccdc:	4650      	mov	r0, sl
 800ccde:	f7f3 fa7f 	bl	80001e0 <memchr>
 800cce2:	b140      	cbz	r0, 800ccf6 <_svfiprintf_r+0x152>
 800cce4:	2340      	movs	r3, #64	; 0x40
 800cce6:	eba0 000a 	sub.w	r0, r0, sl
 800ccea:	fa03 f000 	lsl.w	r0, r3, r0
 800ccee:	9b04      	ldr	r3, [sp, #16]
 800ccf0:	4303      	orrs	r3, r0
 800ccf2:	3401      	adds	r4, #1
 800ccf4:	9304      	str	r3, [sp, #16]
 800ccf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccfa:	4826      	ldr	r0, [pc, #152]	; (800cd94 <_svfiprintf_r+0x1f0>)
 800ccfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd00:	2206      	movs	r2, #6
 800cd02:	f7f3 fa6d 	bl	80001e0 <memchr>
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d038      	beq.n	800cd7c <_svfiprintf_r+0x1d8>
 800cd0a:	4b23      	ldr	r3, [pc, #140]	; (800cd98 <_svfiprintf_r+0x1f4>)
 800cd0c:	bb1b      	cbnz	r3, 800cd56 <_svfiprintf_r+0x1b2>
 800cd0e:	9b03      	ldr	r3, [sp, #12]
 800cd10:	3307      	adds	r3, #7
 800cd12:	f023 0307 	bic.w	r3, r3, #7
 800cd16:	3308      	adds	r3, #8
 800cd18:	9303      	str	r3, [sp, #12]
 800cd1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd1c:	4433      	add	r3, r6
 800cd1e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd20:	e767      	b.n	800cbf2 <_svfiprintf_r+0x4e>
 800cd22:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd26:	460c      	mov	r4, r1
 800cd28:	2001      	movs	r0, #1
 800cd2a:	e7a5      	b.n	800cc78 <_svfiprintf_r+0xd4>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	3401      	adds	r4, #1
 800cd30:	9305      	str	r3, [sp, #20]
 800cd32:	4619      	mov	r1, r3
 800cd34:	f04f 0c0a 	mov.w	ip, #10
 800cd38:	4620      	mov	r0, r4
 800cd3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd3e:	3a30      	subs	r2, #48	; 0x30
 800cd40:	2a09      	cmp	r2, #9
 800cd42:	d903      	bls.n	800cd4c <_svfiprintf_r+0x1a8>
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d0c5      	beq.n	800ccd4 <_svfiprintf_r+0x130>
 800cd48:	9105      	str	r1, [sp, #20]
 800cd4a:	e7c3      	b.n	800ccd4 <_svfiprintf_r+0x130>
 800cd4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd50:	4604      	mov	r4, r0
 800cd52:	2301      	movs	r3, #1
 800cd54:	e7f0      	b.n	800cd38 <_svfiprintf_r+0x194>
 800cd56:	ab03      	add	r3, sp, #12
 800cd58:	9300      	str	r3, [sp, #0]
 800cd5a:	462a      	mov	r2, r5
 800cd5c:	4b0f      	ldr	r3, [pc, #60]	; (800cd9c <_svfiprintf_r+0x1f8>)
 800cd5e:	a904      	add	r1, sp, #16
 800cd60:	4638      	mov	r0, r7
 800cd62:	f7fd fca1 	bl	800a6a8 <_printf_float>
 800cd66:	1c42      	adds	r2, r0, #1
 800cd68:	4606      	mov	r6, r0
 800cd6a:	d1d6      	bne.n	800cd1a <_svfiprintf_r+0x176>
 800cd6c:	89ab      	ldrh	r3, [r5, #12]
 800cd6e:	065b      	lsls	r3, r3, #25
 800cd70:	f53f af2c 	bmi.w	800cbcc <_svfiprintf_r+0x28>
 800cd74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd76:	b01d      	add	sp, #116	; 0x74
 800cd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd7c:	ab03      	add	r3, sp, #12
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	462a      	mov	r2, r5
 800cd82:	4b06      	ldr	r3, [pc, #24]	; (800cd9c <_svfiprintf_r+0x1f8>)
 800cd84:	a904      	add	r1, sp, #16
 800cd86:	4638      	mov	r0, r7
 800cd88:	f7fd ff32 	bl	800abf0 <_printf_i>
 800cd8c:	e7eb      	b.n	800cd66 <_svfiprintf_r+0x1c2>
 800cd8e:	bf00      	nop
 800cd90:	0801a6dc 	.word	0x0801a6dc
 800cd94:	0801a6e6 	.word	0x0801a6e6
 800cd98:	0800a6a9 	.word	0x0800a6a9
 800cd9c:	0800caed 	.word	0x0800caed
 800cda0:	0801a6e2 	.word	0x0801a6e2

0800cda4 <__sfputc_r>:
 800cda4:	6893      	ldr	r3, [r2, #8]
 800cda6:	3b01      	subs	r3, #1
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	b410      	push	{r4}
 800cdac:	6093      	str	r3, [r2, #8]
 800cdae:	da08      	bge.n	800cdc2 <__sfputc_r+0x1e>
 800cdb0:	6994      	ldr	r4, [r2, #24]
 800cdb2:	42a3      	cmp	r3, r4
 800cdb4:	db01      	blt.n	800cdba <__sfputc_r+0x16>
 800cdb6:	290a      	cmp	r1, #10
 800cdb8:	d103      	bne.n	800cdc2 <__sfputc_r+0x1e>
 800cdba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdbe:	f7fe b8eb 	b.w	800af98 <__swbuf_r>
 800cdc2:	6813      	ldr	r3, [r2, #0]
 800cdc4:	1c58      	adds	r0, r3, #1
 800cdc6:	6010      	str	r0, [r2, #0]
 800cdc8:	7019      	strb	r1, [r3, #0]
 800cdca:	4608      	mov	r0, r1
 800cdcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdd0:	4770      	bx	lr

0800cdd2 <__sfputs_r>:
 800cdd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd4:	4606      	mov	r6, r0
 800cdd6:	460f      	mov	r7, r1
 800cdd8:	4614      	mov	r4, r2
 800cdda:	18d5      	adds	r5, r2, r3
 800cddc:	42ac      	cmp	r4, r5
 800cdde:	d101      	bne.n	800cde4 <__sfputs_r+0x12>
 800cde0:	2000      	movs	r0, #0
 800cde2:	e007      	b.n	800cdf4 <__sfputs_r+0x22>
 800cde4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cde8:	463a      	mov	r2, r7
 800cdea:	4630      	mov	r0, r6
 800cdec:	f7ff ffda 	bl	800cda4 <__sfputc_r>
 800cdf0:	1c43      	adds	r3, r0, #1
 800cdf2:	d1f3      	bne.n	800cddc <__sfputs_r+0xa>
 800cdf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cdf8 <_vfiprintf_r>:
 800cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdfc:	460d      	mov	r5, r1
 800cdfe:	b09d      	sub	sp, #116	; 0x74
 800ce00:	4614      	mov	r4, r2
 800ce02:	4698      	mov	r8, r3
 800ce04:	4606      	mov	r6, r0
 800ce06:	b118      	cbz	r0, 800ce10 <_vfiprintf_r+0x18>
 800ce08:	6983      	ldr	r3, [r0, #24]
 800ce0a:	b90b      	cbnz	r3, 800ce10 <_vfiprintf_r+0x18>
 800ce0c:	f7ff f916 	bl	800c03c <__sinit>
 800ce10:	4b89      	ldr	r3, [pc, #548]	; (800d038 <_vfiprintf_r+0x240>)
 800ce12:	429d      	cmp	r5, r3
 800ce14:	d11b      	bne.n	800ce4e <_vfiprintf_r+0x56>
 800ce16:	6875      	ldr	r5, [r6, #4]
 800ce18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce1a:	07d9      	lsls	r1, r3, #31
 800ce1c:	d405      	bmi.n	800ce2a <_vfiprintf_r+0x32>
 800ce1e:	89ab      	ldrh	r3, [r5, #12]
 800ce20:	059a      	lsls	r2, r3, #22
 800ce22:	d402      	bmi.n	800ce2a <_vfiprintf_r+0x32>
 800ce24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce26:	f7ff f9ac 	bl	800c182 <__retarget_lock_acquire_recursive>
 800ce2a:	89ab      	ldrh	r3, [r5, #12]
 800ce2c:	071b      	lsls	r3, r3, #28
 800ce2e:	d501      	bpl.n	800ce34 <_vfiprintf_r+0x3c>
 800ce30:	692b      	ldr	r3, [r5, #16]
 800ce32:	b9eb      	cbnz	r3, 800ce70 <_vfiprintf_r+0x78>
 800ce34:	4629      	mov	r1, r5
 800ce36:	4630      	mov	r0, r6
 800ce38:	f7fe f900 	bl	800b03c <__swsetup_r>
 800ce3c:	b1c0      	cbz	r0, 800ce70 <_vfiprintf_r+0x78>
 800ce3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce40:	07dc      	lsls	r4, r3, #31
 800ce42:	d50e      	bpl.n	800ce62 <_vfiprintf_r+0x6a>
 800ce44:	f04f 30ff 	mov.w	r0, #4294967295
 800ce48:	b01d      	add	sp, #116	; 0x74
 800ce4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce4e:	4b7b      	ldr	r3, [pc, #492]	; (800d03c <_vfiprintf_r+0x244>)
 800ce50:	429d      	cmp	r5, r3
 800ce52:	d101      	bne.n	800ce58 <_vfiprintf_r+0x60>
 800ce54:	68b5      	ldr	r5, [r6, #8]
 800ce56:	e7df      	b.n	800ce18 <_vfiprintf_r+0x20>
 800ce58:	4b79      	ldr	r3, [pc, #484]	; (800d040 <_vfiprintf_r+0x248>)
 800ce5a:	429d      	cmp	r5, r3
 800ce5c:	bf08      	it	eq
 800ce5e:	68f5      	ldreq	r5, [r6, #12]
 800ce60:	e7da      	b.n	800ce18 <_vfiprintf_r+0x20>
 800ce62:	89ab      	ldrh	r3, [r5, #12]
 800ce64:	0598      	lsls	r0, r3, #22
 800ce66:	d4ed      	bmi.n	800ce44 <_vfiprintf_r+0x4c>
 800ce68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce6a:	f7ff f98b 	bl	800c184 <__retarget_lock_release_recursive>
 800ce6e:	e7e9      	b.n	800ce44 <_vfiprintf_r+0x4c>
 800ce70:	2300      	movs	r3, #0
 800ce72:	9309      	str	r3, [sp, #36]	; 0x24
 800ce74:	2320      	movs	r3, #32
 800ce76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce7e:	2330      	movs	r3, #48	; 0x30
 800ce80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d044 <_vfiprintf_r+0x24c>
 800ce84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce88:	f04f 0901 	mov.w	r9, #1
 800ce8c:	4623      	mov	r3, r4
 800ce8e:	469a      	mov	sl, r3
 800ce90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce94:	b10a      	cbz	r2, 800ce9a <_vfiprintf_r+0xa2>
 800ce96:	2a25      	cmp	r2, #37	; 0x25
 800ce98:	d1f9      	bne.n	800ce8e <_vfiprintf_r+0x96>
 800ce9a:	ebba 0b04 	subs.w	fp, sl, r4
 800ce9e:	d00b      	beq.n	800ceb8 <_vfiprintf_r+0xc0>
 800cea0:	465b      	mov	r3, fp
 800cea2:	4622      	mov	r2, r4
 800cea4:	4629      	mov	r1, r5
 800cea6:	4630      	mov	r0, r6
 800cea8:	f7ff ff93 	bl	800cdd2 <__sfputs_r>
 800ceac:	3001      	adds	r0, #1
 800ceae:	f000 80aa 	beq.w	800d006 <_vfiprintf_r+0x20e>
 800ceb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ceb4:	445a      	add	r2, fp
 800ceb6:	9209      	str	r2, [sp, #36]	; 0x24
 800ceb8:	f89a 3000 	ldrb.w	r3, [sl]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	f000 80a2 	beq.w	800d006 <_vfiprintf_r+0x20e>
 800cec2:	2300      	movs	r3, #0
 800cec4:	f04f 32ff 	mov.w	r2, #4294967295
 800cec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cecc:	f10a 0a01 	add.w	sl, sl, #1
 800ced0:	9304      	str	r3, [sp, #16]
 800ced2:	9307      	str	r3, [sp, #28]
 800ced4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ced8:	931a      	str	r3, [sp, #104]	; 0x68
 800ceda:	4654      	mov	r4, sl
 800cedc:	2205      	movs	r2, #5
 800cede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cee2:	4858      	ldr	r0, [pc, #352]	; (800d044 <_vfiprintf_r+0x24c>)
 800cee4:	f7f3 f97c 	bl	80001e0 <memchr>
 800cee8:	9a04      	ldr	r2, [sp, #16]
 800ceea:	b9d8      	cbnz	r0, 800cf24 <_vfiprintf_r+0x12c>
 800ceec:	06d1      	lsls	r1, r2, #27
 800ceee:	bf44      	itt	mi
 800cef0:	2320      	movmi	r3, #32
 800cef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cef6:	0713      	lsls	r3, r2, #28
 800cef8:	bf44      	itt	mi
 800cefa:	232b      	movmi	r3, #43	; 0x2b
 800cefc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf00:	f89a 3000 	ldrb.w	r3, [sl]
 800cf04:	2b2a      	cmp	r3, #42	; 0x2a
 800cf06:	d015      	beq.n	800cf34 <_vfiprintf_r+0x13c>
 800cf08:	9a07      	ldr	r2, [sp, #28]
 800cf0a:	4654      	mov	r4, sl
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	f04f 0c0a 	mov.w	ip, #10
 800cf12:	4621      	mov	r1, r4
 800cf14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf18:	3b30      	subs	r3, #48	; 0x30
 800cf1a:	2b09      	cmp	r3, #9
 800cf1c:	d94e      	bls.n	800cfbc <_vfiprintf_r+0x1c4>
 800cf1e:	b1b0      	cbz	r0, 800cf4e <_vfiprintf_r+0x156>
 800cf20:	9207      	str	r2, [sp, #28]
 800cf22:	e014      	b.n	800cf4e <_vfiprintf_r+0x156>
 800cf24:	eba0 0308 	sub.w	r3, r0, r8
 800cf28:	fa09 f303 	lsl.w	r3, r9, r3
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	9304      	str	r3, [sp, #16]
 800cf30:	46a2      	mov	sl, r4
 800cf32:	e7d2      	b.n	800ceda <_vfiprintf_r+0xe2>
 800cf34:	9b03      	ldr	r3, [sp, #12]
 800cf36:	1d19      	adds	r1, r3, #4
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	9103      	str	r1, [sp, #12]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	bfbb      	ittet	lt
 800cf40:	425b      	neglt	r3, r3
 800cf42:	f042 0202 	orrlt.w	r2, r2, #2
 800cf46:	9307      	strge	r3, [sp, #28]
 800cf48:	9307      	strlt	r3, [sp, #28]
 800cf4a:	bfb8      	it	lt
 800cf4c:	9204      	strlt	r2, [sp, #16]
 800cf4e:	7823      	ldrb	r3, [r4, #0]
 800cf50:	2b2e      	cmp	r3, #46	; 0x2e
 800cf52:	d10c      	bne.n	800cf6e <_vfiprintf_r+0x176>
 800cf54:	7863      	ldrb	r3, [r4, #1]
 800cf56:	2b2a      	cmp	r3, #42	; 0x2a
 800cf58:	d135      	bne.n	800cfc6 <_vfiprintf_r+0x1ce>
 800cf5a:	9b03      	ldr	r3, [sp, #12]
 800cf5c:	1d1a      	adds	r2, r3, #4
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	9203      	str	r2, [sp, #12]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	bfb8      	it	lt
 800cf66:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf6a:	3402      	adds	r4, #2
 800cf6c:	9305      	str	r3, [sp, #20]
 800cf6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d054 <_vfiprintf_r+0x25c>
 800cf72:	7821      	ldrb	r1, [r4, #0]
 800cf74:	2203      	movs	r2, #3
 800cf76:	4650      	mov	r0, sl
 800cf78:	f7f3 f932 	bl	80001e0 <memchr>
 800cf7c:	b140      	cbz	r0, 800cf90 <_vfiprintf_r+0x198>
 800cf7e:	2340      	movs	r3, #64	; 0x40
 800cf80:	eba0 000a 	sub.w	r0, r0, sl
 800cf84:	fa03 f000 	lsl.w	r0, r3, r0
 800cf88:	9b04      	ldr	r3, [sp, #16]
 800cf8a:	4303      	orrs	r3, r0
 800cf8c:	3401      	adds	r4, #1
 800cf8e:	9304      	str	r3, [sp, #16]
 800cf90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf94:	482c      	ldr	r0, [pc, #176]	; (800d048 <_vfiprintf_r+0x250>)
 800cf96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf9a:	2206      	movs	r2, #6
 800cf9c:	f7f3 f920 	bl	80001e0 <memchr>
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	d03f      	beq.n	800d024 <_vfiprintf_r+0x22c>
 800cfa4:	4b29      	ldr	r3, [pc, #164]	; (800d04c <_vfiprintf_r+0x254>)
 800cfa6:	bb1b      	cbnz	r3, 800cff0 <_vfiprintf_r+0x1f8>
 800cfa8:	9b03      	ldr	r3, [sp, #12]
 800cfaa:	3307      	adds	r3, #7
 800cfac:	f023 0307 	bic.w	r3, r3, #7
 800cfb0:	3308      	adds	r3, #8
 800cfb2:	9303      	str	r3, [sp, #12]
 800cfb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfb6:	443b      	add	r3, r7
 800cfb8:	9309      	str	r3, [sp, #36]	; 0x24
 800cfba:	e767      	b.n	800ce8c <_vfiprintf_r+0x94>
 800cfbc:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfc0:	460c      	mov	r4, r1
 800cfc2:	2001      	movs	r0, #1
 800cfc4:	e7a5      	b.n	800cf12 <_vfiprintf_r+0x11a>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	3401      	adds	r4, #1
 800cfca:	9305      	str	r3, [sp, #20]
 800cfcc:	4619      	mov	r1, r3
 800cfce:	f04f 0c0a 	mov.w	ip, #10
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfd8:	3a30      	subs	r2, #48	; 0x30
 800cfda:	2a09      	cmp	r2, #9
 800cfdc:	d903      	bls.n	800cfe6 <_vfiprintf_r+0x1ee>
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d0c5      	beq.n	800cf6e <_vfiprintf_r+0x176>
 800cfe2:	9105      	str	r1, [sp, #20]
 800cfe4:	e7c3      	b.n	800cf6e <_vfiprintf_r+0x176>
 800cfe6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfea:	4604      	mov	r4, r0
 800cfec:	2301      	movs	r3, #1
 800cfee:	e7f0      	b.n	800cfd2 <_vfiprintf_r+0x1da>
 800cff0:	ab03      	add	r3, sp, #12
 800cff2:	9300      	str	r3, [sp, #0]
 800cff4:	462a      	mov	r2, r5
 800cff6:	4b16      	ldr	r3, [pc, #88]	; (800d050 <_vfiprintf_r+0x258>)
 800cff8:	a904      	add	r1, sp, #16
 800cffa:	4630      	mov	r0, r6
 800cffc:	f7fd fb54 	bl	800a6a8 <_printf_float>
 800d000:	4607      	mov	r7, r0
 800d002:	1c78      	adds	r0, r7, #1
 800d004:	d1d6      	bne.n	800cfb4 <_vfiprintf_r+0x1bc>
 800d006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d008:	07d9      	lsls	r1, r3, #31
 800d00a:	d405      	bmi.n	800d018 <_vfiprintf_r+0x220>
 800d00c:	89ab      	ldrh	r3, [r5, #12]
 800d00e:	059a      	lsls	r2, r3, #22
 800d010:	d402      	bmi.n	800d018 <_vfiprintf_r+0x220>
 800d012:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d014:	f7ff f8b6 	bl	800c184 <__retarget_lock_release_recursive>
 800d018:	89ab      	ldrh	r3, [r5, #12]
 800d01a:	065b      	lsls	r3, r3, #25
 800d01c:	f53f af12 	bmi.w	800ce44 <_vfiprintf_r+0x4c>
 800d020:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d022:	e711      	b.n	800ce48 <_vfiprintf_r+0x50>
 800d024:	ab03      	add	r3, sp, #12
 800d026:	9300      	str	r3, [sp, #0]
 800d028:	462a      	mov	r2, r5
 800d02a:	4b09      	ldr	r3, [pc, #36]	; (800d050 <_vfiprintf_r+0x258>)
 800d02c:	a904      	add	r1, sp, #16
 800d02e:	4630      	mov	r0, r6
 800d030:	f7fd fdde 	bl	800abf0 <_printf_i>
 800d034:	e7e4      	b.n	800d000 <_vfiprintf_r+0x208>
 800d036:	bf00      	nop
 800d038:	0801a540 	.word	0x0801a540
 800d03c:	0801a560 	.word	0x0801a560
 800d040:	0801a520 	.word	0x0801a520
 800d044:	0801a6dc 	.word	0x0801a6dc
 800d048:	0801a6e6 	.word	0x0801a6e6
 800d04c:	0800a6a9 	.word	0x0800a6a9
 800d050:	0800cdd3 	.word	0x0800cdd3
 800d054:	0801a6e2 	.word	0x0801a6e2

0800d058 <_sbrk_r>:
 800d058:	b538      	push	{r3, r4, r5, lr}
 800d05a:	4d06      	ldr	r5, [pc, #24]	; (800d074 <_sbrk_r+0x1c>)
 800d05c:	2300      	movs	r3, #0
 800d05e:	4604      	mov	r4, r0
 800d060:	4608      	mov	r0, r1
 800d062:	602b      	str	r3, [r5, #0]
 800d064:	f7f8 fdf4 	bl	8005c50 <_sbrk>
 800d068:	1c43      	adds	r3, r0, #1
 800d06a:	d102      	bne.n	800d072 <_sbrk_r+0x1a>
 800d06c:	682b      	ldr	r3, [r5, #0]
 800d06e:	b103      	cbz	r3, 800d072 <_sbrk_r+0x1a>
 800d070:	6023      	str	r3, [r4, #0]
 800d072:	bd38      	pop	{r3, r4, r5, pc}
 800d074:	200005ac 	.word	0x200005ac

0800d078 <__sread>:
 800d078:	b510      	push	{r4, lr}
 800d07a:	460c      	mov	r4, r1
 800d07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d080:	f000 f922 	bl	800d2c8 <_read_r>
 800d084:	2800      	cmp	r0, #0
 800d086:	bfab      	itete	ge
 800d088:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d08a:	89a3      	ldrhlt	r3, [r4, #12]
 800d08c:	181b      	addge	r3, r3, r0
 800d08e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d092:	bfac      	ite	ge
 800d094:	6563      	strge	r3, [r4, #84]	; 0x54
 800d096:	81a3      	strhlt	r3, [r4, #12]
 800d098:	bd10      	pop	{r4, pc}

0800d09a <__swrite>:
 800d09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d09e:	461f      	mov	r7, r3
 800d0a0:	898b      	ldrh	r3, [r1, #12]
 800d0a2:	05db      	lsls	r3, r3, #23
 800d0a4:	4605      	mov	r5, r0
 800d0a6:	460c      	mov	r4, r1
 800d0a8:	4616      	mov	r6, r2
 800d0aa:	d505      	bpl.n	800d0b8 <__swrite+0x1e>
 800d0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0b0:	2302      	movs	r3, #2
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	f000 f898 	bl	800d1e8 <_lseek_r>
 800d0b8:	89a3      	ldrh	r3, [r4, #12]
 800d0ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0c2:	81a3      	strh	r3, [r4, #12]
 800d0c4:	4632      	mov	r2, r6
 800d0c6:	463b      	mov	r3, r7
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ce:	f000 b817 	b.w	800d100 <_write_r>

0800d0d2 <__sseek>:
 800d0d2:	b510      	push	{r4, lr}
 800d0d4:	460c      	mov	r4, r1
 800d0d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0da:	f000 f885 	bl	800d1e8 <_lseek_r>
 800d0de:	1c43      	adds	r3, r0, #1
 800d0e0:	89a3      	ldrh	r3, [r4, #12]
 800d0e2:	bf15      	itete	ne
 800d0e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d0e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d0ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d0ee:	81a3      	strheq	r3, [r4, #12]
 800d0f0:	bf18      	it	ne
 800d0f2:	81a3      	strhne	r3, [r4, #12]
 800d0f4:	bd10      	pop	{r4, pc}

0800d0f6 <__sclose>:
 800d0f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0fa:	f000 b831 	b.w	800d160 <_close_r>
	...

0800d100 <_write_r>:
 800d100:	b538      	push	{r3, r4, r5, lr}
 800d102:	4d07      	ldr	r5, [pc, #28]	; (800d120 <_write_r+0x20>)
 800d104:	4604      	mov	r4, r0
 800d106:	4608      	mov	r0, r1
 800d108:	4611      	mov	r1, r2
 800d10a:	2200      	movs	r2, #0
 800d10c:	602a      	str	r2, [r5, #0]
 800d10e:	461a      	mov	r2, r3
 800d110:	f7f8 fd4d 	bl	8005bae <_write>
 800d114:	1c43      	adds	r3, r0, #1
 800d116:	d102      	bne.n	800d11e <_write_r+0x1e>
 800d118:	682b      	ldr	r3, [r5, #0]
 800d11a:	b103      	cbz	r3, 800d11e <_write_r+0x1e>
 800d11c:	6023      	str	r3, [r4, #0]
 800d11e:	bd38      	pop	{r3, r4, r5, pc}
 800d120:	200005ac 	.word	0x200005ac

0800d124 <__assert_func>:
 800d124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d126:	4614      	mov	r4, r2
 800d128:	461a      	mov	r2, r3
 800d12a:	4b09      	ldr	r3, [pc, #36]	; (800d150 <__assert_func+0x2c>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	4605      	mov	r5, r0
 800d130:	68d8      	ldr	r0, [r3, #12]
 800d132:	b14c      	cbz	r4, 800d148 <__assert_func+0x24>
 800d134:	4b07      	ldr	r3, [pc, #28]	; (800d154 <__assert_func+0x30>)
 800d136:	9100      	str	r1, [sp, #0]
 800d138:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d13c:	4906      	ldr	r1, [pc, #24]	; (800d158 <__assert_func+0x34>)
 800d13e:	462b      	mov	r3, r5
 800d140:	f000 f81e 	bl	800d180 <fiprintf>
 800d144:	f000 f8df 	bl	800d306 <abort>
 800d148:	4b04      	ldr	r3, [pc, #16]	; (800d15c <__assert_func+0x38>)
 800d14a:	461c      	mov	r4, r3
 800d14c:	e7f3      	b.n	800d136 <__assert_func+0x12>
 800d14e:	bf00      	nop
 800d150:	20000014 	.word	0x20000014
 800d154:	0801a6ed 	.word	0x0801a6ed
 800d158:	0801a6fa 	.word	0x0801a6fa
 800d15c:	0801a728 	.word	0x0801a728

0800d160 <_close_r>:
 800d160:	b538      	push	{r3, r4, r5, lr}
 800d162:	4d06      	ldr	r5, [pc, #24]	; (800d17c <_close_r+0x1c>)
 800d164:	2300      	movs	r3, #0
 800d166:	4604      	mov	r4, r0
 800d168:	4608      	mov	r0, r1
 800d16a:	602b      	str	r3, [r5, #0]
 800d16c:	f7f8 fd3b 	bl	8005be6 <_close>
 800d170:	1c43      	adds	r3, r0, #1
 800d172:	d102      	bne.n	800d17a <_close_r+0x1a>
 800d174:	682b      	ldr	r3, [r5, #0]
 800d176:	b103      	cbz	r3, 800d17a <_close_r+0x1a>
 800d178:	6023      	str	r3, [r4, #0]
 800d17a:	bd38      	pop	{r3, r4, r5, pc}
 800d17c:	200005ac 	.word	0x200005ac

0800d180 <fiprintf>:
 800d180:	b40e      	push	{r1, r2, r3}
 800d182:	b503      	push	{r0, r1, lr}
 800d184:	4601      	mov	r1, r0
 800d186:	ab03      	add	r3, sp, #12
 800d188:	4805      	ldr	r0, [pc, #20]	; (800d1a0 <fiprintf+0x20>)
 800d18a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d18e:	6800      	ldr	r0, [r0, #0]
 800d190:	9301      	str	r3, [sp, #4]
 800d192:	f7ff fe31 	bl	800cdf8 <_vfiprintf_r>
 800d196:	b002      	add	sp, #8
 800d198:	f85d eb04 	ldr.w	lr, [sp], #4
 800d19c:	b003      	add	sp, #12
 800d19e:	4770      	bx	lr
 800d1a0:	20000014 	.word	0x20000014

0800d1a4 <_fstat_r>:
 800d1a4:	b538      	push	{r3, r4, r5, lr}
 800d1a6:	4d07      	ldr	r5, [pc, #28]	; (800d1c4 <_fstat_r+0x20>)
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	4608      	mov	r0, r1
 800d1ae:	4611      	mov	r1, r2
 800d1b0:	602b      	str	r3, [r5, #0]
 800d1b2:	f7f8 fd24 	bl	8005bfe <_fstat>
 800d1b6:	1c43      	adds	r3, r0, #1
 800d1b8:	d102      	bne.n	800d1c0 <_fstat_r+0x1c>
 800d1ba:	682b      	ldr	r3, [r5, #0]
 800d1bc:	b103      	cbz	r3, 800d1c0 <_fstat_r+0x1c>
 800d1be:	6023      	str	r3, [r4, #0]
 800d1c0:	bd38      	pop	{r3, r4, r5, pc}
 800d1c2:	bf00      	nop
 800d1c4:	200005ac 	.word	0x200005ac

0800d1c8 <_isatty_r>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	4d06      	ldr	r5, [pc, #24]	; (800d1e4 <_isatty_r+0x1c>)
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	4608      	mov	r0, r1
 800d1d2:	602b      	str	r3, [r5, #0]
 800d1d4:	f7f8 fd23 	bl	8005c1e <_isatty>
 800d1d8:	1c43      	adds	r3, r0, #1
 800d1da:	d102      	bne.n	800d1e2 <_isatty_r+0x1a>
 800d1dc:	682b      	ldr	r3, [r5, #0]
 800d1de:	b103      	cbz	r3, 800d1e2 <_isatty_r+0x1a>
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	bd38      	pop	{r3, r4, r5, pc}
 800d1e4:	200005ac 	.word	0x200005ac

0800d1e8 <_lseek_r>:
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	4d07      	ldr	r5, [pc, #28]	; (800d208 <_lseek_r+0x20>)
 800d1ec:	4604      	mov	r4, r0
 800d1ee:	4608      	mov	r0, r1
 800d1f0:	4611      	mov	r1, r2
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	602a      	str	r2, [r5, #0]
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	f7f8 fd1c 	bl	8005c34 <_lseek>
 800d1fc:	1c43      	adds	r3, r0, #1
 800d1fe:	d102      	bne.n	800d206 <_lseek_r+0x1e>
 800d200:	682b      	ldr	r3, [r5, #0]
 800d202:	b103      	cbz	r3, 800d206 <_lseek_r+0x1e>
 800d204:	6023      	str	r3, [r4, #0]
 800d206:	bd38      	pop	{r3, r4, r5, pc}
 800d208:	200005ac 	.word	0x200005ac

0800d20c <__ascii_mbtowc>:
 800d20c:	b082      	sub	sp, #8
 800d20e:	b901      	cbnz	r1, 800d212 <__ascii_mbtowc+0x6>
 800d210:	a901      	add	r1, sp, #4
 800d212:	b142      	cbz	r2, 800d226 <__ascii_mbtowc+0x1a>
 800d214:	b14b      	cbz	r3, 800d22a <__ascii_mbtowc+0x1e>
 800d216:	7813      	ldrb	r3, [r2, #0]
 800d218:	600b      	str	r3, [r1, #0]
 800d21a:	7812      	ldrb	r2, [r2, #0]
 800d21c:	1e10      	subs	r0, r2, #0
 800d21e:	bf18      	it	ne
 800d220:	2001      	movne	r0, #1
 800d222:	b002      	add	sp, #8
 800d224:	4770      	bx	lr
 800d226:	4610      	mov	r0, r2
 800d228:	e7fb      	b.n	800d222 <__ascii_mbtowc+0x16>
 800d22a:	f06f 0001 	mvn.w	r0, #1
 800d22e:	e7f8      	b.n	800d222 <__ascii_mbtowc+0x16>

0800d230 <memmove>:
 800d230:	4288      	cmp	r0, r1
 800d232:	b510      	push	{r4, lr}
 800d234:	eb01 0402 	add.w	r4, r1, r2
 800d238:	d902      	bls.n	800d240 <memmove+0x10>
 800d23a:	4284      	cmp	r4, r0
 800d23c:	4623      	mov	r3, r4
 800d23e:	d807      	bhi.n	800d250 <memmove+0x20>
 800d240:	1e43      	subs	r3, r0, #1
 800d242:	42a1      	cmp	r1, r4
 800d244:	d008      	beq.n	800d258 <memmove+0x28>
 800d246:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d24a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d24e:	e7f8      	b.n	800d242 <memmove+0x12>
 800d250:	4402      	add	r2, r0
 800d252:	4601      	mov	r1, r0
 800d254:	428a      	cmp	r2, r1
 800d256:	d100      	bne.n	800d25a <memmove+0x2a>
 800d258:	bd10      	pop	{r4, pc}
 800d25a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d25e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d262:	e7f7      	b.n	800d254 <memmove+0x24>

0800d264 <__malloc_lock>:
 800d264:	4801      	ldr	r0, [pc, #4]	; (800d26c <__malloc_lock+0x8>)
 800d266:	f7fe bf8c 	b.w	800c182 <__retarget_lock_acquire_recursive>
 800d26a:	bf00      	nop
 800d26c:	200005a4 	.word	0x200005a4

0800d270 <__malloc_unlock>:
 800d270:	4801      	ldr	r0, [pc, #4]	; (800d278 <__malloc_unlock+0x8>)
 800d272:	f7fe bf87 	b.w	800c184 <__retarget_lock_release_recursive>
 800d276:	bf00      	nop
 800d278:	200005a4 	.word	0x200005a4

0800d27c <_realloc_r>:
 800d27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d27e:	4607      	mov	r7, r0
 800d280:	4614      	mov	r4, r2
 800d282:	460e      	mov	r6, r1
 800d284:	b921      	cbnz	r1, 800d290 <_realloc_r+0x14>
 800d286:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d28a:	4611      	mov	r1, r2
 800d28c:	f7ff bbd4 	b.w	800ca38 <_malloc_r>
 800d290:	b922      	cbnz	r2, 800d29c <_realloc_r+0x20>
 800d292:	f7ff fb81 	bl	800c998 <_free_r>
 800d296:	4625      	mov	r5, r4
 800d298:	4628      	mov	r0, r5
 800d29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d29c:	f000 f83a 	bl	800d314 <_malloc_usable_size_r>
 800d2a0:	42a0      	cmp	r0, r4
 800d2a2:	d20f      	bcs.n	800d2c4 <_realloc_r+0x48>
 800d2a4:	4621      	mov	r1, r4
 800d2a6:	4638      	mov	r0, r7
 800d2a8:	f7ff fbc6 	bl	800ca38 <_malloc_r>
 800d2ac:	4605      	mov	r5, r0
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	d0f2      	beq.n	800d298 <_realloc_r+0x1c>
 800d2b2:	4631      	mov	r1, r6
 800d2b4:	4622      	mov	r2, r4
 800d2b6:	f7fe ffd3 	bl	800c260 <memcpy>
 800d2ba:	4631      	mov	r1, r6
 800d2bc:	4638      	mov	r0, r7
 800d2be:	f7ff fb6b 	bl	800c998 <_free_r>
 800d2c2:	e7e9      	b.n	800d298 <_realloc_r+0x1c>
 800d2c4:	4635      	mov	r5, r6
 800d2c6:	e7e7      	b.n	800d298 <_realloc_r+0x1c>

0800d2c8 <_read_r>:
 800d2c8:	b538      	push	{r3, r4, r5, lr}
 800d2ca:	4d07      	ldr	r5, [pc, #28]	; (800d2e8 <_read_r+0x20>)
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	4608      	mov	r0, r1
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	602a      	str	r2, [r5, #0]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	f7f8 fc4c 	bl	8005b74 <_read>
 800d2dc:	1c43      	adds	r3, r0, #1
 800d2de:	d102      	bne.n	800d2e6 <_read_r+0x1e>
 800d2e0:	682b      	ldr	r3, [r5, #0]
 800d2e2:	b103      	cbz	r3, 800d2e6 <_read_r+0x1e>
 800d2e4:	6023      	str	r3, [r4, #0]
 800d2e6:	bd38      	pop	{r3, r4, r5, pc}
 800d2e8:	200005ac 	.word	0x200005ac

0800d2ec <__ascii_wctomb>:
 800d2ec:	b149      	cbz	r1, 800d302 <__ascii_wctomb+0x16>
 800d2ee:	2aff      	cmp	r2, #255	; 0xff
 800d2f0:	bf85      	ittet	hi
 800d2f2:	238a      	movhi	r3, #138	; 0x8a
 800d2f4:	6003      	strhi	r3, [r0, #0]
 800d2f6:	700a      	strbls	r2, [r1, #0]
 800d2f8:	f04f 30ff 	movhi.w	r0, #4294967295
 800d2fc:	bf98      	it	ls
 800d2fe:	2001      	movls	r0, #1
 800d300:	4770      	bx	lr
 800d302:	4608      	mov	r0, r1
 800d304:	4770      	bx	lr

0800d306 <abort>:
 800d306:	b508      	push	{r3, lr}
 800d308:	2006      	movs	r0, #6
 800d30a:	f000 f833 	bl	800d374 <raise>
 800d30e:	2001      	movs	r0, #1
 800d310:	f7f8 fc26 	bl	8005b60 <_exit>

0800d314 <_malloc_usable_size_r>:
 800d314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d318:	1f18      	subs	r0, r3, #4
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	bfbc      	itt	lt
 800d31e:	580b      	ldrlt	r3, [r1, r0]
 800d320:	18c0      	addlt	r0, r0, r3
 800d322:	4770      	bx	lr

0800d324 <_raise_r>:
 800d324:	291f      	cmp	r1, #31
 800d326:	b538      	push	{r3, r4, r5, lr}
 800d328:	4604      	mov	r4, r0
 800d32a:	460d      	mov	r5, r1
 800d32c:	d904      	bls.n	800d338 <_raise_r+0x14>
 800d32e:	2316      	movs	r3, #22
 800d330:	6003      	str	r3, [r0, #0]
 800d332:	f04f 30ff 	mov.w	r0, #4294967295
 800d336:	bd38      	pop	{r3, r4, r5, pc}
 800d338:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d33a:	b112      	cbz	r2, 800d342 <_raise_r+0x1e>
 800d33c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d340:	b94b      	cbnz	r3, 800d356 <_raise_r+0x32>
 800d342:	4620      	mov	r0, r4
 800d344:	f000 f830 	bl	800d3a8 <_getpid_r>
 800d348:	462a      	mov	r2, r5
 800d34a:	4601      	mov	r1, r0
 800d34c:	4620      	mov	r0, r4
 800d34e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d352:	f000 b817 	b.w	800d384 <_kill_r>
 800d356:	2b01      	cmp	r3, #1
 800d358:	d00a      	beq.n	800d370 <_raise_r+0x4c>
 800d35a:	1c59      	adds	r1, r3, #1
 800d35c:	d103      	bne.n	800d366 <_raise_r+0x42>
 800d35e:	2316      	movs	r3, #22
 800d360:	6003      	str	r3, [r0, #0]
 800d362:	2001      	movs	r0, #1
 800d364:	e7e7      	b.n	800d336 <_raise_r+0x12>
 800d366:	2400      	movs	r4, #0
 800d368:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d36c:	4628      	mov	r0, r5
 800d36e:	4798      	blx	r3
 800d370:	2000      	movs	r0, #0
 800d372:	e7e0      	b.n	800d336 <_raise_r+0x12>

0800d374 <raise>:
 800d374:	4b02      	ldr	r3, [pc, #8]	; (800d380 <raise+0xc>)
 800d376:	4601      	mov	r1, r0
 800d378:	6818      	ldr	r0, [r3, #0]
 800d37a:	f7ff bfd3 	b.w	800d324 <_raise_r>
 800d37e:	bf00      	nop
 800d380:	20000014 	.word	0x20000014

0800d384 <_kill_r>:
 800d384:	b538      	push	{r3, r4, r5, lr}
 800d386:	4d07      	ldr	r5, [pc, #28]	; (800d3a4 <_kill_r+0x20>)
 800d388:	2300      	movs	r3, #0
 800d38a:	4604      	mov	r4, r0
 800d38c:	4608      	mov	r0, r1
 800d38e:	4611      	mov	r1, r2
 800d390:	602b      	str	r3, [r5, #0]
 800d392:	f7f8 fbd5 	bl	8005b40 <_kill>
 800d396:	1c43      	adds	r3, r0, #1
 800d398:	d102      	bne.n	800d3a0 <_kill_r+0x1c>
 800d39a:	682b      	ldr	r3, [r5, #0]
 800d39c:	b103      	cbz	r3, 800d3a0 <_kill_r+0x1c>
 800d39e:	6023      	str	r3, [r4, #0]
 800d3a0:	bd38      	pop	{r3, r4, r5, pc}
 800d3a2:	bf00      	nop
 800d3a4:	200005ac 	.word	0x200005ac

0800d3a8 <_getpid_r>:
 800d3a8:	f7f8 bbc2 	b.w	8005b30 <_getpid>
 800d3ac:	0000      	movs	r0, r0
	...

0800d3b0 <floor>:
 800d3b0:	ec51 0b10 	vmov	r0, r1, d0
 800d3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d3bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d3c0:	2e13      	cmp	r6, #19
 800d3c2:	ee10 5a10 	vmov	r5, s0
 800d3c6:	ee10 8a10 	vmov	r8, s0
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	dc32      	bgt.n	800d434 <floor+0x84>
 800d3ce:	2e00      	cmp	r6, #0
 800d3d0:	da14      	bge.n	800d3fc <floor+0x4c>
 800d3d2:	a333      	add	r3, pc, #204	; (adr r3, 800d4a0 <floor+0xf0>)
 800d3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d8:	f7f2 ff58 	bl	800028c <__adddf3>
 800d3dc:	2200      	movs	r2, #0
 800d3de:	2300      	movs	r3, #0
 800d3e0:	f7f3 fb9a 	bl	8000b18 <__aeabi_dcmpgt>
 800d3e4:	b138      	cbz	r0, 800d3f6 <floor+0x46>
 800d3e6:	2c00      	cmp	r4, #0
 800d3e8:	da57      	bge.n	800d49a <floor+0xea>
 800d3ea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d3ee:	431d      	orrs	r5, r3
 800d3f0:	d001      	beq.n	800d3f6 <floor+0x46>
 800d3f2:	4c2d      	ldr	r4, [pc, #180]	; (800d4a8 <floor+0xf8>)
 800d3f4:	2500      	movs	r5, #0
 800d3f6:	4621      	mov	r1, r4
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	e025      	b.n	800d448 <floor+0x98>
 800d3fc:	4f2b      	ldr	r7, [pc, #172]	; (800d4ac <floor+0xfc>)
 800d3fe:	4137      	asrs	r7, r6
 800d400:	ea01 0307 	and.w	r3, r1, r7
 800d404:	4303      	orrs	r3, r0
 800d406:	d01f      	beq.n	800d448 <floor+0x98>
 800d408:	a325      	add	r3, pc, #148	; (adr r3, 800d4a0 <floor+0xf0>)
 800d40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40e:	f7f2 ff3d 	bl	800028c <__adddf3>
 800d412:	2200      	movs	r2, #0
 800d414:	2300      	movs	r3, #0
 800d416:	f7f3 fb7f 	bl	8000b18 <__aeabi_dcmpgt>
 800d41a:	2800      	cmp	r0, #0
 800d41c:	d0eb      	beq.n	800d3f6 <floor+0x46>
 800d41e:	2c00      	cmp	r4, #0
 800d420:	bfbe      	ittt	lt
 800d422:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d426:	fa43 f606 	asrlt.w	r6, r3, r6
 800d42a:	19a4      	addlt	r4, r4, r6
 800d42c:	ea24 0407 	bic.w	r4, r4, r7
 800d430:	2500      	movs	r5, #0
 800d432:	e7e0      	b.n	800d3f6 <floor+0x46>
 800d434:	2e33      	cmp	r6, #51	; 0x33
 800d436:	dd0b      	ble.n	800d450 <floor+0xa0>
 800d438:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d43c:	d104      	bne.n	800d448 <floor+0x98>
 800d43e:	ee10 2a10 	vmov	r2, s0
 800d442:	460b      	mov	r3, r1
 800d444:	f7f2 ff22 	bl	800028c <__adddf3>
 800d448:	ec41 0b10 	vmov	d0, r0, r1
 800d44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d450:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d454:	f04f 33ff 	mov.w	r3, #4294967295
 800d458:	fa23 f707 	lsr.w	r7, r3, r7
 800d45c:	4207      	tst	r7, r0
 800d45e:	d0f3      	beq.n	800d448 <floor+0x98>
 800d460:	a30f      	add	r3, pc, #60	; (adr r3, 800d4a0 <floor+0xf0>)
 800d462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d466:	f7f2 ff11 	bl	800028c <__adddf3>
 800d46a:	2200      	movs	r2, #0
 800d46c:	2300      	movs	r3, #0
 800d46e:	f7f3 fb53 	bl	8000b18 <__aeabi_dcmpgt>
 800d472:	2800      	cmp	r0, #0
 800d474:	d0bf      	beq.n	800d3f6 <floor+0x46>
 800d476:	2c00      	cmp	r4, #0
 800d478:	da02      	bge.n	800d480 <floor+0xd0>
 800d47a:	2e14      	cmp	r6, #20
 800d47c:	d103      	bne.n	800d486 <floor+0xd6>
 800d47e:	3401      	adds	r4, #1
 800d480:	ea25 0507 	bic.w	r5, r5, r7
 800d484:	e7b7      	b.n	800d3f6 <floor+0x46>
 800d486:	2301      	movs	r3, #1
 800d488:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d48c:	fa03 f606 	lsl.w	r6, r3, r6
 800d490:	4435      	add	r5, r6
 800d492:	4545      	cmp	r5, r8
 800d494:	bf38      	it	cc
 800d496:	18e4      	addcc	r4, r4, r3
 800d498:	e7f2      	b.n	800d480 <floor+0xd0>
 800d49a:	2500      	movs	r5, #0
 800d49c:	462c      	mov	r4, r5
 800d49e:	e7aa      	b.n	800d3f6 <floor+0x46>
 800d4a0:	8800759c 	.word	0x8800759c
 800d4a4:	7e37e43c 	.word	0x7e37e43c
 800d4a8:	bff00000 	.word	0xbff00000
 800d4ac:	000fffff 	.word	0x000fffff

0800d4b0 <sqrtf>:
 800d4b0:	b508      	push	{r3, lr}
 800d4b2:	ed2d 8b02 	vpush	{d8}
 800d4b6:	eeb0 8a40 	vmov.f32	s16, s0
 800d4ba:	f000 f81f 	bl	800d4fc <__ieee754_sqrtf>
 800d4be:	4b0d      	ldr	r3, [pc, #52]	; (800d4f4 <sqrtf+0x44>)
 800d4c0:	f993 3000 	ldrsb.w	r3, [r3]
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	d011      	beq.n	800d4ec <sqrtf+0x3c>
 800d4c8:	eeb4 8a48 	vcmp.f32	s16, s16
 800d4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d0:	d60c      	bvs.n	800d4ec <sqrtf+0x3c>
 800d4d2:	eddf 8a09 	vldr	s17, [pc, #36]	; 800d4f8 <sqrtf+0x48>
 800d4d6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4de:	d505      	bpl.n	800d4ec <sqrtf+0x3c>
 800d4e0:	f7fd f810 	bl	800a504 <__errno>
 800d4e4:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d4e8:	2321      	movs	r3, #33	; 0x21
 800d4ea:	6003      	str	r3, [r0, #0]
 800d4ec:	ecbd 8b02 	vpop	{d8}
 800d4f0:	bd08      	pop	{r3, pc}
 800d4f2:	bf00      	nop
 800d4f4:	200001e4 	.word	0x200001e4
 800d4f8:	00000000 	.word	0x00000000

0800d4fc <__ieee754_sqrtf>:
 800d4fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d500:	4770      	bx	lr
	...

0800d504 <_init>:
 800d504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d506:	bf00      	nop
 800d508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d50a:	bc08      	pop	{r3}
 800d50c:	469e      	mov	lr, r3
 800d50e:	4770      	bx	lr

0800d510 <_fini>:
 800d510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d512:	bf00      	nop
 800d514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d516:	bc08      	pop	{r3}
 800d518:	469e      	mov	lr, r3
 800d51a:	4770      	bx	lr
